{
  "providerName": "rebilly.com",
  "openApiRaw": "https://api-reference.rebilly.com/openapi.json",
  "homepage": "rebilly.com",
  "apiVersion": "2.1",
  "methods": [
    {
      "url": "/3dsecure",
      "method": "get3DSecureCollection",
      "httpMethod": "get",
      "tag": "3D Secure",
      "description": "Retrieve a list of ThreeDSecure entries",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/3dsecure",
      "method": "post3DSecure",
      "httpMethod": "post",
      "tag": "3D Secure",
      "description": "Create a ThreeDSecure entry",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "cavv",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "eci",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "enrolled",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enrollmentEci",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "gatewayAccountId",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "payerAuthResponseStatus",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentCardId",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "signatureVerification",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "websiteId",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "xid",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/3dsecure/{id}",
      "method": "get3DSecure",
      "httpMethod": "get",
      "tag": "3D Secure",
      "description": "Retrieve a ThreeDSecure entry",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/aml",
      "method": "getAmlEntry",
      "httpMethod": "get",
      "tag": "AML",
      "description": "Search PEP/Sanctions/Adverse Media lists",
      "parameters": [
        {
          "name": "Organization-Id",
          "schema": "string",
          "required": false,
          "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)."
        },
        {
          "name": "firstName",
          "schema": "string",
          "required": true,
          "description": "First name of individual to search."
        },
        {
          "name": "lastName",
          "schema": "string",
          "required": true,
          "description": "Last name of individual to search."
        },
        {
          "name": "dob",
          "schema": "string",
          "required": false,
          "description": "Date of birth in format YYYY-MM-DD."
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": "Country of individual as an ISO Alpha-2 code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attachments",
      "method": "getAttachmentCollection",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Retrieve a list of Attachments",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/attachments",
      "method": "postAttachment",
      "httpMethod": "post",
      "tag": "Files",
      "description": "Create an Attachment",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "relatedId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "relatedType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/attachments/{id}",
      "method": "deleteAttachment",
      "httpMethod": "delete",
      "tag": "Files",
      "description": "Delete an Attachment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/attachments/{id}",
      "method": "getAttachment",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Retrieve an Attachment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/attachments/{id}",
      "method": "putAttachment",
      "httpMethod": "put",
      "tag": "Files",
      "description": "Update the Attachment with predefined ID",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "relatedId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "relatedType",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/authentication-options",
      "method": "getAuthenticationOption",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Read current authentication options",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/authentication-options",
      "method": "putAuthenticationOption",
      "httpMethod": "put",
      "tag": "Customer Authentication",
      "description": "Change authentication options",
      "parameters": [
        {
          "name": "authTokenTtl",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "credentialTtl",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "passwordPattern",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resetTokenTtl",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/authentication-tokens",
      "method": "getAuthenticationTokenCollection",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Retrieve a list of auth tokens",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/authentication-tokens",
      "method": "postAuthenticationToken",
      "httpMethod": "post",
      "tag": "Customer Authentication",
      "description": "Login",
      "parameters": [
        {
          "name": "credentialId",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "otpRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/authentication-tokens/{token}",
      "method": "deleteAuthenticationToken",
      "httpMethod": "delete",
      "tag": "Customer Authentication",
      "description": "Logout a customer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/authentication-tokens/{token}",
      "method": "getAuthenticationTokenVerification",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Verify",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/authentication-tokens/{token}/exchange",
      "method": "postAuthenticationTokenExchange",
      "httpMethod": "post",
      "tag": "Customer Authentication",
      "description": "Exchange",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "acl",
          "schema": "array",
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customClaims",
          "schema": "object",
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "invalidate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "oneTimePassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/bank-accounts",
      "method": "getBankAccountCollection",
      "httpMethod": "get",
      "tag": "Bank Accounts",
      "description": "Retrieve a list of bank accounts",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/bank-accounts",
      "method": "postBankAccount",
      "httpMethod": "post",
      "tag": "Bank Accounts",
      "description": "Create a Bank Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/bank-accounts/{id}",
      "method": "getBankAccount",
      "httpMethod": "get",
      "tag": "Bank Accounts",
      "description": "Retrieve a Bank Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/bank-accounts/{id}",
      "method": "patchBankAccount",
      "httpMethod": "patch",
      "tag": "Bank Accounts",
      "description": "Update a bank account's values",
      "parameters": [
        {
          "name": "accountType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bankName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "billingAddress",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customFields",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/bank-accounts/{id}",
      "method": "putBankAccount",
      "httpMethod": "put",
      "tag": "Bank Accounts",
      "description": "Create a Bank Account with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/bank-accounts/{id}/deactivation",
      "method": "postBankAccountDeactivation",
      "httpMethod": "post",
      "tag": "Bank Accounts",
      "description": "Deactivate a Bank Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/blocklists",
      "method": "getBlocklistCollection",
      "httpMethod": "get",
      "tag": "Blocklists",
      "description": "Retrieve a list of blocklists",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/blocklists",
      "method": "postBlocklist",
      "httpMethod": "post",
      "tag": "Blocklists",
      "description": "Create a blocklist",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "expirationTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/blocklists/{id}",
      "method": "deleteBlocklist",
      "httpMethod": "delete",
      "tag": "Blocklists",
      "description": "Delete a blocklist",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/blocklists/{id}",
      "method": "getBlocklist",
      "httpMethod": "get",
      "tag": "Blocklists",
      "description": "Retrieve a blocklist",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/blocklists/{id}",
      "method": "putBlocklist",
      "httpMethod": "put",
      "tag": "Blocklists",
      "description": "Create a blocklist with predefined ID",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "expirationTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/coupons",
      "method": "getCouponCollection",
      "httpMethod": "get",
      "tag": "Coupons",
      "description": "Retrieve a list of coupons",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/coupons",
      "method": "postCoupon",
      "httpMethod": "post",
      "tag": "Coupons",
      "description": "Create a coupon",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "discount",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "issuedTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redemptionsCount",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "restrictions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Coupons and Discounts."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/coupons-redemptions",
      "method": "getCouponRedemptionCollection",
      "httpMethod": "get",
      "tag": "Coupons",
      "description": "Retrieve a list of coupon redemptions",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/coupons-redemptions",
      "method": "postCouponRedemption",
      "httpMethod": "post",
      "tag": "Coupons",
      "description": "Redeem a coupon",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "additionalRestrictions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "canceledTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "couponId",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Coupons redemption log."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/coupons-redemptions/{id}",
      "method": "getCouponRedemption",
      "httpMethod": "get",
      "tag": "Coupons",
      "description": "Retrieve a coupon redemption with specified identifier string",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Coupons redemption log."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/coupons-redemptions/{id}/cancel",
      "method": "postCouponRedemptionCancellation",
      "httpMethod": "post",
      "tag": "Coupons",
      "description": "Cancel a coupon redemption",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/coupons/{id}",
      "method": "getCoupon",
      "httpMethod": "get",
      "tag": "Coupons",
      "description": "Retrieve a coupon",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Coupons and Discounts."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/coupons/{id}",
      "method": "putCoupon",
      "httpMethod": "put",
      "tag": "Coupons",
      "description": "Create or update a coupon with predefined coupon ID",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "discount",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "issuedTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redemptionsCount",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "restrictions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Coupons and Discounts."
        },
        {
          "statusCode": "201",
          "description": "Coupons and Discounts."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/coupons/{id}/expiration",
      "method": "postCouponExpiration",
      "httpMethod": "post",
      "tag": "Coupons",
      "description": "Set a coupon's expiration time",
      "parameters": [
        {
          "name": "expiredTime",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Coupons and Discounts."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/credentials",
      "method": "getCredentialCollection",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Retrieve a list of credentials",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/credentials",
      "method": "postCredential",
      "httpMethod": "post",
      "tag": "Customer Authentication",
      "description": "Create a credential",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/credentials/{id}",
      "method": "deleteCredential",
      "httpMethod": "delete",
      "tag": "Customer Authentication",
      "description": "Delete a credential",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/credentials/{id}",
      "method": "getCredential",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Retrieve a credential",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/credentials/{id}",
      "method": "putCredential",
      "httpMethod": "put",
      "tag": "Customer Authentication",
      "description": "Create or update a credential with predefined ID",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/custom-fields/{resource}",
      "method": "getCustomFieldCollection",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "description": "Retrieve Custom Fields",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of custom fields."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/custom-fields/{resource}/{name}",
      "method": "getCustomField",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "description": "Retrieve a Custom Field",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A separate Custom Field schema."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/custom-fields/{resource}/{name}",
      "method": "putCustomField",
      "httpMethod": "put",
      "tag": "Custom Fields",
      "description": "Create or alter a Custom Field",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "additionalSchema",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A separate Custom Field schema."
        },
        {
          "statusCode": "201",
          "description": "A separate Custom Field schema."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customer-timeline-custom-events",
      "method": "getCustomerTimelineCustomEventTypeCollection",
      "httpMethod": "get",
      "tag": "Customers Timeline",
      "description": "Retrieve a list of customer timeline custom event types",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer-timeline-custom-events",
      "method": "postCustomerTimelineCustomEventType",
      "httpMethod": "post",
      "tag": "Customers",
      "description": "Create Customer Timeline custom event type",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customer-timeline-custom-events/{id}",
      "method": "getCustomerTimelineCustomEventType",
      "httpMethod": "get",
      "tag": "Customers Timeline",
      "description": "Retrieve customer timeline custom event type with specified identifier string",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer-timeline-events",
      "method": "getCustomerTimelineEventCollection",
      "httpMethod": "get",
      "tag": "Customers Timeline",
      "description": "Retrieve a list of customer timeline messages for all customers",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers",
      "method": "getCustomerCollection",
      "httpMethod": "get",
      "tag": "Customers",
      "description": "Retrieve a list of customers",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers",
      "method": "postCustomer",
      "httpMethod": "post",
      "tag": "Customers",
      "description": "Create a customer (without an ID)",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "averageValue",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customFields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "defaultPaymentInstrument",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "invoiceCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastPaymentTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "lifetimeRevenue",
          "schema": "object",
          "description": ""
        },
        {
          "name": "paymentCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "paymentToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "primaryAddress",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "websiteId",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customers/{id}",
      "method": "deleteCustomer",
      "httpMethod": "delete",
      "tag": "Customers",
      "description": "Merge and delete a customer",
      "parameters": [
        {
          "name": "targetCustomerId",
          "schema": "string",
          "required": true,
          "description": "The customer identifier to get the data of the deleted duplicate customer."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}",
      "method": "getCustomer",
      "httpMethod": "get",
      "tag": "Customers",
      "description": "Retrieve a customer",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}",
      "method": "putCustomer",
      "httpMethod": "put",
      "tag": "Customers",
      "description": "Upsert a customer with predefined ID",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "averageValue",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customFields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "defaultPaymentInstrument",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "invoiceCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastPaymentTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "lifetimeRevenue",
          "schema": "object",
          "description": ""
        },
        {
          "name": "paymentCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "paymentToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "primaryAddress",
          "schema": "object",
          "description": ""
        },
        {
          "name": "revision",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "websiteId",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customers/{id}/lead-source",
      "method": "deleteCustomerLeadSource",
      "httpMethod": "delete",
      "tag": "Customers",
      "description": "Delete a Lead Source for a customer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/lead-source",
      "method": "getCustomerLeadSource",
      "httpMethod": "get",
      "tag": "Customers",
      "description": "Retrieve a customer's Lead Source",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/lead-source",
      "method": "putCustomerLeadSource",
      "httpMethod": "put",
      "tag": "Customers",
      "description": "Create a Lead Source for a customer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customers/{id}/timeline",
      "method": "getCustomerTimelineCollection",
      "httpMethod": "get",
      "tag": "Customers Timeline",
      "description": "Retrieve a list of customer timeline messages",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/timeline",
      "method": "postCustomerTimeline",
      "httpMethod": "post",
      "tag": "Customers Timeline",
      "description": "Create a customer Timeline comment or custom defined event",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "customData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "customEventType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "extraData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occurredTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "triggeredBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/customers/{id}/timeline/{messageId}",
      "method": "deleteCustomerTimeline",
      "httpMethod": "delete",
      "tag": "Customers Timeline",
      "description": "Delete a Customer Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/timeline/{messageId}",
      "method": "getCustomerTimeline",
      "httpMethod": "get",
      "tag": "Customers Timeline",
      "description": "Retrieve a customer Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/upcoming-invoices",
      "method": "getCustomerUpcomingInvoiceCollection",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve customer's upcoming invoices",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/digital-wallets/validation",
      "method": "postDigitalWalletValidation",
      "httpMethod": "post",
      "tag": "Payment Tokens",
      "description": "Validate a digital wallet session",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/disputes",
      "method": "getDisputeCollection",
      "httpMethod": "get",
      "tag": "Disputes",
      "description": "Retrieve a list of disputes",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/disputes",
      "method": "postDispute",
      "httpMethod": "post",
      "tag": "Disputes",
      "description": "Create a dispute",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "acquirerReferenceNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "caseId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "category",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "deadlineTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "postedTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rawResponse",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reasonCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "resolvedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "transactionId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/disputes/{id}",
      "method": "getDispute",
      "httpMethod": "get",
      "tag": "Disputes",
      "description": "Retrieve a dispute",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/disputes/{id}",
      "method": "putDispute",
      "httpMethod": "put",
      "tag": "Disputes",
      "description": "Create or update a Dispute with predefined ID",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "acquirerReferenceNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "caseId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "category",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "deadlineTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "postedTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rawResponse",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reasonCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "resolvedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "transactionId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/files",
      "method": "getFileCollection",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Retrieve a list of files",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "fields",
          "schema": "string",
          "description": "Limit the returned fields to the list specified, separated by comma. Note that id is always returned."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/files",
      "method": "postFile",
      "httpMethod": "post",
      "tag": "Files",
      "description": "Create a file",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/files/{id}",
      "method": "deleteFile",
      "httpMethod": "delete",
      "tag": "Files",
      "description": "Delete a File",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{id}",
      "method": "getFile",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Retrieve a File Record",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{id}",
      "method": "putFile",
      "httpMethod": "put",
      "tag": "Files",
      "description": "Update the File with predefined ID",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "extension",
          "schema": "string",
          "description": ""
        },
        {
          "name": "height",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "isPublic",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "mime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sha1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "width",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/files/{id}/download",
      "method": "getFileDownload",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Download a file",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{id}/download{extension}",
      "method": "getFileDownloadExtension",
      "httpMethod": "get",
      "tag": "Files",
      "description": "Download image in specific format",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices",
      "method": "getInvoiceCollection",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve a list of invoices",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices",
      "method": "postInvoice",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Create an invoice",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices/{id}",
      "method": "getInvoice",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve an invoice",
      "parameters": [
        {
          "name": "Accept",
          "schema": "string",
          "description": "The response media type."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}",
      "method": "putInvoice",
      "httpMethod": "put",
      "tag": "Invoices",
      "description": "Create or update an invoice with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices/{id}/abandon",
      "method": "postInvoiceAbandonment",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Abandon an invoice",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/issue",
      "method": "postInvoiceIssuance",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Issue an invoice",
      "parameters": [
        {
          "name": "dueTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issuedTime",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/items",
      "method": "getInvoiceItemCollection",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve invoice items",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/items",
      "method": "postInvoiceItem",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Create an invoice item",
      "parameters": [
        {
          "name": "_embedded",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "discountAmount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "periodEndTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "periodNumber",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "periodStartTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "productId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices/{id}/recalculate",
      "method": "postInvoiceRecalculation",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Recalculate an invoice",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/reissue",
      "method": "postInvoiceReissuance",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Reissue an invoice",
      "parameters": [
        {
          "name": "dueTime",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/timeline",
      "method": "getInvoiceTimelineCollection",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve a list of invoice timeline messages",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/timeline",
      "method": "postInvoiceTimeline",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Create an invoice Timeline comment",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "extraData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occurredTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "triggeredBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices/{id}/timeline/{messageId}",
      "method": "deleteInvoiceTimeline",
      "httpMethod": "delete",
      "tag": "Invoices",
      "description": "Delete an Invoice Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/timeline/{messageId}",
      "method": "getInvoiceTimeline",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Retrieve an Invoice Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/transaction",
      "method": "postInvoiceTransaction",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Apply a transaction to an invoice",
      "parameters": [
        {
          "name": "amount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "transactionId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/invoices/{id}/transaction-allocations",
      "method": "getInvoiceTransactionAllocationCollection",
      "httpMethod": "get",
      "tag": "Invoices",
      "description": "Get transaction amounts allocated to an invoice",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/invoices/{id}/void",
      "method": "postInvoiceVoid",
      "httpMethod": "post",
      "tag": "Invoices",
      "description": "Void an invoice",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-documents",
      "method": "getKycDocumentCollection",
      "httpMethod": "get",
      "tag": "KYC Documents",
      "description": "Retrieve a list of KYC documents",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-documents",
      "method": "postKycDocument",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Create a KYC Document",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}",
      "method": "getKycDocument",
      "httpMethod": "get",
      "tag": "KYC Documents",
      "description": "Retrieve a KYC Document",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}",
      "method": "putKycDocument",
      "httpMethod": "put",
      "tag": "KYC Documents",
      "description": "Create or update a KYC document with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}/acceptance",
      "method": "postKycDocumentAcceptance",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Accept a KYC document",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}/matches",
      "method": "postKycDocumentMatches",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Update a KYC document's documentMatches",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}/rejection",
      "method": "postKycDocumentRejection",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Reject a KYC document",
      "parameters": [
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/kyc-documents/{id}/review",
      "method": "postKycDocumentReview",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Review a KYC document",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/kyc-requests",
      "method": "getKycRequestCollection",
      "httpMethod": "get",
      "tag": "KYC Documents",
      "description": "Retrieve a list of KYC requests",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-requests",
      "method": "postKycRequest",
      "httpMethod": "post",
      "tag": "KYC Documents",
      "description": "Create a KYC Request",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/kyc-requests/{id}",
      "method": "deleteKycRequest",
      "httpMethod": "delete",
      "tag": "KYC Documents",
      "description": "Delete the KYC request",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-requests/{id}",
      "method": "getKycRequest",
      "httpMethod": "get",
      "tag": "KYC Documents",
      "description": "Retrieve a KYC request",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/kyc-requests/{id}",
      "method": "patchKycRequest",
      "httpMethod": "patch",
      "tag": "KYC Documents",
      "description": "Update a KYC request",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/password-tokens",
      "method": "getPasswordTokenCollection",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Retrieve a list of tokens",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/password-tokens",
      "method": "postPasswordToken",
      "httpMethod": "post",
      "tag": "Customer Authentication",
      "description": "Create a Reset Password Token",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "credentialId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expiredTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/password-tokens/{id}",
      "method": "deletePasswordToken",
      "httpMethod": "delete",
      "tag": "Customer Authentication",
      "description": "Delete a Reset Password Token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/password-tokens/{id}",
      "method": "getPasswordToken",
      "httpMethod": "get",
      "tag": "Customer Authentication",
      "description": "Retrieve a Reset Password Token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-cards",
      "method": "getPaymentCardCollection",
      "httpMethod": "get",
      "tag": "Payment Cards",
      "description": "Retrieve a list of Payment Cards",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-cards",
      "method": "postPaymentCard",
      "httpMethod": "post",
      "tag": "Payment Cards",
      "description": "Create a Payment Card",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/payment-cards/{id}",
      "method": "getPaymentCard",
      "httpMethod": "get",
      "tag": "Payment Cards",
      "description": "Retrieve a Payment Card",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-cards/{id}",
      "method": "patchPaymentCard",
      "httpMethod": "patch",
      "tag": "Payment Cards",
      "description": "Update a payment card's values",
      "parameters": [
        {
          "name": "billingAddress",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "customFields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "cvv",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expMonth",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "expYear",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stickyGatewayAccountId",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/payment-cards/{id}",
      "method": "putPaymentCard",
      "httpMethod": "put",
      "tag": "Payment Cards",
      "description": "Create a payment card with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/payment-cards/{id}/deactivation",
      "method": "postPaymentCardDeactivation",
      "httpMethod": "post",
      "tag": "Payment Cards",
      "description": "Deactivate a Payment Card",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-instruments",
      "method": "getPaymentInstrumentCollection",
      "httpMethod": "get",
      "tag": "Payment Instruments",
      "description": "Retrieve a list of payment instruments",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-instruments",
      "method": "postPaymentInstrument",
      "httpMethod": "post",
      "tag": "Payment Instruments",
      "description": "Create a Payment Instrument",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "303",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/payment-instruments/{id}",
      "method": "getPaymentInstrument",
      "httpMethod": "get",
      "tag": "Payment Instruments",
      "description": "Retrieve a Payment Instrument",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-instruments/{id}",
      "method": "patchPaymentInstrument",
      "httpMethod": "patch",
      "tag": "Payment Instruments",
      "description": "Update a Payment Instrument's values",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/payment-instruments/{id}/deactivation",
      "method": "postPaymentInstrumentDeactivation",
      "httpMethod": "post",
      "tag": "Payment Instruments",
      "description": "Deactivate a payment instrument",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/payouts",
      "method": "postPayout",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Create a credit transaction",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/paypal-accounts",
      "method": "getPayPalAccountCollection",
      "httpMethod": "get",
      "tag": "PayPal Accounts",
      "description": "Retrieve a list of PayPal accounts",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/paypal-accounts",
      "method": "postPayPalAccount",
      "httpMethod": "post",
      "tag": "PayPal Accounts",
      "description": "Create a PayPal Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/paypal-accounts/{id}",
      "method": "getPayPalAccount",
      "httpMethod": "get",
      "tag": "PayPal Accounts",
      "description": "Retrieve a PayPal Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/paypal-accounts/{id}",
      "method": "putPayPalAccount",
      "httpMethod": "put",
      "tag": "PayPal Accounts",
      "description": "Create a PayPal account with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/paypal-accounts/{id}/deactivation",
      "method": "postPayPalAccountDeactivation",
      "httpMethod": "post",
      "tag": "PayPal Accounts",
      "description": "Deactivate a PayPal Account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/plans",
      "method": "getPlanCollection",
      "httpMethod": "get",
      "tag": "Plans",
      "description": "Retrieve a list of plans",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/plans",
      "method": "postPlan",
      "httpMethod": "post",
      "tag": "Plans",
      "description": "Create a plan",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/plans/{id}",
      "method": "deletePlan",
      "httpMethod": "delete",
      "tag": "Plans",
      "description": "Delete a Plan",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/plans/{id}",
      "method": "getPlan",
      "httpMethod": "get",
      "tag": "Plans",
      "description": "Retrieve a plan",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/plans/{id}",
      "method": "putPlan",
      "httpMethod": "put",
      "tag": "Plans",
      "description": "Create or update a Plan with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/products",
      "method": "getProductCollection",
      "httpMethod": "get",
      "tag": "Products",
      "description": "Retrieve a list of products",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/products",
      "method": "postProduct",
      "httpMethod": "post",
      "tag": "Products",
      "description": "Create a Product",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/products/{id}",
      "method": "deleteProduct",
      "httpMethod": "delete",
      "tag": "Products",
      "description": "Delete a product",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/{id}",
      "method": "getProduct",
      "httpMethod": "get",
      "tag": "Products",
      "description": "Retrieve a product",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/{id}",
      "method": "putProduct",
      "httpMethod": "put",
      "tag": "Products",
      "description": "Create a product with predefined ID",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/ready-to-pay",
      "method": "postReadyToPay",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Ready to Pay",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/search",
      "method": "getSearch",
      "httpMethod": "get",
      "tag": "Search",
      "description": "Search merchant data",
      "parameters": [
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The default search. It will search across resources and many fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipping-zones",
      "method": "getShippingZoneCollection",
      "httpMethod": "get",
      "tag": "Shipping Zones",
      "description": "Retrieve a list of shipping zones",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipping-zones",
      "method": "postShippingZone",
      "httpMethod": "post",
      "tag": "Shipping Zones",
      "description": "Create a Shipping Zone",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "countries",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rates",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/shipping-zones/{id}",
      "method": "deleteShippingZone",
      "httpMethod": "delete",
      "tag": "Shipping Zones",
      "description": "Delete a shipping zone",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipping-zones/{id}",
      "method": "getShippingZone",
      "httpMethod": "get",
      "tag": "Shipping Zones",
      "description": "Retrieve a shipping zone",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/shipping-zones/{id}",
      "method": "putShippingZone",
      "httpMethod": "put",
      "tag": "Shipping Zones",
      "description": "Create a shipping zone with predefined ID",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "countries",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rates",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscription-cancellations",
      "method": "getSubscriptionCancellationCollection",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve a list of cancellations",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscription-cancellations",
      "method": "postSubscriptionCancellation",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Cancel an order",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "appliedInvoiceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "canceledBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "canceledTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "churnTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "lineItemSubtotal",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "lineItems",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "prorated",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "proratedInvoiceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "reason",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subscriptionId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscription-cancellations/{id}",
      "method": "deleteSubscriptionCancellation",
      "httpMethod": "delete",
      "tag": "Orders",
      "description": "Delete a cancellation",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscription-cancellations/{id}",
      "method": "getSubscriptionCancellation",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve an order сancellation",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscription-cancellations/{id}",
      "method": "putSubscriptionCancellation",
      "httpMethod": "put",
      "tag": "Orders",
      "description": "Cancel an order",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "appliedInvoiceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "canceledBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "canceledTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "churnTime",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "lineItemSubtotal",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "lineItems",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "prorated",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "proratedInvoiceId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "reason",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subscriptionId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscription-reactivations",
      "method": "getSubscriptionReactivationCollection",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve a list of reactivations",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscription-reactivations",
      "method": "postSubscriptionReactivation",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Reactivate an order",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "cancellationId",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "effectiveTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "renewalTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subscriptionId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscription-reactivations/{id}",
      "method": "getSubscriptionReactivation",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve an order reactivation",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "getSubscriptionCollection",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve a list of orders",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nTo expand multiple objects, it accepts a comma-separated list of objects (example: `expand=recentInvoice,initialInvoice`).\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "postSubscription",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Create an order",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nTo expand multiple objects, it accepts a comma-separated list of objects (example: `expand=recentInvoice,initialInvoice`).\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "orderType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscriptions/{id}",
      "method": "getSubscription",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve an order",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nTo expand multiple objects, it accepts a comma-separated list of objects (example: `expand=recentInvoice,initialInvoice`).\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}",
      "method": "putSubscription",
      "httpMethod": "put",
      "tag": "Orders",
      "description": "Upsert an order with predefined ID",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nTo expand multiple objects, it accepts a comma-separated list of objects (example: `expand=recentInvoice,initialInvoice`).\nAvailable arguments are:\n  - recentInvoice\n  - initialInvoice\n  - customer\n  - website\n\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        },
        {
          "name": "orderType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/change-items",
      "method": "postSubscriptionItemsChange",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Change an order's items",
      "parameters": [
        {
          "name": "effectiveTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "keepTrial",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "preview",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "prorated",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "renewalPolicy",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/interim-invoice",
      "method": "postSubscriptionInterimInvoice",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Issue an interim invoice for a subscription order",
      "parameters": [
        {
          "name": "transactionId",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/timeline",
      "method": "getSubscriptionTimelineCollection",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve a list of order timeline messages",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/timeline",
      "method": "postSubscriptionTimeline",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Create an order Timeline comment",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "extraData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occurredTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "triggeredBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/timeline/{messageId}",
      "method": "deleteSubscriptionTimeline",
      "httpMethod": "delete",
      "tag": "Orders",
      "description": "Delete an Order Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/timeline/{messageId}",
      "method": "getSubscriptionTimeline",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve an Order Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/upcoming-invoices",
      "method": "getSubscriptionUpcomingInvoiceCollection",
      "httpMethod": "get",
      "tag": "Orders",
      "description": "Retrieve subscription order's upcoming invoice",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriptions/{id}/upcoming-invoices/{invoiceId}/issue",
      "method": "postUpcomingInvoiceIssuance",
      "httpMethod": "post",
      "tag": "Orders",
      "description": "Issue an upcoming invoice for early pay",
      "parameters": [
        {
          "name": "dueTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issuedTime",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags",
      "method": "getTagCollection",
      "httpMethod": "get",
      "tag": "Tags",
      "description": "Retrieve a list of tags",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags",
      "method": "postTag",
      "httpMethod": "post",
      "tag": "Tags",
      "description": "Create a tag",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Tag."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/tags/{tag}",
      "method": "deleteTag",
      "httpMethod": "delete",
      "tag": "Tags",
      "description": "Delete a tag",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{tag}",
      "method": "getTag",
      "httpMethod": "get",
      "tag": "Tags",
      "description": "Retrieve a tag",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Tag."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{tag}",
      "method": "patchTag",
      "httpMethod": "patch",
      "tag": "Tags",
      "description": "Update a tag",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "createdTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "updatedTime",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Tag."
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/tags/{tag}/customers",
      "method": "deleteTagCustomerCollection",
      "httpMethod": "delete",
      "tag": "Tags",
      "description": "Untag a list of customers",
      "parameters": [
        {
          "name": "customerIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/tags/{tag}/customers",
      "method": "postTagCustomerCollection",
      "httpMethod": "post",
      "tag": "Tags",
      "description": "Tag a list of customers",
      "parameters": [
        {
          "name": "customerIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/tags/{tag}/customers/{customerId}",
      "method": "deleteTagCustomer",
      "httpMethod": "delete",
      "tag": "Tags",
      "description": "Untag a customer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{tag}/customers/{customerId}",
      "method": "postTagCustomer",
      "httpMethod": "post",
      "tag": "Tags",
      "description": "Tag a customer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "getTokenCollection",
      "httpMethod": "get",
      "tag": "Payment Tokens",
      "description": "Retrieve a list of tokens",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "postToken",
      "httpMethod": "post",
      "tag": "Payment Tokens",
      "description": "Create a payment token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/tokens/{token}",
      "method": "getToken",
      "httpMethod": "get",
      "tag": "Payment Tokens",
      "description": "Retrieve a token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions",
      "method": "getTransactionCollection",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Retrieve a list of transactions",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        },
        {
          "name": "q",
          "schema": "string",
          "description": "The partial search of the text fields."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/transactions",
      "method": "postTransaction",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Create a transaction",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/transactions/{id}",
      "method": "getTransaction",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Retrieve a Transaction",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}",
      "method": "patchTransaction",
      "httpMethod": "patch",
      "tag": "Transactions",
      "description": "Update a transaction",
      "parameters": [
        {
          "name": "customFields",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/query",
      "method": "postTransactionQuery",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Query a Transaction",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/refund",
      "method": "postTransactionRefund",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Refund a Transaction",
      "parameters": [
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/timeline",
      "method": "getTransactionTimelineCollection",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Retrieve a list of transaction timeline messages",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "description": "The collection items limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "The collection items offset."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/timeline",
      "method": "postTransactionTimeline",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Create a transaction Timeline comment",
      "parameters": [
        {
          "name": "_links",
          "schema": "array",
          "description": ""
        },
        {
          "name": "extraData",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occurredTime",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "triggeredBy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": "Invalid data was sent."
        }
      ]
    },
    {
      "url": "/transactions/{id}/timeline/{messageId}",
      "method": "deleteTransactionTimeline",
      "httpMethod": "delete",
      "tag": "Transactions",
      "description": "Delete a Transaction Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/timeline/{messageId}",
      "method": "getTransactionTimeline",
      "httpMethod": "get",
      "tag": "Transactions",
      "description": "Retrieve a transaction Timeline message",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/transactions/{id}/update",
      "method": "postTransactionUpdate",
      "httpMethod": "post",
      "tag": "Transactions",
      "description": "Update a Transaction status",
      "parameters": [
        {
          "name": "amount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "result",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api-sandbox.rebilly.com",
  "apiDescription": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\nWe have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)\nis supported by an API which is documented and available for use so that you\nmay automate any workflows necessary.  This document contains the most commonly\nintegrated resources.\n\n# Authentication\n\nWhen you sign up for an account, you are given your first secret API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made\n  from the server side. Never share these keys. Keep them guarded and secure.\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for \n  requests from the client side. For now can only be used to create \n  a [Payment Token](#operation/PostToken) and \n  a [File token](#operation/PostFile).\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time.\n\nNever share your secret keys. Keep them guarded and secure.\n\n&lt;!-- ReDoc-Inject: &lt;security-definitions&gt; --&gt;\n\n# Errors\nRebilly follow's the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807) also known as Problem Details for HTTP APIs.  As with our normal API responses, your client must be prepared to gracefully handle additional members of the response.\n\n## Forbidden\n&lt;RedocResponse pointer={\"#/components/responses/Forbidden\"} /&gt;\n\n## Conflict\n&lt;RedocResponse pointer={\"#/components/responses/Conflict\"} /&gt;\n\n## NotFound\n&lt;RedocResponse pointer={\"#/components/responses/NotFound\"} /&gt;\n\n## Unauthorized\n&lt;RedocResponse pointer={\"#/components/responses/Unauthorized\"} /&gt;\n\n## ValidationError\n&lt;RedocResponse pointer={\"#/components/responses/ValidationError\"} /&gt;\n\n# SDKs\n\nRebilly offers a Javascript SDK and a PHP SDK to help interact with\nthe API.  However, no SDK is required to use the API.\n\nRebilly also offers [FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/),\n a client-side iFrame-based solution to help\ncreate payment tokens while minimizing PCI DSS compliance burdens\nand maximizing the customizability. [FramePay](https://docs.rebilly.com/docs/developer-docs/framepay/)\nis interacting with the [payment tokens creation operation](#operation/PostToken).\n\n## Javascript SDK\n\nInstallation and usage instructions can be found [here](https://docs.rebilly.com/docs/developer-docs/sdks).\nSDK code examples are included in these docs.\n\n## PHP SDK\nFor all PHP SDK examples provided in these docs you will need to configure the `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' =&gt; 'YourApiKeyHere',\n    'baseUrl' =&gt; 'https://api.rebilly.com',\n]);\n```\n\n# Using filter with collections\nRebilly provides collections filtering. You can use `?filter` param on collections to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Sub-fields are separated with `.`: `?filter=billingAddress.country:US`.\n\n- Multiple filters are separated with `;`: `?filter=firstName:John;lastName:Doe`. They will be joined with `AND` logic. In this example: `firstName:John` AND `lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`. Multiple values specified for a field will be joined with `OR` logic. In this example: `firstName:John` OR `firstName:Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,!Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`. This also works for datetime-based fields.\n\n- You can create some [predefined values lists](https://user-api-docs.rebilly.com/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`.\n\n- Datetime-based fields accept values formatted using RFC 3339 like this: `?filter=createdTime:2021-02-14T13:30:00Z`. \n\n# Expand to include embedded objects\nRebilly provides the ability to pre-load additional \nobjects with a request. \n\nYou can use `?expand` param on most requests to expand\nand include embedded objects within the\n`_embedded` property of the response.\n\nThe `_embedded` property contains an array of \nobjects keyed by the expand parameter value(s).\n\nYou may expand multiple objects by passing them\nas comma-separated to the expand value like so:\n\n```\n?expand=recentInvoice,customer\n```\n\nAnd in the response, you would see:\n\n```\n\"_embedded\": [\n    \"recentInvoice\": {...},\n    \"customer\": {...}\n]\n```\nExpand may be utilitized not only on `GET` requests but also on `PATCH`, `POST`, `PUT` requests too.\n\n\n# Getting started guide\n\nRebilly's API has over 300 operations.  That's more than you'll \nneed to implement your use cases.  If you have a use \ncase you would like to implement, please consult us for\nfeedback on the best API operations for the task.\n\nOur getting started guide will demonstrate a basic order form use\ncase.  It will allow us to highlight core resources\nin Rebilly that will be helpful for many other use cases\ntoo.\n\nWithin 25 minutes, you'll have sent API requests (via our console)\nto create a subscription order.\n",
  "apiTitle": "Rebilly REST API",
  "endpoints": 105,
  "sdkMethods": 288,
  "schemas": 490,
  "parameters": 547,
  "contactUrl": "https://www.rebilly.com/contact/",
  "contactEmail": "integrations@rebilly.com",
  "difficultyScore": 669.75,
  "difficulty": "Very Hard"
}