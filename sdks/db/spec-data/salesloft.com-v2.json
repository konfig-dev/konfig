{
  "providerName": "salesloft.com",
  "openApiRaw": "https://developers.salesloft.com/v2_api_def.json",
  "homepage": "salesloft.com",
  "apiVersion": "v2",
  "methods": [
    {
      "url": "/v2/account_stages.json",
      "method": "/v2/accountStagesJsonGet",
      "httpMethod": "get",
      "tag": "Account Stages",
      "description": "List account stages",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of account stages to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, order. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account_stages/{id}.json",
      "method": "/v2/accountStages/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Account Stages",
      "description": "Fetch an account stage",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Account Stage ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account_tiers.json",
      "method": "/v2/accountTiersJsonGet",
      "httpMethod": "get",
      "tag": "Account Tiers",
      "description": "List Account Tiers",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of Account Tiers to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "name",
          "schema": "array",
          "required": false,
          "description": "Filters Account Tiers by name. Multiple names can be applied"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, order. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account_tiers/{id}.json",
      "method": "/v2/accountTiers/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Account Tiers",
      "description": "Fetch an account tier",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Account Tier ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/account_upserts.json",
      "method": "/v2/accountUpsertsJsonPost",
      "httpMethod": "post",
      "tag": "Account Upsert",
      "description": "Upsert an account",
      "parameters": [
        {
          "name": "account_tier_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company_stage_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "company_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "conversational_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "founded",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "industry",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "postal_code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "revenue_range",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "upsert_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/accounts.json",
      "method": "/v2/accountsJsonGet",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "List accounts",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of accounts to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "crm_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by crm_id. Multiple crm ids can be applied"
        },
        {
          "name": "tag",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by the tags applied to the account. Multiple tags can be applied"
        },
        {
          "name": "tag_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by the tag id's applied to the account. Multiple tag id's can be applied"
        },
        {
          "name": "created_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": false,
          "description": "Domain of the accounts to fetch. Domains are unique and lowercase"
        },
        {
          "name": "website",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by website. Multiple websites can be applied. An additional value of \"_is_null\" can be passed to filter accounts that do not have a website."
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": "Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than \"true\" or \"false\" is passed."
        },
        {
          "name": "name",
          "schema": "array",
          "required": false,
          "description": "Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched."
        },
        {
          "name": "account_stage_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of \"_is_null\" can be passed to filter accounts that do not have account_stage_id"
        },
        {
          "name": "account_tier_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by account_tier_id. Multiple account tier ids can be applied"
        },
        {
          "name": "owner_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of \"_is_null\" can be passed to filter accounts that are unowned"
        },
        {
          "name": "owner_is_active",
          "schema": "boolean",
          "required": false,
          "description": "Filters accounts by whether the owner is active or not."
        },
        {
          "name": "last_contacted",
          "schema": "object",
          "required": false,
          "description": "Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.\nAdditional values of \"_is_null\" or \"_is_not_null\" can be passed to filter records that either have no timestamp value or any timestamp value.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "custom_fields",
          "schema": "object",
          "required": false,
          "description": "Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]=custom_field_value"
        },
        {
          "name": "industry",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by industry by exact match. Supports partial matching"
        },
        {
          "name": "country",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by country by exact match. Supports partial matching"
        },
        {
          "name": "state",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by state by exact match. Supports partial matching"
        },
        {
          "name": "city",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by city by exact match. Supports partial matching"
        },
        {
          "name": "owner_crm_id",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \"_is_null\" can be passed to filter accounts that are unowned. A \"_not_in\" modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]=id"
        },
        {
          "name": "locales",
          "schema": "array",
          "required": false,
          "description": "Filters accounts by locale. Multiple locales are allowed"
        },
        {
          "name": "user_relationships",
          "schema": "object",
          "required": false,
          "description": "Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]=value"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/accounts.json",
      "method": "/v2/accountsJsonPost",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Create an account",
      "parameters": [
        {
          "name": "account_tier_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company_stage_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "company_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "conversational_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "founded",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "industry",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "postal_code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "revenue_range",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/accounts/{id}.json",
      "method": "/v2/accounts/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Accounts",
      "description": "Delete an account",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Account ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/accounts/{id}.json",
      "method": "/v2/accounts/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Fetch an account",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Account ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/accounts/{id}.json",
      "method": "/v2/accounts/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Accounts",
      "description": "Update an existing Account",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Account ID"
        },
        {
          "name": "account_tier_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company_stage_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "company_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "conversational_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "founded",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "industry",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "postal_code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "revenue_range",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/action_details/call_instructions.json",
      "method": "/v2/actionDetails/callInstructionsJsonGet",
      "httpMethod": "get",
      "tag": "Action Details - Call Instructions",
      "description": "List call instructions",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of call instructions to fetch."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/action_details/call_instructions/{id}.json",
      "method": "/v2/actionDetails/callInstructions/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Action Details - Call Instructions",
      "description": "Fetch a call instructions",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Call instructions ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/actions.json",
      "method": "/v2/actionsJsonGet",
      "httpMethod": "get",
      "tag": "Actions",
      "description": "List actions",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of actions to fetch."
        },
        {
          "name": "step_id",
          "schema": "integer",
          "required": false,
          "description": "Fetch actions by step ID"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Filter actions by type"
        },
        {
          "name": "due_on",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the due_on field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "user_guid",
          "schema": "array",
          "required": false,
          "description": "Filters actions by the user's guid. Multiple user guids can be applied. The user must be a team admin to filter other users' actions"
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters actions by person_id. Multiple person ids can be applied"
        },
        {
          "name": "cadence_id",
          "schema": "array",
          "required": false,
          "description": "Filters actions by cadence_id. Multiple cadence ids can be applied"
        },
        {
          "name": "multitouch_group_id",
          "schema": "array",
          "required": false,
          "description": "Filters actions by multitouch_group_id. Multiple multitouch group ids can be applied"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/actions/{id}.json",
      "method": "/v2/actions/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Actions",
      "description": "Fetch an action",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Action ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities.json",
      "method": "/v2/activitiesJsonPost",
      "httpMethod": "post",
      "tag": "Activities",
      "description": "Create an activity",
      "parameters": [
        {
          "name": "action_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "task_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities/calls.json",
      "method": "/v2/activities/callsJsonGet",
      "httpMethod": "get",
      "tag": "Calls",
      "description": "List calls",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of calls to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "created_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "user_guid",
          "schema": "array",
          "required": false,
          "description": "Filters list to only include guids"
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters calls by person_id. Multiple person ids can be applied"
        },
        {
          "name": "sentiment",
          "schema": "array",
          "required": false,
          "description": "Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed."
        },
        {
          "name": "disposition",
          "schema": "array",
          "required": false,
          "description": "Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities/calls.json",
      "method": "/v2/activities/callsJsonPost",
      "httpMethod": "post",
      "tag": "Calls",
      "description": "Create a call",
      "parameters": [
        {
          "name": "action_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "crm_params",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "disposition",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "duration",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "linked_call_data_record_ids",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "person_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "sentiment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities/calls/{id}.json",
      "method": "/v2/activities/calls/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Calls",
      "description": "Fetch a call",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Call ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities/emails.json",
      "method": "/v2/activities/emailsJsonGet",
      "httpMethod": "get",
      "tag": "Emails",
      "description": "List emails",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "bounced",
          "schema": "boolean",
          "required": false,
          "description": "Filters emails by whether they have bounced or not"
        },
        {
          "name": "crm_activity_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by crm_activity_id. Multiple crm activty ids can be applied"
        },
        {
          "name": "action_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by action_id. Multiple action ids can be applied"
        },
        {
          "name": "user_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by user_id. Multiple User ids can be applied"
        },
        {
          "name": "status",
          "schema": "array",
          "required": false,
          "description": "Filters emails by status. Multiple status can be applied, possible values are sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external"
        },
        {
          "name": "cadence_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by cadence. Multiple cadence ids can be applied"
        },
        {
          "name": "step_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by step. Multiple step ids can be applied"
        },
        {
          "name": "one_off",
          "schema": "boolean",
          "required": false,
          "description": "Filters emails by one-off only"
        },
        {
          "name": "scoped_fields",
          "schema": "array",
          "required": false,
          "description": "Specify explicit scoped fields desired on the Email Resource."
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters emails by person_id. Multiple person ids can be applied"
        },
        {
          "name": "email_addresses",
          "schema": "array",
          "required": false,
          "description": "Filters emails by recipient email address. Multiple emails can be applied."
        },
        {
          "name": "personalization",
          "schema": "array",
          "required": false,
          "description": "Filters emails by personalization score"
        },
        {
          "name": "sent_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the sent_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: updated_at, send_time. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activities/emails/{id}.json",
      "method": "/v2/activities/emails/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Emails",
      "description": "Fetch an email",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Email ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/activity_histories",
      "method": "/v2/activityHistoriesGet",
      "httpMethod": "get",
      "tag": "Activity Histories",
      "description": "List Past Activities",
      "parameters": [
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: occurred_at, updated_at. Defaults to occurred_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Filter by the type of activity. Must be one of: added_to_cadence, completed_action, call, requested_email, sent_email, received_email, email_reply, note, success, dnc_event, residency_change, meeting, meeting_held, message_conversation, task, voicemail, opportunity_stage_change, opportunity_amount_change, opportunity_close_date_change. Can be provided as an array, or as an object of type[resource_type][]=type"
        },
        {
          "name": "_resource",
          "schema": "string",
          "required": false,
          "description": "For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filter by the {resource_type, resource_id} of activity. Provide this in the format resource[]=person,1234"
        },
        {
          "name": "occurred_at",
          "schema": "object",
          "required": false,
          "description": "Equality filters that are applied to the occurred_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"keys\":[{\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gte\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lte\",\"type\":\"iso8601 string\"}],\"type\":\"object\"}\n"
        },
        {
          "name": "pinned",
          "schema": "boolean",
          "required": false,
          "description": "Filter by the pinned status of activity. Must be 'true' or 'false'"
        },
        {
          "name": "resource_type",
          "schema": "string",
          "required": false,
          "description": "Filter by the resource type. A resource is a Salesloft object that the activity is attributed to. A valid resource types must be one of person, account, crm_opportunity. Can be provided as an array"
        },
        {
          "name": "resource_id",
          "schema": "array",
          "required": false,
          "description": "Filter by the resource id. \"resource_type\" filter is required to use this filter."
        },
        {
          "name": "updated_at",
          "schema": "object",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{\"keys\":[{\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gte\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lte\",\"type\":\"iso8601 string\"}],\"type\":\"object\"}\n"
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": false,
          "description": "Filter activities by a user's guid."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs",
      "method": "/v2/bulkJobsGet",
      "httpMethod": "get",
      "tag": "Bulk Jobs",
      "description": "List bulk jobs",
      "parameters": [
        {
          "name": "state",
          "schema": "array",
          "required": false,
          "description": "The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done"
        },
        {
          "name": "id",
          "schema": "object",
          "required": false,
          "description": "Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs",
      "method": "/v2/bulkJobsPost",
      "httpMethod": "post",
      "tag": "Bulk Jobs",
      "description": "Create a bulk job",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs/{bulk_jobs_id}/job_data",
      "method": "/v2/bulkJobs/{bulkJobsId}/jobDataGet",
      "httpMethod": "get",
      "tag": "Bulk Jobs - Job Data",
      "description": "List job data for a bulk job",
      "parameters": [
        {
          "name": "bulk_jobs_id",
          "schema": "integer",
          "required": true,
          "description": "The id for the bulk job to which the job data relates"
        },
        {
          "name": "status",
          "schema": "array",
          "required": false,
          "description": "Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying"
        },
        {
          "name": "id",
          "schema": "object",
          "required": false,
          "description": "Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs/{bulk_jobs_id}/job_data",
      "method": "/v2/bulkJobs/{bulkJobsId}/jobDataPost",
      "httpMethod": "post",
      "tag": "Bulk Jobs - Job Data",
      "description": "Create job data for a bulk job",
      "parameters": [
        {
          "name": "bulk_jobs_id",
          "schema": "integer",
          "required": true,
          "description": "The id for the bulk job to which the job data relates"
        },
        {
          "name": "data",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs/{bulk_jobs_id}/results",
      "method": "/v2/bulkJobs/{bulkJobsId}/resultsGet",
      "httpMethod": "get",
      "tag": "Bulk Jobs - Results",
      "description": "List job data for a completed bulk job.",
      "parameters": [
        {
          "name": "bulk_jobs_id",
          "schema": "integer",
          "required": true,
          "description": "The id for the Bulk Job"
        },
        {
          "name": "status",
          "schema": "array",
          "required": false,
          "description": "Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying"
        },
        {
          "name": "id",
          "schema": "object",
          "required": false,
          "description": "Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs/{id}",
      "method": "/v2/bulkJobs/{id}Get",
      "httpMethod": "get",
      "tag": "Bulk Jobs",
      "description": "Fetch a bulk job",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id for the Bulk Job"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/bulk_jobs/{id}",
      "method": "/v2/bulkJobs/{id}Put",
      "httpMethod": "put",
      "tag": "Bulk Jobs",
      "description": "Update a bulk job",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id for the bulk job to which the job data relates"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ready_to_execute",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadence_exports/{id}.json",
      "method": "/v2/cadenceExports/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Cadence Exports",
      "description": "Export a cadence",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Cadence ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadence_imports.json",
      "method": "/v2/cadenceImportsJsonPost",
      "httpMethod": "post",
      "tag": "Cadence Imports",
      "description": "Import cadences from JSON",
      "parameters": [
        {
          "name": "cadence_content",
          "schema": "object",
          "description": ""
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sharing_settings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadence_memberships.json",
      "method": "/v2/cadenceMembershipsJsonGet",
      "httpMethod": "get",
      "tag": "Cadence Memberships",
      "description": "List cadence memberships",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of cadence memberships to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "person_id",
          "schema": "integer",
          "required": false,
          "description": "ID of the person to find cadence memberships for"
        },
        {
          "name": "cadence_id",
          "schema": "integer",
          "required": false,
          "description": "ID of the cadence to find cadence memberships for"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "currently_on_cadence",
          "schema": "boolean",
          "required": false,
          "description": "If true, return only cadence memberships for people currently on cadences.  If false, return cadence memberships for people who have been removed from or have completed a cadence."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: added_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadence_memberships.json",
      "method": "/v2/cadenceMembershipsJsonPost",
      "httpMethod": "post",
      "tag": "Cadence Memberships",
      "description": "Create a cadence membership",
      "parameters": [
        {
          "name": "person_id",
          "schema": "integer",
          "required": true,
          "description": "ID of the person to create a cadence membership for"
        },
        {
          "name": "cadence_id",
          "schema": "integer",
          "required": true,
          "description": "ID of the cadence to create a cadence membership for"
        },
        {
          "name": "user_id",
          "schema": "integer",
          "required": false,
          "description": "ID of the user to create a cadence membership for. The associated cadence must be owned by the user, or it must be a team cadence"
        },
        {
          "name": "step_id",
          "schema": "integer",
          "required": false,
          "description": "ID of the step on which the person should start the cadence. Start on first step is the default behavior without this parameter."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadence_memberships/{id}.json",
      "method": "/v2/cadenceMemberships/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Cadence Memberships",
      "description": "Delete a cadence membership",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "CadenceMembership ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/cadence_memberships/{id}.json",
      "method": "/v2/cadenceMemberships/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Cadence Memberships",
      "description": "Fetch a cadence membership",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "CadenceMembership ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadences.json",
      "method": "/v2/cadencesJsonGet",
      "httpMethod": "get",
      "tag": "Cadences",
      "description": "List cadences",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of cadences to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "team_cadence",
          "schema": "boolean",
          "required": false,
          "description": "Filters cadences by whether they are a team cadence or not"
        },
        {
          "name": "shared",
          "schema": "boolean",
          "required": false,
          "description": "Filters cadences by whether they are shared"
        },
        {
          "name": "owned_by_guid",
          "schema": "array",
          "required": false,
          "description": "Filters cadences by the owner's guid. Multiple owner guids can be applied"
        },
        {
          "name": "people_addable",
          "schema": "boolean",
          "required": false,
          "description": "Filters cadences by whether they are able to have people added to them"
        },
        {
          "name": "name",
          "schema": "array",
          "required": false,
          "description": "Filters cadences by name"
        },
        {
          "name": "group_ids",
          "schema": "string",
          "required": false,
          "description": "Filters by group ids. Also supports group ids passed in as a JSON array string"
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": "Filters by whether the Cadences have been archived. Excluding this field will result in both archived and unarchived Cadences to return."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/cadences/{id}.json",
      "method": "/v2/cadences/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Cadences",
      "description": "Fetch a cadence",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Cadence ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/calendar/events",
      "method": "/v2/calendar/eventsGet",
      "httpMethod": "get",
      "tag": "Calendar Events",
      "description": "List calendar events",
      "parameters": [
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: start_time. Defaults to start_time"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": false,
          "description": "Lower bound (inclusive) for a calendar event's end time to filter by.\nMust be in ISO 8601 format.\n\nExample: `2022-02-14T10:12:59+00:00`.\n"
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": "Upper bound (exclusive) for a calendar event's start time to filter by.\nMust be in ISO 8601 format.\n\nExample: `2022-02-14T10:12:59+00:00`.\n"
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": false,
          "description": "user_guid of the user who created or included as a guest to the event.\n"
        },
        {
          "name": "calendar_id",
          "schema": "string",
          "required": false,
          "description": "calendar_id of the user who created or included as a guest to the event.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/calendar/events/upsert",
      "method": "/v2/calendar/events/upsertPost",
      "httpMethod": "post",
      "tag": "Calendar Events",
      "description": "Upsert a calendar event",
      "parameters": [
        {
          "name": "all_day",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "attendees",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "calendar_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "canceled_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "i_cal_uid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "organizer",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurring",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "updated_at",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/call_data_records.json",
      "method": "/v2/callDataRecordsJsonGet",
      "httpMethod": "get",
      "tag": "Call Data Records",
      "description": "List call data records",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of call data records to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "has_call",
          "schema": "boolean",
          "required": false,
          "description": "Return only call data records which have or do not have a call logged for them"
        },
        {
          "name": "created_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "user_guid",
          "schema": "array",
          "required": false,
          "description": "Filters list to only include guids"
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters list by person_id. Multiple person ids can be applied"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/call_data_records/{id}.json",
      "method": "/v2/callDataRecords/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Call Data Records",
      "description": "Fetch a call data record",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "CallDataRecord ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/call_dispositions.json",
      "method": "/v2/callDispositionsJsonGet",
      "httpMethod": "get",
      "tag": "Call Dispositions",
      "description": "List call dispositions",
      "parameters": [
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: name, updated_at. Defaults to name"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/call_sentiments.json",
      "method": "/v2/callSentimentsJsonGet",
      "httpMethod": "get",
      "tag": "Call Sentiments",
      "description": "List call sentiments",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Filters call sentiments by name"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: name, updated_at. Defaults to name"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/conversations/calls",
      "method": "/v2/conversations/callsPost",
      "httpMethod": "post",
      "tag": "Conversations Calls",
      "description": "Create Conversations Call",
      "parameters": [
        {
          "name": "call_created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "duration",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "recording",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/crm_activities.json",
      "method": "/v2/crmActivitiesJsonGet",
      "httpMethod": "get",
      "tag": "CRM Activities",
      "description": "List crm activities",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of crm activities to fetch."
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/crm_activities/{id}.json",
      "method": "/v2/crmActivities/{id}JsonGet",
      "httpMethod": "get",
      "tag": "CRM Activities",
      "description": "Fetch a crm activity",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Crm activity ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/crm_activity_fields.json",
      "method": "/v2/crmActivityFieldsJsonGet",
      "httpMethod": "get",
      "tag": "CRM Activity Fields",
      "description": "List crm activity fields",
      "parameters": [
        {
          "name": "source",
          "schema": "string",
          "required": false,
          "description": "Return only records with this source"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: title, updated_at. Defaults to title"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/crm_users.json",
      "method": "/v2/crmUsersJsonGet",
      "httpMethod": "get",
      "tag": "Crm Users",
      "description": "List crm users",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of crm users to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "crm_id",
          "schema": "array",
          "required": false,
          "description": "Filters crm users by crm_ids"
        },
        {
          "name": "user_id",
          "schema": "array",
          "required": false,
          "description": "Filters crm users by user_ids"
        },
        {
          "name": "user_guid",
          "schema": "array",
          "required": false,
          "description": "Filters crm users by user guids"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: id, updated_at. Defaults to id"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_fields.json",
      "method": "/v2/customFieldsJsonGet",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "description": "List custom fields",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of custom fields to fetch."
        },
        {
          "name": "field_type",
          "schema": "string",
          "required": false,
          "description": "Type of field to fetch. Value must be one of: person, company, opportunity"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_fields.json",
      "method": "/v2/customFieldsJsonPost",
      "httpMethod": "post",
      "tag": "Custom Fields",
      "description": "Create a custom field",
      "parameters": [
        {
          "name": "field_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_fields/{id}.json",
      "method": "/v2/customFields/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Custom Fields",
      "description": "Delete a custom field",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Custom Field ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/custom_fields/{id}.json",
      "method": "/v2/customFields/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Custom Fields",
      "description": "Fetch a custom field",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Custom Field ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_fields/{id}.json",
      "method": "/v2/customFields/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Custom Fields",
      "description": "Update a custom field",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Custom Field ID"
        },
        {
          "name": "field_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_roles.json",
      "method": "/v2/customRolesJsonGet",
      "httpMethod": "get",
      "tag": "Roles",
      "description": "List custom roles",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of roles to fetch."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: id, name. Defaults to id"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/custom_roles/{id}.json",
      "method": "/v2/customRoles/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Roles",
      "description": "Fetch a custom role",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Custom Role ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/email_template_attachments.json",
      "method": "/v2/emailTemplateAttachmentsJsonGet",
      "httpMethod": "get",
      "tag": "Email Template Attachments",
      "description": "List email template attachments",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of email template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "email_template_id",
          "schema": "array",
          "required": false,
          "description": "Filters email template attachments by email template IDs"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/email_templates.json",
      "method": "/v2/emailTemplatesJsonGet",
      "httpMethod": "get",
      "tag": "Email Templates",
      "description": "List email templates",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of email templates to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "linked_to_team_template",
          "schema": "boolean",
          "required": false,
          "description": "Filters email templates by whether they are linked to a team template or not"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Filters email templates by title or subject"
        },
        {
          "name": "tag_ids",
          "schema": "array",
          "required": false,
          "description": "Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs"
        },
        {
          "name": "tag",
          "schema": "array",
          "required": false,
          "description": "Filters email templates by tags applied to the template, not to exceed 100 tags"
        },
        {
          "name": "filter_by_owner",
          "schema": "boolean",
          "required": false,
          "description": "Filters email templates by current authenticated user"
        },
        {
          "name": "group_id",
          "schema": "array",
          "required": false,
          "description": "Filters email templates by groups applied to the template by group ID. Not to exceed 500 IDs. Returns templates that are assigned to any of the group ids."
        },
        {
          "name": "include_cadence_templates",
          "schema": "boolean",
          "required": false,
          "description": "Filters email templates based on whether or not the template has been used on a cadence"
        },
        {
          "name": "include_archived_templates",
          "schema": "boolean",
          "required": false,
          "description": "Filters email templates to include archived templates or not"
        },
        {
          "name": "cadence_id",
          "schema": "array",
          "required": false,
          "description": "Filters email templates to those belonging to the cadence. Not to exceed 100 IDs. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/email_templates/{id}.json",
      "method": "/v2/emailTemplates/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Email Templates",
      "description": "Fetch an email template",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "EmailTemplate ID"
        },
        {
          "name": "include_signature",
          "schema": "boolean",
          "required": false,
          "description": "Optionally will return the templates with the current user's email signature"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/external_emails.json",
      "method": "/v2/externalEmailsJsonPost",
      "httpMethod": "post",
      "tag": "External Emails",
      "description": "Create an External Email",
      "parameters": [
        {
          "name": "mailbox",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "raw",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/groups.json",
      "method": "/v2/groupsJsonGet",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "List groups",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of groups to fetch."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/groups/{id}.json",
      "method": "/v2/groups/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Fetch a group",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Group ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/imports.json",
      "method": "/v2/importsJsonGet",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List imports",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of imports to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "user_ids",
          "schema": "array",
          "required": false,
          "description": "ID of users to fetch imports for. Using this filter will return an empty array for non-admin users who request other user's imports"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to created_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/imports.json",
      "method": "/v2/importsJsonPost",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Create an import",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "user_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/imports/{id}.json",
      "method": "/v2/imports/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Imports",
      "description": "Delete an import",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Import ID"
        },
        {
          "name": "undo",
          "schema": "string",
          "required": false,
          "description": "Whether to delete people on this Import. Possible values are: [not present], all, single.\n\n'single' will delete people who are only present in this Import.\n'all' will delete people even if they are present in other Imports.\nNot specifying this parameter will not delete any people\n"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/imports/{id}.json",
      "method": "/v2/imports/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "Fetch an import",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Import ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/imports/{id}.json",
      "method": "/v2/imports/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Imports",
      "description": "Update an import",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Import ID"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "user_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/live_website_tracking_parameters.json",
      "method": "/v2/liveWebsiteTrackingParametersJsonPost",
      "httpMethod": "post",
      "tag": "Live Website Tracking Parameters",
      "description": "Create an Live Website Tracking Parameter",
      "parameters": [
        {
          "name": "person_id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/me.json",
      "method": "/v2/meJsonGet",
      "httpMethod": "get",
      "tag": "Me",
      "description": "Fetch current user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/meetings.json",
      "method": "/v2/meetingsJsonGet",
      "httpMethod": "get",
      "tag": "Meetings",
      "description": "List meetings",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of meetings to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Filters meetings by status. Possible values are: pending, booked, failed, retry"
        },
        {
          "name": "person_id",
          "schema": "string",
          "required": false,
          "description": "Filters meetings by person_id. Multiple person ids can be applied"
        },
        {
          "name": "account_id",
          "schema": "string",
          "required": false,
          "description": "Filters meetings by account_id. Multiple account ids can be applied"
        },
        {
          "name": "person_ids",
          "schema": "array",
          "required": false,
          "description": "Filters meetings by person_id. Multiple person ids can be applied"
        },
        {
          "name": "event_ids",
          "schema": "array",
          "required": false,
          "description": "List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "i_cal_uids",
          "schema": "array",
          "required": false,
          "description": "List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "task_ids",
          "schema": "array",
          "required": false,
          "description": "Filters meetings by task_id. Multiple task ids can be applied"
        },
        {
          "name": "include_meetings_settings",
          "schema": "boolean",
          "required": false,
          "description": "Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects"
        },
        {
          "name": "start_time",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "created_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "user_guids",
          "schema": "array",
          "required": false,
          "description": "Filters meetings by user_guid. Multiple user guids can be applied"
        },
        {
          "name": "show_deleted",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include deleted events in the result"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/meetings/settings/searches.json",
      "method": "/v2/meetings/settings/searchesJsonPost",
      "httpMethod": "post",
      "tag": "Meetings Settings - Searches",
      "description": "List meeting settings",
      "parameters": [
        {
          "name": "user_guids",
          "schema": "array",
          "required": false,
          "description": "Filters meeting settings by array of user_guids"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "calendar_type",
          "schema": "string",
          "required": false,
          "description": "Filters meeting settings by calendar type"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/meetings/settings/{id}.json",
      "method": "/v2/meetings/settings/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Meeting Settings",
      "description": "Update a meeting setting",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "MeetingSetting ID"
        },
        {
          "name": "allow_booking_on_behalf",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_booking_overtime",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "allow_event_overlap",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "availability_limit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "availability_limit_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "buffer_time_duration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "calendar_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "default_meeting_length",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enable_calendar_sync",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_dynamic_location",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "description": ""
        },
        {
          "name": "primary_calendar_connection_failed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "primary_calendar_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "primary_calendar_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reschedule_meetings_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "schedule_buffer_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "schedule_delay",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "share_event_detail",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "time_zone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "times_available",
          "schema": "object",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/meetings/{id}.json",
      "method": "/v2/meetings/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Meetings",
      "description": "Update a meeting",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Meeting ID"
        },
        {
          "name": "event_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "i_cal_uid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "no_show",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "reschedule_status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/mime_email_payloads/{id}.json",
      "method": "/v2/mimeEmailPayloads/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Mime Email Payloads",
      "description": "Fetch the MIME content for email",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of Email"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/notes.json",
      "method": "/v2/notesJsonGet",
      "httpMethod": "get",
      "tag": "Notes",
      "description": "List notes",
      "parameters": [
        {
          "name": "associated_with_type",
          "schema": "string",
          "required": false,
          "description": "Case insensitive type of item with which the note is associated.  Value must be one of: person, account"
        },
        {
          "name": "associated_with_id",
          "schema": "integer",
          "required": false,
          "description": "ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of notes to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/notes.json",
      "method": "/v2/notesJsonPost",
      "httpMethod": "post",
      "tag": "Notes",
      "description": "Create a note",
      "parameters": [
        {
          "name": "associated_with_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "associated_with_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "call_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "skip_crm_sync",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/notes/{id}.json",
      "method": "/v2/notes/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Notes",
      "description": "Delete a note",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Note ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/notes/{id}.json",
      "method": "/v2/notes/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Notes",
      "description": "Fetch a note",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Note ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/notes/{id}.json",
      "method": "/v2/notes/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Notes",
      "description": "Update a note",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Note ID"
        },
        {
          "name": "call_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/ongoing_actions.json",
      "method": "/v2/ongoingActionsJsonPost",
      "httpMethod": "post",
      "tag": "Ongoing Actions",
      "description": "Create an ongoing action",
      "parameters": [
        {
          "name": "action_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/pending_emails.json",
      "method": "/v2/pendingEmailsJsonGet",
      "httpMethod": "get",
      "tag": "Pending Emails",
      "description": "Fetches a list of emails ready to be sent by an external email service. Only emails sent with an External Email Client will appear here.",
      "parameters": [
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/pending_emails/{id}.json",
      "method": "/v2/pendingEmails/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Pending Emails",
      "description": "Updates the status of an email sent by an External Email Client",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Email ID"
        },
        {
          "name": "error_message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "message_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sent_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/people.json",
      "method": "/v2/peopleJsonGet",
      "httpMethod": "get",
      "tag": "People",
      "description": "List people",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of people to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "email_addresses",
          "schema": "array",
          "required": false,
          "description": "Filters people by email address. Multiple emails can be applied. An additional value of \"_is_null\" can be passed to filter people that do not have an email address."
        },
        {
          "name": "owned_by_guid",
          "schema": "array",
          "required": false,
          "description": "Filters people by the owner's guid. Multiple owner guids can be applied"
        },
        {
          "name": "person_stage_id",
          "schema": "array",
          "required": false,
          "description": "Includes people that have a given person_stage. Multiple person stage ids can be applied. An additional value of \"_is_null\" can be passed to filter people that do not have a stage set."
        },
        {
          "name": "crm_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by crm_id. Multiple crm ids can be applied"
        },
        {
          "name": "owner_crm_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of \"_is_null\" can be passed to filter people that are unowned. A \"_not_in\" modifier can be used to exclude specific owner_crm_ids. Example: v2/people?owner_crm_id[_not_in]=id"
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "required": false,
          "description": "Includes people that have a given do_not_contact property"
        },
        {
          "name": "can_email",
          "schema": "boolean",
          "required": false,
          "description": "Includes people that can be emailed given do_not_contact and contact_restrictions property"
        },
        {
          "name": "can_call",
          "schema": "boolean",
          "required": false,
          "description": "Includes people that can be called given do_not_contact and contact_restrictions property"
        },
        {
          "name": "can_text",
          "schema": "boolean",
          "required": false,
          "description": "Includes people that can be sent a text message given do_not_contact and contact_restrictions property"
        },
        {
          "name": "account_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by the account they are linked to. Multiple account ids can be applied"
        },
        {
          "name": "custom_fields",
          "schema": "object",
          "required": false,
          "description": "Filters by people matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/people?custom_fields[custom_field_name]=custom_field_value"
        },
        {
          "name": "import_id",
          "schema": "array",
          "required": false,
          "description": "Filters people that were imported by the given import ids. Multiple import ids can be applied. An additional value of \"_is_null\" can be passed to filter people that were not imported."
        },
        {
          "name": "job_seniority",
          "schema": "array",
          "required": false,
          "description": "Filters people by job seniorty. Multiple job seniorities can be applied. An additional value of \"_is_null\" can be passed to filter people do not have a job_seniority."
        },
        {
          "name": "tag_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by the tag ids applied to the person. Multiple tag ids can be applied."
        },
        {
          "name": "owner_is_active",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether the owner is active or not."
        },
        {
          "name": "cadence_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by the cadence that they are currently on. Multiple cadence_ids can be applied. An additional value of \"_is_null\" can be passed to filter people that are not on a cadence."
        },
        {
          "name": "starred_by_guid",
          "schema": "array",
          "required": false,
          "description": "Filters people who have been starred by the user guids given."
        },
        {
          "name": "replied",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether or not they have replied to an email or not."
        },
        {
          "name": "bounced",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether an email that was sent to them bounced or not."
        },
        {
          "name": "success",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether or not they have been marked as a success or not."
        },
        {
          "name": "eu_resident",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether or not they are marked as an European Union Resident or not."
        },
        {
          "name": "title",
          "schema": "array",
          "required": false,
          "description": "Filters people by their title by exact match. Supports partial matching"
        },
        {
          "name": "country",
          "schema": "array",
          "required": false,
          "description": "Filters people by their country by exact match. Supports partial matching"
        },
        {
          "name": "state",
          "schema": "array",
          "required": false,
          "description": "Filters people by their state by exact match. Supports partial matching"
        },
        {
          "name": "city",
          "schema": "array",
          "required": false,
          "description": "Filters people by their city by exact match. Supports partial matching"
        },
        {
          "name": "last_contacted",
          "schema": "object",
          "required": false,
          "description": "Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.\nAdditional values of \"_is_null\" or \"_is_not_null\" can be passed to filter records that either have no timestamp value or any timestamp value.\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "created_at",
          "schema": "object",
          "required": false,
          "description": "Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "new",
          "schema": "boolean",
          "required": false,
          "description": "Filters people by whether or not that person is on a cadence or if they have been contacted in any way."
        },
        {
          "name": "phone_number",
          "schema": "boolean",
          "required": false,
          "description": "Filter people by whether or not they have a phone number or not"
        },
        {
          "name": "locales",
          "schema": "array",
          "required": false,
          "description": "Filters people by locales. Multiple locales can be applied. An additional value of \"Null\" can be passed to filter people that do not have a locale."
        },
        {
          "name": "owner_id",
          "schema": "array",
          "required": false,
          "description": "Filters people by owner_id. Multiple owner_ids can be applied."
        },
        {
          "name": "_query",
          "schema": "string",
          "required": false,
          "description": "For internal use only. This field does not comply with our backwards compatibility policies. This filter is for authenticated users of Salesloft only and will not work for OAuth Applications. Filters people by the string provided. Can search and filter by name, title, industry, email_address and linked account name."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, last_contacted_at, name, title, job_seniority, call_count, sent_emails, clicked_emails, replied_emails, viewed_emails, account, cadence_stage_name. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/people.json",
      "method": "/v2/peopleJsonPost",
      "httpMethod": "post",
      "tag": "People",
      "description": "Create a person",
      "parameters": [
        {
          "name": "account_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "autotag_date",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "contact_restrictions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "home_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "import_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "job_seniority",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mobile_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "person_company_industry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_stage_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "personal_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "personal_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone_extension",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secondary_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/people/{id}.json",
      "method": "/v2/people/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "People",
      "description": "Delete a person",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Person id"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/people/{id}.json",
      "method": "/v2/people/{id}JsonGet",
      "httpMethod": "get",
      "tag": "People",
      "description": "Fetch a person",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Person ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/people/{id}.json",
      "method": "/v2/people/{id}JsonPut",
      "httpMethod": "put",
      "tag": "People",
      "description": "Update a person",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Person id"
        },
        {
          "name": "account_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "contact_restrictions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "home_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "import_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "job_seniority",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mobile_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "person_company_industry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_stage_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "personal_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "personal_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone_extension",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secondary_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/person_stages.json",
      "method": "/v2/personStagesJsonGet",
      "httpMethod": "get",
      "tag": "Person Stages",
      "description": "List person stages",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of person stages to fetch."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/person_stages.json",
      "method": "/v2/personStagesJsonPost",
      "httpMethod": "post",
      "tag": "Person Stages",
      "description": "Create a person stage",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/person_stages/{id}.json",
      "method": "/v2/personStages/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Person Stages",
      "description": "Delete an person stage",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Stage ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/person_stages/{id}.json",
      "method": "/v2/personStages/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Person Stages",
      "description": "Fetch a person stage",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Stage ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/person_stages/{id}.json",
      "method": "/v2/personStages/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Person Stages",
      "description": "Update a person stage",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Stage ID"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/person_upserts.json",
      "method": "/v2/personUpsertsJsonPost",
      "httpMethod": "post",
      "tag": "Person Upsert",
      "description": "Upsert a person",
      "parameters": [
        {
          "name": "account_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "contact_restrictions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "crm_id_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "custom_fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "do_not_contact",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "home_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "import_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "job_seniority",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkedin_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mobile_phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owner_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "person_company_industry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_company_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "person_stage_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "personal_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "personal_website",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone_extension",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secondary_email_address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "twitter_handle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "upsert_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/phone_number_assignments.json",
      "method": "/v2/phoneNumberAssignmentsJsonGet",
      "httpMethod": "get",
      "tag": "Phone Number Assignments",
      "description": "List phone number assignments",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of phone number assignments to fetch"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/phone_number_assignments/{id}.json",
      "method": "/v2/phoneNumberAssignments/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Phone Number Assignments",
      "description": "Fetch a phone number assignment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "PhoneNumberAssignment ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/phone_numbers/caller_ids.json",
      "method": "/v2/phoneNumbers/callerIdsJsonGet",
      "httpMethod": "get",
      "tag": "Caller IDs",
      "description": "List caller ids",
      "parameters": [
        {
          "name": "phone_number",
          "schema": "string",
          "required": true,
          "description": "E.164 Phone Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/phone_numbers/recording_settings/{id}.json",
      "method": "/v2/phoneNumbers/recordingSettings/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Recording Settings",
      "description": "Fetch recording setting",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "E.164 Phone Number"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/saved_list_views.json",
      "method": "/v2/savedListViewsJsonGet",
      "httpMethod": "get",
      "tag": "Saved List Views",
      "description": "List saved list views",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of saved list views to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "view",
          "schema": "string",
          "required": false,
          "description": "Type of saved list views to fetch."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: name. Defaults to name"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/saved_list_views.json",
      "method": "/v2/savedListViewsJsonPost",
      "httpMethod": "post",
      "tag": "Saved List Views",
      "description": "Create a saved list view",
      "parameters": [
        {
          "name": "is_default",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "view",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "view_params",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/saved_list_views/{id}.json",
      "method": "/v2/savedListViews/{id}JsonDelete",
      "httpMethod": "delete",
      "tag": "Saved List Views",
      "description": "Delete a saved list view",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Saved List View ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/saved_list_views/{id}.json",
      "method": "/v2/savedListViews/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Saved List Views",
      "description": "Fetch a saved list view",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Saved List View ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/saved_list_views/{id}.json",
      "method": "/v2/savedListViews/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Saved List Views",
      "description": "Update a saved list view",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Saved List View ID"
        },
        {
          "name": "is_default",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "view_params",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/steps.json",
      "method": "/v2/stepsJsonGet",
      "httpMethod": "get",
      "tag": "Steps",
      "description": "List steps",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of steps to fetch."
        },
        {
          "name": "cadence_id",
          "schema": "integer",
          "required": false,
          "description": "Filter by cadence ID"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Filter by step type"
        },
        {
          "name": "has_due_actions",
          "schema": "boolean",
          "required": false,
          "description": "Filter by whether a step has due actions"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/steps/{id}.json",
      "method": "/v2/steps/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Steps",
      "description": "Fetch a step",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Step ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/successes.json",
      "method": "/v2/successesJsonGet",
      "httpMethod": "get",
      "tag": "Successes",
      "description": "List successes",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of successes to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters successes by person_id. Multiple person ids can be applied"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, succeeded_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tags.json",
      "method": "/v2/tagsJsonGet",
      "httpMethod": "get",
      "tag": "Tags",
      "description": "List team tags",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Filters tags by name"
        },
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "Filters tags by their IDs"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: name. Defaults to name"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tasks.json",
      "method": "/v2/tasksJsonGet",
      "httpMethod": "get",
      "tag": "Tasks",
      "description": "List tasks",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of tasks to fetch."
        },
        {
          "name": "user_id",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by the user to which they are assigned."
        },
        {
          "name": "person_id",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by the person to which they are associated."
        },
        {
          "name": "account_id",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by the account to which they are associated."
        },
        {
          "name": "current_state",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by their current state. Valid current_states include: ['scheduled', 'completed']."
        },
        {
          "name": "task_type",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by their task type. Valid task_types include: ['call', 'email', 'general']."
        },
        {
          "name": "time_interval_filter",
          "schema": "string",
          "required": false,
          "description": "Filters tasks by time interval. Valid time_intervals include: ['overdue', 'today', 'tomorrow', 'this_week', 'next_week']."
        },
        {
          "name": "idempotency_key",
          "schema": "string",
          "required": false,
          "description": "Filters tasks by idempotency key."
        },
        {
          "name": "locale",
          "schema": "array",
          "required": false,
          "description": "Filters tasks by locale of the person to which they are associated."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: due_date, due_at. Defaults to due_date"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to ASC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tasks.json",
      "method": "/v2/tasksJsonPost",
      "httpMethod": "post",
      "tag": "Tasks",
      "description": "Create a Task",
      "parameters": [
        {
          "name": "current_state",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idempotency_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "person_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "remind_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "task_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user_id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tasks/{id}.json",
      "method": "/v2/tasks/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Tasks",
      "description": "Fetch a task",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Task ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/tasks/{id}.json",
      "method": "/v2/tasks/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Tasks",
      "description": "Update a Task",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Task ID"
        },
        {
          "name": "current_state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "due_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "is_logged",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "remind_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/team.json",
      "method": "/v2/teamJsonGet",
      "httpMethod": "get",
      "tag": "Team",
      "description": "Fetch current team",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/team_template_attachments.json",
      "method": "/v2/teamTemplateAttachmentsJsonGet",
      "httpMethod": "get",
      "tag": "Team Template Attachments",
      "description": "List team template attachments",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of team template attachments to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "team_template_id",
          "schema": "array",
          "required": false,
          "description": "Filters template attachments by team template IDs"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/team_templates.json",
      "method": "/v2/teamTemplatesJsonGet",
      "httpMethod": "get",
      "tag": "Team Templates",
      "description": "List team templates",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of team templates to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "updated_at",
          "schema": "array",
          "required": false,
          "description": "Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.\n\n---CUSTOM---\n{\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Filters email templates by title or subject"
        },
        {
          "name": "tag_ids",
          "schema": "array",
          "required": false,
          "description": "Filters email templates by tags applied to the template by tag ID, not to exceed 100 IDs"
        },
        {
          "name": "tag",
          "schema": "array",
          "required": false,
          "description": "Filters team templates by tags applied to the template, not to exceed 100 tags"
        },
        {
          "name": "include_archived_templates",
          "schema": "boolean",
          "required": false,
          "description": "Filters email templates to include archived templates or not"
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: created_at, updated_at, last_used_at. Defaults to updated_at"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many records to show per page in the range [1, 100]. Defaults to 25"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch results from. Defaults to 1"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "limit_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/team_templates/{id}.json",
      "method": "/v2/teamTemplates/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Team Templates",
      "description": "Fetch a team template",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Team Template ID"
        },
        {
          "name": "include_signature",
          "schema": "boolean",
          "required": false,
          "description": "Optionally will return the templates with the current user's email signature"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/third_party_live_feed_items",
      "method": "/v2/thirdPartyLiveFeedItemsPost",
      "httpMethod": "post",
      "tag": "Live Feed Items",
      "description": "Create a live feed item",
      "parameters": [
        {
          "name": "event_occurred_at",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "idempotency_key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "subject_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "subject_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user_guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/users.json",
      "method": "/v2/usersJsonGet",
      "httpMethod": "get",
      "tag": "Users",
      "description": "List users",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": false,
          "description": "IDs of users to fetch. If a record can't be found, that record won't be returned and your request will be successful"
        },
        {
          "name": "guid",
          "schema": "array",
          "required": false,
          "description": "Filters list to only include guids"
        },
        {
          "name": "group_id",
          "schema": "array",
          "required": false,
          "description": "Filters users by group_id.  An additional value of \"_is_null\" can be passed to filter users that are not in a group"
        },
        {
          "name": "role_id",
          "schema": "array",
          "required": false,
          "description": "Filters users by role_id"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "Filters users based on active attribute. Defaults to not applied"
        },
        {
          "name": "visible_only",
          "schema": "boolean",
          "required": false,
          "description": "Defaults to true.\n\nWhen true, only shows users that are actionable based on the team's privacy settings.\nWhen false, shows all users on the team, even if you can't take action on that user. Deactivated users are also included when false.\n"
        },
        {
          "name": "per_page",
          "schema": "integer",
          "required": false,
          "description": "How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The current page to fetch users from. Defaults to returning all users"
        },
        {
          "name": "include_paging_counts",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include total_pages and total_count in the metadata. Defaults to false"
        },
        {
          "name": "has_crm_user",
          "schema": "boolean",
          "required": false,
          "description": "Filters users based on if they have a crm user mapped or not."
        },
        {
          "name": "work_country",
          "schema": "array",
          "required": false,
          "description": "Filters users based on assigned work_country."
        },
        {
          "name": "sort_by",
          "schema": "string",
          "required": false,
          "description": "Key to sort on, must be one of: id, email, name, group, role. Defaults to id"
        },
        {
          "name": "sort_direction",
          "schema": "string",
          "required": false,
          "description": "Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/users/{id}.json",
      "method": "/v2/users/{id}JsonGet",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Fetch a user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "User ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/users/{id}.json",
      "method": "/v2/users/{id}JsonPut",
      "httpMethod": "put",
      "tag": "Users",
      "description": "Update a user",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "User ID"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "group_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "role_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "work_country",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/webhook_subscriptions",
      "method": "/v2/webhookSubscriptionsGet",
      "httpMethod": "get",
      "tag": "Webhook Subscriptions",
      "description": "List webhook subscriptions",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "required": false,
          "description": "Filters webhook subscriptions by whether is enabled or not."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/webhook_subscriptions",
      "method": "/v2/webhookSubscriptionsPost",
      "httpMethod": "post",
      "tag": "Webhook Subscriptions",
      "description": "Create a webhook subscription",
      "parameters": [
        {
          "name": "callback_token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "callback_url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "event_type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/webhook_subscriptions/{id}",
      "method": "/v2/webhookSubscriptions/{id}Delete",
      "httpMethod": "delete",
      "tag": "Webhook Subscriptions",
      "description": "Delete a webhook subscription",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id of the Webhook Subscription to delete"
        }
      ],
      "responses": []
    },
    {
      "url": "/v2/webhook_subscriptions/{id}",
      "method": "/v2/webhookSubscriptions/{id}Get",
      "httpMethod": "get",
      "tag": "Webhook Subscriptions",
      "description": "Fetch a webhook subscription",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The id for the Webhook Subscription"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/webhook_subscriptions/{id}",
      "method": "/v2/webhookSubscriptions/{id}Put",
      "httpMethod": "put",
      "tag": "Webhook Subscriptions",
      "description": "Update a webhook subscription",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The Webhook Suscription id to update"
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.salesloft.com",
  "apiDescription": "SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts\n",
  "apiTitle": "SalesLoft Platform",
  "endpoints": 88,
  "sdkMethods": 121,
  "schemas": 69,
  "parameters": 818,
  "contactEmail": "integrations@salesloft.com",
  "difficultyScore": 360,
  "difficulty": "Hard"
}