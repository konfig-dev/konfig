{
  "providerName": "adafruit.com",
  "openApiRaw": "https://raw.githubusercontent.com/adafruit/io-api/gh-pages/v2.json",
  "securitySchemes": {
    "HeaderKey": {
      "description": "The AIO Key is used to restrict or grant access to your data. The key is unique, and you can generate a key per feed, and control it in many different ways. The easiest process is to just use your automatically generated master key. You can access this key right from the right-hand side of your dashboard or from an individual feed page.",
      "in": "header",
      "name": "X-AIO-Key",
      "type": "apiKey"
    },
    "HeaderSignature": {
      "description": "The AIO Signature is an AWS inspired request signature.",
      "in": "header",
      "name": "X-AIO-Signature",
      "type": "apiKey"
    },
    "QueryKey": {
      "description": "The AIO Key is used to restrict or grant access to your data. The key is unique, and you can generate a key per feed, and control it in many different ways. The easiest process is to just use your automatically generated master key. You can access this key right from the right-hand side of your dashboard or from an individual feed page.",
      "in": "query",
      "name": "X-AIO-Key",
      "type": "apiKey"
    }
  },
  "homepage": "adafruit.com",
  "apiVersion": "2.0.0",
  "methods": [
    {
      "url": "/user",
      "method": "currentUser",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get information about the current user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/feed/:token",
      "method": "createWebhookFeedData",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Send data to a feed via webhook URL.",
      "parameters": [
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/feed/:token/raw",
      "method": "createRawWebhookFeedData",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Send arbitrary data to a feed via webhook URL.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/activities",
      "method": "destroyActivities",
      "httpMethod": "delete",
      "tag": "Activities",
      "description": "All activities for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": []
    },
    {
      "url": "/{username}/activities",
      "method": "allActivities",
      "httpMethod": "get",
      "tag": "Activities",
      "description": "All activities for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "startTime",
          "schema": "string",
          "description": "Start time for filtering, returns records created after given time."
        },
        {
          "name": "endTime",
          "schema": "string",
          "description": "End time for filtering, returns records created before give time."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of records returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/activities/{type}",
      "method": "getActivity",
      "httpMethod": "get",
      "tag": "Activities",
      "description": "Get activities by type for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "startTime",
          "schema": "string",
          "description": "Start time for filtering, returns records created after given time."
        },
        {
          "name": "endTime",
          "schema": "string",
          "description": "End time for filtering, returns records created before give time."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of records returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards",
      "method": "allDashboards",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "All dashboards for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards",
      "method": "createDashboard",
      "httpMethod": "post",
      "tag": "Dashboards",
      "description": "Create a new Dashboard",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks",
      "method": "allBlocks",
      "httpMethod": "get",
      "tag": "Blocks",
      "description": "All blocks for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks",
      "method": "createBlock",
      "httpMethod": "post",
      "tag": "Blocks",
      "description": "Create a new Block",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "block_feeds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "column",
          "schema": "number",
          "description": ""
        },
        {
          "name": "dashboard_id",
          "schema": "number",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        },
        {
          "name": "row",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_x",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_y",
          "schema": "number",
          "description": ""
        },
        {
          "name": "visual_type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks/{id}",
      "method": "destroyBlock",
      "httpMethod": "delete",
      "tag": "Blocks",
      "description": "Delete an existing Block",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks/{id}",
      "method": "getBlock",
      "httpMethod": "get",
      "tag": "Blocks",
      "description": "Returns Block based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks/{id}",
      "method": "updateBlock",
      "httpMethod": "patch",
      "tag": "Blocks",
      "description": "Update properties of an existing Block",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "block_feeds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "column",
          "schema": "number",
          "description": ""
        },
        {
          "name": "dashboard_id",
          "schema": "number",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        },
        {
          "name": "row",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_x",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_y",
          "schema": "number",
          "description": ""
        },
        {
          "name": "visual_type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{dashboard_id}/blocks/{id}",
      "method": "replaceBlock",
      "httpMethod": "put",
      "tag": "Blocks",
      "description": "Replace an existing Block",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "block_feeds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "column",
          "schema": "number",
          "description": ""
        },
        {
          "name": "dashboard_id",
          "schema": "number",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        },
        {
          "name": "row",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_x",
          "schema": "number",
          "description": ""
        },
        {
          "name": "size_y",
          "schema": "number",
          "description": ""
        },
        {
          "name": "visual_type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{id}",
      "method": "destroyDashboard",
      "httpMethod": "delete",
      "tag": "Dashboards",
      "description": "Delete an existing Dashboard",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{id}",
      "method": "getDashboard",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Returns Dashboard based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{id}",
      "method": "updateDashboard",
      "httpMethod": "patch",
      "tag": "Dashboards",
      "description": "Update properties of an existing Dashboard",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/dashboards/{id}",
      "method": "replaceDashboard",
      "httpMethod": "put",
      "tag": "Dashboards",
      "description": "Replace an existing Dashboard",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds",
      "method": "allFeeds",
      "httpMethod": "get",
      "tag": "Feeds",
      "description": "All feeds for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds",
      "method": "createFeed",
      "httpMethod": "post",
      "tag": "Feeds",
      "description": "Create a new Feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}",
      "method": "destroyFeed",
      "httpMethod": "delete",
      "tag": "Feeds",
      "description": "Delete an existing Feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": []
    },
    {
      "url": "/{username}/feeds/{feed_key}",
      "method": "getFeed",
      "httpMethod": "get",
      "tag": "Feeds",
      "description": "Get feed by feed key",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}",
      "method": "updateFeed",
      "httpMethod": "patch",
      "tag": "Feeds",
      "description": "Update properties of an existing Feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}",
      "method": "replaceFeed",
      "httpMethod": "put",
      "tag": "Feeds",
      "description": "Replace an existing Feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data",
      "method": "allData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Get all data for the given feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "startTime",
          "schema": "string",
          "description": "Start time for filtering, returns records created after given time."
        },
        {
          "name": "endTime",
          "schema": "string",
          "description": "End time for filtering, returns records created before give time."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of records returned."
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data",
      "method": "createData",
      "httpMethod": "post",
      "tag": "Data",
      "description": "Create new Data",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ele",
          "schema": "string",
          "description": ""
        },
        {
          "name": "epoch",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/batch",
      "method": "batchCreateData",
      "httpMethod": "post",
      "tag": "Data",
      "description": "Create multiple new Data records",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/chart",
      "method": "chartData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Chart data for current feed",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "startTime",
          "schema": "string",
          "description": "Start time for filtering, returns records created after given time."
        },
        {
          "name": "endTime",
          "schema": "string",
          "description": "End time for filtering, returns records created before give time."
        },
        {
          "name": "resolution",
          "schema": "integer",
          "description": "A resolution size in minutes. By giving a resolution value you will get back grouped data points aggregated over resolution-sized intervals. NOTE: time span is preferred over resolution, so if you request a span of time that includes more than max limit points you may get a larger resolution than you requested. Valid resolutions are 1, 5, 10, 30, 60, and 120."
        },
        {
          "name": "hours",
          "schema": "integer",
          "description": "The number of hours the chart should cover."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/first",
      "method": "firstData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "First Data in Queue",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/last",
      "method": "lastData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Last Data in Queue",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/next",
      "method": "nextData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Next Data in Queue",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/previous",
      "method": "previousData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Previous Data in Queue",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/retain",
      "method": "retainData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Last Data in MQTT CSV format",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/{id}",
      "method": "destroyData",
      "httpMethod": "delete",
      "tag": "Data",
      "description": "Delete existing Data",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/{id}",
      "method": "getData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "Returns data based on feed key",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "include",
          "schema": "string",
          "description": "List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. "
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/{id}",
      "method": "updateData",
      "httpMethod": "patch",
      "tag": "Data",
      "description": "Update properties of existing Data",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ele",
          "schema": "string",
          "description": ""
        },
        {
          "name": "epoch",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/data/{id}",
      "method": "replaceData",
      "httpMethod": "put",
      "tag": "Data",
      "description": "Replace existing Data",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ele",
          "schema": "string",
          "description": ""
        },
        {
          "name": "epoch",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/feeds/{feed_key}/details",
      "method": "getFeedDetails",
      "httpMethod": "get",
      "tag": "Feeds",
      "description": "Get detailed feed by feed key",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups",
      "method": "allGroups",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "All groups for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups",
      "method": "createGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Create a new Group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}",
      "method": "destroyGroup",
      "httpMethod": "delete",
      "tag": "Groups",
      "description": "Delete an existing Group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}",
      "method": "getGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Returns Group based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}",
      "method": "updateGroup",
      "httpMethod": "patch",
      "tag": "Groups",
      "description": "Update properties of an existing Group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}",
      "method": "replaceGroup",
      "httpMethod": "put",
      "tag": "Groups",
      "description": "Replace an existing Group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/add",
      "method": "addFeedToGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Add an existing Feed to a Group",
      "parameters": [
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/data",
      "method": "createGroupData",
      "httpMethod": "post",
      "tag": "Data",
      "description": "Create new data for multiple feeds in a group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "feeds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "location",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/feeds",
      "method": "allGroupFeeds",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "All feeds for current user in a given group",
      "parameters": [
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/feeds",
      "method": "createGroupFeed",
      "httpMethod": "post",
      "tag": "Feeds",
      "description": "Create a new Feed in a Group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/feeds/{feed_key}/data",
      "method": "allGroupFeedData",
      "httpMethod": "get",
      "tag": "Data",
      "description": "All data for current feed in a specific group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "startTime",
          "schema": "string",
          "description": "Start time for filtering data. Returns data created after given time."
        },
        {
          "name": "endTime",
          "schema": "string",
          "description": "End time for filtering data. Returns data created before give time."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Limit the number of records returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/feeds/{feed_key}/data",
      "method": "createGroupFeedData",
      "httpMethod": "post",
      "tag": "Data",
      "description": "Create new Data in a feed belonging to a particular group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ele",
          "schema": "string",
          "description": ""
        },
        {
          "name": "epoch",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lat",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lon",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/feeds/{feed_key}/data/batch",
      "method": "batchCreateGroupFeedData",
      "httpMethod": "post",
      "tag": "Data",
      "description": "Create multiple new Data records in a feed belonging to a particular group",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "feedKey",
          "schema": "string",
          "required": true,
          "description": "a valid feed key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/groups/{group_key}/remove",
      "method": "removeFeedFromGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Remove a Feed from a Group",
      "parameters": [
        {
          "name": "groupKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "feedKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/throttle",
      "method": "getCurrentUserThrottle",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get the user's data rate limit and current activity level.",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens",
      "method": "allTokens",
      "httpMethod": "get",
      "tag": "Tokens",
      "description": "All tokens for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens",
      "method": "createToken",
      "httpMethod": "post",
      "tag": "Tokens",
      "description": "Create a new Token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens/{id}",
      "method": "destroyToken",
      "httpMethod": "delete",
      "tag": "Tokens",
      "description": "Delete an existing Token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens/{id}",
      "method": "getToken",
      "httpMethod": "get",
      "tag": "Tokens",
      "description": "Returns Token based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens/{id}",
      "method": "updateToken",
      "httpMethod": "patch",
      "tag": "Tokens",
      "description": "Update properties of an existing Token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/tokens/{id}",
      "method": "replaceToken",
      "httpMethod": "put",
      "tag": "Tokens",
      "description": "Replace an existing Token",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers",
      "method": "allTriggers",
      "httpMethod": "get",
      "tag": "Triggers",
      "description": "All triggers for current user",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers",
      "method": "createTrigger",
      "httpMethod": "post",
      "tag": "Triggers",
      "description": "Create a new Trigger",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers/{id}",
      "method": "destroyTrigger",
      "httpMethod": "delete",
      "tag": "Triggers",
      "description": "Delete an existing Trigger",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers/{id}",
      "method": "getTrigger",
      "httpMethod": "get",
      "tag": "Triggers",
      "description": "Returns Trigger based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers/{id}",
      "method": "updateTrigger",
      "httpMethod": "patch",
      "tag": "Triggers",
      "description": "Update properties of an existing Trigger",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/triggers/{id}",
      "method": "replaceTrigger",
      "httpMethod": "put",
      "tag": "Triggers",
      "description": "Replace an existing Trigger",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl",
      "method": "allPermissions",
      "httpMethod": "get",
      "tag": "Permissions",
      "description": "All permissions for current user and type",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl",
      "method": "createPermission",
      "httpMethod": "post",
      "tag": "Permissions",
      "description": "Create a new Permission",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope_value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl/{id}",
      "method": "destroyPermission",
      "httpMethod": "delete",
      "tag": "Permissions",
      "description": "Delete an existing Permission",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl/{id}",
      "method": "getPermission",
      "httpMethod": "get",
      "tag": "Permissions",
      "description": "Returns Permission based on ID",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl/{id}",
      "method": "updatePermission",
      "httpMethod": "patch",
      "tag": "Permissions",
      "description": "Update properties of an existing Permission",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope_value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{username}/{type}/{type_id}/acl/{id}",
      "method": "replacePermission",
      "httpMethod": "put",
      "tag": "Permissions",
      "description": "Replace an existing Permission",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "a valid username string"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "typeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope_value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://io.adafruit.com/api/v2",
  "apiDescription": "### The Internet of Things for Everyone\n\nThe Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).\n\nThis API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).\n\n#### Authentication\n\nAuthentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:\n\n    $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds\n\nOr like this:\n\n    $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345\n\nUsing the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:\n\n```js\nvar request = require('request');\n\nvar options = {\n  url: 'https://io.adafruit.com/api/v2/io_username/feeds',\n  headers: {\n    'X-AIO-Key': 'io_key_12345',\n    'Content-Type': 'application/json'\n  }\n};\n\nfunction callback(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    var feeds = JSON.parse(body);\n    console.log(feeds.length + \" FEEDS AVAILABLE\");\n\n    feeds.forEach(function (feed) {\n      console.log(feed.name, feed.key);\n    })\n  }\n}\n\nrequest(options, callback);\n```\n\nUsing the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):\n\n```arduino\n/// based on\n/// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino\n\n#include <Arduino.h>\n#include <ESP8266WiFi.h>\n#include <ESP8266WiFiMulti.h>\n#include <ESP8266HTTPClient.h>\n\nESP8266WiFiMulti WiFiMulti;\n\nconst char* ssid = \"---\";\nconst char* password = \"---\";\n\nconst char* host = \"io.adafruit.com\";\n\nconst char* io_key = \"---\";\nconst char* path_with_username = \"/api/v2/---/dashboards\";\n\n// Use web browser to view and copy\n// SHA1 fingerprint of the certificate\nconst char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";\n\nvoid setup() {\n  Serial.begin(115200);\n\n  for(uint8_t t = 4; t > 0; t--) {\n    Serial.printf(\"[SETUP] WAIT %d...\\n\", t);\n    Serial.flush();\n    delay(1000);\n  }\n\n  WiFi.mode(WIFI_STA);\n  WiFiMulti.addAP(ssid, password);\n\n  // wait for WiFi connection\n  while(WiFiMulti.run() != WL_CONNECTED) {\n    Serial.print('.');\n    delay(1000);\n  }\n\n  Serial.println(\"[WIFI] connected!\");\n\n  HTTPClient http;\n\n  // start request with URL and TLS cert fingerprint for verification\n  http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);\n\n  // IO API authentication\n  http.addHeader(\"X-AIO-Key\", io_key);\n\n  // start connection and send HTTP header\n  int httpCode = http.GET();\n\n  // httpCode will be negative on error\n  if(httpCode > 0) {\n    // HTTP header has been send and Server response header has been handled\n    Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);\n\n    // HTTP 200 OK\n    if(httpCode == HTTP_CODE_OK) {\n      String payload = http.getString();\n      Serial.println(payload);\n    }\n\n    http.end();\n  }\n}\n\nvoid loop() {}\n```\n\n#### Client Libraries\n\nWe have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.\n\n",
  "apiTitle": "Adafruit IO REST API",
  "endpoints": 36,
  "sdkMethods": 71,
  "schemas": 14,
  "parameters": 279,
  "difficultyScore": 147.75,
  "difficulty": "Medium"
}