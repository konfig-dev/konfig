{
  "providerName": "openai.com",
  "openApiRaw": "https://raw.githubusercontent.com/openai/openai-openapi/master/openapi.yaml",
  "securitySchemes": {},
  "homepage": "openai.com",
  "apiVersion": "1.2.0",
  "methods": [
    {
      "url": "/answers",
      "method": "createAnswer",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Answers the specified question using the provided documents and examples.\n\nThe endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n",
      "parameters": [
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "examples",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "examples_context",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "expand",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "file",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "logit_bias",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "logprobs",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "max_rerank",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "max_tokens",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "question",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "return_metadata",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "return_prompt",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "search_model",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "stop",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/audio/transcriptions",
      "method": "createTranscription",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Transcribes audio into the input language.",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "prompt",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "response_format",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/audio/translations",
      "method": "createTranslation",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Translates audio into into English.",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "prompt",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "response_format",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/chat/completions",
      "method": "createChatCompletion",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates a completion for the chat message",
      "parameters": [
        {
          "name": "frequency_penalty",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "logit_bias",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "max_tokens",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "messages",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "presence_penalty",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "stop",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "stream",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "top_p",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/classifications",
      "method": "createClassification",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Classifies the specified `query` using provided examples.\n\nThe endpoint first [searches](/docs/api-reference/searches) over the labeled examples\nto select the ones most relevant for the particular query. Then, the relevant examples\nare combined with the query to construct a prompt to produce the final label via the\n[completions](/docs/api-reference/completions) endpoint.\n\nLabeled examples can be provided via an uploaded `file`, or explicitly listed in the\nrequest using the `examples` parameter for quick tests and small scale use cases.\n",
      "parameters": [
        {
          "name": "examples",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "expand",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "file",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "logit_bias",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "logprobs",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "max_examples",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "return_metadata",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "return_prompt",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "search_model",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/completions",
      "method": "createCompletion",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates a completion for the provided prompt and parameters",
      "parameters": [
        {
          "name": "best_of",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "echo",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "frequency_penalty",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "logit_bias",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "logprobs",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "max_tokens",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "presence_penalty",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "prompt",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "stop",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "stream",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "suffix",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "top_p",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/edits",
      "method": "createEdit",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates a new edit for the provided input, instruction, and parameters.",
      "parameters": [
        {
          "name": "input",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instruction",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "temperature",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "top_p",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/embeddings",
      "method": "createEmbedding",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates an embedding vector representing the input text.",
      "parameters": [
        {
          "name": "input",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/engines",
      "method": "listEngines",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/engines/{engine_id}",
      "method": "retrieveEngine",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Retrieves a model instance, providing basic information about it such as the owner and availability.",
      "parameters": [
        {
          "name": "engineId",
          "schema": "string",
          "required": true,
          "description": "The ID of the engine to use for this request\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/engines/{engine_id}/search",
      "method": "createSearch",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.\n\nTo go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.\n\nThe similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n",
      "parameters": [
        {
          "name": "engineId",
          "schema": "string",
          "required": true,
          "description": "The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`."
        },
        {
          "name": "documents",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "file",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "max_rerank",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "return_metadata",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/files",
      "method": "listFiles",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Returns a list of files that belong to the user's organization.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/files",
      "method": "createFile",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "purpose",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{file_id}",
      "method": "deleteFile",
      "httpMethod": "delete",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Delete a file.",
      "parameters": [
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": "The ID of the file to use for this request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{file_id}",
      "method": "retrieveFile",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Returns information about a specific file.",
      "parameters": [
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": "The ID of the file to use for this request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/files/{file_id}/content",
      "method": "downloadFile",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Returns the contents of the specified file",
      "parameters": [
        {
          "name": "fileId",
          "schema": "string",
          "required": true,
          "description": "The ID of the file to use for this request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/fine-tunes",
      "method": "listFineTunes",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "List your organization's fine-tuning jobs\n",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/fine-tunes",
      "method": "createFineTune",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n",
      "parameters": [
        {
          "name": "batch_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "classification_betas",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "classification_n_classes",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "classification_positive_class",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "compute_classification_metrics",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "learning_rate_multiplier",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "n_epochs",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "prompt_loss_weight",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "suffix",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "training_file",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "validation_file",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/fine-tunes/{fine_tune_id}",
      "method": "retrieveFineTune",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Gets info about the fine-tune job.\n\n[Learn more about Fine-tuning](/docs/guides/fine-tuning)\n",
      "parameters": [
        {
          "name": "fineTuneId",
          "schema": "string",
          "required": true,
          "description": "The ID of the fine-tune job\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/fine-tunes/{fine_tune_id}/cancel",
      "method": "cancelFineTune",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Immediately cancel a fine-tune job.\n",
      "parameters": [
        {
          "name": "fineTuneId",
          "schema": "string",
          "required": true,
          "description": "The ID of the fine-tune job to cancel\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/fine-tunes/{fine_tune_id}/events",
      "method": "listFineTuneEvents",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Get fine-grained status updates for a fine-tune job.\n",
      "parameters": [
        {
          "name": "fineTuneId",
          "schema": "string",
          "required": true,
          "description": "The ID of the fine-tune job to get events for.\n"
        },
        {
          "name": "stream",
          "schema": "boolean",
          "required": false,
          "description": "Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n`data: [DONE]` message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/edits",
      "method": "createImageEdit",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates an edited or extended image given an original image and a prompt.",
      "parameters": [
        {
          "name": "image",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mask",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "prompt",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "response_format",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/generations",
      "method": "createImage",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates an image given a prompt.",
      "parameters": [
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "prompt",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "response_format",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/variations",
      "method": "createImageVariation",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Creates a variation of a given image.",
      "parameters": [
        {
          "name": "image",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "n",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "response_format",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/models",
      "method": "listModels",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/models/{model}",
      "method": "deleteModel",
      "httpMethod": "delete",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Delete a fine-tuned model. You must have the Owner role in your organization.",
      "parameters": [
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "The model to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/models/{model}",
      "method": "retrieveModel",
      "httpMethod": "get",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
      "parameters": [
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": "The ID of the model to use for this request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/moderations",
      "method": "createModeration",
      "httpMethod": "post",
      "tag": "OpenAI",
      "typeScriptTag": "openAi",
      "description": "Classifies if text violates OpenAI's Content Policy",
      "parameters": [
        {
          "name": "input",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.openai.com/v1",
  "apiDescription": "APIs for sampling from and fine-tuning language models",
  "apiTitle": "OpenAI API",
  "endpoints": 24,
  "sdkMethods": 28,
  "schemas": 40,
  "parameters": 130,
  "difficultyScore": 80.5,
  "difficulty": "Easy"
}