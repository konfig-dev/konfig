{
  "providerName": "docker.com",
  "openApiRaw": "https://raw.githubusercontent.com/docker/docs/main/docker-hub/api/dvp.yaml",
  "securitySchemes": {
    "HubAuth": {
      "bearerFormat": "JWT",
      "description": "JWT Bearer Authentication is required to access the Docker DVP Data API.  \n  \nNote - PATs are not supported on this API  \n  \nThis authentication documentation is duplicated from the [Hub API Authentication docs](https://docs.docker.com/docker-hub/api/latest/#tag/authentication)\n",
      "scheme": "bearer",
      "type": "http",
      "x-displayName": "Docker Hub Authentication"
    }
  },
  "homepage": "docker.com",
  "serviceName": "dvp",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/",
      "method": "getNamespaces",
      "httpMethod": "get",
      "tag": "discovery",
      "typeScriptTag": "discovery",
      "description": "Get namespaces and repos",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/namespaces/{namespace}",
      "method": "getNamespace",
      "httpMethod": "get",
      "tag": "discovery",
      "typeScriptTag": "discovery",
      "description": "Get namespace",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Namespace to fetch data for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/namespaces/{namespace}/pulls/exports/years",
      "method": "getNamespaceYears",
      "httpMethod": "get",
      "tag": "namespaces",
      "typeScriptTag": "namespaces",
      "description": "Get years with data",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Namespace to fetch data for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}",
      "method": "getNamespaceTimespans",
      "httpMethod": "get",
      "tag": "namespaces",
      "typeScriptTag": "namespaces",
      "description": "Get timespans with data",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Namespace to fetch data for"
        },
        {
          "name": "year",
          "schema": "integer",
          "required": true,
          "description": "Year to fetch data for"
        },
        {
          "name": "timespantype",
          "schema": "string",
          "required": true,
          "description": "Type of timespan to fetch data for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}",
      "method": "getNamespaceTimespanMetadata",
      "httpMethod": "get",
      "tag": "namespaces",
      "typeScriptTag": "namespaces",
      "description": "Get namespace metadata for timespan",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Namespace to fetch data for"
        },
        {
          "name": "year",
          "schema": "integer",
          "required": true,
          "description": "Year to fetch data for"
        },
        {
          "name": "timespantype",
          "schema": "string",
          "required": true,
          "description": "Type of timespan to fetch data for"
        },
        {
          "name": "timespan",
          "schema": "integer",
          "required": true,
          "description": "Timespan to fetch data for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}",
      "method": "getNamespaceDataByTimespan",
      "httpMethod": "get",
      "tag": "namespaces",
      "typeScriptTag": "namespaces",
      "description": "Get namespace data for timespan",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Namespace to fetch data for"
        },
        {
          "name": "year",
          "schema": "integer",
          "required": true,
          "description": "Year to fetch data for"
        },
        {
          "name": "timespantype",
          "schema": "string",
          "required": true,
          "description": "Type of timespan to fetch data for"
        },
        {
          "name": "timespan",
          "schema": "integer",
          "required": true,
          "description": "Timespan to fetch data for"
        },
        {
          "name": "dataview",
          "schema": "string",
          "required": true,
          "description": "Type of data to fetch"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/users/2fa-login",
      "method": "postUsers2FaLogin",
      "httpMethod": "post",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Second factor authentication.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "login_2fa_token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "successful user login response"
        },
        {
          "statusCode": "401",
          "description": "failed second factor login response."
        }
      ]
    },
    {
      "url": "/v2/users/login",
      "method": "postUsersLogin",
      "httpMethod": "post",
      "tag": "authentication",
      "typeScriptTag": "authentication",
      "description": "Create an authentication token",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "successful user login response"
        },
        {
          "statusCode": "401",
          "description": "failed user login response or second factor required"
        }
      ]
    }
  ],
  "apiBaseUrl": "https://hub.docker.com/api/publisher/analytics/v1",
  "apiDescription": "The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.\n  \n#### Summary data\n\nIn your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). \n\nThere are two levels of summary data:\n\n- Repository-level, a summary of every namespace and repository\n- Tag- or digest-level, a summary of every namespace, repository, and reference\n  (tag or digest)\n\n The summary data formats contain the following data points:\n\n- Unique IP address count\n- Pulls by tag count\n- Pulls by digest count\n- Version check count\n\n#### Raw data\n\nIn your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.\n\n- Type (industry)\n- Host (cloud provider)\n- Country (geolocation)\n- Timestamp\n- Namespace\n- Repository\n- Reference (digest is always included, tag is provided when available)\n- HTTP request method\n- Action, one of the following:\n  - Pull by tag\n  - Pull by digest\n  - Version check\n- User-Agent\n",
  "apiTitle": "DVP Data API",
  "endpoints": 8,
  "sdkMethods": 10,
  "schemas": 21,
  "parameters": 18,
  "difficultyScore": 25,
  "difficulty": "Easy"
}