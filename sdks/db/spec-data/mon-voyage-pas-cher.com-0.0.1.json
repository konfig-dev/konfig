{
  "providerName": "mon-voyage-pas-cher.com",
  "openApiRaw": "https://www.mon-voyage-pas-cher.com/assets/documentation/swagger.yaml",
  "homepage": "mon-voyage-pas-cher.com",
  "apiVersion": "0.0.1",
  "methods": [
    {
      "url": "/airports",
      "method": "getAirport",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Search airports by country / Search nearby airports / Search an airport",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "the language code of the language you want the content to be returned"
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": "The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport."
        },
        {
          "name": "radius",
          "schema": "integer",
          "required": false,
          "description": "Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed"
        },
        {
          "name": "countrycode",
          "schema": "string",
          "required": false,
          "description": "Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius"
        },
        {
          "name": "top_airports",
          "schema": "boolean",
          "required": false,
          "description": "Filter the results to only the top and large airports airports."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This section provides response schema of Airport Search Response"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/airports",
      "method": "/airportsOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/cities/findcitiesfromlatlong",
      "method": "getCities",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Search all cities from lat/long or countrycode",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "the language code of the language you want the content to be returned"
        },
        {
          "name": "countrycode",
          "schema": "string",
          "required": false,
          "description": "if you want to limit the result to one country"
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": "The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456)"
        },
        {
          "name": "radius",
          "schema": "integer",
          "required": false,
          "description": "Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit of the result. Default is 20 rows, and maximum is 50."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "offset of the result set"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": true,
          "description": "The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a Cities API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/cities/findcitiesfromlatlong",
      "method": "/cities/findcitiesfromlatlongOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/cities/findcitiesfromtext",
      "method": "getAutocomplete",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Retrieve cities informations from a string / build an autocomplete",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "the string you want to search"
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "the language code of the language you want the content to be returned"
        },
        {
          "name": "countrycode",
          "schema": "string",
          "required": false,
          "description": "if you want to limit the result to one country"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": true,
          "description": "The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a Cities API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/cities/findcitiesfromtext",
      "method": "/cities/findcitiesfromtextOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/cities/significant",
      "method": "getSignificantCities",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Search significant cities from lat/long or countrycode",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "the language code of the language you want the content to be returned"
        },
        {
          "name": "pourcent",
          "schema": "number",
          "required": false,
          "description": "The pourcent of population the cities need to be in order to appear in results"
        },
        {
          "name": "countrycode",
          "schema": "string",
          "required": false,
          "description": "if you want to limit the result to one country"
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": "The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456)"
        },
        {
          "name": "radius",
          "schema": "integer",
          "required": false,
          "description": "Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit of the result. Default is 20 rows, and maximum is 50."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "offset of the result set"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": true,
          "description": "The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a Cities API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/cities/significant",
      "method": "/cities/significantOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/continents",
      "method": "getContinents",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Search all continents or one specific continent",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "The language code of the language you want the content to be returned"
        },
        {
          "name": "continentcode",
          "schema": "string",
          "required": false,
          "description": "The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a Continent API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/continents",
      "method": "/continentsOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/countries",
      "method": "getCountries",
      "httpMethod": "get",
      "tag": "Geography APIs",
      "description": "Search all countries or one specific country",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "the language code of the language you want the content to be returned"
        },
        {
          "name": "countrycode",
          "schema": "string",
          "required": false,
          "description": "The code of the country you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a Countries API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/countries",
      "method": "/countriesOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/distance",
      "method": "getDistance",
      "httpMethod": "get",
      "tag": "Services APIs",
      "description": "Calculate distance between lats/longs",
      "parameters": [
        {
          "name": "locationA",
          "schema": "string",
          "required": true,
          "description": "The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) of location point A"
        },
        {
          "name": "locationB",
          "schema": "string",
          "required": true,
          "description": "The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) of location point B"
        },
        {
          "name": "unit",
          "schema": "string",
          "required": false,
          "description": "The unit of length you want the elevation returned either meters or feet returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This section provides response schema of pong response"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/distance",
      "method": "/distanceOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/elevation",
      "method": "getElevation",
      "httpMethod": "get",
      "tag": "Services APIs",
      "description": "Search elevation informations from lat/long",
      "parameters": [
        {
          "name": "locations",
          "schema": "string",
          "required": true,
          "description": "The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) or a list of coordinates separated using the pipe ('|') character. The maximum number of coordinates you can send at one time is 20 ( ex. 67.85572,20.22513|27.85572,20.22513 )"
        },
        {
          "name": "unit",
          "schema": "string",
          "required": false,
          "description": "The unit of length you want the elevation returned either meters or feet returned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a TimezoneRequest"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/elevation",
      "method": "/elevationOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/pong",
      "method": "getPing",
      "httpMethod": "get",
      "tag": "Utilities APIs",
      "description": "Returns a ping. In case you need a health check in your system. Cannot be called /ping as AWS is using this route for their health check. This webservice doesn't have CORS enable, as it's supposed to be call server to server and not from a webpage ( it won't work over the tester)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "This section provides response schema of pong response"
        }
      ]
    },
    {
      "url": "/sun_positions",
      "method": "getSun",
      "httpMethod": "get",
      "tag": "Services APIs",
      "description": "Search position of sun from lat/long and date",
      "parameters": [
        {
          "name": "location",
          "schema": "string",
          "required": true,
          "description": "Here you can send either a latitude / longitude"
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": "The date for what you will get the data ( full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21 ), if not provided as parameter, today is going to be used"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a SunPosition API call"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/sun_positions",
      "method": "/sunPositionsOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/timezone",
      "method": "getTimezone",
      "httpMethod": "get",
      "tag": "Services APIs",
      "description": "Search timezone and time informations from lat/long",
      "parameters": [
        {
          "name": "location",
          "schema": "string",
          "required": true,
          "description": "Here you can send either a latitude / longitude ( ex. 67.85572,20.22513 ) or a IATA Code ( ex. LHR for London Heathrow)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This is the main object for the response of a TimezoneRequest"
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/timezone",
      "method": "/timezoneOptions",
      "httpMethod": "options",
      "description": "CORS support",
      "parameters": [],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.mon-voyage-pas-cher.com",
  "apiTitle": "Mon-voyage-pas-cher.com Public API",
  "endpoints": 12,
  "sdkMethods": 33,
  "schemas": 16,
  "parameters": 36,
  "difficultyScore": 50,
  "difficulty": "Easy"
}