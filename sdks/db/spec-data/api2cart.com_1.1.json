{
  "providerName": "api2cart.com",
  "openApiRaw": "https://app.api2cart.com/default/index/swagger-json",
  "securitySchemes": {
    "api_key": {
      "in": "header",
      "name": "x-api-key",
      "type": "apiKey"
    },
    "store_key": {
      "in": "header",
      "name": "x-store-key",
      "type": "apiKey"
    }
  },
  "homepage": "api2cart.com",
  "apiVersion": "1.1",
  "methods": [
    {
      "url": "/account.cart.add.json",
      "method": "accountCartAdd",
      "httpMethod": "post",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Add store to the account",
      "parameters": [
        {
          "name": "3dcart_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "3dcart_private_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "3dcartapi_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_access_key_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_marketplaces_ids",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_secret_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_seller_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_sp_api_environment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "amazon_sp_aws_region",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_aws_role_arn",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_aws_user_key_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_aws_user_secret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_client_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_client_secret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amazon_sp_refresh_token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "aspdotnetstorefront_api_pass",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "aspdotnetstorefront_api_user",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_admin_account",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_api_path",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_client_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bigcommerceapi_context",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bridge_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cart_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "commercehq_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "commercehq_api_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "db_tables_prefix",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "demandware_api_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "demandware_client_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "demandware_user_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "demandware_user_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_client_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_client_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_environment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_refresh_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_runame",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ebay_site_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ecwid_acess_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ecwid_store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etsy_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etsy_client_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "etsy_keystring",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etsy_refresh_token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "etsy_shared_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "etsy_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ftp_host",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ftp_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ftp_port",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "ftp_store_dir",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ftp_user",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybris_client_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybris_client_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybris_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybris_username",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybris_websites",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "lightspeed_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lightspeed_api_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "magento_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "magento_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "magento_consumer_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "magento_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mercado_libre_app_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mercado_libre_app_secret_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mercado_libre_refresh_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "neto_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "neto_api_username",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "prestashop_webservice_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopify_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopify_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopify_api_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopify_shared_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopware_access_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopware_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shopware_api_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "squarespace_api_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_root",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "validate_version",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "verify",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "volusion_login",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "volusion_password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "walmart_channel_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "walmart_client_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "walmart_client_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "walmart_environment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wc_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wc_consumer_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wix_app_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wix_app_secret_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wix_refresh_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "zid_access_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "zid_authorization",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "zid_client_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "zid_client_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "zid_refresh_token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account.cart.list.json",
      "method": "accountCartList",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Get list of carts.",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "requestFromDate",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "requestToDate",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "storeUrl",
          "schema": "string",
          "required": false,
          "description": "A web address of a store"
        },
        {
          "name": "storeKey",
          "schema": "string",
          "required": false,
          "description": "Find store by store key"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account.config.update.json",
      "method": "accountConfigUpdate",
      "httpMethod": "put",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Update configs in the API2Cart database.",
      "parameters": [
        {
          "name": "newStoreKey",
          "schema": "string",
          "required": false,
          "description": "Update store key"
        },
        {
          "name": "bridgeUrl",
          "schema": "string",
          "required": false,
          "description": "This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)"
        },
        {
          "name": "storeRoot",
          "schema": "string",
          "required": false,
          "description": "Absolute path to the store root directory (used with \"bridge_url\" parameter)"
        },
        {
          "name": "dbTablesPrefix",
          "schema": "string",
          "required": false,
          "description": "DB tables prefix"
        },
        {
          "name": "3DcartPrivateKey",
          "schema": "string",
          "required": false,
          "description": "3DCart Private Key"
        },
        {
          "name": "3DcartAccessToken",
          "schema": "string",
          "required": false,
          "description": "3DCart Token"
        },
        {
          "name": "3DcartapiApiKey",
          "schema": "string",
          "required": false,
          "description": "3DCart API Key"
        },
        {
          "name": "amazonSpClientId",
          "schema": "string",
          "required": false,
          "description": "Amazon SP API app client id"
        },
        {
          "name": "amazonSpClientSecret",
          "schema": "string",
          "required": false,
          "description": "Amazon SP API app client secret"
        },
        {
          "name": "amazonSpAwsUserKeyId",
          "schema": "string",
          "required": false,
          "description": "Amazon AWS user access key ID"
        },
        {
          "name": "amazonSpAwsUserSecret",
          "schema": "string",
          "required": false,
          "description": "Amazon AWS user secret access key"
        },
        {
          "name": "amazonSpAwsRegion",
          "schema": "string",
          "required": false,
          "description": "Amazon AWS Region"
        },
        {
          "name": "amazonSpAwsRoleArn",
          "schema": "string",
          "required": false,
          "description": "Amazon AWS Role ARN"
        },
        {
          "name": "amazonSpRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Amazon SP API OAuth refresh token"
        },
        {
          "name": "amazonSpApiEnvironment",
          "schema": "string",
          "required": false,
          "description": "Amazon SP API environment"
        },
        {
          "name": "amazonAccessToken",
          "schema": "string",
          "required": false,
          "description": "MWS Auth Token. Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "amazonSellerId",
          "schema": "string",
          "required": false,
          "description": "Amazon Seller ID (Merchant token)"
        },
        {
          "name": "amazonMarketplacesIds",
          "schema": "string",
          "required": false,
          "description": "Amazon Marketplace IDs comma separated string"
        },
        {
          "name": "amazonSecretKey",
          "schema": "string",
          "required": false,
          "description": "Amazon Secret Key"
        },
        {
          "name": "amazonAccessKeyId",
          "schema": "string",
          "required": false,
          "description": "Amazon Secret Key Id"
        },
        {
          "name": "aspdotnetstorefrontApiUser",
          "schema": "string",
          "required": false,
          "description": "It's a AspDotNetStorefront account for which API is available"
        },
        {
          "name": "aspdotnetstorefrontApiPass",
          "schema": "string",
          "required": false,
          "description": "AspDotNetStorefront API Password"
        },
        {
          "name": "bigcommerceapiAdminAccount",
          "schema": "string",
          "required": false,
          "description": "It's a BigCommerce account for which API is enabled"
        },
        {
          "name": "bigcommerceapiApiPath",
          "schema": "string",
          "required": false,
          "description": "BigCommerce API URL"
        },
        {
          "name": "bigcommerceapiApiKey",
          "schema": "string",
          "required": false,
          "description": "Bigcommerce API Key"
        },
        {
          "name": "bigcommerceapiClientId",
          "schema": "string",
          "required": false,
          "description": "Client ID of the requesting app"
        },
        {
          "name": "bigcommerceapiAccessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "bigcommerceapiContext",
          "schema": "string",
          "required": false,
          "description": "API Path section unique to the store"
        },
        {
          "name": "demandwareClientId",
          "schema": "string",
          "required": false,
          "description": "Demandware client id"
        },
        {
          "name": "demandwareApiPassword",
          "schema": "string",
          "required": false,
          "description": "Demandware api password"
        },
        {
          "name": "demandwareUserName",
          "schema": "string",
          "required": false,
          "description": "Demandware user name"
        },
        {
          "name": "demandwareUserPassword",
          "schema": "string",
          "required": false,
          "description": "Demandware user password"
        },
        {
          "name": "ebayClientId",
          "schema": "string",
          "required": false,
          "description": "Application ID (AppID)."
        },
        {
          "name": "ebayClientSecret",
          "schema": "string",
          "required": false,
          "description": "Shared Secret from eBay application"
        },
        {
          "name": "ebayRuname",
          "schema": "string",
          "required": false,
          "description": "The RuName value that eBay assigns to your application."
        },
        {
          "name": "ebayAccessToken",
          "schema": "string",
          "required": false,
          "description": "Used to authenticate API requests."
        },
        {
          "name": "ebayRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Used to renew the access token."
        },
        {
          "name": "ebayEnvironment",
          "schema": "string",
          "required": false,
          "description": "eBay environment"
        },
        {
          "name": "ebaySiteId",
          "schema": "integer",
          "required": false,
          "description": "eBay global ID"
        },
        {
          "name": "ecwidAcessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "ecwidStoreId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "etsyKeystring",
          "schema": "string",
          "required": false,
          "description": "Etsy keystring"
        },
        {
          "name": "etsySharedSecret",
          "schema": "string",
          "required": false,
          "description": "Etsy shared secret"
        },
        {
          "name": "etsyAccessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "etsyTokenSecret",
          "schema": "string",
          "required": false,
          "description": "Secret token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "etsyClientId",
          "schema": "string",
          "required": false,
          "description": "Etsy Client Id"
        },
        {
          "name": "etsyRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Etsy Refresh token"
        },
        {
          "name": "netoApiKey",
          "schema": "string",
          "required": false,
          "description": "Neto API Key"
        },
        {
          "name": "netoApiUsername",
          "schema": "string",
          "required": false,
          "description": "Neto User Name"
        },
        {
          "name": "shopifyApiKey",
          "schema": "string",
          "required": false,
          "description": "Shopify API Key"
        },
        {
          "name": "shopifyApiPassword",
          "schema": "string",
          "required": false,
          "description": "Shopify API Password"
        },
        {
          "name": "shopifySharedSecret",
          "schema": "string",
          "required": false,
          "description": "Shared secret"
        },
        {
          "name": "shopifyAccessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "shopwareAccessKey",
          "schema": "string",
          "required": false,
          "description": "Shopware access key"
        },
        {
          "name": "shopwareApiKey",
          "schema": "string",
          "required": false,
          "description": "Shopware api key"
        },
        {
          "name": "shopwareApiSecret",
          "schema": "string",
          "required": false,
          "description": "Shopware client secret access key"
        },
        {
          "name": "volusionLogin",
          "schema": "string",
          "required": false,
          "description": "It's a Volusion account for which API is enabled"
        },
        {
          "name": "volusionPassword",
          "schema": "string",
          "required": false,
          "description": "Volusion API Password"
        },
        {
          "name": "walmartClientId",
          "schema": "string",
          "required": false,
          "description": "Walmart client ID"
        },
        {
          "name": "walmartClientSecret",
          "schema": "string",
          "required": false,
          "description": "Walmart client secret"
        },
        {
          "name": "walmartEnvironment",
          "schema": "string",
          "required": false,
          "description": "Walmart environment"
        },
        {
          "name": "walmartChannelType",
          "schema": "string",
          "required": false,
          "description": "Walmart WM_CONSUMER.CHANNEL.TYPE header"
        },
        {
          "name": "squarespaceApiKey",
          "schema": "string",
          "required": false,
          "description": "Squarespace API Key"
        },
        {
          "name": "hybrisClientId",
          "schema": "string",
          "required": false,
          "description": "Omni Commerce Connector Client ID"
        },
        {
          "name": "hybrisClientSecret",
          "schema": "string",
          "required": false,
          "description": "Omni Commerce Connector Client Secret"
        },
        {
          "name": "hybrisUsername",
          "schema": "string",
          "required": false,
          "description": "User Name"
        },
        {
          "name": "hybrisPassword",
          "schema": "string",
          "required": false,
          "description": "User password"
        },
        {
          "name": "hybrisWebsites",
          "schema": "array",
          "required": false,
          "description": "Websites to stores mapping data"
        },
        {
          "name": "lightspeedApiKey",
          "schema": "string",
          "required": false,
          "description": "LightSpeed api key"
        },
        {
          "name": "lightspeedApiSecret",
          "schema": "string",
          "required": false,
          "description": "LightSpeed api secret"
        },
        {
          "name": "commercehqApiKey",
          "schema": "string",
          "required": false,
          "description": "CommerceHQ api key"
        },
        {
          "name": "commercehqApiPassword",
          "schema": "string",
          "required": false,
          "description": "CommerceHQ api password"
        },
        {
          "name": "wcConsumerKey",
          "schema": "string",
          "required": false,
          "description": "Woocommerce consumer key"
        },
        {
          "name": "wcConsumerSecret",
          "schema": "string",
          "required": false,
          "description": "Woocommerce consumer secret"
        },
        {
          "name": "magentoConsumerKey",
          "schema": "string",
          "required": false,
          "description": "Magento Consumer Key"
        },
        {
          "name": "magentoConsumerSecret",
          "schema": "string",
          "required": false,
          "description": "Magento Consumer Secret"
        },
        {
          "name": "magentoAccessToken",
          "schema": "string",
          "required": false,
          "description": "Magento Access Token"
        },
        {
          "name": "magentoTokenSecret",
          "schema": "string",
          "required": false,
          "description": "Magento Token Secret"
        },
        {
          "name": "prestashopWebserviceKey",
          "schema": "string",
          "required": false,
          "description": "Prestashop webservice key"
        },
        {
          "name": "wixAppId",
          "schema": "string",
          "required": false,
          "description": "Wix App ID"
        },
        {
          "name": "wixAppSecretKey",
          "schema": "string",
          "required": false,
          "description": "Wix App Secret Key"
        },
        {
          "name": "wixRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Wix refresh token"
        },
        {
          "name": "mercadoLibreAppId",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre App ID"
        },
        {
          "name": "mercadoLibreAppSecretKey",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre App Secret Key"
        },
        {
          "name": "mercadoLibreRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre Refresh Token"
        },
        {
          "name": "zidClientId",
          "schema": "integer",
          "required": false,
          "description": "Zid Client ID"
        },
        {
          "name": "zidClientSecret",
          "schema": "string",
          "required": false,
          "description": "Zid Client Secret"
        },
        {
          "name": "zidAccessToken",
          "schema": "string",
          "required": false,
          "description": "Zid Access Token"
        },
        {
          "name": "zidAuthorization",
          "schema": "string",
          "required": false,
          "description": "Zid Authorization"
        },
        {
          "name": "zidRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Zid refresh token"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account.failed_webhooks.json",
      "method": "accountFailedWebhooks",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "List webhooks that was not delivered to the callback.",
      "parameters": [
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "List of сomma-separated webhook ids"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account.supported_platforms.json",
      "method": "accountSupportedPlatforms",
      "httpMethod": "get",
      "tag": "account",
      "typeScriptTag": "account",
      "description": "Get list of supported platforms",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.add.json",
      "method": "attributeAdd",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Add new attribute",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "Defines attribute's type"
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": "Entity code"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Defines attributes's name"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "visible",
          "schema": "boolean",
          "required": false,
          "description": "Set visibility status"
        },
        {
          "name": "required",
          "schema": "boolean",
          "required": false,
          "description": "Defines if the option is required"
        },
        {
          "name": "position",
          "schema": "integer",
          "required": false,
          "description": "Attribute`s position"
        },
        {
          "name": "attributeGroupId",
          "schema": "string",
          "required": false,
          "description": "Filter by attribute_group_id"
        },
        {
          "name": "isGlobal",
          "schema": "string",
          "required": false,
          "description": "Attribute saving scope"
        },
        {
          "name": "isSearchable",
          "schema": "boolean",
          "required": false,
          "description": "Use attribute in Quick Search"
        },
        {
          "name": "isFilterable",
          "schema": "string",
          "required": false,
          "description": "Use In Layered Navigation"
        },
        {
          "name": "isComparable",
          "schema": "boolean",
          "required": false,
          "description": "Comparable on Front-end"
        },
        {
          "name": "isHtmlAllowedOnFront",
          "schema": "boolean",
          "required": false,
          "description": "Allow HTML Tags on Frontend"
        },
        {
          "name": "isFilterableInSearch",
          "schema": "boolean",
          "required": false,
          "description": "Use In Search Results Layered Navigation"
        },
        {
          "name": "isConfigurable",
          "schema": "boolean",
          "required": false,
          "description": "Use To Create Configurable Product"
        },
        {
          "name": "isVisibleInAdvancedSearch",
          "schema": "boolean",
          "required": false,
          "description": "Use in Advanced Search"
        },
        {
          "name": "isUsedForPromoRules",
          "schema": "boolean",
          "required": false,
          "description": "Use for Promo Rule Conditions"
        },
        {
          "name": "usedInProductListing",
          "schema": "boolean",
          "required": false,
          "description": "Used in Product Listing"
        },
        {
          "name": "usedForSortBy",
          "schema": "boolean",
          "required": false,
          "description": "Used for Sorting in Product Listing"
        },
        {
          "name": "applyTo",
          "schema": "string",
          "required": false,
          "description": "Types of products which can have this attribute"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.assign.group.json",
      "method": "attributeAssignGroup",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Assign attribute to the group",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "Attribute group_id"
        },
        {
          "name": "attributeSetId",
          "schema": "string",
          "required": false,
          "description": "Attribute set id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.assign.set.json",
      "method": "attributeAssignSet",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Assign attribute to the attribute set",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": false,
          "description": "Attribute group_id"
        },
        {
          "name": "attributeSetId",
          "schema": "string",
          "required": true,
          "description": "Attribute set id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.attributeset.list.json",
      "method": "attributeAttributesetList",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get attribute_set list",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.count.json",
      "method": "attributeCount",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get attributes count",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Defines attribute's type"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "visible",
          "schema": "boolean",
          "required": false,
          "description": "Filter items by visibility status"
        },
        {
          "name": "required",
          "schema": "boolean",
          "required": false,
          "description": "Defines if the option is required"
        },
        {
          "name": "system",
          "schema": "boolean",
          "required": false,
          "description": "True if attribute is system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.delete.json",
      "method": "attributeDelete",
      "httpMethod": "delete",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Delete attribute from store",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.group.list.json",
      "method": "attributeGroupList",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get attribute group list",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "attributeSetId",
          "schema": "string",
          "required": false,
          "description": "Attribute set id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.info.json",
      "method": "attributeInfo",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get attribute info",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.list.json",
      "method": "attributeList",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get attributes list",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Defines attribute's type"
        },
        {
          "name": "attributeIds",
          "schema": "string",
          "required": false,
          "description": "Filter attributes by ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves attributes on specified language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "visible",
          "schema": "boolean",
          "required": false,
          "description": "Filter items by visibility status"
        },
        {
          "name": "required",
          "schema": "boolean",
          "required": false,
          "description": "Defines if the option is required"
        },
        {
          "name": "system",
          "schema": "boolean",
          "required": false,
          "description": "True if attribute is system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.type.list.json",
      "method": "attributeTypeList",
      "httpMethod": "get",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Get list of supported attributes types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.unassign.group.json",
      "method": "attributeUnassignGroup",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Unassign attribute from group",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": true,
          "description": "Customer group_id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.unassign.set.json",
      "method": "attributeUnassignSet",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Unassign attribute from attribute set",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "attributeSetId",
          "schema": "string",
          "required": true,
          "description": "Attribute set id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/attribute.update.json",
      "method": "attributeUpdate",
      "httpMethod": "post",
      "tag": "attribute",
      "typeScriptTag": "attribute",
      "description": "Update attribute data",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Defines new attributes's name"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/basket.info.json",
      "method": "basketInfo",
      "httpMethod": "get",
      "tag": "basket",
      "typeScriptTag": "basket",
      "description": "Retrieve basket information.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/basket.item.add.json",
      "method": "basketItemAdd",
      "httpMethod": "post",
      "tag": "basket",
      "typeScriptTag": "basket",
      "description": "Add item to basket",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": true,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines id of the product which should be added to the basket"
        },
        {
          "name": "variantId",
          "schema": "string",
          "required": false,
          "description": "Defines product's variants specified by variant id"
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": "Defines new items quantity"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/basket.live_shipping_service.create.json",
      "method": "basketLiveShippingServiceCreate",
      "httpMethod": "post",
      "tag": "basket",
      "typeScriptTag": "basket",
      "description": "Create live shipping rate service.",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Shipping Service Name"
        },
        {
          "name": "callback",
          "schema": "string",
          "required": true,
          "description": "Callback url that returns shipping rates. It should be able to accept POST requests with json data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/basket.live_shipping_service.delete.json",
      "method": "basketLiveShippingServiceDelete",
      "httpMethod": "delete",
      "tag": "basket",
      "typeScriptTag": "basket",
      "description": "Delete live shipping rate service.",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/basket.live_shipping_service.list.json",
      "method": "basketLiveShippingServiceList",
      "httpMethod": "get",
      "tag": "basket",
      "typeScriptTag": "basket",
      "description": "Retrieve a list of live shipping rate services.",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bridge.delete.json",
      "method": "bridgeDelete",
      "httpMethod": "post",
      "tag": "bridge",
      "typeScriptTag": "bridge",
      "description": "Delete bridge from the store.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bridge.download.file",
      "method": "bridgeDownload",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Download bridge for store",
      "parameters": [
        {
          "name": "whitelabel",
          "schema": "boolean",
          "required": false,
          "description": "Identifies if there is a necessity to download whitelabel bridge."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bridge.update.json",
      "method": "bridgeUpdate",
      "httpMethod": "post",
      "tag": "bridge",
      "typeScriptTag": "bridge",
      "description": "Update bridge in the store.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.bridge.json",
      "method": "cartBridge",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get bridge key and store key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.catalog_price_rules.count.json",
      "method": "cartCatalogPriceRulesCount",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get count of cart catalog price rules discounts.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.catalog_price_rules.list.json",
      "method": "cartCatalogPriceRulesList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get cart catalog price rules discounts.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "Retrieves  catalog_price_rules by ids"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.clear_cache.json",
      "method": "cartClearCache",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Clear cache on store.",
      "parameters": [
        {
          "name": "cacheType",
          "schema": "string",
          "required": true,
          "description": "Defines which cache should be cleared."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.config.json",
      "method": "cartConfig",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get list of cart configs",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.config.update.json",
      "method": "cartConfigUpdate",
      "httpMethod": "put",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Use this API method to update custom data in client database.",
      "parameters": [
        {
          "name": "custom_fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "db_tables_prefix",
          "schema": "string",
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.coupon.add.json",
      "method": "cartCouponAdd",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Create new coupon",
      "parameters": [
        {
          "name": "action_amount",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "action_apply_to",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "action_condition_entity",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action_condition_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action_condition_operator",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action_condition_value",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action_scope",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "action_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "codes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "date_end",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date_start",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "usage_limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "usage_limit_per_customer",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.coupon.condition.add.json",
      "method": "cartCouponConditionAdd",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Create new coupon condition",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "couponId",
          "schema": "string",
          "required": true,
          "description": "Coupon Id"
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": "Defines condition operator"
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Defines condition entity type"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Defines condition entity attribute key"
        },
        {
          "name": "operator",
          "schema": "string",
          "required": true,
          "description": "Defines condition operator"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Defines condition value, can be comma separated according to the operator."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.coupon.count.json",
      "method": "cartCouponCount",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get cart coupons count.",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "dateStartFrom",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_start (greater or equal)"
        },
        {
          "name": "dateStartTo",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_start (less or equal)"
        },
        {
          "name": "dateEndFrom",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_end (greater or equal)"
        },
        {
          "name": "dateEndTo",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_end (less or equal)"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.coupon.delete.json",
      "method": "cartCouponDelete",
      "httpMethod": "delete",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Delete coupon",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.coupon.list.json",
      "method": "cartCouponList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get cart coupon discounts.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "couponsIds",
          "schema": "string",
          "required": false,
          "description": "Filter coupons by ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Filter coupons by store id"
        },
        {
          "name": "dateStartFrom",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_start (greater or equal)"
        },
        {
          "name": "dateStartTo",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_start (less or equal)"
        },
        {
          "name": "dateEndFrom",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_end (greater or equal)"
        },
        {
          "name": "dateEndTo",
          "schema": "string",
          "required": false,
          "description": "Filter entity by date_end (less or equal)"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Filter coupons by avail status"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.create.json",
      "method": "cartCreate",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Add store to the account",
      "parameters": [
        {
          "name": "cartId",
          "schema": "string",
          "required": true,
          "description": "Store’s identifier which you can get from cart_list method"
        },
        {
          "name": "storeUrl",
          "schema": "string",
          "required": true,
          "description": "A web address of a store that you would like to connect to API2Cart"
        },
        {
          "name": "bridgeUrl",
          "schema": "string",
          "required": false,
          "description": "This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)"
        },
        {
          "name": "storeRoot",
          "schema": "string",
          "required": false,
          "description": "Absolute path to the store root directory (used with \"bridge_url\" parameter)"
        },
        {
          "name": "storeKey",
          "schema": "string",
          "required": false,
          "description": "Set this parameter if bridge is already uploaded to store"
        },
        {
          "name": "sharedSecret",
          "schema": "string",
          "required": false,
          "description": "Shared secret"
        },
        {
          "name": "validateVersion",
          "schema": "boolean",
          "required": false,
          "description": "Specify if api2cart should validate cart version"
        },
        {
          "name": "verify",
          "schema": "boolean",
          "required": false,
          "description": "Enables or disables cart's verification"
        },
        {
          "name": "dbTablesPrefix",
          "schema": "string",
          "required": false,
          "description": "DB tables prefix"
        },
        {
          "name": "ftpHost",
          "schema": "string",
          "required": false,
          "description": "FTP connection host"
        },
        {
          "name": "ftpUser",
          "schema": "string",
          "required": false,
          "description": "FTP User"
        },
        {
          "name": "ftpPassword",
          "schema": "string",
          "required": false,
          "description": "FTP Password"
        },
        {
          "name": "ftpPort",
          "schema": "integer",
          "required": false,
          "description": "FTP Port"
        },
        {
          "name": "ftpStoreDir",
          "schema": "string",
          "required": false,
          "description": "FTP Store dir"
        },
        {
          "name": "apiKey3Dcart",
          "schema": "string",
          "required": false,
          "description": "3DCart API Key"
        },
        {
          "name": "adminAccount",
          "schema": "string",
          "required": false,
          "description": "It's a BigCommerce account for which API is enabled"
        },
        {
          "name": "apiPath",
          "schema": "string",
          "required": false,
          "description": "BigCommerce API URL"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "required": false,
          "description": "Bigcommerce API Key"
        },
        {
          "name": "clientId",
          "schema": "string",
          "required": false,
          "description": "Client ID of the requesting app"
        },
        {
          "name": "accessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "context",
          "schema": "string",
          "required": false,
          "description": "API Path section unique to the store"
        },
        {
          "name": "accessToken",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "apiKeyShopify",
          "schema": "string",
          "required": false,
          "description": "Shopify API Key"
        },
        {
          "name": "apiPassword",
          "schema": "string",
          "required": false,
          "description": "Shopify API Password"
        },
        {
          "name": "accessTokenShopify",
          "schema": "string",
          "required": false,
          "description": "Access token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "apiKey",
          "schema": "string",
          "required": false,
          "description": "Neto API Key"
        },
        {
          "name": "apiUsername",
          "schema": "string",
          "required": false,
          "description": "Neto User Name"
        },
        {
          "name": "encryptedPassword",
          "schema": "string",
          "required": false,
          "description": "Volusion API Password"
        },
        {
          "name": "login",
          "schema": "string",
          "required": false,
          "description": "It's a Volusion account for which API is enabled"
        },
        {
          "name": "apiUserAdnsf",
          "schema": "string",
          "required": false,
          "description": "It's a AspDotNetStorefront account for which API is available"
        },
        {
          "name": "apiPass",
          "schema": "string",
          "required": false,
          "description": "AspDotNetStorefront API Password"
        },
        {
          "name": "privateKey",
          "schema": "string",
          "required": false,
          "description": "3DCart Application Private Key"
        },
        {
          "name": "appToken",
          "schema": "string",
          "required": false,
          "description": "3DCart Token from Application"
        },
        {
          "name": "etsyKeystring",
          "schema": "string",
          "required": false,
          "description": "Etsy keystring"
        },
        {
          "name": "etsySharedSecret",
          "schema": "string",
          "required": false,
          "description": "Etsy shared secret"
        },
        {
          "name": "tokenSecret",
          "schema": "string",
          "required": false,
          "description": "Secret token authorizing the app to access resources on behalf of a user"
        },
        {
          "name": "etsyClientId",
          "schema": "string",
          "required": true,
          "description": "Etsy Client Id"
        },
        {
          "name": "etsyRefreshToken",
          "schema": "string",
          "required": true,
          "description": "Etsy Refresh token"
        },
        {
          "name": "ebayClientId",
          "schema": "string",
          "required": false,
          "description": "Application ID (AppID)."
        },
        {
          "name": "ebayClientSecret",
          "schema": "string",
          "required": false,
          "description": "Shared Secret from eBay application"
        },
        {
          "name": "ebayRuname",
          "schema": "string",
          "required": false,
          "description": "The RuName value that eBay assigns to your application."
        },
        {
          "name": "ebayAccessToken",
          "schema": "string",
          "required": false,
          "description": "Used to authenticate API requests."
        },
        {
          "name": "ebayRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Used to renew the access token."
        },
        {
          "name": "ebayEnvironment",
          "schema": "string",
          "required": false,
          "description": "eBay environment"
        },
        {
          "name": "ebaySiteId",
          "schema": "integer",
          "required": false,
          "description": "eBay global ID"
        },
        {
          "name": "dwClientId",
          "schema": "string",
          "required": false,
          "description": "Demandware client id"
        },
        {
          "name": "dwApiPass",
          "schema": "string",
          "required": false,
          "description": "Demandware api password"
        },
        {
          "name": "demandwareUserName",
          "schema": "string",
          "required": false,
          "description": "Demandware user name"
        },
        {
          "name": "demandwareUserPassword",
          "schema": "string",
          "required": false,
          "description": "Demandware user password"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": true,
          "description": "Store Id"
        },
        {
          "name": "sellerId",
          "schema": "string",
          "required": false,
          "description": "Seller Id"
        },
        {
          "name": "amazonSecretKey",
          "schema": "string",
          "required": false,
          "description": "Amazon Secret Key"
        },
        {
          "name": "amazonAccessKeyId",
          "schema": "string",
          "required": false,
          "description": "Amazon Secret Key Id"
        },
        {
          "name": "marketplacesIds",
          "schema": "string",
          "required": false,
          "description": "Comma separated marketplaces ids"
        },
        {
          "name": "environment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hybrisClientId",
          "schema": "string",
          "required": false,
          "description": "Omni Commerce Connector Client ID"
        },
        {
          "name": "hybrisClientSecret",
          "schema": "string",
          "required": false,
          "description": "Omni Commerce Connector Client Secret"
        },
        {
          "name": "hybrisUsername",
          "schema": "string",
          "required": false,
          "description": "User Name"
        },
        {
          "name": "hybrisPassword",
          "schema": "string",
          "required": false,
          "description": "User password"
        },
        {
          "name": "hybrisWebsites",
          "schema": "array",
          "required": false,
          "description": "Websites to stores mapping data"
        },
        {
          "name": "walmartClientId",
          "schema": "string",
          "required": false,
          "description": "Walmart client ID"
        },
        {
          "name": "walmartClientSecret",
          "schema": "string",
          "required": false,
          "description": "Walmart client secret"
        },
        {
          "name": "walmartEnvironment",
          "schema": "string",
          "required": false,
          "description": "Walmart environment"
        },
        {
          "name": "walmartChannelType",
          "schema": "string",
          "required": false,
          "description": "Walmart WM_CONSUMER.CHANNEL.TYPE header"
        },
        {
          "name": "lightspeedApiKey",
          "schema": "string",
          "required": false,
          "description": "LightSpeed api key"
        },
        {
          "name": "lightspeedApiSecret",
          "schema": "string",
          "required": false,
          "description": "LightSpeed api secret"
        },
        {
          "name": "shopwareAccessKey",
          "schema": "string",
          "required": false,
          "description": "Shopware access key"
        },
        {
          "name": "shopwareApiKey",
          "schema": "string",
          "required": false,
          "description": "Shopware api key"
        },
        {
          "name": "shopwareApiSecret",
          "schema": "string",
          "required": false,
          "description": "Shopware client secret access key"
        },
        {
          "name": "commercehqApiKey",
          "schema": "string",
          "required": false,
          "description": "CommerceHQ api key"
        },
        {
          "name": "commercehqApiPassword",
          "schema": "string",
          "required": false,
          "description": "CommerceHQ api password"
        },
        {
          "name": "3DcartPrivateKey",
          "schema": "string",
          "required": false,
          "description": "3DCart Private Key"
        },
        {
          "name": "3DcartAccessToken",
          "schema": "string",
          "required": false,
          "description": "3DCart Token"
        },
        {
          "name": "wcConsumerKey",
          "schema": "string",
          "required": false,
          "description": "Woocommerce consumer key"
        },
        {
          "name": "wcConsumerSecret",
          "schema": "string",
          "required": false,
          "description": "Woocommerce consumer secret"
        },
        {
          "name": "magentoConsumerKey",
          "schema": "string",
          "required": false,
          "description": "Magento Consumer Key"
        },
        {
          "name": "magentoConsumerSecret",
          "schema": "string",
          "required": false,
          "description": "Magento Consumer Secret"
        },
        {
          "name": "magentoAccessToken",
          "schema": "string",
          "required": false,
          "description": "Magento Access Token"
        },
        {
          "name": "magentoTokenSecret",
          "schema": "string",
          "required": false,
          "description": "Magento Token Secret"
        },
        {
          "name": "prestashopWebserviceKey",
          "schema": "string",
          "required": false,
          "description": "Prestashop webservice key"
        },
        {
          "name": "wixAppId",
          "schema": "string",
          "required": false,
          "description": "Wix App ID"
        },
        {
          "name": "wixAppSecretKey",
          "schema": "string",
          "required": false,
          "description": "Wix App Secret Key"
        },
        {
          "name": "wixRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Wix refresh token"
        },
        {
          "name": "mercadoLibreAppId",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre App ID"
        },
        {
          "name": "mercadoLibreAppSecretKey",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre App Secret Key"
        },
        {
          "name": "mercadoLibreRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Mercado Libre Refresh Token"
        },
        {
          "name": "zidClientId",
          "schema": "integer",
          "required": false,
          "description": "Zid Client ID"
        },
        {
          "name": "zidClientSecret",
          "schema": "string",
          "required": false,
          "description": "Zid Client Secret"
        },
        {
          "name": "zidAccessToken",
          "schema": "string",
          "required": false,
          "description": "Zid Access Token"
        },
        {
          "name": "zidAuthorization",
          "schema": "string",
          "required": false,
          "description": "Zid Authorization"
        },
        {
          "name": "zidRefreshToken",
          "schema": "string",
          "required": false,
          "description": "Zid refresh token"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.delete.json",
      "method": "cartDelete",
      "httpMethod": "delete",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Remove store from API2Cart",
      "parameters": [
        {
          "name": "deleteBridge",
          "schema": "boolean",
          "required": false,
          "description": "Identifies if there is a necessity to delete bridge"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.disconnect.json",
      "method": "cartDisconnect",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Disconnect with the store and clear store session data.",
      "parameters": [
        {
          "name": "deleteBridge",
          "schema": "boolean",
          "required": false,
          "description": "Identifies if there is a necessity to delete bridge"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.giftcard.add.json",
      "method": "cartGiftcardAdd",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Create new gift card",
      "parameters": [
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": "Defines the gift card amount value."
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": "Gift card code"
        },
        {
          "name": "ownerEmail",
          "schema": "string",
          "required": false,
          "description": "Gift card owner email"
        },
        {
          "name": "recipientEmail",
          "schema": "string",
          "required": false,
          "description": "Gift card recipient email"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.giftcard.count.json",
      "method": "cartGiftcardCount",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get gift cards count.",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.giftcard.list.json",
      "method": "cartGiftcardList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get gift cards list.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.info.json",
      "method": "cartInfo",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get cart information",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.list.json",
      "method": "cartList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get list of supported carts",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.meta_data.list.json",
      "method": "cartMetaDataList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get entity meta data",
      "parameters": [
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "Entity Id"
        },
        {
          "name": "entity",
          "schema": "string",
          "required": false,
          "description": "Entity"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "key",
          "schema": "string",
          "required": false,
          "description": "Key"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.meta_data.set.json",
      "method": "cartMetaDataSet",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Set meta data for a specific entity",
      "parameters": [
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "Entity Id"
        },
        {
          "name": "entity",
          "schema": "string",
          "required": false,
          "description": "Entity"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Key"
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": "Value"
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "Metafield namespace"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.meta_data.unset.json",
      "method": "cartMetaDataUnset",
      "httpMethod": "delete",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Unset meta data for a specific entity",
      "parameters": [
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "Entity Id"
        },
        {
          "name": "entity",
          "schema": "string",
          "required": false,
          "description": "Entity"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Key"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.methods.json",
      "method": "cartMethods",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get list of cart methods",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.plugin.list.json",
      "method": "cartPluginList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get list of installed plugins",
      "parameters": [
        {
          "name": "storeKey",
          "schema": "string",
          "required": false,
          "description": "Set this parameter if bridge is already uploaded to store"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.script.add.json",
      "method": "cartScriptAdd",
      "httpMethod": "post",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Add new script to the storefront",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "The user-friendly script name"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "The user-friendly description"
        },
        {
          "name": "html",
          "schema": "string",
          "required": false,
          "description": "An html string containing exactly one `script` tag."
        },
        {
          "name": "src",
          "schema": "string",
          "required": false,
          "description": "The URL of the remote script"
        },
        {
          "name": "loadMethod",
          "schema": "string",
          "required": false,
          "description": "The load method to use for the script"
        },
        {
          "name": "scope",
          "schema": "string",
          "required": false,
          "description": "The page or pages on the online store where the script should be included"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.script.delete.json",
      "method": "cartScriptDelete",
      "httpMethod": "delete",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Remove script from the storefront",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.script.list.json",
      "method": "cartScriptList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get scripts installed to the storefront",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "scriptIds",
          "schema": "string",
          "required": false,
          "description": "Retrieves only scripts with specific ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.shipping_zones.list.json",
      "method": "cartShippingZonesList",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Get list of shipping zones",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/cart.validate.json",
      "method": "cartValidate",
      "httpMethod": "get",
      "tag": "cart",
      "typeScriptTag": "cart",
      "description": "Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.",
      "parameters": [
        {
          "name": "validateVersion",
          "schema": "boolean",
          "required": false,
          "description": "Specify if api2cart should validate cart version"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.add.json",
      "method": "categoryAdd",
      "httpMethod": "post",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Add new category in store",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Defines category's name that has to be added"
        },
        {
          "name": "parentId",
          "schema": "string",
          "required": false,
          "description": "Adds categories specified by parent id"
        },
        {
          "name": "storesIds",
          "schema": "string",
          "required": false,
          "description": "Create category in the stores that is specified by comma-separated stores' id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": "Sort number in the list"
        },
        {
          "name": "createdTime",
          "schema": "string",
          "required": false,
          "description": "Entity's date creation"
        },
        {
          "name": "modifiedTime",
          "schema": "string",
          "required": false,
          "description": "Entity's date modification"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "Defines category's description"
        },
        {
          "name": "metaTitle",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta title for each entity"
        },
        {
          "name": "metaDescription",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta description of a entity"
        },
        {
          "name": "metaKeywords",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta keywords for each entity"
        },
        {
          "name": "seoUrl",
          "schema": "string",
          "required": false,
          "description": "Defines unique category's URL for SEO"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.assign.json",
      "method": "categoryAssign",
      "httpMethod": "post",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Assign category to product",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines category assign to the product, specified by product id"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Defines category assign, specified by category id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.count.json",
      "method": "categoryCount",
      "httpMethod": "get",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Count categories in store.",
      "parameters": [
        {
          "name": "parentId",
          "schema": "string",
          "required": false,
          "description": "Counts categories specified by parent id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Counts category specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Counts category specified by language id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.delete.json",
      "method": "categoryDelete",
      "httpMethod": "delete",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Delete category in store",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Defines category removal, specified by category id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.find.json",
      "method": "categoryFind",
      "httpMethod": "get",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Search category in store. \"Laptop\" is specified here by default.",
      "parameters": [
        {
          "name": "findValue",
          "schema": "string",
          "required": true,
          "description": "Entity search that is specified by some value"
        },
        {
          "name": "findWhere",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by the comma-separated unique fields"
        },
        {
          "name": "findParams",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by comma-separated parameters"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.image.add.json",
      "method": "categoryImageAdd",
      "httpMethod": "post",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Add image to category",
      "parameters": [
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Defines category id where the image should be added"
        },
        {
          "name": "imageName",
          "schema": "string",
          "required": true,
          "description": "Defines image's name"
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "Defines URL of the image that has to be added"
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "Defines alternative text that has to be attached to the picture"
        },
        {
          "name": "mime",
          "schema": "string",
          "required": false,
          "description": "Mime type of image http://en.wikipedia.org/wiki/Internet_media_type."
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "Defines image's types that are specified by comma-separated list"
        },
        {
          "name": "position",
          "schema": "integer",
          "required": false,
          "description": "Defines image’s position in the list"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.image.delete.json",
      "method": "categoryImageDelete",
      "httpMethod": "delete",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Delete image",
      "parameters": [
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Defines category id where the image should be deleted"
        },
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": "Define image id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.info.json",
      "method": "categoryInfo",
      "httpMethod": "get",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Get category info about category ID*** or specify other category ID.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Retrieves category's info specified by category id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves category info  specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves category info  specified by language id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.list.json",
      "method": "categoryList",
      "httpMethod": "get",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Get list of categories from store.",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "parentId",
          "schema": "string",
          "required": false,
          "description": "Retrieves categories specified by parent id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves categories specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves categorys specified by language id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.unassign.json",
      "method": "categoryUnassign",
      "httpMethod": "post",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Unassign category to product",
      "parameters": [
        {
          "name": "categoryId",
          "schema": "string",
          "required": true,
          "description": "Defines category unassign, specified by category id"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines category unassign to the product, specified by product id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/category.update.json",
      "method": "categoryUpdate",
      "httpMethod": "put",
      "tag": "category",
      "typeScriptTag": "category",
      "description": "Update category in store",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Defines category update specified by category id"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Defines new category’s name"
        },
        {
          "name": "parentId",
          "schema": "string",
          "required": false,
          "description": "Defines new parent category id"
        },
        {
          "name": "storesIds",
          "schema": "string",
          "required": false,
          "description": "Update category in the stores that is specified by comma-separated stores' id"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": "Sort number in the list"
        },
        {
          "name": "modifiedTime",
          "schema": "string",
          "required": false,
          "description": "Entity's date modification"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "Defines new category's description"
        },
        {
          "name": "metaTitle",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta title for each entity"
        },
        {
          "name": "metaDescription",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta description of a entity"
        },
        {
          "name": "metaKeywords",
          "schema": "string",
          "required": false,
          "description": "Defines unique meta keywords for each entity"
        },
        {
          "name": "seoUrl",
          "schema": "string",
          "required": false,
          "description": "Defines unique category's URL for SEO"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.add.json",
      "method": "customerAdd",
      "httpMethod": "post",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Add customer into store.",
      "parameters": [
        {
          "name": "address",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "birth_day",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_time",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "fax",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "gender",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "last_login",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "login",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "modified_time",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "news_letter_subscription",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.attribute.list.json",
      "method": "customerAttributeList",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get attributes for specific customer",
      "parameters": [
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "customerId",
          "schema": "string",
          "required": true,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.count.json",
      "method": "customerCount",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get number of customers from store.",
      "parameters": [
        {
          "name": "groupId",
          "schema": "string",
          "required": false,
          "description": "Customer group_id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Counts customer specified by store id"
        },
        {
          "name": "customerListId",
          "schema": "string",
          "required": false,
          "description": "The numeric ID of the customer list in Demandware."
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.find.json",
      "method": "customerFind",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Find customers in store.",
      "parameters": [
        {
          "name": "findValue",
          "schema": "string",
          "required": true,
          "description": "Entity search that is specified by some value"
        },
        {
          "name": "findWhere",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by the comma-separated unique fields"
        },
        {
          "name": "findParams",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by comma-separated parameters"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.group.add.json",
      "method": "customerGroupAdd",
      "httpMethod": "post",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Create customer group.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Customer group name"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "storesIds",
          "schema": "string",
          "required": false,
          "description": "Assign customer group to the stores that is specified by comma-separated stores' id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.group.list.json",
      "method": "customerGroupList",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get list of customers groups.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "groupIds",
          "schema": "string",
          "required": false,
          "description": "Groups that will be assigned to a customer"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.info.json",
      "method": "customerInfo",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get customers' details from store.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Retrieves customer's info specified by customer id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves customer info specified by store id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.list.json",
      "method": "customerList",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get list of customers from store.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": false,
          "description": "Customer group_id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves customers specified by store id"
        },
        {
          "name": "customerListId",
          "schema": "string",
          "required": false,
          "description": "The numeric ID of the customer list in Demandware."
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines category's visibility status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.update.json",
      "method": "customerUpdate",
      "httpMethod": "put",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Update information of customer in store.",
      "parameters": [
        {
          "name": "address",
          "schema": "array",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "group_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "group_ids",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "news_letter_subscription",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customer.wishlist.list.json",
      "method": "customerWishlistList",
      "httpMethod": "get",
      "tag": "customer",
      "typeScriptTag": "customer",
      "description": "Get a Wish List of customer from the store.",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": true,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.abandoned.list.json",
      "method": "orderAbandonedList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Get list of orders that were left by customers before completing the order.",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "customerEmail",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer email"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "skipEmptyEmail",
          "schema": "boolean",
          "required": false,
          "description": "Filter empty emails"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.add.json",
      "method": "orderAdd",
      "httpMethod": "post",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Add a new order to the cart.",
      "parameters": [
        {
          "name": "admin_comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "admin_private_comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bill_address_1",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_address_2",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bill_city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_company",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bill_country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_fax",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bill_first_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_last_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bill_postcode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "bill_state",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "channel_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "clear_cache",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "coupon_discount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "coupons",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "create_invoice",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_birthday",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "customer_fax",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_first_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_last_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date_finished",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date_modified",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "discount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "external_source",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "financial_status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fulfillment_status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "gift_certificate_discount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "inventory_behaviour",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "note_attributes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "order_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "order_item",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "order_payment_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "order_shipping_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "order_status",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "prices_inc_tax",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "send_admin_notifications",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "send_notifications",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_address_1",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_address_2",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_company",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_fax",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_first_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_last_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_postcode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipping_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "shipping_tax",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "subtotal_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tax_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "total_paid",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "total_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "total_weight",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "transaction_id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.count.json",
      "method": "orderCount",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Count orders in store",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by customer id"
        },
        {
          "name": "customerEmail",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by customer email"
        },
        {
          "name": "orderStatus",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by order status"
        },
        {
          "name": "orderStatusIds",
          "schema": "array",
          "required": false,
          "description": "Retrieves orders specified by order statuses"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by store id"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "Counts orders specified by ids"
        },
        {
          "name": "orderIds",
          "schema": "string",
          "required": false,
          "description": "Counts orders specified by order ids"
        },
        {
          "name": "ebayOrderStatus",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by order status"
        },
        {
          "name": "financialStatus",
          "schema": "string",
          "required": false,
          "description": "Counts orders quantity specified by financial status"
        },
        {
          "name": "fulfillmentStatus",
          "schema": "string",
          "required": false,
          "description": "Create order with fulfillment status"
        },
        {
          "name": "shippingMethod",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities according to shipping method"
        },
        {
          "name": "deliveryMethod",
          "schema": "string",
          "required": false,
          "description": "Retrieves order with delivery method"
        },
        {
          "name": "shipNodeType",
          "schema": "string",
          "required": false,
          "description": "Retrieves order with ship node type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.financial_status.list.json",
      "method": "orderFinancialStatusList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Retrieve list of financial statuses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.find.json",
      "method": "orderFind",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "customerEmail",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer email"
        },
        {
          "name": "orderStatus",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by order status"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "financialStatus",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by financial status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.fulfillment_status.list.json",
      "method": "orderFulfillmentStatusList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Retrieve list of fulfillment statuses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.info.json",
      "method": "orderInfo",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Info about a specific order by ID",
      "parameters": [
        {
          "name": "orderId",
          "schema": "string",
          "required": false,
          "description": "Retrieves order’s info specified by order id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": "Retrieves order info specified by id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Defines store id where the order should be found"
        },
        {
          "name": "enableCache",
          "schema": "boolean",
          "required": false,
          "description": "If the value is 'true' and order exist in our cache, we will return order.info response from cache"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.list.json",
      "method": "orderList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Get list of orders from store.",
      "parameters": [
        {
          "name": "customerId",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer id"
        },
        {
          "name": "customerEmail",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by customer email"
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": "Filter orders by customer's phone number"
        },
        {
          "name": "orderStatus",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by order status"
        },
        {
          "name": "orderStatusIds",
          "schema": "array",
          "required": false,
          "description": "Retrieves orders specified by order statuses"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "Set field to sort by"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Set sorting direction"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by ids"
        },
        {
          "name": "orderIds",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by order ids"
        },
        {
          "name": "ebayOrderStatus",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by order status"
        },
        {
          "name": "basketId",
          "schema": "string",
          "required": false,
          "description": "Retrieves order’s info specified by basket id."
        },
        {
          "name": "financialStatus",
          "schema": "string",
          "required": false,
          "description": "Retrieves orders specified by financial status"
        },
        {
          "name": "fulfillmentStatus",
          "schema": "string",
          "required": false,
          "description": "Create order with fulfillment status"
        },
        {
          "name": "shippingMethod",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities according to shipping method"
        },
        {
          "name": "skipOrderIds",
          "schema": "string",
          "required": false,
          "description": "Skipped orders by ids"
        },
        {
          "name": "sinceId",
          "schema": "integer",
          "required": false,
          "description": "Retrieve entities starting from the specified id."
        },
        {
          "name": "isDeleted",
          "schema": "boolean",
          "required": false,
          "description": "Filter deleted orders"
        },
        {
          "name": "shippingCountryIso3",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities according to shipping country"
        },
        {
          "name": "enableCache",
          "schema": "boolean",
          "required": false,
          "description": "If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)"
        },
        {
          "name": "deliveryMethod",
          "schema": "string",
          "required": false,
          "description": "Retrieves order with delivery method"
        },
        {
          "name": "shipNodeType",
          "schema": "string",
          "required": false,
          "description": "Retrieves order with ship node type"
        },
        {
          "name": "currencyId",
          "schema": "string",
          "required": false,
          "description": "Currency Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.preestimate_shipping.list.json",
      "method": "orderPreestimateShippingList",
      "httpMethod": "post",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Retrieve list of order preestimated shipping methods",
      "parameters": [
        {
          "name": "customer_email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "order_item",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_address_1",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_country",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "shipp_postcode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipp_state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.refund.add.json",
      "method": "orderRefundAdd",
      "httpMethod": "post",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Add a refund to the order.",
      "parameters": [
        {
          "name": "date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fee_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "is_online",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "item_restock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "order_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "send_notifications",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "shipping_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "total_price",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.add.json",
      "method": "orderShipmentAdd",
      "httpMethod": "post",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Add a shipment to the order.",
      "parameters": [
        {
          "name": "adjust_stock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enable_cache",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_shipped",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "description": ""
        },
        {
          "name": "order_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "send_notifications",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "shipment_provider",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shipping_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tracking_link",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tracking_numbers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.delete.json",
      "method": "orderShipmentDelete",
      "httpMethod": "delete",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Delete order's shipment.",
      "parameters": [
        {
          "name": "shipmentId",
          "schema": "string",
          "required": true,
          "description": "Shipment id indicates the number of delivery"
        },
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "Defines the order for which the shipment will be deleted"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.info.json",
      "method": "orderShipmentInfo",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Get information of shipment.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "Defines the order id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.list.json",
      "method": "orderShipmentList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Get list of shipments by orders.",
      "parameters": [
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "Retrieves shipments specified by order id"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.tracking.add.json",
      "method": "orderShipmentTrackingAdd",
      "httpMethod": "post",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Add order shipment's tracking info.",
      "parameters": [
        {
          "name": "carrier_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "order_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "send_notifications",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shipment_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tracking_link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tracking_number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tracking_provider",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.shipment.update.json",
      "method": "orderShipmentUpdate",
      "httpMethod": "put",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Update order's shipment information.",
      "parameters": [
        {
          "name": "is_shipped",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "order_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "replace",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shipment_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tracking_link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tracking_numbers",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.status.list.json",
      "method": "orderStatusList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Retrieve list of statuses",
      "parameters": [
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.transaction.list.json",
      "method": "orderTransactionList",
      "httpMethod": "get",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Retrieve list of order transaction",
      "parameters": [
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "orderIds",
          "schema": "string",
          "required": true,
          "description": "Retrieves order transactions specified by order ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/order.update.json",
      "method": "orderUpdate",
      "httpMethod": "put",
      "tag": "order",
      "typeScriptTag": "order",
      "description": "Update existing order.",
      "parameters": [
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "Defines the orders specified by order id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Defines store id where the order should be found"
        },
        {
          "name": "orderStatus",
          "schema": "string",
          "required": false,
          "description": "Defines new order's status"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": "Specifies order comment"
        },
        {
          "name": "adminComment",
          "schema": "string",
          "required": false,
          "description": "Specifies admin's order comment"
        },
        {
          "name": "adminPrivateComment",
          "schema": "string",
          "required": false,
          "description": "Specifies private admin's order comment"
        },
        {
          "name": "dateModified",
          "schema": "string",
          "required": false,
          "description": "Specifies order's  modification date"
        },
        {
          "name": "dateFinished",
          "schema": "string",
          "required": false,
          "description": "Specifies order's  finished date"
        },
        {
          "name": "financialStatus",
          "schema": "string",
          "required": false,
          "description": "Update order financial status to specified"
        },
        {
          "name": "fulfillmentStatus",
          "schema": "string",
          "required": false,
          "description": "Create order with fulfillment status"
        },
        {
          "name": "orderPaymentMethod",
          "schema": "string",
          "required": false,
          "description": "Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'"
        },
        {
          "name": "sendNotifications",
          "schema": "boolean",
          "required": false,
          "description": "Send notifications to customer after order was created"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.add.json",
      "method": "productAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add new product to store.",
      "parameters": [
        {
          "name": "attribute_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "attribute_set_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "avail_from",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "available_for_sale",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "available_for_view",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "backorder_status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "barcode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "best_offer",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "brand_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "categories_ids",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "category_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "clear_cache",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "condition",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cost_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "country_of_origin",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "downloadable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "ean",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "files",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "group_prices",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "gtin",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "harmonized_system_code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "height",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isbn",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lang_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "length",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "listing_duration",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "listing_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_stock",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "manufacturer",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "marketplace_item_properties",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_keywords",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_title",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mpn",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "old_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "ordered_count",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "package_details",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "payment_methods",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "paypal_email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "product_class",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "return_accepted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "sales_tax",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "search_keywords",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "seller_profiles",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "seo_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shipping_details",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "shipping_template_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "short_description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "special_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "specifics",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_create",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_expire",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_modified",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "stores_ids",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tax_class_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "taxable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tier_prices",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "upc",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "viewed_count",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "visible",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "weight_unit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "wholesale_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "width",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.attribute.list.json",
      "method": "productAttributeList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get list of attributes and values.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Retrieves attributes specified by product id"
        },
        {
          "name": "attributeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves info for specified attribute_id"
        },
        {
          "name": "variantId",
          "schema": "string",
          "required": false,
          "description": "Defines product's variants specified by variant id"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "attributeGroupId",
          "schema": "string",
          "required": false,
          "description": "Filter by attribute_group_id"
        },
        {
          "name": "setName",
          "schema": "string",
          "required": false,
          "description": "Retrieves attributes specified by set_name in Magento"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves attributes specified by language id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves attributes specified by store id"
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "Set field to sort by"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Set sorting direction"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.attribute.value.set.json",
      "method": "productAttributeValueSet",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Set attribute value to product.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the attribute should be added"
        },
        {
          "name": "attributeId",
          "schema": "string",
          "required": false,
          "description": "Filter by attribute_id"
        },
        {
          "name": "attributeGroupId",
          "schema": "string",
          "required": false,
          "description": "Filter by attribute_group_id"
        },
        {
          "name": "attributeName",
          "schema": "string",
          "required": false,
          "description": "Define attribute name"
        },
        {
          "name": "value",
          "schema": "string",
          "required": false,
          "description": "Define attribute value"
        },
        {
          "name": "valueId",
          "schema": "integer",
          "required": false,
          "description": "Define attribute value id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.attribute.value.unset.json",
      "method": "productAttributeValueUnset",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Removes attribute value for a product.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Product id"
        },
        {
          "name": "attributeId",
          "schema": "string",
          "required": true,
          "description": "Attribute Id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "includeDefault",
          "schema": "boolean",
          "required": false,
          "description": "Boolean, whether or not to unset default value of the attribute, if applicable"
        },
        {
          "name": "reindex",
          "schema": "boolean",
          "required": false,
          "description": "Is reindex required"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.brand.list.json",
      "method": "productBrandList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get list of brands from your store.",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "brandIds",
          "schema": "string",
          "required": false,
          "description": "Retrieves brands specified by brand ids"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.child_item.find.json",
      "method": "productChildItemFind",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Search product child item (bundled item or configurable product variant) in store catalog.",
      "parameters": [
        {
          "name": "findValue",
          "schema": "string",
          "required": true,
          "description": "Entity search that is specified by some value"
        },
        {
          "name": "findWhere",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by the comma-separated unique fields"
        },
        {
          "name": "findParams",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by comma-separated parameters"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.child_item.info.json",
      "method": "productChildItemInfo",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get child for specific product.",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Filter by parent product id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "currencyId",
          "schema": "string",
          "required": false,
          "description": "Currency Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.child_item.list.json",
      "method": "productChildItemList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get child items list of specific product(s).",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": false,
          "description": "Filter by parent product id"
        },
        {
          "name": "productIds",
          "schema": "string",
          "required": false,
          "description": "Filter by parent product ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "currencyId",
          "schema": "string",
          "required": false,
          "description": "Currency Id"
        },
        {
          "name": "availSale",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of available/not available products for sale"
        },
        {
          "name": "reportRequestId",
          "schema": "string",
          "required": false,
          "description": "Report request id"
        },
        {
          "name": "disableReportCache",
          "schema": "boolean",
          "required": false,
          "description": "Disable report cache for current request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.count.json",
      "method": "productCount",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Count products in store.",
      "parameters": [
        {
          "name": "categoryId",
          "schema": "string",
          "required": false,
          "description": "Counts products specified by category id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "availView",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of visible/invisible products"
        },
        {
          "name": "availSale",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of available/not available products for sale"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Counts products specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Counts products specified by language id"
        },
        {
          "name": "productIds",
          "schema": "string",
          "required": false,
          "description": "Counts products specified by product ids"
        },
        {
          "name": "reportRequestId",
          "schema": "string",
          "required": false,
          "description": "Report request id"
        },
        {
          "name": "disableReportCache",
          "schema": "boolean",
          "required": false,
          "description": "Disable report cache for current request"
        },
        {
          "name": "brandName",
          "schema": "string",
          "required": false,
          "description": "Retrieves brands specified by brand name"
        },
        {
          "name": "productAttributes",
          "schema": "array",
          "required": false,
          "description": "Defines product attributes"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Defines product's status"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Defines products's type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.currency.add.json",
      "method": "productCurrencyAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add currency and/or set default in store",
      "parameters": [
        {
          "name": "iso3",
          "schema": "string",
          "required": true,
          "description": "Specifies standardized currency code"
        },
        {
          "name": "rate",
          "schema": "number",
          "required": true,
          "description": "Defines the numerical identifier against to the major currency"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Defines currency's name"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the currency is available"
        },
        {
          "name": "symbolLeft",
          "schema": "string",
          "required": false,
          "description": "Defines the symbol that is located before the currency"
        },
        {
          "name": "symbolRight",
          "schema": "string",
          "required": false,
          "description": "Defines the symbol that is located after the currency"
        },
        {
          "name": "default",
          "schema": "boolean",
          "required": false,
          "description": "Specifies currency's default meaning"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.currency.list.json",
      "method": "productCurrencyList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get list of currencies",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "default",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of default/not default currencies"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of available/not available currencies"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.delete.json",
      "method": "productDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Product delete",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Product id that will be removed"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.fields.json",
      "method": "productFields",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Retrieve all available fields for product item in store.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.find.json",
      "method": "productFind",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Search product in store catalog. \"Apple\" is specified here by default.",
      "parameters": [
        {
          "name": "findValue",
          "schema": "string",
          "required": true,
          "description": "Entity search that is specified by some value"
        },
        {
          "name": "findWhere",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by the comma-separated unique fields"
        },
        {
          "name": "findParams",
          "schema": "string",
          "required": false,
          "description": "Entity search that is specified by comma-separated parameters"
        },
        {
          "name": "findWhat",
          "schema": "string",
          "required": false,
          "description": "Parameter's value specifies the entity that has to be found"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Search products specified by language id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.image.add.json",
      "method": "productImageAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add image to product",
      "parameters": [
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lang_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "position",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product_variant_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "variant_ids",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.image.delete.json",
      "method": "productImageDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Delete image",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the image should be deleted"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.image.update.json",
      "method": "productImageUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update details of image",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the image should be updated"
        },
        {
          "name": "variantIds",
          "schema": "string",
          "required": false,
          "description": "Defines product's variants ids"
        },
        {
          "name": "imageName",
          "schema": "string",
          "required": false,
          "description": "Defines image's name"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Defines image's types that are specified by comma-separated list"
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "Defines alternative text that has to be attached to the picture"
        },
        {
          "name": "position",
          "schema": "integer",
          "required": false,
          "description": "Defines image’s position in the list"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Defines image update specified by image id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "hidden",
          "schema": "boolean",
          "required": false,
          "description": "Define is hide image"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.info.json",
      "method": "productInfo",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get product info about product ID *** or specify other product ID.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Retrieves product's info specified by product id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves product info specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves product info specified by language id"
        },
        {
          "name": "currencyId",
          "schema": "string",
          "required": false,
          "description": "Currency Id"
        },
        {
          "name": "reportRequestId",
          "schema": "string",
          "required": false,
          "description": "Report request id"
        },
        {
          "name": "disableReportCache",
          "schema": "boolean",
          "required": false,
          "description": "Disable report cache for current request"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.list.json",
      "method": "productList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get list of products from your store. Returns 10 products by default.",
      "parameters": [
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products specified by category id"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "availView",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of visible/invisible products"
        },
        {
          "name": "availSale",
          "schema": "boolean",
          "required": false,
          "description": "Specifies the set of available/not available products for sale"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products specified by store id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products specified by language id"
        },
        {
          "name": "currencyId",
          "schema": "string",
          "required": false,
          "description": "Currency Id"
        },
        {
          "name": "productIds",
          "schema": "string",
          "required": false,
          "description": "Retrieves products specified by product ids"
        },
        {
          "name": "sinceId",
          "schema": "integer",
          "required": false,
          "description": "Retrieve entities starting from the specified id."
        },
        {
          "name": "reportRequestId",
          "schema": "string",
          "required": false,
          "description": "Report request id"
        },
        {
          "name": "disableReportCache",
          "schema": "boolean",
          "required": false,
          "description": "Disable report cache for current request"
        },
        {
          "name": "sortBy",
          "schema": "string",
          "required": false,
          "description": "Set field to sort by"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Set sorting direction"
        },
        {
          "name": "sku",
          "schema": "string",
          "required": false,
          "description": "Filter by product's sku"
        },
        {
          "name": "disableCache",
          "schema": "boolean",
          "required": false,
          "description": "Disable cache for current request"
        },
        {
          "name": "brandName",
          "schema": "string",
          "required": false,
          "description": "Retrieves brands specified by brand name"
        },
        {
          "name": "productAttributes",
          "schema": "array",
          "required": false,
          "description": "Defines product attributes"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Defines product's status"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Defines products's type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.manufacturer.add.json",
      "method": "productManufacturerAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add manufacturer to store and assign to product",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines products specified by product id"
        },
        {
          "name": "manufacturer",
          "schema": "string",
          "required": true,
          "description": "Defines product’s manufacturer's name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.add.json",
      "method": "productOptionAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add product option from store.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Defines option's name"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "Defines option's type that has to be added"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": false,
          "description": "Defines product id where the option should be added"
        },
        {
          "name": "defaultOptionValue",
          "schema": "string",
          "required": false,
          "description": "Defines default option value that has to be added"
        },
        {
          "name": "optionValues",
          "schema": "string",
          "required": false,
          "description": "Defines option values that has to be added"
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": "Defines option's description"
        },
        {
          "name": "avail",
          "schema": "boolean",
          "required": false,
          "description": "Defines whether the option is available"
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": "Sort number in the list"
        },
        {
          "name": "required",
          "schema": "boolean",
          "required": false,
          "description": "Defines if the option is required"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.assign.json",
      "method": "productOptionAssign",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Assign option from product.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the option should be assigned"
        },
        {
          "name": "optionId",
          "schema": "string",
          "required": true,
          "description": "Defines option id which has to be assigned"
        },
        {
          "name": "required",
          "schema": "boolean",
          "required": false,
          "description": "Defines if the option is required"
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": "Sort number in the list"
        },
        {
          "name": "optionValues",
          "schema": "string",
          "required": false,
          "description": "Defines option values that has to be assigned"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.list.json",
      "method": "productOptionList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get list of options.",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products' options specified by product id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.value.add.json",
      "method": "productOptionValueAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add product option item from option.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the option value should be added"
        },
        {
          "name": "optionId",
          "schema": "string",
          "required": true,
          "description": "Defines option id where the value has to be added"
        },
        {
          "name": "optionValue",
          "schema": "string",
          "required": true,
          "description": "Defines option value that has to be added"
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": "Sort number in the list"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.value.assign.json",
      "method": "productOptionValueAssign",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Assign product option item from product.",
      "parameters": [
        {
          "name": "productOptionId",
          "schema": "integer",
          "required": true,
          "description": "Defines product's option id where the value has to be assigned"
        },
        {
          "name": "optionValueId",
          "schema": "integer",
          "required": true,
          "description": "Defines value id that has to be assigned"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.option.value.update.json",
      "method": "productOptionValueUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update product option item from option.",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the option value should be updated"
        },
        {
          "name": "optionId",
          "schema": "string",
          "required": true,
          "description": "Defines option id where the value has to be updated"
        },
        {
          "name": "optionValueId",
          "schema": "integer",
          "required": true,
          "description": "Defines value id that has to be assigned"
        },
        {
          "name": "optionValue",
          "schema": "string",
          "required": true,
          "description": "Defines option value that has to be added"
        },
        {
          "name": "price",
          "schema": "number",
          "required": false,
          "description": "Defines new product option price"
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": "Defines new products' options quantity"
        },
        {
          "name": "clearCache",
          "schema": "boolean",
          "required": false,
          "description": "Is cache clear required"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.price.add.json",
      "method": "productPriceAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add some prices to the product.",
      "parameters": [
        {
          "name": "group_prices",
          "schema": "array",
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.price.delete.json",
      "method": "productPriceDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Delete some prices of the product",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines the product where the price has to be deleted"
        },
        {
          "name": "groupPrices",
          "schema": "string",
          "required": false,
          "description": "Defines product's group prices"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.price.update.json",
      "method": "productPriceUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update some prices of the product.",
      "parameters": [
        {
          "name": "group_prices",
          "schema": "array",
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.review.list.json",
      "method": "productReviewList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get reviews of a specific product.",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Product id"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "Retrieves reviews specified by ids"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": "Defines status"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.store.assign.json",
      "method": "productStoreAssign",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Assign product to store",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines id of the product which should be assigned to a store"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": true,
          "description": "Defines id of the store product should be assigned to"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.tax.add.json",
      "method": "productTaxAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add tax class and tax rate to store and assign to product.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tax_rates",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.update.json",
      "method": "productUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update price and quantity for a specific product",
      "parameters": [
        {
          "name": "backorder_status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "barcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "categories_ids",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clear_cache",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "cost_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "country_of_origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "disable_report_cache",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "gtin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "harmonized_system_code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "height",
          "schema": "number",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "in_stock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "increase_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lang_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "length",
          "schema": "number",
          "description": ""
        },
        {
          "name": "manage_stock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "manufacturer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "manufacturer_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "meta_description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "meta_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "meta_title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "old_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "product_class",
          "schema": "string",
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "reduce_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "reindex",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "report_request_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reserve_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "retail_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "search_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "seo_url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "short_description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "description": ""
        },
        {
          "name": "special_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "sprice_create",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sprice_expire",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "string",
          "description": ""
        },
        {
          "name": "taxable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "visible",
          "schema": "string",
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "description": ""
        },
        {
          "name": "width",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.add.json",
      "method": "productVariantAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add variant to product.",
      "parameters": [
        {
          "name": "attributes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "available_for_sale",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "available_for_view",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "barcode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "clear_cache",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cost_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "country_of_origin",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "harmonized_system_code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "height",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "lang_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "length",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_stock",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "manufacturer",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_keywords",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "meta_title",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "short_description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "special_price",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_create",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_expire",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sprice_modified",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tax_class_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "taxable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "weight_unit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "width",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.count.json",
      "method": "productVariantCount",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get count variants.",
      "parameters": [
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": false,
          "description": "Counts products’ variants specified by category id"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Retrieves products' variants specified by product id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves variants specified by store id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.delete.json",
      "method": "productVariantDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Delete variant.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Defines variant removal, specified by variant id"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product's id where the variant has to be deleted"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.image.add.json",
      "method": "productVariantImageAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add image to product",
      "parameters": [
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "mime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "option_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "position",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product_variant_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.image.delete.json",
      "method": "productVariantImageDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Delete  image to product",
      "parameters": [
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Defines product id where the variant image should be deleted"
        },
        {
          "name": "productVariantId",
          "schema": "integer",
          "required": true,
          "description": "Defines product's variants specified by variant id"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.info.json",
      "method": "productVariantInfo",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Retrieves variant's info specified by variant id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves variant info specified by store id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.list.json",
      "method": "productVariantList",
      "httpMethod": "get",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "categoryId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products’ variants specified by category id"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": false,
          "description": "Retrieves products' variants specified by product id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Retrieves variants specified by store id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.price.add.json",
      "method": "productVariantPriceAdd",
      "httpMethod": "post",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Add some prices to the product variant.",
      "parameters": [
        {
          "name": "group_prices",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.price.delete.json",
      "method": "productVariantPriceDelete",
      "httpMethod": "delete",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Delete some prices of the product variant.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Defines the variant where the price has to be deleted"
        },
        {
          "name": "productId",
          "schema": "string",
          "required": true,
          "description": "Product id"
        },
        {
          "name": "groupPrices",
          "schema": "string",
          "required": true,
          "description": "Defines variants's group prices"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.price.update.json",
      "method": "productVariantPriceUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update some prices of the product variant.",
      "parameters": [
        {
          "name": "group_prices",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/product.variant.update.json",
      "method": "productVariantUpdate",
      "httpMethod": "put",
      "tag": "product",
      "typeScriptTag": "product",
      "description": "Update variant.",
      "parameters": [
        {
          "name": "available_for_sale",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "backorder_status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "barcode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clear_cache",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "cost_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "country_of_origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "gtin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "harmonized_system_code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "height",
          "schema": "number",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "in_stock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "increase_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "lang_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "length",
          "schema": "number",
          "description": ""
        },
        {
          "name": "manage_stock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "meta_description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "meta_keywords",
          "schema": "string",
          "description": ""
        },
        {
          "name": "meta_title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "model",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "old_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "options",
          "schema": "array",
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "product_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "reduce_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "reindex",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "reserve_quantity",
          "schema": "number",
          "description": ""
        },
        {
          "name": "retail_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "short_description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "description": ""
        },
        {
          "name": "special_price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "sprice_create",
          "schema": "string",
          "description": ""
        },
        {
          "name": "sprice_expire",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "store_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "taxable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "visible",
          "schema": "string",
          "description": ""
        },
        {
          "name": "warehouse_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "description": ""
        },
        {
          "name": "width",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/subscriber.list.json",
      "method": "subscriberList",
      "httpMethod": "get",
      "tag": "subscriber",
      "typeScriptTag": "subscriber",
      "description": "Get subscribers list",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "subscribed",
          "schema": "boolean",
          "required": false,
          "description": "Filter by subscription status"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "Filter subscribers by email"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        },
        {
          "name": "createdFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their creation date"
        },
        {
          "name": "createdTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their creation date"
        },
        {
          "name": "modifiedFrom",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities from their modification date"
        },
        {
          "name": "modifiedTo",
          "schema": "string",
          "required": false,
          "description": "Retrieve entities to their modification date"
        },
        {
          "name": "pageCursor",
          "schema": "string",
          "required": false,
          "description": "Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tax.class.info.json",
      "method": "taxClassInfo",
      "httpMethod": "get",
      "tag": "tax",
      "typeScriptTag": "tax",
      "description": "Get info about tax",
      "parameters": [
        {
          "name": "taxClassId",
          "schema": "string",
          "required": true,
          "description": "Retrieves taxes specified by class id"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Store Id"
        },
        {
          "name": "langId",
          "schema": "string",
          "required": false,
          "description": "Language id"
        },
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "responseFields",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "exclude",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.count.json",
      "method": "webhookCount",
      "httpMethod": "get",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "Count registered webhooks on the store.",
      "parameters": [
        {
          "name": "entity",
          "schema": "string",
          "required": false,
          "description": "The entity you want to filter webhooks by (e.g. order or product)"
        },
        {
          "name": "action",
          "schema": "string",
          "required": false,
          "description": "The action you want to filter webhooks by (e.g. order or product)"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "The webhook status you want to filter webhooks by"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.create.json",
      "method": "webhookCreate",
      "httpMethod": "post",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "Create webhook on the store and subscribe to it.",
      "parameters": [
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)"
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": "Specify what action (event) will trigger the webhook (e.g add, delete, or update)"
        },
        {
          "name": "callback",
          "schema": "string",
          "required": false,
          "description": "Callback url that returns shipping rates. It should be able to accept POST requests with json data."
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "The name you give to the webhook"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "Fields the webhook should send"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "Webhook status"
        },
        {
          "name": "storeId",
          "schema": "string",
          "required": false,
          "description": "Defines store id where the webhook should be assigned"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.delete.json",
      "method": "webhookDelete",
      "httpMethod": "delete",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "Delete registered webhook on the store.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Webhook id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.events.json",
      "method": "webhookEvents",
      "httpMethod": "get",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "List all Webhooks that are available on this store.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.list.json",
      "method": "webhookList",
      "httpMethod": "get",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "List registered webhook on the store.",
      "parameters": [
        {
          "name": "params",
          "schema": "string",
          "required": false,
          "description": "Set this parameter in order to choose which entity fields you want to retrieve"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the number from which you want to get entities"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "This parameter sets the entity amount that has to be retrieved. Max allowed count=250"
        },
        {
          "name": "entity",
          "schema": "string",
          "required": false,
          "description": "The entity you want to filter webhooks by (e.g. order or product)"
        },
        {
          "name": "action",
          "schema": "string",
          "required": false,
          "description": "The action you want to filter webhooks by (e.g. add, update, or delete)"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "The webhook status you want to filter webhooks by"
        },
        {
          "name": "ids",
          "schema": "string",
          "required": false,
          "description": "List of сomma-separated webhook ids"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhook.update.json",
      "method": "webhookUpdate",
      "httpMethod": "put",
      "tag": "webhook",
      "typeScriptTag": "webhook",
      "description": "Update Webhooks parameters.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Webhook id"
        },
        {
          "name": "callback",
          "schema": "string",
          "required": false,
          "description": "Callback url that returns shipping rates. It should be able to accept POST requests with json data."
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "The name you give to the webhook"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "Fields the webhook should send"
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "Webhook status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.api2cart.com/v1.1",
  "apiDescription": "API2Cart",
  "apiTitle": "Swagger API2Cart",
  "endpoints": 147,
  "sdkMethods": 147,
  "schemas": 143,
  "parameters": 1446,
  "contactEmail": "contact@api2cart.com",
  "difficultyScore": 580,
  "difficulty": "Very Hard"
}