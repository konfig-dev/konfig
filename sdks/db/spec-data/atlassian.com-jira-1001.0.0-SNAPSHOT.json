{
  "providerName": "atlassian.com",
  "openApiRaw": "https://developer.atlassian.com/cloud/jira/platform/swagger-v3.v3.json",
  "securitySchemes": {
    "OAuth2": {
      "description": "OAuth2 scopes for Jira",
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://auth.atlassian.com/authorize",
          "scopes": {
            "delete:async-task:jira": "Delete asynchronous task.",
            "delete:attachment:jira": "Delete issue attachments.",
            "delete:avatar:jira": "Delete system and custom avatars.",
            "delete:comment.property:jira": "Delete issue comment properties.",
            "delete:comment:jira": "Delete issue comments.",
            "delete:dashboard.property:jira": "Delete dashboard properties.",
            "delete:dashboard:jira": "Delete dashboards.",
            "delete:field-configuration-scheme:jira": "Delete field configuration schemes.",
            "delete:field-configuration:jira": "Delete field configurations.",
            "delete:field.option:jira": "Delete field options.",
            "delete:field:jira": "Delete fields.",
            "delete:filter.column:jira": "Delete filter columns.",
            "delete:filter:jira": "Delete filters.",
            "delete:group:jira": "Delete user groups.",
            "delete:issue-link-type:jira": "Delete issue link types.",
            "delete:issue-link:jira": "Delete issue links.",
            "delete:issue-type-scheme:jira": "Delete issue type schemes.",
            "delete:issue-type-screen-scheme:jira": "Delete issue type screen schemes.",
            "delete:issue-type.property:jira": "Delete issue type properties.",
            "delete:issue-type:jira": "Delete issue types.",
            "delete:issue-worklog.property:jira": "Delete issue worklog properties.",
            "delete:issue-worklog:jira": "Delete issue worklogs.",
            "delete:issue.property:jira": "Delete issue properties.",
            "delete:issue.remote-link:jira": "Delete issue remote links.",
            "delete:issue:jira": "Delete issues.",
            "delete:permission-scheme:jira": "Delete permission schemes.",
            "delete:permission:jira": "Delete permissions.",
            "delete:project-category:jira": "Delete project categories.",
            "delete:project-role:jira": "Delete project roles.",
            "delete:project-version:jira": "Delete project versions.",
            "delete:project.avatar:jira": "Delete project avatars.",
            "delete:project.component:jira": "Delete project components.",
            "delete:project.property:jira": "Delete project properties.",
            "delete:project:jira": "Delete projects and their details, such as issue types, project lead, and avatars.",
            "delete:screen-scheme:jira": "Delete screen schemes.",
            "delete:screen-tab:jira": "Delete screen tabs.",
            "delete:screen:jira": "Delete screens.",
            "delete:screenable-field:jira": "Delete screenable fields.",
            "delete:user-configuration:jira": "Delete user configurations.",
            "delete:user.property:jira": "Delete user properties.",
            "delete:webhook:jira": "Delete webhooks.",
            "delete:workflow-scheme:jira": "Delete workflow schemes.",
            "delete:workflow.property:jira": "Delete workflow properties.",
            "delete:workflow:jira": "Delete workflows.",
            "manage:jira-configuration": "Configure Jira settings that require the Jira administrators permission, for example, create projects and custom fields, view workflows, manage issue link types.",
            "manage:jira-project": "Create and edit project settings and create new project-level objects, for example, versions, components.",
            "manage:jira-webhook": "Manage Jira webhooks. Enables an OAuth app to register and unregister dynamic webhooks in Jira. It also provides for fetching of registered webhooks.",
            "read:application-role:jira": "View application roles.",
            "read:attachment:jira": "View issue attachments.",
            "read:audit-log:jira": "View audit logs.",
            "read:avatar:jira": "View system and custom avatars.",
            "read:comment.property:jira": "View issue comment properties.",
            "read:comment:jira": "View issue comments.",
            "read:custom-field-contextual-configuration:jira": "Read custom field contextual configurations.",
            "read:dashboard.property:jira": "View dashboard properties.",
            "read:dashboard:jira": "View dashboards.",
            "read:field-configuration-scheme:jira": "View field configuration schemes.",
            "read:field-configuration:jira": "Read field configurations.",
            "read:field.default-value:jira": "View field default values.",
            "read:field.option:jira": "View field options.",
            "read:field.options:jira": "Read field options.",
            "read:field:jira": "View fields.",
            "read:filter.column:jira": "View filter columns.",
            "read:filter.default-share-scope:jira": "View filter default share scopes.",
            "read:filter:jira": "View filters.",
            "read:group:jira": "View user groups.",
            "read:instance-configuration:jira": "View instance configurations.",
            "read:issue-details:jira": "View issue details.",
            "read:issue-event:jira": "Read issue events.",
            "read:issue-field-values:jira": "View issue field valueses.",
            "read:issue-link-type:jira": "View issue link types.",
            "read:issue-link:jira": "View issue links.",
            "read:issue-meta:jira": "View issue meta.",
            "read:issue-security-level:jira": "View issue security levels.",
            "read:issue-security-scheme:jira": "View issue security schemes.",
            "read:issue-status:jira": "View issue statuses.",
            "read:issue-type-hierarchy:jira": "Read issue type hierarchies.",
            "read:issue-type-scheme:jira": "View issue type schemes.",
            "read:issue-type-screen-scheme:jira": "View issue type screen schemes.",
            "read:issue-type.property:jira": "View issue type properties.",
            "read:issue-type:jira": "View issue types.",
            "read:issue-worklog.property:jira": "View issue worklog properties.",
            "read:issue-worklog:jira": "View issue worklogs.",
            "read:issue.changelog:jira": "View issue changelogs.",
            "read:issue.property:jira": "View issue properties.",
            "read:issue.remote-link:jira": "View issue remote links.",
            "read:issue.time-tracking:jira": "View issue time trackings.",
            "read:issue.transition:jira": "View issue transitions.",
            "read:issue.vote:jira": "View issue votes.",
            "read:issue.votes:jira": "View issue voteses.",
            "read:issue.watcher:jira": "View issue watchers.",
            "read:issue:jira": "View issues.",
            "read:jira-expressions:jira": "View jira expressions.",
            "read:jira-user": "View user information in Jira that you have access to, including usernames, email addresses, and avatars.",
            "read:jira-work": "Read project and issue data. Search for issues and objects associated with issues (such as attachments and worklogs).",
            "read:jql:jira": "View JQL.",
            "read:label:jira": "View labels.",
            "read:license:jira": "View licenses.",
            "read:notification-scheme:jira": "View notification schemes.",
            "read:permission-scheme:jira": "View permission schemes.",
            "read:permission:jira": "View permissions.",
            "read:priority:jira": "View priorities.",
            "read:project-category:jira": "View project categories.",
            "read:project-role:jira": "View project roles.",
            "read:project-type:jira": "View project types.",
            "read:project-version:jira": "View project versions.",
            "read:project.avatar:jira": "Read project avatars.",
            "read:project.component:jira": "View project components.",
            "read:project.email:jira": "View project emails.",
            "read:project.feature:jira": "Read project features.",
            "read:project.property:jira": "View project properties.",
            "read:project:jira": "View projects.",
            "read:resolution:jira": "View resolutions.",
            "read:role:jira": "View roles.",
            "read:screen-field:jira": "View screen fields.",
            "read:screen-scheme:jira": "View screen schemes.",
            "read:screen-tab:jira": "View screen tabs.",
            "read:screen:jira": "View screens.",
            "read:screenable-field:jira": "View screenable fields.",
            "read:status:jira": "View statuses.",
            "read:user-configuration:jira": "View user configurations.",
            "read:user.columns:jira": "View user columnses.",
            "read:user.property:jira": "View user properties.",
            "read:user:jira": "View users.",
            "read:webhook:jira": "View webhooks.",
            "read:workflow-scheme:jira": "View workflow schemes.",
            "read:workflow.property:jira": "View workflow properties.",
            "read:workflow:jira": "View workflows.",
            "send:notification:jira": "Send notifications.",
            "validate:jql:jira": "Validate JQL.",
            "write:attachment:jira": "Create and update issue attachments.",
            "write:avatar:jira": "Create and update system and custom avatars.",
            "write:comment.property:jira": "Create and update issue comment properties.",
            "write:comment:jira": "Create and update issue comments.",
            "write:custom-field-contextual-configuration:jira": "Save custom field contextual configurations.",
            "write:dashboard.property:jira": "Create and update dashboard properties.",
            "write:dashboard:jira": "Create and update dashboards.",
            "write:field-configuration-scheme:jira": "Create and update field configuration schemes.",
            "write:field-configuration:jira": "Save field configurations.",
            "write:field.default-value:jira": "Create and update field default values.",
            "write:field.option:jira": "Create and update field options.",
            "write:field:jira": "Create and update fields.",
            "write:filter.column:jira": "Create and update filter columns.",
            "write:filter.default-share-scope:jira": "Create and update filter default share scopes.",
            "write:filter:jira": "Create and update filters.",
            "write:group:jira": "Create and update user groups.",
            "write:instance-configuration:jira": "Create and update instance configurations.",
            "write:issue-link-type:jira": "Create and update issue link types.",
            "write:issue-link:jira": "Create and update issue links.",
            "write:issue-type-scheme:jira": "Create and update issue type schemes.",
            "write:issue-type-screen-scheme:jira": "Create and update issue type screen schemes.",
            "write:issue-type.property:jira": "Create and update issue type properties.",
            "write:issue-type:jira": "Create and update issue types.",
            "write:issue-worklog.property:jira": "Create and update issue worklog properties.",
            "write:issue-worklog:jira": "Create and update issue worklogs.",
            "write:issue.property:jira": "Create and update issue properties.",
            "write:issue.remote-link:jira": "Create and update issue remote links.",
            "write:issue.time-tracking:jira": "Create and update issue time trackings.",
            "write:issue.vote:jira": "Create and update issue votes.",
            "write:issue.watcher:jira": "Create and update issue watchers.",
            "write:issue:jira": "Create and update issues.",
            "write:jira-work": "Create and edit issues in Jira, post comments, create worklogs, and delete issues.",
            "write:permission-scheme:jira": "Create and update permission schemes.",
            "write:permission:jira": "Create and update permissions.",
            "write:project-category:jira": "Create and update project categories.",
            "write:project-role:jira": "Create and update project roles.",
            "write:project-version:jira": "Create and update project versions.",
            "write:project.avatar:jira": "Create and update project avatars.",
            "write:project.component:jira": "Create and update project components.",
            "write:project.email:jira": "Create and update project emails.",
            "write:project.feature:jira": "Save project features.",
            "write:project.property:jira": "Create and update project properties.",
            "write:project:jira": "Create and update projects.",
            "write:screen-scheme:jira": "Create and update screen schemes.",
            "write:screen-tab:jira": "Create and update screen tabs.",
            "write:screen:jira": "Create and update screens.",
            "write:screenable-field:jira": "Create and update screenable fields.",
            "write:user-configuration:jira": "Create and update user configurations.",
            "write:user.property:jira": "Create and update user properties.",
            "write:webhook:jira": "Create and update webhooks.",
            "write:workflow-scheme:jira": "Create and update workflow schemes.",
            "write:workflow.property:jira": "Create and update workflow properties.",
            "write:workflow:jira": "Create and update workflows."
          },
          "tokenUrl": "https://auth.atlassian.com/oauth/token"
        }
      },
      "type": "oauth2"
    },
    "basicAuth": {
      "description": "You can access this resource via basic auth.",
      "scheme": "basic",
      "type": "http"
    }
  },
  "homepage": "atlassian.com",
  "serviceName": "jira",
  "apiVersion": "1001.0.0-SNAPSHOT",
  "methods": [
    {
      "url": "/rest/api/3/announcementBanner",
      "method": "getBanner",
      "httpMethod": "get",
      "tag": "Announcement banner",
      "description": "Get announcement banner configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Announcement banner configuration."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/announcementBanner",
      "method": "setBanner",
      "httpMethod": "put",
      "tag": "Announcement banner",
      "description": "Update announcement banner configuration",
      "parameters": [
        {
          "name": "isDismissible",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/app/field/value",
      "method": "updateMultipleCustomFieldValues",
      "httpMethod": "post",
      "tag": "Issue custom field values (apps)",
      "description": "Update custom fields",
      "parameters": [
        {
          "name": "generateChangelog",
          "schema": "boolean",
          "description": "Whether to generate a changelog for this update."
        },
        {
          "name": "updates",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "getCustomFieldConfiguration",
      "httpMethod": "get",
      "tag": "Issue custom field configuration (apps)",
      "description": "Get custom field configurations",
      "parameters": [
        {
          "name": "fieldIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the custom field, for example `customfield_10000`."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`."
        },
        {
          "name": "fieldContextId",
          "schema": "array",
          "description": "The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`."
        },
        {
          "name": "issueId",
          "schema": "integer",
          "description": "The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`."
        },
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "description": "The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`."
        },
        {
          "name": "issueTypeId",
          "schema": "string",
          "description": "The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
      "method": "updateCustomFieldConfiguration",
      "httpMethod": "put",
      "tag": "Issue custom field configuration (apps)",
      "description": "Update custom field configurations",
      "parameters": [
        {
          "name": "fieldIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the custom field, for example `customfield_10000`."
        },
        {
          "name": "configurations",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/app/field/{fieldIdOrKey}/value",
      "method": "updateCustomFieldValue",
      "httpMethod": "put",
      "tag": "Issue custom field values (apps)",
      "description": "Update custom field value",
      "parameters": [
        {
          "name": "fieldIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the custom field. For example, `customfield_10010`."
        },
        {
          "name": "generateChangelog",
          "schema": "boolean",
          "description": "Whether to generate a changelog for this update."
        },
        {
          "name": "updates",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/application-properties",
      "method": "getApplicationProperty",
      "httpMethod": "get",
      "tag": "Jira settings",
      "description": "Get application property",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "description": "The key of the application property."
        },
        {
          "name": "permissionLevel",
          "schema": "string",
          "description": "The permission level of all items being returned in the list."
        },
        {
          "name": "keyFilter",
          "schema": "string",
          "description": "When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/application-properties/advanced-settings",
      "method": "getAdvancedSettings",
      "httpMethod": "get",
      "tag": "Jira settings",
      "description": "Get advanced settings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/application-properties/{id}",
      "method": "setApplicationProperty",
      "httpMethod": "put",
      "tag": "Jira settings",
      "description": "Set application property",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The key of the application property to update."
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an application property."
        }
      ]
    },
    {
      "url": "/rest/api/3/applicationrole",
      "method": "getAllApplicationRoles",
      "httpMethod": "get",
      "tag": "Application roles",
      "description": "Get all application roles",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/applicationrole/{key}",
      "method": "getApplicationRole",
      "httpMethod": "get",
      "tag": "Application roles",
      "description": "Get application role",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an application role."
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/content/{id}",
      "method": "getAttachmentContent",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get attachment content",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        },
        {
          "name": "redirect",
          "schema": "boolean",
          "description": "Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/meta",
      "method": "getAttachmentMeta",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get Jira attachment settings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the instance's attachment settings."
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/thumbnail/{id}",
      "method": "getAttachmentThumbnail",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get attachment thumbnail",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        },
        {
          "name": "redirect",
          "schema": "boolean",
          "description": "Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment."
        },
        {
          "name": "fallbackToDefault",
          "schema": "boolean",
          "description": "Whether a default thumbnail is returned when the requested thumbnail is not found."
        },
        {
          "name": "width",
          "schema": "integer",
          "description": "The maximum width to scale the thumbnail to."
        },
        {
          "name": "height",
          "schema": "integer",
          "description": "The maximum height to scale the thumbnail to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/{id}",
      "method": "removeAttachment",
      "httpMethod": "delete",
      "tag": "Issue attachments",
      "description": "Delete attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/attachment/{id}",
      "method": "getAttachment",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get attachment metadata",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Metadata for an issue attachment."
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/{id}/expand/human",
      "method": "expandAttachmentForHumans",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get all metadata for an expanded attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Metadata for an archive (for example a zip) and its contents."
        }
      ]
    },
    {
      "url": "/rest/api/3/attachment/{id}/expand/raw",
      "method": "expandAttachmentForMachines",
      "httpMethod": "get",
      "tag": "Issue attachments",
      "description": "Get contents metadata for an expanded attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the attachment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/auditing/record",
      "method": "getAuditRecords",
      "httpMethod": "get",
      "tag": "Audit records",
      "description": "Get audit records",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "description": "The number of records to skip before returning the first result."
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "The maximum number of results to return."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "The strings to match with audit field content, space separated."
        },
        {
          "name": "from",
          "schema": "string",
          "description": "The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned."
        },
        {
          "name": "to",
          "schema": "string",
          "description": "The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Container for a list of audit records."
        }
      ]
    },
    {
      "url": "/rest/api/3/avatar/{type}/system",
      "method": "getAllSystemAvatars",
      "httpMethod": "get",
      "tag": "Avatars",
      "description": "Get system avatars by type",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The avatar type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of system avatars."
        }
      ]
    },
    {
      "url": "/rest/api/3/comment/list",
      "method": "getCommentsByIds",
      "httpMethod": "post",
      "tag": "Issue comments",
      "description": "Get comments by IDs",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedBody` Returns the comment body rendered in HTML.\n *  `properties` Returns the comment's properties."
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/comment/{commentId}/properties",
      "method": "getCommentPropertyKeys",
      "httpMethod": "get",
      "tag": "Issue comment properties",
      "description": "Get comment property keys",
      "parameters": [
        {
          "name": "commentId",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "deleteCommentProperty",
      "httpMethod": "delete",
      "tag": "Issue comment properties",
      "description": "Delete comment property",
      "parameters": [
        {
          "name": "commentId",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "getCommentProperty",
      "httpMethod": "get",
      "tag": "Issue comment properties",
      "description": "Get comment property",
      "parameters": [
        {
          "name": "commentId",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/comment/{commentId}/properties/{propertyKey}",
      "method": "setCommentProperty",
      "httpMethod": "put",
      "tag": "Issue comment properties",
      "description": "Set comment property",
      "parameters": [
        {
          "name": "commentId",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/component",
      "method": "createComponent",
      "httpMethod": "post",
      "tag": "Project components",
      "description": "Create component",
      "parameters": [
        {
          "name": "assignee",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "assigneeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isAssigneeTypeValid",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lead",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "leadAccountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "leadUserName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "realAssignee",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "realAssigneeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a project component."
        }
      ]
    },
    {
      "url": "/rest/api/3/component/{id}",
      "method": "deleteComponent",
      "httpMethod": "delete",
      "tag": "Project components",
      "description": "Delete component",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the component."
        },
        {
          "name": "moveIssuesTo",
          "schema": "string",
          "description": "The ID of the component to replace the deleted component. If this value is null no replacement is made."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/component/{id}",
      "method": "getComponent",
      "httpMethod": "get",
      "tag": "Project components",
      "description": "Get component",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the component."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project component."
        }
      ]
    },
    {
      "url": "/rest/api/3/component/{id}",
      "method": "updateComponent",
      "httpMethod": "put",
      "tag": "Project components",
      "description": "Update component",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the component."
        },
        {
          "name": "assignee",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "assigneeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isAssigneeTypeValid",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lead",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "leadAccountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "leadUserName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "realAssignee",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "realAssigneeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project component."
        }
      ]
    },
    {
      "url": "/rest/api/3/component/{id}/relatedIssueCounts",
      "method": "getComponentRelatedIssues",
      "httpMethod": "get",
      "tag": "Project components",
      "description": "Get component issues count",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the component."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Count of issues assigned to a component."
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration",
      "method": "getConfiguration",
      "httpMethod": "get",
      "tag": "Jira settings",
      "description": "Get global settings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the configuration of Jira."
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration/timetracking",
      "method": "getSelectedTimeTrackingImplementation",
      "httpMethod": "get",
      "tag": "Time tracking",
      "description": "Get selected time tracking provider",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the time tracking provider."
        },
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration/timetracking",
      "method": "selectTimeTrackingImplementation",
      "httpMethod": "put",
      "tag": "Time tracking",
      "description": "Select time tracking provider",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration/timetracking/list",
      "method": "getAvailableTimeTrackingImplementations",
      "httpMethod": "get",
      "tag": "Time tracking",
      "description": "Get all time tracking providers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration/timetracking/options",
      "method": "getSharedTimeTrackingConfiguration",
      "httpMethod": "get",
      "tag": "Time tracking",
      "description": "Get time tracking settings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the time tracking configuration."
        }
      ]
    },
    {
      "url": "/rest/api/3/configuration/timetracking/options",
      "method": "setSharedTimeTrackingConfiguration",
      "httpMethod": "put",
      "tag": "Time tracking",
      "description": "Set time tracking settings",
      "parameters": [
        {
          "name": "defaultUnit",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "timeFormat",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "workingDaysPerWeek",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "workingHoursPerDay",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the time tracking configuration."
        }
      ]
    },
    {
      "url": "/rest/api/3/customFieldOption/{id}",
      "method": "getCustomFieldOption",
      "httpMethod": "get",
      "tag": "Issue custom field options",
      "description": "Get custom field option",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field option."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a custom option for a field."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard",
      "method": "getAllDashboards",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get all dashboards",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "description": "The filter applied to the list of dashboards. Valid values are:\n\n *  `favourite` Returns dashboards the user has marked as favorite.\n *  `my` Returns dashboards owned by the user."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page containing dashboard details."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard",
      "method": "createDashboard",
      "httpMethod": "post",
      "tag": "Dashboards",
      "description": "Create dashboard",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "editPermissions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sharePermissions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a dashboard."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/gadgets",
      "method": "getAllAvailableDashboardGadgets",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get available gadgets",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of available gadgets."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/search",
      "method": "getDashboardsPaginated",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Search for dashboards",
      "parameters": [
        {
          "name": "dashboardName",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with `name`."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter."
        },
        {
          "name": "owner",
          "schema": "string",
          "description": "This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter."
        },
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter."
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": "Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "status",
          "schema": "string",
          "description": "The status to filter by. It may be active, archived or deleted."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "getAllGadgets",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get gadgets",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "moduleKey",
          "schema": "array",
          "description": "The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`."
        },
        {
          "name": "uri",
          "schema": "array",
          "description": "The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`."
        },
        {
          "name": "gadgetId",
          "schema": "array",
          "description": "The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of gadgets on the dashboard."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/gadget",
      "method": "addGadget",
      "httpMethod": "post",
      "tag": "Dashboards",
      "description": "Add gadget to dashboard",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ignoreUriAndModuleKeyValidation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "moduleKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "position",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        },
        {
          "name": "uri",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a gadget."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "removeGadget",
      "httpMethod": "delete",
      "tag": "Dashboards",
      "description": "Remove gadget from dashboard",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "gadgetId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the gadget."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
      "method": "updateGadget",
      "httpMethod": "put",
      "tag": "Dashboards",
      "description": "Update gadget on dashboard",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "gadgetId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the gadget."
        },
        {
          "name": "color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "position",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
      "method": "getDashboardItemPropertyKeys",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get dashboard item property keys",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "deleteDashboardItemProperty",
      "httpMethod": "delete",
      "tag": "Dashboards",
      "description": "Delete dashboard item property",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard item."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the dashboard item property."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "getDashboardItemProperty",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get dashboard item property",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard item."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the dashboard item property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
      "method": "setDashboardItemProperty",
      "httpMethod": "put",
      "tag": "Dashboards",
      "description": "Set dashboard item property",
      "parameters": [
        {
          "name": "dashboardId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        },
        {
          "name": "itemId",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard item."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \"config\", the request body's JSON must be an object with all keys and values as strings."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{id}",
      "method": "deleteDashboard",
      "httpMethod": "delete",
      "tag": "Dashboards",
      "description": "Delete dashboard",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{id}",
      "method": "getDashboard",
      "httpMethod": "get",
      "tag": "Dashboards",
      "description": "Get dashboard",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a dashboard."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{id}",
      "method": "updateDashboard",
      "httpMethod": "put",
      "tag": "Dashboards",
      "description": "Update dashboard",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the dashboard to update."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "editPermissions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sharePermissions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a dashboard."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/dashboard/{id}/copy",
      "method": "copyDashboard",
      "httpMethod": "post",
      "tag": "Dashboards",
      "description": "Copy dashboard",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "editPermissions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sharePermissions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a dashboard."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/events",
      "method": "getEvents",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get events",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/expression/analyse",
      "method": "analyseExpression",
      "httpMethod": "post",
      "tag": "Jira expressions",
      "description": "Analyse Jira expression",
      "parameters": [
        {
          "name": "check",
          "schema": "string",
          "description": "The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute."
        },
        {
          "name": "contextVariables",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "expressions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the analysed Jira expression."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/expression/eval",
      "method": "evaluateJiraExpression",
      "httpMethod": "post",
      "tag": "Jira expressions",
      "description": "Evaluate Jira expression",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions."
        },
        {
          "name": "context",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "expression",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of evaluating a Jira expression."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/field",
      "method": "getFields",
      "httpMethod": "get",
      "tag": "Issue fields",
      "description": "Get fields",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field",
      "method": "createCustomField",
      "httpMethod": "post",
      "tag": "Issue fields",
      "description": "Create custom field",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "searcherKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a field."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/search",
      "method": "getFieldsPaginated",
      "httpMethod": "get",
      "tag": "Issue fields",
      "description": "Get fields paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "type",
          "schema": "array",
          "description": "The type of fields to search."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The IDs of the custom fields to return or, where `query` is specified, filter."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with field names or descriptions."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `contextsCount` sorts by the number of contexts related to a field\n *  `lastUsed` sorts by the date when the value of the field last changed\n *  `name` sorts by the field name\n *  `screensCount` sorts by the number of screens related to a field"
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `key` returns the key for each field\n *  `lastUsed` returns the date when the value of the field last changed\n *  `screensCount` returns the number of screens related to a field\n *  `contextsCount` returns the number of contexts related to a field\n *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)\n *  `searcherKey` returns the searcher key for each custom field"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/search/trashed",
      "method": "getTrashedFieldsPaginated",
      "httpMethod": "get",
      "tag": "Issue fields",
      "description": "Get fields in trash paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": ""
        },
        {
          "name": "query",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with field names or descriptions."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}",
      "method": "updateCustomField",
      "httpMethod": "put",
      "tag": "Issue fields",
      "description": "Update custom field",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "searcherKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context",
      "method": "getContextsForField",
      "httpMethod": "get",
      "tag": "Issue custom field contexts",
      "description": "Get custom field contexts",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "isAnyIssueType",
          "schema": "boolean",
          "description": "Whether to return contexts that apply to all issue types."
        },
        {
          "name": "isGlobalContext",
          "schema": "boolean",
          "description": "Whether to return contexts that apply to all projects."
        },
        {
          "name": "contextId",
          "schema": "array",
          "description": "The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context",
      "method": "createCustomFieldContext",
      "httpMethod": "post",
      "tag": "Issue custom field contexts",
      "description": "Create custom field context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The details of a created custom field context."
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/defaultValue",
      "method": "getDefaultValues",
      "httpMethod": "get",
      "tag": "Issue custom field contexts",
      "description": "Get custom field contexts default values",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field, for example `customfield\\_10000`."
        },
        {
          "name": "contextId",
          "schema": "array",
          "description": "The IDs of the contexts."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/defaultValue",
      "method": "setDefaultValues",
      "httpMethod": "put",
      "tag": "Issue custom field contexts",
      "description": "Set custom field contexts default values",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "defaultValues",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/issuetypemapping",
      "method": "getIssueTypeMappingsForContexts",
      "httpMethod": "get",
      "tag": "Issue custom field contexts",
      "description": "Get issue types for custom field context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "array",
          "description": "The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/mapping",
      "method": "getCustomFieldContextsForProjectsAndIssueTypes",
      "httpMethod": "post",
      "tag": "Issue custom field contexts",
      "description": "Get custom field contexts for projects and issue types",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "mappings",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/projectmapping",
      "method": "getProjectContextMapping",
      "httpMethod": "get",
      "tag": "Issue custom field contexts",
      "description": "Get project mappings for custom field context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field, for example `customfield\\_10000`."
        },
        {
          "name": "contextId",
          "schema": "array",
          "description": "The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}",
      "method": "deleteCustomFieldContext",
      "httpMethod": "delete",
      "tag": "Issue custom field contexts",
      "description": "Delete custom field context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}",
      "method": "updateCustomFieldContext",
      "httpMethod": "put",
      "tag": "Issue custom field contexts",
      "description": "Update custom field context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype",
      "method": "addIssueTypesToContext",
      "httpMethod": "put",
      "tag": "Issue custom field contexts",
      "description": "Add issue types to context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove",
      "method": "removeIssueTypesFromContext",
      "httpMethod": "post",
      "tag": "Issue custom field contexts",
      "description": "Remove issue types from context",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/option",
      "method": "getOptionsForContext",
      "httpMethod": "get",
      "tag": "Issue custom field options",
      "description": "Get custom field options (context)",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "optionId",
          "schema": "integer",
          "description": "The ID of the option."
        },
        {
          "name": "onlyOptions",
          "schema": "boolean",
          "description": "Whether only options are returned."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/option",
      "method": "createCustomFieldOption",
      "httpMethod": "post",
      "tag": "Issue custom field options",
      "description": "Create custom field options (context)",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "options",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of custom field options for a context."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/option",
      "method": "updateCustomFieldOption",
      "httpMethod": "put",
      "tag": "Issue custom field options",
      "description": "Update custom field options (context)",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "options",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of custom field options for a context."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/option/move",
      "method": "reorderCustomFieldOptions",
      "httpMethod": "put",
      "tag": "Issue custom field options",
      "description": "Reorder custom field options (context)",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customFieldOptionIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}",
      "method": "deleteCustomFieldOption",
      "httpMethod": "delete",
      "tag": "Issue custom field options",
      "description": "Delete custom field options (context)",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context from which an option should be deleted."
        },
        {
          "name": "optionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the option to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/project",
      "method": "assignProjectsToCustomFieldContext",
      "httpMethod": "put",
      "tag": "Issue custom field contexts",
      "description": "Assign custom field context to projects",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/context/{contextId}/project/remove",
      "method": "removeCustomFieldContextFromProjects",
      "httpMethod": "post",
      "tag": "Issue custom field contexts",
      "description": "Remove custom field context from projects",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the custom field."
        },
        {
          "name": "contextId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the context."
        },
        {
          "name": "projectIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/contexts",
      "method": "getContextsForFieldDeprecated",
      "httpMethod": "get",
      "tag": "Issue fields",
      "description": "Get contexts for a field",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the field to return contexts for."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldId}/screens",
      "method": "getScreensForField",
      "httpMethod": "get",
      "tag": "Screens",
      "description": "Get screens for a field",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the field to return screens for."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option",
      "method": "getAllIssueFieldOptions",
      "httpMethod": "get",
      "tag": "Issue custom field options (apps)",
      "description": "Get all issue field options",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option",
      "method": "createIssueFieldOption",
      "httpMethod": "post",
      "tag": "Issue custom field options (apps)",
      "description": "Create issue field option",
      "parameters": [
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        },
        {
          "name": "config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the options for a select list issue field."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/suggestions/edit",
      "method": "getSelectableIssueFieldOptions",
      "httpMethod": "get",
      "tag": "Issue custom field options (apps)",
      "description": "Get selectable issue field options",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": "Filters the results to options that are only available in the specified project."
        },
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/suggestions/search",
      "method": "getVisibleIssueFieldOptions",
      "httpMethod": "get",
      "tag": "Issue custom field options (apps)",
      "description": "Get visible issue field options",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": "Filters the results to options that are only available in the specified project."
        },
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/{optionId}",
      "method": "deleteIssueFieldOption",
      "httpMethod": "delete",
      "tag": "Issue custom field options (apps)",
      "description": "Delete issue field option",
      "parameters": [
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        },
        {
          "name": "optionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the option to be deleted."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/{optionId}",
      "method": "getIssueFieldOption",
      "httpMethod": "get",
      "tag": "Issue custom field options (apps)",
      "description": "Get issue field option",
      "parameters": [
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        },
        {
          "name": "optionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the option to be returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the options for a select list issue field."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/{optionId}",
      "method": "updateIssueFieldOption",
      "httpMethod": "put",
      "tag": "Issue custom field options (apps)",
      "description": "Update issue field option",
      "parameters": [
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        },
        {
          "name": "optionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the option to be updated."
        },
        {
          "name": "config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the options for a select list issue field."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{fieldKey}/option/{optionId}/issue",
      "method": "replaceIssueFieldOption",
      "httpMethod": "delete",
      "tag": "Issue custom field options (apps)",
      "description": "Replace issue field option",
      "parameters": [
        {
          "name": "replaceWith",
          "schema": "integer",
          "description": "The ID of the option that will replace the currently selected option."
        },
        {
          "name": "jql",
          "schema": "string",
          "description": "A JQL query that specifies the issues to be updated. For example, *project=10000*."
        },
        {
          "name": "overrideScreenSecurity",
          "schema": "boolean",
          "description": "Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "fieldKey",
          "schema": "string",
          "required": true,
          "description": "The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`"
        },
        {
          "name": "optionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the option to be deselected."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{id}",
      "method": "deleteCustomField",
      "httpMethod": "delete",
      "tag": "Issue fields",
      "description": "Delete custom field",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of a custom field."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "409",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{id}/restore",
      "method": "restoreCustomField",
      "httpMethod": "post",
      "tag": "Issue fields",
      "description": "Restore custom field from trash",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of a custom field."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/field/{id}/trash",
      "method": "trashCustomField",
      "httpMethod": "post",
      "tag": "Issue fields",
      "description": "Move custom field to trash",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of a custom field."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration",
      "method": "getAllFieldConfigurations",
      "httpMethod": "get",
      "tag": "Issue field configurations",
      "description": "Get all field configurations",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "description": "If *true* returns default field configurations only."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "The query string used to match against field configuration names and descriptions."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration",
      "method": "createFieldConfiguration",
      "httpMethod": "post",
      "tag": "Issue field configurations",
      "description": "Create field configuration",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a field configuration."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration/{id}",
      "method": "deleteFieldConfiguration",
      "httpMethod": "delete",
      "tag": "Issue field configurations",
      "description": "Delete field configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration/{id}",
      "method": "updateFieldConfiguration",
      "httpMethod": "put",
      "tag": "Issue field configurations",
      "description": "Update field configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "getFieldConfigurationItems",
      "httpMethod": "get",
      "tag": "Issue field configurations",
      "description": "Get field configuration items",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfiguration/{id}/fields",
      "method": "updateFieldConfigurationItems",
      "httpMethod": "put",
      "tag": "Issue field configurations",
      "description": "Update field configuration items",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration."
        },
        {
          "name": "fieldConfigurationItems",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme",
      "method": "getAllFieldConfigurationSchemes",
      "httpMethod": "get",
      "tag": "Issue field configurations",
      "description": "Get all field configuration schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme",
      "method": "createFieldConfigurationScheme",
      "httpMethod": "post",
      "tag": "Issue field configurations",
      "description": "Create field configuration scheme",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of a field configuration scheme."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/mapping",
      "method": "getFieldConfigurationSchemeMappings",
      "httpMethod": "get",
      "tag": "Issue field configurations",
      "description": "Get field configuration issue type items",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "fieldConfigurationSchemeId",
          "schema": "array",
          "description": "The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "getFieldConfigurationSchemeProjectMapping",
      "httpMethod": "get",
      "tag": "Issue field configurations",
      "description": "Get field configuration schemes for projects",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "array",
          "required": true,
          "description": "The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/project",
      "method": "assignFieldConfigurationSchemeToProject",
      "httpMethod": "put",
      "tag": "Issue field configurations",
      "description": "Assign field configuration scheme to project",
      "parameters": [
        {
          "name": "fieldConfigurationSchemeId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "deleteFieldConfigurationScheme",
      "httpMethod": "delete",
      "tag": "Issue field configurations",
      "description": "Delete field configuration scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/{id}",
      "method": "updateFieldConfigurationScheme",
      "httpMethod": "put",
      "tag": "Issue field configurations",
      "description": "Update field configuration scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration scheme."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/{id}/mapping",
      "method": "setFieldConfigurationSchemeMapping",
      "httpMethod": "put",
      "tag": "Issue field configurations",
      "description": "Assign issue types to field configurations",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration scheme."
        },
        {
          "name": "mappings",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete",
      "method": "removeIssueTypesFromGlobalFieldConfigurationScheme",
      "httpMethod": "post",
      "tag": "Issue field configurations",
      "description": "Remove issue types from field configuration scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the field configuration scheme."
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter",
      "method": "createFilter",
      "httpMethod": "post",
      "tag": "Filters",
      "description": "Create filter",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        },
        {
          "name": "overrideSharePermissions",
          "schema": "boolean",
          "description": "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "editPermissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "favouritedCount",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "jql",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "searchUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sharePermissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharedUsers",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "subscriptions",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "viewUrl",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/defaultShareScope",
      "method": "getDefaultShareScope",
      "httpMethod": "get",
      "tag": "Filter sharing",
      "description": "Get default share scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the scope of the default sharing for new filters and dashboards."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/defaultShareScope",
      "method": "setDefaultShareScope",
      "httpMethod": "put",
      "tag": "Filter sharing",
      "description": "Set default share scope",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the scope of the default sharing for new filters and dashboards."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/favourite",
      "method": "getFavouriteFilters",
      "httpMethod": "get",
      "tag": "Filters",
      "description": "Get favorite filters",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/my",
      "method": "getMyFilters",
      "httpMethod": "get",
      "tag": "Filters",
      "description": "Get my filters",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        },
        {
          "name": "includeFavourites",
          "schema": "boolean",
          "description": "Include the user's favorite filters in the response."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/search",
      "method": "getFiltersPaginated",
      "httpMethod": "get",
      "tag": "Filters",
      "description": "Search for filters",
      "parameters": [
        {
          "name": "filterName",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with `name`."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`."
        },
        {
          "name": "owner",
          "schema": "string",
          "description": "This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`."
        },
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter."
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": "Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter name.\n *  `owner` Sorts by the ID of the filter owner.\n *  `is_shared` Sorts by whether the filter is shared."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the filter.\n *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.\n *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.\n *  `jql` Returns the JQL query that the filter uses.\n *  `owner` Returns the owner of the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL query.\n *  `sharePermissions` Returns the share permissions defined for the filter.\n *  `editPermissions` Returns the edit permissions defined for the filter.\n *  `isWritable` Returns whether the current user has permission to edit the filter.\n *  `subscriptions` Returns the users that are subscribed to the filter.\n *  `viewUrl` Returns a URL to view the filter."
        },
        {
          "name": "overrideSharePermissions",
          "schema": "boolean",
          "description": "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}",
      "method": "deleteFilter",
      "httpMethod": "delete",
      "tag": "Filters",
      "description": "Delete filter",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter to delete."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/filter/{id}",
      "method": "getFilter",
      "httpMethod": "get",
      "tag": "Filters",
      "description": "Get filter",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter to return."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        },
        {
          "name": "overrideSharePermissions",
          "schema": "boolean",
          "description": "EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}",
      "method": "updateFilter",
      "httpMethod": "put",
      "tag": "Filters",
      "description": "Update filter",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter to update."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        },
        {
          "name": "overrideSharePermissions",
          "schema": "boolean",
          "description": "EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "editPermissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "favouritedCount",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "jql",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "searchUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sharePermissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "sharedUsers",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "subscriptions",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "viewUrl",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/columns",
      "method": "resetColumns",
      "httpMethod": "delete",
      "tag": "Filters",
      "description": "Reset columns",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/filter/{id}/columns",
      "method": "getColumns",
      "httpMethod": "get",
      "tag": "Filters",
      "description": "Get columns",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/columns",
      "method": "setColumns",
      "httpMethod": "put",
      "tag": "Filters",
      "description": "Set columns",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/favourite",
      "method": "deleteFavouriteForFilter",
      "httpMethod": "delete",
      "tag": "Filters",
      "description": "Remove filter as favorite",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/favourite",
      "method": "setFavouriteForFilter",
      "httpMethod": "put",
      "tag": "Filters",
      "description": "Add filter as favorite",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/owner",
      "method": "changeFilterOwner",
      "httpMethod": "put",
      "tag": "Filters",
      "description": "Change filter owner",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter to update."
        },
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/permission",
      "method": "getSharePermissions",
      "httpMethod": "get",
      "tag": "Filter sharing",
      "description": "Get share permissions",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/permission",
      "method": "addSharePermission",
      "httpMethod": "post",
      "tag": "Filter sharing",
      "description": "Add share permission",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        },
        {
          "name": "accountId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "groupname",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectRoleId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rights",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "deleteSharePermission",
      "httpMethod": "delete",
      "tag": "Filter sharing",
      "description": "Delete share permission",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        },
        {
          "name": "permissionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the share permission."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/filter/{id}/permission/{permissionId}",
      "method": "getSharePermission",
      "httpMethod": "get",
      "tag": "Filter sharing",
      "description": "Get share permission",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the filter."
        },
        {
          "name": "permissionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the share permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a share permission for the filter."
        }
      ]
    },
    {
      "url": "/rest/api/3/group",
      "method": "removeGroup",
      "httpMethod": "delete",
      "tag": "Groups",
      "description": "Remove group",
      "parameters": [
        {
          "name": "groupname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group. This parameter cannot be used with the `groupname` parameter."
        },
        {
          "name": "swapGroup",
          "schema": "string",
          "description": "As a group's name can change, use of `swapGroupId` is recommended to identify a group.  \nThe group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter."
        },
        {
          "name": "swapGroupId",
          "schema": "string",
          "description": "The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/group",
      "method": "getGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Get group",
      "parameters": [
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group. This parameter cannot be used with the `groupName` parameter."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "List of fields to expand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/group",
      "method": "createGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Create group",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/group/bulk",
      "method": "bulkGetGroups",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Bulk get groups",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "groupId",
          "schema": "array",
          "description": "The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`."
        },
        {
          "name": "groupName",
          "schema": "array",
          "description": "The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`."
        },
        {
          "name": "accessType",
          "schema": "string",
          "description": "The access level of a group. Valid values: 'site-admin', 'admin', 'user'."
        },
        {
          "name": "applicationKey",
          "schema": "string",
          "description": "The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/group/member",
      "method": "getUsersFromGroup",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Get users from group",
      "parameters": [
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group. This parameter cannot be used with the `groupName` parameter."
        },
        {
          "name": "includeInactiveUsers",
          "schema": "boolean",
          "description": "Include inactive users."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/group/user",
      "method": "removeUserFromGroup",
      "httpMethod": "delete",
      "tag": "Groups",
      "description": "Remove user from group",
      "parameters": [
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group. This parameter cannot be used with the `groupName` parameter."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/group/user",
      "method": "addUserToGroup",
      "httpMethod": "post",
      "tag": "Groups",
      "description": "Add user to group",
      "parameters": [
        {
          "name": "groupname",
          "schema": "string",
          "description": "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group. This parameter cannot be used with the `groupName` parameter."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/groups/picker",
      "method": "findGroups",
      "httpMethod": "get",
      "tag": "Groups",
      "description": "Find groups",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get)."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "The string to find in group names."
        },
        {
          "name": "exclude",
          "schema": "array",
          "description": "As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  \nA group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter."
        },
        {
          "name": "excludeId",
          "schema": "array",
          "description": "A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`."
        },
        {
          "name": "caseInsensitive",
          "schema": "boolean",
          "description": "Whether the search for groups should be case insensitive."
        },
        {
          "name": "userName",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups."
        }
      ]
    },
    {
      "url": "/rest/api/3/groupuserpicker",
      "method": "findUsersAndGroups",
      "httpMethod": "get",
      "tag": "Group and user picker",
      "description": "Find users and groups",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "The search string."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return in each list."
        },
        {
          "name": "showAvatar",
          "schema": "boolean",
          "description": "Whether the user avatar should be returned. If an invalid value is provided, the default value is used."
        },
        {
          "name": "fieldId",
          "schema": "string",
          "description": "The custom field ID of the field this request is for."
        },
        {
          "name": "projectId",
          "schema": "array",
          "description": "The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present."
        },
        {
          "name": "issueTypeId",
          "schema": "array",
          "description": "The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present."
        },
        {
          "name": "avatarSize",
          "schema": "string",
          "description": "The size of the avatar to return. If an invalid value is provided, the default value is used."
        },
        {
          "name": "caseInsensitive",
          "schema": "boolean",
          "description": "Whether the search for groups should be case insensitive."
        },
        {
          "name": "excludeConnectAddons",
          "schema": "boolean",
          "description": "Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of users and groups found in a search."
        }
      ]
    },
    {
      "url": "/rest/api/3/instance/license",
      "method": "getLicense",
      "httpMethod": "get",
      "tag": "Instance information",
      "description": "Get license",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a license for the Jira instance."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue",
      "method": "createIssue",
      "httpMethod": "post",
      "tag": "Issues",
      "description": "Create issue",
      "parameters": [
        {
          "name": "updateHistory",
          "schema": "boolean",
          "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen."
        },
        {
          "name": "fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "historyMetadata",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "transition",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "update",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a created issue or subtask."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/bulk",
      "method": "createIssues",
      "httpMethod": "post",
      "tag": "Issues",
      "description": "Bulk create issue",
      "parameters": [
        {
          "name": "issueUpdates",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about the issues created and the errors for requests that failed."
        },
        {
          "statusCode": "400",
          "description": "Details about the issues created and the errors for requests that failed."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/createmeta",
      "method": "getCreateIssueMeta",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get create issue metadata",
      "parameters": [
        {
          "name": "projectIds",
          "schema": "array",
          "description": "List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`."
        },
        {
          "name": "projectKeys",
          "schema": "array",
          "description": "List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`."
        },
        {
          "name": "issuetypeIds",
          "schema": "array",
          "description": "List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`."
        },
        {
          "name": "issuetypeNames",
          "schema": "array",
          "description": "List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The wrapper for the issue creation metadata for a list of projects."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/picker",
      "method": "getIssuePickerResource",
      "httpMethod": "get",
      "tag": "Issue search",
      "description": "Get issue picker suggestions",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A string to match against text fields in the issue such as title, description, or comments."
        },
        {
          "name": "currentJQL",
          "schema": "string",
          "description": "A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead."
        },
        {
          "name": "currentIssueKey",
          "schema": "string",
          "description": "The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query."
        },
        {
          "name": "currentProjectId",
          "schema": "string",
          "description": "The ID of a project that suggested issues must belong to."
        },
        {
          "name": "showSubTasks",
          "schema": "boolean",
          "description": "Indicate whether to include subtasks in the suggestions list."
        },
        {
          "name": "showSubTaskParent",
          "schema": "boolean",
          "description": "When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of issues suggested for use in auto-completion."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/properties",
      "method": "bulkSetIssuesPropertiesList",
      "httpMethod": "post",
      "tag": "Issue properties",
      "description": "Bulk set issues properties by list",
      "parameters": [
        {
          "name": "entitiesIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/properties/multi",
      "method": "bulkSetIssuePropertiesByIssue",
      "httpMethod": "post",
      "tag": "Issue properties",
      "description": "Bulk set issue properties by issue",
      "parameters": [
        {
          "name": "issues",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "bulkDeleteIssueProperty",
      "httpMethod": "delete",
      "tag": "Issue properties",
      "description": "Bulk delete issue property",
      "parameters": [
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        },
        {
          "name": "currentValue",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "entityIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/properties/{propertyKey}",
      "method": "bulkSetIssueProperty",
      "httpMethod": "put",
      "tag": "Issue properties",
      "description": "Bulk set issue property",
      "parameters": [
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property. The maximum length is 255 characters."
        },
        {
          "name": "expression",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filter",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "value",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/watching",
      "method": "getIsWatchingIssueBulk",
      "httpMethod": "post",
      "tag": "Issue watchers",
      "description": "Get is watching issue bulk",
      "parameters": [
        {
          "name": "issueIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A container for the watch status of a list of issues."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "deleteIssue",
      "httpMethod": "delete",
      "tag": "Issues",
      "description": "Delete issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "deleteSubtasks",
          "schema": "string",
          "description": "Whether the issue's subtasks are deleted when the issue is deleted."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "getIssue",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields."
        },
        {
          "name": "fieldsByKeys",
          "schema": "boolean",
          "description": "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`."
        },
        {
          "name": "updateHistory",
          "schema": "boolean",
          "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about an issue."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}",
      "method": "editIssue",
      "httpMethod": "put",
      "tag": "Issues",
      "description": "Edit issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "notifyUsers",
          "schema": "boolean",
          "description": "Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored."
        },
        {
          "name": "overrideScreenSecurity",
          "schema": "boolean",
          "description": "Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "historyMetadata",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "transition",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "update",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/assignee",
      "method": "assignIssue",
      "httpMethod": "put",
      "tag": "Issues",
      "description": "Assign issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue to be assigned."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "accountType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "applicationRoles",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "avatarUrls",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "emailAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/attachments",
      "method": "addAttachment",
      "httpMethod": "post",
      "tag": "Issue attachments",
      "description": "Add attachment",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue that attachments are added to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/changelog",
      "method": "getChangeLogs",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get changelogs",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/changelog/list",
      "method": "getChangeLogsByIds",
      "httpMethod": "post",
      "tag": "Issues",
      "description": "Get changelogs by IDs",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "changelogIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of changelogs."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/comment",
      "method": "getComments",
      "httpMethod": "get",
      "tag": "Issue comments",
      "description": "Get comments",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of comments."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/comment",
      "method": "addComment",
      "httpMethod": "post",
      "tag": "Issue comments",
      "description": "Add comment",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML."
        },
        {
          "name": "author",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "body",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsdAuthorCanSeeRequest",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "jsdPublic",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "renderedBody",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateAuthor",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A comment."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
      "method": "deleteComment",
      "httpMethod": "delete",
      "tag": "Issue comments",
      "description": "Delete comment",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
      "method": "getComment",
      "httpMethod": "get",
      "tag": "Issue comments",
      "description": "Get comment",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A comment."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
      "method": "updateComment",
      "httpMethod": "put",
      "tag": "Issue comments",
      "description": "Update comment",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "notifyUsers",
          "schema": "boolean",
          "description": "Whether users are notified when a comment is updated."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML."
        },
        {
          "name": "author",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "body",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "jsdAuthorCanSeeRequest",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "jsdPublic",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "renderedBody",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateAuthor",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A comment."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/editmeta",
      "method": "getEditIssueMeta",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get edit issue metadata",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "overrideScreenSecurity",
          "schema": "boolean",
          "description": "Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of editable field details."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/notify",
      "method": "notify",
      "httpMethod": "post",
      "tag": "Issues",
      "description": "Send notification for issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "ID or key of the issue that the notification is sent for."
        },
        {
          "name": "htmlBody",
          "schema": "string",
          "description": ""
        },
        {
          "name": "restrict",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "subject",
          "schema": "string",
          "description": ""
        },
        {
          "name": "textBody",
          "schema": "string",
          "description": ""
        },
        {
          "name": "to",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/properties",
      "method": "getIssuePropertyKeys",
      "httpMethod": "get",
      "tag": "Issue properties",
      "description": "Get issue property keys",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The key or ID of the issue."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "deleteIssueProperty",
      "httpMethod": "delete",
      "tag": "Issue properties",
      "description": "Delete issue property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The key or ID of the issue."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "getIssueProperty",
      "httpMethod": "get",
      "tag": "Issue properties",
      "description": "Get issue property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The key or ID of the issue."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
      "method": "setIssueProperty",
      "httpMethod": "put",
      "tag": "Issue properties",
      "description": "Set issue property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the issue property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink",
      "method": "deleteRemoteIssueLinkByGlobalId",
      "httpMethod": "delete",
      "tag": "Issue remote links",
      "description": "Delete remote issue link by global ID",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "globalId",
          "schema": "string",
          "required": true,
          "description": "The global ID of a remote issue link."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink",
      "method": "getRemoteIssueLinks",
      "httpMethod": "get",
      "tag": "Issue remote links",
      "description": "Get remote issue links",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "globalId",
          "schema": "string",
          "description": "The global ID of the remote issue link."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an issue remote link."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink",
      "method": "createOrUpdateRemoteIssueLink",
      "httpMethod": "post",
      "tag": "Issue remote links",
      "description": "Create or update remote issue link",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "application",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "globalId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "object",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "relationship",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of the identifiers for a created or updated remote issue link."
        },
        {
          "statusCode": "201",
          "description": "Details of the identifiers for a created or updated remote issue link."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
      "method": "deleteRemoteIssueLinkById",
      "httpMethod": "delete",
      "tag": "Issue remote links",
      "description": "Delete remote issue link by ID",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "linkId",
          "schema": "string",
          "required": true,
          "description": "The ID of a remote issue link."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
      "method": "getRemoteIssueLinkById",
      "httpMethod": "get",
      "tag": "Issue remote links",
      "description": "Get remote issue link by ID",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "linkId",
          "schema": "string",
          "required": true,
          "description": "The ID of the remote issue link."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an issue remote link."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
      "method": "updateRemoteIssueLink",
      "httpMethod": "put",
      "tag": "Issue remote links",
      "description": "Update remote issue link by ID",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "linkId",
          "schema": "string",
          "required": true,
          "description": "The ID of the remote issue link."
        },
        {
          "name": "application",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "globalId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "object",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "relationship",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "getTransitions",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get transitions",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post)."
        },
        {
          "name": "transitionId",
          "schema": "string",
          "description": "The ID of the transition."
        },
        {
          "name": "skipRemoteOnlyCondition",
          "schema": "boolean",
          "description": "Whether transitions with the condition *Hide From User Condition* are included in the response."
        },
        {
          "name": "includeUnavailableTransitions",
          "schema": "boolean",
          "description": "Whether details of transitions that fail a condition are included in the response"
        },
        {
          "name": "sortByOpsBarAndStatus",
          "schema": "boolean",
          "description": "Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of issue transitions."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/transitions",
      "method": "doTransition",
      "httpMethod": "post",
      "tag": "Issues",
      "description": "Transition issue",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "fields",
          "schema": "object",
          "description": ""
        },
        {
          "name": "historyMetadata",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "transition",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "update",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/votes",
      "method": "removeVote",
      "httpMethod": "delete",
      "tag": "Issue votes",
      "description": "Delete vote",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/votes",
      "method": "getVotes",
      "httpMethod": "get",
      "tag": "Issue votes",
      "description": "Get votes",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The details of votes on an issue."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/votes",
      "method": "addVote",
      "httpMethod": "post",
      "tag": "Issue votes",
      "description": "Add vote",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "removeWatcher",
      "httpMethod": "delete",
      "tag": "Issue watchers",
      "description": "Delete watcher",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "getIssueWatchers",
      "httpMethod": "get",
      "tag": "Issue watchers",
      "description": "Get issue watchers",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The details of watchers on an issue."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/watchers",
      "method": "addWatcher",
      "httpMethod": "post",
      "tag": "Issue watchers",
      "description": "Add watcher",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog",
      "method": "getIssueWorklog",
      "httpMethod": "get",
      "tag": "Issue worklogs",
      "description": "Get issue worklogs",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "startedAfter",
          "schema": "integer",
          "description": "The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned."
        },
        {
          "name": "startedBefore",
          "schema": "integer",
          "description": "The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Paginated list of worklog details"
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog",
      "method": "addWorklog",
      "httpMethod": "post",
      "tag": "Issue worklogs",
      "description": "Add worklog",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key the issue."
        },
        {
          "name": "notifyUsers",
          "schema": "boolean",
          "description": "Whether users watching the issue are notified by email."
        },
        {
          "name": "adjustEstimate",
          "schema": "string",
          "description": "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog."
        },
        {
          "name": "newEstimate",
          "schema": "string",
          "description": "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`."
        },
        {
          "name": "reduceBy",
          "schema": "string",
          "description": "The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag."
        },
        {
          "name": "author",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issueId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "started",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeSpent",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeSpentSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "updateAuthor",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of a worklog."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
      "method": "deleteWorklog",
      "httpMethod": "delete",
      "tag": "Issue worklogs",
      "description": "Delete worklog",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "notifyUsers",
          "schema": "boolean",
          "description": "Whether users watching the issue are notified by email."
        },
        {
          "name": "adjustEstimate",
          "schema": "string",
          "description": "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog."
        },
        {
          "name": "newEstimate",
          "schema": "string",
          "description": "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`."
        },
        {
          "name": "increaseBy",
          "schema": "string",
          "description": "The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
      "method": "getWorklog",
      "httpMethod": "get",
      "tag": "Issue worklogs",
      "description": "Get worklog",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts\n\n`properties`, which returns worklog properties."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a worklog."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
      "method": "updateWorklog",
      "httpMethod": "put",
      "tag": "Issue worklogs",
      "description": "Update worklog",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key the issue."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "notifyUsers",
          "schema": "boolean",
          "description": "Whether users watching the issue are notified by email."
        },
        {
          "name": "adjustEstimate",
          "schema": "string",
          "description": "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`."
        },
        {
          "name": "newEstimate",
          "schema": "string",
          "description": "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties."
        },
        {
          "name": "overrideEditableFlag",
          "schema": "boolean",
          "description": "Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag."
        },
        {
          "name": "author",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "comment",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issueId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "started",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeSpent",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeSpentSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "updateAuthor",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a worklog."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties",
      "method": "getWorklogPropertyKeys",
      "httpMethod": "get",
      "tag": "Issue worklog properties",
      "description": "Get worklog property keys",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "worklogId",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
      "method": "deleteWorklogProperty",
      "httpMethod": "delete",
      "tag": "Issue worklog properties",
      "description": "Delete worklog property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "worklogId",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
      "method": "getWorklogProperty",
      "httpMethod": "get",
      "tag": "Issue worklog properties",
      "description": "Get worklog property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "worklogId",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
      "method": "setWorklogProperty",
      "httpMethod": "put",
      "tag": "Issue worklog properties",
      "description": "Set worklog property",
      "parameters": [
        {
          "name": "issueIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the issue."
        },
        {
          "name": "worklogId",
          "schema": "string",
          "required": true,
          "description": "The ID of the worklog."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the issue property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLink",
      "method": "linkIssues",
      "httpMethod": "post",
      "tag": "Issue links",
      "description": "Create issue link",
      "parameters": [
        {
          "name": "comment",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "inwardIssue",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "outwardIssue",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLink/{linkId}",
      "method": "deleteIssueLink",
      "httpMethod": "delete",
      "tag": "Issue links",
      "description": "Delete issue link",
      "parameters": [
        {
          "name": "linkId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue link."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issueLink/{linkId}",
      "method": "getIssueLink",
      "httpMethod": "get",
      "tag": "Issue links",
      "description": "Get issue link",
      "parameters": [
        {
          "name": "linkId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue link."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a link between issues."
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLinkType",
      "method": "getIssueLinkTypes",
      "httpMethod": "get",
      "tag": "Issue link types",
      "description": "Get issue link types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of issue link type beans."
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLinkType",
      "method": "createIssueLinkType",
      "httpMethod": "post",
      "tag": "Issue link types",
      "description": "Create issue link type",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "inward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "outward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "This object is used as follows:\n\n *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).\n *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types."
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "deleteIssueLinkType",
      "httpMethod": "delete",
      "tag": "Issue link types",
      "description": "Delete issue link type",
      "parameters": [
        {
          "name": "issueLinkTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue link type."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "getIssueLinkType",
      "httpMethod": "get",
      "tag": "Issue link types",
      "description": "Get issue link type",
      "parameters": [
        {
          "name": "issueLinkTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue link type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This object is used as follows:\n\n *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).\n *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types."
        }
      ]
    },
    {
      "url": "/rest/api/3/issueLinkType/{issueLinkTypeId}",
      "method": "updateIssueLinkType",
      "httpMethod": "put",
      "tag": "Issue link types",
      "description": "Update issue link type",
      "parameters": [
        {
          "name": "issueLinkTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue link type."
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "inward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "outward",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "This object is used as follows:\n\n *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).\n *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes",
      "method": "getIssueSecuritySchemes",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Get issue security schemes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of security schemes."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes",
      "method": "createIssueSecurityScheme",
      "httpMethod": "post",
      "tag": "Issue security schemes",
      "description": "Create issue security scheme",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "levels",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of the issue security scheme."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/level",
      "method": "getSecurityLevels",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Get issue security levels",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`."
        },
        {
          "name": "schemeId",
          "schema": "array",
          "description": "The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`."
        },
        {
          "name": "onlyDefault",
          "schema": "boolean",
          "description": "When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/level/default",
      "method": "setDefaultLevels",
      "httpMethod": "put",
      "tag": "Issue security schemes",
      "description": "Set default issue security levels",
      "parameters": [
        {
          "name": "defaultValues",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/level/member",
      "method": "getSecurityLevelMembers",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Get issue security level members",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`."
        },
        {
          "name": "schemeId",
          "schema": "array",
          "description": "The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`."
        },
        {
          "name": "levelId",
          "schema": "array",
          "description": "The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about the custom field granted the permission\n *  `group` Returns information about the group that is granted the permission\n *  `projectRole` Returns information about the project role granted the permission\n *  `user` Returns information about the user who is granted the permission"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/project",
      "method": "searchProjectsUsingSecuritySchemes",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Get projects using issue security schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "issueSecuritySchemeId",
          "schema": "array",
          "description": "The list of security scheme IDs to be filtered out."
        },
        {
          "name": "projectId",
          "schema": "array",
          "description": "The list of project IDs to be filtered out."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/search",
      "method": "searchSecuritySchemes",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Search issue security schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`."
        },
        {
          "name": "projectId",
          "schema": "array",
          "description": "The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "getIssueSecurityScheme",
      "httpMethod": "get",
      "tag": "Issue security schemes",
      "description": "Get issue security scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a security scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{id}",
      "method": "updateIssueSecurityScheme",
      "httpMethod": "put",
      "tag": "Issue security schemes",
      "description": "Update issue security scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members",
      "method": "getIssueSecurityLevelMembers",
      "httpMethod": "get",
      "tag": "Issue security level",
      "description": "Get issue security level members",
      "parameters": [
        {
          "name": "issueSecuritySchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "issueSecurityLevelId",
          "schema": "array",
          "description": "The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}",
      "method": "deleteSecurityScheme",
      "httpMethod": "delete",
      "tag": "Issue security schemes",
      "description": "Delete issue security scheme",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}/level",
      "method": "addSecurityLevel",
      "httpMethod": "put",
      "tag": "Issue security schemes",
      "description": "Add issue security levels",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        },
        {
          "name": "levels",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "removeLevel",
      "httpMethod": "delete",
      "tag": "Issue security schemes",
      "description": "Remove issue security level",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        },
        {
          "name": "levelId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level to remove."
        },
        {
          "name": "replaceWith",
          "schema": "string",
          "description": "The ID of the issue security level that will replace the currently selected level."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "409",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}",
      "method": "updateSecurityLevel",
      "httpMethod": "put",
      "tag": "Issue security schemes",
      "description": "Update issue security level",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme level belongs to."
        },
        {
          "name": "levelId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level to update."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member",
      "method": "addSecurityLevelMembers",
      "httpMethod": "put",
      "tag": "Issue security schemes",
      "description": "Add issue security level members",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        },
        {
          "name": "levelId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level."
        },
        {
          "name": "members",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}",
      "method": "removeMemberFromSecurityLevel",
      "httpMethod": "delete",
      "tag": "Issue security schemes",
      "description": "Remove member from issue security level",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security scheme."
        },
        {
          "name": "levelId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level."
        },
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level member to be removed."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype",
      "method": "getIssueAllTypes",
      "httpMethod": "get",
      "tag": "Issue types",
      "description": "Get all issue types for user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype",
      "method": "createIssueType",
      "httpMethod": "post",
      "tag": "Issue types",
      "description": "Create issue type",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hierarchyLevel",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about an issue type."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/project",
      "method": "getIssueTypesForProject",
      "httpMethod": "get",
      "tag": "Issue types",
      "description": "Get issue types for project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "level",
          "schema": "integer",
          "description": "The level of the issue type to filter by. Use:\n\n *  `-1` for Subtask.\n *  `0` for Base.\n *  `1` for Epic."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{id}",
      "method": "deleteIssueType",
      "httpMethod": "delete",
      "tag": "Issue types",
      "description": "Delete issue type",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "alternativeIssueTypeId",
          "schema": "string",
          "description": "The ID of the replacement issue type."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issuetype/{id}",
      "method": "getIssueType",
      "httpMethod": "get",
      "tag": "Issue types",
      "description": "Get issue type",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about an issue type."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{id}",
      "method": "updateIssueType",
      "httpMethod": "put",
      "tag": "Issue types",
      "description": "Update issue type",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "avatarId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about an issue type."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{id}/alternatives",
      "method": "getAlternativeIssueTypes",
      "httpMethod": "get",
      "tag": "Issue types",
      "description": "Get alternative issue types",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{id}/avatar2",
      "method": "createIssueTypeAvatar",
      "httpMethod": "post",
      "tag": "Issue types",
      "description": "Load issue type avatar",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "x",
          "schema": "integer",
          "description": "The X coordinate of the top-left corner of the crop region."
        },
        {
          "name": "y",
          "schema": "integer",
          "description": "The Y coordinate of the top-left corner of the crop region."
        },
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": "The length of each side of the crop region."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of an avatar."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{issueTypeId}/properties",
      "method": "getIssueTypePropertyKeys",
      "httpMethod": "get",
      "tag": "Issue type properties",
      "description": "Get issue type property keys",
      "parameters": [
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "deleteIssueTypeProperty",
      "httpMethod": "delete",
      "tag": "Issue type properties",
      "description": "Delete issue type property",
      "parameters": [
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "getIssueTypeProperty",
      "httpMethod": "get",
      "tag": "Issue type properties",
      "description": "Get issue type property",
      "parameters": [
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
      "method": "setIssueTypeProperty",
      "httpMethod": "put",
      "tag": "Issue type properties",
      "description": "Set issue type property",
      "parameters": [
        {
          "name": "issueTypeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the issue type property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme",
      "method": "getAllIssueTypeSchemes",
      "httpMethod": "get",
      "tag": "Issue type schemes",
      "description": "Get all issue type schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type scheme name.\n *  `id` Sorts by issue type scheme ID."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.\n *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have."
        },
        {
          "name": "queryString",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with issue type scheme name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme",
      "method": "createIssueTypeScheme",
      "httpMethod": "post",
      "tag": "Issue type schemes",
      "description": "Create issue type scheme",
      "parameters": [
        {
          "name": "defaultIssueTypeId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of an issue type scheme."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/mapping",
      "method": "getIssueTypeSchemesMapping",
      "httpMethod": "get",
      "tag": "Issue type schemes",
      "description": "Get issue type scheme items",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "issueTypeSchemeId",
          "schema": "array",
          "description": "The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/project",
      "method": "getIssueTypeSchemeForProjects",
      "httpMethod": "get",
      "tag": "Issue type schemes",
      "description": "Get issue type schemes for projects",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "array",
          "required": true,
          "description": "The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/project",
      "method": "assignIssueTypeSchemeToProject",
      "httpMethod": "put",
      "tag": "Issue type schemes",
      "description": "Assign issue type scheme to project",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "deleteIssueTypeScheme",
      "httpMethod": "delete",
      "tag": "Issue type schemes",
      "description": "Delete issue type scheme",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
      "method": "updateIssueTypeScheme",
      "httpMethod": "put",
      "tag": "Issue type schemes",
      "description": "Update issue type scheme",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type scheme."
        },
        {
          "name": "defaultIssueTypeId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
      "method": "addIssueTypesToIssueTypeScheme",
      "httpMethod": "put",
      "tag": "Issue type schemes",
      "description": "Add issue types to issue type scheme",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type scheme."
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
      "method": "reorderIssueTypesInIssueTypeScheme",
      "httpMethod": "put",
      "tag": "Issue type schemes",
      "description": "Change order of issue types",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type scheme."
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
      "method": "removeIssueTypeFromIssueTypeScheme",
      "httpMethod": "delete",
      "tag": "Issue type schemes",
      "description": "Remove issue type from issue type scheme",
      "parameters": [
        {
          "name": "issueTypeSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type scheme."
        },
        {
          "name": "issueTypeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme",
      "method": "getIssueTypeScreenSchemes",
      "httpMethod": "get",
      "tag": "Issue type screen schemes",
      "description": "Get issue type screen schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        },
        {
          "name": "queryString",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with issue type screen scheme name."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type screen scheme name.\n *  `id` Sorts by issue type screen scheme ID."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme",
      "method": "createIssueTypeScreenScheme",
      "httpMethod": "post",
      "tag": "Issue type screen schemes",
      "description": "Create issue type screen scheme",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeMappings",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of an issue type screen scheme."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/mapping",
      "method": "getIssueTypeScreenSchemeMappings",
      "httpMethod": "get",
      "tag": "Issue type screen schemes",
      "description": "Get issue type screen scheme items",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "array",
          "description": "The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/project",
      "method": "getIssueTypeScreenSchemeProjectAssociations",
      "httpMethod": "get",
      "tag": "Issue type screen schemes",
      "description": "Get issue type screen schemes for projects",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "projectId",
          "schema": "array",
          "required": true,
          "description": "The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/project",
      "method": "assignIssueTypeScreenSchemeToProject",
      "httpMethod": "put",
      "tag": "Issue type screen schemes",
      "description": "Assign issue type screen scheme to project",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "deleteIssueTypeScreenScheme",
      "httpMethod": "delete",
      "tag": "Issue type screen schemes",
      "description": "Delete issue type screen scheme",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
      "method": "updateIssueTypeScreenScheme",
      "httpMethod": "put",
      "tag": "Issue type screen schemes",
      "description": "Update issue type screen scheme",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
      "method": "appendMappingsForIssueTypeScreenScheme",
      "httpMethod": "put",
      "tag": "Issue type screen schemes",
      "description": "Append mappings to issue type screen scheme",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        },
        {
          "name": "issueTypeMappings",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
      "method": "updateDefaultScreenScheme",
      "httpMethod": "put",
      "tag": "Issue type screen schemes",
      "description": "Update issue type screen scheme default screen scheme",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        },
        {
          "name": "screenSchemeId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
      "method": "removeMappingsFromIssueTypeScreenScheme",
      "httpMethod": "post",
      "tag": "Issue type screen schemes",
      "description": "Remove mappings from issue type screen scheme",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        },
        {
          "name": "issueTypeIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
      "method": "getProjectsForIssueTypeScreenScheme",
      "httpMethod": "get",
      "tag": "Issue type screen schemes",
      "description": "Get issue type screen scheme projects",
      "parameters": [
        {
          "name": "issueTypeScreenSchemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the issue type screen scheme."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "query",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/autocompletedata",
      "method": "getAutoComplete",
      "httpMethod": "get",
      "tag": "JQL",
      "description": "Get field reference data (GET)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Lists of JQL reference data."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/autocompletedata",
      "method": "getAutoCompletePost",
      "httpMethod": "post",
      "tag": "JQL",
      "description": "Get field reference data (POST)",
      "parameters": [
        {
          "name": "includeCollapsedFields",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "projectIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Lists of JQL reference data."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/autocompletedata/suggestions",
      "method": "getFieldAutoCompleteForQueryString",
      "httpMethod": "get",
      "tag": "JQL",
      "description": "Get field auto complete suggestions",
      "parameters": [
        {
          "name": "fieldName",
          "schema": "string",
          "description": "The name of the field."
        },
        {
          "name": "fieldValue",
          "schema": "string",
          "description": "The partial field item name entered by the user."
        },
        {
          "name": "predicateName",
          "schema": "string",
          "description": "The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*."
        },
        {
          "name": "predicateValue",
          "schema": "string",
          "description": "The partial predicate item name entered by the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The results from a JQL query."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/function/computation",
      "method": "getPrecomputations",
      "httpMethod": "get",
      "tag": "JQL functions (apps)",
      "description": "Get precomputations (apps)",
      "parameters": [
        {
          "name": "functionKey",
          "schema": "array",
          "description": "The function key in format:\n\n *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`.\n *  Connect: `[App key]__[Module key]`."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "Not supported yet."
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "Not supported yet."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/function/computation",
      "method": "updatePrecomputations",
      "httpMethod": "post",
      "tag": "JQL functions (apps)",
      "description": "Update precomputations (apps)",
      "parameters": [
        {
          "name": "values",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/match",
      "method": "matchIssues",
      "httpMethod": "post",
      "tag": "Issue search",
      "description": "Check issues against JQL",
      "parameters": [
        {
          "name": "issueIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "jqls",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of matched issues or errors for each JQL query, in the order the JQL queries were passed."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/parse",
      "method": "parseJqlQueries",
      "httpMethod": "post",
      "tag": "JQL",
      "description": "Parse JQL query",
      "parameters": [
        {
          "name": "validation",
          "schema": "string",
          "description": "How to validate the JQL query and treat the validation results. Validation options include:\n\n *  `strict` Returns all errors. If validation fails, the query structure is not returned.\n *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.\n *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned."
        },
        {
          "name": "queries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of parsed JQL queries."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/pdcleaner",
      "method": "migrateQueries",
      "httpMethod": "post",
      "tag": "JQL",
      "description": "Convert user identifiers to account IDs in JQL queries",
      "parameters": [
        {
          "name": "queryStrings",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The converted JQL queries."
        }
      ]
    },
    {
      "url": "/rest/api/3/jql/sanitize",
      "method": "sanitiseJqlQueries",
      "httpMethod": "post",
      "tag": "JQL",
      "description": "Sanitize JQL queries",
      "parameters": [
        {
          "name": "queries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The sanitized JQL queries for the given account IDs."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/label",
      "method": "getAllLabels",
      "httpMethod": "get",
      "tag": "Labels",
      "description": "Get all labels",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/license/approximateLicenseCount",
      "method": "getApproximateLicenseCount",
      "httpMethod": "get",
      "tag": "License metrics",
      "description": "Get approximate license count",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A license metric"
        }
      ]
    },
    {
      "url": "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}",
      "method": "getApproximateApplicationLicenseCount",
      "httpMethod": "get",
      "tag": "License metrics",
      "description": "Get approximate application license count",
      "parameters": [
        {
          "name": "applicationKey",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A license metric"
        }
      ]
    },
    {
      "url": "/rest/api/3/mypermissions",
      "method": "getMyPermissions",
      "httpMethod": "get",
      "tag": "Permissions",
      "description": "Get my permissions",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "description": "The key of project. Ignored if `projectId` is provided."
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": "The ID of project."
        },
        {
          "name": "issueKey",
          "schema": "string",
          "description": "The key of the issue. Ignored if `issueId` is provided."
        },
        {
          "name": "issueId",
          "schema": "string",
          "description": "The ID of the issue."
        },
        {
          "name": "permissions",
          "schema": "string",
          "description": "A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get)."
        },
        {
          "name": "projectUuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectConfigurationUuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "commentId",
          "schema": "string",
          "description": "The ID of the comment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about permissions."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/mypreferences",
      "method": "removePreference",
      "httpMethod": "delete",
      "tag": "Myself",
      "description": "Delete preference",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the preference."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/mypreferences",
      "method": "getPreference",
      "httpMethod": "get",
      "tag": "Myself",
      "description": "Get preference",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the preference."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/mypreferences",
      "method": "setPreference",
      "httpMethod": "put",
      "tag": "Myself",
      "description": "Set preference",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the preference. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/mypreferences/locale",
      "method": "deleteLocale",
      "httpMethod": "delete",
      "tag": "Myself",
      "description": "Delete locale",
      "parameters": [],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/mypreferences/locale",
      "method": "getLocale",
      "httpMethod": "get",
      "tag": "Myself",
      "description": "Get locale",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a locale."
        }
      ]
    },
    {
      "url": "/rest/api/3/mypreferences/locale",
      "method": "setLocale",
      "httpMethod": "put",
      "tag": "Myself",
      "description": "Set locale",
      "parameters": [
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/myself",
      "method": "getCurrentUser",
      "httpMethod": "get",
      "tag": "Myself",
      "description": "Get current user",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` Returns all groups, including nested groups, the user belongs to.\n *  `applicationRoles` Returns the application roles the user is assigned to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:\n\n *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).\n *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.\n *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme",
      "method": "getNotificationSchemes",
      "httpMethod": "get",
      "tag": "Issue notification schemes",
      "description": "Get notification schemes paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of notification schemes IDs to be filtered by"
        },
        {
          "name": "projectId",
          "schema": "array",
          "description": "The list of projects IDs to be filtered by"
        },
        {
          "name": "onlyDefault",
          "schema": "boolean",
          "description": "When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme",
      "method": "createNotificationScheme",
      "httpMethod": "post",
      "tag": "Issue notification schemes",
      "description": "Create notification scheme",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notificationSchemeEvents",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of a notification scheme."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/project",
      "method": "getNotificationSchemeToProjectMappings",
      "httpMethod": "get",
      "tag": "Issue notification schemes",
      "description": "Get projects using notification schemes paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "notificationSchemeId",
          "schema": "array",
          "description": "The list of notifications scheme IDs to be filtered out"
        },
        {
          "name": "projectId",
          "schema": "array",
          "description": "The list of project IDs to be filtered out"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/{id}",
      "method": "getNotificationScheme",
      "httpMethod": "get",
      "tag": "Issue notification schemes",
      "description": "Get notification scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a notification scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/{id}",
      "method": "updateNotificationScheme",
      "httpMethod": "put",
      "tag": "Issue notification schemes",
      "description": "Update notification scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the notification scheme."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/{id}/notification",
      "method": "addNotifications",
      "httpMethod": "put",
      "tag": "Issue notification schemes",
      "description": "Add notifications to notification scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the notification scheme."
        },
        {
          "name": "notificationSchemeEvents",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/{notificationSchemeId}",
      "method": "deleteNotificationScheme",
      "httpMethod": "delete",
      "tag": "Issue notification schemes",
      "description": "Delete notification scheme",
      "parameters": [
        {
          "name": "notificationSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the notification scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}",
      "method": "removeNotificationFromNotificationScheme",
      "httpMethod": "delete",
      "tag": "Issue notification schemes",
      "description": "Remove notification from notification scheme",
      "parameters": [
        {
          "name": "notificationSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the notification scheme."
        },
        {
          "name": "notificationId",
          "schema": "string",
          "required": true,
          "description": "The ID of the notification."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissions",
      "method": "getAllPermissions",
      "httpMethod": "get",
      "tag": "Permissions",
      "description": "Get all permissions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about permissions."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissions/check",
      "method": "getBulkPermissions",
      "httpMethod": "post",
      "tag": "Permissions",
      "description": "Get bulk permissions",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "globalPermissions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectPermissions",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of global and project permissions granted to the user."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissions/project",
      "method": "getPermittedProjects",
      "httpMethod": "post",
      "tag": "Permissions",
      "description": "Get permitted projects",
      "parameters": [
        {
          "name": "permissions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of projects in which a user is granted permissions."
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme",
      "method": "getAllPermissionSchemes",
      "httpMethod": "get",
      "tag": "Permission schemes",
      "description": "Get all permission schemes",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of all permission schemes."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme",
      "method": "createPermissionScheme",
      "httpMethod": "post",
      "tag": "Permission schemes",
      "description": "Create permission scheme",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "permissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of a permission scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "deletePermissionScheme",
      "httpMethod": "delete",
      "tag": "Permission schemes",
      "description": "Delete permission scheme",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme being deleted."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "getPermissionScheme",
      "httpMethod": "get",
      "tag": "Permission schemes",
      "description": "Get permission scheme",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme to return."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a permission scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}",
      "method": "updatePermissionScheme",
      "httpMethod": "put",
      "tag": "Permission schemes",
      "description": "Update permission scheme",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme to update."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "permissions",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "undefined",
          "required": false,
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a permission scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "getPermissionSchemeGrants",
      "httpMethod": "get",
      "tag": "Permission schemes",
      "description": "Get permission scheme grants",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of permission grants."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}/permission",
      "method": "createPermissionGrant",
      "httpMethod": "post",
      "tag": "Permission schemes",
      "description": "Create permission grant",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme in which to create a new permission grant."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information."
        },
        {
          "name": "holder",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "permission",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a permission granted to a user or group."
        }
      ]
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "deletePermissionSchemeEntity",
      "httpMethod": "delete",
      "tag": "Permission schemes",
      "description": "Delete permission scheme grant",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme to delete the permission grant from."
        },
        {
          "name": "permissionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission grant to delete."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
      "method": "getPermissionSchemeGrant",
      "httpMethod": "get",
      "tag": "Permission schemes",
      "description": "Get permission scheme grant",
      "parameters": [
        {
          "name": "schemeId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission scheme."
        },
        {
          "name": "permissionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the permission grant."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a permission granted to a user or group."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority",
      "method": "getPriorities",
      "httpMethod": "get",
      "tag": "Issue priorities",
      "description": "Get priorities",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/priority",
      "method": "createPriority",
      "httpMethod": "post",
      "tag": "Issue priorities",
      "description": "Create priority",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "iconUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "statusColor",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of an issue priority."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/default",
      "method": "setDefaultPriority",
      "httpMethod": "put",
      "tag": "Issue priorities",
      "description": "Set default priority",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/move",
      "method": "movePriorities",
      "httpMethod": "put",
      "tag": "Issue priorities",
      "description": "Move priorities",
      "parameters": [
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/search",
      "method": "searchPriorities",
      "httpMethod": "get",
      "tag": "Issue priorities",
      "description": "Search priorities",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`."
        },
        {
          "name": "onlyDefault",
          "schema": "boolean",
          "description": "Whether only the default priority is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/{id}",
      "method": "deletePriority",
      "httpMethod": "delete",
      "tag": "Issue priorities",
      "description": "Delete priority",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue priority."
        },
        {
          "name": "replaceWith",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue priority that will replace the currently selected resolution."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "409",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/{id}",
      "method": "getPriority",
      "httpMethod": "get",
      "tag": "Issue priorities",
      "description": "Get priority",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue priority."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An issue priority."
        }
      ]
    },
    {
      "url": "/rest/api/3/priority/{id}",
      "method": "updatePriority",
      "httpMethod": "put",
      "tag": "Issue priorities",
      "description": "Update priority",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue priority."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "iconUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "statusColor",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/project",
      "method": "getAllProjects",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get all projects",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `lead` Returns information about the project lead.\n *  `projectKeys` Returns all project keys associated with the project."
        },
        {
          "name": "recent",
          "schema": "integer",
          "description": "Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "A list of project properties to return for the project. This parameter accepts a comma-separated list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project",
      "method": "createProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Create project",
      "parameters": [
        {
          "name": "assigneeType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "avatarId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "categoryId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fieldConfigurationScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "issueSecurityScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "issueTypeScreenScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lead",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "leadAccountId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notificationScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "permissionScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTemplateKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTypeKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workflowScheme",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Identifiers for a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/recent",
      "method": "getRecent",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get recent projects",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `permissions` Returns the permissions associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\n *  `*` Returns the project with all available expand options."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/search",
      "method": "searchProjects",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get projects paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided."
        },
        {
          "name": "keys",
          "schema": "array",
          "description": "The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive)."
        },
        {
          "name": "typeKey",
          "schema": "string",
          "description": "Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`."
        },
        {
          "name": "categoryId",
          "schema": "integer",
          "description": "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation."
        },
        {
          "name": "action",
          "schema": "string",
          "description": "Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project."
        },
        {
          "name": "status",
          "schema": "array",
          "description": "EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list."
        },
        {
          "name": "propertyQuery",
          "schema": "string",
          "description": "EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/type",
      "method": "getAllProjectTypes",
      "httpMethod": "get",
      "tag": "Project types",
      "description": "Get all project types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/type/accessible",
      "method": "getAllAccessibleProjectTypes",
      "httpMethod": "get",
      "tag": "Project types",
      "description": "Get licensed project types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/type/{projectTypeKey}",
      "method": "getProjectTypeByKey",
      "httpMethod": "get",
      "tag": "Project types",
      "description": "Get project type by key",
      "parameters": [
        {
          "name": "projectTypeKey",
          "schema": "string",
          "required": true,
          "description": "The key of the project type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project type."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/type/{projectTypeKey}/accessible",
      "method": "getAccessibleProjectTypeByKey",
      "httpMethod": "get",
      "tag": "Project types",
      "description": "Get accessible project type by key",
      "parameters": [
        {
          "name": "projectTypeKey",
          "schema": "string",
          "required": true,
          "description": "The key of the project type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project type."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}",
      "method": "deleteProject",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "enableUndo",
          "schema": "boolean",
          "description": "Whether this project is placed in the Jira recycle bin where it will be available for restoration."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}",
      "method": "getProject",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.\n *  `issueTypeHierarchy` The project issue type hierarchy."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "A list of project properties to return for the project. This parameter accepts a comma-separated list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}",
      "method": "updateProject",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project."
        },
        {
          "name": "assigneeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "avatarId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "categoryId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issueSecurityScheme",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lead",
          "schema": "string",
          "description": ""
        },
        {
          "name": "leadAccountId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notificationScheme",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "permissionScheme",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/archive",
      "method": "archiveProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Archive project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/avatar",
      "method": "updateProjectAvatar",
      "httpMethod": "put",
      "tag": "Project avatars",
      "description": "Set project avatar",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or (case-sensitive) key of the project."
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "isDeletable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isSelected",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isSystemAvatar",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "urls",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/avatar/{id}",
      "method": "deleteProjectAvatar",
      "httpMethod": "delete",
      "tag": "Project avatars",
      "description": "Delete project avatar",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or (case-sensitive) key."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the avatar."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/avatar2",
      "method": "createProjectAvatar",
      "httpMethod": "post",
      "tag": "Project avatars",
      "description": "Load project avatar",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or (case-sensitive) key of the project."
        },
        {
          "name": "x",
          "schema": "integer",
          "description": "The X coordinate of the top-left corner of the crop region."
        },
        {
          "name": "y",
          "schema": "integer",
          "description": "The Y coordinate of the top-left corner of the crop region."
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "The length of each side of the crop region."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of an avatar."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/avatars",
      "method": "getAllProjectAvatars",
      "httpMethod": "get",
      "tag": "Project avatars",
      "description": "Get all project avatars",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or (case-sensitive) key of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of project avatars."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/component",
      "method": "getProjectComponentsPaginated",
      "httpMethod": "get",
      "tag": "Project components",
      "description": "Get project components paginated",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `issueCount` Sorts by the count of issues associated with the component.\n *  `lead` Sorts by the user key of the component's project lead.\n *  `name` Sorts by component name."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/components",
      "method": "getProjectComponents",
      "httpMethod": "get",
      "tag": "Project components",
      "description": "Get project components",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/delete",
      "method": "deleteProjectAsynchronously",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Delete project asynchronously",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/features",
      "method": "getFeaturesForProject",
      "httpMethod": "get",
      "tag": "Project features",
      "description": "Get project features",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or (case-sensitive) key of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of features on a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/features/{featureKey}",
      "method": "toggleFeatureForProject",
      "httpMethod": "put",
      "tag": "Project features",
      "description": "Set project feature state",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or (case-sensitive) key of the project."
        },
        {
          "name": "featureKey",
          "schema": "string",
          "required": true,
          "description": "The key of the feature."
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of features on a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/properties",
      "method": "getProjectPropertyKeys",
      "httpMethod": "get",
      "tag": "Project properties",
      "description": "Get project property keys",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
      "method": "deleteProjectProperty",
      "httpMethod": "delete",
      "tag": "Project properties",
      "description": "Delete project property",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
      "method": "getProjectProperty",
      "httpMethod": "get",
      "tag": "Project properties",
      "description": "Get project property",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
      "method": "setProjectProperty",
      "httpMethod": "put",
      "tag": "Project properties",
      "description": "Set project property",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the project property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/restore",
      "method": "restore",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Restore deleted or archived project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/role",
      "method": "getProjectRoles",
      "httpMethod": "get",
      "tag": "Project roles",
      "description": "Get project roles for project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "deleteActor",
      "httpMethod": "delete",
      "tag": "Project role actors",
      "description": "Delete actors from project role",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "user",
          "schema": "string",
          "description": "The user account ID of the user to remove from the project role."
        },
        {
          "name": "group",
          "schema": "string",
          "description": "The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "getProjectRole",
      "httpMethod": "get",
      "tag": "Project roles",
      "description": "Get project role for project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "excludeInactiveUsers",
          "schema": "boolean",
          "description": "Exclude inactive users."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "addActorUsers",
      "httpMethod": "post",
      "tag": "Project role actors",
      "description": "Add actors to project role",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "group",
          "schema": "array",
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "array",
          "description": ""
        },
        {
          "name": "user",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/role/{id}",
      "method": "setActors",
      "httpMethod": "put",
      "tag": "Project role actors",
      "description": "Set actors for project role",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "categorisedActors",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/roledetails",
      "method": "getProjectRoleDetails",
      "httpMethod": "get",
      "tag": "Project roles",
      "description": "Get project role details",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "currentMember",
          "schema": "boolean",
          "description": "Whether the roles should be filtered to include only those the user is assigned to."
        },
        {
          "name": "excludeConnectAddons",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/statuses",
      "method": "getAllStatuses",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get all statuses for project",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}",
      "method": "updateProjectType",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update project type",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "newProjectTypeKey",
          "schema": "string",
          "required": true,
          "description": "The key of the new project type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/version",
      "method": "getProjectVersionsPaginated",
      "httpMethod": "get",
      "tag": "Project versions",
      "description": "Get project versions paginated",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by version description.\n *  `name` Sorts by version name.\n *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.\n *  `sequence` Sorts by the order of appearance in the user interface.\n *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last."
        },
        {
          "name": "query",
          "schema": "string",
          "description": "Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive)."
        },
        {
          "name": "status",
          "schema": "string",
          "description": "A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `issuesstatus` Returns the number of issues in each status category for each version.\n *  `operations` Returns actions that can be performed on the specified version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectIdOrKey}/versions",
      "method": "getProjectVersions",
      "httpMethod": "get",
      "tag": "Project versions",
      "description": "Get project versions",
      "parameters": [
        {
          "name": "projectIdOrKey",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectId}/email",
      "method": "getProjectEmail",
      "httpMethod": "get",
      "tag": "Project email",
      "description": "Get project's sender email",
      "parameters": [
        {
          "name": "projectId",
          "schema": "integer",
          "required": true,
          "description": "The project ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A project's sender email address."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectId}/email",
      "method": "updateProjectEmail",
      "httpMethod": "put",
      "tag": "Project email",
      "description": "Set project's sender email",
      "parameters": [
        {
          "name": "projectId",
          "schema": "integer",
          "required": true,
          "description": "The project ID."
        },
        {
          "name": "emailAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "emailAddressStatus",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectId}/hierarchy",
      "method": "getHierarchy",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project issue type hierarchy",
      "parameters": [
        {
          "name": "projectId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The hierarchy of issue types within a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme",
      "method": "getProjectIssueSecurityScheme",
      "httpMethod": "get",
      "tag": "Project permission schemes",
      "description": "Get project issue security scheme",
      "parameters": [
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a security scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectKeyOrId}/notificationscheme",
      "method": "getNotificationSchemeForProject",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project notification scheme",
      "parameters": [
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a notification scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectKeyOrId}/permissionscheme",
      "method": "getAssignedPermissionScheme",
      "httpMethod": "get",
      "tag": "Project permission schemes",
      "description": "Get assigned permission scheme",
      "parameters": [
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a permission scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectKeyOrId}/permissionscheme",
      "method": "assignPermissionScheme",
      "httpMethod": "put",
      "tag": "Project permission schemes",
      "description": "Assign permission scheme",
      "parameters": [
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of a permission scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/project/{projectKeyOrId}/securitylevel",
      "method": "getSecurityLevelsForProject",
      "httpMethod": "get",
      "tag": "Project permission schemes",
      "description": "Get project issue security levels",
      "parameters": [
        {
          "name": "projectKeyOrId",
          "schema": "string",
          "required": true,
          "description": "The project ID or project key (case sensitive)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of issue level security items in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/projectCategory",
      "method": "getAllProjectCategories",
      "httpMethod": "get",
      "tag": "Project categories",
      "description": "Get all project categories",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/projectCategory",
      "method": "createProjectCategory",
      "httpMethod": "post",
      "tag": "Project categories",
      "description": "Create project category",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A project category."
        }
      ]
    },
    {
      "url": "/rest/api/3/projectCategory/{id}",
      "method": "removeProjectCategory",
      "httpMethod": "delete",
      "tag": "Project categories",
      "description": "Delete project category",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "ID of the project category to delete."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/projectCategory/{id}",
      "method": "getProjectCategoryById",
      "httpMethod": "get",
      "tag": "Project categories",
      "description": "Get project category by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A project category."
        }
      ]
    },
    {
      "url": "/rest/api/3/projectCategory/{id}",
      "method": "updateProjectCategory",
      "httpMethod": "put",
      "tag": "Project categories",
      "description": "Update project category",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A project category."
        }
      ]
    },
    {
      "url": "/rest/api/3/projectvalidate/key",
      "method": "validateProjectKey",
      "httpMethod": "get",
      "tag": "Project key and name validation",
      "description": "Validate project key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "description": "The project key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/projectvalidate/validProjectKey",
      "method": "getValidProjectKey",
      "httpMethod": "get",
      "tag": "Project key and name validation",
      "description": "Get valid project key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "description": "The project key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/projectvalidate/validProjectName",
      "method": "getValidProjectName",
      "httpMethod": "get",
      "tag": "Project key and name validation",
      "description": "Get valid project name",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The project name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution",
      "method": "getResolutions",
      "httpMethod": "get",
      "tag": "Issue resolutions",
      "description": "Get resolutions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution",
      "method": "createResolution",
      "httpMethod": "post",
      "tag": "Issue resolutions",
      "description": "Create resolution",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of an issue resolution."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/default",
      "method": "setDefaultResolution",
      "httpMethod": "put",
      "tag": "Issue resolutions",
      "description": "Set default resolution",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/move",
      "method": "moveResolutions",
      "httpMethod": "put",
      "tag": "Issue resolutions",
      "description": "Move resolutions",
      "parameters": [
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/search",
      "method": "searchResolutions",
      "httpMethod": "get",
      "tag": "Issue resolutions",
      "description": "Search resolutions",
      "parameters": [
        {
          "name": "startAt",
          "schema": "string",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "string",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of resolutions IDs to be filtered out"
        },
        {
          "name": "onlyDefault",
          "schema": "boolean",
          "description": "When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/{id}",
      "method": "deleteResolution",
      "httpMethod": "delete",
      "tag": "Issue resolutions",
      "description": "Delete resolution",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue resolution."
        },
        {
          "name": "replaceWith",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue resolution that will replace the currently selected resolution."
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "409",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/{id}",
      "method": "getResolution",
      "httpMethod": "get",
      "tag": "Issue resolutions",
      "description": "Get resolution",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue resolution value."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an issue resolution."
        }
      ]
    },
    {
      "url": "/rest/api/3/resolution/{id}",
      "method": "updateResolution",
      "httpMethod": "put",
      "tag": "Issue resolutions",
      "description": "Update resolution",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue resolution."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "401",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "404",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/role",
      "method": "getAllProjectRoles",
      "httpMethod": "get",
      "tag": "Project roles",
      "description": "Get all project roles",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/role",
      "method": "createProjectRole",
      "httpMethod": "post",
      "tag": "Project roles",
      "description": "Create project role",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}",
      "method": "deleteProjectRole",
      "httpMethod": "delete",
      "tag": "Project roles",
      "description": "Delete project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "swap",
          "schema": "integer",
          "description": "The ID of the project role that will replace the one being deleted."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/role/{id}",
      "method": "getProjectRoleById",
      "httpMethod": "get",
      "tag": "Project roles",
      "description": "Get project role by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}",
      "method": "partialUpdateProjectRole",
      "httpMethod": "post",
      "tag": "Project roles",
      "description": "Partial update project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}",
      "method": "fullyUpdateProjectRole",
      "httpMethod": "put",
      "tag": "Project roles",
      "description": "Fully update project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}/actors",
      "method": "deleteProjectRoleActorsFromRole",
      "httpMethod": "delete",
      "tag": "Project role actors",
      "description": "Delete default actors from project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "user",
          "schema": "string",
          "description": "The user account ID of the user to remove as a default actor."
        },
        {
          "name": "groupId",
          "schema": "string",
          "description": "The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter."
        },
        {
          "name": "group",
          "schema": "string",
          "description": "The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}/actors",
      "method": "getProjectRoleActorsForRole",
      "httpMethod": "get",
      "tag": "Project role actors",
      "description": "Get default actors for project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/role/{id}/actors",
      "method": "addProjectRoleActorsToRole",
      "httpMethod": "post",
      "tag": "Project role actors",
      "description": "Add default actors to project role",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs."
        },
        {
          "name": "group",
          "schema": "array",
          "description": ""
        },
        {
          "name": "groupId",
          "schema": "array",
          "description": ""
        },
        {
          "name": "user",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the roles in a project."
        }
      ]
    },
    {
      "url": "/rest/api/3/screens",
      "method": "getScreens",
      "httpMethod": "get",
      "tag": "Screens",
      "description": "Get screens",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        },
        {
          "name": "queryString",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with screen name."
        },
        {
          "name": "scope",
          "schema": "array",
          "description": "The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen ID.\n *  `name` Sorts by screen name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/screens",
      "method": "createScreen",
      "httpMethod": "post",
      "tag": "Screens",
      "description": "Create screen",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A screen."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/addToDefault/{fieldId}",
      "method": "addFieldToDefaultScreen",
      "httpMethod": "post",
      "tag": "Screens",
      "description": "Add field to default screen",
      "parameters": [
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": "The ID of the field."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}",
      "method": "deleteScreen",
      "httpMethod": "delete",
      "tag": "Screens",
      "description": "Delete screen",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}",
      "method": "updateScreen",
      "httpMethod": "put",
      "tag": "Screens",
      "description": "Update screen",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A screen."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/availableFields",
      "method": "getAvailableScreenFields",
      "httpMethod": "get",
      "tag": "Screens",
      "description": "Get available screen fields",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs",
      "method": "getAllScreenTabs",
      "httpMethod": "get",
      "tag": "Screen tabs",
      "description": "Get all screen tabs",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "projectKey",
          "schema": "string",
          "description": "The key of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs",
      "method": "addScreenTab",
      "httpMethod": "post",
      "tag": "Screen tabs",
      "description": "Create screen tab",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A screen tab."
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "deleteScreenTab",
      "httpMethod": "delete",
      "tag": "Screen tabs",
      "description": "Delete screen tab",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}",
      "method": "renameScreenTab",
      "httpMethod": "put",
      "tag": "Screen tabs",
      "description": "Update screen tab",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A screen tab."
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
      "method": "getAllScreenTabFields",
      "httpMethod": "get",
      "tag": "Screen tab fields",
      "description": "Get all screen tab fields",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "projectKey",
          "schema": "string",
          "description": "The key of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
      "method": "addScreenTabField",
      "httpMethod": "post",
      "tag": "Screen tab fields",
      "description": "Add screen tab field",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "fieldId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A screen tab field."
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}",
      "method": "removeScreenTabField",
      "httpMethod": "delete",
      "tag": "Screen tab fields",
      "description": "Remove screen tab field",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the field."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move",
      "method": "moveScreenTabField",
      "httpMethod": "post",
      "tag": "Screen tab fields",
      "description": "Move screen tab field",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the field."
        },
        {
          "name": "after",
          "schema": "string",
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
      "method": "moveScreenTab",
      "httpMethod": "post",
      "tag": "Screen tabs",
      "description": "Move screen tab",
      "parameters": [
        {
          "name": "screenId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen."
        },
        {
          "name": "tabId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the screen tab."
        },
        {
          "name": "pos",
          "schema": "integer",
          "required": true,
          "description": "The position of tab. The base index is 0."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screenscheme",
      "method": "getScreenSchemes",
      "httpMethod": "get",
      "tag": "Screen schemes",
      "description": "Get screen schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to."
        },
        {
          "name": "queryString",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with screen scheme name."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen scheme ID.\n *  `name` Sorts by screen scheme name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/screenscheme",
      "method": "createScreenScheme",
      "httpMethod": "post",
      "tag": "Screen schemes",
      "description": "Create screen scheme",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "screens",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The ID of a screen scheme."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "deleteScreenScheme",
      "httpMethod": "delete",
      "tag": "Screen schemes",
      "description": "Delete screen scheme",
      "parameters": [
        {
          "name": "screenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the screen scheme."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/screenscheme/{screenSchemeId}",
      "method": "updateScreenScheme",
      "httpMethod": "put",
      "tag": "Screen schemes",
      "description": "Update screen scheme",
      "parameters": [
        {
          "name": "screenSchemeId",
          "schema": "string",
          "required": true,
          "description": "The ID of the screen scheme."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "screens",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/search",
      "method": "searchForIssuesUsingJql",
      "httpMethod": "get",
      "tag": "Issue search",
      "description": "Search for issues using JQL (GET)",
      "parameters": [
        {
          "name": "jql",
          "schema": "string",
          "description": "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only."
        },
        {
          "name": "validateQuery",
          "schema": "string",
          "description": "Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value."
        },
        {
          "name": "fields",
          "schema": "array",
          "description": "A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version."
        },
        {
          "name": "properties",
          "schema": "array",
          "description": "A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified."
        },
        {
          "name": "fieldsByKeys",
          "schema": "boolean",
          "description": "Reference fields by their key (rather than ID)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of a JQL search."
        }
      ]
    },
    {
      "url": "/rest/api/3/search",
      "method": "searchForIssuesUsingJqlPost",
      "httpMethod": "post",
      "tag": "Issue search",
      "description": "Search for issues using JQL (POST)",
      "parameters": [
        {
          "name": "expand",
          "schema": "array",
          "description": ""
        },
        {
          "name": "fields",
          "schema": "array",
          "description": ""
        },
        {
          "name": "fieldsByKeys",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "jql",
          "schema": "string",
          "description": ""
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "array",
          "description": ""
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "validateQuery",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The result of a JQL search."
        }
      ]
    },
    {
      "url": "/rest/api/3/securitylevel/{id}",
      "method": "getIssueSecurityLevel",
      "httpMethod": "get",
      "tag": "Issue security level",
      "description": "Get issue security level",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue security level."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an issue level security item."
        }
      ]
    },
    {
      "url": "/rest/api/3/serverInfo",
      "method": "getServerInfo",
      "httpMethod": "get",
      "tag": "Server info",
      "description": "Get Jira instance info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the Jira instance."
        }
      ]
    },
    {
      "url": "/rest/api/3/settings/columns",
      "method": "getIssueNavigatorDefaultColumns",
      "httpMethod": "get",
      "tag": "Issue navigator settings",
      "description": "Get issue navigator default columns",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/settings/columns",
      "method": "setIssueNavigatorDefaultColumns",
      "httpMethod": "put",
      "tag": "Issue navigator settings",
      "description": "Set issue navigator default columns",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/status",
      "method": "getStatuses",
      "httpMethod": "get",
      "tag": "Workflow statuses",
      "description": "Get all statuses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/status/{idOrName}",
      "method": "getStatus",
      "httpMethod": "get",
      "tag": "Workflow statuses",
      "description": "Get status",
      "parameters": [
        {
          "name": "idOrName",
          "schema": "string",
          "required": true,
          "description": "The ID or name of the status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A status."
        }
      ]
    },
    {
      "url": "/rest/api/3/statuscategory",
      "method": "getStatusCategories",
      "httpMethod": "get",
      "tag": "Workflow status categories",
      "description": "Get all status categories",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/statuscategory/{idOrKey}",
      "method": "getStatusCategory",
      "httpMethod": "get",
      "tag": "Workflow status categories",
      "description": "Get status category",
      "parameters": [
        {
          "name": "idOrKey",
          "schema": "string",
          "required": true,
          "description": "The ID or key of the status category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A status category."
        }
      ]
    },
    {
      "url": "/rest/api/3/statuses",
      "method": "deleteStatusesById",
      "httpMethod": "delete",
      "tag": "Status",
      "description": "Bulk delete Statuses",
      "parameters": [
        {
          "name": "id",
          "schema": "array",
          "description": "The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/statuses",
      "method": "getStatusesById",
      "httpMethod": "get",
      "tag": "Status",
      "description": "Bulk get statuses",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow."
        },
        {
          "name": "id",
          "schema": "array",
          "description": "The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/statuses",
      "method": "createStatuses",
      "httpMethod": "post",
      "tag": "Status",
      "description": "Bulk create statuses",
      "parameters": [
        {
          "name": "scope",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "statuses",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/statuses",
      "method": "updateStatuses",
      "httpMethod": "put",
      "tag": "Status",
      "description": "Bulk update statuses",
      "parameters": [
        {
          "name": "statuses",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/statuses/search",
      "method": "search",
      "httpMethod": "get",
      "tag": "Status",
      "description": "Search statuses paginated",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow."
        },
        {
          "name": "projectId",
          "schema": "string",
          "description": "The project the status is part of or null for global statuses."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "searchString",
          "schema": "string",
          "description": "Term to match status names against or null to search for all statuses in the search scope."
        },
        {
          "name": "statusCategory",
          "schema": "string",
          "description": "Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/task/{taskId}",
      "method": "getTask",
      "httpMethod": "get",
      "tag": "Tasks",
      "description": "Get task",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "The ID of the task."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a task."
        }
      ]
    },
    {
      "url": "/rest/api/3/task/{taskId}/cancel",
      "method": "cancelTask",
      "httpMethod": "post",
      "tag": "Tasks",
      "description": "Cancel task",
      "parameters": [
        {
          "name": "taskId",
          "schema": "string",
          "required": true,
          "description": "The ID of the task."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/uiModifications",
      "method": "getUiModifications",
      "httpMethod": "get",
      "tag": "UI modifications (apps)",
      "description": "Get UI modifications",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `data` Returns UI modification data.\n *  `contexts` Returns UI modification contexts."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/uiModifications",
      "method": "createUiModification",
      "httpMethod": "post",
      "tag": "UI modifications (apps)",
      "description": "Create UI modification",
      "parameters": [
        {
          "name": "contexts",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "data",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Identifiers for a UI modification."
        }
      ]
    },
    {
      "url": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "deleteUiModification",
      "httpMethod": "delete",
      "tag": "UI modifications (apps)",
      "description": "Delete UI modification",
      "parameters": [
        {
          "name": "uiModificationId",
          "schema": "string",
          "required": true,
          "description": "The ID of the UI modification."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/uiModifications/{uiModificationId}",
      "method": "updateUiModification",
      "httpMethod": "put",
      "tag": "UI modifications (apps)",
      "description": "Update UI modification",
      "parameters": [
        {
          "name": "uiModificationId",
          "schema": "string",
          "required": true,
          "description": "The ID of the UI modification."
        },
        {
          "name": "contexts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
      "method": "getAvatars",
      "httpMethod": "get",
      "tag": "Avatars",
      "description": "Get avatars",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The avatar type."
        },
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "The ID of the item the avatar is associated with."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about system and custom avatars."
        }
      ]
    },
    {
      "url": "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
      "method": "storeAvatar",
      "httpMethod": "post",
      "tag": "Avatars",
      "description": "Load avatar",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The avatar type."
        },
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "The ID of the item the avatar is associated with."
        },
        {
          "name": "x",
          "schema": "integer",
          "description": "The X coordinate of the top-left corner of the crop region."
        },
        {
          "name": "y",
          "schema": "integer",
          "description": "The Y coordinate of the top-left corner of the crop region."
        },
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": "The length of each side of the crop region."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details of an avatar."
        }
      ]
    },
    {
      "url": "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}",
      "method": "deleteAvatar",
      "httpMethod": "delete",
      "tag": "Avatars",
      "description": "Delete avatar",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The avatar type."
        },
        {
          "name": "owningObjectId",
          "schema": "string",
          "required": true,
          "description": "The ID of the item the avatar is associated with."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the avatar."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/universal_avatar/view/type/{type}",
      "method": "getAvatarImageByType",
      "httpMethod": "get",
      "tag": "Avatars",
      "description": "Get avatar image by type",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The icon type of the avatar."
        },
        {
          "name": "size",
          "schema": "string",
          "description": "The size of the avatar image. If not provided the default size is returned."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "The format to return the avatar image in. If not provided the original content format is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}",
      "method": "getAvatarImageById",
      "httpMethod": "get",
      "tag": "Avatars",
      "description": "Get avatar image by ID",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The icon type of the avatar."
        },
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the avatar."
        },
        {
          "name": "size",
          "schema": "string",
          "description": "The size of the avatar image. If not provided the default size is returned."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "The format to return the avatar image in. If not provided the original content format is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}",
      "method": "getAvatarImageByOwner",
      "httpMethod": "get",
      "tag": "Avatars",
      "description": "Get avatar image by owner",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The icon type of the avatar."
        },
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "The ID of the project or issue type the avatar belongs to."
        },
        {
          "name": "size",
          "schema": "string",
          "description": "The size of the avatar image. If not provided the default size is returned."
        },
        {
          "name": "format",
          "schema": "string",
          "description": "The format to return the avatar image in. If not provided the original content format is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user",
      "method": "removeUser",
      "httpMethod": "delete",
      "tag": "Users",
      "description": "Delete user",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "key",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/user",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get user",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details."
        },
        {
          "name": "key",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` includes all groups and nested groups to which the user belongs.\n *  `applicationRoles` includes details of all the applications to which the user has access."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:\n\n *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).\n *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.\n *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values."
        }
      ]
    },
    {
      "url": "/rest/api/3/user",
      "method": "createUser",
      "httpMethod": "post",
      "tag": "Users",
      "description": "Create user",
      "parameters": [
        {
          "name": "applicationKeys",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "emailAddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "products",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:\n\n *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).\n *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.\n *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/assignable/multiProjectSearch",
      "method": "findBulkAssignableUsers",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users assignable to projects",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified."
        },
        {
          "name": "projectKeys",
          "schema": "string",
          "required": true,
          "description": "A list of project keys (case sensitive). This parameter accepts a comma-separated list."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/assignable/search",
      "method": "findAssignableUsers",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users assignable to issues",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified."
        },
        {
          "name": "sessionId",
          "schema": "string",
          "description": "The sessionId of this request. SessionId is the same until the assignee is set."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified."
        },
        {
          "name": "project",
          "schema": "string",
          "description": "The project ID or project key (case sensitive). Required, unless `issueKey` is specified."
        },
        {
          "name": "issueKey",
          "schema": "string",
          "description": "The key of the issue. Required, unless `project` is specified."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue."
        },
        {
          "name": "actionDescriptorId",
          "schema": "integer",
          "description": "The ID of the transition."
        },
        {
          "name": "recommend",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/bulk",
      "method": "bulkGetUsers",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Bulk get users",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "username",
          "schema": "array",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "key",
          "schema": "array",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "array",
          "required": true,
          "description": "The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/bulk/migration",
      "method": "bulkGetUsersMigration",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get account IDs for users",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "username",
          "schema": "array",
          "description": "Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present."
        },
        {
          "name": "key",
          "schema": "array",
          "description": "Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/columns",
      "method": "resetUserColumns",
      "httpMethod": "delete",
      "tag": "Users",
      "description": "Reset user default columns",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/user/columns",
      "method": "getUserDefaultColumns",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get user default columns",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/columns",
      "method": "setUserColumns",
      "httpMethod": "put",
      "tag": "Users",
      "description": "Set user default columns",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/email",
      "method": "getUserEmail",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get user email",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/email/bulk",
      "method": "getUserEmailBulk",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get user email bulk",
      "parameters": [
        {
          "name": "accountId",
          "schema": "array",
          "required": true,
          "description": "The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/groups",
      "method": "getUserGroups",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get user groups",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "key",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/permission/search",
      "method": "findUsersWithAllPermissions",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users with permissions",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified."
        },
        {
          "name": "permissions",
          "schema": "string",
          "required": true,
          "description": "A comma separated list of permissions. Permissions can be specified as any:\n\n *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).\n *  custom project permission added by Connect apps.\n *  (deprecated) one of the following:\n    \n     *  ASSIGNABLE\\_USER\n     *  ASSIGN\\_ISSUE\n     *  ATTACHMENT\\_DELETE\\_ALL\n     *  ATTACHMENT\\_DELETE\\_OWN\n     *  BROWSE\n     *  CLOSE\\_ISSUE\n     *  COMMENT\\_DELETE\\_ALL\n     *  COMMENT\\_DELETE\\_OWN\n     *  COMMENT\\_EDIT\\_ALL\n     *  COMMENT\\_EDIT\\_OWN\n     *  COMMENT\\_ISSUE\n     *  CREATE\\_ATTACHMENT\n     *  CREATE\\_ISSUE\n     *  DELETE\\_ISSUE\n     *  EDIT\\_ISSUE\n     *  LINK\\_ISSUE\n     *  MANAGE\\_WATCHER\\_LIST\n     *  MODIFY\\_REPORTER\n     *  MOVE\\_ISSUE\n     *  PROJECT\\_ADMIN\n     *  RESOLVE\\_ISSUE\n     *  SCHEDULE\\_ISSUE\n     *  SET\\_ISSUE\\_SECURITY\n     *  TRANSITION\\_ISSUE\n     *  VIEW\\_VERSION\\_CONTROL\n     *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n     *  VIEW\\_WORKFLOW\\_READONLY\n     *  WORKLOG\\_DELETE\\_ALL\n     *  WORKLOG\\_DELETE\\_OWN\n     *  WORKLOG\\_EDIT\\_ALL\n     *  WORKLOG\\_EDIT\\_OWN\n     *  WORK\\_ISSUE"
        },
        {
          "name": "issueKey",
          "schema": "string",
          "description": "The issue key for the issue."
        },
        {
          "name": "projectKey",
          "schema": "string",
          "description": "The project key for the project (case sensitive)."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/picker",
      "method": "findUsersForPicker",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users for picker",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return. The total number of matched users is returned in `total`."
        },
        {
          "name": "showAvatar",
          "schema": "boolean",
          "description": "Include the URI to the user's avatar."
        },
        {
          "name": "exclude",
          "schema": "array",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "excludeAccountIds",
          "schema": "array",
          "description": "A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`."
        },
        {
          "name": "avatarSize",
          "schema": "string",
          "description": ""
        },
        {
          "name": "excludeConnectUsers",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/properties",
      "method": "getUserPropertyKeys",
      "httpMethod": "get",
      "tag": "User properties",
      "description": "Get user property keys",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "userKey",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/properties/{propertyKey}",
      "method": "deleteUserProperty",
      "httpMethod": "delete",
      "tag": "User properties",
      "description": "Delete user property",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "userKey",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the user's property."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/user/properties/{propertyKey}",
      "method": "getUserProperty",
      "httpMethod": "get",
      "tag": "User properties",
      "description": "Get user property",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "userKey",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the user's property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/properties/{propertyKey}",
      "method": "setUserProperty",
      "httpMethod": "put",
      "tag": "User properties",
      "description": "Set user property",
      "parameters": [
        {
          "name": "accountId",
          "schema": "string",
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*."
        },
        {
          "name": "userKey",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the user's property. The maximum length is 255 characters."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/search",
      "method": "findUsers",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified."
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of filtered results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "property",
          "schema": "string",
          "description": "A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/user/search/query",
      "method": "findUsersByQuery",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users by query",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "The search query."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/search/query/key",
      "method": "findUserKeysByQuery",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find user keys by query",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "The search query."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/user/viewissue/search",
      "method": "findUsersWithBrowsePermission",
      "httpMethod": "get",
      "tag": "User search",
      "description": "Find users with browse permission",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "description": "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified."
        },
        {
          "name": "username",
          "schema": "string",
          "description": "This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details."
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "A query string that is matched exactly against user `accountId`. Required, unless `query` is specified."
        },
        {
          "name": "issueKey",
          "schema": "string",
          "description": "The issue key for the issue. Required, unless `projectKey` is specified."
        },
        {
          "name": "projectKey",
          "schema": "string",
          "description": "The project key for the project (case sensitive). Required, unless `issueKey` is specified."
        },
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/users",
      "method": "getAllUsersDefault",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get all users default",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/users/search",
      "method": "getAllUsers",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get all users",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/version",
      "method": "createVersion",
      "httpMethod": "post",
      "tag": "Project versions",
      "description": "Create version",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issuesStatusForFixVersion",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "moveUnfixedIssuesTo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "overdue",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "releaseDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "released",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userReleaseDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userStartDate",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a project version."
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}",
      "method": "deleteVersion",
      "httpMethod": "delete",
      "tag": "Project versions",
      "description": "Delete version",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        },
        {
          "name": "moveFixIssuesTo",
          "schema": "string",
          "description": "The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted."
        },
        {
          "name": "moveAffectedIssuesTo",
          "schema": "string",
          "description": "The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/version/{id}",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "Project versions",
      "description": "Get version",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `operations` Returns the list of operations available for this version.\n *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project version."
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}",
      "method": "updateVersion",
      "httpMethod": "put",
      "tag": "Project versions",
      "description": "Update version",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        },
        {
          "name": "archived",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expand",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "issuesStatusForFixVersion",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "moveUnfixedIssuesTo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operations",
          "schema": "array",
          "description": ""
        },
        {
          "name": "overdue",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "releaseDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "released",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userReleaseDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userStartDate",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project version."
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}",
      "method": "mergeVersions",
      "httpMethod": "put",
      "tag": "Project versions",
      "description": "Merge versions",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version to delete."
        },
        {
          "name": "moveIssuesTo",
          "schema": "string",
          "required": true,
          "description": "The ID of the version to merge into."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}/move",
      "method": "moveVersion",
      "httpMethod": "post",
      "tag": "Project versions",
      "description": "Move version",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version to be moved."
        },
        {
          "name": "after",
          "schema": "string",
          "description": ""
        },
        {
          "name": "position",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a project version."
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}/relatedIssueCounts",
      "method": "getVersionRelatedIssues",
      "httpMethod": "get",
      "tag": "Project versions",
      "description": "Get version's related issues count",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Various counts of issues within a version."
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}/removeAndSwap",
      "method": "deleteAndReplaceVersion",
      "httpMethod": "post",
      "tag": "Project versions",
      "description": "Delete and replace version",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        },
        {
          "name": "customFieldReplacementList",
          "schema": "array",
          "description": ""
        },
        {
          "name": "moveAffectedIssuesTo",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "moveFixIssuesTo",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/version/{id}/unresolvedIssueCount",
      "method": "getVersionUnresolvedIssues",
      "httpMethod": "get",
      "tag": "Project versions",
      "description": "Get version's unresolved issues count",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Count of a version's unresolved issues."
        }
      ]
    },
    {
      "url": "/rest/api/3/webhook",
      "method": "deleteWebhookById",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "description": "Delete webhooks by ID",
      "parameters": [
        {
          "name": "webhookIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/webhook",
      "method": "getDynamicWebhooksForApp",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Get dynamic webhooks for app",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/webhook",
      "method": "registerDynamicWebhooks",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Register dynamic webhooks",
      "parameters": [
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "webhooks",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Container for a list of registered webhooks. Webhook details are returned in the same order as the request."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/webhook/failed",
      "method": "getFailedWebhooks",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Get failed webhooks",
      "parameters": [
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page."
        },
        {
          "name": "after",
          "schema": "integer",
          "description": "The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of failed webhooks."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/webhook/refresh",
      "method": "refreshWebhooks",
      "httpMethod": "put",
      "tag": "Webhooks",
      "description": "Extend webhook life",
      "parameters": [
        {
          "name": "webhookIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The date the refreshed webhooks expire."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow",
      "method": "getAllWorkflows",
      "httpMethod": "get",
      "tag": "Workflows",
      "description": "Get all workflows",
      "parameters": [
        {
          "name": "workflowName",
          "schema": "string",
          "description": "The name of the workflow to be returned. Only one workflow can be specified."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow",
      "method": "createWorkflow",
      "httpMethod": "post",
      "tag": "Workflows",
      "description": "Create workflow",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "statuses",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "transitions",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "The classic workflow identifiers."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/rule/config",
      "method": "getWorkflowTransitionRuleConfigurations",
      "httpMethod": "get",
      "tag": "Workflow transition rules",
      "description": "Get workflow transition rule configurations",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "types",
          "schema": "array",
          "required": true,
          "description": "The types of the transition rules to return."
        },
        {
          "name": "keys",
          "schema": "array",
          "description": "The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return."
        },
        {
          "name": "workflowNames",
          "schema": "array",
          "description": "EXPERIMENTAL: The list of workflow names to filter by."
        },
        {
          "name": "withTags",
          "schema": "array",
          "description": "EXPERIMENTAL: The list of `tags` to filter by."
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": "EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/rule/config",
      "method": "updateWorkflowTransitionRuleConfigurations",
      "httpMethod": "put",
      "tag": "Workflow transition rules",
      "description": "Update workflow transition rule configurations",
      "parameters": [
        {
          "name": "workflows",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of any errors encountered while updating workflow transition rules."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/rule/config/delete",
      "method": "deleteWorkflowTransitionRuleConfigurations",
      "httpMethod": "put",
      "tag": "Workflow transition rules",
      "description": "Delete workflow transition rule configurations",
      "parameters": [
        {
          "name": "workflows",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of any errors encountered while updating workflow transition rules."
        },
        {
          "statusCode": "400",
          "description": "Error messages from an operation."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/search",
      "method": "getWorkflowsPaginated",
      "httpMethod": "get",
      "tag": "Workflows",
      "description": "Get workflows paginated",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        },
        {
          "name": "workflowName",
          "schema": "array",
          "description": "The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `transitions` For each workflow, returns information about the transitions inside the workflow.\n *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.\n *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.\n *  `statuses` For each workflow, returns information about the statuses inside the workflow.\n *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.\n *  `default` For each workflow, returns information about whether this is the default workflow.\n *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.\n *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.\n *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.\n *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow."
        },
        {
          "name": "queryString",
          "schema": "string",
          "description": "String used to perform a case-insensitive partial match with workflow name."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "description": "[Order](#ordering) the results by a field:\n\n *  `name` Sorts by workflow name.\n *  `created` Sorts by create time.\n *  `updated` Sorts by update time."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Filters active and inactive workflows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        },
        {
          "statusCode": "403",
          "description": "Error messages from an operation."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/transitions/{transitionId}/properties",
      "method": "deleteWorkflowTransitionProperty",
      "httpMethod": "delete",
      "tag": "Workflow transition properties",
      "description": "Delete workflow transition property",
      "parameters": [
        {
          "name": "transitionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition."
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The name of the transition property to delete, also known as the name of the property."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow that the transition belongs to."
        },
        {
          "name": "workflowMode",
          "schema": "string",
          "description": "The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/workflow/transitions/{transitionId}/properties",
      "method": "getWorkflowTransitionProperties",
      "httpMethod": "get",
      "tag": "Workflow transition properties",
      "description": "Get workflow transition properties",
      "parameters": [
        {
          "name": "transitionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition."
        },
        {
          "name": "includeReservedKeys",
          "schema": "boolean",
          "description": "Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*."
        },
        {
          "name": "key",
          "schema": "string",
          "description": "The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow that the transition belongs to."
        },
        {
          "name": "workflowMode",
          "schema": "string",
          "description": "The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the server Jira is running on."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/transitions/{transitionId}/properties",
      "method": "createWorkflowTransitionProperty",
      "httpMethod": "post",
      "tag": "Workflow transition properties",
      "description": "Create workflow transition property",
      "parameters": [
        {
          "name": "transitionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition."
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow that the transition belongs to."
        },
        {
          "name": "workflowMode",
          "schema": "string",
          "description": "The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited."
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the server Jira is running on."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/transitions/{transitionId}/properties",
      "method": "updateWorkflowTransitionProperty",
      "httpMethod": "put",
      "tag": "Workflow transition properties",
      "description": "Update workflow transition property",
      "parameters": [
        {
          "name": "transitionId",
          "schema": "integer",
          "required": true,
          "description": "The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition."
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow that the transition belongs to."
        },
        {
          "name": "workflowMode",
          "schema": "string",
          "description": "The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited."
        },
        {
          "name": "id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the server Jira is running on."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflow/{entityId}",
      "method": "deleteInactiveWorkflow",
      "httpMethod": "delete",
      "tag": "Workflows",
      "description": "Delete inactive workflow",
      "parameters": [
        {
          "name": "entityId",
          "schema": "string",
          "required": true,
          "description": "The entity ID of the workflow."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme",
      "method": "getAllWorkflowSchemes",
      "httpMethod": "get",
      "tag": "Workflow schemes",
      "description": "Get all workflow schemes",
      "parameters": [
        {
          "name": "startAt",
          "schema": "integer",
          "description": "The index of the first item to return in a page of results (page offset)."
        },
        {
          "name": "maxResults",
          "schema": "integer",
          "description": "The maximum number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A page of items."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme",
      "method": "createWorkflowScheme",
      "httpMethod": "post",
      "tag": "Workflow schemes",
      "description": "Create workflow scheme",
      "parameters": [
        {
          "name": "defaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "issueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "issueTypes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastModified",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastModifiedUser",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalDefaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalIssueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/project",
      "method": "getWorkflowSchemeProjectAssociations",
      "httpMethod": "get",
      "tag": "Workflow scheme project associations",
      "description": "Get workflow scheme project associations",
      "parameters": [
        {
          "name": "projectId",
          "schema": "array",
          "required": true,
          "description": "The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A container for a list of workflow schemes together with the projects they are associated with."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/project",
      "method": "assignSchemeToProject",
      "httpMethod": "put",
      "tag": "Workflow scheme project associations",
      "description": "Assign workflow scheme to project",
      "parameters": [
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "workflowSchemeId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}",
      "method": "deleteWorkflowScheme",
      "httpMethod": "delete",
      "tag": "Workflow schemes",
      "description": "Delete workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}",
      "method": "getWorkflowScheme",
      "httpMethod": "get",
      "tag": "Workflow schemes",
      "description": "Get workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*."
        },
        {
          "name": "returnDraftIfExists",
          "schema": "boolean",
          "description": "Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}",
      "method": "updateWorkflowScheme",
      "httpMethod": "put",
      "tag": "Workflow schemes",
      "description": "Update workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*."
        },
        {
          "name": "defaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "issueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "issueTypes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastModified",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastModifiedUser",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalDefaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalIssueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/createdraft",
      "method": "createWorkflowSchemeDraftFromParent",
      "httpMethod": "post",
      "tag": "Workflow scheme drafts",
      "description": "Create draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the active workflow scheme that the draft is created from."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/default",
      "method": "deleteDefaultWorkflow",
      "httpMethod": "delete",
      "tag": "Workflow schemes",
      "description": "Delete default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": "Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/default",
      "method": "getDefaultWorkflow",
      "httpMethod": "get",
      "tag": "Workflow schemes",
      "description": "Get default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "returnDraftIfExists",
          "schema": "boolean",
          "description": "Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the default workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/default",
      "method": "updateDefaultWorkflow",
      "httpMethod": "put",
      "tag": "Workflow schemes",
      "description": "Update default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft",
      "method": "deleteWorkflowSchemeDraft",
      "httpMethod": "delete",
      "tag": "Workflow scheme drafts",
      "description": "Delete draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the active workflow scheme that the draft was created from."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft",
      "method": "getWorkflowSchemeDraft",
      "httpMethod": "get",
      "tag": "Workflow scheme drafts",
      "description": "Get draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the active workflow scheme that the draft was created from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft",
      "method": "updateWorkflowSchemeDraft",
      "httpMethod": "put",
      "tag": "Workflow scheme drafts",
      "description": "Update draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the active workflow scheme that the draft was created from."
        },
        {
          "name": "defaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "draft",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "issueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "issueTypes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastModified",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastModifiedUser",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalDefaultWorkflow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "originalIssueTypeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/default",
      "method": "deleteDraftDefaultWorkflow",
      "httpMethod": "delete",
      "tag": "Workflow scheme drafts",
      "description": "Delete draft default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/default",
      "method": "getDraftDefaultWorkflow",
      "httpMethod": "get",
      "tag": "Workflow scheme drafts",
      "description": "Get draft default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the default workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/default",
      "method": "updateDraftDefaultWorkflow",
      "httpMethod": "put",
      "tag": "Workflow scheme drafts",
      "description": "Update draft default workflow",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
      "method": "deleteWorkflowSchemeDraftIssueType",
      "httpMethod": "delete",
      "tag": "Workflow scheme drafts",
      "description": "Delete workflow for issue type in draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
      "method": "getWorkflowSchemeDraftIssueType",
      "httpMethod": "get",
      "tag": "Workflow scheme drafts",
      "description": "Get workflow for issue type in draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the mapping between an issue type and a workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
      "method": "setWorkflowSchemeDraftIssueType",
      "httpMethod": "put",
      "tag": "Workflow scheme drafts",
      "description": "Set workflow for issue type in draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "issueType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/publish",
      "method": "publishDraftWorkflowScheme",
      "httpMethod": "post",
      "tag": "Workflow scheme drafts",
      "description": "Publish draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "validateOnly",
          "schema": "boolean",
          "description": "Whether the request only performs a validation."
        },
        {
          "name": "statusMappings",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "303",
          "description": "Details about a task."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/workflow",
      "method": "deleteDraftWorkflowMapping",
      "httpMethod": "delete",
      "tag": "Workflow scheme drafts",
      "description": "Delete issue types for workflow in draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/workflow",
      "method": "getDraftWorkflow",
      "httpMethod": "get",
      "tag": "Workflow scheme drafts",
      "description": "Get issue types for workflows in draft workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "description": "The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the mapping between issue types and a workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/draft/workflow",
      "method": "updateDraftWorkflowMapping",
      "httpMethod": "put",
      "tag": "Workflow scheme drafts",
      "description": "Set issue types for workflow in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme that the draft belongs to."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow."
        },
        {
          "name": "defaultMapping",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issueTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "deleteWorkflowSchemeIssueType",
      "httpMethod": "delete",
      "tag": "Workflow schemes",
      "description": "Delete workflow for issue type in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": "Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "getWorkflowSchemeIssueType",
      "httpMethod": "get",
      "tag": "Workflow schemes",
      "description": "Get workflow for issue type in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "returnDraftIfExists",
          "schema": "boolean",
          "description": "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the mapping between an issue type and a workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
      "method": "setWorkflowSchemeIssueType",
      "httpMethod": "put",
      "tag": "Workflow schemes",
      "description": "Set workflow for issue type in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "issueType",
          "schema": "string",
          "required": true,
          "description": "The ID of the issue type."
        },
        {
          "name": "issueType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "deleteWorkflowMapping",
      "httpMethod": "delete",
      "tag": "Workflow schemes",
      "description": "Delete issue types for workflow in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow."
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": "Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "getWorkflow",
      "httpMethod": "get",
      "tag": "Workflow schemes",
      "description": "Get issue types for workflows in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "description": "The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow."
        },
        {
          "name": "returnDraftIfExists",
          "schema": "boolean",
          "description": "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about the mapping between issue types and a workflow."
        }
      ]
    },
    {
      "url": "/rest/api/3/workflowscheme/{id}/workflow",
      "method": "updateWorkflowMapping",
      "httpMethod": "put",
      "tag": "Workflow schemes",
      "description": "Set issue types for workflow in workflow scheme",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "The ID of the workflow scheme."
        },
        {
          "name": "workflowName",
          "schema": "string",
          "required": true,
          "description": "The name of the workflow."
        },
        {
          "name": "defaultMapping",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "issueTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "updateDraftIfNeeded",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "workflow",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details about a workflow scheme."
        }
      ]
    },
    {
      "url": "/rest/api/3/worklog/deleted",
      "method": "getIdsOfWorklogsDeletedSince",
      "httpMethod": "get",
      "tag": "Issue worklogs",
      "description": "Get IDs of deleted worklogs",
      "parameters": [
        {
          "name": "since",
          "schema": "integer",
          "description": "The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of changed worklogs."
        }
      ]
    },
    {
      "url": "/rest/api/3/worklog/list",
      "method": "getWorklogsForIds",
      "httpMethod": "post",
      "tag": "Issue worklogs",
      "description": "Get worklogs",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog."
        },
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/api/3/worklog/updated",
      "method": "getIdsOfWorklogsModifiedSince",
      "httpMethod": "get",
      "tag": "Issue worklogs",
      "description": "Get IDs of updated worklogs",
      "parameters": [
        {
          "name": "since",
          "schema": "integer",
          "description": "The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned."
        },
        {
          "name": "expand",
          "schema": "string",
          "description": "Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of changed worklogs."
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/addons/{addonKey}/properties",
      "method": "addonPropertiesResourceGetAddonPropertiesGet",
      "httpMethod": "get",
      "tag": "App properties",
      "description": "Get app properties",
      "parameters": [
        {
          "name": "addonKey",
          "schema": "string",
          "required": true,
          "description": "The key of the app, as defined in its descriptor."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of property keys."
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
      "method": "addonPropertiesResourceDeleteAddonPropertyDelete",
      "httpMethod": "delete",
      "tag": "App properties",
      "description": "Delete app property",
      "parameters": [
        {
          "name": "addonKey",
          "schema": "string",
          "required": true,
          "description": "The key of the app, as defined in its descriptor."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
      "method": "addonPropertiesResourceGetAddonPropertyGet",
      "httpMethod": "get",
      "tag": "App properties",
      "description": "Get app property",
      "parameters": [
        {
          "name": "addonKey",
          "schema": "string",
          "required": true,
          "description": "The key of the app, as defined in its descriptor."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/)."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
      "method": "addonPropertiesResourcePutAddonPropertyPut",
      "httpMethod": "put",
      "tag": "App properties",
      "description": "Set app property",
      "parameters": [
        {
          "name": "addonKey",
          "schema": "string",
          "required": true,
          "description": "The key of the app, as defined in its descriptor."
        },
        {
          "name": "propertyKey",
          "schema": "string",
          "required": true,
          "description": "The key of the property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "dynamicModulesResourceRemoveModulesDelete",
      "httpMethod": "delete",
      "tag": "Dynamic modules",
      "description": "Remove modules",
      "parameters": [
        {
          "name": "moduleKey",
          "schema": "array",
          "required": false,
          "description": "The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.\nFor example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.\nNonexistent keys are ignored."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "dynamicModulesResourceGetModulesGet",
      "httpMethod": "get",
      "tag": "Dynamic modules",
      "description": "Get modules",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/app/module/dynamic",
      "method": "dynamicModulesResourceRegisterModulesPost",
      "httpMethod": "post",
      "tag": "Dynamic modules",
      "description": "Register modules",
      "parameters": [
        {
          "name": "modules",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/migration/field",
      "method": "appIssueFieldValueUpdateResourceUpdateIssueFieldsPut",
      "httpMethod": "put",
      "tag": "App migration",
      "description": "Bulk update custom field value",
      "parameters": [
        {
          "name": "Atlassian-Transfer-Id",
          "schema": "string",
          "required": true,
          "description": "The ID of the transfer."
        },
        {
          "name": "updateValueList",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/atlassian-connect/1/migration/properties/{entityType}",
      "method": "migrationResourceUpdateEntityPropertiesValuePut",
      "httpMethod": "put",
      "tag": "App migration",
      "description": "Bulk update entity properties",
      "parameters": [
        {
          "name": "Atlassian-Transfer-Id",
          "schema": "string",
          "required": true,
          "description": "The app migration transfer ID."
        },
        {
          "name": "entityType",
          "schema": "string",
          "required": true,
          "description": "The type indicating the object that contains the entity properties."
        }
      ],
      "responses": []
    },
    {
      "url": "/rest/atlassian-connect/1/migration/workflow/rule/search",
      "method": "migrationResourceWorkflowRuleSearchPost",
      "httpMethod": "post",
      "tag": "App migration",
      "description": "Get workflow transition rule configurations",
      "parameters": [
        {
          "name": "Atlassian-Transfer-Id",
          "schema": "string",
          "required": true,
          "description": "The app migration transfer ID."
        },
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ruleIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "workflowEntityId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of workflow transition rules."
        }
      ]
    }
  ],
  "apiBaseUrl": "https://your-domain.atlassian.net",
  "apiDescription": "Jira Cloud platform REST API documentation",
  "apiTitle": "The Jira Cloud platform REST API",
  "endpoints": 327,
  "sdkMethods": 499,
  "schemas": 562,
  "parameters": 1593,
  "contactEmail": "ecosystem@atlassian.com",
  "difficultyScore": 1178.25,
  "difficulty": "Very Hard"
}