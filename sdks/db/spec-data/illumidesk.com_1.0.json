{
  "providerName": "illumidesk.com",
  "openApiRaw": "https://raw.githubusercontent.com/3Blades/openapi/master/tbs_swagger.yml",
  "securitySchemes": {
    "jwt": {
      "description": "A valid JSON Web Token (JWT) must be passed for all operations except for those in the `/auth` route. A JWT can be retrieved from the `/auth/jwt-token-auth` endpoint.\n\nThe following syntax is required:\n\n  Authorization: Bearer <token>\n",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "homepage": "illumidesk.com",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/auth/jwt-token-auth/",
      "method": "authJwtTokenAuth",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Create JSON Web Token (JWT)",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/jwt-token-refresh/",
      "method": "authJwtTokenRefresh",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Refresh a JSON Web Token (JWT)",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/jwt-token-verify/",
      "method": "authJwtTokenVerify",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Validate JSON Web Token (JWT)",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/auth/login/{provider}/",
      "method": "oauthLogin",
      "httpMethod": "get",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "",
      "parameters": [
        {
          "name": "provider",
          "schema": "string",
          "required": true,
          "description": "OAuth2 provider"
        }
      ],
      "responses": []
    },
    {
      "url": "/auth/register/",
      "method": "authRegister",
      "httpMethod": "post",
      "tag": "auth",
      "typeScriptTag": "auth",
      "description": "Register a user",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profile",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/me",
      "method": "me",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "A convenience endpoint that is equivalent to GET /v1/users/profiles/<my user id>/",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/",
      "method": "serversOptionsSizesList",
      "httpMethod": "get",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Retrieve available server sizes",
      "parameters": [
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Set limit when retrieving items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when retrieving items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Set order when retrieving items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/",
      "method": "serversOptionsServerSizeCreate",
      "httpMethod": "post",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Create a new server size item",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "cpu",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "memory",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/{size}/",
      "method": "serversOptionsServerSizeDelete",
      "httpMethod": "delete",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Delete a server size by id",
      "parameters": [
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": "Server size unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/{size}/",
      "method": "serversOptionsResourcesRead",
      "httpMethod": "get",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Get a server size by id",
      "parameters": [
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": "Server size unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/{size}/",
      "method": "serversOptionsServerSizeUpdate",
      "httpMethod": "patch",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Update a server size by id",
      "parameters": [
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": "Server size unique identifier expressed as UUID or name."
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "cpu",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "memory",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/servers/options/server-size/{size}/",
      "method": "serversOptionsServerSizeReplace",
      "httpMethod": "put",
      "tag": "servers",
      "typeScriptTag": "servers",
      "description": "Replace a server size by id",
      "parameters": [
        {
          "name": "size",
          "schema": "string",
          "required": true,
          "description": "Server size unique identifier expressed as UUID or name."
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "cpu",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "memory",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/",
      "method": "teamsList",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get teams",
      "parameters": [
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting data."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/",
      "method": "teamsCreate",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Create a new team",
      "parameters": [
        {
          "name": "avatar",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "avatar_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/",
      "method": "teamsDelete",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Delete a team",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/",
      "method": "teamsRead",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get a team",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/",
      "method": "teamsUpdate",
      "httpMethod": "patch",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Update a team",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "avatar",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "avatar_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/",
      "method": "teamsReplace",
      "httpMethod": "put",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Replace a team",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "avatar",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "avatar_url",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/invoices/",
      "method": "teamsBillingInvoicesList",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get team invoices",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/invoices/{id}/",
      "method": "teamsBillingInvoicesRead",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get an invoice",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Invoice unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/",
      "method": "teamsBillingInvoiceItemsList",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get team invoice items for a given invoice.",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "invoiceId",
          "schema": "string",
          "required": true,
          "description": "Invoice id, expressed as UUID."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/invoices/{invoice_id}/invoice-items/{id}",
      "method": "teamsBillingInvoiceItemsRead",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get a specific team InvoiceItem.",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "invoiceId",
          "schema": "string",
          "required": true,
          "description": "Invoice id, expressed as UUID."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "InvoiceItem id, expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/subscriptions/",
      "method": "teamsBillingSubscriptionsList",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get active team subscriptons",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/subscriptions/",
      "method": "teamsBillingSubscriptionsCreate",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Create a new team subscription",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/subscriptions/{id}/",
      "method": "teamsBillingSubscriptionsDelete",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Delete a subscription",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Subscription unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/billing/subscriptions/{id}/",
      "method": "teamsBillingSubscriptionsRead",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get team subscriptions",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/",
      "method": "teamsGroupsList",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get team groups",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting data."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/",
      "method": "teamsGroupsDelete",
      "httpMethod": "delete",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Delete team group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/",
      "method": "teamsGroupsRead",
      "httpMethod": "get",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Get team group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/",
      "method": "teamsGroupsUpdate",
      "httpMethod": "patch",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Patch team group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parent",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/",
      "method": "teamsGroupsReplace",
      "httpMethod": "put",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Patch team group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parent",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/add/",
      "method": "teamsGroupsAddToGroup",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "Add user to group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/teams/{team}/groups/{group}/remove/",
      "method": "teamsGroupsRemoveFromGroup",
      "httpMethod": "post",
      "tag": "teams",
      "typeScriptTag": "teams",
      "description": "User removed from group",
      "parameters": [
        {
          "name": "team",
          "schema": "string",
          "required": true,
          "description": "Team unique identifier expressed as UUID or name."
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": "Group unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/profiles/",
      "method": "usersList",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Get user list",
      "parameters": [
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit user list."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting users."
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": "User username."
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": "User email."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting users."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/profiles/",
      "method": "usersCreate",
      "httpMethod": "post",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Create new user",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profile",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/profiles/{user}/",
      "method": "usersDelete",
      "httpMethod": "delete",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Delete a user",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/profiles/{user}/",
      "method": "usersRead",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve a user",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "Unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/profiles/{user}/",
      "method": "usersUpdate",
      "httpMethod": "patch",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Update a user",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "profile",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/api-key/",
      "method": "usersApiKeyList",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve account's API key",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/users/{user}/avatar/",
      "method": "userAvatarDelete",
      "httpMethod": "delete",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Delete avatar",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/avatar/",
      "method": "userAvatarGet",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve user's avatar",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUIDor username."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/users/{user}/avatar/",
      "method": "userAvatarUpdate",
      "httpMethod": "patch",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Update a project file",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/avatar/",
      "method": "userAvatarSet",
      "httpMethod": "post",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Add user avatar",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/",
      "method": "usersEmailsList",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve account email addresses",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier as expressed as UUID or username."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limite when getting email list."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting email list."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting email list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/",
      "method": "usersEmailsCreate",
      "httpMethod": "post",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Create an email address",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "unsubscribed",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/{email_id}/",
      "method": "usersEmailsDelete",
      "httpMethod": "delete",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Delete an email address",
      "parameters": [
        {
          "name": "emailId",
          "schema": "string",
          "required": true,
          "description": "Email unique identifier expressed as UUID."
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/{email_id}/",
      "method": "usersEmailsRead",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve a user's email addresses",
      "parameters": [
        {
          "name": "emailId",
          "schema": "string",
          "required": true,
          "description": "Email unique identifier expressed as UUID."
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/{email_id}/",
      "method": "usersEmailsUpdate",
      "httpMethod": "patch",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Update an email address",
      "parameters": [
        {
          "name": "emailId",
          "schema": "string",
          "required": true,
          "description": "Email unique identifier expressed as UUID."
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "unsubscribed",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/emails/{email_id}/",
      "method": "usersEmailsReplace",
      "httpMethod": "put",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Replace an email address",
      "parameters": [
        {
          "name": "emailId",
          "schema": "string",
          "required": true,
          "description": "Email unique identifier expressed as UUID."
        },
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "unsubscribed",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/ssh-key/",
      "method": "usersSshKeyList",
      "httpMethod": "get",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Retrieve an SSH key",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{user}/ssh-key/reset/",
      "method": "usersSshKeyReset",
      "httpMethod": "post",
      "tag": "users",
      "typeScriptTag": "users",
      "description": "Recreate an SSH key",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID or username."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/",
      "method": "billingCardsList",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get credit cards",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Set limit when retrieving credit or debit cards."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Set offset when retriving cards."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Order when retrieving cards."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/",
      "method": "billingCardsCreate",
      "httpMethod": "post",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Create new credit card",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "address_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line2",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_zip",
          "schema": "string",
          "description": ""
        },
        {
          "name": "exp_month",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "exp_year",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/{id}/",
      "method": "billingCardsDelete",
      "httpMethod": "delete",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Delete a credit card",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Card unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/{id}/",
      "method": "billingCardsRead",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get credit card by id",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "User unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/{id}/",
      "method": "billingCardsUpdate",
      "httpMethod": "patch",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Update a credit card",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Card unique identifier."
        },
        {
          "name": "address_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line2",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_zip",
          "schema": "string",
          "description": ""
        },
        {
          "name": "exp_month",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "exp_year",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/cards/{id}/",
      "method": "billingCardsReplace",
      "httpMethod": "put",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Replace a credit card",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "address_city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_line2",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_zip",
          "schema": "string",
          "description": ""
        },
        {
          "name": "exp_month",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "exp_year",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/invoices/",
      "method": "billingInvoicesList",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get invoices",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/invoices/{id}/",
      "method": "billingInvoicesRead",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get an invoice",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Invoice unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/",
      "method": "billingInvoiceItemsList",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get invoice items for a given invoice.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "invoiceId",
          "schema": "string",
          "required": true,
          "description": "Invoice id, expressed as UUID."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}",
      "method": "billingInvoiceItemsRead",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get a specific InvoiceItem.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "invoiceId",
          "schema": "string",
          "required": true,
          "description": "Invoice id, expressed as UUID."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "InvoiceItem id, expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/plans/",
      "method": "billingPlansList",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get billing plans",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/plans/{id}/",
      "method": "billingPlansRead",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get a billing plan",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Plan unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/subscriptions/",
      "method": "billingSubscriptionsList",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get active subscriptons",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/subscriptions/",
      "method": "billingSubscriptionsCreate",
      "httpMethod": "post",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Create a new subscription",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/subscriptions/{id}/",
      "method": "billingSubscriptionsDelete",
      "httpMethod": "delete",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Delete a subscription",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Subscription unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/billing/subscriptions/{id}/",
      "method": "billingSubscriptionsRead",
      "httpMethod": "get",
      "tag": "billing",
      "typeScriptTag": "billing",
      "description": "Get a subscriptions",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/",
      "method": "notificationsList",
      "httpMethod": "get",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Get notifications of all types and entities for the authenticated user.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        },
        {
          "name": "read",
          "schema": "boolean",
          "required": false,
          "description": "When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/",
      "method": "notificationsUpdateList",
      "httpMethod": "patch",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Mark a list of notifications as either read or unread.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "notifications",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "read",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/entity/{entity}",
      "method": "notificationsListEntity",
      "httpMethod": "get",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Get notifications of all types and entities for the authenticated user.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting items."
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Entity to filter notifications by."
        },
        {
          "name": "read",
          "schema": "boolean",
          "required": false,
          "description": "When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/entity/{entity}",
      "method": "notificationsUpdateEntityList",
      "httpMethod": "patch",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Mark a list of notifications as either read or unread.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Entity to filter notifications by."
        },
        {
          "name": "notifications",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "read",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/",
      "method": "notificationSettingsRead",
      "httpMethod": "get",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Retrieve global notification settings for the authenticated user",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/",
      "method": "notificationSettingsUpdate",
      "httpMethod": "patch",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Modify global notification settings.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "emails_enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/",
      "method": "notificationSettingsCreate",
      "httpMethod": "post",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Create global notification settings",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "emails_enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/entity/{entity}",
      "method": "notificationSettingsEntityRead",
      "httpMethod": "get",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Retrieve global notification settings for the authenticated user",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Entity whose settings should be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/entity/{entity}",
      "method": "notificationSettingsEntityUpdate",
      "httpMethod": "patch",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Modify global notification settings.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Entity whose settings should be retrieved."
        },
        {
          "name": "emails_enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/settings/entity/{entity}",
      "method": "notificationSettingsEntityCreate",
      "httpMethod": "post",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Create global notification settings",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "entity",
          "schema": "string",
          "required": true,
          "description": "Entity whose settings should be retrieved."
        },
        {
          "name": "emails_enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/{notification_id}",
      "method": "notificationRead",
      "httpMethod": "get",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Retrieve a specific notification.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        },
        {
          "name": "notificationId",
          "schema": "string",
          "required": true,
          "description": "Notification UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/notifications/{notification_id}",
      "method": "notificationUpdate",
      "httpMethod": "patch",
      "tag": "notifications",
      "typeScriptTag": "notifications",
      "description": "Mark a specific notification as either read or unread.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team data."
        },
        {
          "name": "notificationId",
          "schema": "string",
          "required": true,
          "description": "Notification UUID."
        },
        {
          "name": "read",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/",
      "method": "oauthApplicationsList",
      "httpMethod": "get",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Retrieve oauth applications",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Set limit when retrieving items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when retrieving items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Set order when retrieving items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/",
      "method": "oauthApplicationCreate",
      "httpMethod": "post",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Create a new OAuth2 application",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "authorization_grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "client_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect_uris",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/{application}/",
      "method": "oauthApplicationDelete",
      "httpMethod": "delete",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Delete an application by id",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "application",
          "schema": "string",
          "required": true,
          "description": "Application unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/{application}/",
      "method": "oauthApplicationRead",
      "httpMethod": "get",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Get an application by id",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "application",
          "schema": "string",
          "required": true,
          "description": "Application unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/{application}/",
      "method": "oauthApplicationUpdate",
      "httpMethod": "patch",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Update an application by id",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "application",
          "schema": "string",
          "required": true,
          "description": "Application unique identifier expressed as UUID or name."
        },
        {
          "name": "authorization_grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "client_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect_uris",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/oauth/applications/{application}/",
      "method": "oauthApplicationReplace",
      "httpMethod": "put",
      "tag": "oauth",
      "typeScriptTag": "oauth",
      "description": "Replace an application by id",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "application",
          "schema": "string",
          "required": true,
          "description": "Application unique identifier expressed as UUID or name."
        },
        {
          "name": "authorization_grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "client_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect_uris",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/",
      "method": "projectsList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get available projects",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting data."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting data."
        },
        {
          "name": "private",
          "schema": "string",
          "required": false,
          "description": "Private project or public project."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Project name."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting projects."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/",
      "method": "projectsCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new project",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/project-copy-check/",
      "method": "projectCopyCheck",
      "httpMethod": "head",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Check if you are able to copy a project to your account.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/{namespace}/projects/project-copy/",
      "method": "projectCopy",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Copy a project to your own account.",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/",
      "method": "projectsDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a project",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/",
      "method": "projectsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get a project",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/",
      "method": "projectsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a project",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/",
      "method": "projectsReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a project",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team namespace."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/collaborators/",
      "method": "projectsCollaboratorsList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get project collaborators",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when retrieving items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when retrieving items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when retrieving items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/collaborators/",
      "method": "projectsCollaboratorsCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create project collaborators",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "member",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "permissions",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
      "method": "projectsCollaboratorsDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a project collaborator",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "Collaborator unique identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
      "method": "projectsCollaboratorsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get a project collaborator",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": "Collaborator unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
      "method": "projectsCollaboratorsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update project collaborator",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "collaborator",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "member",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "permissions",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/",
      "method": "projectsDeploymentsList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve deployments",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit results when getting deployment list."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset results when getting deployment list."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Server name."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering option when getting deployment list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/",
      "method": "projectsDeploymentsCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new deployment",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "framework",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "runtime",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/{deployment}/",
      "method": "projectsDeploymentDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a deployment",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "deployment",
          "schema": "string",
          "required": true,
          "description": "User unique identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/{deployment}/",
      "method": "projectsDeploymentsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve a deployment",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "deployment",
          "schema": "string",
          "required": true,
          "description": "Deployment unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/{deployment}/",
      "method": "projectsDeploymentsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a deployment",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "deployment",
          "schema": "string",
          "required": true,
          "description": "Deployment unique identifier expressed as UUID or name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "framework",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "runtime",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/{deployment}/",
      "method": "projectsDeploymentsReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a deployment",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "deployment",
          "schema": "string",
          "required": true,
          "description": "Deployment unique identifier expressed as UUID or name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "framework",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "runtime",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/deployments/{deployment}/deploy/",
      "method": "projectsDeploymentsDeploy",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Deploy an existing model",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "deployment",
          "schema": "string",
          "required": true,
          "description": "Deployment unique identifier expressed as UUID or name."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/",
      "method": "projectsProjectFilesList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get project files",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Unique identifier for project file expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting project file list."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting project file list."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering of list values when getting project file list."
        },
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Exact file name, relative to the project root. If no such file is found, an empty list will be returned."
        },
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": "Determines whether or not content is returned as base64. Defaults to false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/",
      "method": "projectsProjectFilesCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create project files",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "file",
          "schema": "string",
          "description": ""
        },
        {
          "name": "base64_data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/{id}/",
      "method": "projectsProjectFilesDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a project file",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "File unique identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/{id}/",
      "method": "projectsProjectFilesRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get a project file",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "File unique identifier."
        },
        {
          "name": "content",
          "schema": "string",
          "required": false,
          "description": "Determines whether or not content is returned as base64. Defaults to false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/{id}/",
      "method": "projectsProjectFilesUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a project file",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "File unique identifier."
        },
        {
          "name": "file",
          "schema": "string",
          "description": ""
        },
        {
          "name": "base64_data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/project_files/{id}/",
      "method": "projectsProjectFilesReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a project file",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "File unique identifier."
        },
        {
          "name": "file",
          "schema": "string",
          "description": ""
        },
        {
          "name": "base64_data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/",
      "method": "projectsServersList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve servers",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit results when getting server list."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset results when getting server list."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Server name."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering option when getting server list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/",
      "method": "projectsServersCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifer expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "connected",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "server_size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "startup_script",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/statuses/",
      "method": "projectsServersStatuses",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve server statuses",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/",
      "method": "projectsServersDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "User unique identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/",
      "method": "projectsServersRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/",
      "method": "projectsServersUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "connected",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "server_size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "startup_script",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/",
      "method": "projectsServersReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "config",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "connected",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "image_name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "server_size",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "startup_script",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/api-key/",
      "method": "projectsServersApiKey",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get server API key",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/auth/",
      "method": "projectsServersAuth",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Server api key validation",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/",
      "method": "projectsServersRunStatsCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new server's run statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "exit_code",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stacktrace",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stop",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
      "method": "projectsServersRunStatsDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server run statistics unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
      "method": "projectsServersRunStatsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve statistics for a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Run statistics unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
      "method": "projectsServersRunStatsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server run statistics unique identifier expressed as UUID."
        },
        {
          "name": "exit_code",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stacktrace",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stop",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
      "method": "projectsServersRunStatsReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server run statistics expressed as UUID."
        },
        {
          "name": "exit_code",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stacktrace",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stop",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/",
      "method": "projectsServersSshTunnelsList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get SSH Tunnels associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit retrieved items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset retrieved items."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Order retrieved items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/",
      "method": "projectsServersSshTunnelsCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create SSH Tunnel associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "endpoint",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "local_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "remote_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
      "method": "projectsServersSshTunnelsDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete an SSH Tunnel associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "tunnel",
          "schema": "string",
          "required": true,
          "description": "SSH tunnel unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
      "method": "projectsServersSshTunnelsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get an SSH Tunnel associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "tunnel",
          "schema": "string",
          "required": true,
          "description": "SSH tunnel unique identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
      "method": "projectsServersSshTunnelsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update an SSH Tunnel associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "tunnel",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "endpoint",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "local_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "remote_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
      "method": "projectsServersSshTunnelsReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace SSH Tunnel associated to a server",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "tunnel",
          "schema": "string",
          "required": true,
          "description": "SSH tunnel unique identifier expressed as UUID or name."
        },
        {
          "name": "endpoint",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "local_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "remote_port",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/start/",
      "method": "projectsServersStart",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Start a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
      "method": "projectsServersStatsDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Stats unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
      "method": "projectsServersStatsRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server statistics unique identifier expressed as UUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
      "method": "projectsServersStatsUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server statistics unique identifier expressed as UUID."
        },
        {
          "name": "id",
          "schema": "array",
          "description": ""
        },
        {
          "name": "non_field_errors",
          "schema": "array",
          "description": ""
        },
        {
          "name": "size",
          "schema": "array",
          "description": ""
        },
        {
          "name": "start",
          "schema": "array",
          "description": ""
        },
        {
          "name": "stop",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
      "method": "projectsServersStatsReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a server's statistics",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Server statistics unique identifier expressed as UUID."
        },
        {
          "name": "id",
          "schema": "array",
          "description": ""
        },
        {
          "name": "non_field_errors",
          "schema": "array",
          "description": ""
        },
        {
          "name": "size",
          "schema": "array",
          "description": ""
        },
        {
          "name": "start",
          "schema": "array",
          "description": ""
        },
        {
          "name": "stop",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/stop/",
      "method": "projectsServersStop",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Stop a server",
      "parameters": [
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        }
      ],
      "responses": []
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/",
      "method": "serviceTriggerList",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Retrieve server triggers",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Trigger name."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit when getting triggers."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset when getting triggers."
        },
        {
          "name": "ordering",
          "schema": "string",
          "required": false,
          "description": "Ordering when getting triggers."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/",
      "method": "serviceTriggerCreate",
      "httpMethod": "post",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Create a new server trigger",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webhook",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
      "method": "serviceTriggerDelete",
      "httpMethod": "delete",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Delete a server trigger",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "trigger",
          "schema": "string",
          "required": true,
          "description": "Trigger identifier expressed as UUID or name."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
      "method": "serviceTriggerRead",
      "httpMethod": "get",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Get a server trigger",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "trigger",
          "schema": "string",
          "required": true,
          "description": "Trigger unique identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
      "method": "serviceTriggerUpdate",
      "httpMethod": "patch",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Update a server trigger",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "trigger",
          "schema": "string",
          "required": true,
          "description": "Trigger identifier expressed as UUID or name."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webhook",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
      "method": "serviceTriggerReplace",
      "httpMethod": "put",
      "tag": "projects",
      "typeScriptTag": "projects",
      "description": "Replace a server trigger",
      "parameters": [
        {
          "name": "server",
          "schema": "string",
          "required": true,
          "description": "Server unique identifier expressed as UUID or name."
        },
        {
          "name": "project",
          "schema": "string",
          "required": true,
          "description": "Project unique identifier expressed as UUID or name."
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "trigger",
          "schema": "string",
          "required": true,
          "description": "Trigger unique identifier."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "operation",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webhook",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/{namespace}/search/",
      "method": "search",
      "httpMethod": "get",
      "tag": "search",
      "typeScriptTag": "search",
      "description": "Get a search results",
      "parameters": [
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": "User or team name."
        },
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "Search string."
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Limit results to specific types."
        },
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": "Limit data when getting items."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Offset data when getting items."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.illumidesk.com",
  "apiTitle": "IllumiDesk",
  "endpoints": 71,
  "sdkMethods": 144,
  "schemas": 85,
  "parameters": 603,
  "difficultyScore": 337.25,
  "difficulty": "Hard"
}