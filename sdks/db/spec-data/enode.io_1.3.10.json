{
  "providerName": "enode.io",
  "openApiRaw": "https://docs.enode.io/OpenAPI-Enode-v1.3.10.json",
  "securitySchemes": {
    "ClientAccessToken": {
      "description": "A `ClientAccessToken` access token is obtained via the [OAuth 2.0 Client Credentials grant](https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/)\n\nWhen accessing protected resources, the token should be provided in a Bearer authorization header as specified in [RFC6750](https://tools.ietf.org/html/rfc6750#section-2.1)\n\nExample:\n```\nDELETE /users/xyz HTTP/1.1\nAuthorization: Bearer yQ89j3LAnqBx42gWGUl4v-jxoS1mfTAH3Q52WTGrExw.zgRcRrE6KRKUgVQEVr2Pifub8Z7trCZrobKjvhGIOTI\n```\n\nYou can read more about obtaining this token in the [Authorization](#section/Authorization) section\n",
      "flows": {
        "clientCredentials": {
          "scopes": {},
          "tokenUrl": "https://link.test.enode.io/oauth2/token"
        }
      },
      "type": "oauth2"
    },
    "UserAccessToken": {
      "description": "A `UserAccessToken` access token is obtained via the [OAuth 2.0 Authorization Code grant](https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/)\n\nThis token represents the authorization for the bearer to access resources on behalf of the user who authorized it. This authorization is further limited by scopes. When relevant, the `scope` required by each endpoint is listed in the documentation for that endpoint.\n\nWhen accessing protected resources, the token should be provided in a Bearer authorization header as specified in [RFC6750](https://tools.ietf.org/html/rfc6750#section-2.1)\n\nExample:\n```\nGET /vehicles HTTP/1.1\nAuthorization: Bearer yQ89j3LAnqBx42gWGUl4v-jxoS1mfTAH3Q52WTGrExw.zgRcRrE6KRKUgVQEVr2Pifub8Z7trCZrobKjvhGIOTI\n```\n\nYou can read more about obtaining this token in the [Authorization](#section/Authorization) section\n",
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://link.test.enode.io/oauth2/auth",
          "scopes": {
            "all": "Read and write all resources",
            "charger:charge_state": "Read charger charge state",
            "charger:information": "Read charger information",
            "charging_location": "Read & write user's charging locations",
            "control:charger:charging": "Control charger charging",
            "control:vehicle:charging": "Control vehicle charging",
            "vehicle:charge_state": "Read vehicle charge state",
            "vehicle:information": "Read vehicle information",
            "vehicle:location": "Read vehicle location",
            "vehicle:odometer": "Read vehicle odometer",
            "vehicle:smart_charging_policy": "Read & write vehicle smart charging policy"
          },
          "tokenUrl": "https://link.test.enode.io/oauth2/token"
        }
      },
      "type": "oauth2"
    }
  },
  "categories": [
    "location"
  ],
  "homepage": "enode.io",
  "apiVersion": "1.3.10",
  "methods": [
    {
      "url": "/chargers",
      "method": "getChargers",
      "httpMethod": "get",
      "tag": "Chargers",
      "typeScriptTag": "chargers",
      "description": "List Chargers",
      "parameters": [
        {
          "name": "field[]",
          "schema": "array",
          "description": "An optional array of Charger fields that should be included in the response, for example: `?field[]=information&field[]=chargeState` \n\nBy default, no optional fields are included and only the Charger ID will be returned. Response time will generally be slower the more fields you request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/chargers/{chargerId}",
      "method": "getCharger",
      "httpMethod": "get",
      "tag": "Chargers",
      "typeScriptTag": "chargers",
      "description": "Get Charger",
      "parameters": [
        {
          "name": "chargerId",
          "schema": "string",
          "required": true,
          "description": "ID of the Charger"
        },
        {
          "name": "field[]",
          "schema": "array",
          "description": "An optional array of Charger fields that should be included in the response, for example: `?field[]=information&field[]=chargeState` \n\nBy default, no optional fields are included and only the Charger ID will be returned. Response time will generally be slower the more fields you request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/chargers/{chargerId}/charging",
      "method": "controlChargerCharging",
      "httpMethod": "post",
      "tag": "Chargers",
      "typeScriptTag": "chargers",
      "description": "Control Charging",
      "parameters": [
        {
          "name": "chargerId",
          "schema": "string",
          "required": true,
          "description": "ID of the Charger"
        },
        {
          "name": "action",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/charging-locations",
      "method": "getCharginglocations",
      "httpMethod": "get",
      "tag": "Charging Locations",
      "typeScriptTag": "chargingLocations",
      "description": "List Charging Locations",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/charging-locations",
      "method": "postCharginglocations",
      "httpMethod": "post",
      "tag": "Charging Locations",
      "typeScriptTag": "chargingLocations",
      "description": "Create Charging Location",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "latitude",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "longitude",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/charging-locations/{chargingLocationId}",
      "method": "deleteCharginglocationsCharginglocationid",
      "httpMethod": "delete",
      "tag": "Charging Locations",
      "typeScriptTag": "chargingLocations",
      "description": "Delete Charging Location",
      "parameters": [
        {
          "name": "chargingLocationId",
          "schema": "string",
          "required": true,
          "description": "ID of the Charging Location"
        }
      ],
      "responses": []
    },
    {
      "url": "/charging-locations/{chargingLocationId}",
      "method": "getCharginglocationsCharginglocationid",
      "httpMethod": "get",
      "tag": "Charging Locations",
      "typeScriptTag": "chargingLocations",
      "description": "Get Charging Location",
      "parameters": [
        {
          "name": "chargingLocationId",
          "schema": "string",
          "required": true,
          "description": "ID of the Charging Location"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/charging-locations/{chargingLocationId}",
      "method": "putCharginglocationsCharginglocationid",
      "httpMethod": "put",
      "tag": "Charging Locations",
      "typeScriptTag": "chargingLocations",
      "description": "Update Charging Location",
      "parameters": [
        {
          "name": "chargingLocationId",
          "schema": "string",
          "required": true,
          "description": "ID of the Charging Location"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "latitude",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "longitude",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/health/ready",
      "method": "getHealthReady",
      "httpMethod": "get",
      "tag": "Service Health",
      "typeScriptTag": "serviceHealth",
      "description": "Check Service Readiness",
      "parameters": [],
      "responses": [
        {
          "statusCode": "503",
          "description": "At least one functionality of the system is not operating nominally"
        }
      ]
    },
    {
      "url": "/health/vendors",
      "method": "getHealthVendors",
      "httpMethod": "get",
      "tag": "Service Health",
      "typeScriptTag": "serviceHealth",
      "description": "Check Available Vendors",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "getMe",
      "httpMethod": "get",
      "tag": "Me",
      "typeScriptTag": "me",
      "description": "Get My User",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/vendors/{vendor}",
      "method": "disconnectVendor",
      "httpMethod": "delete",
      "tag": "Me",
      "typeScriptTag": "me",
      "description": "Disconnect Vendor",
      "parameters": [
        {
          "name": "vendor",
          "schema": "string",
          "required": true,
          "description": "Vendor to be unlinked"
        }
      ],
      "responses": []
    },
    {
      "url": "/statistics/charging",
      "method": "getStatisticsCharging",
      "httpMethod": "get",
      "tag": "Statistics",
      "typeScriptTag": "statistics",
      "description": "Get User Charging Statistics",
      "parameters": [
        {
          "name": "resolution",
          "schema": "string",
          "description": "The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day."
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": true,
          "description": "Earliest date to include in the response"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Latest date to include in the response (defaults to current date/time)"
        },
        {
          "name": "vehicleId",
          "schema": "string",
          "description": "Filter statistics to only include this vehicle"
        },
        {
          "name": "chargingLocationId",
          "schema": "string",
          "description": "Filter statistics to only include this charging location"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}",
      "method": "deleteUsersUserid",
      "httpMethod": "delete",
      "tag": "User Management",
      "typeScriptTag": "userManagement",
      "description": "Unlink User",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the User"
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{userId}/authorization",
      "method": "deleteUsersUseridAuthorization",
      "httpMethod": "delete",
      "tag": "User Management",
      "typeScriptTag": "userManagement",
      "description": "Deauthorize User",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the User"
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{userId}/link",
      "method": "postUsersUseridLink",
      "httpMethod": "post",
      "tag": "User Management",
      "typeScriptTag": "userManagement",
      "description": "Link User",
      "parameters": [
        {
          "name": "userId",
          "schema": "string",
          "required": true,
          "description": "ID of the User"
        },
        {
          "name": "forceLanguage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkMultiple",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "userImage",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vendor",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles",
      "method": "getVehicles",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "List Vehicles",
      "parameters": [
        {
          "name": "field[]",
          "schema": "array",
          "description": "An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information&field[]=location` \n\nBy default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}",
      "method": "getVehiclesVehicleid",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        },
        {
          "name": "field[]",
          "schema": "array",
          "description": "An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information&field[]=location` \n\nBy default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/charge-state",
      "method": "getVehicleChargestate",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle Charge State",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/charging",
      "method": "postVehiclesVehicleidCharging",
      "httpMethod": "post",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Start / Stop Charging",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": []
    },
    {
      "url": "/vehicles/{vehicleId}/information",
      "method": "getVehiclesVehicleidInformation",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle Information",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Descriptive information about the Vehicle"
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/location",
      "method": "getVehiclesVehicleidLocation",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle Location",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Vehicle's GPS coordinates with timestamp"
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/odometer",
      "method": "getVehiclesVehicleidOdometer",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle Odometer",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Vehicle's odometer with timestamp"
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/smart-charging-policy",
      "method": "getVehiclesVehicleidSmartchargingpolicy",
      "httpMethod": "get",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Get Vehicle Smart Charging Policy",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/smart-charging-policy",
      "method": "putVehiclesVehicleidSmartchargingpolicy",
      "httpMethod": "put",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Update Vehicle Smart Charging Policy",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        },
        {
          "name": "deadline",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vehicles/{vehicleId}/watch",
      "method": "postVehiclesVehicleidWatch",
      "httpMethod": "post",
      "tag": "Vehicles",
      "typeScriptTag": "vehicles",
      "description": "Start Watching Vehicle",
      "parameters": [
        {
          "name": "vehicleId",
          "schema": "string",
          "required": true,
          "description": "ID of the Vehicle"
        },
        {
          "name": "properties",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/firehose",
      "method": "putWebhooksFirehose",
      "httpMethod": "put",
      "tag": "Webhooks 🧪",
      "typeScriptTag": "webhooks 🧪",
      "description": "Update Firehose Webhook",
      "parameters": [
        {
          "name": "secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/webhooks/firehose/test",
      "method": "postWebhooksFirehoseTest",
      "httpMethod": "post",
      "tag": "Webhooks 🧪",
      "typeScriptTag": "webhooks 🧪",
      "description": "Test Firehose Webhook",
      "parameters": [],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.test.enode.io/",
  "apiDescription": "Download [OpenAPI 3.0 Specification](/OpenAPI-Enode-v1.4.0.json)\n\nDownload [Postman Collection](/Postman-Enode-v1.4.0.json)\n\nThe Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.\n\nThe API has a RESTful architecture and utilizes OAuth2 authorization.\n\nWe are always available to handle any issues or just answer your questions. Feel free to reach out on post@enode.io\n\n\n## Registration for API access\nIn order to use the API you will need a `client_id` and `client_secret`. Please contact us if you are interested in using our API in production, and we will provide these credentials.\n\n# Authorization\nVehicle / hardware access via the Enode API is granted to your application by the User in a standard OAuth `Authorization Code` flow.\n\n> The authorization scheme documented here is the recommended approach for most situations. However, it is also possible to user other OAuth flows, non-confidential clients, and temporary users. Please feel free to contact us if you have any questions about your use-case or the integration of your existing infrastructure.\n\n### Preparation: Configure your OAuth client\n\nBecause Enode API implements the OAuth 2.0 spec completely and without modifications, you can avoid rolling your own OAuth client implementation and instead use a well-supported and battle-tested implementation. This is strongly recommended. Information on available OAuth clients for many languages is available [here](https://oauth.net/code/)\n\nTo configure your chosen OAuth client, you will need these details:\n- Your `client_id`\n- Your `client_secret`\n- Authorization URL: `https://link.test.enode.io/oauth2/auth`\n- Token URL: `https://link.test.enode.io/oauth2/token`\n\n```javascript\n// Node.js + openid-client example\nconst enodeIssuer = await Issuer.discover('https://link.test.enode.io');\nconst client = new enodeIssuer.Client({\n  client_id: 'xyz',\n  client_secret: 'shhhhh',\n  redirect_uris: ['http://localhost:5000/callback'],\n  response_types: ['code'],\n});\n```\n\n\n### Preparation: Obtain a client access token via OAuth Client Credentials Grant\nYour OAuth client will have a method for using the `OAuth 2.0 Client Credentials Grant` to obtain an access token.\n\n```javascript\n// Node.js + openid-client example\nconst clientAccessToken = await client.grant({grant_type: \"client_credentials\"});\n```\n\nThis access token belongs to your client and is used for administrative actions, such as the next step.\n\nThis token should be cached by your server and reused until it expires, at which point your server should request a new one.\n\n\n\n### Step 1. Generate an Enode Link session for your User and launch the OAuth flow\n\nWhen your User indicates that they want to connect their hardware to your app, your server must call [Link User](#operation/postUsersUseridLink) to generate an Enode Link session for your User. The User ID can be any string that uniquely identifies the User, but it is recommended that you use the primary key by which you identify the User within your application.\n\nExample Request:\n```\nPOST /users/{userId}/link HTTP/1.1\nAuthorization: Bearer {access_token}\n{\n  \"forceLanguage\": \"nb-NO\",\n  \"vendor\": \"Tesla\",\n}\n```\n\nExample Response:\n```\n{\n    \"linkState\": \"ZjE2MzMxMGFiYmU4MzcxOTU1ZmRjMTU5NGU2ZmE4YTU3NjViMzIwY2YzNG\",\n}\n```\n\nThe returned linkState must be stored by your server, attached to the session of the authenticated user for which it was generated.\n\nYour OAuth client will provide a method to construct an authorization URL for your user. That method will require these details:\n- Redirect URI - The URI to which your user should be redirected when the Oauth flow completes\n- Scope - The OAuth scope(s) you wish to request access to (see list of valid values [here](#section/Authentication/AccessTokenBearer))\n- State - The value of `linkState` from the request above\n\nTo launch the OAuth flow, send your user to the authorization URL constructed by your OAuth client. This can be done in an embedded webview within a native iOS/Android app, or in the system's default browser.\n\n```javascript\n// Node.js + openid-client + express example\n\n// Construct an OAuth authorization URL\nconst authorizationUrl = client.authorizationUrl({\n  scope: \"offline_access all\",\n  state: linkState\n});\n\n// Redirect user to authorization URL\nres.redirect(authorizationUrl);\n```\n\n\n### Step 2. User grants consent\nIn the Link UI webapp the user will follow 3 steps:\n\n1. Choose their hardware from a list of supported manufacturers (EVs and charging boxes). For certain EV makes it will be necessary to also select a charge box.\n2. For each selection, the user will be presented with the login screen for that particular hardware. The user must successfully log in.\n3. A summary of the requested scopes will be presented to the user. The user must choose whether to grant access to your application.\n\n\n### Step 3. OAuth flow concludes with a callback\nWhen the user has completed their interactions, they will be redirected to the `Redirect URI` you provided in Step 1, with various metadata appended as query parameters.\n\nYour OAuth client will have a method to parse and validate that metadata, and fetch the granted access and refresh tokens.\n\nAmong that metadata will be a `state` value - you must verify that it is equal to the `linkState` value persisted in Step 1, as [a countermeasure against CSRF attacks](https://tools.ietf.org/html/rfc6819#section-4.4.1.8).\n\n```javascript\n// Node.js + openid-client + express example\n\n// Fetch linkState from user session\nconst linkState = get(req, 'session.linkState');\n\n// Parse relevant parameters from request URL\nconst params = client.callbackParams(req);\n\n// Exchange authorization code for access and refresh tokens\n// In this example, openid-client does the linkState validation check for us\nconst tokenSet = await client.oauthCallback('http://localhost:5000/callback', params, {state: linkState})\n```\n\nWith the access token in hand, you can now access resources on behalf of the user.\n\n\n# Errors And Problems\n## OAuth Authorization Request\n\nWhen the User has completed the process of allowing/denying access in Enode Link, they will be redirected to your configured redirect URI. If something has gone wrong, query parameters `error` and `error_description` will be set as documented in [Section 4.1.2.1](https://tools.ietf.org/html/rfc6749#section-4.1.2.1) of the OAuth 2.0 spec:\n\n|error                      |error_description|\n|---------------------------|-----------------|\n|invalid_request            |The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.|\n|unauthorized_client        |The client is not authorized to request an authorization code using this method.|\n|access_denied              |The resource owner or authorization server denied the request.|\n|unsupported_response_type  |The authorization server does not support obtaining an authorization code using this method.|\n|invalid_scope              |The requested scope is invalid, unknown, or malformed.|\n|server_error               |The authorization server encountered an unexpected condition that prevented it from fulfilling the request.|\n|temporarily_unavailable    |The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server|\n\nExample:\n```\nhttps://website.example/oauth_callback?state=e0a86fe5&error=access_denied&error_description=The+resource+owner+or+authorization+server+denied+the+request.\n```\n\n\n## Errors when accessing a User's resources\n\nWhen using an `access_token` to access a User's resources, the following HTTP Status Codes in the 4XX range may be encountered:\n\n|HTTP Status Code           |Explanation      |\n|---------------------------|-----------------|\n|400 Bad Request            |The request payload has failed schema validation / parsing\n|401 Unauthorized           |Authentication details are missing or invalid\n|403 Forbidden              |Authentication succeeded, but the authenticated user doesn't have access to the resource\n|404 Not Found              |A non-existent resource is requested\n|429 Too Many Requests      |Rate limiting by the vendor has prevented us from completing the request\n\n\nIn all cases, an [RFC7807 Problem Details](https://tools.ietf.org/html/rfc7807) body is returned to aid in debugging.\n\nExample:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/problem+json\n{\n  \"type\": \"https://docs.enode.io/problems/payload-validation-error\",\n  \"title\": \"Payload validation failed\",\n  \"detail\": \"\\\"authorizationRequest.scope\\\" is required\",\n}\n```\n\n",
  "apiTitle": "Enode API",
  "endpoints": 24,
  "sdkMethods": 28,
  "schemas": 0,
  "parameters": 46,
  "difficultyScore": 39.5,
  "difficulty": "Easy"
}