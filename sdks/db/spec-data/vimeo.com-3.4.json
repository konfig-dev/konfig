{
  "providerName": "vimeo.com",
  "openApiRaw": "https://raw.githubusercontent.com/vimeo/openapi/master/api.yaml",
  "securitySchemes": {
    "bearer": {
      "bearerFormat": "bearer",
      "scheme": "bearer",
      "type": "http"
    },
    "oauth2": {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "/oauth/authorize",
          "scopes": {
            "create": "Create new albums, channels, and so on",
            "delete": "Delete videos, albums, channels, and so on",
            "edit": "Edit existing videos, albums, channels, and so on",
            "email": "Access to email addresses",
            "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
            "private": "Access private member data",
            "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
            "public": "Access public member data",
            "purchase": "Purchase content",
            "purchased": "Access a member's Vimeo On Demand purchase history",
            "stats": "Access video stats",
            "upload": "Upload videos",
            "video_files": "Access video files belonging to members with a PRO subscription or higher"
          },
          "tokenUrl": "/oauth/access_token"
        },
        "clientCredentials": {
          "scopes": {
            "create": "Create new albums, channels, and so on",
            "delete": "Delete videos, albums, channels, and so on",
            "edit": "Edit existing videos, albums, channels, and so on",
            "email": "Access to email addresses",
            "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
            "private": "Access private member data",
            "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
            "public": "Access public member data",
            "purchase": "Purchase content",
            "purchased": "Access a member's Vimeo On Demand purchase history",
            "stats": "Access video stats",
            "upload": "Upload videos",
            "video_files": "Access video files belonging to members with a PRO subscription or higher"
          },
          "tokenUrl": "/oauth/authorize/client"
        }
      },
      "type": "oauth2"
    }
  },
  "homepage": "vimeo.com",
  "apiVersion": "3.4",
  "methods": [
    {
      "url": "/",
      "method": "getEndpoints",
      "httpMethod": "get",
      "tag": "API Information",
      "description": "Get an API specification",
      "parameters": [
        {
          "name": "openapi",
          "schema": "boolean",
          "required": false,
          "description": "Return an OpenAPI specification."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories",
      "method": "getCategories",
      "httpMethod": "get",
      "tag": "Categories\\Essentials",
      "description": "Get all categories",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}",
      "method": "getCategory",
      "httpMethod": "get",
      "tag": "Categories\\Essentials",
      "description": "Get a specific category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/channels",
      "method": "getCategoryChannels",
      "httpMethod": "get",
      "tag": "Categories\\Channels",
      "description": "Get all the channels in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/groups",
      "method": "getCategoryGroups",
      "httpMethod": "get",
      "tag": "Categories\\Groups",
      "description": "Get all the groups in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/videos",
      "method": "getCategoryVideos",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "description": "Get all the videos in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `conditional_featured` - Featured (promoted) videos\n"
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/categories/{category}/videos/{video_id}",
      "method": "checkCategoryForVideo",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "description": "Check for a video in a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels",
      "method": "getChannels",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "description": "Get all channels",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels",
      "method": "createChannel",
      "httpMethod": "post",
      "tag": "Channels\\Essentials",
      "description": "Create a channel",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "deleteChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Essentials",
      "description": "Delete a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "getChannel",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "description": "Get a specific channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}",
      "method": "editChannel",
      "httpMethod": "patch",
      "tag": "Channels\\Essentials",
      "description": "Edit a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories",
      "method": "getChannelCategories",
      "httpMethod": "get",
      "tag": "Channels\\Categories",
      "description": "Get all the categories in a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories",
      "method": "addChannelCategories",
      "httpMethod": "put",
      "tag": "Channels\\Categories",
      "description": "Add a list of categories to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "channels",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories/{category}",
      "method": "deleteChannelCategory",
      "httpMethod": "delete",
      "tag": "Channels\\Categories",
      "description": "Remove a category from a channel",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/categories/{category}",
      "method": "categorizeChannel",
      "httpMethod": "put",
      "tag": "Channels\\Categories",
      "description": "Categorize a channel",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "removeChannelModerators",
      "httpMethod": "delete",
      "tag": "Channels\\Moderators",
      "description": "Remove a list of channel moderators",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "getChannelModerators",
      "httpMethod": "get",
      "tag": "Channels\\Moderators",
      "description": "Get all the moderators in a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "replaceChannelModerators",
      "httpMethod": "patch",
      "tag": "Channels\\Moderators",
      "description": "Replace the moderators of a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators",
      "method": "addChannelModerators",
      "httpMethod": "put",
      "tag": "Channels\\Moderators",
      "description": "Add a list of channel moderators",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "removeChannelModerator",
      "httpMethod": "delete",
      "tag": "Channels\\Moderators",
      "description": "Remove a specific channel moderator",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "getChannelModerator",
      "httpMethod": "get",
      "tag": "Channels\\Moderators",
      "description": "Get a specific channel moderator",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/moderators/{user_id}",
      "method": "addChannelModerator",
      "httpMethod": "put",
      "tag": "Channels\\Moderators",
      "description": "Add a specific channel moderator",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users",
      "method": "getChannelPrivacyUsers",
      "httpMethod": "get",
      "tag": "Channels\\Private channel members",
      "description": "Get all the users who can view a private channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users",
      "method": "setChannelPrivacyUsers",
      "httpMethod": "put",
      "tag": "Channels\\Private channel members",
      "description": "Permit a list of users to view a private channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users/{user_id}",
      "method": "deleteChannelPrivacyUser",
      "httpMethod": "delete",
      "tag": "Channels\\Private channel members",
      "description": "Restrict a user from viewing a private channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/privacy/users/{user_id}",
      "method": "setChannelPrivacyUser",
      "httpMethod": "put",
      "tag": "Channels\\Private channel members",
      "description": "Permit a specific user to view a private channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags",
      "method": "getChannelTags",
      "httpMethod": "get",
      "tag": "Channels\\Tags",
      "description": "Get all the tags that have been added to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags",
      "method": "addTagsToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Tags",
      "description": "Add a list of tags to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "tag",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "deleteTagFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Tags",
      "description": "Remove a tag from a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "checkIfChannelHasTag",
      "httpMethod": "get",
      "tag": "Channels\\Tags",
      "description": "Check if a tag has been added to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/tags/{word}",
      "method": "addChannelTag",
      "httpMethod": "put",
      "tag": "Channels\\Tags",
      "description": "Add a specific tag to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The word to use as the tag."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/users",
      "method": "getChannelSubscribers",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Get all the followers of a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": true,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "removeVideosFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Videos",
      "description": "Remove a list of videos from a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "getChannelVideos",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "description": "Get all the videos in a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos",
      "method": "addVideosToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Videos",
      "description": "Add a list of videos to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "deleteVideoFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Videos",
      "description": "Remove a specific video from a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "getChannelVideo",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "description": "Get a specific video in a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}",
      "method": "addVideoToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Videos",
      "description": "Add a specific video to a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/comments",
      "method": "getCommentsAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Comments",
      "description": "Get all the comments on a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/comments",
      "method": "createCommentAlt1",
      "httpMethod": "post",
      "tag": "Videos\\Comments",
      "description": "Add a comment to a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/credits",
      "method": "getVideoCreditsAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "description": "Get all the credited users in a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/credits",
      "method": "addVideoCreditAlt1",
      "httpMethod": "post",
      "tag": "Videos\\Credits",
      "description": "Credit a user in a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/likes",
      "method": "getVideoLikesAlt1",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Get all the users who have liked a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/pictures",
      "method": "getVideoThumbnailsAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "description": "Get all the thumbnails of a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/pictures",
      "method": "createVideoThumbnailAlt1",
      "httpMethod": "post",
      "tag": "Videos\\Thumbnails",
      "description": "Add a video thumbnail",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "time",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/privacy/users",
      "method": "getVideoPrivacyUsersAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Viewing Privacy",
      "description": "Get all the users who can view a user's private videos by default",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/privacy/users",
      "method": "addVideoPrivacyUsersAlt1",
      "httpMethod": "put",
      "tag": "Videos\\Viewing Privacy",
      "description": "Permit a list of users to view a private video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/texttracks",
      "method": "getTextTracksAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Text Tracks",
      "description": "Get all the text tracks of a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/channels/{channel_id}/videos/{video_id}/texttracks",
      "method": "createTextTrackAlt1",
      "httpMethod": "post",
      "tag": "Videos\\Text Tracks",
      "description": "Add a text track to a video",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/contentratings",
      "method": "getContentRatings",
      "httpMethod": "get",
      "tag": "Videos\\Content Ratings",
      "description": "Get all content ratings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/creativecommons",
      "method": "getCcLicenses",
      "httpMethod": "get",
      "tag": "Videos\\Creative Commons",
      "description": "Get all Creative Commons licenses",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups",
      "method": "getGroups",
      "httpMethod": "get",
      "tag": "Groups\\Essentials",
      "description": "Get all groups",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups",
      "method": "createGroup",
      "httpMethod": "post",
      "tag": "Groups\\Essentials",
      "description": "Create a group",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}",
      "method": "deleteGroup",
      "httpMethod": "delete",
      "tag": "Groups\\Essentials",
      "description": "Delete a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}",
      "method": "getGroup",
      "httpMethod": "get",
      "tag": "Groups\\Essentials",
      "description": "Get a specific group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/users",
      "method": "getGroupMembers",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "description": "Get all the members of a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos",
      "method": "getGroupVideos",
      "httpMethod": "get",
      "tag": "Groups\\Videos",
      "description": "Get all the videos in a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "deleteVideoFromGroup",
      "httpMethod": "delete",
      "tag": "Groups\\Videos",
      "description": "Remove a video from a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "getGroupVideo",
      "httpMethod": "get",
      "tag": "Groups\\Videos",
      "description": "Get a specific video in a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups/{group_id}/videos/{video_id}",
      "method": "addVideoToGroup",
      "httpMethod": "put",
      "tag": "Groups\\Videos",
      "description": "Add a video to a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/languages",
      "method": "getLanguages",
      "httpMethod": "get",
      "tag": "Videos\\Languages",
      "description": "Get all languages",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `texttracks` - Only return text track supported languages\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "getUserAlt1",
      "httpMethod": "get",
      "tag": "Users\\Essentials",
      "description": "Get a user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me",
      "method": "editUserAlt1",
      "httpMethod": "patch",
      "tag": "Users\\Essentials",
      "description": "Edit a user",
      "parameters": [
        {
          "name": "bio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "content_filter",
          "schema": "array",
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videos",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums",
      "method": "getAlbumsAlt1",
      "httpMethod": "get",
      "tag": "Albums\\Essentials",
      "description": "Get all the albums that belong to a user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums",
      "method": "createAlbumAlt1",
      "httpMethod": "post",
      "tag": "Albums\\Essentials",
      "description": "Create an album",
      "parameters": [
        {
          "name": "brand_color",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "layout",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "deleteAlbumAlt1",
      "httpMethod": "delete",
      "tag": "Albums\\Essentials",
      "description": "Delete an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "getAlbumAlt1",
      "httpMethod": "get",
      "tag": "Albums\\Essentials",
      "description": "Get a specific album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}",
      "method": "editAlbumAlt1",
      "httpMethod": "patch",
      "tag": "Albums\\Essentials",
      "description": "Edit an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "brand_color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "layout",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "use_custom_domain",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos",
      "method": "getAlbumVideosAlt1",
      "httpMethod": "get",
      "tag": "Albums\\Album videos",
      "description": "Get all the videos in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page containing the video URI."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the album."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        },
        {
          "name": "weak_search",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos",
      "method": "replaceVideosInAlbumAlt1",
      "httpMethod": "put",
      "tag": "Albums\\Album videos",
      "description": "Replace all the videos in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "videos",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "removeVideoFromAlbumAlt1",
      "httpMethod": "delete",
      "tag": "Albums\\Album videos",
      "description": "Remove a video from an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "getAlbumVideoAlt1",
      "httpMethod": "get",
      "tag": "Albums\\Album videos",
      "description": "Get a specific video in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the album."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}",
      "method": "addVideoToAlbumAlt1",
      "httpMethod": "put",
      "tag": "Albums\\Album videos",
      "description": "Add a specific video to an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail",
      "method": "setVideoAsAlbumThumbnailAlt1",
      "httpMethod": "post",
      "tag": "Albums\\Album videos",
      "description": "Set a video as the album thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "time_code",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/appearances",
      "method": "getAppearancesAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Get all the videos in which a user appears",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/categories",
      "method": "getCategorySubscriptionsAlt1",
      "httpMethod": "get",
      "tag": "Categories\\Subscriptions",
      "description": "Get all the categories that a user follows",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/categories/{category}",
      "method": "unsubscribeFromCategoryAlt1",
      "httpMethod": "delete",
      "tag": "Categories\\Subscriptions",
      "description": "Unsubscribe a user from a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/categories/{category}",
      "method": "checkIfUserSubscribedToCategoryAlt1",
      "httpMethod": "get",
      "tag": "Categories\\Subscriptions",
      "description": "Check if a user follows a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/categories/{category}",
      "method": "subscribeToCategoryAlt1",
      "httpMethod": "put",
      "tag": "Categories\\Subscriptions",
      "description": "Subscribe a user to a single category",
      "parameters": [
        {
          "name": "category",
          "schema": "number",
          "required": true,
          "description": "The name of the category."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/channels",
      "method": "getChannelSubscriptionsAlt1",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "description": "Get all the channels to which a user subscribes",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "unsubscribeFromChannelAlt1",
      "httpMethod": "delete",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Unsubscribe a user from a specific channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "checkIfUserSubscribedToChannelAlt1",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Check if a user follows a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/channels/{channel_id}",
      "method": "subscribeToChannelAlt1",
      "httpMethod": "put",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Subscribe a user to a specific channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos",
      "method": "getCustomLogosAlt1",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Get all the custom logos that belong to a user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos",
      "method": "createCustomLogoAlt1",
      "httpMethod": "post",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Add a custom logo",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/customlogos/{logo_id}",
      "method": "getCustomLogoAlt1",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Get a specific custom logo",
      "parameters": [
        {
          "name": "logo_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/feed",
      "method": "getFeedAlt1",
      "httpMethod": "get",
      "tag": "Users\\Feed",
      "description": "Get all videos in a user's feed",
      "parameters": [
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The feed type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/followers",
      "method": "getFollowersAlt1",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Get all the followers of a user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following",
      "method": "getUserFollowingAlt1",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Get all the users that a user is following",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following",
      "method": "followUsersAlt1",
      "httpMethod": "post",
      "tag": "Users\\Follows",
      "description": "Follow a list of users",
      "parameters": [
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "unfollowUserAlt1",
      "httpMethod": "delete",
      "tag": "Users\\Follows",
      "description": "Unfollow a user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "checkIfUserIsFollowingAlt1",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Check if a user is following another user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/following/{follow_user_id}",
      "method": "followUserAlt1",
      "httpMethod": "put",
      "tag": "Users\\Follows",
      "description": "Follow a specific user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups",
      "method": "getUserGroupsAlt1",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "description": "Get all the groups that a user has joined",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "leaveGroupAlt1",
      "httpMethod": "delete",
      "tag": "Groups\\Subscription",
      "description": "Remove a user from a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "checkIfUserJoinedGroupAlt1",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "description": "Check if a user has joined a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/groups/{group_id}",
      "method": "joinGroupAlt1",
      "httpMethod": "put",
      "tag": "Groups\\Subscription",
      "description": "Add a user to a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes",
      "method": "getLikesAlt1",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Get all the videos that a user has liked",
      "parameters": [
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "unlikeVideoAlt1",
      "httpMethod": "delete",
      "tag": "Likes\\Essentials",
      "description": "Cause a user to unlike a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "checkIfUserLikedVideoAlt1",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Check if a user has liked a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/likes/{video_id}",
      "method": "likeVideoAlt1",
      "httpMethod": "put",
      "tag": "Likes\\Essentials",
      "description": "Cause a user to like a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/pages",
      "method": "getUserVodsAlt1",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "description": "Get all the On Demand pages of a user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of On Demand pages to return."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/pages",
      "method": "createVodAlt1",
      "httpMethod": "post",
      "tag": "On Demand\\Essentials",
      "description": "Create an On Demand page",
      "parameters": [
        {
          "name": "accepted_currencies",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content_rating",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domain_link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "episodes",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subscription",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/purchases",
      "method": "getVodPurchases",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and Rentals",
      "description": "Get all the On Demand purchases and rentals that a user has made",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of On Demand videos to show.\n\nOption descriptions:\n * `important` - Will show all pages which are about to expire.\n"
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/ondemand/purchases/{ondemand_id}",
      "method": "checkIfVodWasPurchasedAlt1",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and Rentals",
      "description": "Check if a user has made a purchase or rental from an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures",
      "method": "getPicturesAlt1",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "description": "Get all the pictures that belong to a user",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures",
      "method": "createPictureAlt1",
      "httpMethod": "post",
      "tag": "Users\\Pictures",
      "description": "Add a user picture",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "deletePictureAlt1",
      "httpMethod": "delete",
      "tag": "Users\\Pictures",
      "description": "Delete a user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "getPictureAlt1",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "description": "Get a specific user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/pictures/{portraitset_id}",
      "method": "editPictureAlt1",
      "httpMethod": "patch",
      "tag": "Users\\Pictures",
      "description": "Edit a user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios",
      "method": "getPortfoliosAlt1",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "description": "Get all the portfolios that belong to a user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}",
      "method": "getPortfolioAlt1",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "description": "Get a specific portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos",
      "method": "getPortfolioVideosAlt1",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "description": "Get all the videos in a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "deleteVideoFromPortfolioAlt1",
      "httpMethod": "delete",
      "tag": "Portfolios\\Videos",
      "description": "Remove a video from a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "getPortfolioVideoAlt1",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "description": "Get a specific video in a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "addVideoToPortfolioAlt1",
      "httpMethod": "put",
      "tag": "Portfolios\\Videos",
      "description": "Add a video to a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets",
      "method": "getEmbedPresetsAlt1",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "description": "Get all the embed presets that a user has created",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}",
      "method": "getEmbedPresetAlt1",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "description": "Get a specific embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}",
      "method": "editEmbedPresetAlt1",
      "httpMethod": "patch",
      "tag": "Embed Presets\\Essentials",
      "description": "Edit an embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "outro",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/presets/{preset_id}/videos",
      "method": "getEmbedPresetVideosAlt1",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "description": "Get all the videos that have been added to an embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects",
      "method": "getProjectsAlt1",
      "httpMethod": "get",
      "tag": "Projects\\Essentials",
      "description": "Get all the projects that belong to a user",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects",
      "method": "createProjectAlt1",
      "httpMethod": "post",
      "tag": "Projects\\Essentials",
      "description": "Create a project",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "deleteProjectAlt1",
      "httpMethod": "delete",
      "tag": "Projects\\Essentials",
      "description": "Delete a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "should_delete_clips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete all the videos in the project along with the project itself."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "getProjectAlt1",
      "httpMethod": "get",
      "tag": "Projects\\Essentials",
      "description": "Get a specific project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}",
      "method": "editProjectAlt1",
      "httpMethod": "patch",
      "tag": "Projects\\Essentials",
      "description": "Edit a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "removeVideosFromProjectAlt1",
      "httpMethod": "delete",
      "tag": "Projects\\Videos",
      "description": "Remove a list of videos from a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "should_delete_clips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete the videos when removing them from the project."
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "getProjectVideosAlt1",
      "httpMethod": "get",
      "tag": "Projects\\Videos",
      "description": "Get all the videos in a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos",
      "method": "addVideosToProjectAlt1",
      "httpMethod": "put",
      "tag": "Projects\\Videos",
      "description": "Add a list of videos to a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video URIs to add."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos/{video_id}",
      "method": "removeVideoFromProjectAlt1",
      "httpMethod": "delete",
      "tag": "Projects\\Videos",
      "description": "Remove a specific video from a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/projects/{project_id}/videos/{video_id}",
      "method": "addVideoToProjectAlt1",
      "httpMethod": "put",
      "tag": "Projects\\Videos",
      "description": "Add a specific video to a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos",
      "method": "getVideosAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Get all the videos that a user has uploaded",
      "parameters": [
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI. Only available when not paired with `query`."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "filter_playable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter by all playable videos or by all videos that are not  playable."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos",
      "method": "uploadVideoAlt1",
      "httpMethod": "post",
      "tag": "Videos\\Upload",
      "description": "Upload a video",
      "parameters": [
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "ratings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/videos/{video_id}",
      "method": "checkIfUserOwnsVideoAlt1",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Check if a user owns a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watched/videos",
      "method": "deleteWatchHistory",
      "httpMethod": "delete",
      "tag": "Users\\Watch History",
      "description": "Delete a user's watch history",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/me/watched/videos",
      "method": "getWatchHistory",
      "httpMethod": "get",
      "tag": "Users\\Watch History",
      "description": "Get all the videos that a user has watched",
      "parameters": [
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watched/videos/{video_id}",
      "method": "deleteFromWatchHistory",
      "httpMethod": "delete",
      "tag": "Users\\Watch History",
      "description": "Delete a specific video from a user's watch history",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/watchlater",
      "method": "getWatchLaterQueueAlt1",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Get all the videos in a user's Watch Later queue",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "deleteVideoFromWatchLaterAlt1",
      "httpMethod": "delete",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Remove a video from a user's Watch Later queue",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "checkWatchLaterQueueAlt1",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Check if a user has added a specific video to their Watch Later queue",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/me/watchlater/{video_id}",
      "method": "addVideoToWatchLaterAlt1",
      "httpMethod": "put",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Add a video to a user's Watch Later queue",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/access_token",
      "method": "exchangeAuthCode",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Essentials",
      "description": "Exchange an authorization code for an access token",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/authorize/client",
      "method": "clientAuth",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Essentials",
      "description": "Authorize a client with OAuth",
      "parameters": [
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/authorize/vimeo_oauth1",
      "method": "convertAccessToken",
      "httpMethod": "post",
      "tag": "Authentication Extras\\Essentials",
      "description": "Convert OAuth 1 access tokens to OAuth 2 access tokens",
      "parameters": [
        {
          "name": "grant_type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token_secret",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/verify",
      "method": "verifyToken",
      "httpMethod": "get",
      "tag": "Authentication Extras\\Essentials",
      "description": "Verify an OAuth 2 token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres",
      "method": "getVodGenres",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Get all On Demand genres",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}",
      "method": "getVodGenre",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Get a specific On Demand genre",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}/pages",
      "method": "getGenreVods",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Get all the On Demand pages in a genre",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/genres/{genre_id}/pages/{ondemand_id}",
      "method": "getGenreVod",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Get a specific On Demand page in a genre",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "deleteVodDraft",
      "httpMethod": "delete",
      "tag": "On Demand\\Essentials",
      "description": "Delete a draft of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "getVod",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "description": "Get a specific On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}",
      "method": "editVod",
      "httpMethod": "patch",
      "tag": "On Demand\\Essentials",
      "description": "Edit an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "link",
          "schema": "string",
          "description": ""
        },
        {
          "name": "preorder",
          "schema": "object",
          "description": ""
        },
        {
          "name": "publish",
          "schema": "object",
          "description": ""
        },
        {
          "name": "publish_when_ready",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds",
      "method": "getVodBackgrounds",
      "httpMethod": "get",
      "tag": "On Demand\\Backgrounds",
      "description": "Get all the backgrounds of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds",
      "method": "createVodBackground",
      "httpMethod": "post",
      "tag": "On Demand\\Backgrounds",
      "description": "Add a background to an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "deleteVodBackground",
      "httpMethod": "delete",
      "tag": "On Demand\\Backgrounds",
      "description": "Remove a background from an On Demand page",
      "parameters": [
        {
          "name": "background_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the background."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "getVodBackground",
      "httpMethod": "get",
      "tag": "On Demand\\Backgrounds",
      "description": "Get a specific background of an On Demand page",
      "parameters": [
        {
          "name": "background_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the background."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}",
      "method": "editVodBackground",
      "httpMethod": "patch",
      "tag": "On Demand\\Backgrounds",
      "description": "Edit a background of an On Demand page",
      "parameters": [
        {
          "name": "background_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the background."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres",
      "method": "getVodGenresByOndemandId",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Get all the genres of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "deleteVodGenre",
      "httpMethod": "delete",
      "tag": "On Demand\\Genres",
      "description": "Remove a genre from an On Demand page",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "getVodGenreByOndemandId",
      "httpMethod": "get",
      "tag": "On Demand\\Genres",
      "description": "Check whether an On Demand page belongs to a genre",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      "method": "addVodGenre",
      "httpMethod": "put",
      "tag": "On Demand\\Genres",
      "description": "Add a genre to an On Demand page",
      "parameters": [
        {
          "name": "genre_id",
          "schema": "string",
          "required": true,
          "description": "The ID of the genre."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/likes",
      "method": "getVodLikes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Get all the users who have liked a video on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand page."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures",
      "method": "getVodPosters",
      "httpMethod": "get",
      "tag": "On Demand\\Posters",
      "description": "Get all the posters of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures",
      "method": "addVodPoster",
      "httpMethod": "post",
      "tag": "On Demand\\Posters",
      "description": "Add a poster to an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures/{poster_id}",
      "method": "getVodPoster",
      "httpMethod": "get",
      "tag": "On Demand\\Posters",
      "description": "Get a specific poster of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "poster_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/pictures/{poster_id}",
      "method": "editVodPoster",
      "httpMethod": "patch",
      "tag": "On Demand\\Posters",
      "description": "Edit a poster of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "poster_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions",
      "method": "getVodPromotions",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "description": "Get all the promotions on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": true,
          "description": "The filter to apply to the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions",
      "method": "createVodPromotion",
      "httpMethod": "post",
      "tag": "On Demand\\Promotions",
      "description": "Add a promotion to an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "access_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "discount_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "download",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "end_time",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "percent_off",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "product_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "start_time",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "stream_period",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "total",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      "method": "deleteVodPromotion",
      "httpMethod": "delete",
      "tag": "On Demand\\Promotions",
      "description": "Remove a promotion from an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "promotion_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}",
      "method": "getVodPromotion",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "description": "Get a specific promotion on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "promotion_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes",
      "method": "getVodPromotionCodes",
      "httpMethod": "get",
      "tag": "On Demand\\Promotions",
      "description": "Get all the codes of a promotion on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "promotion_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the promotion."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "deleteVodRegions",
      "httpMethod": "delete",
      "tag": "On Demand\\Regions",
      "description": "Remove a list of regions from an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "countries",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "getVodRegions",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "description": "Get all the regions of an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions",
      "method": "setVodRegions",
      "httpMethod": "put",
      "tag": "On Demand\\Regions",
      "description": "Add a list of regions to an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "countries",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "deleteVodRegion",
      "httpMethod": "delete",
      "tag": "On Demand\\Regions",
      "description": "Remove a specific region from an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "getVodRegion",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "description": "Get a specific region of an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/regions/{country}",
      "method": "addVodRegion",
      "httpMethod": "put",
      "tag": "On Demand\\Regions",
      "description": "Add a specific region to an On Demand page",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code."
        },
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons",
      "method": "getVodSeasons",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "description": "Get all the seasons on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons/{season_id}",
      "method": "getVodSeason",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "description": "Get a specific season on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "season_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the season."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos",
      "method": "getVodSeasonVideos",
      "httpMethod": "get",
      "tag": "On Demand\\Seasons",
      "description": "Get all the videos in a season on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "season_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the season."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos",
      "method": "getVodVideos",
      "httpMethod": "get",
      "tag": "On Demand\\Videos",
      "description": "Get all the videos on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "deleteVideoFromVod",
      "httpMethod": "delete",
      "tag": "On Demand\\Videos",
      "description": "Remove a video from an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "getVodVideo",
      "httpMethod": "get",
      "tag": "On Demand\\Videos",
      "description": "Get a specific video on an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/pages/{ondemand_id}/videos/{video_id}",
      "method": "addVideoToVod",
      "httpMethod": "put",
      "tag": "On Demand\\Videos",
      "description": "Add a video to an On Demand page",
      "parameters": [
        {
          "name": "ondemand_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the On Demand."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "position",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "release_year",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/regions",
      "method": "getRegions",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "description": "Get all the On Demand regions",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ondemand/regions/{country}",
      "method": "getRegion",
      "httpMethod": "get",
      "tag": "On Demand\\Regions",
      "description": "Get a specific On Demand region",
      "parameters": [
        {
          "name": "country",
          "schema": "string",
          "required": true,
          "description": "The country code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{word}",
      "method": "getTag",
      "httpMethod": "get",
      "tag": "Tags\\Essentials",
      "description": "Get a specific tag",
      "parameters": [
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag to return."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{word}/videos",
      "method": "getVideosWithTag",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "description": "Get all the videos with a specific tag",
      "parameters": [
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "deleteToken",
      "httpMethod": "delete",
      "tag": "Authentication Extras\\Essentials",
      "description": "Revoke the current access token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "searchUsers",
      "httpMethod": "get",
      "tag": "Users\\Internal",
      "description": "Search for users",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users\\Essentials",
      "description": "Get a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}",
      "method": "editUser",
      "httpMethod": "patch",
      "tag": "Users\\Essentials",
      "description": "Edit a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "bio",
          "schema": "string",
          "description": ""
        },
        {
          "name": "content_filter",
          "schema": "array",
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videos",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums",
      "method": "getAlbums",
      "httpMethod": "get",
      "tag": "Albums\\Essentials",
      "description": "Get all the albums that belong to a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums",
      "method": "createAlbum",
      "httpMethod": "post",
      "tag": "Albums\\Essentials",
      "description": "Create an album",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "brand_color",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "layout",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "deleteAlbum",
      "httpMethod": "delete",
      "tag": "Albums\\Essentials",
      "description": "Delete an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "getAlbum",
      "httpMethod": "get",
      "tag": "Albums\\Essentials",
      "description": "Get a specific album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}",
      "method": "editAlbum",
      "httpMethod": "patch",
      "tag": "Albums\\Essentials",
      "description": "Edit an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "brand_color",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hide_nav",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "layout",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "review_mode",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        },
        {
          "name": "use_custom_domain",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails",
      "method": "getAlbumCustomThumbs",
      "httpMethod": "get",
      "tag": "Albums\\Custom album thumbnails",
      "description": "Get all the custom upload thumbnails of an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails",
      "method": "createAlbumCustomThumb",
      "httpMethod": "post",
      "tag": "Albums\\Custom album thumbnails",
      "description": "Add a custom uploaded thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "deleteAlbumCustomThumbnail",
      "httpMethod": "delete",
      "tag": "Albums\\Custom album thumbnails",
      "description": "Remove a custom uploaded album thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "thumbnail_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "getAlbumCustomThumbnail",
      "httpMethod": "get",
      "tag": "Albums\\Custom album thumbnails",
      "description": "Get a specific custom uploaded album thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "thumbnail_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}",
      "method": "replaceAlbumCustomThumb",
      "httpMethod": "patch",
      "tag": "Albums\\Custom album thumbnails",
      "description": "Replace a custom uploaded album thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "thumbnail_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom thumbnail."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos",
      "method": "getAlbumLogos",
      "httpMethod": "get",
      "tag": "Albums\\Custom album logos",
      "description": "Get all the custom logos of an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos",
      "method": "createAlbumLogo",
      "httpMethod": "post",
      "tag": "Albums\\Custom album logos",
      "description": "Add a custom album logo",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "deleteAlbumLogo",
      "httpMethod": "delete",
      "tag": "Albums\\Custom album logos",
      "description": "Remove a custom album logo",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "logo_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "getAlbumLogo",
      "httpMethod": "get",
      "tag": "Albums\\Custom album logos",
      "description": "Get a specific custom album logo",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "logo_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/logos/{logo_id}",
      "method": "replaceAlbumLogo",
      "httpMethod": "patch",
      "tag": "Albums\\Custom album logos",
      "description": "Replace a custom album logo",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "logo_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos",
      "method": "getAlbumVideos",
      "httpMethod": "get",
      "tag": "Albums\\Album videos",
      "description": "Get all the videos in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page containing the video URI."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the album."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        },
        {
          "name": "weak_search",
          "schema": "boolean",
          "required": false,
          "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos",
      "method": "replaceVideosInAlbum",
      "httpMethod": "put",
      "tag": "Albums\\Album videos",
      "description": "Replace all the videos in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "videos",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "removeVideoFromAlbum",
      "httpMethod": "delete",
      "tag": "Albums\\Album videos",
      "description": "Remove a video from an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "getAlbumVideo",
      "httpMethod": "get",
      "tag": "Albums\\Album videos",
      "description": "Get a specific video in an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "The password of the album."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}",
      "method": "addVideoToAlbum",
      "httpMethod": "put",
      "tag": "Albums\\Album videos",
      "description": "Add a specific video to an album",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail",
      "method": "setVideoAsAlbumThumbnail",
      "httpMethod": "post",
      "tag": "Albums\\Album videos",
      "description": "Set a video as the album thumbnail",
      "parameters": [
        {
          "name": "album_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the album."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "time_code",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/appearances",
      "method": "getAppearances",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Get all the videos in which a user appears",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories",
      "method": "getCategorySubscriptions",
      "httpMethod": "get",
      "tag": "Categories\\Subscriptions",
      "description": "Get all the categories that a user follows",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "unsubscribeFromCategory",
      "httpMethod": "delete",
      "tag": "Categories\\Subscriptions",
      "description": "Unsubscribe a user from a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "checkIfUserSubscribedToCategory",
      "httpMethod": "get",
      "tag": "Categories\\Subscriptions",
      "description": "Check if a user follows a category",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/categories/{category}",
      "method": "subscribeToCategory",
      "httpMethod": "put",
      "tag": "Categories\\Subscriptions",
      "description": "Subscribe a user to a single category",
      "parameters": [
        {
          "name": "category",
          "schema": "number",
          "required": true,
          "description": "The name of the category."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/channels",
      "method": "getChannelSubscriptions",
      "httpMethod": "get",
      "tag": "Channels\\Essentials",
      "description": "Get all the channels to which a user subscribes",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "unsubscribeFromChannel",
      "httpMethod": "delete",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Unsubscribe a user from a specific channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "checkIfUserSubscribedToChannel",
      "httpMethod": "get",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Check if a user follows a channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/channels/{channel_id}",
      "method": "subscribeToChannel",
      "httpMethod": "put",
      "tag": "Channels\\Subscriptions and subscribers",
      "description": "Subscribe a user to a specific channel",
      "parameters": [
        {
          "name": "channel_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the channel."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos",
      "method": "getCustomLogos",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Get all the custom logos that belong to a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos",
      "method": "createCustomLogo",
      "httpMethod": "post",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Add a custom logo",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/customlogos/{logo_id}",
      "method": "getCustomLogo",
      "httpMethod": "get",
      "tag": "Embed Presets\\Custom Logos",
      "description": "Get a specific custom logo",
      "parameters": [
        {
          "name": "logo_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the custom logo."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/feed",
      "method": "getFeed",
      "httpMethod": "get",
      "tag": "Users\\Feed",
      "description": "Get all videos in a user's feed",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": "Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "The feed type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/followers",
      "method": "getFollowers",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Get all the followers of a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following",
      "method": "getUserFollowing",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Get all the users that a user is following",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following",
      "method": "followUsers",
      "httpMethod": "post",
      "tag": "Users\\Follows",
      "description": "Follow a list of users",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "users",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "429",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "unfollowUser",
      "httpMethod": "delete",
      "tag": "Users\\Follows",
      "description": "Unfollow a user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "checkIfUserIsFollowing",
      "httpMethod": "get",
      "tag": "Users\\Follows",
      "description": "Check if a user is following another user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/following/{follow_user_id}",
      "method": "followUser",
      "httpMethod": "put",
      "tag": "Users\\Follows",
      "description": "Follow a specific user",
      "parameters": [
        {
          "name": "follow_user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the following user."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups",
      "method": "getUserGroups",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "description": "Get all the groups that a user has joined",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "leaveGroup",
      "httpMethod": "delete",
      "tag": "Groups\\Subscription",
      "description": "Remove a user from a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "checkIfUserJoinedGroup",
      "httpMethod": "get",
      "tag": "Groups\\Users",
      "description": "Check if a user has joined a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/groups/{group_id}",
      "method": "joinGroup",
      "httpMethod": "put",
      "tag": "Groups\\Subscription",
      "description": "Add a user to a group",
      "parameters": [
        {
          "name": "group_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the group."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes",
      "method": "getLikes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Get all the videos that a user has liked",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "unlikeVideo",
      "httpMethod": "delete",
      "tag": "Likes\\Essentials",
      "description": "Cause a user to unlike a video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "checkIfUserLikedVideo",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Check if a user has liked a video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/likes/{video_id}",
      "method": "likeVideo",
      "httpMethod": "put",
      "tag": "Likes\\Essentials",
      "description": "Cause a user to like a video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/pages",
      "method": "getUserVods",
      "httpMethod": "get",
      "tag": "On Demand\\Essentials",
      "description": "Get all the On Demand pages of a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The type of On Demand pages to return."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/pages",
      "method": "createVod",
      "httpMethod": "post",
      "tag": "On Demand\\Essentials",
      "description": "Create an On Demand page",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "accepted_currencies",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "buy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "content_rating",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domain_link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "episodes",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "link",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "rent",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subscription",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/ondemand/purchases",
      "method": "checkIfVodWasPurchased",
      "httpMethod": "get",
      "tag": "On Demand\\Purchases and Rentals",
      "description": "Check if a user has made a purchase or rental from an On Demand page",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures",
      "method": "getPictures",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "description": "Get all the pictures that belong to a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures",
      "method": "createPicture",
      "httpMethod": "post",
      "tag": "Users\\Pictures",
      "description": "Add a user picture",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "deletePicture",
      "httpMethod": "delete",
      "tag": "Users\\Pictures",
      "description": "Delete a user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "getPicture",
      "httpMethod": "get",
      "tag": "Users\\Pictures",
      "description": "Get a specific user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/pictures/{portraitset_id}",
      "method": "editPicture",
      "httpMethod": "patch",
      "tag": "Users\\Pictures",
      "description": "Edit a user picture",
      "parameters": [
        {
          "name": "portraitset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios",
      "method": "getPortfolios",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "description": "Get all the portfolios that belong to a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}",
      "method": "getPortfolio",
      "httpMethod": "get",
      "tag": "Portfolios\\Essentials",
      "description": "Get a specific portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos",
      "method": "getPortfolioVideos",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "description": "Get all the videos in a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "deleteVideoFromPortfolio",
      "httpMethod": "delete",
      "tag": "Portfolios\\Videos",
      "description": "Remove a video from a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "getPortfolioVideo",
      "httpMethod": "get",
      "tag": "Portfolios\\Videos",
      "description": "Get a specific video in a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}",
      "method": "addVideoToPortfolio",
      "httpMethod": "put",
      "tag": "Portfolios\\Videos",
      "description": "Add a video to a portfolio",
      "parameters": [
        {
          "name": "portfolio_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the portfolio."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets",
      "method": "getEmbedPresets",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "description": "Get all the embed presets that a user has created",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}",
      "method": "getEmbedPreset",
      "httpMethod": "get",
      "tag": "Embed Presets\\Essentials",
      "description": "Get a specific embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}",
      "method": "editEmbedPreset",
      "httpMethod": "patch",
      "tag": "Embed Presets\\Essentials",
      "description": "Edit an embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "outro",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/presets/{preset_id}/videos",
      "method": "getEmbedPresetVideos",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "description": "Get all the videos that have been added to an embed preset",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects",
      "method": "getProjects",
      "httpMethod": "get",
      "tag": "Projects\\Essentials",
      "description": "Get all the projects that belong to a user",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects",
      "method": "createProject",
      "httpMethod": "post",
      "tag": "Projects\\Essentials",
      "description": "Create a project",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "deleteProject",
      "httpMethod": "delete",
      "tag": "Projects\\Essentials",
      "description": "Delete a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "should_delete_clips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete all the videos in the project along with the project itself."
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "getProject",
      "httpMethod": "get",
      "tag": "Projects\\Essentials",
      "description": "Get a specific project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}",
      "method": "editProject",
      "httpMethod": "patch",
      "tag": "Projects\\Essentials",
      "description": "Edit a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "removeVideosFromProject",
      "httpMethod": "delete",
      "tag": "Projects\\Videos",
      "description": "Remove a list of videos from a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "should_delete_clips",
          "schema": "boolean",
          "required": false,
          "description": "Whether to delete the videos when removing them from the project."
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of the video URIs to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "getProjectVideos",
      "httpMethod": "get",
      "tag": "Projects\\Videos",
      "description": "Get all the videos in a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos",
      "method": "addVideosToProject",
      "httpMethod": "put",
      "tag": "Projects\\Videos",
      "description": "Add a list of videos to a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "uris",
          "schema": "string",
          "required": true,
          "description": "A comma-separated list of video URIs to add."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      "method": "removeVideoFromProject",
      "httpMethod": "delete",
      "tag": "Projects\\Videos",
      "description": "Remove a specific video from a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/projects/{project_id}/videos/{video_id}",
      "method": "addVideoToProject",
      "httpMethod": "put",
      "tag": "Projects\\Videos",
      "description": "Add a specific video to a project",
      "parameters": [
        {
          "name": "project_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/uploads/{upload}",
      "method": "completeStreamingUpload",
      "httpMethod": "delete",
      "tag": "Videos\\Upload",
      "description": "Complete a user's streaming upload",
      "parameters": [
        {
          "name": "upload",
          "schema": "number",
          "required": true,
          "description": "The ID of the upload attempt."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "signature",
          "schema": "string",
          "required": true,
          "description": "The crypto signature of the completed upload."
        },
        {
          "name": "video_file_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the uploaded file."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/uploads/{upload}",
      "method": "getUploadAttempt",
      "httpMethod": "get",
      "tag": "Videos\\Upload",
      "description": "Get a user's upload attempt",
      "parameters": [
        {
          "name": "upload",
          "schema": "number",
          "required": true,
          "description": "The ID of the upload attempt."
        },
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos",
      "method": "getVideos",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Get all the videos that a user has uploaded",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "containing_uri",
          "schema": "string",
          "required": false,
          "description": "The page that contains the video URI. Only available when not paired with `query`."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "filter_playable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter by all playable videos or by all videos that are not  playable."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos",
      "method": "uploadVideo",
      "httpMethod": "post",
      "tag": "Videos\\Upload",
      "description": "Upload a video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "content_rating",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "embed",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "ratings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/videos/{video_id}",
      "method": "checkIfUserOwnsVideo",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Check if a user owns a video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater",
      "method": "getWatchLaterQueue",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Get all the videos in a user's Watch Later queue",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "filter_embeddable",
          "schema": "boolean",
          "required": false,
          "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "deleteVideoFromWatchLater",
      "httpMethod": "delete",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Remove a video from a user's Watch Later queue",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "checkWatchLaterQueue",
      "httpMethod": "get",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Check if a user has added a specific video to their Watch Later queue",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{user_id}/watchlater/{video_id}",
      "method": "addVideoToWatchLater",
      "httpMethod": "put",
      "tag": "Watch Later Queue\\Essentials",
      "description": "Add a video to a user's Watch Later queue",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/videos",
      "method": "searchVideos",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Search for videos",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page."
        },
        {
          "name": "links",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of video URLs to find."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": true,
          "description": "Search query."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        },
        {
          "name": "uris",
          "schema": "string",
          "required": false,
          "description": "The comma-separated list of videos to find."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "deleteVideo",
      "httpMethod": "delete",
      "tag": "Videos\\Essentials",
      "description": "Delete a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "getVideo",
      "httpMethod": "get",
      "tag": "Videos\\Essentials",
      "description": "Get a specific video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}",
      "method": "editVideo",
      "httpMethod": "patch",
      "tag": "Videos\\Essentials",
      "description": "Edit a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "content_rating",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "embed",
          "schema": "object",
          "description": ""
        },
        {
          "name": "license",
          "schema": "string",
          "description": ""
        },
        {
          "name": "locale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "ratings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "review_page",
          "schema": "object",
          "description": ""
        },
        {
          "name": "spatial",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/available_channels",
      "method": "getAvailableVideoChannels",
      "httpMethod": "get",
      "tag": "Channels\\Videos",
      "description": "Get all the channels to which a user can add or remove a specific video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/categories",
      "method": "getVideoCategories",
      "httpMethod": "get",
      "tag": "Categories\\Videos",
      "description": "Get all the categories to which a video belongs",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/categories",
      "method": "suggestVideoCategory",
      "httpMethod": "put",
      "tag": "Categories\\Videos",
      "description": "Suggest categories for a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "category",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments",
      "method": "getComments",
      "httpMethod": "get",
      "tag": "Videos\\Comments",
      "description": "Get all the comments on a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments",
      "method": "createComment",
      "httpMethod": "post",
      "tag": "Videos\\Comments",
      "description": "Add a comment to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "deleteComment",
      "httpMethod": "delete",
      "tag": "Videos\\Comments",
      "description": "Delete a video comment",
      "parameters": [
        {
          "name": "comment_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "getComment",
      "httpMethod": "get",
      "tag": "Videos\\Comments",
      "description": "Get a specific video comment",
      "parameters": [
        {
          "name": "comment_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}",
      "method": "editComment",
      "httpMethod": "patch",
      "tag": "Videos\\Comments",
      "description": "Edit a video comment",
      "parameters": [
        {
          "name": "comment_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}/replies",
      "method": "getCommentReplies",
      "httpMethod": "get",
      "tag": "Videos\\Comments",
      "description": "Get all the replies to a video comment",
      "parameters": [
        {
          "name": "comment_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/comments/{comment_id}/replies",
      "method": "createCommentReply",
      "httpMethod": "post",
      "tag": "Videos\\Comments",
      "description": "Add a reply to a video comment",
      "parameters": [
        {
          "name": "comment_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the comment."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "text",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits",
      "method": "getVideoCredits",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "description": "Get all the credited users in a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "The search query to use to filter the results."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits",
      "method": "addVideoCredit",
      "httpMethod": "post",
      "tag": "Videos\\Credits",
      "description": "Credit a user in a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user_uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "deleteVideoCredit",
      "httpMethod": "delete",
      "tag": "Videos\\Credits",
      "description": "Delete a credit for a user in a video",
      "parameters": [
        {
          "name": "credit_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "getVideoCredit",
      "httpMethod": "get",
      "tag": "Videos\\Credits",
      "description": "Get a specific credited user in a video",
      "parameters": [
        {
          "name": "credit_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/credits/{credit_id}",
      "method": "editVideoCredit",
      "httpMethod": "patch",
      "tag": "Videos\\Credits",
      "description": "Edit a credit for a user in a video",
      "parameters": [
        {
          "name": "credit_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the credit."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/likes",
      "method": "getVideoLikes",
      "httpMethod": "get",
      "tag": "Likes\\Essentials",
      "description": "Get all the users who have liked a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "direction",
          "schema": "string",
          "required": false,
          "description": "The sort direction of the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "The way to sort the results."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures",
      "method": "getVideoThumbnails",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "description": "Get all the thumbnails of a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures",
      "method": "createVideoThumbnail",
      "httpMethod": "post",
      "tag": "Videos\\Thumbnails",
      "description": "Add a video thumbnail",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "time",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "deleteVideoThumbnail",
      "httpMethod": "delete",
      "tag": "Videos\\Thumbnails",
      "description": "Delete a video thumbnail",
      "parameters": [
        {
          "name": "picture_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "getVideoThumbnail",
      "httpMethod": "get",
      "tag": "Videos\\Thumbnails",
      "description": "Get a video thumbnail",
      "parameters": [
        {
          "name": "picture_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/pictures/{picture_id}",
      "method": "editVideoThumbnail",
      "httpMethod": "patch",
      "tag": "Videos\\Thumbnails",
      "description": "Edit a video thumbnail",
      "parameters": [
        {
          "name": "picture_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "deleteVideoEmbedPreset",
      "httpMethod": "delete",
      "tag": "Embed Presets\\Videos",
      "description": "Remove an embed preset from a video",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "getVideoEmbedPreset",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "description": "Check if an embed preset has been added to a video",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/presets/{preset_id}",
      "method": "addVideoEmbedPreset",
      "httpMethod": "put",
      "tag": "Embed Presets\\Videos",
      "description": "Add an embed preset to a video",
      "parameters": [
        {
          "name": "preset_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the preset."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": []
    },
    {
      "url": "/videos/{video_id}/privacy/domains",
      "method": "getVideoPrivacyDomains",
      "httpMethod": "get",
      "tag": "Videos\\Embed Privacy",
      "description": "Get all the domains on which a video can be embedded",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/domains/{domain}",
      "method": "deleteVideoPrivacyDomain",
      "httpMethod": "delete",
      "tag": "Videos\\Embed Privacy",
      "description": "Restrict a video from being embedded on a domain",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain name."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/domains/{domain}",
      "method": "addVideoPrivacyDomain",
      "httpMethod": "put",
      "tag": "Videos\\Embed Privacy",
      "description": "Permit a video to be embedded on a domain",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "The domain name."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users",
      "method": "getVideoPrivacyUsers",
      "httpMethod": "get",
      "tag": "Videos\\Viewing Privacy",
      "description": "Get all the users who can view a user's private videos by default",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users",
      "method": "addVideoPrivacyUsers",
      "httpMethod": "put",
      "tag": "Videos\\Viewing Privacy",
      "description": "Permit a list of users to view a private video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users/{user_id}",
      "method": "deleteVideoPrivacyUser",
      "httpMethod": "delete",
      "tag": "Videos\\Viewing Privacy",
      "description": "Restrict a user from viewing a private video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/privacy/users/{user_id}",
      "method": "addVideoPrivacyUser",
      "httpMethod": "put",
      "tag": "Videos\\Viewing Privacy",
      "description": "Permit a specific user to view a private video",
      "parameters": [
        {
          "name": "user_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the user."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags",
      "method": "getVideoTags",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "description": "Get all the tags of a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags",
      "method": "addVideoTags",
      "httpMethod": "put",
      "tag": "Videos\\Tags",
      "description": "Add a list of tags to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "deleteVideoTag",
      "httpMethod": "delete",
      "tag": "Videos\\Tags",
      "description": "Remove a tag from a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "checkVideoForTag",
      "httpMethod": "get",
      "tag": "Videos\\Tags",
      "description": "Check if a tag has been added to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/tags/{word}",
      "method": "addVideoTag",
      "httpMethod": "put",
      "tag": "Videos\\Tags",
      "description": "Add a specific tag to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "word",
          "schema": "string",
          "required": true,
          "description": "The tag word."
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks",
      "method": "getTextTracks",
      "httpMethod": "get",
      "tag": "Videos\\Text Tracks",
      "description": "Get all the text tracks of a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks",
      "method": "createTextTrack",
      "httpMethod": "post",
      "tag": "Videos\\Text Tracks",
      "description": "Add a text track to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "deleteTextTrack",
      "httpMethod": "delete",
      "tag": "Videos\\Text Tracks",
      "description": "Delete a text track",
      "parameters": [
        {
          "name": "texttrack_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "getTextTrack",
      "httpMethod": "get",
      "tag": "Videos\\Text Tracks",
      "description": "Get a specific text track",
      "parameters": [
        {
          "name": "texttrack_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/texttracks/{texttrack_id}",
      "method": "editTextTrack",
      "httpMethod": "patch",
      "tag": "Videos\\Text Tracks",
      "description": "Edit a text track",
      "parameters": [
        {
          "name": "texttrack_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the text track."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/timelinethumbnails",
      "method": "createVideoCustomLogo",
      "httpMethod": "post",
      "tag": "Embed Presets\\Videos",
      "description": "Add a new custom logo to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/timelinethumbnails/{thumbnail_id}",
      "method": "getVideoCustomLogo",
      "httpMethod": "get",
      "tag": "Embed Presets\\Videos",
      "description": "Get a custom video logo",
      "parameters": [
        {
          "name": "thumbnail_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the picture."
        },
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/versions",
      "method": "createVideoVersion",
      "httpMethod": "post",
      "tag": "Videos\\Versions",
      "description": "Add a version to a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "file_name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "upload",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/videos/{video_id}/videos",
      "method": "getRelatedVideos",
      "httpMethod": "get",
      "tag": "Videos\\Recommendations",
      "description": "Get all the related videos of a video",
      "parameters": [
        {
          "name": "video_id",
          "schema": "number",
          "required": true,
          "description": "The ID of the video."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "The attribute by which to filter the results."
        },
        {
          "name": "page",
          "schema": "number",
          "required": false,
          "description": "The page number of the results to show."
        },
        {
          "name": "per_page",
          "schema": "number",
          "required": false,
          "description": "The number of items to show on each page of results, up to a maximum of 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.vimeo.com",
  "apiTitle": "Vimeo",
  "endpoints": 179,
  "sdkMethods": 326,
  "schemas": 37,
  "parameters": 1050,
  "contactUrl": "https://developer.vimeo.com/help",
  "difficultyScore": 607,
  "difficulty": "Very Hard"
}