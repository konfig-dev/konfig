{
  "providerName": "opentargets.io",
  "openApiRaw": "http://api.opentargets.io/v3/platform/swagger",
  "securitySchemes": {},
  "homepage": "opentargets.io",
  "apiVersion": "19.02.1",
  "methods": [
    {
      "url": "/platform/docs",
      "method": "getApiDocs",
      "httpMethod": "get",
      "tag": "private",
      "description": "Browse API documentation",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/docs/swagger-ui",
      "method": "getApiSwaggerUi",
      "httpMethod": "get",
      "tag": "private",
      "description": "Browse interactive API documentation",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/autocomplete",
      "method": "getAutocomplete",
      "httpMethod": "get",
      "tag": "private",
      "description": "Get `autocomplete` objects.",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "A full text query."
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": "Maximum amount of results to return. Defaults to 5."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/besthitsearch",
      "method": "postBestHitSearch",
      "httpMethod": "post",
      "tag": "private",
      "description": "Find the best hit",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/disease",
      "method": "postDiseaseById",
      "httpMethod": "post",
      "tag": "private",
      "description": "Find information about a list of diseases",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/disease/{disease}",
      "method": "getDiseaseById",
      "httpMethod": "get",
      "tag": "private",
      "description": "Find information about a disease",
      "parameters": [
        {
          "name": "disease",
          "schema": "string",
          "required": true,
          "description": "An EFO identifier."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/drug/{DRUG_ID}",
      "method": "getDrugById",
      "httpMethod": "get",
      "tag": "private",
      "description": "Get drug by ID",
      "parameters": [
        {
          "name": "drugId",
          "schema": "string",
          "required": true,
          "description": "An ID in the drug index."
        },
        {
          "name": "drugId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/eco/{ECO_ID}",
      "method": "getEcObyId",
      "httpMethod": "get",
      "tag": "private",
      "description": "Get evidence code by ID",
      "parameters": [
        {
          "name": "ecoId",
          "schema": "string",
          "required": true,
          "description": "An [evidence code ontology](http://www.ebi.ac.uk/ols/v2/browse.do?ontName=ECO) ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/enrichment/targets",
      "method": "postEnrichmentTarget",
      "httpMethod": "post",
      "tag": "private",
      "description": "Enrichment analysis",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/quicksearch",
      "method": "getQuickSearch",
      "httpMethod": "get",
      "tag": "private",
      "description": "Search most relevant results",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "A full text query."
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": "Maximum amount of results to return. Defaults to 5."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/relation",
      "method": "postRelation",
      "httpMethod": "post",
      "tag": "private",
      "description": "Find related entities",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/relation/disease/{disease}",
      "method": "getRelationByEfoid",
      "httpMethod": "get",
      "tag": "private",
      "description": "Find related entities by disease",
      "parameters": [
        {
          "name": "disease",
          "schema": "string",
          "required": true,
          "description": "An EFO gene identifier."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/relation/target/{target}",
      "method": "getRelationByEnsgid",
      "httpMethod": "get",
      "tag": "private",
      "description": "Find related entities by target",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": "An Ensembl gene identifier."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/target",
      "method": "postTargetByEnsgid",
      "httpMethod": "post",
      "tag": "private",
      "description": "Find information about a list of targets",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/target/expression",
      "method": "getTargetExpressionByEnsgid",
      "httpMethod": "get",
      "tag": "private",
      "description": "Query expression levels",
      "parameters": [
        {
          "name": "gene",
          "schema": "string",
          "required": true,
          "description": "An Ensembl gene identifier."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/private/target/expression",
      "method": "postTargetExpressionByEnsgid",
      "httpMethod": "post",
      "tag": "private",
      "description": "Batch query expression levels",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/private/target/{target}",
      "method": "getTargetByEnsgid",
      "httpMethod": "get",
      "tag": "private",
      "description": "Find information about a target",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": "An Ensembl gene ID for the target of interest."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/association",
      "method": "getAssociationById",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get association by id",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "An association ID usually in the form of `TARGET_ID-DISEASE_ID`."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/association/filter",
      "method": "getAssociationFilter",
      "httpMethod": "get",
      "tag": "public",
      "description": "Filter available associations",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": "A target identifier listed as target.id."
        },
        {
          "name": "disease",
          "schema": "string",
          "required": false,
          "description": "An EFO code listed as disease.id."
        },
        {
          "name": "therapeuticArea",
          "schema": "string",
          "required": false,
          "description": "An EFO code of a therapeutic area."
        },
        {
          "name": "datasource",
          "schema": "string",
          "required": false,
          "description": "Data source to consider."
        },
        {
          "name": "datatype",
          "schema": "string",
          "required": false,
          "description": "Data type to consider."
        },
        {
          "name": "pathway",
          "schema": "string",
          "required": false,
          "description": "A Reactome pathway identifier (returning only those targets linked to the specified pathway)."
        },
        {
          "name": "targetClass",
          "schema": "string",
          "required": false,
          "description": "A ChEMBL target class identifier (returning only those targets belonging to the specified class)."
        },
        {
          "name": "uniprotkw",
          "schema": "string",
          "required": false,
          "description": "A UniProt keyword (meaning all the targets linked to that keyword)."
        },
        {
          "name": "direct",
          "schema": "boolean",
          "required": false,
          "description": "If `true`, it returns associations that have at least one direct evidence connecting the target and the disease. If `false` it only returns associations for which there is no direct evidence connecting the target and the disease, but only evidence connecting the target to a children of the disease in the EFO ontology."
        },
        {
          "name": "datastructure",
          "schema": "string",
          "required": false,
          "description": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "Fields you want to retrieve. This will get priority over the data structure requested."
        },
        {
          "name": "facets",
          "schema": "boolean",
          "required": false,
          "description": "Returns facets"
        },
        {
          "name": "scorevalueMin",
          "schema": "number",
          "required": false,
          "description": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points."
        },
        {
          "name": "scorevalueMax",
          "schema": "number",
          "required": false,
          "description": "Filter by maximum score value."
        },
        {
          "name": "scorevalueTypes",
          "schema": "string",
          "required": false,
          "description": "Score types to apply the score value min and max filters. The default is `overall`."
        },
        {
          "name": "size",
          "schema": "number",
          "required": false,
          "description": "Maximum amount of results to return. Defaults to 10, max is 10000."
        },
        {
          "name": "from",
          "schema": "number",
          "required": false,
          "description": "How many initial results should be skipped. Defaults to 0."
        },
        {
          "name": "format",
          "schema": "string",
          "required": false,
          "description": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort by the given score type. Defaults to 'overall' and descending order. Use '~' prefix to do ascending\norder e.g. '~overall'. You will call a data type score like: 'datatypes.literature', and a data source as\n'datasources.gwas'. Supports multiple entries.\n"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Restrict the filtered results to those matching the passed string. The matching is done with a\nphrase match prefix.\n"
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/association/filter",
      "method": "postAssociationFilter",
      "httpMethod": "post",
      "tag": "public",
      "description": "Batch query available associations",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/evidence",
      "method": "getEvidenceById",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get evidence by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Internal unique ID of the evidence string to retrieve."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/evidence",
      "method": "postEvidenceById",
      "httpMethod": "post",
      "tag": "public",
      "description": "Get evidence for a list of IDs",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/evidence/filter",
      "method": "getEvidenceFilter",
      "httpMethod": "get",
      "tag": "public",
      "description": "Filter available evidence",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": "A target identifier listed as target.id."
        },
        {
          "name": "disease",
          "schema": "string",
          "required": false,
          "description": "An EFO code listed as disease.id."
        },
        {
          "name": "dataSource",
          "schema": "string",
          "required": false,
          "description": "Data source to consider."
        },
        {
          "name": "datatype",
          "schema": "string",
          "required": false,
          "description": "Data type to consider."
        },
        {
          "name": "pathway",
          "schema": "string",
          "required": false,
          "description": "A pathway identifier (meaning all the targets linked to that pathway)."
        },
        {
          "name": "uniprotkw",
          "schema": "string",
          "required": false,
          "description": "A UniProt keyword (meaning all the targets linked to that keyword)."
        },
        {
          "name": "datastructure",
          "schema": "string",
          "required": false,
          "description": "Type of data structure to return. Can be 'full', 'simple', 'ids', or 'count'."
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields you want to retrieve. This will get priority over the data structure requested."
        },
        {
          "name": "scorevalueMin",
          "schema": "number",
          "required": false,
          "description": "Filter by minimum score value. The default is 0, but using 0.2 is a good trade-off to filter lower quality data points."
        },
        {
          "name": "scorevalueMax",
          "schema": "number",
          "required": false,
          "description": "Filter by maximum score value."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort by the given field. The default is 'scores.association_score' in descending order. Use '~' prefix to do ascending\norder e.g. '~scores.association_score'. It supports multiple entries.\n"
        },
        {
          "name": "size",
          "schema": "number",
          "required": false,
          "description": "Maximum amount of results to return. Defaults to 10, max is 10000."
        },
        {
          "name": "from",
          "schema": "number",
          "required": false,
          "description": "How many initial results should be skipped. Defaults to 0."
        },
        {
          "name": "format",
          "schema": "string",
          "required": false,
          "description": "Format to get the data back. Can be 'json', 'xml', 'tab' or 'csv'. **Note** that this option can only be used when calling the API directly and will not work in this page. The response here will always be JSON."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/evidence/filter",
      "method": "postEvidenceFilter",
      "httpMethod": "post",
      "tag": "public",
      "description": "Batch filter available evidence",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/search",
      "method": "getSearch",
      "httpMethod": "get",
      "tag": "public",
      "description": "Search for a disease or a target",
      "parameters": [
        {
          "name": "q",
          "schema": "string",
          "required": true,
          "description": "A full text query."
        },
        {
          "name": "size",
          "schema": "string",
          "required": false,
          "description": "Maximum amount of results to return. Defaults to 10, max is 10000."
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "How many initial results should be skipped. Defaults to 0."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Restrict the search to the type requested. Eg. `target` or `disease`."
        }
      ],
      "responses": []
    },
    {
      "url": "/platform/public/utils/metrics",
      "method": "getDataMetrics",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get metrics about the current data release",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/utils/ping",
      "method": "getPing",
      "httpMethod": "get",
      "tag": "public",
      "description": "Ping service",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/utils/stats",
      "method": "getDataStats",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get statistics about the current data release",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/utils/therapeuticareas",
      "method": "getTherapeuticAreas",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get the list of therapeutic areas about the current data release",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/public/utils/version",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "public",
      "description": "Get API version",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/platform/swagger",
      "method": "getSwagger",
      "httpMethod": "get",
      "tag": "private",
      "description": "Get OpenAPI schema",
      "parameters": [],
      "responses": []
    }
  ],
  "apiBaseUrl": "//platform-api.opentargets.io/v3",
  "apiDescription": "### The Open Targets Platform REST API\n\nThe Open Targets Platform API ('Application Programming Interface') allows programmatic retrieval of the Open Targets Platform data via a set of [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) services.\n\nYou can make calls to the latest version of our API using the base URL `https://platform-api.opentargets.io/v3/platform`. Please make sure you use `https` instead of the unencrypted `http` calls, which we do not accept.\n\nWe list below the methods available to query our data directly from the API, followed by an interactive interface that you can use to try out the parameters and execute the REST-API calls.\n\nFor every request you create, the interactive interface will display both a [curl](https://curl.haxx.se/) command and a request URL that you can use to ensure you get the expected response before using your application or workflow. \n\nCheck our documentation for some [API tutorials](https://docs.targetvalidation.org/tutorials/api-tutorials) and [get in touch](mailto:support@targetvalidation.org) if you have any questions.\n\n### Available Methods\n\nThe available methods can be grouped in three types:\n\n* __public__ - Methods that serve the core set of our data. These are stable and we fully supported them.\n* __private__ - Methods used by the web app to serve additional data not specific to our platform. These methods\nmay change without notice and should be used with caution.\n* __utils__ - Methods to get statistics and technical data about our API.\n\n### Supported formats\n\nThe methods above are all available via a `GET` request, and will serve outputs as `JSON`.\n\nAlternative output formats, such `xml`, `csv` and `tab`, are also available for some of the methods. However alternative output formats are not supported in interactive interface below where the response will be always in `JSON.\n\nIf you have complex queries with large number of parameters, you should use a `POST` request instead of  `GET`. \n`POST` methods require a body encoded as `json`. When querying for a specific disease using the latest version of the API, your call would look like the example below:\n\n```sh\ncurl -X POST -d '{\"disease\":[\"EFO_0000253\"]}' --header 'Content-Type: application/json' https://platform-api.opentargets.io/v3/platform/public/evidence/filter\n```\n### How to interpret a response\n\nEach HTTPS response will serve data in headers and body. The headers will give you details about your query, such as how long it took to run.\n\nIn the body of the response, you will find the data you have requested for in `JSON` format. The [jq](https://stedolan.github.io/jq/) program is a useful tool to parse the json response while on the command line.\n\n```sh\ncurl https://platform-api.opentargets.io/v3/platform/public/association/filter\\?target\\=ENSG00000157764 | jq\n```\n\nWe do not analyse the nature of any specific API queries except for the purposes of improving the performance of our API.\nRead more in our [privacy section](https://www.targetvalidation.org/terms_of_use#privacy).\n\nHow can we make the Open Targets Platform API more useful to you? Would you like additional methods to be implemented?\nPlease [get in touch](mailto:support@targetvalidation.org) and send your suggestions.\n",
  "apiTitle": "Open Targets Platform REST API",
  "endpoints": 27,
  "sdkMethods": 31,
  "schemas": 0,
  "parameters": 52,
  "contactEmail": "support@targetvalidation.org",
  "difficultyScore": 44,
  "difficulty": "Easy"
}