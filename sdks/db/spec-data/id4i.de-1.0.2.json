{
  "providerName": "id4i.de",
  "openApiRaw": "https://backend.id4i.de/docs/swagger.json",
  "securitySchemes": {
    "Authorization": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "homepage": "id4i.de",
  "apiVersion": "1.0.2",
  "methods": [
    {
      "url": "/account/password",
      "method": "requestPasswordReset",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Request password reset",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/password",
      "method": "verifyPasswordReset",
      "httpMethod": "put",
      "tag": "Accounts",
      "description": "Verify password reset",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/registration",
      "method": "registerUser",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Register user",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/registration",
      "method": "completeRegistration",
      "httpMethod": "put",
      "tag": "Accounts",
      "description": "Complete registration",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "verificationToken",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/verification",
      "method": "verifyUserRegistration",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Verify registration",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys",
      "method": "listAllApiKeysOfOrganization",
      "httpMethod": "get",
      "tag": "Api Keys",
      "description": "Find API key by organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The namespace of the organization to search in."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys",
      "method": "createNewApiKey",
      "httpMethod": "post",
      "tag": "Api Keys",
      "description": "Create API key",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/privileges",
      "method": "listAllApiKeyPrivileges",
      "httpMethod": "get",
      "tag": "Api Keys",
      "description": "List all privileges",
      "parameters": [
        {
          "name": "id4nConcerning",
          "schema": "boolean",
          "required": false,
          "description": "id4nConcerning"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}",
      "method": "deleteApiKey",
      "httpMethod": "delete",
      "tag": "Api Keys",
      "description": "Delete API key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The API key to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}",
      "method": "getApiKey",
      "httpMethod": "get",
      "tag": "Api Keys",
      "description": "Show API key",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The API key to show."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}",
      "method": "updateApiKey",
      "httpMethod": "put",
      "tag": "Api Keys",
      "description": "Update API keys",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "The API key to be updated."
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "newLabel",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges",
      "method": "removeApiKeyPrivilege",
      "httpMethod": "delete",
      "tag": "Api Keys",
      "description": "Remove privilege",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "privilege",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges",
      "method": "listApiKeyPrivileges",
      "httpMethod": "get",
      "tag": "Api Keys",
      "description": "List privileges",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges",
      "method": "addApiKeyPrivilege",
      "httpMethod": "post",
      "tag": "Api Keys",
      "description": "Add privilege",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "privilege",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
      "method": "removeApiKeyPrivilegeForId4Ns",
      "httpMethod": "delete",
      "tag": "Api Keys",
      "description": "Remove id4ns of a privilege",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "privilege",
          "schema": "string",
          "required": true,
          "description": "privilege"
        },
        {
          "name": "id4ns",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
      "method": "listId4Ns",
      "httpMethod": "get",
      "tag": "Api Keys",
      "description": "ID4ns of a privilege",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "privilege",
          "schema": "string",
          "required": true,
          "description": "privilege"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/apikeys/{key}/privileges/{privilege}/id4ns",
      "method": "addApiKeyPrivilegeForId4Ns",
      "httpMethod": "post",
      "tag": "Api Keys",
      "description": "Add ID4ns of a privilege",
      "parameters": [
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "key"
        },
        {
          "name": "privilege",
          "schema": "string",
          "required": true,
          "description": "privilege"
        },
        {
          "name": "id4ns",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/billing/{organizationId}",
      "method": "getSumForOrganization",
      "httpMethod": "get",
      "tag": "Billing",
      "description": "Get billing amount of services for a given organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The organization to compute the billing information for"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "required": false,
          "description": "Billing start date"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": false,
          "description": "Billing end date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/billing/{organizationId}/positions",
      "method": "getPositionsForOrganization",
      "httpMethod": "get",
      "tag": "Billing",
      "description": "Get billing positions for a given organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The organization to compute the billing information for"
        },
        {
          "name": "fromDate",
          "schema": "string",
          "required": false,
          "description": "Billing start date"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": false,
          "description": "Billing end date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/changelog/organization/{organizationId}/",
      "method": "listOrganizationChangeLog",
      "httpMethod": "get",
      "tag": "Auditing",
      "description": "List change log entries of an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace identifying the organization whose change log entries are to be listed"
        },
        {
          "name": "messageMimeType",
          "schema": "string",
          "required": false,
          "description": "The Mime-type for the message format that should be returned. e.g. 'text/plain' or 'text/mustache' "
        },
        {
          "name": "fromDate",
          "schema": "string",
          "required": false,
          "description": "From date time as UTC Date-Time format"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": false,
          "description": "To date time as UTC Date-Time format"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections",
      "method": "createCollection",
      "httpMethod": "post",
      "tag": "Collections",
      "description": "Create collection",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "length",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}",
      "method": "deleteCollection",
      "httpMethod": "delete",
      "tag": "Collections",
      "description": "Delete collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}",
      "method": "findCollection",
      "httpMethod": "get",
      "tag": "Collections",
      "description": "Find collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}",
      "method": "updateCollection",
      "httpMethod": "patch",
      "tag": "Collections",
      "description": "Update collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "createdTimestamp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "holderOrganizationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id4n",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ownerOrganizationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "physicalState",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}/elements",
      "method": "removeElementsFromCollection",
      "httpMethod": "delete",
      "tag": "Collections",
      "description": "Remove elements from collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "id4ns",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}/elements",
      "method": "listElementsOfCollection",
      "httpMethod": "get",
      "tag": "Collections",
      "description": "List contents of the collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization namespace."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/collections/{id4n}/elements",
      "method": "addElementsToCollection",
      "httpMethod": "post",
      "tag": "Collections",
      "description": "Add elements to collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "id4ns",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/countries",
      "method": "listCountries",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List countries",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}",
      "method": "listAllDocuments",
      "httpMethod": "get",
      "tag": "Storage",
      "description": "List documents",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": "Filter by owner organization"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}",
      "method": "listDocuments",
      "httpMethod": "get",
      "tag": "Storage",
      "description": "List organization specific documents",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": "Filter by owner organization"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}",
      "method": "createDocument",
      "httpMethod": "post",
      "tag": "Storage",
      "description": "Create an document for an id4n",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}",
      "method": "putDocument",
      "httpMethod": "put",
      "tag": "Storage",
      "description": "Put an document for an id4n",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "content",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}/{fileName}",
      "method": "deleteDocument",
      "httpMethod": "delete",
      "tag": "Storage",
      "description": "Delete a document",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}/{fileName}",
      "method": "readDocument",
      "httpMethod": "get",
      "tag": "Storage",
      "description": "Read document contents",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata",
      "method": "getDocument",
      "httpMethod": "get",
      "tag": "Storage",
      "description": "Retrieve a document (meta-data only, no content)",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata",
      "method": "updateDocumentMetadata",
      "httpMethod": "patch",
      "tag": "Storage",
      "description": "Update a document",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        },
        {
          "name": "filename",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mimeType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/guids",
      "method": "createGuid",
      "httpMethod": "post",
      "tag": "Guids",
      "description": "Create GUID(s)",
      "parameters": [
        {
          "name": "count",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "length",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of id4ns"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/guids/withoutCollection",
      "method": "getGuidsWithoutCollection",
      "httpMethod": "get",
      "tag": "Guids",
      "description": "Retrieve GUIDs not in any collection",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization to search GUIDs for"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/guids/{id4n}",
      "method": "getGuid",
      "httpMethod": "get",
      "tag": "Guids",
      "description": "Retrieve GUID information",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The GUID number"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization namespace to resolve."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/guids/{id4n}",
      "method": "updateGuid",
      "httpMethod": "patch",
      "tag": "Guids",
      "description": "Change GUID information.",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The GUID number"
        },
        {
          "name": "createdTimestamp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "holderOrganizationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id4n",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ownerOrganizationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "physicalState",
          "schema": "string",
          "description": ""
        },
        {
          "name": "properties",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}",
      "method": "filteredList",
      "httpMethod": "get",
      "tag": "History",
      "description": "List history",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "includePrivate",
          "schema": "boolean",
          "required": false,
          "description": "Also return private history entries"
        },
        {
          "name": "organization",
          "schema": "string",
          "required": false,
          "description": "Show only entries created by one of the given organizations. This parameter can be used multiple times."
        },
        {
          "name": "type",
          "schema": "array",
          "required": false,
          "description": "Show only entries matching one of the given history item types. This parameter can be used multiple times."
        },
        {
          "name": "qualifier",
          "schema": "array",
          "required": false,
          "description": "Show only entries matching one of the given history item qualifiers (additional property de.id4i.history.item.qualifier). This parameter can be used multiple times."
        },
        {
          "name": "fromDate",
          "schema": "string",
          "required": false,
          "description": "From date time as UTC Date-Time format"
        },
        {
          "name": "toDate",
          "schema": "string",
          "required": false,
          "description": "To date time as UTC Date-Time format"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}",
      "method": "addItem",
      "httpMethod": "post",
      "tag": "History",
      "description": "Add history item",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "additionalProperties",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ownerOrganizationId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sequenceId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}/{organizationId}",
      "method": "list",
      "httpMethod": "get",
      "tag": "History",
      "description": "DEPRECATED - List history",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "includePrivate",
          "schema": "boolean",
          "required": false,
          "description": "Also return private history entries"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}/{organizationId}/{sequenceId}",
      "method": "retrieveItem",
      "httpMethod": "get",
      "tag": "History",
      "description": "Get history item",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "sequenceId",
          "schema": "integer",
          "required": true,
          "description": "sequenceId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GUID history item"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}/{organizationId}/{sequenceId}",
      "method": "updateItem",
      "httpMethod": "patch",
      "tag": "History",
      "description": "Update history item",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "sequenceId",
          "schema": "integer",
          "required": true,
          "description": "sequenceId"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "visibility",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GUID history item"
        }
      ]
    },
    {
      "url": "/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility",
      "method": "updateItemVisibility",
      "httpMethod": "put",
      "tag": "History",
      "description": "Set history item visibility",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "sequenceId",
          "schema": "integer",
          "required": true,
          "description": "sequenceId"
        },
        {
          "name": "public",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sharedOrganizationIds",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "GUID history item"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}",
      "method": "getId4N",
      "httpMethod": "get",
      "tag": "Guids",
      "description": "Retrieve ID4n information",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The ID to resolve to"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization namespace to resolve."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/alias",
      "method": "getGuidAliases",
      "httpMethod": "get",
      "tag": "Alias",
      "description": "Get all aliases for the given GUID or Collection.",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The GUID or Collection to operate on"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/alias/{aliasType}",
      "method": "removeGuidAlias",
      "httpMethod": "delete",
      "tag": "Alias",
      "description": "Remove aliases from GUID or Collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The GUID or Collection to operate on"
        },
        {
          "name": "aliasType",
          "schema": "string",
          "required": true,
          "description": "Alias type, see the corresponding API model"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/alias/{aliasType}",
      "method": "addGuidAlias",
      "httpMethod": "post",
      "tag": "Alias",
      "description": "Add alias for GUID or Collection",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The GUID or Collection to operate on"
        },
        {
          "name": "aliasType",
          "schema": "string",
          "required": true,
          "description": "Alias type, see the corresponding API model"
        },
        {
          "name": "alias",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/collections",
      "method": "getCollections",
      "httpMethod": "get",
      "tag": "Guids",
      "description": "Retrieve collections of an ID",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The ID which the collections should contain"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization holding the collections."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/properties",
      "method": "deleteProperties",
      "httpMethod": "delete",
      "tag": "Collections",
      "description": "Delete ID4n properties",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The id4n"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The organization namespace to work on while deleting the properties."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/properties",
      "method": "getProperties",
      "httpMethod": "get",
      "tag": "Collections",
      "description": "Retrieve ID4n properties",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The id4n"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization namespace."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/id4ns/{id4n}/properties",
      "method": "patchProperties",
      "httpMethod": "patch",
      "tag": "Collections",
      "description": "Patch ID4n properties",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The id4n"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The organization namespace to work on while patching the properties."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/import/gs1",
      "method": "importGs1Codes",
      "httpMethod": "post",
      "tag": "Guids",
      "description": "Import GS1/MAPP codes",
      "parameters": [
        {
          "name": "listOfGS1s",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/info",
      "method": "applicationInfo",
      "httpMethod": "get",
      "tag": "Meta Information",
      "description": "Retrieve version information about ID4i",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/microstorage/{id4n}/{organization}",
      "method": "readFromMicrostorage",
      "httpMethod": "get",
      "tag": "Storage",
      "description": "Read data from microstorage",
      "parameters": [
        {
          "name": "organization",
          "schema": "string",
          "required": true,
          "description": "organization"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/microstorage/{id4n}/{organization}",
      "method": "writeToMicrostorage",
      "httpMethod": "put",
      "tag": "Storage",
      "description": "Write data to microstorage",
      "parameters": [
        {
          "name": "organization",
          "schema": "string",
          "required": true,
          "description": "organization"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "Content-Type",
          "schema": "string",
          "required": false,
          "description": "Content-Type"
        },
        {
          "name": "Content-Length",
          "schema": "integer",
          "required": false,
          "description": "Content-Length"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/multiple/id4ns/properties",
      "method": "getMultipleProperties",
      "httpMethod": "get",
      "tag": "Collections",
      "description": "Get multiple ID4n properties",
      "parameters": [
        {
          "name": "id4ns",
          "schema": "array",
          "required": true,
          "description": "The list of ID4ns to resolve."
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "The organization namespace."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of id4n properties"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations",
      "method": "createOrganization",
      "httpMethod": "post",
      "tag": "Organizations",
      "description": "Create organization",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "logoURL",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An organization"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}",
      "method": "deleteOrganization",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Delete organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization to be deleted."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}",
      "method": "findOrganization",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Find organization by id/namespace",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization to be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An organization"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}",
      "method": "updateOrganization",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Update organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization to be updated."
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An organization"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/addresses/billing",
      "method": "deleteOrganizationBillingAddress",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Remove billing address",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/addresses/billing",
      "method": "findOrganizationBillingAddress",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Retrieve billing address",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/addresses/billing",
      "method": "updateOrganizationBillingAddress",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Store billing address",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "companyName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "countryCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "countryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "firstname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lastname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "postCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "telephone",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/addresses/default",
      "method": "findOrganizationAddress",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Retrieve address",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/addresses/default",
      "method": "updateOrganizationAddress",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Store address",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "city",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "companyName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "countryCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "countryName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "firstname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lastname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "postCode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "street",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "telephone",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/collections",
      "method": "getAllCollectionsOfOrganization",
      "httpMethod": "get",
      "tag": "Collections",
      "description": "Get collections of organization",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": "Filter by this type"
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": "Filter by this label"
        },
        {
          "name": "labelPrefix",
          "schema": "string",
          "required": false,
          "description": "Filter by this label prefix"
        },
        {
          "name": "property",
          "schema": "array",
          "required": false,
          "description": "List of i4dn property filter. e.g. \"com.myorga.state:IN:waiting|processing\" or \"com.myorga.orderId:EQ:SAP001\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/logo",
      "method": "deleteOrganizationLogo",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Delete organization logo",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization where the logo should be deleted."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/logo",
      "method": "setOrganizationLogo",
      "httpMethod": "post",
      "tag": "Organizations",
      "description": "Update organization logo",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization where the logo should be updated."
        },
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/messaging",
      "method": "getDefaultQueue",
      "httpMethod": "get",
      "tag": "Messaging",
      "description": "",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/messaging",
      "method": "patchDefaultQueue",
      "httpMethod": "patch",
      "tag": "Messaging",
      "description": "",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "purgeQueue",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/organizations/{organizationId}/messaging/enqueueCustomMessage",
      "method": "enqueueCustomMessage",
      "httpMethod": "post",
      "tag": "Messaging",
      "description": "Enqueue a custom message",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The organisation namespace"
        },
        {
          "name": "data",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/partner",
      "method": "removePartnerOrganization",
      "httpMethod": "delete",
      "tag": "Organizations",
      "description": "Remove partner",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/partner",
      "method": "getPartnerOrganizations",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Get partners of an organization",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization to query partner organizations"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/partner",
      "method": "addPartnerOrganization",
      "httpMethod": "put",
      "tag": "Organizations",
      "description": "Add partner",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/privileges",
      "method": "getOrganizationPrivileges",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List my privileges",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/roles",
      "method": "getAllOrganizationRoles",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "List users and their roles",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/users",
      "method": "getUsersOfOrganization",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Find users in organization",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/users/invite",
      "method": "inviteUsers",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Invite Users",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization where users should be invited"
        },
        {
          "name": "invitations",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/users/{username}/roles",
      "method": "removeUserRoles",
      "httpMethod": "delete",
      "tag": "Accounts",
      "description": "Remove role(s) from user",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username"
        },
        {
          "name": "roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/users/{username}/roles",
      "method": "getUserRoles",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Get user roles by username",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/organizations/{organizationId}/users/{username}/roles",
      "method": "addUserRoles",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "Add role(s) to user",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "The namespace of the organization"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username"
        },
        {
          "name": "roles",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/documents/{id4n}",
      "method": "listAllPublicDocuments",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "List public documents",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": "Filter by owner organization"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}",
      "method": "readPublicDocument",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Read public document contents",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata",
      "method": "getPublicDocument",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Retrieve a public document (meta-data only, no content)",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "organizationId"
        },
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "fileName",
          "schema": "string",
          "required": true,
          "description": "fileName"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/history/{id4n}",
      "method": "listPublicHistory",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Shows the public history of the given GUID",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "GUID to retrieve the history for"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/image/{imageID}",
      "method": "resolveImageUsingGet",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Resolve image",
      "parameters": [
        {
          "name": "imageID",
          "schema": "string",
          "required": true,
          "description": "The id of the image to be resolved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/organizations/{organizationId}",
      "method": "readOrganizationInfo",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Read public organization information",
      "parameters": [
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": "Organization ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An organization"
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/public/routes/{id4n}",
      "method": "getRoutes",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Retrieve all public routes for a GUID",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "type"
        },
        {
          "name": "interpolate",
          "schema": "boolean",
          "required": false,
          "description": "interpolate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/roles",
      "method": "listAllRoles",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "List roles",
      "parameters": [
        {
          "name": "privilege",
          "schema": "string",
          "required": false,
          "description": "If specified the roles will be filtered containing that privilege."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/routingfiles/{id4n}",
      "method": "getRoutingFile",
      "httpMethod": "get",
      "tag": "Routing",
      "description": "Retrieve routing file",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "organizationId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/routingfiles/{id4n}",
      "method": "updateRoutingFile",
      "httpMethod": "put",
      "tag": "Routing",
      "description": "Store routing file",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "routing",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/routingfiles/{id4n}/route/{type}",
      "method": "getRoute",
      "httpMethod": "get",
      "tag": "Routing",
      "description": "Retrieve current route of a GUID (or ID4N)",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of route you want to have"
        },
        {
          "name": "privateRoutes",
          "schema": "boolean",
          "required": false,
          "description": "privateRoutes"
        },
        {
          "name": "publicRoutes",
          "schema": "boolean",
          "required": false,
          "description": "publicRoutes"
        },
        {
          "name": "interpolate",
          "schema": "boolean",
          "required": false,
          "description": "interpolate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/routingfiles/{id4n}/routes/{type}",
      "method": "getAllRoutes",
      "httpMethod": "get",
      "tag": "Routing",
      "description": "Retrieve all routes of a GUID (or ID4N)",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of route you want to have"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": false,
          "description": "organizationId"
        },
        {
          "name": "interpolate",
          "schema": "boolean",
          "required": false,
          "description": "interpolate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/search/guids",
      "method": "searchByAlias",
      "httpMethod": "get",
      "tag": "Alias",
      "description": "Search for GUIDs by alias",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "required": true,
          "description": "The alias to search for"
        },
        {
          "name": "aliasType",
          "schema": "string",
          "required": true,
          "description": "Alias type type to search for"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/search/guids/aliases/types",
      "method": "getGuidAliasTypes",
      "httpMethod": "get",
      "tag": "Alias",
      "description": "List all supported alias types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/transfers/{id4n}/receiveInfo",
      "method": "receive",
      "httpMethod": "put",
      "tag": "Transfer",
      "description": "Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "This ID4N identifies the object to take hold of"
        },
        {
          "name": "organizationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/transfers/{id4n}/sendInfo",
      "method": "getSendInfo",
      "httpMethod": "get",
      "tag": "Transfer",
      "description": "Show transfer preparation information",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The ID4N to retrieve information about"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/transfers/{id4n}/sendInfo",
      "method": "prepare",
      "httpMethod": "put",
      "tag": "Transfer",
      "description": "Prepare an object for transfer",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "The ID4N to prepare for transfer"
        },
        {
          "name": "holderOrganizationId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "keepOwnership",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "openForClaims",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "ownerOrganizationId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recipientOrganizationIds",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/user/organizations",
      "method": "getOrganizationsOfUser",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Retrieve organizations of user",
      "parameters": [
        {
          "name": "role",
          "schema": "string",
          "required": false,
          "description": "role"
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users",
      "method": "findUsers",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Find users",
      "parameters": [
        {
          "name": "usernamePrefix",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Start with the n-th element"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum count of returned elements"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/{username}",
      "method": "findUserByUsername",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Find by username",
      "parameters": [
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": "username"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/go/{guid}",
      "method": "go",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Forward",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "guid"
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/login",
      "method": "login",
      "httpMethod": "post",
      "tag": "Accounts",
      "description": "ID4i API Login",
      "parameters": [
        {
          "name": "login",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "401",
          "description": ""
        }
      ]
    },
    {
      "url": "/whois/{id4n}",
      "method": "resolveWhoIsEntry",
      "httpMethod": "get",
      "tag": "Public Services",
      "description": "Resolve owner of id4n",
      "parameters": [
        {
          "name": "id4n",
          "schema": "string",
          "required": true,
          "description": "id4n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "405",
          "description": ""
        },
        {
          "statusCode": "406",
          "description": ""
        },
        {
          "statusCode": "415",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "//backend.id4i.de",
  "apiDescription": "ID4i HTTP API",
  "apiTitle": "ID4i API",
  "endpoints": 70,
  "sdkMethods": 107,
  "schemas": 78,
  "parameters": 320,
  "contactUrl": "http://bluerain.de",
  "contactEmail": "info@bluerain.de",
  "difficultyScore": 226,
  "difficulty": "Hard"
}