{
  "providerName": "tokenjay.app",
  "openApiRaw": "https://api.tokenjay.app/api-docs",
  "securitySchemes": {},
  "homepage": "tokenjay.app",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/ageusd/info",
      "method": "getAgeUsdInfo",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Returns state of AgeUSD at this moment",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/cancelbabel/{boxId}",
      "method": "ergoPayCreateBabelBox1",
      "httpMethod": "get",
      "tag": "babel-fee-controller",
      "description": "",
      "parameters": [
        {
          "name": "boxId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/createbabel/{address}",
      "method": "ergoPayCreateBabelBox",
      "httpMethod": "get",
      "tag": "babel-fee-new-offer-controller",
      "description": "",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ergAmount",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "tokenAmount",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/babelfee/",
      "method": "getBabelFeeOverview",
      "httpMethod": "get",
      "tag": "babel-fee-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/babelfee/newoffer",
      "method": "getBabelFeeNewOffer",
      "httpMethod": "get",
      "tag": "babel-fee-new-offer-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/babelfee/newoffer/doit",
      "method": "doCreateBabelBox",
      "httpMethod": "post",
      "tag": "babel-fee-new-offer-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/babelfee/newoffer/new-input",
      "method": "replaceTokenAmountInputFields",
      "httpMethod": "post",
      "tag": "babel-fee-new-offer-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/babelfee/notificationcheck",
      "method": "checkForNotifications",
      "httpMethod": "get",
      "tag": "babel-fee-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/boxconsolidation/",
      "method": "mainApp1",
      "httpMethod": "get",
      "tag": "box-consolidation-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/boxconsolidation/consolidate/{p2pkaddress}",
      "method": "epConsolidate",
      "httpMethod": "get",
      "tag": "box-consolidation-controller",
      "description": "",
      "parameters": [
        {
          "name": "p2Pkaddress",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/tokenburn",
      "method": "mainApp",
      "httpMethod": "get",
      "tag": "token-burn-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/tokenburn/get/{uuid}",
      "method": "getBurningTransaction",
      "httpMethod": "get",
      "tag": "token-burn-controller",
      "description": "",
      "parameters": [
        {
          "name": "uuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/mosaik/tokenburn/prepare",
      "method": "prepareTransaction",
      "httpMethod": "post",
      "tag": "token-burn-controller",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment/addrequest",
      "method": "addPaymentRequest",
      "httpMethod": "post",
      "tag": "paymentPortal",
      "description": "Creates a new payment request. Will return request id to check for transaction state and ergopay url to show the user as QR code",
      "parameters": [
        {
          "name": "message",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "nanoErg",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "receiverAddress",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "senderAddress",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tokenId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tokenRawAmount",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment/state/{requestId}",
      "method": "getPaymentState",
      "httpMethod": "get",
      "tag": "paymentPortal",
      "description": "Returns the state of a payment request. Please note that payment requests are purged after some time, so persist the state at your side when needed",
      "parameters": [
        {
          "name": "requestId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/peers/list",
      "method": "getPeersList",
      "httpMethod": "get",
      "tag": "peerDetection",
      "description": "Lists known peers sorted by block height",
      "parameters": [
        {
          "name": "unreachable",
          "schema": "boolean",
          "required": false,
          "description": "Set to true to show unreachable peers in the list"
        },
        {
          "name": "closedApi",
          "schema": "boolean",
          "required": false,
          "description": "Set to true to show peers not open to be connected"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigrsv/exchange/",
      "method": "doSigmaRsvExchange",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Builds ErgoPayRequest for SigRSV exchange",
      "parameters": [
        {
          "name": "amount",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "checkRate",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "executionFee",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigrsv/exchange/{amount}/info",
      "method": "calcSigmaRsvExchange",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Calculates SigRSV exchange",
      "parameters": [
        {
          "name": "amount",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigrsv/price",
      "method": "getSigmaRsvPrice",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Lists price and available volume for SigmaRSV",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigusd/exchange/",
      "method": "doSigmaUsdExchange",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Builds ErgoPayRequest for SigUSD exchange",
      "parameters": [
        {
          "name": "amount",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "checkRate",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "executionFee",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigusd/exchange/{amount}/info",
      "method": "calcSigmaUsdExchange",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Calculates SigUSD exchange",
      "parameters": [
        {
          "name": "amount",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/sigusd/price",
      "method": "getSigmaUsdPrice",
      "httpMethod": "get",
      "tag": "ageUsd",
      "description": "Lists price and available volume for SigmaUSD",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/check/{tokenId}/{tokenName}",
      "method": "checkToken",
      "httpMethod": "get",
      "tag": "tokenVerification",
      "description": "Check a token verification",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tokenName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/listBlocked",
      "method": "listBlocked",
      "httpMethod": "get",
      "tag": "tokenVerification",
      "description": "Lists all blocked tokens",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/listGenuine",
      "method": "listGenuine",
      "httpMethod": "get",
      "tag": "tokenVerification",
      "description": "Lists all genuine tokens known",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/prices/all",
      "method": "getTokenPrices",
      "httpMethod": "get",
      "tag": "tokenPrices",
      "description": "Lists all token prices and available volume",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/prices/{tokenId}",
      "method": "getTokenPrice",
      "httpMethod": "get",
      "tag": "tokenPrices",
      "description": "Lists price and available volume for a certain token",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.tokenjay.app/",
  "apiDescription": "Please see usage policies on tokenjay.app",
  "apiTitle": "TokenJay API services",
  "endpoints": 27,
  "sdkMethods": 27,
  "schemas": 16,
  "parameters": 30,
  "difficultyScore": 42.5,
  "difficulty": "Easy"
}