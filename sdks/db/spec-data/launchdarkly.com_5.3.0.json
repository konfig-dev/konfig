{
  "providerName": "launchdarkly.com",
  "openApiRaw": "https://launchdarkly.github.io/ld-openapi/openapi.json",
  "securitySchemes": {
    "Token": {
      "description": "https://app.launchdarkly.com/settings#/tokens",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "homepage": "launchdarkly.com",
  "apiVersion": "5.3.0",
  "methods": [
    {
      "url": "/",
      "method": "getRoot",
      "httpMethod": "get",
      "tag": "Root",
      "description": "You can issue a GET request to the root resource to find all of the resource categories supported by the API.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/relay-auto-configs",
      "method": "getRelayProxyConfigs",
      "httpMethod": "get",
      "tag": "Relay proxy configurations",
      "description": "Returns a list of relay proxy configurations in the account.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/relay-auto-configs",
      "method": "postRelayAutoConfig",
      "httpMethod": "post",
      "tag": "Relay proxy configurations",
      "description": "Create a new relay proxy config.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policy",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/relay-auto-configs/{id}",
      "method": "deleteRelayProxyConfig",
      "httpMethod": "delete",
      "tag": "Relay proxy configurations",
      "description": "Delete a relay proxy configuration by ID.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The relay proxy configuration ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/account/relay-auto-configs/{id}",
      "method": "getRelayProxyConfig",
      "httpMethod": "get",
      "tag": "Relay proxy configurations",
      "description": "Get a single relay proxy configuration by ID.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The relay proxy configuration ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/relay-auto-configs/{id}",
      "method": "patchRelayProxyConfig",
      "httpMethod": "patch",
      "tag": "Relay proxy configurations",
      "description": "Modify a relay proxy configuration by ID.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The relay proxy configuration ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/relay-auto-configs/{id}/reset",
      "method": "resetRelayProxyConfig",
      "httpMethod": "post",
      "tag": "Relay proxy configurations",
      "description": "Reset a relay proxy configuration's secret key with an optional expiry time for the old key.",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The relay proxy configuration ID"
        },
        {
          "name": "expiry",
          "schema": "integer",
          "required": false,
          "description": "An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/auditlog",
      "method": "getAuditLogEntries",
      "httpMethod": "get",
      "tag": "Audit log",
      "description": "Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.",
      "parameters": [
        {
          "name": "before",
          "schema": "integer",
          "required": false,
          "description": "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp."
        },
        {
          "name": "after",
          "schema": "integer",
          "required": false,
          "description": "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp."
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change."
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "A limit on the number of audit log entries to be returned, between 1 and 20."
        },
        {
          "name": "spec",
          "schema": "string",
          "required": false,
          "description": "A resource specifier, allowing you to filter audit log listings by resource."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/auditlog/{resourceId}",
      "method": "getAuditLogEntry",
      "httpMethod": "get",
      "tag": "Audit log",
      "description": "Use this endpoint to fetch a single audit log entry by its resouce ID.",
      "parameters": [
        {
          "name": "resourceId",
          "schema": "string",
          "required": true,
          "description": "The resource ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/destinations",
      "method": "getDestinations",
      "httpMethod": "get",
      "tag": "Data export destinations",
      "description": "Returns a list of all data export destinations.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/destinations/{projectKey}/{environmentKey}",
      "method": "postDestination",
      "httpMethod": "post",
      "tag": "Data export destinations",
      "description": "Create a new data export destination",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "kind",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "on",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/destinations/{projectKey}/{environmentKey}/{destinationId}",
      "method": "deleteDestination",
      "httpMethod": "delete",
      "tag": "Data export destinations",
      "description": "Get a single data export destination by ID",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "destinationId",
          "schema": "string",
          "required": true,
          "description": "The data export destination ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/destinations/{projectKey}/{environmentKey}/{destinationId}",
      "method": "getDestination",
      "httpMethod": "get",
      "tag": "Data export destinations",
      "description": "Get a single data export destination by ID",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "destinationId",
          "schema": "string",
          "required": true,
          "description": "The data export destination ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/destinations/{projectKey}/{environmentKey}/{destinationId}",
      "method": "patchDestination",
      "httpMethod": "patch",
      "tag": "Data export destinations",
      "description": "Perform a partial update to a data export destination.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "destinationId",
          "schema": "string",
          "required": true,
          "description": "The data export destination ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flag-status/{projectKey}/{featureFlagKey}",
      "method": "getFeatureFlagStatusAcrossEnvironments",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get the status for a particular feature flag across environments",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/flag-statuses/{projectKey}/{environmentKey}",
      "method": "getFeatureFlagStatuses",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}",
      "method": "getFeatureFlagStatus",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get the status for a particular feature flag.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}",
      "method": "getFeatureFlags",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get a list of all features in the given project.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "env",
          "schema": "array",
          "required": false,
          "description": "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment."
        },
        {
          "name": "summary",
          "schema": "boolean",
          "required": false,
          "description": "By default in api version >= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned."
        },
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": "When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags."
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "The number of objects to return. Defaults to -1, which returns everything."
        },
        {
          "name": "offset",
          "schema": "number",
          "required": false,
          "description": "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of filters. Each filter is of the form field:value."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order."
        },
        {
          "name": "tag",
          "schema": "string",
          "required": false,
          "description": "Filter by tag. A tag can be used to group flags across projects."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}",
      "method": "postFeatureFlag",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Creates a new feature flag.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "clone",
          "schema": "string",
          "required": false,
          "description": "The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag."
        },
        {
          "name": "clientSideAvailability",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "defaults",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "includeInSnippet",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "temporary",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "variations",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags",
      "method": "/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependentFlagsGet",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get dependent flags for the flag in the environment specified in path parameters",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}",
      "method": "deleteFeatureFlag",
      "httpMethod": "delete",
      "tag": "Feature flags",
      "description": "Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": []
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}",
      "method": "getFeatureFlag",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get a single feature flag by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "env",
          "schema": "array",
          "required": false,
          "description": "By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}",
      "method": "patchFeatureFlag",
      "httpMethod": "patch",
      "tag": "Feature flags",
      "description": "Perform a partial update to a feature.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "patch",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}/copy",
      "method": "copyFeatureFlag",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Copies the feature flag configuration from one environment to the same feature flag in another environment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "excludedActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "includedActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "source",
          "schema": "object",
          "description": ""
        },
        {
          "name": "target",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}/dependent-flags",
      "method": "/flags/{projectKey}/{featureFlagKey}/dependentFlagsGet",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get dependent flags across all environments for the flag specified in the path parameters",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
      "method": "getExpiringUserTargets",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get expiring user targets for feature flag",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
      "method": "patchExpiringUserTargets",
      "httpMethod": "patch",
      "tag": "Feature flags",
      "description": "Update, add, or delete expiring user targets on feature flag",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations",
      "method": "getIntegrations",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get a list of all configured audit log event integrations associated with this account.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/{integrationKey}",
      "method": "getIntegrationSubscriptions",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get a list of all configured integrations of a given kind.",
      "parameters": [
        {
          "name": "integrationKey",
          "schema": "string",
          "required": true,
          "description": "The key used to specify the integration kind."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/{integrationKey}",
      "method": "postIntegrationSubscription",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Create a new integration subscription of a given kind.",
      "parameters": [
        {
          "name": "integrationKey",
          "schema": "string",
          "required": true,
          "description": "The key used to specify the integration kind."
        },
        {
          "name": "config",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "on",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "statements",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/{integrationKey}/{integrationId}",
      "method": "deleteIntegrationSubscription",
      "httpMethod": "delete",
      "tag": "Integrations",
      "description": "Delete an integration subscription by ID.",
      "parameters": [
        {
          "name": "integrationKey",
          "schema": "string",
          "required": true,
          "description": "The key used to specify the integration kind."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The integration ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/integrations/{integrationKey}/{integrationId}",
      "method": "getIntegrationSubscription",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get a single integration subscription by ID.",
      "parameters": [
        {
          "name": "integrationKey",
          "schema": "string",
          "required": true,
          "description": "The key used to specify the integration kind."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The integration ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/integrations/{integrationKey}/{integrationId}",
      "method": "patchIntegrationSubscription",
      "httpMethod": "patch",
      "tag": "Integrations",
      "description": "Modify an integration subscription by ID.",
      "parameters": [
        {
          "name": "integrationKey",
          "schema": "string",
          "required": true,
          "description": "The key used to specify the integration kind."
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "The integration ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/members",
      "method": "getMembers",
      "httpMethod": "get",
      "tag": "Team members",
      "description": "Returns a list of all members in the account.",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "The number of objects to return. Defaults to -1, which returns everything."
        },
        {
          "name": "offset",
          "schema": "number",
          "required": false,
          "description": "Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of filters. Each filter is of the form field:value."
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/members",
      "method": "postMembers",
      "httpMethod": "post",
      "tag": "Team members",
      "description": "Invite new members.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/members/me",
      "method": "getMe",
      "httpMethod": "get",
      "tag": "Team members",
      "description": "Get the current team member associated with the token",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/members/{memberId}",
      "method": "deleteMember",
      "httpMethod": "delete",
      "tag": "Team members",
      "description": "Delete a team member by ID.",
      "parameters": [
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "The member ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/members/{memberId}",
      "method": "getMember",
      "httpMethod": "get",
      "tag": "Team members",
      "description": "Get a single team member by ID.",
      "parameters": [
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "The member ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/members/{memberId}",
      "method": "patchMember",
      "httpMethod": "patch",
      "tag": "Team members",
      "description": "Modify a team member by ID.",
      "parameters": [
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "The member ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "getProjects",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Returns a list of all projects in the account.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "postProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Create a new project with the given key and name.",
      "parameters": [
        {
          "name": "defaultClientSideAvailability",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "environments",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "includeInSnippetByDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}",
      "method": "deleteProject",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        }
      ],
      "responses": []
    },
    {
      "url": "/projects/{projectKey}",
      "method": "getProject",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Fetch a single project by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}",
      "method": "patchProject",
      "httpMethod": "patch",
      "tag": "Projects",
      "description": "Modify a project by ID.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/environments",
      "method": "postEnvironment",
      "httpMethod": "post",
      "tag": "Environments",
      "description": "Create a new environment in a specified project with a given name, key, and swatch color.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "color",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "confirmChanges",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "defaultTrackEvents",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "defaultTtl",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "requireComments",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "secureMode",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/environments/{environmentKey}",
      "method": "deleteEnvironment",
      "httpMethod": "delete",
      "tag": "Environments",
      "description": "Delete an environment in a specific project.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": []
    },
    {
      "url": "/projects/{projectKey}/environments/{environmentKey}",
      "method": "getEnvironment",
      "httpMethod": "get",
      "tag": "Environments",
      "description": "Get an environment given a project and key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/environments/{environmentKey}",
      "method": "patchEnvironment",
      "httpMethod": "patch",
      "tag": "Environments",
      "description": "Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/environments/{environmentKey}/apiKey",
      "method": "resetEnvironmentSdkKey",
      "httpMethod": "post",
      "tag": "Environments",
      "description": "Reset an environment's SDK key with an optional expiry time for the old key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "expiry",
          "schema": "integer",
          "required": false,
          "description": "An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/environments/{environmentKey}/mobileKey",
      "method": "resetEnvironmentMobileKey",
      "httpMethod": "post",
      "tag": "Environments",
      "description": "Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "expiry",
          "schema": "integer",
          "required": false,
          "description": "The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests",
      "method": "getApprovalRequests",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get all approval requests for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
      "method": "deleteApprovalRequest",
      "httpMethod": "delete",
      "tag": "Feature flags",
      "description": "Delete an approval request for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "approvalRequestId",
          "schema": "string",
          "required": true,
          "description": "The approval request ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "executionDate",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "instructions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "notifyMemberIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "operatingOnId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
      "method": "getApprovalRequest",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get a single approval request for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "approvalRequestId",
          "schema": "string",
          "required": true,
          "description": "The approval request ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
      "method": "postApprovalRequest",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Create an approval request for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "approvalRequestId",
          "schema": "string",
          "required": true,
          "description": "The approval request ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "executionDate",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "instructions",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "notifyMemberIds",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "operatingOnId",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply",
      "method": "postApplyApprovalRequest",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Apply approval request for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "approvalRequestId",
          "schema": "string",
          "required": true,
          "description": "The approval request ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review",
      "method": "postReviewApprovalRequest",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Review approval request for a feature flag config",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "approvalRequestId",
          "schema": "string",
          "required": true,
          "description": "The approval request ID"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "kind",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
      "method": "getFlagConfigScheduledChanges",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get all scheduled workflows for a feature flag by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
      "method": "postFlagConfigScheduledChanges",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Creates a new scheduled change for a feature flag.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "executionDate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "instructions",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts",
      "method": "getFlagConfigScheduledChangesConflicts",
      "httpMethod": "post",
      "tag": "Feature flags",
      "description": "Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "executionDate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "instructions",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
      "method": "deleteFlagConfigScheduledChanges",
      "httpMethod": "delete",
      "tag": "Feature flags",
      "description": "Delete a scheduled change on a feature flag in an environment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "scheduledChangeId",
          "schema": "string",
          "required": true,
          "description": "The id of the scheduled change"
        }
      ],
      "responses": []
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
      "method": "getFlagConfigScheduledChange",
      "httpMethod": "get",
      "tag": "Feature flags",
      "description": "Get a scheduled change on a feature flag by id.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "scheduledChangeId",
          "schema": "string",
          "required": true,
          "description": "The id of the scheduled change"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
      "method": "patchFlagConfigScheduledChange",
      "httpMethod": "patch",
      "tag": "Feature flags",
      "description": "Updates an existing scheduled-change on a feature flag in an environment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "scheduledChangeId",
          "schema": "string",
          "required": true,
          "description": "The id of the scheduled change"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "instructions",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/roles",
      "method": "getCustomRoles",
      "httpMethod": "get",
      "tag": "Custom roles",
      "description": "Return a complete list of custom roles.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/roles",
      "method": "postCustomRole",
      "httpMethod": "post",
      "tag": "Custom roles",
      "description": "Create a new custom role.",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policy",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/roles/{customRoleKey}",
      "method": "deleteCustomRole",
      "httpMethod": "delete",
      "tag": "Custom roles",
      "description": "Delete a custom role by key.",
      "parameters": [
        {
          "name": "customRoleKey",
          "schema": "string",
          "required": true,
          "description": "The custom role key."
        }
      ],
      "responses": []
    },
    {
      "url": "/roles/{customRoleKey}",
      "method": "getCustomRole",
      "httpMethod": "get",
      "tag": "Custom roles",
      "description": "Get one custom role by key.",
      "parameters": [
        {
          "name": "customRoleKey",
          "schema": "string",
          "required": true,
          "description": "The custom role key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/roles/{customRoleKey}",
      "method": "patchCustomRole",
      "httpMethod": "patch",
      "tag": "Custom roles",
      "description": "Modify a custom role by key.",
      "parameters": [
        {
          "name": "customRoleKey",
          "schema": "string",
          "required": true,
          "description": "The custom role key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}",
      "method": "getUserSegments",
      "httpMethod": "get",
      "tag": "User segments",
      "description": "Get a list of all user segments in the given project.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "tag",
          "schema": "string",
          "required": false,
          "description": "Filter by tag. A tag can be used to group flags across projects."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}",
      "method": "postUserSegment",
      "httpMethod": "post",
      "tag": "User segments",
      "description": "Creates a new user segment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "unbounded",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
      "method": "deleteUserSegment",
      "httpMethod": "delete",
      "tag": "User segments",
      "description": "Delete a user segment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        }
      ],
      "responses": []
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
      "method": "getUserSegment",
      "httpMethod": "get",
      "tag": "User segments",
      "description": "Get a single user segment by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}/{userSegmentKey}",
      "method": "patchUserSegment",
      "httpMethod": "patch",
      "tag": "User segments",
      "description": "Perform a partial update to a user segment.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{environmentKey}/{userSegmentKey}/users",
      "method": "updateBigSegmentTargets",
      "httpMethod": "post",
      "tag": "User segments",
      "description": "Update targets included or excluded in a big segment",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        },
        {
          "name": "excluded",
          "schema": "object",
          "description": ""
        },
        {
          "name": "included",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}",
      "method": "getExpiringUserTargetsOnSegment",
      "httpMethod": "get",
      "tag": "User segments",
      "description": "Get expiring user targets for user segment",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}",
      "method": "patchExpiringUserTargetsOnSegment",
      "httpMethod": "patch",
      "tag": "User segments",
      "description": "Update, add, or delete expiring user targets on user segment",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userSegmentKey",
          "schema": "string",
          "required": true,
          "description": "The user segment's key. The key identifies the user segment in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "getTokens",
      "httpMethod": "get",
      "tag": "Access tokens",
      "description": "Returns a list of tokens in the account.",
      "parameters": [
        {
          "name": "showAll",
          "schema": "boolean",
          "required": false,
          "description": "If set to true, and the authentication access token has the \"Admin\" role, personal access tokens for all members will be retrieved."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens",
      "method": "postToken",
      "httpMethod": "post",
      "tag": "Access tokens",
      "description": "Create a new token.",
      "parameters": [
        {
          "name": "customRoleIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultApiVersion",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "inlineRole",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serviceToken",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/{tokenId}",
      "method": "deleteToken",
      "httpMethod": "delete",
      "tag": "Access tokens",
      "description": "Delete an access token by ID.",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The access token ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/tokens/{tokenId}",
      "method": "getToken",
      "httpMethod": "get",
      "tag": "Access tokens",
      "description": "Get a single access token by ID.",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The access token ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/{tokenId}",
      "method": "patchToken",
      "httpMethod": "patch",
      "tag": "Access tokens",
      "description": "Modify an access token by ID.",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The access token ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tokens/{tokenId}/reset",
      "method": "resetToken",
      "httpMethod": "post",
      "tag": "Access tokens",
      "description": "Reset an access token's secret key with an optional expiry time for the old key.",
      "parameters": [
        {
          "name": "tokenId",
          "schema": "string",
          "required": true,
          "description": "The access token ID."
        },
        {
          "name": "expiry",
          "schema": "integer",
          "required": false,
          "description": "An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage",
      "method": "getUsage",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Returns of the usage endpoints available.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/evaluations/{envId}/{flagKey}",
      "method": "getEvaluations",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get events usage by event id and the feature flag key.",
      "parameters": [
        {
          "name": "envId",
          "schema": "string",
          "required": true,
          "description": "The environment id for the flag evaluations in question."
        },
        {
          "name": "flagKey",
          "schema": "string",
          "required": true,
          "description": "The key of the flag we want metrics for."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/events",
      "method": "getEvents",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get events usage endpoints.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/events/{type}",
      "method": "getEvent",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get events usage by event type.",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": "The type of event we would like to track."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/mau",
      "method": "getMau",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get monthly active user data.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/mau/bycategory",
      "method": "getMauByCategory",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get monthly active user data by category.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/streams",
      "method": "getStreams",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Returns a list of all streams.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/streams/{source}",
      "method": "getStream",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get a stream endpoint and return timeseries data.",
      "parameters": [
        {
          "name": "source",
          "schema": "string",
          "required": true,
          "description": "The source of where the stream comes from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/streams/{source}/bysdkversion",
      "method": "getStreamBySdk",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get a stream timeseries data by source show sdk version metadata.",
      "parameters": [
        {
          "name": "source",
          "schema": "string",
          "required": true,
          "description": "The source of where the stream comes from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/usage/streams/{source}/sdkversions",
      "method": "getStreamSdkVersion",
      "httpMethod": "get",
      "tag": "Customer Metrics",
      "description": "Get a stream timeseries data by source and show all sdk version associated.",
      "parameters": [
        {
          "name": "source",
          "schema": "string",
          "required": true,
          "description": "The source of where the stream comes from."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/user-search/{projectKey}/{environmentKey}",
      "method": "getSearchUsers",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "Search query."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Pagination limit."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "Specifies the first item to return in the collection."
        },
        {
          "name": "after",
          "schema": "integer",
          "required": false,
          "description": "A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{environmentKey}",
      "method": "getUsers",
      "httpMethod": "get",
      "tag": "Users",
      "description": "List all users in the environment. Includes the total count of users. In each page, there will be up to 'limit' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Pagination limit."
        },
        {
          "name": "h",
          "schema": "string",
          "required": false,
          "description": "This parameter is required when following \"next\" links."
        },
        {
          "name": "scrollId",
          "schema": "string",
          "required": false,
          "description": "This parameter is required when following \"next\" links."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{environmentKey}/{userKey}",
      "method": "deleteUser",
      "httpMethod": "delete",
      "tag": "Users",
      "description": "Delete a user by ID.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{projectKey}/{environmentKey}/{userKey}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users",
      "description": "Get a user by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{environmentKey}/{userKey}/flags",
      "method": "getUserFlagSettings",
      "httpMethod": "get",
      "tag": "User settings",
      "description": "Fetch a single flag setting for a user by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
      "method": "getUserFlagSetting",
      "httpMethod": "get",
      "tag": "User settings",
      "description": "Fetch a single flag setting for a user by key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
      "method": "putFlagSetting",
      "httpMethod": "put",
      "tag": "User settings",
      "description": "Specifically enable or disable a feature flag for a user based on their key.",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        },
        {
          "name": "featureFlagKey",
          "schema": "string",
          "required": true,
          "description": "The feature flag's key. The key identifies the flag in your code."
        },
        {
          "name": "setting",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
      "method": "getExpiringUserTargetsForUser",
      "httpMethod": "get",
      "tag": "User settings",
      "description": "Get expiring dates on flags for user",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
      "method": "patchExpiringUserTargetsForFlags",
      "httpMethod": "patch",
      "tag": "User settings",
      "description": "Update, add, or delete expiring user targets for a single user on all flags",
      "parameters": [
        {
          "name": "projectKey",
          "schema": "string",
          "required": true,
          "description": "The project key, used to tie the flags together under one project so they can be managed together."
        },
        {
          "name": "environmentKey",
          "schema": "string",
          "required": true,
          "description": "The environment key, used to tie together flag configuration and users under one environment so they can be managed together."
        },
        {
          "name": "userKey",
          "schema": "string",
          "required": true,
          "description": "The user's key."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks",
      "method": "getWebhooks",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Fetch a list of all webhooks.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks",
      "method": "postWebhook",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Create a webhook.",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "on",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sign",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "statements",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{resourceId}",
      "method": "deleteWebhook",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "description": "Delete a webhook by ID.",
      "parameters": [
        {
          "name": "resourceId",
          "schema": "string",
          "required": true,
          "description": "The resource ID."
        }
      ],
      "responses": []
    },
    {
      "url": "/webhooks/{resourceId}",
      "method": "getWebhook",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Get a webhook by ID.",
      "parameters": [
        {
          "name": "resourceId",
          "schema": "string",
          "required": true,
          "description": "The resource ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/webhooks/{resourceId}",
      "method": "patchWebhook",
      "httpMethod": "patch",
      "tag": "Webhooks",
      "description": "Modify a webhook by ID.",
      "parameters": [
        {
          "name": "resourceId",
          "schema": "string",
          "required": true,
          "description": "The resource ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://app.launchdarkly.com/api/v2",
  "apiDescription": "Build custom integrations with the LaunchDarkly REST API",
  "apiTitle": "LaunchDarkly REST API",
  "endpoints": 64,
  "sdkMethods": 105,
  "schemas": 107,
  "parameters": 299,
  "contactUrl": "https://support.launchdarkly.com",
  "contactEmail": "support@launchdarkly.com",
  "difficultyScore": 233.25,
  "difficulty": "Hard"
}