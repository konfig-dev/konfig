{
  "providerName": "lgtm.com",
  "openApiRaw": "https://lgtm.com/api/v1.0/openapi",
  "homepage": "lgtm.com",
  "apiVersion": "v1.0",
  "methods": [
    {
      "url": "/",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "API root",
      "description": "Version information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/analyses/{analysis-id}",
      "method": "getAnalysis",
      "httpMethod": "get",
      "tag": "Analyses",
      "description": "Get analysis summary",
      "parameters": [
        {
          "name": "analysis-id",
          "schema": "string",
          "required": true,
          "description": "The analysis identifier."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/analyses/{analysis-id}/alerts",
      "method": "getAlerts",
      "httpMethod": "get",
      "tag": "Analyses",
      "description": "Get detailed alert information",
      "parameters": [
        {
          "name": "analysis-id",
          "schema": "string",
          "required": true,
          "description": "The analysis identifier."
        },
        {
          "name": "sarif-version",
          "schema": "string",
          "required": false,
          "description": "The desired version of the SARIF format. Currently supported versions are `1.0.0`, `2.0.0`, and `2.1.0`."
        },
        {
          "name": "excluded-files",
          "schema": "boolean",
          "required": false,
          "description": "Set `true` to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/analyses/{project-id}",
      "method": "requestAnalysis",
      "httpMethod": "post",
      "tag": "Analyses",
      "description": "Run analysis of a specific commit",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "commit",
          "schema": "string",
          "required": true,
          "description": "The identifier of the commit to analyze."
        },
        {
          "name": "language",
          "schema": "array",
          "required": false,
          "description": "The language codes of the languages to analyze.\nFor a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project's languages will be analyzed.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/analyses/{project-id}/commits/{commit-id}",
      "method": "getAnalysisForCommit",
      "httpMethod": "get",
      "tag": "Analyses",
      "description": "Get analysis summary for a specific commit",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "commit-id",
          "schema": "string",
          "required": true,
          "description": "The identifier of a specific commit. Alternatively, use `latest` for the most recent analyzed commit."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/codereviews/{project-id}",
      "method": "requestReview",
      "httpMethod": "post",
      "tag": "Code reviews",
      "description": "Run code review for a patch",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "base",
          "schema": "string",
          "required": true,
          "description": "The identifier for the base commit."
        },
        {
          "name": "external-id",
          "schema": "integer",
          "required": true,
          "description": "Your reference number for the code review."
        },
        {
          "name": "review-url",
          "schema": "string",
          "required": false,
          "description": "An informative back-link to an external system."
        },
        {
          "name": "callback-url",
          "schema": "string",
          "required": false,
          "description": "The callback URL for LGTM to post to on completion of the review.\nWhen the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [`/codereviews/{review-id}`](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point.\nIf you specify a `callback-secret`, the request also includes an `x-lgtm-signature` header with a digital signature of the request's contents.\n"
        },
        {
          "name": "callback-secret",
          "schema": "string",
          "required": false,
          "description": "The `callback-secret` is used to compute a signature which is included in the `x-lgtm-signature` header of the callback response.\nThe receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the `x-lgtm-signature` header value.\nThe HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/codereviews/{review-id}",
      "method": "getCodeReview",
      "httpMethod": "get",
      "tag": "Code reviews",
      "description": "Get results of code review",
      "parameters": [
        {
          "name": "review-id",
          "schema": "string",
          "required": true,
          "description": "The identifier for the review (from the `task-result-url`)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/issues/{project-id}/{alert-key}",
      "method": "getIssue",
      "httpMethod": "get",
      "tag": "Issues",
      "description": "Get detailed alert information for an issue",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "alert-key",
          "schema": "string",
          "required": true,
          "description": "The alert key is generated by LGTM when it posts an issue `create` webhook request \n to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).\n This key is an opaque identifier that tracks the alert's location over time. For example, if a file containing the alert\n is modified, the SARIF data will reflect the updated location of the alert.\n Note that the key needs to be URL encoded as it may contain characters that are not web-safe.  \n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/openapi",
      "method": "getSpec",
      "httpMethod": "get",
      "tag": "API root",
      "description": "API specification",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/operations/{operation-id}",
      "method": "getOperation",
      "httpMethod": "get",
      "tag": "Operations",
      "description": "Get operation status",
      "parameters": [
        {
          "name": "operation-id",
          "schema": "integer",
          "required": true,
          "description": "The operation identifier returned on creating the task."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "getProjects",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "List projects",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum number of projects to return in each response (1-100)."
        },
        {
          "name": "start",
          "schema": "string",
          "required": false,
          "description": "An opaque identifier generated by the API."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "addProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Add a project to LGTM",
      "parameters": [
        {
          "name": "repository",
          "schema": "string",
          "required": true,
          "description": "The URL of the repository to analyze.\nLGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn't match any of them, the request fails."
        },
        {
          "name": "language",
          "schema": "array",
          "required": false,
          "description": "Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze.\nTo request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.\n"
        },
        {
          "name": "mode",
          "schema": "string",
          "required": false,
          "description": "The analysis mode of the new project.\nWhen set to `full` all commits of the project are analyzed; when set to `sparse` the latest commit of the project is analyzed periodically; when set to `upload`,  no automatic analysis is performed, instead externally-generated databases should be uploaded.\nFor new projects the default value is `full`. The `mode` parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.\n"
        },
        {
          "name": "commit",
          "schema": "string",
          "required": false,
          "description": "Required when `mode=upload`, specify the identifier of the commit used to generate the database."
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": "Optional when `mode=upload`, specify the date and time of the commit used to generate the database; defaults to the current time."
        },
        {
          "name": "worker-label",
          "schema": "array",
          "required": false,
          "description": "Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project. \nTo specify more than one label, repeat the query parameter.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{project-id}",
      "method": "deleteProject",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete project by numeric identifier",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{project-id}",
      "method": "getProject",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project by numeric identifier",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{project-id}/settings/analysis-configuration",
      "method": "getProjectConfig",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get configuration for a project identified by numeric identifier",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier"
        },
        {
          "name": "source",
          "schema": "string",
          "required": false,
          "description": "The type of project configuration to retrieve.\nIf this parameter isn't specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from:\n* the repository\n* the administrator-set, project configuration\n* the global configuration.\n\nIf you do specify this value, it must be one of:\n\n * `repository` to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration. \n\n * `administrator` to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{project-id}/settings/analysis-configuration",
      "method": "setProjectConfig",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Set the administrator configuration for a project identified by numeric identifier",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{provider}/{org}/{name}",
      "method": "getProjectByUrlIdentifier",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project by URL identifier",
      "parameters": [
        {
          "name": "provider",
          "schema": "string",
          "required": true,
          "description": "The first part of the URL identifier of a project, which represents the repository host."
        },
        {
          "name": "org",
          "schema": "string",
          "required": true,
          "description": "The second part of the URL identifier of a project, the organization."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The third part of the URL identifier of a project, the repository name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queryjobs",
      "method": "createQueryJob",
      "httpMethod": "post",
      "tag": "Query jobs",
      "description": "Run a CodeQL query on one or more projects",
      "parameters": [
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.\n"
        },
        {
          "name": "project-id",
          "schema": "array",
          "required": false,
          "description": "The identifier of the project to analyze. Either `project-id` or `projects-list` must be specified."
        },
        {
          "name": "projects-list",
          "schema": "string",
          "required": false,
          "description": "Name of the list containing the projects to analyze. Either `project-id` or `projects-list` must be specified."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/queryjobs/{queryjob-id}",
      "method": "getQueryJob",
      "httpMethod": "get",
      "tag": "Query jobs",
      "description": "Get the status of a query job",
      "parameters": [
        {
          "name": "queryjob-id",
          "schema": "string",
          "required": true,
          "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queryjobs/{queryjob-id}/results",
      "method": "getQueryJobResultsOverview",
      "httpMethod": "get",
      "tag": "Query jobs",
      "description": "Provide a summary of results for the projects in the query job",
      "parameters": [
        {
          "name": "queryjob-id",
          "schema": "string",
          "required": true,
          "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request."
        },
        {
          "name": "start",
          "schema": "string",
          "required": false,
          "description": "An opaque identifier generated by the API used for pagination. \nThis identifier will be included as part of the response for this endpoint whenever more than one page of results is available. \n"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The number of results to return. Useful for pagination."
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "Only return a subset of results. Legal values are `w-results`, `wo-results`, `error`."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queryjobs/{queryjob-id}/results/{project-id}",
      "method": "getQueryJobResultsForProject",
      "httpMethod": "get",
      "tag": "Query jobs",
      "description": "Fetch the results of a query job for a specific project",
      "parameters": [
        {
          "name": "queryjob-id",
          "schema": "string",
          "required": true,
          "description": "The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request."
        },
        {
          "name": "project-id",
          "schema": "string",
          "required": true,
          "description": "The identifier for the project."
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Start point for the page of results."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The maximum number of results to display (less than 100)."
        },
        {
          "name": "nofilter",
          "schema": "boolean",
          "required": false,
          "description": "Include results that are not part of the source tree. These results are filtered out by default."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/snapshots/uploads/{session-id}",
      "method": "abortUpload",
      "httpMethod": "delete",
      "tag": "Snapshots",
      "description": "Abort database upload process",
      "parameters": [
        {
          "name": "session-id",
          "schema": "string",
          "required": true,
          "description": "The id of the upload session."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/snapshots/uploads/{session-id}",
      "method": "completeUpload",
      "httpMethod": "post",
      "tag": "Snapshots",
      "description": "Complete snapshot upload session",
      "parameters": [
        {
          "name": "session-id",
          "schema": "string",
          "required": true,
          "description": "The id of the upload session."
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": ""
        }
      ]
    },
    {
      "url": "/snapshots/uploads/{session-id}",
      "method": "uploadPart",
      "httpMethod": "put",
      "tag": "Snapshots",
      "description": "Upload snapshot",
      "parameters": [
        {
          "name": "session-id",
          "schema": "string",
          "required": true,
          "description": "The id of the upload session."
        }
      ],
      "responses": []
    },
    {
      "url": "/snapshots/{project-id}/{language}",
      "method": "getSnapshot",
      "httpMethod": "get",
      "tag": "Snapshots",
      "description": "Download a snapshot",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "The language of the database to download."
        }
      ],
      "responses": []
    },
    {
      "url": "/snapshots/{project-id}/{language}",
      "method": "initSnapshotUpload",
      "httpMethod": "post",
      "tag": "Snapshots",
      "description": "Start snapshot upload session",
      "parameters": [
        {
          "name": "project-id",
          "schema": "integer",
          "required": true,
          "description": "The numeric project identifier."
        },
        {
          "name": "language",
          "schema": "string",
          "required": true,
          "description": "The language of the database to upload."
        },
        {
          "name": "commit",
          "schema": "string",
          "required": true,
          "description": "The identifier of the analyzed commit."
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": "The date and time of the analyzed commit (default the current time)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/system/health",
      "method": "getHealth",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get a summary of the application's health",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "503",
          "description": ""
        }
      ]
    },
    {
      "url": "/system/metrics",
      "method": "getMetrics",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get the identifiers and descriptions of the usage metrics",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/system/metrics/{metric-id}",
      "method": "getMetric",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get the computed values of the specified metric",
      "parameters": [
        {
          "name": "metric-id",
          "schema": "string",
          "required": true,
          "description": "The identifier of the metric."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://lgtm.com/api/v1.0",
  "apiDescription": "The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:\n  * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.\n  * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.\n  * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.\n  * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.\n  * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.\n  * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.\n  * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.\n  * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.\n\nFor an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm).\n",
  "apiTitle": "LGTM API specification",
  "endpoints": 23,
  "sdkMethods": 29,
  "schemas": 25,
  "parameters": 58,
  "difficultyScore": 56,
  "difficulty": "Easy"
}