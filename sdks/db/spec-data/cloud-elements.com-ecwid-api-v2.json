{
  "providerName": "cloud-elements.com",
  "openApiRaw": "https://api.cloud-elements.com/elements/api-v2/elements/52/docs?version=-1",
  "homepage": "cloud-elements.com",
  "serviceName": "ecwid",
  "apiVersion": "api-v2",
  "methods": [
    {
      "url": "/bulk/download",
      "method": "createBulkDownload",
      "httpMethod": "post",
      "tag": "bulk",
      "description": "Create a new bulk download job (asynchronous)",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "apiLimit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "continueFromJobId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "docsHubDetails",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "filterDateField",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "filterNulls",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "notificationUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "query",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "selectFields",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulk/jobs",
      "method": "getBulkJobs",
      "httpMethod": "get",
      "tag": "bulk",
      "description": "Fetch all the bulk jobs for an instance",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The page size for pagination, which defaults to 200 if not supplied"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulk/query",
      "method": "createBulkQuery",
      "httpMethod": "post",
      "tag": "bulk",
      "description": "Create an asynchronous bulk query job.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "Elements-Async-Callback-Url",
          "schema": "string",
          "required": false,
          "description": "The Url to send the notification to when the Job is completed"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply."
        },
        {
          "name": "lastRunDate",
          "schema": "string",
          "required": false,
          "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'"
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'"
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'"
        },
        {
          "name": "metaData",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulk/{id}/cancel",
      "method": "replaceBulkCancel",
      "httpMethod": "put",
      "tag": "bulk",
      "description": "Cancel an asynchronous bulk query job.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the bulk job to cancel."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Status of the bulk upload."
        }
      ]
    },
    {
      "url": "/bulk/{id}/errors",
      "method": "getBulkErrors",
      "httpMethod": "get",
      "tag": "bulk",
      "description": "Retrieve the errors of a bulk job.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the bulk job to retrieve its errors."
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The page size for pagination, which defaults to 200 if not supplied"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulk/{id}/status",
      "method": "getBulkStatus",
      "httpMethod": "get",
      "tag": "bulk",
      "description": "Retrieve the status of a bulk job.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the bulk job to retrieve its status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Status of the bulk upload."
        }
      ]
    },
    {
      "url": "/bulk/{id}/{objectName}",
      "method": "getBulkByObjectName",
      "httpMethod": "get",
      "tag": "bulk",
      "description": "Retrieve the results of an asynchronous bulk query.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the bulk job"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/bulk/{objectName}",
      "method": "createBulkByObjectName",
      "httpMethod": "post",
      "tag": "bulk",
      "description": "Upload a file of objects to be bulk uploaded to the provider.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "Elements-Async-Callback-Url",
          "schema": "string",
          "required": false,
          "description": "The Url to send the notification to when the Job is completed"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object for which data needs to be uploaded."
        },
        {
          "name": "metaData",
          "schema": "string",
          "description": ""
        },
        {
          "name": "file",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "BulkLoad response of bulk download."
        }
      ]
    },
    {
      "url": "/customers",
      "method": "getCustomers",
      "httpMethod": "get",
      "tag": "customers",
      "description": "Find customers in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field='value'). <p>Supported search terms: customer_id and customer_email. All other search criteria are ignored. NOTE: When searching by customer_id, do not quote the value (ex: customer_id=15693430), as the ID is a number rather than a string.  When searching by email, quote the value (ex: customer_email='a@b.c'), as the email parameter is a string"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers",
      "method": "createCustomer",
      "httpMethod": "post",
      "tag": "customers",
      "description": "Create a new customer in eCommerce system.With the exception of the 'id' field, the required fields indicated in the 'Customer' model are those required to create a new customer",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "billingPerson",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "customerGroupId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shippingAddresses",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "taxExempt",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "taxId",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "taxIdValid",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}",
      "method": "deleteCustomerById",
      "httpMethod": "delete",
      "tag": "customers",
      "description": "Delete a customer associated with a given ID from your eCommerce system. Specifying a customer associated with a given ID that does not exist will result in an error message",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the customer to delete from the eCommerce system"
        }
      ],
      "responses": []
    },
    {
      "url": "/customers/{id}",
      "method": "getCustomerById",
      "httpMethod": "get",
      "tag": "customers",
      "description": "Retrieve a customer associated with a given ID from the eCommerce system. Specifying a customer with an ID that does not exist will result in an error response",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the customer to retrieve from the eCommerce system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}",
      "method": "updateCustomerById",
      "httpMethod": "patch",
      "tag": "customers",
      "description": "Update an customer associated with a given ID in the eCommerce system.The update API uses the PATCH HTTP verb, so only those fields provided in the customer object will be updated, and those fields not provided will be left alone. Updating a customer with a specified ID that does not exist will result in an error response",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the customer to update in the eCommerce system"
        },
        {
          "name": "billingPerson",
          "schema": "object",
          "description": ""
        },
        {
          "name": "customerGroupId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shippingAddresses",
          "schema": "array",
          "description": ""
        },
        {
          "name": "taxExempt",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "taxId",
          "schema": "number",
          "description": ""
        },
        {
          "name": "taxIdValid",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/customers/{id}/orders",
      "method": "getCustomersOrders",
      "httpMethod": "get",
      "tag": "customers",
      "description": "Find orders in the customer associated with a given ID. If the customer does not exist, an error response will be returned. If no orders are found in the given customer then an empty array will be returned",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the customer to get orders form in the eCommerce system"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/objects",
      "method": "getObjects",
      "httpMethod": "get",
      "tag": "objects",
      "description": "Get a list of all the available objects.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "Elements-Version",
          "schema": "string",
          "required": false,
          "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/objects/{objectName}/docs",
      "method": "getObjectsObjectNameDocs",
      "httpMethod": "get",
      "tag": "objects",
      "description": "Get swagger docs for an object.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "discovery",
          "schema": "boolean",
          "required": false,
          "description": "Include discovery metadata in definitions"
        },
        {
          "name": "resolveReferences",
          "schema": "boolean",
          "required": false,
          "description": "Optionally resolve swagger references for an inline object definition"
        },
        {
          "name": "basic",
          "schema": "boolean",
          "required": false,
          "description": "Include only OpenAPI / Swagger properties in definitions"
        },
        {
          "name": "version",
          "schema": "string",
          "required": false,
          "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/objects/{objectName}/metadata",
      "method": "getObjectsObjectNameMetadata",
      "httpMethod": "get",
      "tag": "objects",
      "description": "Get a list of all the field for an object.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "Elements-Version",
          "schema": "string",
          "required": false,
          "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders",
      "method": "getOrders",
      "httpMethod": "get",
      "tag": "orders",
      "description": "Find orders in the eCommerce system, using the provided CEQL search expression. If no search expression is provided, all records will be retrieved",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field='value'). <p>Supported search terms: date, from_date, to_date, from_update_date, to_update_date, order, from_order, to_order, customer_id, customer_email and statuses. All other search criteria are ignored"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders",
      "method": "createOrder",
      "httpMethod": "post",
      "tag": "orders",
      "description": "Create an order in the eCommerce system.With the exception of the 'id' field, the required fields indicated in the 'Order' model are those required to create a new order.The paymentStatus can only be AWAITING_PAYMENT or INCOMPLETE.The fulfillmentStatus can only be AWAITING_PROCESSING",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "billingPerson",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "couponDiscount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "customerTaxExempt",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "customerTaxId",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "customerTaxIdValid",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "discount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fulfillmentStatus",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "globalReferer",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hidden",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "membershipBasedDiscount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "orderComments",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentMethod",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentModule",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentStatus",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "privateAdminNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "refererUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "reversedTaxApplied",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "sample",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shippingMethod",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "shippingOption",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "shippingPerson",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "subtotal",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "tax",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "total",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "totalAndMembershipBasedDiscount",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "volumeDiscount",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders/{id}",
      "method": "deleteOrderById",
      "httpMethod": "delete",
      "tag": "orders",
      "description": "Delete an order associated with a given ID from your eCommerce system. Specifying an order associated with a given ID that does not exist will result in an error message",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the order to delete from the eCommerce system"
        }
      ],
      "responses": []
    },
    {
      "url": "/orders/{id}",
      "method": "getOrderById",
      "httpMethod": "get",
      "tag": "orders",
      "description": "Retrieve an order associated with a given ID from the eCommerce system. Specifying an order with an ID that does not exist will result in an error response",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the order to retrieve from the eCommerce system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders/{id}",
      "method": "updateOrderById",
      "httpMethod": "patch",
      "tag": "orders",
      "description": "Update an order associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the order object will be updated, and those fields not provided will be left alone. Updating an order with a specified ID that does not exist will result in an error response</strong>",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the order to update in the eCommerce system"
        },
        {
          "name": "action",
          "schema": "string",
          "required": false,
          "description": "An action to perform on the order: cancel, reopen or close. If left blank then the order is updated but no action is taken"
        },
        {
          "name": "billingPerson",
          "schema": "object",
          "description": ""
        },
        {
          "name": "couponDiscount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "customerId",
          "schema": "number",
          "description": ""
        },
        {
          "name": "customerTaxExempt",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "customerTaxId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "customerTaxIdValid",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "discount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fulfillmentStatus",
          "schema": "string",
          "description": ""
        },
        {
          "name": "globalReferer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hidden",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "items",
          "schema": "array",
          "description": ""
        },
        {
          "name": "membershipBasedDiscount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "orderComments",
          "schema": "string",
          "description": ""
        },
        {
          "name": "paymentModule",
          "schema": "string",
          "description": ""
        },
        {
          "name": "paymentStatus",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privateAdminNotes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "refererUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "reversedTaxApplied",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sample",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "shippingMethod",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shippingOption",
          "schema": "object",
          "description": ""
        },
        {
          "name": "shippingPerson",
          "schema": "object",
          "description": ""
        },
        {
          "name": "subtotal",
          "schema": "number",
          "description": ""
        },
        {
          "name": "tax",
          "schema": "number",
          "description": ""
        },
        {
          "name": "taxesOnShipping",
          "schema": "array",
          "description": ""
        },
        {
          "name": "total",
          "schema": "number",
          "description": ""
        },
        {
          "name": "totalAndMembershipBasedDiscount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "volumeDiscount",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders/{orderId}/payments",
      "method": "getOrdersPayments",
      "httpMethod": "get",
      "tag": "orders",
      "description": "Retrieve the payments in the eCommerce system for the specified order",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "The ID of the order to retrieve payments from in the eCommerce system"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/orders/{orderId}/refunds",
      "method": "getOrdersRefunds",
      "httpMethod": "get",
      "tag": "orders",
      "description": "Retrieve the refunds in the eCommerce system for the specified order",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "orderId",
          "schema": "string",
          "required": true,
          "description": "The ID of the order to retrieve refunds from in the eCommerce system"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/ping",
      "method": "getPing",
      "httpMethod": "get",
      "tag": "ping",
      "description": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products",
      "method": "getProducts",
      "httpMethod": "get",
      "tag": "products",
      "description": "Find products in the eCommerce system, using the provided CEQL search expression. The search expression in CEQL is the WHERE clause in a typical SQL query, but without the WHERE keyword.  If no search expression is provided, all records will be retrieved",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query (i.e. field='value'). <p>Supported search terms: category, hidden_products. All other search criteria are ignored"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The number of results to fetch in a given page. When this parameter is omitted, a maximum of 200 results are returned"
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products",
      "method": "createProduct",
      "httpMethod": "post",
      "tag": "products",
      "description": "Create a new product in eCommerce system.With the exception of the 'id' field, the required fields indicated in the 'Product' model are those required to create a new product",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "attributes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "categoryIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "compareAtPrice",
          "schema": "number",
          "description": ""
        },
        {
          "name": "compareToPrice",
          "schema": "number",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "defaultCategoryId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dimensions",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "favorites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "fixedShippingRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "fixedShippingRateOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "galleryImages",
          "schema": "array",
          "description": ""
        },
        {
          "name": "googleItemCondition",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isShippingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "options",
          "schema": "array",
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "productClassId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "relatedProducts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "seoDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "seoTitle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shipping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "showOnFrontpage",
          "schema": "number",
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tax",
          "schema": "object",
          "description": ""
        },
        {
          "name": "taxes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "warningLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "description": ""
        },
        {
          "name": "wholesalePrices",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/{id}",
      "method": "deleteProductById",
      "httpMethod": "delete",
      "tag": "products",
      "description": "Delete a product associated with a given ID from your eCommerce system. Specifying a product associated with a given ID that does not exist will result in an error message",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the product to delete from the eCommerce system"
        }
      ],
      "responses": []
    },
    {
      "url": "/products/{id}",
      "method": "getProductById",
      "httpMethod": "get",
      "tag": "products",
      "description": "Retrieve a product associated with a given ID from the eCommerce system. Specifying a product with an ID that does not exist will result in an error response",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the product to retrieve from the eCommerce system"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/{id}",
      "method": "updateProductById",
      "httpMethod": "patch",
      "tag": "products",
      "description": "Update a product associated with a given ID in the eCommerce system. The update API uses the PATCH HTTP verb, so only those fields provided in the product object will be updated, and those fields not provided will be left alone. Updating a product with a specified ID that does not exist will result in an error response. <p><strong>Update supports the following fields: sku, quantity, trackQuantity, quantityDelta, warningLimit, name, price, weight, tangible, enabled, fixedShippingRateOnly, fixedShippingRate, description, wholesalePrices, compareAtPrice, productClassId</strong>",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the product to update in the eCommerce system"
        },
        {
          "name": "attributes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "categoryIds",
          "schema": "array",
          "description": ""
        },
        {
          "name": "compareAtPrice",
          "schema": "number",
          "description": ""
        },
        {
          "name": "compareToPrice",
          "schema": "number",
          "description": ""
        },
        {
          "name": "defaultCategoryId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dimensions",
          "schema": "object",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "fixedShippingRate",
          "schema": "number",
          "description": ""
        },
        {
          "name": "fixedShippingRateOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "galleryImages",
          "schema": "array",
          "description": ""
        },
        {
          "name": "googleItemCondition",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isShippingRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "options",
          "schema": "array",
          "description": ""
        },
        {
          "name": "price",
          "schema": "number",
          "description": ""
        },
        {
          "name": "productClassId",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "relatedProducts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "seoDescription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "seoTitle",
          "schema": "string",
          "description": ""
        },
        {
          "name": "shipping",
          "schema": "object",
          "description": ""
        },
        {
          "name": "showOnFrontpage",
          "schema": "number",
          "description": ""
        },
        {
          "name": "sku",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tax",
          "schema": "object",
          "description": ""
        },
        {
          "name": "taxes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "warningLimit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "number",
          "description": ""
        },
        {
          "name": "wholesalePrices",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{objectName}",
      "method": "getByObjectName",
      "httpMethod": "get",
      "tag": "objectName",
      "description": "Search for {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression."
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The page size. Defaults to 200 if not provided. Maximum of 5000."
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{objectName}",
      "method": "createByObjectName",
      "httpMethod": "post",
      "tag": "objectName",
      "description": "Create an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{objectName}/{objectId}",
      "method": "deleteObjectNameByObjectId",
      "httpMethod": "delete",
      "tag": "objectName",
      "description": "Delete an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/{objectName}/{objectId}",
      "method": "getObjectNameByObjectId",
      "httpMethod": "get",
      "tag": "objectName",
      "description": "Retrieve an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}",
      "method": "updateObjectNameByObjectId",
      "httpMethod": "patch",
      "tag": "objectName",
      "description": "Update an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}",
      "method": "replaceObjectNameByObjectId",
      "httpMethod": "put",
      "tag": "objectName",
      "description": "Update an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}",
      "method": "getObjectNameByChildObjectName",
      "httpMethod": "get",
      "tag": "objectName",
      "description": "Search for {childObjectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the childObjectName"
        },
        {
          "name": "where",
          "schema": "string",
          "required": false,
          "description": "The CEQL search expression."
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "The page size. Defaults to 200 if not provided. Maximum of 5000."
        },
        {
          "name": "nextPage",
          "schema": "string",
          "required": false,
          "description": "The next page cursor, taken from the response header: `elements-next-page-token`"
        },
        {
          "name": "fields",
          "schema": "string",
          "required": false,
          "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}",
      "method": "createObjectNameByChildObjectName",
      "httpMethod": "post",
      "tag": "objectName",
      "description": "Create an {objectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}/{childObjectId}",
      "method": "deleteObjectNameByChildObjectId",
      "httpMethod": "delete",
      "tag": "objectName",
      "description": "Delete an {childObjectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the childObjectName"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectId",
          "schema": "string",
          "required": true,
          "description": "The {childObjectName} ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}/{childObjectId}",
      "method": "getObjectNameByChildObjectId",
      "httpMethod": "get",
      "tag": "objectName",
      "description": "Retrieve an {childObjectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the childObjectName"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectId",
          "schema": "string",
          "required": true,
          "description": "The {childObjectName} ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}/{childObjectId}",
      "method": "updateObjectNameByChildObjectId",
      "httpMethod": "patch",
      "tag": "objectName",
      "description": "Update an {childObjectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the childObjectName"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectId",
          "schema": "string",
          "required": true,
          "description": "The {childObjectName} ID"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    },
    {
      "url": "/{objectName}/{objectId}/{childObjectName}/{childObjectId}",
      "method": "replaceObjectNameByChildObjectId",
      "httpMethod": "put",
      "tag": "objectName",
      "description": "Update an {childObjectName}",
      "parameters": [
        {
          "name": "Authorization",
          "schema": "string",
          "required": true,
          "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
        },
        {
          "name": "objectName",
          "schema": "string",
          "required": true,
          "description": "The name of the object"
        },
        {
          "name": "childObjectName",
          "schema": "string",
          "required": true,
          "description": "The name of the childObjectName"
        },
        {
          "name": "objectId",
          "schema": "string",
          "required": true,
          "description": "The {objectName} ID"
        },
        {
          "name": "childObjectId",
          "schema": "string",
          "required": true,
          "description": "The {childObjectName} ID"
        },
        {
          "name": "objectField",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.cloud-elements.com/elements/api-v2",
  "apiTitle": "ecwid",
  "endpoints": 25,
  "sdkMethods": 42,
  "schemas": 72,
  "parameters": 301,
  "contactEmail": "support@cloud-elements.com",
  "difficultyScore": 153.25,
  "difficulty": "Medium"
}