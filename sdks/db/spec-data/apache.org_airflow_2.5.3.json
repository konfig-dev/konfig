{
  "providerName": "apache.org",
  "openApiRaw": "https://airflow.apache.org/docs/apache-airflow/stable/_specs/v1.yaml",
  "securitySchemes": {
    "Basic": {
      "scheme": "basic",
      "type": "http"
    },
    "GoogleOpenId": {
      "openIdConnectUrl": "https://accounts.google.com/.well-known/openid-configuration",
      "type": "openIdConnect"
    },
    "Kerberos": {
      "scheme": "negotiate",
      "type": "http"
    }
  },
  "categories": [
    "messaging"
  ],
  "homepage": "apache.org",
  "serviceName": "airflow",
  "apiVersion": "2.5.3",
  "methods": [
    {
      "url": "/config",
      "method": "getConfig",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Get current configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The configuration."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections",
      "method": "getConnections",
      "httpMethod": "get",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "List connections",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of connections.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections",
      "method": "postConnection",
      "httpMethod": "post",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "Create a connection",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of the connection."
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections/test",
      "method": "testConnection",
      "httpMethod": "post",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "Test a connection",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Connection test results.\n\n*New in version 2.2.0*\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections/{connection_id}",
      "method": "deleteConnection",
      "httpMethod": "delete",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "Delete a connection",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections/{connection_id}",
      "method": "getConnection",
      "httpMethod": "get",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "Get a connection",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of the connection."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/connections/{connection_id}",
      "method": "patchConnection",
      "httpMethod": "patch",
      "tag": "Connection",
      "typeScriptTag": "connection",
      "description": "Update a connection",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of the connection."
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dagSources/{file_token}",
      "method": "getDagSource",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Get a source code",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "406",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dagWarnings",
      "method": "getDagWarnings",
      "httpMethod": "get",
      "tag": "DagWarning",
      "typeScriptTag": "dagWarning",
      "description": "List dag warnings",
      "parameters": [
        {
          "name": "dagId",
          "schema": "string",
          "required": false,
          "description": "If set, only return DAG warnings with this dag_id."
        },
        {
          "name": "warningType",
          "schema": "string",
          "required": false,
          "description": "If set, only return DAG warnings with this type."
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of DAG warnings.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags",
      "method": "getDags",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "List DAGs",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
        },
        {
          "name": "onlyActive",
          "schema": "boolean",
          "required": false,
          "description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
        },
        {
          "name": "dagIdPattern",
          "schema": "string",
          "required": false,
          "description": "If set, only return DAGs with dag_ids matching this pattern.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of DAGs.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags",
      "method": "patchDags",
      "httpMethod": "patch",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Update DAGs",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "tags",
          "schema": "array",
          "description": "List of tags to filter results.\n\n*New in version 2.2.0*\n"
        },
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        },
        {
          "name": "onlyActive",
          "schema": "boolean",
          "required": false,
          "description": "Only filter active DAGs.\n\n*New in version 2.1.1*\n"
        },
        {
          "name": "dagIdPattern",
          "schema": "string",
          "required": true,
          "description": "If set, only update DAGs with dag_ids matching this pattern.\n"
        },
        {
          "name": "dag_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "default_view",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "file_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fileloc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "has_import_errors",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_task_concurrency_limits",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_paused",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_subdag",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "last_expired",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_parsed_time",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_pickled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "max_active_runs",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max_active_tasks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "next_dagrun",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_create_after",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_data_interval_end",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_data_interval_start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owners",
          "schema": "array",
          "description": ""
        },
        {
          "name": "pickle_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "root_dag_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "schedule_interval",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "scheduler_lock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "timetable_description",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of DAGs.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}",
      "method": "deleteDag",
      "httpMethod": "delete",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Delete a DAG",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "409",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}",
      "method": "getDag",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Get basic information about a DAG",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "DAG"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}",
      "method": "patchDag",
      "httpMethod": "patch",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Update a DAG",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        },
        {
          "name": "dag_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "default_view",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "file_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "fileloc",
          "schema": "string",
          "description": ""
        },
        {
          "name": "has_import_errors",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "has_task_concurrency_limits",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_paused",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "is_subdag",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "last_expired",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_parsed_time",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_pickled",
          "schema": "string",
          "description": ""
        },
        {
          "name": "max_active_runs",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max_active_tasks",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "next_dagrun",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_create_after",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_data_interval_end",
          "schema": "string",
          "description": ""
        },
        {
          "name": "next_dagrun_data_interval_start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "owners",
          "schema": "array",
          "description": ""
        },
        {
          "name": "pickle_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "root_dag_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "schedule_interval",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "scheduler_lock",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "timetable_description",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "DAG"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/clearTaskInstances",
      "method": "postClearTaskInstances",
      "httpMethod": "post",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Clear a set of task instances",
      "parameters": [
        {
          "name": "dag_run_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dry_run",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "include_downstream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_future",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_parentdag",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_past",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_subdags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_upstream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "only_failed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "only_running",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "reset_dag_runs",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "task_ids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns",
      "method": "getDagRuns",
      "httpMethod": "get",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "List DAG runs",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "executionDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "executionDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "startDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "startDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "endDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "endDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "state",
          "schema": "array",
          "required": false,
          "description": "The value can be repeated to retrieve multiple matching values (OR condition)."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of DAG runs.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns",
      "method": "postDagRun",
      "httpMethod": "post",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Trigger a new DAG run",
      "parameters": [
        {
          "name": "conf",
          "schema": "object",
          "description": ""
        },
        {
          "name": "dag_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dag_run_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "data_interval_end",
          "schema": "string",
          "description": ""
        },
        {
          "name": "data_interval_start",
          "schema": "string",
          "description": ""
        },
        {
          "name": "end_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "execution_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "external_trigger",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "last_scheduling_decision",
          "schema": "string",
          "description": ""
        },
        {
          "name": "logical_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "note",
          "schema": "string",
          "description": ""
        },
        {
          "name": "run_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "409",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}",
      "method": "deleteDagRun",
      "httpMethod": "delete",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Delete a DAG run",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}",
      "method": "getDagRun",
      "httpMethod": "get",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Get a DAG run",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}",
      "method": "updateDagRunState",
      "httpMethod": "patch",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Modify a DAG run",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/clear",
      "method": "clearDagRun",
      "httpMethod": "post",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Clear a DAG run",
      "parameters": [
        {
          "name": "dry_run",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/setNote",
      "method": "setDagRunNote",
      "httpMethod": "patch",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Update the DagRun note.",
      "parameters": [
        {
          "name": "note",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances",
      "method": "getTaskInstances",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "List task instances",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of task instances.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
      "method": "getTaskInstance",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Get a task instance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
      "method": "patchTaskInstance",
      "httpMethod": "patch",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Updates the state of a task instance",
      "parameters": [
        {
          "name": "dry_run",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "new_state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links",
      "method": "getExtraLinks",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "List extra links",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The collection of extra links."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped",
      "method": "getMappedTaskInstances",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "List mapped task instances",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "executionDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "executionDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "startDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "startDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "endDateGte",
          "schema": "string",
          "required": false,
          "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "endDateLte",
          "schema": "string",
          "required": false,
          "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n"
        },
        {
          "name": "durationGte",
          "schema": "number",
          "required": false,
          "description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n"
        },
        {
          "name": "durationLte",
          "schema": "number",
          "required": false,
          "description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n"
        },
        {
          "name": "state",
          "schema": "array",
          "required": false,
          "description": "The value can be repeated to retrieve multiple matching values (OR condition)."
        },
        {
          "name": "pool",
          "schema": "array",
          "required": false,
          "description": "The value can be repeated to retrieve multiple matching values (OR condition)."
        },
        {
          "name": "queue",
          "schema": "array",
          "description": "The value can be repeated to retrieve multiple matching values (OR condition)."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of task instances.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}",
      "method": "getLog",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Get logs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/setNote",
      "method": "setTaskInstanceNote",
      "httpMethod": "patch",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Update the TaskInstance note.",
      "parameters": [
        {
          "name": "note",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries",
      "method": "getXcomEntries",
      "httpMethod": "get",
      "tag": "XCom",
      "typeScriptTag": "xCom",
      "description": "List XCom entries",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of XCom entries.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}",
      "method": "getXcomEntry",
      "httpMethod": "get",
      "tag": "XCom",
      "typeScriptTag": "xCom",
      "description": "Get an XCom entry",
      "parameters": [
        {
          "name": "deserialize",
          "schema": "boolean",
          "required": false,
          "description": "Whether to deserialize an XCom value when using a custom XCom backend.\n\nThe XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value\nthat is potentially expensive to deserialize in the web server. Setting this to true overrides\nthe consideration, and calls `deserialize_value` instead.\n\nThis parameter is not meaningful when using the default XCom backend.\n\n*New in version 2.4.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representations of XCom entry."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
      "method": "getMappedTaskInstance",
      "httpMethod": "get",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Get a mapped task instance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
      "method": "patchMappedTaskInstance",
      "httpMethod": "patch",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Updates the state of a mapped task instance",
      "parameters": [
        {
          "name": "dry_run",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "new_state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/setNote",
      "method": "setMappedTaskInstanceNote",
      "httpMethod": "patch",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "Update the TaskInstance note.",
      "parameters": [
        {
          "name": "note",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents",
      "method": "getUpstreamDatasetEvents",
      "httpMethod": "get",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "Get dataset events for a DAG run",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of dataset events.\n\n*New in version 2.4.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/details",
      "method": "getDagDetails",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Get a simplified representation of DAG",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "DAG details.\n\nFor details see:\n[airflow.models.DAG](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/index.html#airflow.models.DAG)\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/tasks",
      "method": "getTasks",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Get tasks for DAG",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of tasks."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/tasks/{task_id}",
      "method": "getTask",
      "httpMethod": "get",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Get simplified representation of a task",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "For details see:\n[airflow.models.BaseOperator](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/index.html#airflow.models.BaseOperator)\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/{dag_id}/updateTaskInstancesState",
      "method": "postSetTaskInstancesState",
      "httpMethod": "post",
      "tag": "DAG",
      "typeScriptTag": "dag",
      "description": "Set a state of task instances",
      "parameters": [
        {
          "name": "dag_run_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dry_run",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "execution_date",
          "schema": "string",
          "description": ""
        },
        {
          "name": "include_downstream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_future",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_past",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "include_upstream",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "new_state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "task_id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/~/dagRuns/list",
      "method": "getDagRunsBatch",
      "httpMethod": "post",
      "tag": "DAGRun",
      "typeScriptTag": "dagRun",
      "description": "List DAG runs (batch)",
      "parameters": [
        {
          "name": "dag_ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "end_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "end_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "execution_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "execution_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "order_by",
          "schema": "string",
          "description": ""
        },
        {
          "name": "page_limit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "page_offset",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "start_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "states",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of DAG runs.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/dags/~/dagRuns/~/taskInstances/list",
      "method": "getTaskInstancesBatch",
      "httpMethod": "post",
      "tag": "TaskInstance",
      "typeScriptTag": "taskInstance",
      "description": "List task instances (batch)",
      "parameters": [
        {
          "name": "dag_ids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "duration_gte",
          "schema": "number",
          "description": ""
        },
        {
          "name": "duration_lte",
          "schema": "number",
          "description": ""
        },
        {
          "name": "end_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "end_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "execution_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "execution_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pool",
          "schema": "array",
          "description": ""
        },
        {
          "name": "queue",
          "schema": "array",
          "description": ""
        },
        {
          "name": "start_date_gte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start_date_lte",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of task instances.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/datasets",
      "method": "getDatasets",
      "httpMethod": "get",
      "tag": "Dataset",
      "typeScriptTag": "dataset",
      "description": "List datasets",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        },
        {
          "name": "uriPattern",
          "schema": "string",
          "required": false,
          "description": "If set, only return datasets with uris matching this pattern.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of datasets.\n\n*New in version 2.4.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/datasets/events",
      "method": "getDatasetEvents",
      "httpMethod": "get",
      "tag": "Dataset",
      "typeScriptTag": "dataset",
      "description": "Get dataset events",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of dataset events.\n\n*New in version 2.4.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/datasets/{uri}",
      "method": "getDataset",
      "httpMethod": "get",
      "tag": "Dataset",
      "typeScriptTag": "dataset",
      "description": "Get a dataset",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A dataset item.\n\n*New in version 2.4.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/eventLogs",
      "method": "getEventLogs",
      "httpMethod": "get",
      "tag": "EventLog",
      "typeScriptTag": "eventLog",
      "description": "List log entries",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of event logs.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/eventLogs/{event_log_id}",
      "method": "getEventLog",
      "httpMethod": "get",
      "tag": "EventLog",
      "typeScriptTag": "eventLog",
      "description": "Get a log entry",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Log of user operations via CLI or Web UI."
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/health",
      "method": "getHealth",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get instance status",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Instance status information."
        }
      ]
    },
    {
      "url": "/importErrors",
      "method": "getImportErrors",
      "httpMethod": "get",
      "tag": "ImportError",
      "typeScriptTag": "importError",
      "description": "List import errors",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of import errors.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/importErrors/{import_error_id}",
      "method": "getImportError",
      "httpMethod": "get",
      "tag": "ImportError",
      "typeScriptTag": "importError",
      "description": "Get an import error",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/permissions",
      "method": "getPermissions",
      "httpMethod": "get",
      "tag": "Permission",
      "typeScriptTag": "permission",
      "description": "List permissions",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of actions.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/plugins",
      "method": "getPlugins",
      "httpMethod": "get",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Get a list of loaded plugins",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of plugin.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/pools",
      "method": "getPools",
      "httpMethod": "get",
      "tag": "Pool",
      "typeScriptTag": "pool",
      "description": "List pools",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of pools.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/pools",
      "method": "postPool",
      "httpMethod": "post",
      "tag": "Pool",
      "typeScriptTag": "pool",
      "description": "Create a pool",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occupied_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "open_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "queued_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "used_slots",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The pool"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/pools/{pool_name}",
      "method": "deletePool",
      "httpMethod": "delete",
      "tag": "Pool",
      "typeScriptTag": "pool",
      "description": "Delete a pool",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/pools/{pool_name}",
      "method": "getPool",
      "httpMethod": "get",
      "tag": "Pool",
      "typeScriptTag": "pool",
      "description": "Get a pool",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The pool"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/pools/{pool_name}",
      "method": "patchPool",
      "httpMethod": "patch",
      "tag": "Pool",
      "typeScriptTag": "pool",
      "description": "Update a pool",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "occupied_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "open_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "queued_slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "slots",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "used_slots",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The pool"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "409",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/providers",
      "method": "getProviders",
      "httpMethod": "get",
      "tag": "Provider",
      "typeScriptTag": "provider",
      "description": "List providers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/roles",
      "method": "getRoles",
      "httpMethod": "get",
      "tag": "Role",
      "typeScriptTag": "role",
      "description": "List roles",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of roles.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/roles",
      "method": "postRole",
      "httpMethod": "post",
      "tag": "Role",
      "typeScriptTag": "role",
      "description": "Create a role",
      "parameters": [
        {
          "name": "actions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "a role item.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/roles/{role_name}",
      "method": "deleteRole",
      "httpMethod": "delete",
      "tag": "Role",
      "typeScriptTag": "role",
      "description": "Delete a role",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/roles/{role_name}",
      "method": "getRole",
      "httpMethod": "get",
      "tag": "Role",
      "typeScriptTag": "role",
      "description": "Get a role",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "a role item.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/roles/{role_name}",
      "method": "patchRole",
      "httpMethod": "patch",
      "tag": "Role",
      "typeScriptTag": "role",
      "description": "Update a role",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        },
        {
          "name": "actions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "a role item.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/users",
      "method": "getUsers",
      "httpMethod": "get",
      "tag": "User",
      "typeScriptTag": "user",
      "description": "List users",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of users.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/users",
      "method": "postUser",
      "httpMethod": "post",
      "tag": "User",
      "typeScriptTag": "user",
      "description": "Create a user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user object with sensitive data.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "409",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/users/{username}",
      "method": "deleteUser",
      "httpMethod": "delete",
      "tag": "User",
      "typeScriptTag": "user",
      "description": "Delete a user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/users/{username}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "User",
      "typeScriptTag": "user",
      "description": "Get a user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user object.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/users/{username}",
      "method": "patchUser",
      "httpMethod": "patch",
      "tag": "User",
      "typeScriptTag": "user",
      "description": "Update a user",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user object.\n\n*New in version 2.1.0*\n"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/variables",
      "method": "getVariables",
      "httpMethod": "get",
      "tag": "Variable",
      "typeScriptTag": "variable",
      "description": "List variables",
      "parameters": [
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "The numbers of items to return."
        },
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": "The number of items to skip before starting to collect the result set."
        },
        {
          "name": "orderBy",
          "schema": "string",
          "required": false,
          "description": "The name of the field to order the results by.\nPrefix a field name with `-` to reverse the sort order.\n\n*New in version 2.1.0*\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Collection of variables.\n\n*Changed in version 2.1.0*&#58; 'total_entries' field is added.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/variables",
      "method": "postVariables",
      "httpMethod": "post",
      "tag": "Variable",
      "typeScriptTag": "variable",
      "description": "Create a variable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of Variable"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/variables/{variable_key}",
      "method": "deleteVariable",
      "httpMethod": "delete",
      "tag": "Variable",
      "typeScriptTag": "variable",
      "description": "Delete a variable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/variables/{variable_key}",
      "method": "getVariable",
      "httpMethod": "get",
      "tag": "Variable",
      "typeScriptTag": "variable",
      "description": "Get a variable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of Variable"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/variables/{variable_key}",
      "method": "patchVariable",
      "httpMethod": "patch",
      "tag": "Variable",
      "typeScriptTag": "variable",
      "description": "Update a variable",
      "parameters": [
        {
          "name": "updateMask",
          "schema": "array",
          "description": "The fields to update on the resource. If absent or empty, all modifiable fields are updated.\nA comma-separated list of fully qualified names of fields.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full representation of Variable"
        },
        {
          "statusCode": "400",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "401",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "403",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        },
        {
          "statusCode": "404",
          "description": "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n"
        }
      ]
    },
    {
      "url": "/version",
      "method": "getVersion",
      "httpMethod": "get",
      "tag": "Monitoring",
      "typeScriptTag": "monitoring",
      "description": "Get version information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Version information."
        }
      ]
    }
  ],
  "apiBaseUrl": "/api/v1",
  "apiDescription": "# Overview\n\nTo facilitate management, Apache Airflow supports a range of REST API endpoints across its\nobjects.\nThis section provides an overview of the API design, methods, and supported use cases.\n\nMost of the endpoints accept `JSON` as input and return `JSON` responses.\nThis means that you must usually add the following headers to your request:\n```\nContent-type: application/json\nAccept: application/json\n```\n\n## Resources\n\nThe term `resource` refers to a single type of object in the Airflow metadata. An API is broken up by its\nendpoint's corresponding resource.\nThe name of a resource is typically plural and expressed in camelCase. Example: `dagRuns`.\n\nResource names are used as part of endpoint URLs, as well as in API parameters and responses.\n\n## CRUD Operations\n\nThe platform supports **C**reate, **R**ead, **U**pdate, and **D**elete operations on most resources.\nYou can review the standards for these operations and their standard parameters below.\n\nSome endpoints have special behavior as exceptions.\n\n### Create\n\nTo create a resource, you typically submit an HTTP `POST` request with the resource's required metadata\nin the request body.\nThe response returns a `201 Created` response code upon success with the resource's metadata, including\nits internal `id`, in the response body.\n\n### Read\n\nThe HTTP `GET` request can be used to read a resource or to list a number of resources.\n\nA resource's `id` can be submitted in the request parameters to read a specific resource.\nThe response usually returns a `200 OK` response code upon success, with the resource's metadata in\nthe response body.\n\nIf a `GET` request does not include a specific resource `id`, it is treated as a list request.\nThe response usually returns a `200 OK` response code upon success, with an object containing a list\nof resources' metadata in the response body.\n\nWhen reading resources, some common query parameters are usually available. e.g.:\n```\nv1/connections?limit=25&offset=25\n```\n\n|Query Parameter|Type|Description|\n|---------------|----|-----------|\n|limit|integer|Maximum number of objects to fetch. Usually 25 by default|\n|offset|integer|Offset after which to start returning objects. For use with limit query parameter.|\n\n### Update\n\nUpdating a resource requires the resource `id`, and is typically done using an HTTP `PATCH` request,\nwith the fields to modify in the request body.\nThe response usually returns a `200 OK` response code upon success, with information about the modified\nresource in the response body.\n\n### Delete\n\nDeleting a resource requires the resource `id` and is typically executing via an HTTP `DELETE` request.\nThe response usually returns a `204 No Content` response code upon success.\n\n## Conventions\n\n- Resource names are plural and expressed in camelCase.\n- Names are consistent between URL parameter name and field name.\n\n- Field names are in snake_case.\n```json\n{\n    \"name\": \"string\",\n    \"slots\": 0,\n    \"occupied_slots\": 0,\n    \"used_slots\": 0,\n    \"queued_slots\": 0,\n    \"open_slots\": 0\n}\n```\n\n### Update Mask\n\nUpdate mask is available as a query parameter in patch endpoints. It is used to notify the\nAPI which fields you want to update. Using `update_mask` makes it easier to update objects\nby helping the server know which fields to update in an object instead of updating all fields.\nThe update request ignores any fields that aren't specified in the field mask, leaving them with\ntheir current values.\n\nExample:\n```\n  resource = request.get('/resource/my-id').json()\n  resource['my_field'] = 'new-value'\n  request.patch('/resource/my-id?update_mask=my_field', data=json.dumps(resource))\n```\n\n## Versioning and Endpoint Lifecycle\n\n- API versioning is not synchronized to specific releases of the Apache Airflow.\n- APIs are designed to be backward compatible.\n- Any changes to the API will first go through a deprecation phase.\n\n# Trying the API\n\nYou can use a third party client, such as [curl](https://curl.haxx.se/), [HTTPie](https://httpie.org/),\n[Postman](https://www.postman.com/) or [the Insomnia rest client](https://insomnia.rest/) to test\nthe Apache Airflow API.\n\nNote that you will need to pass credentials data.\n\nFor e.g., here is how to pause a DAG with [curl](https://curl.haxx.se/), when basic authorization is used:\n```bash\ncurl -X PATCH 'https://example.com/api/v1/dags/{dag_id}?update_mask=is_paused' \\\n-H 'Content-Type: application/json' \\\n--user \"username:password\" \\\n-d '{\n    \"is_paused\": true\n}'\n```\n\nUsing a graphical tool such as [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/),\nit is possible to import the API specifications directly:\n\n1. Download the API specification by clicking the **Download** button at top of this document\n2. Import the JSON specification in the graphical tool of your choice.\n  - In *Postman*, you can click the **import** button at the top\n  - With *Insomnia*, you can just drag-and-drop the file on the UI\n\nNote that with *Postman*, you can also generate code snippets by selecting a request and clicking on\nthe **Code** button.\n\n## Enabling CORS\n\n[Cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)\nis a browser security feature that restricts HTTP requests that are\ninitiated from scripts running in the browser.\n\nFor details on enabling/configuring CORS, see\n[Enabling CORS](https://airflow.apache.org/docs/apache-airflow/stable/security/api.html).\n\n# Authentication\n\nTo be able to meet the requirements of many organizations, Airflow supports many authentication methods,\nand it is even possible to add your own method.\n\nIf you want to check which auth backend is currently set, you can use\n`airflow config get-value api auth_backends` command as in the example below.\n```bash\n$ airflow config get-value api auth_backends\nairflow.api.auth.backend.basic_auth\n```\nThe default is to deny all requests.\n\nFor details on configuring the authentication, see\n[API Authorization](https://airflow.apache.org/docs/apache-airflow/stable/security/api.html).\n\n# Errors\n\nWe follow the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807)\nalso known as Problem Details for HTTP APIs. As with our normal API responses,\nyour client must be prepared to gracefully handle additional members of the response.\n\n## Unauthenticated\n\nThis indicates that the request has not been applied because it lacks valid authentication\ncredentials for the target resource. Please check that you have valid credentials.\n\n## PermissionDenied\n\nThis response means that the server understood the request but refuses to authorize\nit because it lacks sufficient rights to the resource. It happens when you do not have the\nnecessary permission to execute the action you performed. You need to get the appropriate\npermissions in other to resolve this error.\n\n## BadRequest\n\nThis response means that the server cannot or will not process the request due to something\nthat is perceived to be a client error (e.g., malformed request syntax, invalid request message\nframing, or deceptive request routing). To resolve this, please ensure that your syntax is correct.\n\n## NotFound\n\nThis client error response indicates that the server cannot find the requested resource.\n\n## MethodNotAllowed\n\nIndicates that the request method is known by the server but is not supported by the target resource.\n\n## NotAcceptable\n\nThe target resource does not have a current representation that would be acceptable to the user\nagent, according to the proactive negotiation header fields received in the request, and the\nserver is unwilling to supply a default representation.\n\n## AlreadyExists\n\nThe request could not be completed due to a conflict with the current state of the target\nresource, e.g. the resource it tries to create already exists.\n\n## Unknown\n\nThis means that the server encountered an unexpected condition that prevented it from\nfulfilling the request.\n",
  "apiTitle": "Airflow API (Stable)",
  "endpoints": 50,
  "sdkMethods": 104,
  "schemas": 85,
  "parameters": 220,
  "contactUrl": "https://airflow.apache.org",
  "contactEmail": "dev@airflow.apache.org",
  "difficultyScore": 201.5,
  "difficulty": "Hard"
}