{
  "providerName": "visagecloud.com",
  "openApiRaw": "https://visagecloud.com/v2/api-docs",
  "securitySchemes": {},
  "homepage": "visagecloud.com",
  "apiVersion": "1.1",
  "methods": [
    {
      "url": "/rest/v1.1/account/account",
      "method": "getAccountByAccessKeyUsingGet",
      "httpMethod": "get",
      "tag": "account-controller",
      "typeScriptTag": "accountController",
      "description": "Get account information by accessKey and secretKey",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "accessKey"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "secretKey"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/account/billing",
      "method": "getBillingPerAccountUsingGet",
      "httpMethod": "get",
      "tag": "account-controller",
      "typeScriptTag": "accountController",
      "description": "Get billing information by accessKey and secretKey",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "accessKey"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "secretKey"
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "required": false,
          "description": "startDateTime"
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "required": false,
          "description": "endDateTime"
        },
        {
          "name": "dateTemplate",
          "schema": "string",
          "required": false,
          "description": "dateTemplate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/account/changePassword",
      "method": "changePasswordUsingPost",
      "httpMethod": "post",
      "tag": "account-controller",
      "typeScriptTag": "accountController",
      "description": "Change password for an account using old password",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "email"
        },
        {
          "name": "oldPassword",
          "schema": "string",
          "required": true,
          "description": "oldPassword"
        },
        {
          "name": "newPassword",
          "schema": "string",
          "required": true,
          "description": "newPassword"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/account/login",
      "method": "loginWithEmailUsingPost",
      "httpMethod": "post",
      "tag": "account-controller",
      "typeScriptTag": "accountController",
      "description": "Get account information including accessKey and secretKey by email and password",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": "email"
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": "password"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analysis/compare",
      "method": "compareFacesUsingGet",
      "httpMethod": "get",
      "tag": "Analysis",
      "typeScriptTag": "analysis",
      "description": "Compare several faces identified by faceHash, without depending on mapping faces to profiles",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "faceHashes",
          "schema": "array",
          "required": true,
          "description": "The IDs of the faces which you want compared, comma-separated"
        },
        {
          "name": "showDetails",
          "schema": "boolean",
          "required": false,
          "description": "Show details"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analysis/detection",
      "method": "performAnalysisUsingPost",
      "httpMethod": "post",
      "tag": "Analysis",
      "typeScriptTag": "analysis",
      "description": "Perform detection on a given picture or picture URL",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "storeAnalysisPicture",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval"
        },
        {
          "name": "storeFacePictures",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval"
        },
        {
          "name": "storeResult",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the result of the analysis to be stored"
        },
        {
          "name": "retentionTime",
          "schema": "integer",
          "required": false,
          "description": "How many seconds the results should be retained in stoarage?"
        },
        {
          "name": "pictureUrl",
          "schema": "string",
          "required": false,
          "description": "The URL of the picture, assuming it is served by a third party server. Server should be accesible from the Internet or through another netwoek by VisageCloud infrastructure"
        },
        {
          "name": "algorithmVersion",
          "schema": "string",
          "required": false,
          "description": "Algorithm version (V2 is more performant but not backward compatible)"
        },
        {
          "name": "autoRotate",
          "schema": "boolean",
          "required": false,
          "description": "Auto-rotate to find flipped or rotate faces"
        },
        {
          "name": "skipExif",
          "schema": "boolean",
          "required": false,
          "description": "Skip EXIF rotation procesing"
        },
        {
          "name": "waitForPictureUpload",
          "schema": "boolean",
          "required": false,
          "description": "Waits until the picture is successfully uploaded, before returning the response back the the client"
        },
        {
          "name": "filters",
          "schema": "array",
          "required": false,
          "description": "[For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per"
        },
        {
          "name": "options",
          "schema": "string",
          "required": false,
          "description": "[For advanced users only] Options for preprocessing of image."
        },
        {
          "name": "picture",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analysis/listLatest",
      "method": "retriveLatestUsingGet",
      "httpMethod": "get",
      "tag": "Analysis",
      "typeScriptTag": "analysis",
      "description": "Retrieve the last *count* operations per current account",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "How many records to retrieve at a time"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analysis/recognition",
      "method": "performRecognitionUsingPost",
      "httpMethod": "post",
      "tag": "Analysis",
      "typeScriptTag": "analysis",
      "description": "Perform labeled recognition on a given picture or picture URL",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "storeAnalysisPicture",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the picture of the analysis to be stored for later retrieval"
        },
        {
          "name": "storeFacePictures",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the faces inside the picture to be stored for later retrieval"
        },
        {
          "name": "storeResult",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the result of the analysis to be stored"
        },
        {
          "name": "retentionTime",
          "schema": "integer",
          "required": false,
          "description": "How many seconds the results should be retained in stoarage?"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": "Labels associated with the given picture or picture URL"
        },
        {
          "name": "attributeFilters",
          "schema": "array",
          "required": false,
          "description": "Filters that will be applied on the recognition operation"
        },
        {
          "name": "pictureUrl",
          "schema": "string",
          "required": false,
          "description": "The URL of the picture"
        },
        {
          "name": "algorithmVersion",
          "schema": "string",
          "required": false,
          "description": "Algorithm version (V2 is more performant but not backward compatible)"
        },
        {
          "name": "autoRotate",
          "schema": "boolean",
          "required": false,
          "description": "Auto-rotate to find flipped or rotate faces"
        },
        {
          "name": "skipExifRotationProcessing",
          "schema": "boolean",
          "required": false,
          "description": "Skip EXIF rotation procesing"
        },
        {
          "name": "waitForPictureUpload",
          "schema": "boolean",
          "required": false,
          "description": "Waits until the picture is successfully uploaded, before returning the response back the the client"
        },
        {
          "name": "filters",
          "schema": "array",
          "required": false,
          "description": "[For advanced users only] Change feature filters for robustness of feature extraction. Tweaking this parameter may affect per"
        },
        {
          "name": "options",
          "schema": "string",
          "required": false,
          "description": "[For advanced users only] Options for preprocessing of image."
        },
        {
          "name": "picture",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analysis/retrieve",
      "method": "retrieveAnalysisUsingGet",
      "httpMethod": "get",
      "tag": "Analysis",
      "typeScriptTag": "analysis",
      "description": "Retrieve a complete analysis object including both detection and recognition information",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "analysisId",
          "schema": "string",
          "required": true,
          "description": "The ID of the analysis for which the data will be retrieved"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analytics/counting",
      "method": "counterUsingPost",
      "httpMethod": "post",
      "tag": "Analytics for presence and audience",
      "typeScriptTag": "analyticsForPresenceAndAudience",
      "description": "Count individuals in streams or collections",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "collectionIds",
          "schema": "array",
          "required": false,
          "description": "Collection ids"
        },
        {
          "name": "streamIds",
          "schema": "array",
          "required": false,
          "description": "Stream Ids"
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "required": false,
          "description": "startDateTime"
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "required": false,
          "description": "endDateTime"
        },
        {
          "name": "visitDuration",
          "schema": "integer",
          "required": false,
          "description": "visitDuration"
        },
        {
          "name": "maxIterations",
          "schema": "integer",
          "required": false,
          "description": "maxIterations"
        },
        {
          "name": "maxBatchIterations",
          "schema": "integer",
          "required": false,
          "description": "maxBatchIterations"
        },
        {
          "name": "minNeighborsMergedPerIteration",
          "schema": "integer",
          "required": false,
          "description": "minNeighborsMergedPerIteration"
        },
        {
          "name": "mergingStep",
          "schema": "number",
          "required": false,
          "description": "mergingStep"
        },
        {
          "name": "shuffling",
          "schema": "boolean",
          "required": false,
          "description": "shuffling"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analytics/presence/timeseries",
      "method": "presenceTimeseriesUsingPost",
      "httpMethod": "post",
      "tag": "Analytics for presence and audience",
      "typeScriptTag": "analyticsForPresenceAndAudience",
      "description": "Show audience (based on number of occurrences of each person) breakdown per declared attribute (age, gender).",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "streamIds",
          "schema": "array",
          "required": false,
          "description": "Stream Ids"
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "required": false,
          "description": "startDateTime"
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "required": false,
          "description": "endDateTime"
        },
        {
          "name": "step",
          "schema": "integer",
          "required": false,
          "description": "step"
        },
        {
          "name": "attributes",
          "schema": "array",
          "required": true,
          "description": "attributes"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/analytics/presence/total",
      "method": "presenceTotalUsingPost",
      "httpMethod": "post",
      "tag": "Analytics for presence and audience",
      "typeScriptTag": "analyticsForPresenceAndAudience",
      "description": "Show presence (based on number of occurences of each face) breakdown per declared attribute (age, gender)",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "streamIds",
          "schema": "array",
          "required": true,
          "description": "Stream Ids"
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "required": false,
          "description": "startDateTime"
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "required": false,
          "description": "endDateTime"
        },
        {
          "name": "attributes",
          "schema": "array",
          "required": true,
          "description": "attributes"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/classifier/svm",
      "method": "removeClassiferUsingDelete",
      "httpMethod": "delete",
      "tag": "Classifier",
      "typeScriptTag": "classifier",
      "description": "Delete existing classifier",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the classifier that will be removed"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/classifier/svm",
      "method": "getClassiferFullUsingGet",
      "httpMethod": "get",
      "tag": "Classifier",
      "typeScriptTag": "classifier",
      "description": "Get classifier full",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the classifier that you want the status for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/classifier/svm",
      "method": "addSvmClassifierUsingPost",
      "httpMethod": "post",
      "tag": "Classifier",
      "typeScriptTag": "classifier",
      "description": "Create new SVM classifier with given name",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the SVM classifier that will be created"
        },
        {
          "name": "collectionIds",
          "schema": "array",
          "required": true,
          "description": "Collection ids"
        },
        {
          "name": "preprocessor",
          "schema": "string",
          "required": false,
          "description": "Preprocessor"
        },
        {
          "name": "classificationAttributeName",
          "schema": "string",
          "required": true,
          "description": "Classification attribute name"
        },
        {
          "name": "considerViewPoints",
          "schema": "boolean",
          "required": false,
          "description": "Consider view point"
        },
        {
          "name": "seed",
          "schema": "integer",
          "required": false,
          "description": "Seed for divididing training and evaluation sets"
        },
        {
          "name": "trainingRatio",
          "schema": "number",
          "required": false,
          "description": "Training ratio"
        },
        {
          "name": "probabilityParameter",
          "schema": "integer",
          "required": false,
          "description": "Probability parameter"
        },
        {
          "name": "gammaParameter",
          "schema": "number",
          "required": false,
          "description": "Gamma parameter"
        },
        {
          "name": "nuParameter",
          "schema": "number",
          "required": false,
          "description": "Nu parameter"
        },
        {
          "name": "cParameter",
          "schema": "number",
          "required": false,
          "description": "c parameter"
        },
        {
          "name": "svmTypeParameter",
          "schema": "integer",
          "required": false,
          "description": "SVM type parameter"
        },
        {
          "name": "kernelTypeParameter",
          "schema": "integer",
          "required": false,
          "description": "Kernel type parameter"
        },
        {
          "name": "cacheSizeParameter",
          "schema": "number",
          "required": false,
          "description": "Cache size parameter"
        },
        {
          "name": "epsParameter",
          "schema": "number",
          "required": false,
          "description": "Eps parameter"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/classifier/svm/status",
      "method": "getClassiferStatusUsingGet",
      "httpMethod": "get",
      "tag": "Classifier",
      "typeScriptTag": "classifier",
      "description": "Get classifer status",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the classifier that you want the status for"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/",
      "method": "getAllCollectionsUsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Retrieve all collections",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/",
      "method": "addCollectionUsingPost",
      "httpMethod": "post",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Create new empty collection with given name",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "preload",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "evictable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "purposes",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/all",
      "method": "getAllCollections2UsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Retrieve all collections",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/collection",
      "method": "deleteCollection2UsingDelete",
      "httpMethod": "delete",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Delete existing collection with associated profiles and faces.",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The id of the collection that will be removed"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/collection",
      "method": "getCollection2UsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Retrieve existing collection content",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The id of the collection for which the data will be retrieved"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/collection",
      "method": "addCollection2UsingPost",
      "httpMethod": "post",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Create new empty collection with given name",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "collectionName",
          "schema": "string",
          "required": true,
          "description": "The name of the collection that will be created"
        },
        {
          "name": "preload",
          "schema": "boolean",
          "required": false,
          "description": "Defined whether to preload collection"
        },
        {
          "name": "evictable",
          "schema": "boolean",
          "required": false,
          "description": "Defined whether the collection can be evicted"
        },
        {
          "name": "purposes",
          "schema": "array",
          "required": false,
          "description": "The newly declared purposes of the collection"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/export/csv",
      "method": "exportCsvUsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Retrieve collection content for data analysis.",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The id of the collection for which the data will be retrieved"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/purpose",
      "method": "repurposeCollectionUsingPut",
      "httpMethod": "put",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Change purpose of existing collection",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The id of the collection for which the data will be retrieved"
        },
        {
          "name": "purposes",
          "schema": "array",
          "required": true,
          "description": "The newly declared purposes of the collection"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/{id}",
      "method": "deleteCollectionUsingDelete",
      "httpMethod": "delete",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Delete existing collection with associated profiles and faces.",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the collection that will be removed"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/{id}",
      "method": "getCollectionUsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Retrieve existing collection content",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the collection for which the data will be retrieved"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/{id}",
      "method": "updateCollectionUsingPatch",
      "httpMethod": "patch",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Update an existing collection with a given id",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "The name of the collection that will be updated"
        },
        {
          "name": "purposes",
          "schema": "array",
          "required": false,
          "description": "The newly declared purposes of the collection"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the collection that will be updated"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/{id}",
      "method": "updateCollection2UsingPost",
      "httpMethod": "post",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Update an existing collection with a given id",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "The name of the collection that will be updated"
        },
        {
          "name": "purposes",
          "schema": "array",
          "required": false,
          "description": "The newly declared purposes of the collection"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the collection that will be updated"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/collection/{id}/profile",
      "method": "getAllCollectionProfilesUsingGet",
      "httpMethod": "get",
      "tag": "Collection",
      "typeScriptTag": "collection",
      "description": "Gets all the profiles associated to a collection",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/classificationAttributes",
      "method": "removeClassificationAttributesFromProfileUsingDelete",
      "httpMethod": "delete",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Removes classification attributes from a profile",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile associated with the classification attributes"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/classificationAttributes",
      "method": "getClassificationAttributesFromProfileUsingGet",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Gets classification attributes from a profile",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile associated with the classification attributes"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/classificationAttributes",
      "method": "mapClassificationAttributesToProfileUsingPut",
      "httpMethod": "put",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Maps classification attributes to a profile",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile associated with the classification attributes"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        },
        {
          "name": "classificationAttributes",
          "schema": "string",
          "required": true,
          "description": "Comma separated key:value classification attributes"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/enrollmentStatus",
      "method": "getProfileEnrollmentStatusUsingGet",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Gets the enrollment status of a profile: information on whether it is suitable for authentication.",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile that contains the faces"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/map",
      "method": "removeFacesFromProfileUsingDelete",
      "httpMethod": "delete",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Removes (unmaps) a list of faces, identified by faceHashes, from a profile, identified by profileId",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "faceHashes",
          "schema": "string",
          "required": true,
          "description": "Comma separated face hashes, that will be removed from a profile"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile that contains the face"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/map",
      "method": "getFacesFromProfileUsingGet",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Gets all the faceHashes associated to a profile",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile that contains the faces"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/map",
      "method": "mapFacesToProfileUsingPost",
      "httpMethod": "post",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Adds (maps) a list of faces, identified by faceHashes, to a profile, identified by profileId",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "faceHashes",
          "schema": "string",
          "required": true,
          "description": "Comma separated face hashes, that will be associated to a profile"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile that will store the face"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "The collection that contains the profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/profile",
      "method": "deleteProfile2UsingDelete",
      "httpMethod": "delete",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Deletes a profile and unmaps all its faces",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "profileId",
          "schema": "string",
          "required": true,
          "description": "The profile id (provide this if you don't have the externalId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/profile",
      "method": "addProfileUsingPost",
      "httpMethod": "post",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Creates a new profile with no faces associated to it (empty profile)",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "externalId",
          "schema": "string",
          "required": false,
          "description": "External reference to additional information you don’t want to share with VisageCloud"
        },
        {
          "name": "screenName",
          "schema": "string",
          "required": false,
          "description": "Human-readable label for the profile"
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": "Allows you to do finer filtering in face recognition"
        },
        {
          "name": "classificationAttributes",
          "schema": "string",
          "required": false,
          "description": "Comma separated key:value classification attributes"
        },
        {
          "name": "details",
          "schema": "string",
          "required": false,
          "description": "Comma separated key:value details of profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/{id}",
      "method": "deleteProfileUsingDelete",
      "httpMethod": "delete",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Deletes a profile and unmaps all its faces",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The profile id (provide this if you don't have the externalId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/{id}",
      "method": "getProfileUsingGet",
      "httpMethod": "get",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Retrieves a profile",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "withFaces",
          "schema": "string",
          "required": false,
          "description": "Retrieves the profile with all its associated faces"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The profile id (provide this if you don't have the externalId"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/profile/{id}",
      "method": "updateProfileUsingPatch",
      "httpMethod": "patch",
      "tag": "Profile",
      "typeScriptTag": "profile",
      "description": "Update an existing profile with a given id",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the profile that will be updated"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": true,
          "description": "Uniquely identified collection that can store multiple profiles"
        },
        {
          "name": "externalId",
          "schema": "string",
          "required": false,
          "description": "External reference to additional information you don’t want to share with VisageCloud"
        },
        {
          "name": "screenName",
          "schema": "string",
          "required": false,
          "description": "Human-readable label for the profile"
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": "Allows you to do finer filtering in face recognition"
        },
        {
          "name": "classificationAttributes",
          "schema": "string",
          "required": false,
          "description": "Comma separated key:value classification attributes"
        },
        {
          "name": "details",
          "schema": "string",
          "required": false,
          "description": "Comma separated key:value details of profile"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/all",
      "method": "streamsByAccountUsingGet",
      "httpMethod": "get",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Show status of all streams from account",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/attendance",
      "method": "getLastNAttedanceUsingGet",
      "httpMethod": "get",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Get last N recognized individuals from stream",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "streamIds",
          "schema": "array",
          "required": false,
          "description": "The id of the stream for which the frames will be retrieved"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "How many frames to retrieve at a time"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/cleanup",
      "method": "cleanupStreamUsingPatch",
      "httpMethod": "patch",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Cleanup frames older than specified timeframe",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream that will be stopped"
        },
        {
          "name": "interval",
          "schema": "integer",
          "required": true,
          "description": "Frames older than interval (seconds) will be cleaned up"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/frameImage",
      "method": "getFrameImageUsingGet",
      "httpMethod": "get",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Get individual frame image",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream for which the frames will be retrieved"
        },
        {
          "name": "timestamp",
          "schema": "integer",
          "required": true,
          "description": "Timestamp of frame to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/frames",
      "method": "getLastNFramesUsingGet",
      "httpMethod": "get",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Get last processed N frames from stream",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey or readOnlyKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream for which the frames will be retrieved"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "How many frames to retrieve at a time"
        },
        {
          "name": "collectionId",
          "schema": "string",
          "required": false,
          "description": "The collection id you want to run recognition against"
        },
        {
          "name": "labels",
          "schema": "array",
          "required": false,
          "description": "Labels associated with the given picture or picture URL"
        },
        {
          "name": "attributeFilters",
          "schema": "array",
          "required": false,
          "description": "Filters that will be applied on the recognition operation"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/start",
      "method": "startStreamUsingPatch",
      "httpMethod": "patch",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Start existing stream",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream that will be started"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/stop",
      "method": "stopStreamUsingPatch",
      "httpMethod": "patch",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Stop existing stream",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream that will be stopped"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/stream",
      "method": "addStreamUsingPost",
      "httpMethod": "post",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Create new stream with given name",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the stream that will be created"
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": "The url of the stream"
        },
        {
          "name": "method",
          "schema": "string",
          "required": false,
          "description": "Streaming method"
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": "Username"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "Password"
        },
        {
          "name": "skipFramesWithNoFaces",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the original picture to be stored for later retrieval"
        },
        {
          "name": "retentionTime",
          "schema": "integer",
          "required": false,
          "description": "Number of seconds for frames to be kept. Default is 605000s (7 days)"
        },
        {
          "name": "storeOriginalFrames",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the original picture to be stored for later retrieval"
        },
        {
          "name": "storeAttendanceFaces",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces"
        },
        {
          "name": "storeAttendanceFrames",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want to store permanently store frames with a recognized face in them"
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether the stream is currently active or not"
        },
        {
          "name": "associatedCollections",
          "schema": "array",
          "required": false,
          "description": "List of collection ids which will be used to measure attendance"
        },
        {
          "name": "attributes",
          "schema": "string",
          "required": false,
          "description": "Attributes of the stream"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/{id}",
      "method": "removeStreamUsingDelete",
      "httpMethod": "delete",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Delete existing stream",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The id of the stream that will be removed"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/{streamId}",
      "method": "getStreamUsingGet",
      "httpMethod": "get",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Get an existing stream with a given ID",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream for which the data will be retrieved"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/rest/v1.1/stream/{streamId}",
      "method": "updateStreamUsingPatch",
      "httpMethod": "patch",
      "tag": "Stream",
      "typeScriptTag": "stream",
      "description": "Update an existing stream with a given ID",
      "parameters": [
        {
          "name": "accessKey",
          "schema": "string",
          "required": true,
          "description": "The accessKey provided by VisageCloud"
        },
        {
          "name": "secretKey",
          "schema": "string",
          "required": true,
          "description": "The secretKey provided by VisageCloud"
        },
        {
          "name": "streamId",
          "schema": "string",
          "required": true,
          "description": "The id of the stream that will be updated"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "The name of the stream that will be updated"
        },
        {
          "name": "url",
          "schema": "string",
          "required": false,
          "description": "The url of the stream"
        },
        {
          "name": "method",
          "schema": "string",
          "required": false,
          "description": "Streaming method"
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": "Username"
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": "Password"
        },
        {
          "name": "skipFramesWithNoFaces",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the original picture to be stored for later retrieval"
        },
        {
          "name": "retentionTime",
          "schema": "integer",
          "required": false,
          "description": "Number of seconds for frames to be kept"
        },
        {
          "name": "storeOriginalFrames",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want the original picture to be stored for later retrieval"
        },
        {
          "name": "storeAttendanceFaces",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want to store permanently store faces clippings of the recognized faces"
        },
        {
          "name": "storeAttendanceFrames",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether you want to store permanently store frames with a recognized face in them"
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": "Boolean value indicating whether the stream is currently active or not"
        },
        {
          "name": "associatedCollections",
          "schema": "array",
          "required": false,
          "description": "List of collection ids which will be used to measure attendance"
        },
        {
          "name": "attributes",
          "schema": "string",
          "required": false,
          "description": "Attributes of the stream"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://visagecloud.com",
  "apiDescription": "Face search, recognition & classification API. Just make a call to our REST API each time your app needs to access face recognition and classification capabilities.",
  "apiTitle": "VisageCloud",
  "endpoints": 36,
  "sdkMethods": 52,
  "schemas": 2,
  "parameters": 277,
  "contactUrl": "https://visagecloud.com",
  "contactEmail": "office@visagecloud.com",
  "difficultyScore": 122.25,
  "difficulty": "Medium"
}