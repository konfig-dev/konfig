{
  "providerName": "impala.travel",
  "openApiRaw": "https://docs.impala.travel/api/v1/projects/impala/booking-api/nodes/spec/openapi.seller.yaml?branch=v1.003",
  "homepage": "impala.travel",
  "serviceName": "hotels",
  "apiVersion": "1.003",
  "methods": [
    {
      "url": "/bookings",
      "method": "listBookings",
      "httpMethod": "get",
      "tag": "Bookings",
      "description": "List all bookings",
      "parameters": [
        {
          "name": "start",
          "schema": "object",
          "description": "Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?start[lte]=2021-12-20&start[gte]=2021-12-10`"
        },
        {
          "name": "end",
          "schema": "object",
          "description": "Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?end[lte]=2021-12-25&end[gte]=2021-12-15`"
        },
        {
          "name": "created",
          "schema": "object",
          "description": "Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&created[gte]=2020-11-04T15:56:37.000Z`"
        },
        {
          "name": "updated",
          "schema": "object",
          "description": "Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&updated[gte]=2020-11-04T15:56:37.000Z`"
        },
        {
          "name": "size",
          "schema": "number",
          "description": "Pagination size. Defaults to 100 if omitted."
        },
        {
          "name": "offset",
          "schema": "number",
          "description": "Pagination offset. Defaults to 0 if omitted."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Order in which the results should be sorted. Currently allows you to sort by `createdAt` and `updatedAt`. Specify multiple paramaters by separating with commas"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/bookings",
      "method": "createBooking",
      "httpMethod": "post",
      "tag": "Bookings",
      "description": "Create a booking",
      "parameters": [
        {
          "name": "bookingContact",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "end",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rooms",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "start",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "202",
          "description": "Details of an existing booking."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/bookings/{bookingId}",
      "method": "cancelBooking",
      "httpMethod": "delete",
      "tag": "Bookings",
      "description": "Cancel a booking",
      "parameters": [
        {
          "name": "bookingId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of the booking you would like to update."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an existing booking."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/bookings/{bookingId}",
      "method": "retrieveBooking",
      "httpMethod": "get",
      "tag": "Bookings",
      "description": "Retrieve a booking",
      "parameters": [
        {
          "name": "bookingId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of the booking you would like to update."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an existing booking."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/bookings/{bookingId}",
      "method": "updateBooking",
      "httpMethod": "put",
      "tag": "Bookings",
      "description": "Change a booking",
      "parameters": [
        {
          "name": "bookingId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of the booking you would like to update."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an existing booking."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/bookings/{bookingId}/booking-contact",
      "method": "updateBookingContact",
      "httpMethod": "put",
      "tag": "Bookings",
      "description": "Change a booking contact",
      "parameters": [
        {
          "name": "bookingId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of the booking you would like to update."
        },
        {
          "name": "bookingContact",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "updateBookingVersionAtTimestamp",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Details of an existing booking."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/hotels",
      "method": "listHotels",
      "httpMethod": "get",
      "tag": "Hotels",
      "description": "List all hotels",
      "parameters": [
        {
          "name": "name",
          "schema": "object",
          "description": "Allows for filtering based on the property name. Available modifiers include equal to (`eq`) or case insensitive search (`like`). Usage example: `?name[like]=palace`"
        },
        {
          "name": "starRating",
          "schema": "object",
          "description": "Allows for filtering based on the starRating of a property. Available modifiers include less than (`lt`), greater than (`gt`), less than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?starRating[gt]=3&starRating[lt]=5`"
        },
        {
          "name": "country",
          "schema": "object",
          "description": "Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (`eq`). Usage example: `?country[eq]=GBR`"
        },
        {
          "name": "start",
          "schema": "string",
          "description": "The arrival day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`)."
        },
        {
          "name": "end",
          "schema": "string",
          "description": "The departure day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`)."
        },
        {
          "name": "latitude",
          "schema": "number",
          "description": "The WGS 84 latitude of the location to search around (e.g. `58.386186`)."
        },
        {
          "name": "longitude",
          "schema": "number",
          "description": "The WGS 84 longitude of the location to search around (e.g. `-9.952549`)."
        },
        {
          "name": "radius",
          "schema": "integer",
          "description": "The distance (in meters) to search around the specified location (e.g. `10000` for 10 km)."
        },
        {
          "name": "hotelIds",
          "schema": "array",
          "description": "A comma-separated list of hotel ids you wish to filter by (e.g. `60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e`)."
        },
        {
          "name": "created",
          "schema": "object",
          "description": "Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&created[gte]=2020-11-04T15:56:37.000Z`"
        },
        {
          "name": "updated",
          "schema": "object",
          "description": "Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&updated[gte]=2020-11-04T15:56:37.000Z`"
        },
        {
          "name": "size",
          "schema": "number",
          "description": "Number of hotels returned on a given page (pagination)."
        },
        {
          "name": "offset",
          "schema": "number",
          "description": "Offset from the first hotel in the result (for pagination)."
        },
        {
          "name": "sortBy",
          "schema": "string",
          "description": "Order in which the results should be sorted. Currently allows you to sort by `name` (alphabetical), star `rating`, and `distance_m` in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for `:asc` (ascending) and `:desc` (descending) ordering."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/hotels/{hotelId}",
      "method": "retrieveHotel",
      "httpMethod": "get",
      "tag": "Hotels",
      "description": "Retrieve a hotel",
      "parameters": [
        {
          "name": "hotelId",
          "schema": "string",
          "required": true,
          "description": "The unique identifier of this hotel on the Impala platform."
        },
        {
          "name": "start",
          "schema": "string",
          "description": "The arrival day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`)."
        },
        {
          "name": "end",
          "schema": "string",
          "description": "The departure day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Full details on a hotel, including its room types and available rates"
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": ""
        }
      ]
    },
    {
      "url": "/hotels/{hotelId}/rate-plans",
      "method": "listRatePlansForHotel",
      "httpMethod": "get",
      "tag": "Rate Calendar",
      "description": "List all rate plans (rate calendar) for a hotel (Beta endpoint)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    },
    {
      "url": "/hotels/{hotelId}/rate-plans/{ratePlanId}",
      "method": "listRatePlanForHotelForRatePlanId",
      "httpMethod": "get",
      "tag": "Rate Calendar",
      "description": "List a rate plan (rate calendar) for a hotel (Beta endpoint).",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Rate plan encapsulates rates given a set of internal conditions like cancellation policy or meal plan."
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://sandbox.impala.travel/v1",
  "apiDescription": "Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.\n\nGetting started is easy:\n\n> **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).\n\n> **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)\n\n> **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.\n\nWant to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.",
  "apiTitle": "Impala Hotel Booking API",
  "endpoints": 7,
  "sdkMethods": 12,
  "schemas": 46,
  "parameters": 36,
  "contactUrl": "https://docs.impala.travel/",
  "contactEmail": "support@impala.travel",
  "difficultyScore": 44,
  "difficulty": "Easy"
}