{
  "providerName": "docker.com",
  "openApiRaw": "https://raw.githubusercontent.com/docker/go-docker/master/api/swagger.yaml",
  "securitySchemes": {},
  "homepage": "docker.com",
  "serviceName": "engine",
  "apiVersion": "1.33",
  "methods": [
    {
      "url": "/_ping",
      "method": "systemPing",
      "httpMethod": "get",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Ping",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/auth",
      "method": "systemAuth",
      "httpMethod": "post",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Check auth configuration",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serveraddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/build",
      "method": "imageBuild",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Build an image",
      "parameters": [
        {
          "name": "dockerfile",
          "schema": "string",
          "description": "Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`."
        },
        {
          "name": "t",
          "schema": "string",
          "description": "A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters."
        },
        {
          "name": "extrahosts",
          "schema": "string",
          "description": "Extra hosts to add to /etc/hosts"
        },
        {
          "name": "remote",
          "schema": "string",
          "description": "A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball."
        },
        {
          "name": "q",
          "schema": "boolean",
          "description": "Suppress verbose build output."
        },
        {
          "name": "nocache",
          "schema": "boolean",
          "description": "Do not use the cache when building the image."
        },
        {
          "name": "cachefrom",
          "schema": "string",
          "description": "JSON array of images used for build cache resolution."
        },
        {
          "name": "pull",
          "schema": "string",
          "description": "Attempt to pull the image even if an older image exists locally."
        },
        {
          "name": "rm",
          "schema": "boolean",
          "description": "Remove intermediate containers after a successful build."
        },
        {
          "name": "forcerm",
          "schema": "boolean",
          "description": "Always remove intermediate containers, even upon failure."
        },
        {
          "name": "memory",
          "schema": "integer",
          "description": "Set memory limit for build."
        },
        {
          "name": "memswap",
          "schema": "integer",
          "description": "Total memory (memory + swap). Set as `-1` to disable swap."
        },
        {
          "name": "cpushares",
          "schema": "integer",
          "description": "CPU shares (relative weight)."
        },
        {
          "name": "cpusetcpus",
          "schema": "string",
          "description": "CPUs in which to allow execution (e.g., `0-3`, `0,1`)."
        },
        {
          "name": "cpuperiod",
          "schema": "integer",
          "description": "The length of a CPU period in microseconds."
        },
        {
          "name": "cpuquota",
          "schema": "integer",
          "description": "Microseconds of CPU time that the container can get in a CPU period."
        },
        {
          "name": "buildargs",
          "schema": "integer",
          "description": "JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values. [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)"
        },
        {
          "name": "shmsize",
          "schema": "integer",
          "description": "Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB."
        },
        {
          "name": "squash",
          "schema": "boolean",
          "description": "Squash the resulting images layers into a single layer. *(Experimental release only.)*"
        },
        {
          "name": "labels",
          "schema": "string",
          "description": "Arbitrary key/value labels to set on the image, as a JSON map of string pairs."
        },
        {
          "name": "networkmode",
          "schema": "string",
          "description": "Sets the networking mode for the run commands during build. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to."
        },
        {
          "name": "contentType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "xRegistryConfig",
          "schema": "string",
          "description": "This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.\n\nThe key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:\n\n```\n{\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\": \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\": \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/build/prune",
      "method": "buildPrune",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Delete builder cache",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/commit",
      "method": "imageCommit",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Create a new image from a container",
      "parameters": [
        {
          "name": "container",
          "schema": "string",
          "description": "The ID or name of the container to commit"
        },
        {
          "name": "repo",
          "schema": "string",
          "description": "Repository name for the created image"
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Tag name for the create image"
        },
        {
          "name": "comment",
          "schema": "string",
          "description": "Commit message"
        },
        {
          "name": "author",
          "schema": "string",
          "description": "Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)"
        },
        {
          "name": "pause",
          "schema": "boolean",
          "description": "Whether to pause the container before committing"
        },
        {
          "name": "changes",
          "schema": "string",
          "description": "`Dockerfile` instructions to apply while committing"
        },
        {
          "name": "ArgsEscaped",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AttachStderr",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AttachStdin",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AttachStdout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Cmd",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "Domainname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Entrypoint",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "Env",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ExposedPorts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Healthcheck",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Hostname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Image",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "MacAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "NetworkDisabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "OnBuild",
          "schema": "array",
          "description": ""
        },
        {
          "name": "OpenStdin",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Shell",
          "schema": "array",
          "description": ""
        },
        {
          "name": "StdinOnce",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "StopSignal",
          "schema": "string",
          "description": ""
        },
        {
          "name": "StopTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "Tty",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "User",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Volumes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "WorkingDir",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Response to an API call that returns just an Id"
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/configs",
      "method": "configList",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "List configs",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the configs list. Available filters:\n\n- `id=<config id>`\n- `label=<key> or label=<key>=value`\n- `name=<config name>`\n- `names=<config name>`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/configs/create",
      "method": "configCreate",
      "httpMethod": "post",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Create a config",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/configs/{id}",
      "method": "configDelete",
      "httpMethod": "delete",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Delete a config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the config"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/configs/{id}",
      "method": "configInspect",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Inspect a config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the config"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/configs/{id}/update",
      "method": "configUpdate",
      "httpMethod": "post",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Update a Config",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or name of the config"
        },
        {
          "name": "version",
          "schema": "integer",
          "required": true,
          "description": "The version number of the config object being updated. This is required to avoid conflicting writes."
        },
        {
          "name": "Data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/create",
      "method": "containerCreate",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Create a container",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": "Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/json",
      "method": "containerList",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "List containers",
      "parameters": [
        {
          "name": "all",
          "schema": "boolean",
          "description": "Return all containers. By default, only running containers are shown"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Return this number of most recently created containers, including non-running ones."
        },
        {
          "name": "size",
          "schema": "boolean",
          "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`."
        },
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{\"status\": [\"paused\"]}` will only return paused containers. Available filters:\n\n- `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)\n- `before`=(`<container id>` or `<container name>`)\n- `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)\n- `exited=<int>` containers with exit code of `<int>`\n- `health`=(`starting`|`healthy`|`unhealthy`|`none`)\n- `id=<ID>` a container's ID\n- `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)\n- `is-task=`(`true`|`false`)\n- `label=key` or `label=\"key=value\"` of a container label\n- `name=<name>` a container's name\n- `network`=(`<network id>` or `<network name>`)\n- `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)\n- `since`=(`<container id>` or `<container name>`)\n- `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)\n- `volume`=(`<volume name>` or `<mount point destination>`)\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/prune",
      "method": "containerPrune",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Delete stopped containers",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}",
      "method": "containerDelete",
      "httpMethod": "delete",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Remove a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "v",
          "schema": "boolean",
          "description": "Remove the volumes associated with the container."
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": "If the container is running, kill it before removing it."
        },
        {
          "name": "link",
          "schema": "boolean",
          "description": "Remove the specified link associated with the container."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/archive",
      "method": "containerArchive",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Get an archive of a filesystem resource in a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": "Resource in the container’s filesystem to archive."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/archive",
      "method": "containerArchiveInfo",
      "httpMethod": "head",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Get information about files in a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": "Resource in the container’s filesystem to archive."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/archive",
      "method": "putContainerArchive",
      "httpMethod": "put",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Extract an archive of files or folders to a directory in a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "path",
          "schema": "string",
          "required": true,
          "description": "Path to a directory in the container to extract the archive’s contents into. "
        },
        {
          "name": "noOverwriteDirNonDir",
          "schema": "string",
          "description": "If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/attach",
      "method": "containerAttach",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Attach to a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "detachKeys",
          "schema": "string",
          "description": "Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`."
        },
        {
          "name": "logs",
          "schema": "boolean",
          "description": "Replay previous logs from the container.\n\nThis is useful for attaching to a container that has started and you want to output everything since the container started.\n\nIf `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.\n"
        },
        {
          "name": "stream",
          "schema": "boolean",
          "description": "Stream attached streams from the time the request was made onwards"
        },
        {
          "name": "stdin",
          "schema": "boolean",
          "description": "Attach to `stdin`"
        },
        {
          "name": "stdout",
          "schema": "boolean",
          "description": "Attach to `stdout`"
        },
        {
          "name": "stderr",
          "schema": "boolean",
          "description": "Attach to `stderr`"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/attach/ws",
      "method": "containerAttachWebsocket",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Attach to a container via a websocket",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "detachKeys",
          "schema": "string",
          "description": "Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,`, or `_`."
        },
        {
          "name": "logs",
          "schema": "boolean",
          "description": "Return logs"
        },
        {
          "name": "stream",
          "schema": "boolean",
          "description": "Return stream"
        },
        {
          "name": "stdin",
          "schema": "boolean",
          "description": "Attach to `stdin`"
        },
        {
          "name": "stdout",
          "schema": "boolean",
          "description": "Attach to `stdout`"
        },
        {
          "name": "stderr",
          "schema": "boolean",
          "description": "Attach to `stderr`"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/changes",
      "method": "containerChanges",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Get changes on a container’s filesystem",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/exec",
      "method": "containerExec",
      "httpMethod": "post",
      "tag": "Exec",
      "typeScriptTag": "exec",
      "description": "Create an exec instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of container"
        },
        {
          "name": "AttachStderr",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AttachStdin",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AttachStdout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Cmd",
          "schema": "array",
          "description": ""
        },
        {
          "name": "DetachKeys",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Env",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Privileged",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Tty",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "User",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Response to an API call that returns just an Id"
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/export",
      "method": "containerExport",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Export a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/json",
      "method": "containerInspect",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Inspect a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "size",
          "schema": "boolean",
          "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/kill",
      "method": "containerKill",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Kill a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "signal",
          "schema": "string",
          "description": "Signal to send to the container as an integer or string (e.g. `SIGINT`)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/logs",
      "method": "containerLogs",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Get container logs",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Return the logs as a stream.\n\nThis will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n"
        },
        {
          "name": "stdout",
          "schema": "boolean",
          "description": "Return logs from `stdout`"
        },
        {
          "name": "stderr",
          "schema": "boolean",
          "description": "Return logs from `stderr`"
        },
        {
          "name": "since",
          "schema": "integer",
          "description": "Only return logs since this time, as a UNIX timestamp"
        },
        {
          "name": "timestamps",
          "schema": "boolean",
          "description": "Add timestamps to every log line"
        },
        {
          "name": "tail",
          "schema": "string",
          "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines."
        }
      ],
      "responses": [
        {
          "statusCode": "101",
          "description": ""
        },
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/pause",
      "method": "containerPause",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Pause a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/rename",
      "method": "containerRename",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Rename a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "New name for the container"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/resize",
      "method": "containerResize",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Resize a container TTY",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "h",
          "schema": "integer",
          "description": "Height of the tty session in characters"
        },
        {
          "name": "w",
          "schema": "integer",
          "description": "Width of the tty session in characters"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/restart",
      "method": "containerRestart",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Restart a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "t",
          "schema": "integer",
          "description": "Number of seconds to wait before killing the container"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/start",
      "method": "containerStart",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Start a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "detachKeys",
          "schema": "string",
          "description": "Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`."
        }
      ],
      "responses": [
        {
          "statusCode": "304",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/stats",
      "method": "containerStats",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Get container stats based on resource usage",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "stream",
          "schema": "boolean",
          "description": "Stream the output. If false, the stats will be output once and then it will disconnect."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/stop",
      "method": "containerStop",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Stop a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "t",
          "schema": "integer",
          "description": "Number of seconds to wait before killing the container"
        }
      ],
      "responses": [
        {
          "statusCode": "304",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/top",
      "method": "containerTop",
      "httpMethod": "get",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "List processes running inside a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "psArgs",
          "schema": "string",
          "description": "The arguments to pass to `ps`. For example, `aux`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/unpause",
      "method": "containerUnpause",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Unpause a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/update",
      "method": "containerUpdate",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Update a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/containers/{id}/wait",
      "method": "containerWait",
      "httpMethod": "post",
      "tag": "Container",
      "typeScriptTag": "container",
      "description": "Wait for a container",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the container"
        },
        {
          "name": "condition",
          "schema": "string",
          "description": "Wait until a container state reaches the given condition, either 'not-running' (default), 'next-exit', or 'removed'."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/distribution/{name}/json",
      "method": "distributionInspect",
      "httpMethod": "get",
      "tag": "Distribution",
      "typeScriptTag": "distribution",
      "description": "Get image information from the registry",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "401",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/events",
      "method": "systemEvents",
      "httpMethod": "get",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Monitor events",
      "parameters": [
        {
          "name": "since",
          "schema": "string",
          "description": "Show events created since this timestamp then stream new events."
        },
        {
          "name": "until",
          "schema": "string",
          "description": "Show events created until this timestamp then stop streaming."
        },
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:\n\n- `config=<string>` config name or ID\n- `container=<string>` container name or ID\n- `daemon=<string>` daemon name or ID\n- `event=<string>` event type\n- `image=<string>` image name or ID\n- `label=<string>` image or container label\n- `network=<string>` network name or ID\n- `node=<string>` node ID\n- `plugin`=<string> plugin name or ID\n- `scope`＝<string> local or swarm\n- `secret=<string>` secret name or ID\n- `service=<string>` service name or ID\n- `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`\n- `volume=<string>` volume name\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/exec/{id}/json",
      "method": "execInspect",
      "httpMethod": "get",
      "tag": "Exec",
      "typeScriptTag": "exec",
      "description": "Inspect an exec instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Exec instance ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/exec/{id}/resize",
      "method": "execResize",
      "httpMethod": "post",
      "tag": "Exec",
      "typeScriptTag": "exec",
      "description": "Resize an exec instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Exec instance ID"
        },
        {
          "name": "h",
          "schema": "integer",
          "description": "Height of the TTY session in characters"
        },
        {
          "name": "w",
          "schema": "integer",
          "description": "Width of the TTY session in characters"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/exec/{id}/start",
      "method": "execStart",
      "httpMethod": "post",
      "tag": "Exec",
      "typeScriptTag": "exec",
      "description": "Start an exec instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Exec instance ID"
        },
        {
          "name": "Detach",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Tty",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/create",
      "method": "imageCreate",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Create an image",
      "parameters": [
        {
          "name": "fromImage",
          "schema": "string",
          "description": "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed."
        },
        {
          "name": "fromSrc",
          "schema": "string",
          "description": "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image."
        },
        {
          "name": "repo",
          "schema": "string",
          "description": "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled."
        },
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "description": "A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/get",
      "method": "imageGetAll",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Export several images",
      "parameters": [
        {
          "name": "names",
          "schema": "array",
          "description": "Image names to filter by"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/json",
      "method": "imageList",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "List Images",
      "parameters": [
        {
          "name": "all",
          "schema": "boolean",
          "description": "Show all images. Only images from a final layer (no children) are shown by default."
        },
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:\n\n- `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)\n- `dangling=true`\n- `label=key` or `label=\"key=value\"` of an image label\n- `reference`=(`<image-name>[:<tag>]`)\n- `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)\n"
        },
        {
          "name": "digests",
          "schema": "boolean",
          "description": "Show digest information as a `RepoDigests` field on each image."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/load",
      "method": "imageLoad",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Import images",
      "parameters": [
        {
          "name": "quiet",
          "schema": "boolean",
          "description": "Suppress progress details during load."
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/prune",
      "method": "imagePrune",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Delete unused images",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`), prune only\n   unused *and* untagged images. When set to `false`\n   (or `0`), all unused images are pruned.\n- `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/search",
      "method": "imageSearch",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Search images",
      "parameters": [
        {
          "name": "term",
          "schema": "string",
          "required": true,
          "description": "Term to search"
        },
        {
          "name": "limit",
          "schema": "integer",
          "description": "Maximum number of results to return"
        },
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:\n\n- `is-automated=(true|false)`\n- `is-official=(true|false)`\n- `stars=<number>` Matches images that has at least 'number' stars.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}",
      "method": "imageDelete",
      "httpMethod": "delete",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Remove an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or ID"
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": "Remove the image even if it is being used by stopped containers or has other tags"
        },
        {
          "name": "noprune",
          "schema": "boolean",
          "description": "Do not delete untagged parent images"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}/get",
      "method": "imageGet",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Export an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}/history",
      "method": "imageHistory",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Get the history of an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}/json",
      "method": "imageInspect",
      "httpMethod": "get",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Inspect an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}/push",
      "method": "imagePush",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Push an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or ID."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The tag to associate with the image on the registry."
        },
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "required": true,
          "description": "A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/images/{name}/tag",
      "method": "imageTag",
      "httpMethod": "post",
      "tag": "Image",
      "typeScriptTag": "image",
      "description": "Tag an image",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Image name or ID to tag."
        },
        {
          "name": "repo",
          "schema": "string",
          "description": "The repository to tag in. For example, `someuser/someimage`."
        },
        {
          "name": "tag",
          "schema": "string",
          "description": "The name of the new tag."
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/info",
      "method": "systemInfo",
      "httpMethod": "get",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Get system information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks",
      "method": "networkList",
      "httpMethod": "get",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "List networks",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:\n\n- `driver=<driver-name>` Matches a network's driver.\n- `id=<network-id>` Matches all or part of a network ID.\n- `label=<key>` or `label=<key>=<value>` of a network label.\n- `name=<network-name>` Matches all or part of a network name.\n- `scope=[\"swarm\"|\"global\"|\"local\"]` Filters networks by scope (`swarm`, `global`, or `local`).\n- `type=[\"custom\"|\"builtin\"]` Filters networks by type. The `custom` keyword returns all user-defined networks.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/create",
      "method": "networkCreate",
      "httpMethod": "post",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Create a network",
      "parameters": [
        {
          "name": "Attachable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "CheckDuplicate",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "Driver",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "EnableIPv6",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "IPAM",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "Ingress",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "Internal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "Options",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/prune",
      "method": "networkPrune",
      "httpMethod": "post",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Delete unused networks",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/{id}",
      "method": "networkDelete",
      "httpMethod": "delete",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Remove a network",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Network ID or name"
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/{id}",
      "method": "networkInspect",
      "httpMethod": "get",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Inspect a network",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Network ID or name"
        },
        {
          "name": "verbose",
          "schema": "boolean",
          "description": "Detailed inspect output for troubleshooting"
        },
        {
          "name": "scope",
          "schema": "string",
          "description": "Filter the network by scope (swarm, global, or local)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/{id}/connect",
      "method": "networkConnect",
      "httpMethod": "post",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Connect a container to a network",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Network ID or name"
        },
        {
          "name": "Container",
          "schema": "string",
          "description": ""
        },
        {
          "name": "EndpointConfig",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/networks/{id}/disconnect",
      "method": "networkDisconnect",
      "httpMethod": "post",
      "tag": "Network",
      "typeScriptTag": "network",
      "description": "Disconnect a container from a network",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Network ID or name"
        },
        {
          "name": "Container",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/nodes",
      "method": "nodeList",
      "httpMethod": "get",
      "tag": "Node",
      "typeScriptTag": "node",
      "description": "List nodes",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `id=<node id>`\n- `label=<engine label>`\n- `membership=`(`accepted`|`pending`)`\n- `name=<node name>`\n- `role=`(`manager`|`worker`)`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/nodes/{id}",
      "method": "nodeDelete",
      "httpMethod": "delete",
      "tag": "Node",
      "typeScriptTag": "node",
      "description": "Delete a node",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or name of the node"
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": "Force remove a node from the swarm"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/nodes/{id}",
      "method": "nodeInspect",
      "httpMethod": "get",
      "tag": "Node",
      "typeScriptTag": "node",
      "description": "Inspect a node",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or name of the node"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/nodes/{id}/update",
      "method": "nodeUpdate",
      "httpMethod": "post",
      "tag": "Node",
      "typeScriptTag": "node",
      "description": "Update a node",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID of the node"
        },
        {
          "name": "version",
          "schema": "integer",
          "required": true,
          "description": "The version number of the node object being updated. This is required to avoid conflicting writes."
        },
        {
          "name": "Availability",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Role",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins",
      "method": "pluginList",
      "httpMethod": "get",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "List plugins",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:\n\n- `capability=<capability name>`\n- `enable=<true>|<false>`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/create",
      "method": "pluginCreate",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Create a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/privileges",
      "method": "getPluginPrivileges",
      "httpMethod": "get",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Get plugin privileges",
      "parameters": [
        {
          "name": "remote",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/pull",
      "method": "pluginPull",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Install a plugin",
      "parameters": [
        {
          "name": "remote",
          "schema": "string",
          "required": true,
          "description": "Remote reference for plugin to install.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": "Local name for the pulled plugin.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
        },
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "description": "A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}",
      "method": "pluginDelete",
      "httpMethod": "delete",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Remove a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": "Disable the plugin before removing. This may result in issues if the plugin is in use by a container."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A plugin for the Engine API"
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/disable",
      "method": "pluginDisable",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Disable a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/enable",
      "method": "pluginEnable",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Enable a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        },
        {
          "name": "timeout",
          "schema": "integer",
          "description": "Set the HTTP client timeout (in seconds)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/json",
      "method": "pluginInspect",
      "httpMethod": "get",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Inspect a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A plugin for the Engine API"
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/push",
      "method": "pluginPush",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Push a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/set",
      "method": "pluginSet",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Configure a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/plugins/{name}/upgrade",
      "method": "pluginUpgrade",
      "httpMethod": "post",
      "tag": "Plugin",
      "typeScriptTag": "plugin",
      "description": "Upgrade a plugin",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the plugin. The `:latest` tag is optional, and is the default if omitted."
        },
        {
          "name": "remote",
          "schema": "string",
          "required": true,
          "description": "Remote reference to upgrade to.\n\nThe `:latest` tag is optional, and is used as the default if omitted.\n"
        },
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "description": "A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/secrets",
      "method": "secretList",
      "httpMethod": "get",
      "tag": "Secret",
      "typeScriptTag": "secret",
      "description": "List secrets",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:\n\n- `id=<secret id>`\n- `label=<key> or label=<key>=value`\n- `name=<secret name>`\n- `names=<secret name>`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/secrets/create",
      "method": "secretCreate",
      "httpMethod": "post",
      "tag": "Secret",
      "typeScriptTag": "secret",
      "description": "Create a secret",
      "parameters": [],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/secrets/{id}",
      "method": "secretDelete",
      "httpMethod": "delete",
      "tag": "Secret",
      "typeScriptTag": "secret",
      "description": "Delete a secret",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the secret"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/secrets/{id}",
      "method": "secretInspect",
      "httpMethod": "get",
      "tag": "Secret",
      "typeScriptTag": "secret",
      "description": "Inspect a secret",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the secret"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/secrets/{id}/update",
      "method": "secretUpdate",
      "httpMethod": "post",
      "tag": "Secret",
      "typeScriptTag": "secret",
      "description": "Update a Secret",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "The ID or name of the secret"
        },
        {
          "name": "version",
          "schema": "integer",
          "required": true,
          "description": "The version number of the secret object being updated. This is required to avoid conflicting writes."
        },
        {
          "name": "Data",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Driver",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services",
      "method": "serviceList",
      "httpMethod": "get",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "List services",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the services list. Available filters:\n\n- `id=<service id>`\n- `label=<service label>`\n- `mode=[\"replicated\"|\"global\"]`\n- `name=<service name>`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services/create",
      "method": "serviceCreate",
      "httpMethod": "post",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "Create a service",
      "parameters": [
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "description": "A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "403",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services/{id}",
      "method": "serviceDelete",
      "httpMethod": "delete",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "Delete a service",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of service."
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services/{id}",
      "method": "serviceInspect",
      "httpMethod": "get",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "Inspect a service",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of service."
        },
        {
          "name": "insertDefaults",
          "schema": "boolean",
          "description": "Fill empty fields with default values."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services/{id}/logs",
      "method": "serviceLogs",
      "httpMethod": "get",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "Get service logs",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of the service"
        },
        {
          "name": "details",
          "schema": "boolean",
          "description": "Show service context and extra details provided to logs."
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Return the logs as a stream.\n\nThis will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n"
        },
        {
          "name": "stdout",
          "schema": "boolean",
          "description": "Return logs from `stdout`"
        },
        {
          "name": "stderr",
          "schema": "boolean",
          "description": "Return logs from `stderr`"
        },
        {
          "name": "since",
          "schema": "integer",
          "description": "Only return logs since this time, as a UNIX timestamp"
        },
        {
          "name": "timestamps",
          "schema": "boolean",
          "description": "Add timestamps to every log line"
        },
        {
          "name": "tail",
          "schema": "string",
          "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines."
        }
      ],
      "responses": [
        {
          "statusCode": "101",
          "description": ""
        },
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/services/{id}/update",
      "method": "serviceUpdate",
      "httpMethod": "post",
      "tag": "Service",
      "typeScriptTag": "service",
      "description": "Update a service",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID or name of service."
        },
        {
          "name": "version",
          "schema": "integer",
          "required": true,
          "description": "The version number of the service object being updated. This is required to avoid conflicting writes."
        },
        {
          "name": "registryAuthFrom",
          "schema": "string",
          "description": "If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are `spec` and `previous-spec`."
        },
        {
          "name": "rollback",
          "schema": "string",
          "description": "Set to this parameter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case."
        },
        {
          "name": "xRegistryAuth",
          "schema": "string",
          "description": "A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/session",
      "method": "session",
      "httpMethod": "post",
      "tag": "Session (experimental)",
      "typeScriptTag": "session (experimental)",
      "description": "Initialize interactive session",
      "parameters": [],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm",
      "method": "swarmInspect",
      "httpMethod": "get",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Inspect swarm",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/init",
      "method": "swarmInit",
      "httpMethod": "post",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Initialize a new swarm",
      "parameters": [
        {
          "name": "AdvertiseAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DataPathAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ForceNewCluster",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ListenAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Spec",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The node ID"
        },
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/join",
      "method": "swarmJoin",
      "httpMethod": "post",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Join an existing swarm",
      "parameters": [
        {
          "name": "AdvertiseAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DataPathAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "JoinToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ListenAddr",
          "schema": "string",
          "description": ""
        },
        {
          "name": "RemoteAddrs",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/leave",
      "method": "swarmLeave",
      "httpMethod": "post",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Leave a swarm",
      "parameters": [
        {
          "name": "force",
          "schema": "boolean",
          "description": "Force leave swarm, even if this is the last manager or that it will break the cluster."
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/unlock",
      "method": "swarmUnlock",
      "httpMethod": "post",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Unlock a locked manager",
      "parameters": [
        {
          "name": "UnlockKey",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/unlockkey",
      "method": "swarmUnlockkey",
      "httpMethod": "get",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Get the unlock key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/swarm/update",
      "method": "swarmUpdate",
      "httpMethod": "post",
      "tag": "Swarm",
      "typeScriptTag": "swarm",
      "description": "Update a swarm",
      "parameters": [
        {
          "name": "version",
          "schema": "integer",
          "required": true,
          "description": "The version number of the swarm object being updated. This is required to avoid conflicting writes."
        },
        {
          "name": "rotateWorkerToken",
          "schema": "boolean",
          "description": "Rotate the worker join token."
        },
        {
          "name": "rotateManagerToken",
          "schema": "boolean",
          "description": "Rotate the manager join token."
        },
        {
          "name": "rotateManagerUnlockKey",
          "schema": "boolean",
          "description": "Rotate the manager unlock key."
        },
        {
          "name": "CAConfig",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Dispatcher",
          "schema": "object",
          "description": ""
        },
        {
          "name": "EncryptionConfig",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Orchestration",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Raft",
          "schema": "object",
          "description": ""
        },
        {
          "name": "TaskDefaults",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/system/df",
      "method": "systemDataUsage",
      "httpMethod": "get",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Get data usage information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/tasks",
      "method": "taskList",
      "httpMethod": "get",
      "tag": "Task",
      "typeScriptTag": "task",
      "description": "List tasks",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list. Available filters:\n\n- `desired-state=(running | shutdown | accepted)`\n- `id=<task id>`\n- `label=key` or `label=\"key=value\"`\n- `name=<task name>`\n- `node=<node id or name>`\n- `service=<service name>`\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/tasks/{id}",
      "method": "taskInspect",
      "httpMethod": "get",
      "tag": "Task",
      "typeScriptTag": "task",
      "description": "Inspect a task",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the task"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/tasks/{id}/logs",
      "method": "taskLogs",
      "httpMethod": "get",
      "description": "Get task logs",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "ID of the task"
        },
        {
          "name": "details",
          "schema": "boolean",
          "description": "Show task context and extra details provided to logs."
        },
        {
          "name": "follow",
          "schema": "boolean",
          "description": "Return the logs as a stream.\n\nThis will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n"
        },
        {
          "name": "stdout",
          "schema": "boolean",
          "description": "Return logs from `stdout`"
        },
        {
          "name": "stderr",
          "schema": "boolean",
          "description": "Return logs from `stderr`"
        },
        {
          "name": "since",
          "schema": "integer",
          "description": "Only return logs since this time, as a UNIX timestamp"
        },
        {
          "name": "timestamps",
          "schema": "boolean",
          "description": "Add timestamps to every log line"
        },
        {
          "name": "tail",
          "schema": "string",
          "description": "Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines."
        }
      ],
      "responses": [
        {
          "statusCode": "101",
          "description": ""
        },
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        },
        {
          "statusCode": "503",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/version",
      "method": "systemVersion",
      "httpMethod": "get",
      "tag": "System",
      "typeScriptTag": "system",
      "description": "Get version",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/volumes",
      "method": "volumeList",
      "httpMethod": "get",
      "tag": "Volume",
      "typeScriptTag": "volume",
      "description": "List volumes",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "JSON encoded value of the filters (a `map[string][]string`) to\nprocess on the volumes list. Available filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`), returns all\n   volumes that are not in use by a container. When set to `false`\n   (or `0`), only volumes that are in use by one or more\n   containers are returned.\n- `driver=<volume-driver-name>` Matches volumes based on their driver.\n- `label=<key>` or `label=<key>:<value>` Matches volumes based on\n   the presence of a `label` alone or a `label` and a value.\n- `name=<volume-name>` Matches all or part of a volume name.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/volumes/create",
      "method": "volumeCreate",
      "httpMethod": "post",
      "tag": "Volume",
      "typeScriptTag": "volume",
      "description": "Create a volume",
      "parameters": [
        {
          "name": "Driver",
          "schema": "string",
          "description": ""
        },
        {
          "name": "DriverOpts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/volumes/prune",
      "method": "volumePrune",
      "httpMethod": "post",
      "tag": "Volume",
      "typeScriptTag": "volume",
      "description": "Delete unused volumes",
      "parameters": [
        {
          "name": "filters",
          "schema": "string",
          "description": "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\nAvailable filters:\n- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/volumes/{name}",
      "method": "volumeDelete",
      "httpMethod": "delete",
      "tag": "Volume",
      "typeScriptTag": "volume",
      "description": "Remove a volume",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Volume name or ID"
        },
        {
          "name": "force",
          "schema": "boolean",
          "description": "Force the removal of the volume"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "409",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    },
    {
      "url": "/volumes/{name}",
      "method": "volumeInspect",
      "httpMethod": "get",
      "tag": "Volume",
      "typeScriptTag": "volume",
      "description": "Inspect a volume",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Volume name or ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "404",
          "description": "Represents an error."
        },
        {
          "statusCode": "500",
          "description": "Represents an error."
        }
      ]
    }
  ],
  "apiBaseUrl": "/v1.33",
  "apiDescription": "The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.\n\nMost of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.\n\n# Errors\n\nThe API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n\n```\n{\n  \"message\": \"page not found\"\n}\n```\n\n# Versioning\n\nThe API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.\n\nFor Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.\n\nEngine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.\n\nIn previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.\n\nThe API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.\n\nThis documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:\n\nDocker version  | API version | Changes\n----------------|-------------|---------\n17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes)\n17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes)\n17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes)\n17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes)\n17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes)\n17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes)\n1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes)\n1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes)\n1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes)\n1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes)\n1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes)\n1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes)\n1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes)\n1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes)\n1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)\n\n# Authentication\n\nAuthentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:\n\n```\n{\n  \"username\": \"string\",\n  \"password\": \"string\",\n  \"email\": \"string\",\n  \"serveraddress\": \"string\"\n}\n```\n\nThe `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.\n\nIf you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:\n\n```\n{\n  \"identitytoken\": \"9cbaf023786cd7...\"\n}\n```\n",
  "apiTitle": "Docker Engine API",
  "endpoints": 97,
  "sdkMethods": 105,
  "schemas": 78,
  "parameters": 297,
  "difficultyScore": 218.25,
  "difficulty": "Hard"
}