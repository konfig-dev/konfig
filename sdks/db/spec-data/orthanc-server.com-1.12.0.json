{
  "providerName": "orthanc-server.com",
  "openApiRaw": "https://api.orthanc-server.com/orthanc-openapi.json",
  "securitySchemes": {},
  "homepage": "orthanc-server.com",
  "apiVersion": "1.12.0",
  "methods": [
    {
      "url": "/changes",
      "method": "/changesDelete",
      "httpMethod": "delete",
      "tag": "Tracking changes",
      "description": "Clear changes",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/changes",
      "method": "/changesGet",
      "httpMethod": "get",
      "tag": "Tracking changes",
      "description": "List changes",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of changes"
        }
      ]
    },
    {
      "url": "/exports",
      "method": "/exportsDelete",
      "httpMethod": "delete",
      "tag": "Tracking changes",
      "description": "Clear exports",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/exports",
      "method": "/exportsGet",
      "httpMethod": "get",
      "tag": "Tracking changes",
      "description": "List exports",
      "parameters": [
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of exports"
        }
      ]
    },
    {
      "url": "/instances",
      "method": "/instancesGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "List the available instances",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual instances"
        },
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the Orthanc identifiers, or detailed information about the reported instances (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/instances",
      "method": "/instancesPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Upload DICOM instances",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the uploaded instance, or list of information for each uploaded instance in the case of ZIP archive"
        }
      ]
    },
    {
      "url": "/instances/{id}",
      "method": "/instances/{id}Delete",
      "httpMethod": "delete",
      "tag": "Instances",
      "description": "Delete some instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}",
      "method": "/instances/{id}Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get information about some instance",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM instance"
        }
      ]
    },
    {
      "url": "/instances/{id}/anonymize",
      "method": "/instances/{id}/anonymizePost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Anonymize instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "DicomVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepPrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The anonymized DICOM instance"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments",
      "method": "/instances/{id}/attachmentsGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "List attachments",
      "parameters": [
        {
          "name": "full",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve the attachments list and their numerical ids"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the attachments"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}",
      "method": "/instances/{id}/attachments/{name}Delete",
      "httpMethod": "delete",
      "tag": "Instances",
      "description": "Delete attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/attachments/{name}",
      "method": "/instances/{id}/attachments/{name}Get",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations on attachments",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}",
      "method": "/instances/{id}/attachments/{name}Put",
      "httpMethod": "put",
      "tag": "Instances",
      "description": "Set attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, if this is not the first time this attachment is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/compress",
      "method": "/instances/{id}/attachments/{name}/compressPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Compress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/attachments/{name}/compressed-data",
      "method": "/instances/{id}/attachments/{name}/compressedDataGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get attachment (no decompression)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/compressed-md5",
      "method": "/instances/{id}/attachments/{name}/compressedMd5Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get MD5 of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/compressed-size",
      "method": "/instances/{id}/attachments/{name}/compressedSizeGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get size of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/data",
      "method": "/instances/{id}/attachments/{name}/dataGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/info",
      "method": "/instances/{id}/attachments/{name}/infoGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get info about the attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the information about the attachment"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/is-compressed",
      "method": "/instances/{id}/attachments/{name}/isCompressedGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Is attachment compressed?",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`0` if the attachment was stored uncompressed, `1` if it was compressed"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/md5",
      "method": "/instances/{id}/attachments/{name}/md5Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get MD5 of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/size",
      "method": "/instances/{id}/attachments/{name}/sizeGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get size of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment"
        }
      ]
    },
    {
      "url": "/instances/{id}/attachments/{name}/uncompress",
      "method": "/instances/{id}/attachments/{name}/uncompressPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Uncompress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/attachments/{name}/verify-md5",
      "method": "/instances/{id}/attachments/{name}/verifyMd5Post",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Verify attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "On success, a valid JSON object is returned"
        }
      ]
    },
    {
      "url": "/instances/{id}/content",
      "method": "/instances/{id}/contentGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get raw tag",
      "parameters": [
        {
          "name": "",
          "schema": "string",
          "required": true,
          "description": "Path to the DICOM tag. This is the interleaving of one DICOM tag, possibly followed by an index for sequences. Sequences are accessible as, for instance, `/0008-1140/1/0008-1150`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The raw value of the tag of intereset (binary data, whose memory layout depends on the underlying transfer syntax), or JSON array containing the list of available tags if accessing a dataset"
        }
      ]
    },
    {
      "url": "/instances/{id}/export",
      "method": "/instances/{id}/exportPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Write DICOM onto filesystem",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/file",
      "method": "/instances/{id}/fileGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Download DICOM",
      "parameters": [
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "This HTTP header can be set to retrieve the DICOM instance in DICOMweb format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The DICOM instance"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames",
      "method": "/instances/{id}/framesGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "List available frames",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of the indices of the available frames"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}",
      "method": "/instances/{id}/frames/{frame}Get",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations",
      "parameters": [
        {
          "name": "frame",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/image-int16",
      "method": "/instances/{id}/frames/{frame}/imageInt16Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode a frame (int16)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/image-uint16",
      "method": "/instances/{id}/frames/{frame}/imageUint16Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode a frame (uint16)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/image-uint8",
      "method": "/instances/{id}/frames/{frame}/imageUint8Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode a frame (uint8)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/matlab",
      "method": "/instances/{id}/frames/{frame}/matlabGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode frame for Matlab",
      "parameters": [
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Octave/Matlab matrix"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/numpy",
      "method": "/instances/{id}/frames/{frame}/numpyGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode frame for numpy",
      "parameters": [
        {
          "name": "compress",
          "schema": "boolean",
          "required": false,
          "description": "Compress the file as `.npz`"
        },
        {
          "name": "rescale",
          "schema": "boolean",
          "required": false,
          "description": "On grayscale images, apply the rescaling and return floating-point values"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM resource of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Numpy file: https://numpy.org/devdocs/reference/generated/numpy.lib.format.html"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/preview",
      "method": "/instances/{id}/frames/{frame}/previewGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode a frame (preview)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/raw",
      "method": "/instances/{id}/frames/{frame}/rawGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Access raw frame",
      "parameters": [
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The raw frame"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/raw.gz",
      "method": "/instances/{id}/frames/{frame}/rawGzGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Access raw frame (compressed)",
      "parameters": [
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The raw frame, compressed using gzip"
        }
      ]
    },
    {
      "url": "/instances/{id}/frames/{frame}/rendered",
      "method": "/instances/{id}/frames/{frame}/renderedGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Render a frame",
      "parameters": [
        {
          "name": "height",
          "schema": "number",
          "required": false,
          "description": "Height of the resized image"
        },
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "smooth",
          "schema": "boolean",
          "required": false,
          "description": "Whether to smooth image on resize"
        },
        {
          "name": "width",
          "schema": "number",
          "required": false,
          "description": "Width of the resized image"
        },
        {
          "name": "windowCenter",
          "schema": "number",
          "required": false,
          "description": "Windowing center"
        },
        {
          "name": "windowWidth",
          "schema": "number",
          "required": false,
          "description": "Windowing width"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "frame",
          "schema": "number",
          "required": true,
          "description": "Index of the frame (starts at `0`)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/header",
      "method": "/instances/{id}/headerGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get DICOM meta-header",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the DICOM tags and their associated value"
        }
      ]
    },
    {
      "url": "/instances/{id}/image-int16",
      "method": "/instances/{id}/imageInt16Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode an image (int16)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/image-uint16",
      "method": "/instances/{id}/imageUint16Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode an image (uint16)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/image-uint8",
      "method": "/instances/{id}/imageUint8Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode an image (uint8)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/labels",
      "method": "/instances/{id}/labelsGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "List labels",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the labels"
        }
      ]
    },
    {
      "url": "/instances/{id}/labels/{label}",
      "method": "/instances/{id}/labels/{label}Delete",
      "httpMethod": "delete",
      "tag": "Instances",
      "description": "Remove label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be removed"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/labels/{label}",
      "method": "/instances/{id}/labels/{label}Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Test label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty string is returned in the case of presence, error 404 in the case of absence"
        }
      ]
    },
    {
      "url": "/instances/{id}/labels/{label}",
      "method": "/instances/{id}/labels/{label}Put",
      "httpMethod": "put",
      "tag": "Instances",
      "description": "Add label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be added"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/matlab",
      "method": "/instances/{id}/matlabGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode frame for Matlab",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Octave/Matlab matrix"
        }
      ]
    },
    {
      "url": "/instances/{id}/metadata",
      "method": "/instances/{id}/metadataGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "List metadata",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, also retrieve the value of the individual metadata"
        },
        {
          "name": "numeric",
          "schema": "string",
          "required": false,
          "description": "If present, use the numeric identifier of the metadata instead of its symbolic name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/instances/{id}/metadata/{name}",
      "method": "/instances/{id}/metadata/{name}Delete",
      "httpMethod": "delete",
      "tag": "Instances",
      "description": "Delete metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/metadata/{name}",
      "method": "/instances/{id}/metadata/{name}Get",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get metadata",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Value of the metadata"
        }
      ]
    },
    {
      "url": "/instances/{id}/metadata/{name}",
      "method": "/instances/{id}/metadata/{name}Put",
      "httpMethod": "put",
      "tag": "Instances",
      "description": "Set metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, if this is not the first time this metadata is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/modify",
      "method": "/instances/{id}/modifyPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Modify instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemovePrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The modified DICOM instance"
        }
      ]
    },
    {
      "url": "/instances/{id}/module",
      "method": "/instances/{id}/moduleGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get instance module",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM instance"
        }
      ]
    },
    {
      "url": "/instances/{id}/numpy",
      "method": "/instances/{id}/numpyGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode instance for numpy",
      "parameters": [
        {
          "name": "compress",
          "schema": "boolean",
          "required": false,
          "description": "Compress the file as `.npz`"
        },
        {
          "name": "rescale",
          "schema": "boolean",
          "required": false,
          "description": "On grayscale images, apply the rescaling and return floating-point values"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM resource of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Numpy file: https://numpy.org/devdocs/reference/generated/numpy.lib.format.html"
        }
      ]
    },
    {
      "url": "/instances/{id}/patient",
      "method": "/instances/{id}/patientGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get parent patient",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM patient"
        }
      ]
    },
    {
      "url": "/instances/{id}/pdf",
      "method": "/instances/{id}/pdfGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get embedded PDF",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "PDF file"
        }
      ]
    },
    {
      "url": "/instances/{id}/preview",
      "method": "/instances/{id}/previewGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Decode an image (preview)",
      "parameters": [
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/reconstruct",
      "method": "/instances/{id}/reconstructPost",
      "httpMethod": "post",
      "tag": "Instances",
      "description": "Reconstruct tags & optionally files of instance",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        },
        {
          "name": "ReconstructFiles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/instances/{id}/rendered",
      "method": "/instances/{id}/renderedGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Render an image",
      "parameters": [
        {
          "name": "height",
          "schema": "number",
          "required": false,
          "description": "Height of the resized image"
        },
        {
          "name": "quality",
          "schema": "number",
          "required": false,
          "description": "Quality for JPEG images (between 1 and 100, defaults to 90)"
        },
        {
          "name": "returnUnsupportedImage",
          "schema": "boolean",
          "required": false,
          "description": "Returns an unsupported.png placeholder image if unable to provide the image instead of returning a 415 HTTP error (defaults to false)"
        },
        {
          "name": "smooth",
          "schema": "boolean",
          "required": false,
          "description": "Whether to smooth image on resize"
        },
        {
          "name": "width",
          "schema": "number",
          "required": false,
          "description": "Width of the resized image"
        },
        {
          "name": "windowCenter",
          "schema": "number",
          "required": false,
          "description": "Windowing center"
        },
        {
          "name": "windowWidth",
          "schema": "number",
          "required": false,
          "description": "Windowing width"
        },
        {
          "name": "accept",
          "schema": "string",
          "required": false,
          "description": "Format of the resulting image. Can be `image/png` (default), `image/jpeg` or `image/x-portable-arbitrarymap`"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JPEG image"
        }
      ]
    },
    {
      "url": "/instances/{id}/series",
      "method": "/instances/{id}/seriesGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get parent series",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM series"
        }
      ]
    },
    {
      "url": "/instances/{id}/simplified-tags",
      "method": "/instances/{id}/simplifiedTagsGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get human-readable tags",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the DICOM tags and their associated value"
        }
      ]
    },
    {
      "url": "/instances/{id}/statistics",
      "method": "/instances/{id}/statisticsGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get instance statistics",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/instances/{id}/study",
      "method": "/instances/{id}/studyGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get parent study",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM study"
        }
      ]
    },
    {
      "url": "/instances/{id}/tags",
      "method": "/instances/{id}/tagsGet",
      "httpMethod": "get",
      "tag": "Instances",
      "description": "Get DICOM tags",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM instance of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the DICOM tags and their associated value"
        }
      ]
    },
    {
      "url": "/jobs",
      "method": "/jobsGet",
      "httpMethod": "get",
      "tag": "Jobs",
      "description": "List jobs",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual jobs"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the jobs identifiers, or detailed information about the reported jobs (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/jobs/{id}",
      "method": "/jobs/{id}Get",
      "httpMethod": "get",
      "tag": "Jobs",
      "description": "Get job",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object detailing the job"
        }
      ]
    },
    {
      "url": "/jobs/{id}/cancel",
      "method": "/jobs/{id}/cancelPost",
      "httpMethod": "post",
      "tag": "Jobs",
      "description": "Cancel job",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/jobs/{id}/pause",
      "method": "/jobs/{id}/pausePost",
      "httpMethod": "post",
      "tag": "Jobs",
      "description": "Pause job",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/jobs/{id}/resubmit",
      "method": "/jobs/{id}/resubmitPost",
      "httpMethod": "post",
      "tag": "Jobs",
      "description": "Resubmit job",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/jobs/{id}/resume",
      "method": "/jobs/{id}/resumePost",
      "httpMethod": "post",
      "tag": "Jobs",
      "description": "Resume job",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/jobs/{id}/{key}",
      "method": "/jobs/{id}/{key}Get",
      "httpMethod": "get",
      "tag": "Jobs",
      "description": "Get job output",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        },
        {
          "name": "key",
          "schema": "string",
          "required": true,
          "description": "Name of the output of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Content of the output of the job"
        }
      ]
    },
    {
      "url": "/modalities",
      "method": "/modalitiesGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List DICOM modalities",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual DICOM modalities"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the identifiers of the modalities, or detailed information about the modalities (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/modalities/{id}",
      "method": "/modalities/{id}Delete",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "Delete DICOM modality",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the DICOM modality of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/modalities/{id}",
      "method": "/modalities/{id}Get",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List operations on modality",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the DICOM modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/modalities/{id}",
      "method": "/modalities/{id}Put",
      "httpMethod": "put",
      "tag": "Networking",
      "description": "Update DICOM modality",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the new/updated DICOM modality"
        },
        {
          "name": "AET",
          "schema": "string",
          "description": ""
        },
        {
          "name": "AllowEcho",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowFind",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowFindWorklist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowGet",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowMove",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowStorageCommitment",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowStore",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "AllowTranscoding",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Manufacturer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Port",
          "schema": "number",
          "description": ""
        },
        {
          "name": "UseDicomTls",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/modalities/{id}/configuration",
      "method": "/modalities/{id}/configurationGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get modality configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Configuration of the modality"
        }
      ]
    },
    {
      "url": "/modalities/{id}/echo",
      "method": "/modalities/{id}/echoPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Trigger C-ECHO SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "CheckFind",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/modalities/{id}/find",
      "method": "/modalities/{id}/findPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Hierarchical C-FIND SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching patients, embedding the matching studies, then the matching series."
        }
      ]
    },
    {
      "url": "/modalities/{id}/find-instance",
      "method": "/modalities/{id}/findInstancePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "C-FIND SCU for instances",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching instances"
        }
      ]
    },
    {
      "url": "/modalities/{id}/find-patient",
      "method": "/modalities/{id}/findPatientPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "C-FIND SCU for patients",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching patients"
        }
      ]
    },
    {
      "url": "/modalities/{id}/find-series",
      "method": "/modalities/{id}/findSeriesPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "C-FIND SCU for series",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching series"
        }
      ]
    },
    {
      "url": "/modalities/{id}/find-study",
      "method": "/modalities/{id}/findStudyPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "C-FIND SCU for studies",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching studies"
        }
      ]
    },
    {
      "url": "/modalities/{id}/find-worklist",
      "method": "/modalities/{id}/findWorklistPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "C-FIND SCU for worklist",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "Full",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Short",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array describing the DICOM tags of the matching worklists"
        }
      ]
    },
    {
      "url": "/modalities/{id}/move",
      "method": "/modalities/{id}/movePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Trigger C-MOVE SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LocalAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "TargetAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/modalities/{id}/query",
      "method": "/modalities/{id}/queryPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Trigger C-FIND SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "Level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LocalAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Normalize",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/modalities/{id}/storage-commitment",
      "method": "/modalities/{id}/storageCommitmentPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Trigger storage commitment request",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "DicomInstances",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/modalities/{id}/store",
      "method": "/modalities/{id}/storePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Trigger C-STORE SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "CalledAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "LocalAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MoveOriginatorAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "MoveOriginatorID",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Port",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "StorageCommitment",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/modalities/{id}/store-straight",
      "method": "/modalities/{id}/storeStraightPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Straight C-STORE SCU",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/patients",
      "method": "/patientsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "List the available patients",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual patients"
        },
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the Orthanc identifiers, or detailed information about the reported patients (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/patients/{id}",
      "method": "/patients/{id}Delete",
      "httpMethod": "delete",
      "tag": "Patients",
      "description": "Delete some patient",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}",
      "method": "/patients/{id}Get",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get information about some patient",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM patient"
        }
      ]
    },
    {
      "url": "/patients/{id}/anonymize",
      "method": "/patients/{id}/anonymizePost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Anonymize patient",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DicomVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepPrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/patients/{id}/archive",
      "method": "/patients/{id}/archiveGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/patients/{id}/archive",
      "method": "/patients/{id}/archivePost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments",
      "method": "/patients/{id}/attachmentsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "List attachments",
      "parameters": [
        {
          "name": "full",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve the attachments list and their numerical ids"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the attachments"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}",
      "method": "/patients/{id}/attachments/{name}Delete",
      "httpMethod": "delete",
      "tag": "Patients",
      "description": "Delete attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/attachments/{name}",
      "method": "/patients/{id}/attachments/{name}Get",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations on attachments",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}",
      "method": "/patients/{id}/attachments/{name}Put",
      "httpMethod": "put",
      "tag": "Patients",
      "description": "Set attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, if this is not the first time this attachment is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/compress",
      "method": "/patients/{id}/attachments/{name}/compressPost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Compress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/attachments/{name}/compressed-data",
      "method": "/patients/{id}/attachments/{name}/compressedDataGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get attachment (no decompression)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/compressed-md5",
      "method": "/patients/{id}/attachments/{name}/compressedMd5Get",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get MD5 of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/compressed-size",
      "method": "/patients/{id}/attachments/{name}/compressedSizeGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get size of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/data",
      "method": "/patients/{id}/attachments/{name}/dataGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/info",
      "method": "/patients/{id}/attachments/{name}/infoGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get info about the attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the information about the attachment"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/is-compressed",
      "method": "/patients/{id}/attachments/{name}/isCompressedGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Is attachment compressed?",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`0` if the attachment was stored uncompressed, `1` if it was compressed"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/md5",
      "method": "/patients/{id}/attachments/{name}/md5Get",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get MD5 of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/size",
      "method": "/patients/{id}/attachments/{name}/sizeGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get size of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment"
        }
      ]
    },
    {
      "url": "/patients/{id}/attachments/{name}/uncompress",
      "method": "/patients/{id}/attachments/{name}/uncompressPost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Uncompress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/attachments/{name}/verify-md5",
      "method": "/patients/{id}/attachments/{name}/verifyMd5Post",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Verify attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "On success, a valid JSON object is returned"
        }
      ]
    },
    {
      "url": "/patients/{id}/instances",
      "method": "/patients/{id}/instancesGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get child instances",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM instances"
        }
      ]
    },
    {
      "url": "/patients/{id}/instances-tags",
      "method": "/patients/{id}/instancesTagsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get tags of instances",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags"
        }
      ]
    },
    {
      "url": "/patients/{id}/labels",
      "method": "/patients/{id}/labelsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "List labels",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the labels"
        }
      ]
    },
    {
      "url": "/patients/{id}/labels/{label}",
      "method": "/patients/{id}/labels/{label}Delete",
      "httpMethod": "delete",
      "tag": "Patients",
      "description": "Remove label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be removed"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/labels/{label}",
      "method": "/patients/{id}/labels/{label}Get",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Test label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty string is returned in the case of presence, error 404 in the case of absence"
        }
      ]
    },
    {
      "url": "/patients/{id}/labels/{label}",
      "method": "/patients/{id}/labels/{label}Put",
      "httpMethod": "put",
      "tag": "Patients",
      "description": "Add label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be added"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/media",
      "method": "/patients/{id}/mediaGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "extended",
          "schema": "string",
          "required": false,
          "description": "If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/patients/{id}/media",
      "method": "/patients/{id}/mediaPost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Extended",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/patients/{id}/metadata",
      "method": "/patients/{id}/metadataGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "List metadata",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, also retrieve the value of the individual metadata"
        },
        {
          "name": "numeric",
          "schema": "string",
          "required": false,
          "description": "If present, use the numeric identifier of the metadata instead of its symbolic name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/patients/{id}/metadata/{name}",
      "method": "/patients/{id}/metadata/{name}Delete",
      "httpMethod": "delete",
      "tag": "Patients",
      "description": "Delete metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/metadata/{name}",
      "method": "/patients/{id}/metadata/{name}Get",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get metadata",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Value of the metadata"
        }
      ]
    },
    {
      "url": "/patients/{id}/metadata/{name}",
      "method": "/patients/{id}/metadata/{name}Put",
      "httpMethod": "put",
      "tag": "Patients",
      "description": "Set metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, if this is not the first time this metadata is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/modify",
      "method": "/patients/{id}/modifyPost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Modify patient",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemovePrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/patients/{id}/module",
      "method": "/patients/{id}/moduleGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get patient module",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM patient"
        }
      ]
    },
    {
      "url": "/patients/{id}/protected",
      "method": "/patients/{id}/protectedGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Is the patient protected against recycling?",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`1` if protected, `0` if not protected"
        }
      ]
    },
    {
      "url": "/patients/{id}/protected",
      "method": "/patients/{id}/protectedPut",
      "httpMethod": "put",
      "tag": "Patients",
      "description": "Protect one patient against recycling",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/reconstruct",
      "method": "/patients/{id}/reconstructPost",
      "httpMethod": "post",
      "tag": "Patients",
      "description": "Reconstruct tags & optionally files of patient",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        },
        {
          "name": "ReconstructFiles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/patients/{id}/series",
      "method": "/patients/{id}/seriesGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get child series",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM series"
        }
      ]
    },
    {
      "url": "/patients/{id}/shared-tags",
      "method": "/patients/{id}/sharedTagsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get shared tags",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the values of the DICOM tags"
        }
      ]
    },
    {
      "url": "/patients/{id}/statistics",
      "method": "/patients/{id}/statisticsGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get patient statistics",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/patients/{id}/studies",
      "method": "/patients/{id}/studiesGet",
      "httpMethod": "get",
      "tag": "Patients",
      "description": "Get child studies",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the patient of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM studies"
        }
      ]
    },
    {
      "url": "/peers",
      "method": "/peersGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List Orthanc peers",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual Orthanc peers"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the identifiers of the peers, or detailed information about the peers (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/peers/{id}",
      "method": "/peers/{id}Delete",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "Delete Orthanc peer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the Orthanc peer of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/peers/{id}",
      "method": "/peers/{id}Get",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List operations on peer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the peer of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/peers/{id}",
      "method": "/peers/{id}Put",
      "httpMethod": "put",
      "tag": "Networking",
      "description": "Update Orthanc peer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the new/updated Orthanc peer"
        },
        {
          "name": "CertificateFile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CertificateKeyFile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CertificateKeyPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "HttpHeaders",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "URL",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/peers/{id}/configuration",
      "method": "/peers/{id}/configurationGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get peer configuration",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the peer of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Configuration of the peer"
        }
      ]
    },
    {
      "url": "/peers/{id}/store",
      "method": "/peers/{id}/storePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Send to Orthanc peer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Compress",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/peers/{id}/store-straight",
      "method": "/peers/{id}/storeStraightPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Straight store to peer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the modality of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/peers/{id}/system",
      "method": "/peers/{id}/systemGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get peer system information",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the peer of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "System information about the peer"
        }
      ]
    },
    {
      "url": "/plugins",
      "method": "/pluginsGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "List plugins",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the identifiers of the installed plugins"
        }
      ]
    },
    {
      "url": "/plugins/explorer.js",
      "method": "/plugins/explorerJsGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "JavaScript extensions to Orthanc Explorer",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The JavaScript extensions"
        }
      ]
    },
    {
      "url": "/plugins/{id}",
      "method": "/plugins/{id}Get",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get plugin",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the job of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing information about the plugin"
        }
      ]
    },
    {
      "url": "/queries",
      "method": "/queriesGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List query/retrieve operations",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the identifiers"
        }
      ]
    },
    {
      "url": "/queries/{id}",
      "method": "/queries/{id}Delete",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "Delete a query",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/queries/{id}",
      "method": "/queries/{id}Get",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List operations on a query",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the list of operations"
        }
      ]
    },
    {
      "url": "/queries/{id}/answers",
      "method": "/queries/{id}/answersGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List answers to a query",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual answers"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the indices of the answers, or detailed information about the reported answers (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}",
      "method": "/queries/{id}/answers/{index}Get",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "List operations on an answer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the list of operations"
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}/content",
      "method": "/queries/{id}/answers/{index}/contentGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get one answer",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the DICOM tags of the answer"
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}/query-instances",
      "method": "/queries/{id}/answers/{index}/queryInstancesPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Query the child instances of an answer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}/query-series",
      "method": "/queries/{id}/answers/{index}/querySeriesPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Query the child series of an answer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}/query-studies",
      "method": "/queries/{id}/answers/{index}/queryStudiesPost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Query the child studies of an answer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queries/{id}/answers/{index}/retrieve",
      "method": "/queries/{id}/answers/{index}/retrievePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Retrieve one answer",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "index",
          "schema": "string",
          "required": true,
          "description": "Index of the answer"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Full",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Simplify",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "TargetAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/queries/{id}/level",
      "method": "/queries/{id}/levelGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get level of original query",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The level"
        }
      ]
    },
    {
      "url": "/queries/{id}/modality",
      "method": "/queries/{id}/modalityGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get modality of original query",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The identifier of the DICOM modality"
        }
      ]
    },
    {
      "url": "/queries/{id}/query",
      "method": "/queries/{id}/queryGet",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get original query arguments",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Content of the original query"
        }
      ]
    },
    {
      "url": "/queries/{id}/retrieve",
      "method": "/queries/{id}/retrievePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Retrieve all answers",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the query of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Full",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Simplify",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "TargetAet",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/series",
      "method": "/seriesGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "List the available series",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual series"
        },
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the Orthanc identifiers, or detailed information about the reported series (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/series/{id}",
      "method": "/series/{id}Delete",
      "httpMethod": "delete",
      "tag": "Series",
      "description": "Delete some series",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}",
      "method": "/series/{id}Get",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get information about some series",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM series"
        }
      ]
    },
    {
      "url": "/series/{id}/anonymize",
      "method": "/series/{id}/anonymizePost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Anonymize series",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DicomVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepPrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/series/{id}/archive",
      "method": "/series/{id}/archiveGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/series/{id}/archive",
      "method": "/series/{id}/archivePost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments",
      "method": "/series/{id}/attachmentsGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "List attachments",
      "parameters": [
        {
          "name": "full",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve the attachments list and their numerical ids"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the attachments"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}",
      "method": "/series/{id}/attachments/{name}Delete",
      "httpMethod": "delete",
      "tag": "Series",
      "description": "Delete attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/attachments/{name}",
      "method": "/series/{id}/attachments/{name}Get",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations on attachments",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}",
      "method": "/series/{id}/attachments/{name}Put",
      "httpMethod": "put",
      "tag": "Series",
      "description": "Set attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, if this is not the first time this attachment is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/compress",
      "method": "/series/{id}/attachments/{name}/compressPost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Compress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/attachments/{name}/compressed-data",
      "method": "/series/{id}/attachments/{name}/compressedDataGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get attachment (no decompression)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/compressed-md5",
      "method": "/series/{id}/attachments/{name}/compressedMd5Get",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get MD5 of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/compressed-size",
      "method": "/series/{id}/attachments/{name}/compressedSizeGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get size of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/data",
      "method": "/series/{id}/attachments/{name}/dataGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/info",
      "method": "/series/{id}/attachments/{name}/infoGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get info about the attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the information about the attachment"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/is-compressed",
      "method": "/series/{id}/attachments/{name}/isCompressedGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Is attachment compressed?",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`0` if the attachment was stored uncompressed, `1` if it was compressed"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/md5",
      "method": "/series/{id}/attachments/{name}/md5Get",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get MD5 of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/size",
      "method": "/series/{id}/attachments/{name}/sizeGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get size of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment"
        }
      ]
    },
    {
      "url": "/series/{id}/attachments/{name}/uncompress",
      "method": "/series/{id}/attachments/{name}/uncompressPost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Uncompress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/attachments/{name}/verify-md5",
      "method": "/series/{id}/attachments/{name}/verifyMd5Post",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Verify attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "On success, a valid JSON object is returned"
        }
      ]
    },
    {
      "url": "/series/{id}/instances",
      "method": "/series/{id}/instancesGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get child instances",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM instances"
        }
      ]
    },
    {
      "url": "/series/{id}/instances-tags",
      "method": "/series/{id}/instancesTagsGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get tags of instances",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags"
        }
      ]
    },
    {
      "url": "/series/{id}/labels",
      "method": "/series/{id}/labelsGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "List labels",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the labels"
        }
      ]
    },
    {
      "url": "/series/{id}/labels/{label}",
      "method": "/series/{id}/labels/{label}Delete",
      "httpMethod": "delete",
      "tag": "Series",
      "description": "Remove label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be removed"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/labels/{label}",
      "method": "/series/{id}/labels/{label}Get",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Test label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty string is returned in the case of presence, error 404 in the case of absence"
        }
      ]
    },
    {
      "url": "/series/{id}/labels/{label}",
      "method": "/series/{id}/labels/{label}Put",
      "httpMethod": "put",
      "tag": "Series",
      "description": "Add label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be added"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/media",
      "method": "/series/{id}/mediaGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "extended",
          "schema": "string",
          "required": false,
          "description": "If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/series/{id}/media",
      "method": "/series/{id}/mediaPost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Extended",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/series/{id}/metadata",
      "method": "/series/{id}/metadataGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "List metadata",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, also retrieve the value of the individual metadata"
        },
        {
          "name": "numeric",
          "schema": "string",
          "required": false,
          "description": "If present, use the numeric identifier of the metadata instead of its symbolic name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/series/{id}/metadata/{name}",
      "method": "/series/{id}/metadata/{name}Delete",
      "httpMethod": "delete",
      "tag": "Series",
      "description": "Delete metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/metadata/{name}",
      "method": "/series/{id}/metadata/{name}Get",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get metadata",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Value of the metadata"
        }
      ]
    },
    {
      "url": "/series/{id}/metadata/{name}",
      "method": "/series/{id}/metadata/{name}Put",
      "httpMethod": "put",
      "tag": "Series",
      "description": "Set metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, if this is not the first time this metadata is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/modify",
      "method": "/series/{id}/modifyPost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Modify series",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemovePrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/series/{id}/module",
      "method": "/series/{id}/moduleGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get series module",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM series"
        }
      ]
    },
    {
      "url": "/series/{id}/numpy",
      "method": "/series/{id}/numpyGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Decode series for numpy",
      "parameters": [
        {
          "name": "compress",
          "schema": "boolean",
          "required": false,
          "description": "Compress the file as `.npz`"
        },
        {
          "name": "rescale",
          "schema": "boolean",
          "required": false,
          "description": "On grayscale images, apply the rescaling and return floating-point values"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the DICOM resource of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Numpy file: https://numpy.org/devdocs/reference/generated/numpy.lib.format.html"
        }
      ]
    },
    {
      "url": "/series/{id}/ordered-slices",
      "method": "/series/{id}/orderedSlicesGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Order the slices",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/series/{id}/patient",
      "method": "/series/{id}/patientGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get parent patient",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM patient"
        }
      ]
    },
    {
      "url": "/series/{id}/reconstruct",
      "method": "/series/{id}/reconstructPost",
      "httpMethod": "post",
      "tag": "Series",
      "description": "Reconstruct tags & optionally files of series",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        },
        {
          "name": "ReconstructFiles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/series/{id}/shared-tags",
      "method": "/series/{id}/sharedTagsGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get shared tags",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the values of the DICOM tags"
        }
      ]
    },
    {
      "url": "/series/{id}/statistics",
      "method": "/series/{id}/statisticsGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get series statistics",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/series/{id}/study",
      "method": "/series/{id}/studyGet",
      "httpMethod": "get",
      "tag": "Series",
      "description": "Get parent study",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the series of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM study"
        }
      ]
    },
    {
      "url": "/statistics",
      "method": "/statisticsGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get database statistics",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/storage-commitment/{id}",
      "method": "/storageCommitment/{id}Get",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Get storage commitment report",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the storage commitment report"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/storage-commitment/{id}/remove",
      "method": "/storageCommitment/{id}/removePost",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Remove after storage commitment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Identifier of the storage commitment report"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies",
      "method": "/studiesGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "List the available studies",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve detailed information about the individual studies"
        },
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "limit",
          "schema": "number",
          "required": false,
          "description": "Limit the number of results"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "since",
          "schema": "number",
          "required": false,
          "description": "Show only the resources since the provided index"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the Orthanc identifiers, or detailed information about the reported studies (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/studies/{id}",
      "method": "/studies/{id}Delete",
      "httpMethod": "delete",
      "tag": "Studies",
      "description": "Delete some study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}",
      "method": "/studies/{id}Get",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get information about some study",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM study"
        }
      ]
    },
    {
      "url": "/studies/{id}/anonymize",
      "method": "/studies/{id}/anonymizePost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Anonymize study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DicomVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepPrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/studies/{id}/archive",
      "method": "/studies/{id}/archiveGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/studies/{id}/archive",
      "method": "/studies/{id}/archivePost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments",
      "method": "/studies/{id}/attachmentsGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "List attachments",
      "parameters": [
        {
          "name": "full",
          "schema": "string",
          "required": false,
          "description": "If present, retrieve the attachments list and their numerical ids"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the attachments"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}",
      "method": "/studies/{id}/attachments/{name}Delete",
      "httpMethod": "delete",
      "tag": "Studies",
      "description": "Delete attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/attachments/{name}",
      "method": "/studies/{id}/attachments/{name}Get",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations on attachments",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}",
      "method": "/studies/{id}/attachments/{name}Put",
      "httpMethod": "put",
      "tag": "Studies",
      "description": "Set attachment",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the attachment, if this is not the first time this attachment is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty JSON object in the case of a success"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/compress",
      "method": "/studies/{id}/attachments/{name}/compressPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Compress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/attachments/{name}/compressed-data",
      "method": "/studies/{id}/attachments/{name}/compressedDataGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get attachment (no decompression)",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/compressed-md5",
      "method": "/studies/{id}/attachments/{name}/compressedMd5Get",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get MD5 of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/compressed-size",
      "method": "/studies/{id}/attachments/{name}/compressedSizeGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get size of attachment on disk",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment, as stored on the disk"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/data",
      "method": "/studies/{id}/attachments/{name}/dataGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The attachment"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/info",
      "method": "/studies/{id}/attachments/{name}/infoGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get info about the attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the information about the attachment"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/is-compressed",
      "method": "/studies/{id}/attachments/{name}/isCompressedGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Is attachment compressed?",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "`0` if the attachment was stored uncompressed, `1` if it was compressed"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/md5",
      "method": "/studies/{id}/attachments/{name}/md5Get",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get MD5 of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The MD5 of the attachment"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/size",
      "method": "/studies/{id}/attachments/{name}/sizeGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get size of attachment",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the attachment, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The size of the attachment"
        }
      ]
    },
    {
      "url": "/studies/{id}/attachments/{name}/uncompress",
      "method": "/studies/{id}/attachments/{name}/uncompressPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Uncompress attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/attachments/{name}/verify-md5",
      "method": "/studies/{id}/attachments/{name}/verifyMd5Post",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Verify attachment",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the attachment, or its index (cf. `UserContentType` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "On success, a valid JSON object is returned"
        }
      ]
    },
    {
      "url": "/studies/{id}/instances",
      "method": "/studies/{id}/instancesGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get child instances",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM instances"
        }
      ]
    },
    {
      "url": "/studies/{id}/instances-tags",
      "method": "/studies/{id}/instancesTagsGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get tags of instances",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object associating the Orthanc identifiers of the instances, with the values of their DICOM tags"
        }
      ]
    },
    {
      "url": "/studies/{id}/labels",
      "method": "/studies/{id}/labelsGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "List labels",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the labels"
        }
      ]
    },
    {
      "url": "/studies/{id}/labels/{label}",
      "method": "/studies/{id}/labels/{label}Delete",
      "httpMethod": "delete",
      "tag": "Studies",
      "description": "Remove label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be removed"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/labels/{label}",
      "method": "/studies/{id}/labels/{label}Get",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Test label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Empty string is returned in the case of presence, error 404 in the case of absence"
        }
      ]
    },
    {
      "url": "/studies/{id}/labels/{label}",
      "method": "/studies/{id}/labels/{label}Put",
      "httpMethod": "put",
      "tag": "Studies",
      "description": "Add label",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": "The label to be added"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/media",
      "method": "/studies/{id}/mediaGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "extended",
          "schema": "string",
          "required": false,
          "description": "If present, will include additional tags such as `SeriesDescription`, leading to a so-called *extended DICOMDIR*"
        },
        {
          "name": "filename",
          "schema": "string",
          "required": false,
          "description": "Filename to set in the \"Content-Disposition\" HTTP header (including file extension)"
        },
        {
          "name": "transcode",
          "schema": "string",
          "required": false,
          "description": "If present, the DICOM files in the archive will be transcoded to the provided transfer syntax: https://book.orthanc-server.com/faq/transcoding.html"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "ZIP file containing the archive"
        }
      ]
    },
    {
      "url": "/studies/{id}/media",
      "method": "/studies/{id}/mediaPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Extended",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/studies/{id}/merge",
      "method": "/studies/{id}/mergePost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Merge study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/studies/{id}/metadata",
      "method": "/studies/{id}/metadataGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "List metadata",
      "parameters": [
        {
          "name": "expand",
          "schema": "string",
          "required": false,
          "description": "If present, also retrieve the value of the individual metadata"
        },
        {
          "name": "numeric",
          "schema": "string",
          "required": false,
          "description": "If present, use the numeric identifier of the metadata instead of its symbolic name"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the names of the available metadata, or JSON associative array mapping metadata to their values (if `expand` argument is provided)"
        }
      ]
    },
    {
      "url": "/studies/{id}/metadata/{name}",
      "method": "/studies/{id}/metadata/{name}Delete",
      "httpMethod": "delete",
      "tag": "Studies",
      "description": "Delete metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, to check if its content has not changed and can be deleted. This header is mandatory if `CheckRevisions` option is `true`."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/metadata/{name}",
      "method": "/studies/{id}/metadata/{name}Get",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get metadata",
      "parameters": [
        {
          "name": "ifNoneMatch",
          "schema": "string",
          "required": false,
          "description": "Optional revision of the metadata, to check if its content has changed"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Value of the metadata"
        }
      ]
    },
    {
      "url": "/studies/{id}/metadata/{name}",
      "method": "/studies/{id}/metadata/{name}Put",
      "httpMethod": "put",
      "tag": "Studies",
      "description": "Set metadata",
      "parameters": [
        {
          "name": "ifMatch",
          "schema": "string",
          "required": false,
          "description": "Revision of the metadata, if this is not the first time this metadata is set."
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of the metadata, or its index (cf. `UserMetadata` configuration option)"
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/modify",
      "method": "/studies/{id}/modifyPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Modify study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemovePrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/studies/{id}/module",
      "method": "/studies/{id}/moduleGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get study module",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM study"
        }
      ]
    },
    {
      "url": "/studies/{id}/module-patient",
      "method": "/studies/{id}/modulePatientGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get patient module of study",
      "parameters": [
        {
          "name": "ignoreLength",
          "schema": "array",
          "required": false,
          "description": "Also include the DICOM tags that are provided in this list, even if their associated value is long"
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the DICOM study"
        }
      ]
    },
    {
      "url": "/studies/{id}/patient",
      "method": "/studies/{id}/patientGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get parent patient",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about the parent DICOM patient"
        }
      ]
    },
    {
      "url": "/studies/{id}/reconstruct",
      "method": "/studies/{id}/reconstructPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Reconstruct tags & optionally files of study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "ReconstructFiles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/studies/{id}/series",
      "method": "/studies/{id}/seriesGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get child series",
      "parameters": [
        {
          "name": "full",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in full format (tags indexed by their hexadecimal format, associated with their symbolic name and their value)"
        },
        {
          "name": "requestedTags",
          "schema": "string",
          "required": false,
          "description": "If present, list the DICOM Tags you want to list in the response.  This argument is a semi-column separated list of DICOM Tags identifiers; e.g: 'requestedTags=0010,0010;PatientBirthDate'.  The tags requested tags are returned in the 'RequestedTags' field in the response.  Note that, if you are requesting tags that are not listed in the Main Dicom Tags stored in DB, building the response might be slow since Orthanc will need to access the DICOM files.  If not specified, Orthanc will return "
        },
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing information about the child DICOM series"
        }
      ]
    },
    {
      "url": "/studies/{id}/shared-tags",
      "method": "/studies/{id}/sharedTagsGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get shared tags",
      "parameters": [
        {
          "name": "short",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in hexadecimal format"
        },
        {
          "name": "simplify",
          "schema": "boolean",
          "required": false,
          "description": "If present, report the DICOM tags in human-readable format (using the symbolic name of the tags)"
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON object containing the values of the DICOM tags"
        }
      ]
    },
    {
      "url": "/studies/{id}/split",
      "method": "/studies/{id}/splitPost",
      "httpMethod": "post",
      "tag": "Studies",
      "description": "Split study",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        },
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Instances",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Series",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/studies/{id}/statistics",
      "method": "/studies/{id}/statisticsGet",
      "httpMethod": "get",
      "tag": "Studies",
      "description": "Get study statistics",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Orthanc identifier of the study of interest"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/system",
      "method": "/systemGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get system information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tools",
      "method": "/toolsGet",
      "httpMethod": "get",
      "tag": "Other",
      "description": "List operations",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of the available operations"
        }
      ]
    },
    {
      "url": "/tools/accepted-transfer-syntaxes",
      "method": "/tools/acceptedTransferSyntaxesGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get accepted transfer syntaxes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the transfer syntax UIDs"
        }
      ]
    },
    {
      "url": "/tools/accepted-transfer-syntaxes",
      "method": "/tools/acceptedTransferSyntaxesPut",
      "httpMethod": "put",
      "tag": "System",
      "description": "Set accepted transfer syntaxes",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the now-accepted transfer syntax UIDs"
        }
      ]
    },
    {
      "url": "/tools/bulk-anonymize",
      "method": "/tools/bulkAnonymizePost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Anonymize a set of resources",
      "parameters": [
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "DicomVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepPrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of all the resources that have been created by this anonymization"
        }
      ]
    },
    {
      "url": "/tools/bulk-content",
      "method": "/tools/bulkContentPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Describe a set of resources",
      "parameters": [
        {
          "name": "Full",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Metadata",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Short",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/tools/bulk-delete",
      "method": "/tools/bulkDeletePost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Delete a set of resources",
      "parameters": [
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/tools/bulk-modify",
      "method": "/tools/bulkModifyPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Modify a set of resources",
      "parameters": [
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Keep",
          "schema": "array",
          "description": ""
        },
        {
          "name": "KeepSource",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Permissive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Remove",
          "schema": "array",
          "description": ""
        },
        {
          "name": "RemovePrivateTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Replace",
          "schema": "object",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The list of all the resources that have been altered by this modification"
        }
      ]
    },
    {
      "url": "/tools/create-archive",
      "method": "/tools/createArchivePost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Create ZIP archive",
      "parameters": [
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/tools/create-dicom",
      "method": "/tools/createDicomPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Create one DICOM instance",
      "parameters": [
        {
          "name": "Content",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Force",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "InterpretBinaryTags",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Parent",
          "schema": "string",
          "description": ""
        },
        {
          "name": "PrivateCreator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Tags",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tools/create-media",
      "method": "/tools/createMediaPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Extended",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/tools/create-media-extended",
      "method": "/tools/createMediaExtendedPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Create DICOMDIR media",
      "parameters": [
        {
          "name": "Asynchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Extended",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Priority",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Resources",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Synchronous",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Transcode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "In asynchronous mode, information about the job that has been submitted to generate the archive: https://book.orthanc-server.com/users/advanced-rest.html#jobs"
        }
      ]
    },
    {
      "url": "/tools/default-encoding",
      "method": "/tools/defaultEncodingGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get default encoding",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The name of the encoding"
        }
      ]
    },
    {
      "url": "/tools/default-encoding",
      "method": "/tools/defaultEncodingPut",
      "httpMethod": "put",
      "tag": "System",
      "description": "Set default encoding",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/dicom-conformance",
      "method": "/tools/dicomConformanceGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get DICOM conformance",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The DICOM conformance statement"
        }
      ]
    },
    {
      "url": "/tools/dicom-echo",
      "method": "/tools/dicomEchoPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Trigger C-ECHO SCU",
      "parameters": [
        {
          "name": "AET",
          "schema": "string",
          "description": ""
        },
        {
          "name": "CheckFind",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Host",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Manufacturer",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Port",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Timeout",
          "schema": "number",
          "description": ""
        },
        {
          "name": "UseDicomTls",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/tools/execute-script",
      "method": "/tools/executeScriptPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Execute Lua script",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Output of the Lua script"
        }
      ]
    },
    {
      "url": "/tools/find",
      "method": "/tools/findPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Look for local resources",
      "parameters": [
        {
          "name": "CaseSensitive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Expand",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Full",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Labels",
          "schema": "array",
          "description": ""
        },
        {
          "name": "LabelsConstraint",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "Limit",
          "schema": "number",
          "description": ""
        },
        {
          "name": "Query",
          "schema": "object",
          "description": ""
        },
        {
          "name": "RequestedTags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "Short",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "Since",
          "schema": "number",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing either the Orthanc identifiers, or detailed information about the reported resources (if `Expand` argument is `true`)"
        }
      ]
    },
    {
      "url": "/tools/generate-uid",
      "method": "/tools/generateUidGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Generate an identifier",
      "parameters": [
        {
          "name": "level",
          "schema": "string",
          "required": true,
          "description": "Type of DICOM resource among: `patient`, `study`, `series` or `instance`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The generated identifier"
        }
      ]
    },
    {
      "url": "/tools/invalidate-tags",
      "method": "/tools/invalidateTagsPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Invalidate DICOM-as-JSON summaries",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/labels",
      "method": "/tools/labelsGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get all the used labels",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing the labels"
        }
      ]
    },
    {
      "url": "/tools/log-level",
      "method": "/tools/logLevelGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get main log level",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level",
      "method": "/tools/logLevelPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set main log level",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-dicom",
      "method": "/tools/logLevelDicomGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `dicom`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-dicom",
      "method": "/tools/logLevelDicomPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `dicom`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-generic",
      "method": "/tools/logLevelGenericGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `generic`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-generic",
      "method": "/tools/logLevelGenericPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `generic`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-http",
      "method": "/tools/logLevelHttpGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `http`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-http",
      "method": "/tools/logLevelHttpPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `http`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-jobs",
      "method": "/tools/logLevelJobsGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `jobs`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-jobs",
      "method": "/tools/logLevelJobsPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `jobs`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-lua",
      "method": "/tools/logLevelLuaGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `lua`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-lua",
      "method": "/tools/logLevelLuaPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `lua`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-plugins",
      "method": "/tools/logLevelPluginsGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `plugins`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-plugins",
      "method": "/tools/logLevelPluginsPut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `plugins`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/log-level-sqlite",
      "method": "/tools/logLevelSqliteGet",
      "httpMethod": "get",
      "tag": "Logs",
      "description": "Get log level for `sqlite`",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Possible values: `default`, `verbose` or `trace`"
        }
      ]
    },
    {
      "url": "/tools/log-level-sqlite",
      "method": "/tools/logLevelSqlitePut",
      "httpMethod": "put",
      "tag": "Logs",
      "description": "Set log level for `sqlite`",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/lookup",
      "method": "/tools/lookupPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Look for DICOM identifiers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "JSON array containing a list of matching Orthanc resources, each item in the list corresponding to a JSON object with the fields `Type`, `ID` and `Path` identifying one DICOM resource that is stored by Orthanc"
        }
      ]
    },
    {
      "url": "/tools/metrics",
      "method": "/tools/metricsGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Are metrics collected?",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "`1` if metrics are collected, `0` if metrics are disabled"
        }
      ]
    },
    {
      "url": "/tools/metrics",
      "method": "/tools/metricsPut",
      "httpMethod": "put",
      "tag": "System",
      "description": "Enable collection of metrics",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/metrics-prometheus",
      "method": "/tools/metricsPrometheusGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get usage metrics",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/tools/now",
      "method": "/tools/nowGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get UTC time",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The UTC time"
        }
      ]
    },
    {
      "url": "/tools/now-local",
      "method": "/tools/nowLocalGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get local time",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The local time"
        }
      ]
    },
    {
      "url": "/tools/reconstruct",
      "method": "/tools/reconstructPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Reconstruct all the index",
      "parameters": [
        {
          "name": "ReconstructFiles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/tools/reset",
      "method": "/tools/resetPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Restart Orthanc",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/shutdown",
      "method": "/tools/shutdownPost",
      "httpMethod": "post",
      "tag": "System",
      "description": "Shutdown Orthanc",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/tools/unknown-sop-class-accepted",
      "method": "/tools/unknownSopClassAcceptedGet",
      "httpMethod": "get",
      "tag": "System",
      "description": "Is unknown SOP class accepted?",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "`1` if accepted, `0` if not accepted"
        }
      ]
    },
    {
      "url": "/tools/unknown-sop-class-accepted",
      "method": "/tools/unknownSopClassAcceptedPut",
      "httpMethod": "put",
      "tag": "System",
      "description": "Set unknown SOP class accepted",
      "parameters": [],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://demo.orthanc-server.com/",
  "apiDescription": "This is the full documentation of the [REST API](https://book.orthanc-server.com/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://book.orthanc-server.com/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).",
  "apiTitle": "Orthanc API",
  "endpoints": 236,
  "sdkMethods": 291,
  "schemas": 0,
  "parameters": 876,
  "difficultyScore": 510,
  "difficulty": "Hard"
}