{
  "providerName": "swaggerhub.com",
  "openApiRaw": "https://api.swaggerhub.com/apis/swagger-hub/registry-api/1.0.66",
  "securitySchemes": {
    "TokenSecured": {
      "description": "Specify your SwaggerHub API key found in https://app.swaggerhub.com/settings/apiKey.",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "homepage": "swaggerhub.com",
  "apiVersion": "1.0.66",
  "methods": [
    {
      "url": "/apis",
      "method": "searchApis",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Search APIs",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "Free text query to match"
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Matches against published state of the spec:\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria of result set:\n* NAME\n* UPDATED\n* CREATED\n* OWNER\n* BEST_MATCH - by relevance\n* TITLE - by `info.title`\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}",
      "method": "getOwnerApis",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get a list of APIs of the specified owner",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria of result set:\n* NAME\n* UPDATED\n* CREATED\n* OWNER\n* BEST_MATCH - by relevance\n* TITLE - by `info.title`\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}",
      "method": "deleteApi",
      "httpMethod": "delete",
      "tag": "APIs",
      "description": "Delete an API",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}",
      "method": "getApiVersions",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get a list of API versions",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}",
      "method": "saveDefinition",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Create or update an API",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner name (organization or user name, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "isPrivate",
          "schema": "boolean",
          "required": false,
          "description": "Whether to make the API private (`true`) or public (`false`)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": false,
          "description": "API version to create or update. If omitted, the version is extracted from the `info.version` field of the provided OpenAPI definition.\n\nEither the `version` parameter or the `info.version` value must be specified, otherwise the request will be rejected. If both are specified, the `version` parameter overrides the `info.version` value.\n\nIf this API version already exists, it will be updated with the new definition (unless that version has been published - in this case the update will be rejected)."
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "Force update"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/rename",
      "method": "renameApi",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Rename an API",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "newName",
          "schema": "string",
          "required": true,
          "description": "New name"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/settings/default",
      "method": "getApiDefaultVersion",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the default version of an API",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/settings/default",
      "method": "setApiDefaultVersion",
      "httpMethod": "put",
      "tag": "APIs",
      "description": "Set the default API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}",
      "method": "deleteApiVersion",
      "httpMethod": "delete",
      "tag": "APIs",
      "description": "Delete an API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}",
      "method": "getDefinition",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the OpenAPI definition of the specified API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "resolved",
          "schema": "boolean",
          "description": "Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file."
        },
        {
          "name": "flatten",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/clone",
      "method": "cloneApi",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Create a new API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The version to clone (case-sensitive)"
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments",
      "method": "getApiCommentsV2",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get comments for the specified API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments",
      "method": "addApiCommentV2",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Add a new comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "replies",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/batch",
      "method": "updateApiCommentsV2",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Bulk update comments",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "addComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "addReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "deleteComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "deleteReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateComment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateStatus",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}",
      "method": "deleteApiCommentV2",
      "httpMethod": "delete",
      "tag": "APIs",
      "description": "Delete a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}",
      "method": "updateApiCommentV2",
      "httpMethod": "patch",
      "tag": "APIs",
      "description": "Update a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}/replies",
      "method": "addApiCommentReplyV2",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Reply to a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}",
      "method": "deleteApiCommentReplyV2",
      "httpMethod": "delete",
      "tag": "APIs",
      "description": "Delete a comment reply",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "reply",
          "schema": "string",
          "required": true,
          "description": "Reply identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}/replies/{reply}",
      "method": "updateApiCommentReplyV2",
      "httpMethod": "patch",
      "tag": "APIs",
      "description": "Update a comment reply",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "reply",
          "schema": "string",
          "required": true,
          "description": "Reply identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/comments/{comment}/status/{status}",
      "method": "setApiCommentStatusV2",
      "httpMethod": "put",
      "tag": "APIs",
      "description": "Resolve or reopen a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "status",
          "schema": "string",
          "required": true,
          "description": "Comment status"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/fork",
      "method": "forkApi",
      "httpMethod": "post",
      "tag": "APIs",
      "description": "Fork an API",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations",
      "method": "getIntegrations",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get all integrations configured for the specified API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations",
      "method": "createIntegration",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Create an integration for the specified API and version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": "Common configuration details for all integrations"
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations/{integrationId}",
      "method": "deleteIntegration",
      "httpMethod": "delete",
      "tag": "Integrations",
      "description": "Delete an integration",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations/{integrationId}",
      "method": "getIntegrationById",
      "httpMethod": "get",
      "tag": "Integrations",
      "description": "Get integration settings",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Common configuration details for all integrations"
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations/{integrationId}",
      "method": "patchIntegration",
      "httpMethod": "patch",
      "tag": "Integrations",
      "description": "Partially update integration settings",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations/{integrationId}",
      "method": "updateIntegration",
      "httpMethod": "put",
      "tag": "Integrations",
      "description": "Update integration settings",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/integrations/{integrationId}/execute",
      "method": "executeIntegration",
      "httpMethod": "post",
      "tag": "Integrations",
      "description": "Run an integration",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "integrationId",
          "schema": "string",
          "required": true,
          "description": "Integration ID (case-sensitive). To get the available integration IDs, use `GET /apis/{owner}/{api}/{version}/integrations`"
        },
        {
          "name": "commitMessage",
          "schema": "string",
          "required": false,
          "description": "Commit message for source control integrations"
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/settings/lifecycle",
      "method": "getLifecycleSettings",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the published status for the specified API and version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/settings/lifecycle",
      "method": "setLifecycleSettings",
      "httpMethod": "put",
      "tag": "APIs",
      "description": "Publish or unpublish an API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "To publish an API that references _unpublished_ domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424."
        },
        {
          "name": "published",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/settings/private",
      "method": "getPrivateSettings",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the visibility (public or private) of API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/settings/private",
      "method": "setPrivateSettings",
      "httpMethod": "put",
      "tag": "APIs",
      "description": "Set the visibility (public or private) of an API version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/apis/{owner}/{api}/{version}/standardization",
      "method": "getStandardizationErrors",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Retrieve the standardization errors for a given API definition",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/swagger.json",
      "method": "getJsonDefinition",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the OpenAPI definition for the specified API version in JSON format",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "resolved",
          "schema": "boolean",
          "description": "Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file."
        },
        {
          "name": "flatten",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/swagger.yaml",
      "method": "getYamlDefinition",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Get the OpenAPI definition for the specified API version in YAML format",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API owner (organization or user, case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "resolved",
          "schema": "boolean",
          "description": "Set to true to get the resolved version of the API definition. The content of all external $refs will be included in the resulting file."
        },
        {
          "name": "flatten",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/apis/{owner}/{api}/{version}/validation",
      "method": "getValidation",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Deprecated Get API Standardization errors and warnings",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Organization name (case-sensitive)"
        },
        {
          "name": "api",
          "schema": "string",
          "required": true,
          "description": "API name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains",
      "method": "searchDomains",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Search domains",
      "parameters": [
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "Free text query to match"
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Matches against published state of the spec:\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria of result set:\n* NAME\n* UPDATED\n* CREATED\n* OWNER\n* BEST_MATCH - by relevance\n* TITLE - by `info.title`\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}",
      "method": "getOwnerDomains",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get a list of domains of the specified owner",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria of result set:\n* NAME\n* UPDATED\n* CREATED\n* OWNER\n* BEST_MATCH - by relevance\n* TITLE - by `info.title`\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}",
      "method": "deleteDomain",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Delete a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "If this domain is referenced from other APIs and domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424."
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}",
      "method": "getDomainVersions",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get a list of domain versions",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}",
      "method": "saveDomainDefinition",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Create or update a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "isPrivate",
          "schema": "boolean",
          "required": false,
          "description": "Specifies whether the domain has to be private"
        },
        {
          "name": "version",
          "schema": "string",
          "description": "Domain version. If omitted, will be taken from the `info.version` field in the definition."
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "Force update"
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/rename",
      "method": "renameDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Rename a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "newName",
          "schema": "string",
          "required": true,
          "description": "New name"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "If this domain is referenced from other APIs and domains, this parameter must be true. Otherwise, the request will be rejected with status code 424."
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/settings/default",
      "method": "getDomainDefaultVersion",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the default version of a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/settings/default",
      "method": "setDomainDefaultVersion",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Set the default version for a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}",
      "method": "deleteDomainVersion",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Delete a domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "If this domain version is referenced from other APIs and domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424."
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}",
      "method": "getDomainDefinition",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the OpenAPI definition of the specified domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/clone",
      "method": "cloneDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Create a new domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "The version to clone (case-sensitive)"
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments",
      "method": "getDomainCommentsV2",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get comments for the specified domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments",
      "method": "addDomainCommentV2",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Add a new comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "position",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "replies",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/batch",
      "method": "updateDomainCommentsV2",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Bulk update comments",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "addComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "addReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "deleteComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "deleteReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateComment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateStatus",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}",
      "method": "deleteDomainCommentV2",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Delete a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}",
      "method": "updateDomainCommentV2",
      "httpMethod": "patch",
      "tag": "Domains",
      "description": "Update a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}/replies",
      "method": "addDomainCommentReplyV2",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Reply to a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}",
      "method": "deleteDomainCommentReplyV2",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Delete a comment reply",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "reply",
          "schema": "string",
          "required": true,
          "description": "Reply identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}/replies/{reply}",
      "method": "updateDomainCommentReplyV2",
      "httpMethod": "patch",
      "tag": "Domains",
      "description": "Update a comment reply",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "reply",
          "schema": "string",
          "required": true,
          "description": "Reply identifier"
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/comments/{comment}/status/{status}",
      "method": "setDomainCommentStatusV2",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Resolve or reopen a comment",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "comment",
          "schema": "string",
          "required": true,
          "description": "Comment identifier"
        },
        {
          "name": "status",
          "schema": "string",
          "required": true,
          "description": "Comment status"
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/domain.json",
      "method": "getDomainJsonDefinition",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the OpenAPI definition for the specified domain version in JSON format",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/domain.yaml",
      "method": "getDomainYamlDefinition",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the OpenAPI definition for the specified domain version in YAML format",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/fork",
      "method": "forkDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Fork a domain",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/settings/lifecycle",
      "method": "getDomainLifecycleSettings",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the published status for the specified domain and version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/settings/lifecycle",
      "method": "setDomainLifecycleSettings",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Publish or unpublish a domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "To publish a domain that references other _unpublished_ domains, this parameter must be `true`. Otherwise, the request will be rejected with status code 424."
        },
        {
          "name": "published",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/settings/private",
      "method": "getDomainPrivateSettings",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Get the visibility (public or private) of a domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{owner}/{domain}/{version}/settings/private",
      "method": "setDomainPrivateSettings",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Set the visibility (public or private) of a domain version",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Domain owner (organization or user, case-sensitive)"
        },
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": "Domain name (case-sensitive)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "To change the visibility from _public_ to _private_ in case this domain is referenced from other _public_ definitions, this parameter must be `true`. Otherwise, the request will be rejected with status code 424."
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "424",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects",
      "method": "getUserProjects",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get all projects that a user has access to",
      "parameters": [
        {
          "name": "nameOnly",
          "schema": "boolean",
          "required": false,
          "description": "Return the project information excluding APIs and domains"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria or result set:\n* NAME\n* OWNER\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}",
      "method": "getOrgProjectsV2",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get all projects of an organization",
      "parameters": [
        {
          "name": "nameOnly",
          "schema": "boolean",
          "required": false,
          "description": "Return the project information excluding APIs and domains"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}",
      "method": "createProject",
      "httpMethod": "post",
      "tag": "Projects",
      "description": "Create a project in an organization",
      "parameters": [
        {
          "name": "apis",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "domains",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}/{projectId}",
      "method": "deleteProjectV2",
      "httpMethod": "delete",
      "tag": "Projects",
      "description": "Delete a project",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/projects/{owner}/{projectId}",
      "method": "getProjectV2",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}/{projectId}",
      "method": "saveProjectV2",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update a project",
      "parameters": [
        {
          "name": "apis",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "domains",
          "schema": "array",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}/{projectId}/members",
      "method": "getProjectMembersV2",
      "httpMethod": "get",
      "tag": "Projects",
      "description": "Get project members",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/projects/{owner}/{projectId}/members",
      "method": "updateProjectMembersV2",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Update a project's members list",
      "parameters": [
        {
          "name": "members",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/projects/{owner}/{projectId}/{specType}/{name}",
      "method": "addSpecToProjectV2",
      "httpMethod": "put",
      "tag": "Projects",
      "description": "Add an API or domain to a project",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "Organization name (case-sensitive)"
        },
        {
          "name": "projectId",
          "schema": "string",
          "required": true,
          "description": "Project name (case-sensitive)"
        },
        {
          "name": "specType",
          "schema": "string",
          "required": true,
          "description": "Definition type - `apis` or `domains`."
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The name of an API or domain that you want to add to the project. Case-sensitive."
        }
      ],
      "responses": []
    },
    {
      "url": "/specs",
      "method": "searchApisAndDomains",
      "httpMethod": "get",
      "tag": "APIs",
      "description": "Retrieve a list of currently defined APIs, domains, and templates in APIs.json format",
      "parameters": [
        {
          "name": "specType",
          "schema": "string",
          "required": false,
          "description": "Type of definitions to search:\n* API - APIs only\n* DOMAIN - domains only\n* TEMPLATE - templates only\n* ANY - APIs, domains, and templates\n"
        },
        {
          "name": "visibility",
          "schema": "string",
          "required": false,
          "description": "The visibility of a definition in SwaggerHub:\n* PUBLIC - can be viewed by anyone\n* PRIVATE - can only be viewed by you or your organization and those that you are collaborating with or have shared it with\n* ANY - either PUBLIC or PRIVATE\n"
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Matches against published state of the spec:\n* UNPUBLISHED - spec is a draft, a work in progress\n* PUBLISHED - spec is a stable version ready for consuming from client applications\n* ANY - either PUBLISHED or UNPUBLISHED\n"
        },
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": "API or domain owner. Can be username or organization name. Case-sensitive."
        },
        {
          "name": "query",
          "schema": "string",
          "required": false,
          "description": "Free text query to match"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Page to return"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of results per page (1 .. 100)"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort criteria of result set:\n* NAME\n* UPDATED\n* CREATED\n* OWNER\n* BEST_MATCH - by relevance\n* TITLE - by `info.title`\n"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Sort order"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates",
      "method": "getTemplates",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Retrieve a list of templates for an owner",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": false,
          "description": "Owner name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Templates. Template names are case-sensitive.\n"
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}",
      "method": "deleteTemplate",
      "httpMethod": "delete",
      "tag": "Templates",
      "description": "Delete a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}",
      "method": "getTemplateVersions",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Retrieve an APIs.json listing for all template versions for an owner and template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}",
      "method": "saveTemplateDefinition",
      "httpMethod": "post",
      "tag": "Templates",
      "description": "Create or update a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "isPrivate",
          "schema": "boolean",
          "required": false,
          "description": "Defines whether the API or template has to be private"
        },
        {
          "name": "version",
          "schema": "string",
          "description": "Template version to create or update. If omitted, the version will be taken from the `info.version` field in the definition."
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "Force update"
        },
        {
          "name": "projectName",
          "schema": "string",
          "required": false,
          "description": "The project to add the API, domain, or template to"
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/rename",
      "method": "renameTemplate",
      "httpMethod": "post",
      "tag": "Templates",
      "description": "Rename a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "newName",
          "schema": "string",
          "required": true,
          "description": "New name"
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}",
      "method": "deleteTemplateVersion",
      "httpMethod": "delete",
      "tag": "Templates",
      "description": "Delete a particular version of a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}",
      "method": "getTemplateDefinition",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Retrieve a template definition",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "flatten",
          "schema": "boolean",
          "required": false,
          "description": "If set to `true`, it creates models from inline schemas in OpenAPI definition. AsyncAPI definitions cannot be flattened."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/comments",
      "method": "getTemplateComments",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Return the list of comments for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/comments/batch",
      "method": "updateTemplateComments",
      "httpMethod": "post",
      "tag": "Templates",
      "description": "Update the list of comments for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "addComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "addReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "deleteComment",
          "schema": "array",
          "description": ""
        },
        {
          "name": "deleteReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateComment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateReply",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updateStatus",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/fork",
      "method": "forkTemplate",
      "httpMethod": "post",
      "tag": "Templates",
      "description": "Create a fork for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/settings/lifecycle",
      "method": "getTemplateLifecycleSettings",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Retrieve lifecycle settings for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/settings/lifecycle",
      "method": "setTemplateLifecycleSettings",
      "httpMethod": "put",
      "tag": "Templates",
      "description": "Update lifecycle settings for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "Force update"
        },
        {
          "name": "published",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/settings/private",
      "method": "getTemplatePrivateSettings",
      "httpMethod": "get",
      "tag": "Templates",
      "description": "Retrieve visibility settings for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/templates/{owner}/{templateId}/{version}/settings/private",
      "method": "setTemplatePrivateSettings",
      "httpMethod": "put",
      "tag": "Templates",
      "description": "Update visibility settings for a template",
      "parameters": [
        {
          "name": "owner",
          "schema": "string",
          "required": true,
          "description": "API, domain, or template owner identifier (case-sensitive)"
        },
        {
          "name": "templateId",
          "schema": "string",
          "required": true,
          "description": "Template identifier"
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": "Version identifier"
        },
        {
          "name": "private",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.swaggerhub.com",
  "apiDescription": "# Overview\nUse SwaggerHub Registry API to access, manage, and update the following resources in SwaggerHub, bypassing the web interface:\n  * APIs\n  * Domains\n  * Integrations\n  * Projects\n  * Templates\n\n\nSwaggerHub also provides the [User Management API](https://app.swaggerhub.com/apis-docs/swagger-hub/user-management-api/) to get information about organizations and manage organization members.\n\n# Base URL\nUse the following base URL for SwaggerHub SaaS:\n    \n    http(s)://api.swaggerhub.com\n\n**Note:** This documentation is for SwaggerHub SaaS. On-Premise customers should use the bundled API definition, which can be found at the URLs provided below.\n\nVersion 1.29.0 or later:\n\n    http(s)://SERVER/v1/openapi.yaml - YAML version\n    http(s)://SERVER/v1/openapi.json - JSON version\n\nEarlier versions:\n\n    http(s)://SERVER/v1/swagger.yaml - YAML version\n    http(s)://SERVER/v1/swagger.json - JSON version\n\n# Authentication\nOperations that update data or access private data require authentication using an API key. You can find your personal API key on the [API Keys](https://app.swaggerhub.com/settings/apiKey) page in your account settings. Send this key in the `Authorization` header when making requests to the Registry API:\n\n    Authorization: YOUR_API_KEY\n\nTo test API calls from this documentation page, click the **Authorize** button below and paste your API key there.\n\n**Important:** Keep the API key secure and do not store it directly in your code.\n# Tools\nIn addition to calling the Registry API directly, you can use the following tools to interact with the API from the command line or CI/CD pipeline:\n\n * [SwaggerHub CLI](https://www.npmjs.com/package/swaggerhub-cli) \n * [Maven plugin](https://github.com/swagger-api/swaggerhub-maven-plugin)\n * [Gradle plugin](https://github.com/swagger-api/swaggerhub-gradle-plugin)\n",
  "apiTitle": "SwaggerHub Registry API",
  "endpoints": 56,
  "sdkMethods": 91,
  "schemas": 55,
  "parameters": 360,
  "contactUrl": "https://support.smartbear.com/swaggerhub/message/",
  "difficultyScore": 208.5,
  "difficulty": "Hard"
}