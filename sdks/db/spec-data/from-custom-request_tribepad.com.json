{
  "securitySchemes": {
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer"
    }
  },
  "apiBaseUrl": "https://{example.com}",
  "apiVersion": "1.0.0",
  "apiDescription": "# Tribepad developer docs\n\nBefore you get started you'll need to contact our Support Team and request access to our APIs. They'll need this info from you:\n\n- Application name\n- Redirect URIs if not using the client credentials grant type\n- IP addresses you will be using so they can be whitelisted\n    \n\n## Our Philosophy\n\nOur APIs follow a restful approach and we aim to make working with them as easy as possible. All requests and responses to or from our API will be in `JSON`.\n\n## We're here to help!\n\nAny questions about our APIs just pop an email over to [integrations@tribepad.com](mailto:integrations@tribepad.com) and we'll be happy to help you out.\n\n# Authentication\n\nTribepad APIs are secured using the oauth2 protocol. At the moment, we support the following grant types:\n\n- Authorization code\n- Authorization code with PKCE\n- Client credentials\n- Refresh token\n    \n\n## Which Grant Type to Choose\n\nA grant type is a method of acquiring an access token. Deciding which grant type to implement depends on the type of integration you'll be building, and the experience you want for your users.\n\n<img src=\"https://files.readme.io/0d0e473-Authorization_Flow.drawio_1.png\" width=\"521\" height=\"493\">\n\nGrant Type Decision Tree\n\n> &lt;h3 &gt;ðŸš§&lt;/h3&gt;&lt;p &gt;Heads up. Some API endpoints will only work using the Authorization access token as they require access to the under laying user. Don&amp;#x27;t worry though, these endpoints will be clearly labelled.&lt;/p&gt; \n  \n\n## Authorization Code\n\nIf youâ€™ve ever signed into a web app using your Facebook or Google account, then this grant type is sure to be familiar to you.\n\n## Step 1\n\nThe client will redirect the user to our applicationÂ `(/v2/api/oauth/authorize)`Â with the following parameters in the query string.\n\n| Field | Value |\n| --- | --- |\n| client_id | your provided client ID |\n| redirect_uri | the client redirect URI. This parameter is optional, but if not sent the user will be redirected to a pre-registered redirect URI |\n| response_type | code |\n| scope | a space delimited list of requested scopes |\n| state | aÂ [CSRF](https://en.wikipedia.org/wiki/Cross-site_request_forgery)Â token. This parameter is optional but highly recommended. You should store the value of the CSRF token in the userâ€™s session to be validated when they return |\n\nIf the user approves the authorization request, they'll be redirected back to the specified redirect uri with the following parameters in the query string.\n\n| Field | Value |\n| --- | --- |\n| code | the authorization code |\n| state | the state parameter sent in the original request. You should compare this value with the value stored in the userâ€™s session to ensure the authorization code obtained is in response to requests made by this client rather than another client application |\n\n#### Example Call\n\nRequestResponse\n\n```\n$_SESSION['state'] = $state = bin2hex(random_bytes(40)); //mysecretstate for example\n \n$query = http_build_query([\n  'client_id' => 'client-id',\n  'redirect_uri' => 'https://third-party-app.com/callback',\n  'response_type' => 'code',\n  'scope' => '',\n  'state' => $state,\n]);\n \nredirect('https://my-ats.com/v2/api/oauth/authorize?' . $query);\n\n```\n\n## Step 2\n\nIf the state parameter matches, then the consumer should issue a POST request to our applicationÂ `(/v2/api/oauth/token)`Â to request an access token. The request should include the following fields.\n\n| Field | Value |\n| --- | --- |\n| grant_type | authorization_code |\n| client_id | your provided client ID |\n| client_secret | your provided client secret |\n| redirect_uri | the same redirect URI the user was redirect back to specified in step 1 |\n| code | the authorization code from the query string |\n\n#### Example Call\n\nRequestResponse\n\n```\n$state = $_SESSION['state'] ?? '';\n\nif (strlen($state) > 0 && $state !== $_GET['state']) {\n  throw new InvalidArgumentException('Invalid state provided.');\n}\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'https://my-ats.com/v2/api/oauth/token', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n  'form_params' => [\n    'grant_type' => 'authorization_code',\n    'client_id' => 'client-id',\n    'client_secret' => 'client-secret',\n    'redirect_uri' => 'https://third-party-app.com/callback',\n    'code' => $_GET['code'],\n  ],\n]);\n\n$result = json_decode($response->getBody(), true);\n \nreturn $result['access_token'];\n\n```",
  "apiTitle": "V2",
  "endpoints": 48,
  "sdkMethods": 53,
  "schemas": 0,
  "parameters": 146,
  "originalCustomRequest": {
    "lambda": true
  },
  "customRequestSpecFilename": "tribepad.com.yaml",
  "difficultyScore": 89.5,
  "difficulty": "Easy"
}