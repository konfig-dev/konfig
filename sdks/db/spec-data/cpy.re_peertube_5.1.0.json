{
  "providerName": "cpy.re",
  "openApiRaw": "https://raw.githubusercontent.com/Chocobozzz/PeerTube/develop/support/doc/api/openapi.yaml",
  "securitySchemes": {
    "OAuth2": {
      "description": "Authenticating via OAuth requires the following steps:\n- Have an activated account\n- [Generate] an access token for that account at `/api/v1/users/token`.\n- Make requests with the *Authorization: Bearer <token\\>* header\n- Profit, depending on the role assigned to the account\n\nNote that the __access token is valid for 1 day__ and is given\nalong with a __refresh token valid for 2 weeks__.\n\n[Generate]: https://docs.joinpeertube.org/api/rest-getting-started\n",
      "flows": {
        "password": {
          "scopes": {
            "admin": "Admin scope",
            "moderator": "Moderator scope",
            "user": "User scope"
          },
          "tokenUrl": "/api/v1/users/token"
        }
      },
      "type": "oauth2"
    }
  },
  "homepage": "cpy.re",
  "serviceName": "peertube",
  "apiVersion": "5.1.0",
  "methods": [
    {
      "url": "/api/v1/abuses",
      "method": "getAbuses",
      "httpMethod": "get",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "List abuses",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "description": "only list the report with this id"
        },
        {
          "name": "predefinedReason",
          "schema": "array",
          "description": "predefined reason the listed reports should contain"
        },
        {
          "name": "search",
          "schema": "string",
          "description": "plain search that will match with video titles, reporter names and more"
        },
        {
          "name": "state",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "searchReporter",
          "schema": "string",
          "description": "only list reports of a specific reporter"
        },
        {
          "name": "searchReportee",
          "schema": "string",
          "description": "only list reports of a specific reportee"
        },
        {
          "name": "searchVideo",
          "schema": "string",
          "description": "only list reports of a specific video"
        },
        {
          "name": "searchVideoChannel",
          "schema": "string",
          "description": "only list reports of a specific video channel"
        },
        {
          "name": "videoIs",
          "schema": "string",
          "description": "only list deleted or blocklisted videos"
        },
        {
          "name": "filter",
          "schema": "string",
          "description": "only list account, comment or video reports"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort abuses by criteria"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/abuses",
      "method": "/api/v1/abusesPost",
      "httpMethod": "post",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "Report an abuse",
      "parameters": [
        {
          "name": "account",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "predefinedReasons",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "reason",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "video",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/abuses/{abuseId}",
      "method": "/api/v1/abuses/{abuseId}Delete",
      "httpMethod": "delete",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "Delete an abuse",
      "parameters": [
        {
          "name": "abuseId",
          "schema": "integer",
          "required": true,
          "description": "Abuse id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/abuses/{abuseId}",
      "method": "/api/v1/abuses/{abuseId}Put",
      "httpMethod": "put",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "Update an abuse",
      "parameters": [
        {
          "name": "abuseId",
          "schema": "integer",
          "required": true,
          "description": "Abuse id"
        },
        {
          "name": "moderationComment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/abuses/{abuseId}/messages",
      "method": "/api/v1/abuses/{abuseId}/messagesGet",
      "httpMethod": "get",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "List messages of an abuse",
      "parameters": [
        {
          "name": "abuseId",
          "schema": "integer",
          "required": true,
          "description": "Abuse id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/abuses/{abuseId}/messages",
      "method": "/api/v1/abuses/{abuseId}/messagesPost",
      "httpMethod": "post",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "Add message to an abuse",
      "parameters": [
        {
          "name": "abuseId",
          "schema": "integer",
          "required": true,
          "description": "Abuse id"
        },
        {
          "name": "message",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/abuses/{abuseId}/messages/{abuseMessageId}",
      "method": "/api/v1/abuses/{abuseId}/messages/{abuseMessageId}Delete",
      "httpMethod": "delete",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "Delete an abuse message",
      "parameters": [
        {
          "name": "abuseId",
          "schema": "integer",
          "required": true,
          "description": "Abuse id"
        },
        {
          "name": "abuseMessageId",
          "schema": "integer",
          "required": true,
          "description": "Abuse message id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/accounts",
      "method": "getAccounts",
      "httpMethod": "get",
      "tag": "Accounts",
      "typeScriptTag": "accounts",
      "description": "List accounts",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}",
      "method": "getAccount",
      "httpMethod": "get",
      "tag": "Accounts",
      "typeScriptTag": "accounts",
      "description": "Get an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/followers",
      "method": "getAccountFollowers",
      "httpMethod": "get",
      "tag": "Accounts",
      "typeScriptTag": "accounts",
      "description": "List followers of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort followers by criteria"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Plain text search, applied to various parts of the model depending on endpoint"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/ratings",
      "method": "/api/v1/accounts/{name}/ratingsGet",
      "httpMethod": "get",
      "tag": "Accounts",
      "typeScriptTag": "accounts",
      "description": "List ratings of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "rating",
          "schema": "string",
          "required": false,
          "description": "Optionally filter which ratings to retrieve"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/video-channel-syncs",
      "method": "/api/v1/accounts/{name}/videoChannelSyncsGet",
      "httpMethod": "get",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "List the synchronizations of video channels of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/video-channels",
      "method": "/api/v1/accounts/{name}/videoChannelsGet",
      "httpMethod": "get",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "List video channels of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "withStats",
          "schema": "boolean",
          "description": "include daily view statistics for the last 30 days and total views (only if authentified as the account user)"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/video-playlists",
      "method": "/api/v1/accounts/{name}/videoPlaylistsGet",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "List playlists of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Plain text search, applied to various parts of the model depending on endpoint"
        },
        {
          "name": "playlistType",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/accounts/{name}/videos",
      "method": "getAccountVideos",
      "httpMethod": "get",
      "tag": "Accounts",
      "typeScriptTag": "accounts",
      "description": "List videos of an account",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The username or handle of the account"
        },
        {
          "name": "categoryOneOf",
          "schema": "undefined",
          "required": false,
          "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
        },
        {
          "name": "isLive",
          "schema": "boolean",
          "required": false,
          "description": "whether or not the video is a live"
        },
        {
          "name": "tagsOneOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video"
        },
        {
          "name": "tagsAllOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video, where all should be present in the video"
        },
        {
          "name": "licenceOneOf",
          "schema": "undefined",
          "required": false,
          "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
        },
        {
          "name": "languageOneOf",
          "schema": "undefined",
          "required": false,
          "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        },
        {
          "name": "skipCount",
          "schema": "string",
          "required": false,
          "description": "if you don't need the `total` in the response"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "excludeAlreadyWatched",
          "schema": "boolean",
          "description": "Whether or not to exclude videos that are in the user's video history"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/blocklist/status",
      "method": "/api/v1/blocklist/statusGet",
      "httpMethod": "get",
      "tag": "Account Blocks",
      "typeScriptTag": "accountBlocks",
      "description": "Get block status of accounts/hosts",
      "parameters": [
        {
          "name": "accounts",
          "schema": "array",
          "description": "Check if these accounts are blocked"
        },
        {
          "name": "hosts",
          "schema": "array",
          "description": "Check if these hosts are blocked"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/config",
      "method": "getConfig",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Get instance public configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/config/about",
      "method": "getAbout",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Get instance \"About\" information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/config/custom",
      "method": "delCustomConfig",
      "httpMethod": "delete",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Delete instance runtime configuration",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/config/custom",
      "method": "getCustomConfig",
      "httpMethod": "get",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Get instance runtime configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/config/custom",
      "method": "putCustomConfig",
      "httpMethod": "put",
      "tag": "Config",
      "typeScriptTag": "config",
      "description": "Set instance runtime configuration",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/custom-pages/homepage/instance",
      "method": "/api/v1/customPages/homepage/instanceGet",
      "httpMethod": "get",
      "tag": "Homepage",
      "typeScriptTag": "homepage",
      "description": "Get instance custom homepage",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/custom-pages/homepage/instance",
      "method": "/api/v1/customPages/homepage/instancePut",
      "httpMethod": "put",
      "tag": "Homepage",
      "typeScriptTag": "homepage",
      "description": "Set instance custom homepage",
      "parameters": [
        {
          "name": "content",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/jobs/pause",
      "method": "/api/v1/jobs/pausePost",
      "httpMethod": "post",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "Pause job queue",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/jobs/resume",
      "method": "/api/v1/jobs/resumePost",
      "httpMethod": "post",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "Resume job queue",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/jobs/{state}",
      "method": "getJobs",
      "httpMethod": "get",
      "tag": "Job",
      "typeScriptTag": "job",
      "description": "List instance jobs",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": true,
          "description": "The state of the job ('' for for no filter)"
        },
        {
          "name": "jobType",
          "schema": "string",
          "required": false,
          "description": "job type"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/metrics/playback",
      "method": "/api/v1/metrics/playbackPost",
      "httpMethod": "post",
      "tag": "Stats",
      "typeScriptTag": "stats",
      "description": "Create playback metrics",
      "parameters": [
        {
          "name": "downloadedBytesHTTP",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "downloadedBytesP2P",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "errors",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "fps",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "playerMode",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "resolution",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "resolutionChanges",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "uploadedBytesP2P",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "videoId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/oauth-clients/local",
      "method": "getOAuthClient",
      "httpMethod": "get",
      "tag": "Session",
      "typeScriptTag": "session",
      "description": "Login prerequisite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins",
      "method": "getPlugins",
      "httpMethod": "get",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "List plugins",
      "parameters": [
        {
          "name": "pluginType",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "uninstalled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins/available",
      "method": "getAvailablePlugins",
      "httpMethod": "get",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "List available plugins",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pluginType",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "currentPeerTubeEngine",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins/install",
      "method": "addPlugin",
      "httpMethod": "post",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Install a plugin",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/plugins/uninstall",
      "method": "uninstallPlugin",
      "httpMethod": "post",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Uninstall a plugin",
      "parameters": [
        {
          "name": "npmName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/plugins/update",
      "method": "updatePlugin",
      "httpMethod": "post",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Update a plugin",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/plugins/{npmName}",
      "method": "getPlugin",
      "httpMethod": "get",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Get a plugin",
      "parameters": [
        {
          "name": "npmName",
          "schema": "string",
          "required": true,
          "description": "name of the plugin/theme on npmjs.com or in its package.json"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins/{npmName}/public-settings",
      "method": "/api/v1/plugins/{npmName}/publicSettingsGet",
      "httpMethod": "get",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Get a plugin's public settings",
      "parameters": [
        {
          "name": "npmName",
          "schema": "string",
          "required": true,
          "description": "name of the plugin/theme on npmjs.com or in its package.json"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins/{npmName}/registered-settings",
      "method": "/api/v1/plugins/{npmName}/registeredSettingsGet",
      "httpMethod": "get",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Get a plugin's registered settings",
      "parameters": [
        {
          "name": "npmName",
          "schema": "string",
          "required": true,
          "description": "name of the plugin/theme on npmjs.com or in its package.json"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/plugins/{npmName}/settings",
      "method": "/api/v1/plugins/{npmName}/settingsPut",
      "httpMethod": "put",
      "tag": "Plugins",
      "typeScriptTag": "plugins",
      "description": "Set a plugin's settings",
      "parameters": [
        {
          "name": "npmName",
          "schema": "string",
          "required": true,
          "description": "name of the plugin/theme on npmjs.com or in its package.json"
        },
        {
          "name": "settings",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/search/video-channels",
      "method": "searchChannels",
      "httpMethod": "get",
      "tag": "Search",
      "typeScriptTag": "search",
      "description": "Search channels",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "required": true,
          "description": "String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete channel information and interact with it.\n"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "searchTarget",
          "schema": "string",
          "required": false,
          "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/search/video-playlists",
      "method": "searchPlaylists",
      "httpMethod": "get",
      "tag": "Search",
      "typeScriptTag": "search",
      "description": "Search playlists",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "required": true,
          "description": "String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete playlist information and interact with it.\n"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "searchTarget",
          "schema": "string",
          "required": false,
          "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/search/videos",
      "method": "searchVideos",
      "httpMethod": "get",
      "tag": "Search",
      "typeScriptTag": "search",
      "description": "Search videos",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "required": true,
          "description": "String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete video information and interact with it.\n"
        },
        {
          "name": "categoryOneOf",
          "schema": "undefined",
          "required": false,
          "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
        },
        {
          "name": "isLive",
          "schema": "boolean",
          "required": false,
          "description": "whether or not the video is a live"
        },
        {
          "name": "tagsOneOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video"
        },
        {
          "name": "tagsAllOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video, where all should be present in the video"
        },
        {
          "name": "licenceOneOf",
          "schema": "undefined",
          "required": false,
          "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
        },
        {
          "name": "languageOneOf",
          "schema": "undefined",
          "required": false,
          "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "uuids",
          "schema": "undefined",
          "required": false,
          "description": "Find videos with specific UUIDs"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        },
        {
          "name": "skipCount",
          "schema": "string",
          "required": false,
          "description": "if you don't need the `total` in the response"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "searchTarget",
          "schema": "string",
          "required": false,
          "description": "If the administrator enabled search index support, you can override the default search target.\n\n**Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n  * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n  then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n  After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n  * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n  the data from the origin instance API\n"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort videos by criteria (prefixing with `-` means `DESC` order):\n"
        },
        {
          "name": "excludeAlreadyWatched",
          "schema": "boolean",
          "description": "Whether or not to exclude videos that are in the user's video history"
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Get videos that are published after this date"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Get videos that are published before this date"
        },
        {
          "name": "originallyPublishedStartDate",
          "schema": "string",
          "description": "Get videos that are originally published after this date"
        },
        {
          "name": "originallyPublishedEndDate",
          "schema": "string",
          "description": "Get videos that are originally published before this date"
        },
        {
          "name": "durationMin",
          "schema": "integer",
          "description": "Get videos that have this minimum duration"
        },
        {
          "name": "durationMax",
          "schema": "integer",
          "description": "Get videos that have this maximum duration"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/audit-logs",
      "method": "getInstanceAuditLogs",
      "httpMethod": "get",
      "tag": "Logs",
      "typeScriptTag": "logs",
      "description": "Get instance audit logs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/blocklist/accounts",
      "method": "/api/v1/server/blocklist/accountsGet",
      "httpMethod": "get",
      "tag": "Account Blocks",
      "typeScriptTag": "accountBlocks",
      "description": "List account blocks",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/blocklist/accounts",
      "method": "/api/v1/server/blocklist/accountsPost",
      "httpMethod": "post",
      "tag": "Account Blocks",
      "typeScriptTag": "accountBlocks",
      "description": "Block an account",
      "parameters": [
        {
          "name": "accountName",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/blocklist/accounts/{accountName}",
      "method": "/api/v1/server/blocklist/accounts/{accountName}Delete",
      "httpMethod": "delete",
      "tag": "Account Blocks",
      "typeScriptTag": "accountBlocks",
      "description": "Unblock an account by its handle",
      "parameters": [
        {
          "name": "accountName",
          "schema": "string",
          "required": true,
          "description": "account to unblock, in the form `username@domain`"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/blocklist/servers",
      "method": "/api/v1/server/blocklist/serversGet",
      "httpMethod": "get",
      "tag": "Server Blocks",
      "typeScriptTag": "serverBlocks",
      "description": "List server blocks",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/blocklist/servers",
      "method": "/api/v1/server/blocklist/serversPost",
      "httpMethod": "post",
      "tag": "Server Blocks",
      "typeScriptTag": "serverBlocks",
      "description": "Block a server",
      "parameters": [
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/blocklist/servers/{host}",
      "method": "/api/v1/server/blocklist/servers/{host}Delete",
      "httpMethod": "delete",
      "tag": "Server Blocks",
      "typeScriptTag": "serverBlocks",
      "description": "Unblock a server by its domain",
      "parameters": [
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": "server domain to unblock"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/followers",
      "method": "/api/v1/server/followersGet",
      "httpMethod": "get",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "List instances following the server",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "actorType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/followers/{nameWithHost}",
      "method": "/api/v1/server/followers/{nameWithHost}Delete",
      "httpMethod": "delete",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "Remove or reject a follower to your server",
      "parameters": [
        {
          "name": "nameWithHost",
          "schema": "string",
          "required": true,
          "description": "The remote actor handle to remove from your followers"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/followers/{nameWithHost}/accept",
      "method": "/api/v1/server/followers/{nameWithHost}/acceptPost",
      "httpMethod": "post",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "Accept a pending follower to your server",
      "parameters": [
        {
          "name": "nameWithHost",
          "schema": "string",
          "required": true,
          "description": "The remote actor handle to remove from your followers"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/followers/{nameWithHost}/reject",
      "method": "/api/v1/server/followers/{nameWithHost}/rejectPost",
      "httpMethod": "post",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "Reject a pending follower to your server",
      "parameters": [
        {
          "name": "nameWithHost",
          "schema": "string",
          "required": true,
          "description": "The remote actor handle to remove from your followers"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/following",
      "method": "/api/v1/server/followingGet",
      "httpMethod": "get",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "List instances followed by the server",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "actorType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/following",
      "method": "/api/v1/server/followingPost",
      "httpMethod": "post",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "Follow a list of actors (PeerTube instance, channel or account)",
      "parameters": [
        {
          "name": "handles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "hosts",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/following/{hostOrHandle}",
      "method": "/api/v1/server/following/{hostOrHandle}Delete",
      "httpMethod": "delete",
      "tag": "Instance Follows",
      "typeScriptTag": "instanceFollows",
      "description": "Unfollow an actor (PeerTube instance, channel or account)",
      "parameters": [
        {
          "name": "hostOrHandle",
          "schema": "string",
          "required": true,
          "description": "The hostOrHandle to unfollow"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/logs",
      "method": "getInstanceLogs",
      "httpMethod": "get",
      "tag": "Logs",
      "typeScriptTag": "logs",
      "description": "Get instance logs",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/logs/client",
      "method": "sendClientLog",
      "httpMethod": "post",
      "tag": "Logs",
      "typeScriptTag": "logs",
      "description": "Send client log",
      "parameters": [
        {
          "name": "level",
          "schema": "undefined",
          "required": true,
          "description": ""
        },
        {
          "name": "message",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "meta",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "stackTrace",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "userAgent",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/redundancy/videos",
      "method": "getMirroredVideos",
      "httpMethod": "get",
      "tag": "Video Mirroring",
      "typeScriptTag": "videoMirroring",
      "description": "List videos being mirrored",
      "parameters": [
        {
          "name": "target",
          "schema": "string",
          "required": true,
          "description": "direction of the mirror"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort abuses by criteria"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/server/redundancy/videos",
      "method": "putMirroredVideo",
      "httpMethod": "post",
      "tag": "Video Mirroring",
      "typeScriptTag": "videoMirroring",
      "description": "Mirror a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/redundancy/videos/{redundancyId}",
      "method": "delMirroredVideo",
      "httpMethod": "delete",
      "tag": "Video Mirroring",
      "typeScriptTag": "videoMirroring",
      "description": "Delete a mirror done on a video",
      "parameters": [
        {
          "name": "redundancyId",
          "schema": "string",
          "required": true,
          "description": "id of an existing redundancy on a video"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/redundancy/{host}",
      "method": "/api/v1/server/redundancy/{host}Put",
      "httpMethod": "put",
      "tag": "Instance Redundancy",
      "typeScriptTag": "instanceRedundancy",
      "description": "Update a server redundancy policy",
      "parameters": [
        {
          "name": "host",
          "schema": "string",
          "required": true,
          "description": "server domain to mirror"
        },
        {
          "name": "redundancyAllowed",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/server/stats",
      "method": "getInstanceStats",
      "httpMethod": "get",
      "tag": "Stats",
      "typeScriptTag": "stats",
      "description": "Get instance stats",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users",
      "method": "getUsers",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "List users",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Plain text search that will match with user usernames or emails"
        },
        {
          "name": "blocked",
          "schema": "boolean",
          "required": false,
          "description": "Filter results down to (un)banned users"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort users by criteria"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users",
      "method": "addUser",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Create a user",
      "parameters": [
        {
          "name": "adminFlags",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "channelName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "videoQuota",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "videoQuotaDaily",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/ask-send-verify-email",
      "method": "resendEmailToVerifyUser",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Resend user verification link",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me",
      "method": "getUserInfo",
      "httpMethod": "get",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Get my user information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me",
      "method": "putUserInfo",
      "httpMethod": "put",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Update my user information",
      "parameters": [
        {
          "name": "autoPlayNextVideo",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autoPlayNextVideoPlaylist",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autoPlayVideo",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "currentPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayNSFW",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "noAccountSetupWarningModal",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "noInstanceConfigWarningModal",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "noWelcomeModal",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "p2pEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "theme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videoLanguages",
          "schema": "array",
          "description": ""
        },
        {
          "name": "videosHistoryEnabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/abuses",
      "method": "getMyAbuses",
      "httpMethod": "get",
      "tag": "Abuses",
      "typeScriptTag": "abuses",
      "description": "List my abuses",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "description": "only list the report with this id"
        },
        {
          "name": "state",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort abuses by criteria"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/avatar",
      "method": "/api/v1/users/me/avatarDelete",
      "httpMethod": "delete",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Delete my avatar",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/avatar/pick",
      "method": "/api/v1/users/me/avatar/pickPost",
      "httpMethod": "post",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Update my user avatar",
      "parameters": [
        {
          "name": "avatarfile",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/history/videos",
      "method": "/api/v1/users/me/history/videosGet",
      "httpMethod": "get",
      "tag": "My History",
      "typeScriptTag": "myHistory",
      "description": "List watched videos history",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Plain text search, applied to various parts of the model depending on endpoint"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/history/videos/remove",
      "method": "/api/v1/users/me/history/videos/removePost",
      "httpMethod": "post",
      "tag": "My History",
      "typeScriptTag": "myHistory",
      "description": "Clear video history",
      "parameters": [
        {
          "name": "beforeDate",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/history/videos/{videoId}",
      "method": "/api/v1/users/me/history/videos/{videoId}Delete",
      "httpMethod": "delete",
      "tag": "My History",
      "typeScriptTag": "myHistory",
      "description": "Delete history element",
      "parameters": [
        {
          "name": "videoId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/notification-settings",
      "method": "/api/v1/users/me/notificationSettingsPut",
      "httpMethod": "put",
      "tag": "My Notifications",
      "typeScriptTag": "myNotifications",
      "description": "Update my notification settings",
      "parameters": [
        {
          "name": "abuseAsModerator",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "autoInstanceFollowing",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "blacklistOnMyVideo",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "commentMention",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "myVideoImportFinished",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "myVideoPublished",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "newCommentOnMyVideo",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "newFollow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "newInstanceFollower",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "newUserRegistration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "newVideoFromSubscription",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "videoAutoBlacklistAsModerator",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/notifications",
      "method": "/api/v1/users/me/notificationsGet",
      "httpMethod": "get",
      "tag": "My Notifications",
      "typeScriptTag": "myNotifications",
      "description": "List my notifications",
      "parameters": [
        {
          "name": "unread",
          "schema": "boolean",
          "description": "only list unread notifications"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/notifications/read",
      "method": "/api/v1/users/me/notifications/readPost",
      "httpMethod": "post",
      "tag": "My Notifications",
      "typeScriptTag": "myNotifications",
      "description": "Mark notifications as read by their id",
      "parameters": [
        {
          "name": "ids",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/notifications/read-all",
      "method": "/api/v1/users/me/notifications/readAllPost",
      "httpMethod": "post",
      "tag": "My Notifications",
      "typeScriptTag": "myNotifications",
      "description": "Mark all my notification as read",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/subscriptions",
      "method": "/api/v1/users/me/subscriptionsGet",
      "httpMethod": "get",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "Get my user subscriptions",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/subscriptions",
      "method": "/api/v1/users/me/subscriptionsPost",
      "httpMethod": "post",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "Add subscription to my user",
      "parameters": [
        {
          "name": "uri",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/subscriptions/exist",
      "method": "/api/v1/users/me/subscriptions/existGet",
      "httpMethod": "get",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "Get if subscriptions exist for my user",
      "parameters": [
        {
          "name": "uris",
          "schema": "array",
          "required": true,
          "description": "list of uris to check if each is part of the user subscriptions"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/subscriptions/videos",
      "method": "/api/v1/users/me/subscriptions/videosGet",
      "httpMethod": "get",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "List videos of subscriptions of my user",
      "parameters": [
        {
          "name": "categoryOneOf",
          "schema": "undefined",
          "required": false,
          "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
        },
        {
          "name": "isLive",
          "schema": "boolean",
          "required": false,
          "description": "whether or not the video is a live"
        },
        {
          "name": "tagsOneOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video"
        },
        {
          "name": "tagsAllOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video, where all should be present in the video"
        },
        {
          "name": "licenceOneOf",
          "schema": "undefined",
          "required": false,
          "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
        },
        {
          "name": "languageOneOf",
          "schema": "undefined",
          "required": false,
          "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        },
        {
          "name": "skipCount",
          "schema": "string",
          "required": false,
          "description": "if you don't need the `total` in the response"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "excludeAlreadyWatched",
          "schema": "boolean",
          "description": "Whether or not to exclude videos that are in the user's video history"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/subscriptions/{subscriptionHandle}",
      "method": "/api/v1/users/me/subscriptions/{subscriptionHandle}Delete",
      "httpMethod": "delete",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "Delete subscription of my user",
      "parameters": [
        {
          "name": "subscriptionHandle",
          "schema": "string",
          "required": true,
          "description": "The subscription handle"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/me/subscriptions/{subscriptionHandle}",
      "method": "/api/v1/users/me/subscriptions/{subscriptionHandle}Get",
      "httpMethod": "get",
      "tag": "My Subscriptions",
      "typeScriptTag": "mySubscriptions",
      "description": "Get subscription of my user",
      "parameters": [
        {
          "name": "subscriptionHandle",
          "schema": "string",
          "required": true,
          "description": "The subscription handle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/video-playlists/videos-exist",
      "method": "/api/v1/users/me/videoPlaylists/videosExistGet",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Check video exists in my playlists",
      "parameters": [
        {
          "name": "videoIds",
          "schema": "array",
          "required": true,
          "description": "The video ids to check"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/video-quota-used",
      "method": "/api/v1/users/me/videoQuotaUsedGet",
      "httpMethod": "get",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Get my user used quota",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/videos",
      "method": "/api/v1/users/me/videosGet",
      "httpMethod": "get",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Get videos of my user",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/videos/imports",
      "method": "/api/v1/users/me/videos/importsGet",
      "httpMethod": "get",
      "tag": "Videos",
      "typeScriptTag": "videos",
      "description": "Get video imports of my user",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "targetUrl",
          "schema": "string",
          "required": false,
          "description": "Filter on import target URL"
        },
        {
          "name": "videoChannelSyncId",
          "schema": "number",
          "required": false,
          "description": "Filter on imports created by a specific channel synchronization"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Search in video names"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/me/videos/{videoId}/rating",
      "method": "/api/v1/users/me/videos/{videoId}/ratingGet",
      "httpMethod": "get",
      "tag": "My User",
      "typeScriptTag": "myUser",
      "description": "Get rate of my user for a video",
      "parameters": [
        {
          "name": "videoId",
          "schema": "undefined",
          "required": true,
          "description": "The video id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/register",
      "method": "registerUser",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Register a user",
      "parameters": [
        {
          "name": "channel",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/registrations",
      "method": "listRegistrations",
      "httpMethod": "get",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "List registrations",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/registrations/ask-send-verify-email",
      "method": "resendEmailToVerifyRegistration",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Resend verification link to registration email",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/registrations/request",
      "method": "requestRegistration",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Request registration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/registrations/{registrationId}",
      "method": "deleteRegistration",
      "httpMethod": "delete",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Delete registration",
      "parameters": [
        {
          "name": "registrationId",
          "schema": "integer",
          "required": true,
          "description": "Registration ID"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/registrations/{registrationId}/accept",
      "method": "acceptRegistration",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Accept registration",
      "parameters": [
        {
          "name": "registrationId",
          "schema": "integer",
          "required": true,
          "description": "Registration ID"
        },
        {
          "name": "moderationResponse",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "preventEmailDelivery",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/registrations/{registrationId}/reject",
      "method": "rejectRegistration",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Reject registration",
      "parameters": [
        {
          "name": "registrationId",
          "schema": "integer",
          "required": true,
          "description": "Registration ID"
        },
        {
          "name": "moderationResponse",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "preventEmailDelivery",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/registrations/{registrationId}/verify-email",
      "method": "verifyRegistrationEmail",
      "httpMethod": "post",
      "tag": "Register",
      "typeScriptTag": "register",
      "description": "Verify a registration email",
      "parameters": [
        {
          "name": "registrationId",
          "schema": "integer",
          "required": true,
          "description": "Registration ID"
        },
        {
          "name": "verificationString",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/revoke-token",
      "method": "revokeOAuthToken",
      "httpMethod": "post",
      "tag": "Session",
      "typeScriptTag": "session",
      "description": "Logout",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/users/token",
      "method": "getOAuthToken",
      "httpMethod": "post",
      "tag": "Session",
      "typeScriptTag": "session",
      "description": "Login",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/{id}",
      "method": "delUser",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Delete a user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/users/{id}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get a user",
      "parameters": [
        {
          "name": "withStats",
          "schema": "boolean",
          "description": "include statistics about the user (only available as a moderator/admin)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/{id}",
      "method": "putUser",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Update a user",
      "parameters": [
        {
          "name": "adminFlags",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "email",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "emailVerified",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "pluginAuth",
          "schema": "string",
          "description": ""
        },
        {
          "name": "role",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "videoQuota",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "videoQuotaDaily",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/{id}/two-factor/confirm-request",
      "method": "confirmTwoFactorRequest",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Confirm two factor auth",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "otpToken",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "requestToken",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/{id}/two-factor/disable",
      "method": "disableTwoFactor",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Disable two factor auth",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "currentPassword",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/users/{id}/two-factor/request",
      "method": "requestTwoFactor",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Request two factor auth",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "currentPassword",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/users/{id}/verify-email",
      "method": "verifyUser",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Verify a user",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        },
        {
          "name": "isPendingEmail",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "verificationString",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channel-syncs",
      "method": "addVideoChannelSync",
      "httpMethod": "post",
      "tag": "Channels Sync",
      "typeScriptTag": "channelsSync",
      "description": "Create a synchronization for a video channel",
      "parameters": [
        {
          "name": "externalChannelUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videoChannelId",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channel-syncs/{channelSyncId}",
      "method": "delVideoChannelSync",
      "httpMethod": "delete",
      "tag": "Channels Sync",
      "typeScriptTag": "channelsSync",
      "description": "Delete a video channel synchronization",
      "parameters": [
        {
          "name": "channelSyncId",
          "schema": "integer",
          "required": true,
          "description": "Channel Sync id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channel-syncs/{channelSyncId}/sync",
      "method": "triggerVideoChannelSync",
      "httpMethod": "post",
      "tag": "Channels Sync",
      "typeScriptTag": "channelsSync",
      "description": "Triggers the channel synchronization job, fetching all the videos from the remote channel",
      "parameters": [
        {
          "name": "channelSyncId",
          "schema": "integer",
          "required": true,
          "description": "Channel Sync id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels",
      "method": "getVideoChannels",
      "httpMethod": "get",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "List video channels",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels",
      "method": "addVideoChannel",
      "httpMethod": "post",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Create a video channel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}",
      "method": "delVideoChannel",
      "httpMethod": "delete",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Delete a video channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}",
      "method": "getVideoChannel",
      "httpMethod": "get",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Get a video channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}",
      "method": "putVideoChannel",
      "httpMethod": "put",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Update a video channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/avatar",
      "method": "/api/v1/videoChannels/{channelHandle}/avatarDelete",
      "httpMethod": "delete",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Delete channel avatar",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/avatar/pick",
      "method": "/api/v1/videoChannels/{channelHandle}/avatar/pickPost",
      "httpMethod": "post",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Update channel avatar",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "avatarfile",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/banner",
      "method": "/api/v1/videoChannels/{channelHandle}/bannerDelete",
      "httpMethod": "delete",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Delete channel banner",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/banner/pick",
      "method": "/api/v1/videoChannels/{channelHandle}/banner/pickPost",
      "httpMethod": "post",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Update channel banner",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "bannerfile",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/followers",
      "method": "getVideoChannelFollowers",
      "httpMethod": "get",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "List followers of a video channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort followers by criteria"
        },
        {
          "name": "search",
          "schema": "string",
          "required": false,
          "description": "Plain text search, applied to various parts of the model depending on endpoint"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/import-videos",
      "method": "/api/v1/videoChannels/{channelHandle}/importVideosPost",
      "httpMethod": "post",
      "tag": "Video Channels",
      "typeScriptTag": "videoChannels",
      "description": "Import videos in channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "externalChannelUrl",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "videoChannelSyncId",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/video-playlists",
      "method": "/api/v1/videoChannels/{channelHandle}/videoPlaylistsGet",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "List playlists of a channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "playlistType",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-channels/{channelHandle}/videos",
      "method": "getVideoChannelVideos",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List videos of a video channel",
      "parameters": [
        {
          "name": "channelHandle",
          "schema": "string",
          "required": true,
          "description": "The video channel handle"
        },
        {
          "name": "categoryOneOf",
          "schema": "undefined",
          "required": false,
          "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
        },
        {
          "name": "isLive",
          "schema": "boolean",
          "required": false,
          "description": "whether or not the video is a live"
        },
        {
          "name": "tagsOneOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video"
        },
        {
          "name": "tagsAllOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video, where all should be present in the video"
        },
        {
          "name": "licenceOneOf",
          "schema": "undefined",
          "required": false,
          "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
        },
        {
          "name": "languageOneOf",
          "schema": "undefined",
          "required": false,
          "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        },
        {
          "name": "skipCount",
          "schema": "string",
          "required": false,
          "description": "if you don't need the `total` in the response"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "excludeAlreadyWatched",
          "schema": "boolean",
          "description": "Whether or not to exclude videos that are in the user's video history"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists",
      "method": "getPlaylists",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "List video playlists",
      "parameters": [
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "playlistType",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists",
      "method": "addPlaylist",
      "httpMethod": "post",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Create a video playlist",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "thumbnailfile",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "videoChannelId",
          "schema": "undefined",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists/privacies",
      "method": "getPlaylistPrivacyPolicies",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "List available playlist privacy policies",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}",
      "method": "/api/v1/videoPlaylists/{playlistId}Delete",
      "httpMethod": "delete",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Delete a video playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}",
      "method": "/api/v1/videoPlaylists/{playlistId}Get",
      "httpMethod": "get",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Get a video playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}",
      "method": "/api/v1/videoPlaylists/{playlistId}Put",
      "httpMethod": "put",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Update a video playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "thumbnailfile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "videoChannelId",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}/videos",
      "method": "getVideoPlaylistVideos",
      "httpMethod": "get",
      "tag": "Videos",
      "typeScriptTag": "videos",
      "description": "List videos of a playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}/videos",
      "method": "addVideoPlaylistVideo",
      "httpMethod": "post",
      "tag": "Videos",
      "typeScriptTag": "videos",
      "description": "Add a video in a playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "startTimestamp",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "stopTimestamp",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "videoId",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}/videos/reorder",
      "method": "reorderVideoPlaylist",
      "httpMethod": "post",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Reorder a playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "insertAfterPosition",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "reorderLength",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "startPosition",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}",
      "method": "delVideoPlaylistVideo",
      "httpMethod": "delete",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Delete an element from a playlist",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "playlistElementId",
          "schema": "integer",
          "required": true,
          "description": "Playlist element id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/video-playlists/{playlistId}/videos/{playlistElementId}",
      "method": "putVideoPlaylistVideo",
      "httpMethod": "put",
      "tag": "Video Playlists",
      "typeScriptTag": "videoPlaylists",
      "description": "Update a playlist element",
      "parameters": [
        {
          "name": "playlistId",
          "schema": "integer",
          "required": true,
          "description": "Playlist id"
        },
        {
          "name": "playlistElementId",
          "schema": "integer",
          "required": true,
          "description": "Playlist element id"
        },
        {
          "name": "startTimestamp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "stopTimestamp",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos",
      "method": "getVideos",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List videos",
      "parameters": [
        {
          "name": "categoryOneOf",
          "schema": "undefined",
          "required": false,
          "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
        },
        {
          "name": "isLive",
          "schema": "boolean",
          "required": false,
          "description": "whether or not the video is a live"
        },
        {
          "name": "tagsOneOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video"
        },
        {
          "name": "tagsAllOf",
          "schema": "undefined",
          "required": false,
          "description": "tag(s) of the video, where all should be present in the video"
        },
        {
          "name": "licenceOneOf",
          "schema": "undefined",
          "required": false,
          "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
        },
        {
          "name": "languageOneOf",
          "schema": "undefined",
          "required": false,
          "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        },
        {
          "name": "skipCount",
          "schema": "string",
          "required": false,
          "description": "if you don't need the `total` in the response"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "excludeAlreadyWatched",
          "schema": "boolean",
          "description": "Whether or not to exclude videos that are in the user's video history"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/blacklist",
      "method": "getVideoBlocks",
      "httpMethod": "get",
      "tag": "Video Blocks",
      "typeScriptTag": "videoBlocks",
      "description": "List video blocks",
      "parameters": [
        {
          "name": "type",
          "schema": "integer",
          "description": "list only blocks that match this type:\n- `1`: manual block\n- `2`: automatic block that needs review\n"
        },
        {
          "name": "search",
          "schema": "string",
          "description": "plain search that will match with video titles, and more"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort blocklists by criteria"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/categories",
      "method": "getCategories",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List available video categories",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/imports",
      "method": "importVideo",
      "httpMethod": "post",
      "tag": "Video Imports",
      "typeScriptTag": "videoImports",
      "description": "Import a video",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/imports/{id}",
      "method": "/api/v1/videos/imports/{id}Delete",
      "httpMethod": "delete",
      "tag": "Video Imports",
      "typeScriptTag": "videoImports",
      "description": "Delete video import",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/imports/{id}/cancel",
      "method": "/api/v1/videos/imports/{id}/cancelPost",
      "httpMethod": "post",
      "tag": "Video Imports",
      "typeScriptTag": "videoImports",
      "description": "Cancel video import",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "required": true,
          "description": "Entity id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/languages",
      "method": "getLanguages",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List available video languages",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/licences",
      "method": "getLicences",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List available video licences",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/live",
      "method": "addLive",
      "httpMethod": "post",
      "tag": "Live Videos",
      "typeScriptTag": "liveVideos",
      "description": "Create a live",
      "parameters": [
        {
          "name": "category",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "channelId",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "commentsEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "downloadEnabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "latencyMode",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "licence",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "nsfw",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "permanentLive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "previewfile",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "replaySettings",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "saveReplay",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "support",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "thumbnailfile",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/live/{id}",
      "method": "getLiveId",
      "httpMethod": "get",
      "tag": "Live Videos",
      "typeScriptTag": "liveVideos",
      "description": "Get information about a live",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/live/{id}",
      "method": "updateLiveId",
      "httpMethod": "put",
      "tag": "Live Videos",
      "typeScriptTag": "liveVideos",
      "description": "Update information about a live",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "latencyMode",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "permanentLive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "replaySettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "saveReplay",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/live/{id}/sessions",
      "method": "/api/v1/videos/live/{id}/sessionsGet",
      "httpMethod": "get",
      "tag": "Live Videos",
      "typeScriptTag": "liveVideos",
      "description": "List live sessions",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/ownership",
      "method": "/api/v1/videos/ownershipGet",
      "httpMethod": "get",
      "tag": "Video Ownership Change",
      "typeScriptTag": "videoOwnershipChange",
      "description": "List video ownership changes",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/api/v1/videos/ownership/{id}/accept",
      "method": "/api/v1/videos/ownership/{id}/acceptPost",
      "httpMethod": "post",
      "tag": "Video Ownership Change",
      "typeScriptTag": "videoOwnershipChange",
      "description": "Accept ownership change request",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/ownership/{id}/refuse",
      "method": "/api/v1/videos/ownership/{id}/refusePost",
      "httpMethod": "post",
      "tag": "Video Ownership Change",
      "typeScriptTag": "videoOwnershipChange",
      "description": "Refuse ownership change request",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/privacies",
      "method": "getVideoPrivacyPolicies",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "List available video privacy policies",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/upload",
      "method": "uploadLegacy",
      "httpMethod": "post",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Upload a video",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/upload-resumable",
      "method": "uploadResumableCancel",
      "httpMethod": "delete",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Cancel the resumable upload of a video, deleting any data uploaded so far",
      "parameters": [
        {
          "name": "uploadId",
          "schema": "string",
          "required": true,
          "description": "Created session id to proceed with. If you didn't send chunks in the last 12 hours, it is\nnot valid anymore and the upload session has already been deleted with its data ;-)\n"
        },
        {
          "name": "contentLength",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/upload-resumable",
      "method": "uploadResumableInit",
      "httpMethod": "post",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Initialize the resumable upload of a video",
      "parameters": [
        {
          "name": "xUploadContentLength",
          "schema": "number",
          "required": true,
          "description": "Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading."
        },
        {
          "name": "xUploadContentType",
          "schema": "string",
          "required": true,
          "description": "MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary."
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/upload-resumable",
      "method": "uploadResumable",
      "httpMethod": "put",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Send chunk for the resumable upload of a video",
      "parameters": [
        {
          "name": "uploadId",
          "schema": "string",
          "required": true,
          "description": "Created session id to proceed with. If you didn't send chunks in the last hour, it is\nnot valid anymore and you need to initialize a new upload.\n"
        },
        {
          "name": "contentRange",
          "schema": "string",
          "required": true,
          "description": "Specifies the bytes in the file that the request is uploading.\n\nFor example, a value of `bytes 0-262143/1000000` shows that the request is sending the first\n262144 bytes (256 x 1024) in a 2,469,036 byte file.\n"
        },
        {
          "name": "contentLength",
          "schema": "number",
          "required": true,
          "description": "Size of the chunk that the request is sending.\n\nRemember that larger chunks are more efficient. PeerTube's web client uses chunks varying from\n1048576 bytes (~1MB) and increases or reduces size depending on connection health.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}",
      "method": "delVideo",
      "httpMethod": "delete",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Delete a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}",
      "method": "getVideo",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Get a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}",
      "method": "putVideo",
      "httpMethod": "put",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Update a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "category",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "commentsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "downloadEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "language",
          "schema": "string",
          "description": ""
        },
        {
          "name": "licence",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nsfw",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "originallyPublishedAt",
          "schema": "string",
          "description": ""
        },
        {
          "name": "previewfile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "privacy",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "scheduleUpdate",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "support",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "thumbnailfile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "waitTranscoding",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/blacklist",
      "method": "delVideoBlock",
      "httpMethod": "delete",
      "tag": "Video Blocks",
      "typeScriptTag": "videoBlocks",
      "description": "Unblock a video by its id",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/blacklist",
      "method": "addVideoBlock",
      "httpMethod": "post",
      "tag": "Video Blocks",
      "typeScriptTag": "videoBlocks",
      "description": "Block a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/captions",
      "method": "getVideoCaptions",
      "httpMethod": "get",
      "tag": "Video Captions",
      "typeScriptTag": "videoCaptions",
      "description": "List captions of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/captions/{captionLanguage}",
      "method": "delVideoCaption",
      "httpMethod": "delete",
      "tag": "Video Captions",
      "typeScriptTag": "videoCaptions",
      "description": "Delete a video caption",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "captionLanguage",
          "schema": "string",
          "required": true,
          "description": "The caption language"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/captions/{captionLanguage}",
      "method": "addVideoCaption",
      "httpMethod": "put",
      "tag": "Video Captions",
      "typeScriptTag": "videoCaptions",
      "description": "Add or replace a video caption",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "captionLanguage",
          "schema": "string",
          "required": true,
          "description": "The caption language"
        },
        {
          "name": "captionfile",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/comment-threads",
      "method": "/api/v1/videos/{id}/commentThreadsGet",
      "httpMethod": "get",
      "tag": "Video Comments",
      "typeScriptTag": "videoComments",
      "description": "List threads of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "start",
          "schema": "integer",
          "required": false,
          "description": "Offset used to paginate results"
        },
        {
          "name": "count",
          "schema": "integer",
          "required": false,
          "description": "Number of items to return"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort comments by criteria"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/comment-threads",
      "method": "/api/v1/videos/{id}/commentThreadsPost",
      "httpMethod": "post",
      "tag": "Video Comments",
      "typeScriptTag": "videoComments",
      "description": "Create a thread",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "text",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/comment-threads/{threadId}",
      "method": "/api/v1/videos/{id}/commentThreads/{threadId}Get",
      "httpMethod": "get",
      "tag": "Video Comments",
      "typeScriptTag": "videoComments",
      "description": "Get a thread",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "threadId",
          "schema": "integer",
          "required": true,
          "description": "The thread id (root comment id)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/comments/{commentId}",
      "method": "/api/v1/videos/{id}/comments/{commentId}Delete",
      "httpMethod": "delete",
      "tag": "Video Comments",
      "typeScriptTag": "videoComments",
      "description": "Delete a comment or a reply",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "commentId",
          "schema": "integer",
          "required": true,
          "description": "The comment id"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/comments/{commentId}",
      "method": "/api/v1/videos/{id}/comments/{commentId}Post",
      "httpMethod": "post",
      "tag": "Video Comments",
      "typeScriptTag": "videoComments",
      "description": "Reply to a thread of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "commentId",
          "schema": "integer",
          "required": true,
          "description": "The comment id"
        },
        {
          "name": "text",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/description",
      "method": "getVideoDesc",
      "httpMethod": "get",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Get complete video description",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/give-ownership",
      "method": "/api/v1/videos/{id}/giveOwnershipPost",
      "httpMethod": "post",
      "tag": "Video Ownership Change",
      "typeScriptTag": "videoOwnershipChange",
      "description": "Request ownership change",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/hls",
      "method": "delVideoHls",
      "httpMethod": "delete",
      "tag": "Video Files",
      "typeScriptTag": "videoFiles",
      "description": "Delete video HLS files",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/live-session",
      "method": "/api/v1/videos/{id}/liveSessionGet",
      "httpMethod": "get",
      "tag": "Live Videos",
      "typeScriptTag": "liveVideos",
      "description": "Get live session of a replay",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/rate",
      "method": "/api/v1/videos/{id}/ratePut",
      "httpMethod": "put",
      "tag": "Video Rates",
      "typeScriptTag": "videoRates",
      "description": "Like/dislike a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "rating",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/source",
      "method": "getVideoSource",
      "httpMethod": "post",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Get video source file metadata",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/stats/overall",
      "method": "/api/v1/videos/{id}/stats/overallGet",
      "httpMethod": "get",
      "tag": "Video Stats",
      "typeScriptTag": "videoStats",
      "description": "Get overall stats of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Filter stats by start date"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Filter stats by end date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/stats/retention",
      "method": "/api/v1/videos/{id}/stats/retentionGet",
      "httpMethod": "get",
      "tag": "Video Stats",
      "typeScriptTag": "videoStats",
      "description": "Get retention stats of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/stats/timeseries/{metric}",
      "method": "/api/v1/videos/{id}/stats/timeseries/{metric}Get",
      "httpMethod": "get",
      "tag": "Video Stats",
      "typeScriptTag": "videoStats",
      "description": "Get timeserie stats of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "metric",
          "schema": "string",
          "required": true,
          "description": "The metric to get"
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Filter stats by start date"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Filter stats by end date"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/studio/edit",
      "method": "/api/v1/videos/{id}/studio/editPost",
      "httpMethod": "post",
      "tag": "Video Transcoding",
      "typeScriptTag": "videoTranscoding",
      "description": "Create a studio task",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/token",
      "method": "requestVideoToken",
      "httpMethod": "post",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Request video token",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/api/v1/videos/{id}/transcoding",
      "method": "createVideoTranscoding",
      "httpMethod": "post",
      "tag": "Video Transcoding",
      "typeScriptTag": "videoTranscoding",
      "description": "Create a transcoding job",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "transcodingType",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/views",
      "method": "addView",
      "httpMethod": "post",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Notify user is watching a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "currentTime",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "viewEvent",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/watching",
      "method": "/api/v1/videos/{id}/watchingPut",
      "httpMethod": "put",
      "tag": "Video",
      "typeScriptTag": "video",
      "description": "Set watching progress of a video",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        },
        {
          "name": "currentTime",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "viewEvent",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/api/v1/videos/{id}/webtorrent",
      "method": "delVideoWebTorrent",
      "httpMethod": "delete",
      "tag": "Video Files",
      "typeScriptTag": "videoFiles",
      "description": "Delete video WebTorrent files",
      "parameters": [
        {
          "name": "id",
          "schema": "undefined",
          "required": true,
          "description": "The object id, uuid or short uuid"
        }
      ],
      "responses": []
    },
    {
      "url": "/feeds/subscriptions.{format}",
      "method": "getSyndicatedSubscriptionVideos",
      "httpMethod": "get",
      "tag": "Video Feeds",
      "typeScriptTag": "videoFeeds",
      "description": "List videos of subscriptions tied to a token",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))"
        },
        {
          "name": "accountId",
          "schema": "string",
          "required": true,
          "description": "limit listing to a specific account"
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": "private token allowing access"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/feeds/video-comments.{format}",
      "method": "getSyndicatedComments",
      "httpMethod": "get",
      "tag": "Video Feeds",
      "typeScriptTag": "videoFeeds",
      "description": "List comments on videos",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))"
        },
        {
          "name": "videoId",
          "schema": "string",
          "description": "limit listing to a specific video"
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "limit listing to a specific account"
        },
        {
          "name": "accountName",
          "schema": "string",
          "description": "limit listing to a specific account"
        },
        {
          "name": "videoChannelId",
          "schema": "string",
          "description": "limit listing to a specific video channel"
        },
        {
          "name": "videoChannelName",
          "schema": "string",
          "description": "limit listing to a specific video channel"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/feeds/videos.{format}",
      "method": "getSyndicatedVideos",
      "httpMethod": "get",
      "tag": "Video Feeds",
      "typeScriptTag": "videoFeeds",
      "description": "List videos",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "required": true,
          "description": "format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))"
        },
        {
          "name": "accountId",
          "schema": "string",
          "description": "limit listing to a specific account"
        },
        {
          "name": "accountName",
          "schema": "string",
          "description": "limit listing to a specific account"
        },
        {
          "name": "videoChannelId",
          "schema": "string",
          "description": "limit listing to a specific video channel"
        },
        {
          "name": "videoChannelName",
          "schema": "string",
          "description": "limit listing to a specific video channel"
        },
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sort column"
        },
        {
          "name": "nsfw",
          "schema": "string",
          "required": false,
          "description": "whether to include nsfw videos, if any"
        },
        {
          "name": "isLocal",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only local or remote videos"
        },
        {
          "name": "include",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
        },
        {
          "name": "privacyOneOf",
          "schema": "integer",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
        },
        {
          "name": "hasHlsFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
        },
        {
          "name": "hasWebtorrentFiles",
          "schema": "boolean",
          "required": false,
          "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
        }
      ],
      "responses": [
        {
          "statusCode": "204",
          "description": ""
        }
      ]
    },
    {
      "url": "/static/streaming-playlists/hls/private/{filename}",
      "method": "/static/streamingPlaylists/hls/private/{filename}Get",
      "httpMethod": "get",
      "tag": "Static Video Files",
      "typeScriptTag": "staticVideoFiles",
      "description": "Get private HLS video file",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename"
        },
        {
          "name": "videoFileToken",
          "schema": "string",
          "required": false,
          "description": "Video file token [generated](#operation/requestVideoToken) by PeerTube so you don't need to provide an OAuth token in the request header."
        },
        {
          "name": "reinjectVideoFileToken",
          "schema": "boolean",
          "required": false,
          "description": "Ask the server to reinject videoFileToken in URLs in m3u8 playlist"
        }
      ],
      "responses": []
    },
    {
      "url": "/static/streaming-playlists/hls/{filename}",
      "method": "/static/streamingPlaylists/hls/{filename}Get",
      "httpMethod": "get",
      "tag": "Static Video Files",
      "typeScriptTag": "staticVideoFiles",
      "description": "Get public HLS video file",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename"
        }
      ],
      "responses": []
    },
    {
      "url": "/static/webseed/private/{filename}",
      "method": "/static/webseed/private/{filename}Get",
      "httpMethod": "get",
      "tag": "Static Video Files",
      "typeScriptTag": "staticVideoFiles",
      "description": "Get private WebTorrent video file",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename"
        },
        {
          "name": "videoFileToken",
          "schema": "string",
          "required": false,
          "description": "Video file token [generated](#operation/requestVideoToken) by PeerTube so you don't need to provide an OAuth token in the request header."
        }
      ],
      "responses": []
    },
    {
      "url": "/static/webseed/{filename}",
      "method": "/static/webseed/{filename}Get",
      "httpMethod": "get",
      "tag": "Static Video Files",
      "typeScriptTag": "staticVideoFiles",
      "description": "Get public WebTorrent video file",
      "parameters": [
        {
          "name": "filename",
          "schema": "string",
          "required": true,
          "description": "Filename"
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://peertube2.cpy.re",
  "apiDescription": "The PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite\nHTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with\n[openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\nwhich generates a client SDK in the language of your choice - we generate some client SDKs automatically:\n\n- [Python](https://framagit.org/framasoft/peertube/clients/python)\n- [Go](https://framagit.org/framasoft/peertube/clients/go)\n- [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)\n\nSee the [REST API quick start](https://docs.joinpeertube.org/api/rest-getting-started) for a few\nexamples of using the PeerTube API.\n\n# Authentication\n\nWhen you sign up for an account on a PeerTube instance, you are given the possibility\nto generate sessions on it, and authenticate there using an access token. Only __one\naccess token can currently be used at a time__.\n\n## Roles\n\nAccounts are given permissions based on their role. There are three roles on\nPeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/admin/managing-users#roles) for a detail of their permissions.\n\n# Errors\n\nThe API uses standard HTTP status codes to indicate the success or failure\nof the API call, completed by a [RFC7807-compliant](https://tools.ietf.org/html/rfc7807) response body.\n\n```\nHTTP 1.1 404 Not Found\nContent-Type: application/problem+json; charset=utf-8\n\n{\n  \"detail\": \"Video not found\",\n  \"docs\": \"https://docs.joinpeertube.org/api/rest-reference.html#operation/getVideo\",\n  \"status\": 404,\n  \"title\": \"Not Found\",\n  \"type\": \"about:blank\"\n}\n```\n\nWe provide error `type` values for [a growing number of cases](https://github.com/Chocobozzz/PeerTube/blob/develop/shared/models/server/server-error-code.enum.ts),\nbut it is still optional. Types are used to disambiguate errors that bear the same status code\nand are non-obvious:\n\n```\nHTTP 1.1 403 Forbidden\nContent-Type: application/problem+json; charset=utf-8\n\n{\n  \"detail\": \"Cannot get this video regarding follow constraints\",\n  \"docs\": \"https://docs.joinpeertube.org/api/rest-reference.html#operation/getVideo\",\n  \"status\": 403,\n  \"title\": \"Forbidden\",\n  \"type\": \"https://docs.joinpeertube.org/api/rest-reference.html#section/Errors/does_not_respect_follow_constraints\"\n}\n```\n\nHere a 403 error could otherwise mean that the video is private or blocklisted.\n\n### Validation errors\n\nEach parameter is evaluated on its own against a set of rules before the route validator\nproceeds with potential testing involving parameter combinations. Errors coming from validation\nerrors appear earlier and benefit from a more detailed error description:\n\n```\nHTTP 1.1 400 Bad Request\nContent-Type: application/problem+json; charset=utf-8\n\n{\n  \"detail\": \"Incorrect request parameters: id\",\n  \"docs\": \"https://docs.joinpeertube.org/api/rest-reference.html#operation/getVideo\",\n  \"instance\": \"/api/v1/videos/9c9de5e8-0a1e-484a-b099-e80766180\",\n  \"invalid-params\": {\n    \"id\": {\n      \"location\": \"params\",\n      \"msg\": \"Invalid value\",\n      \"param\": \"id\",\n      \"value\": \"9c9de5e8-0a1e-484a-b099-e80766180\"\n    }\n  },\n  \"status\": 400,\n  \"title\": \"Bad Request\",\n  \"type\": \"about:blank\"\n}\n```\n\nWhere `id` is the name of the field concerned by the error, within the route definition.\n`invalid-params.<field>.location` can be either 'params', 'body', 'header', 'query' or 'cookies', and\n`invalid-params.<field>.value` reports the value that didn't pass validation whose `invalid-params.<field>.msg`\nis about.\n\n### Deprecated error fields\n\nSome fields could be included with previous versions. They are still included but their use is deprecated:\n- `error`: superseded by `detail`\n- `code`: superseded by `type` (which is now an URI)\n\n# Rate limits\n\nWe are rate-limiting all endpoints of PeerTube's API. Custom values can be set by administrators:\n\n| Endpoint (prefix: `/api/v1`) | Calls         | Time frame   |\n|------------------------------|---------------|--------------|\n| `/*`                         | 50            | 10 seconds   |\n| `POST /users/token`          | 15            | 5 minutes    |\n| `POST /users/register`       | 2<sup>*</sup> | 5 minutes    |\n| `POST /users/ask-send-verify-email` | 3      | 5 minutes    |\n\nDepending on the endpoint, <sup>*</sup>failed requests are not taken into account. A service\nlimit is announced by a `429 Too Many Requests` status code.\n\nYou can get details about the current state of your rate limit by reading the\nfollowing headers:\n\n| Header                  | Description                                                |\n|-------------------------|------------------------------------------------------------|\n| `X-RateLimit-Limit`     | Number of max requests allowed in the current time period  |\n| `X-RateLimit-Remaining` | Number of remaining requests in the current time period    |\n| `X-RateLimit-Reset`     | Timestamp of end of current time period as UNIX timestamp  |\n| `Retry-After`           | Seconds to delay after the first `429` is received         |\n\n# CORS\n\nThis API features [Cross-Origin Resource Sharing (CORS)](https://fetch.spec.whatwg.org/),\nallowing cross-domain communication from the browser for some routes:\n\n| Endpoint                    |\n|------------------------- ---|\n| `/api/*`                    |\n| `/download/*`               |\n| `/lazy-static/*`            |\n| `/.well-known/webfinger`    |\n\nIn addition, all routes serving ActivityPub are CORS-enabled for all origins.\n",
  "apiTitle": "PeerTube",
  "endpoints": 153,
  "sdkMethods": 187,
  "schemas": 118,
  "parameters": 555,
  "contactUrl": "https://joinpeertube.org",
  "difficultyScore": 384.75,
  "difficulty": "Hard"
}