{
  "providerName": "keycloak.local",
  "openApiRaw": "https://raw.githubusercontent.com/ccouzens/keycloak-openapi/master/keycloak/10.0.json",
  "securitySchemes": {
    "access_token": {
      "scheme": "bearer",
      "type": "http"
    }
  },
  "categories": [
    "developer_tools"
  ],
  "homepage": "keycloak.local",
  "apiVersion": "1",
  "methods": [
    {
      "url": "/",
      "method": "/Get",
      "httpMethod": "get",
      "tag": "Root",
      "typeScriptTag": "root",
      "description": "Get themes, social providers, auth providers, and event listeners available on this server",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/",
      "method": "/Post",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Import a realm   Imports a realm from a full representation of that realm.",
      "parameters": [
        {
          "name": "accessCodeLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessCodeLifespanLogin",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessCodeLifespanUserAction",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessTokenLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessTokenLifespanForImplicitFlow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accountTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "actionTokenGeneratedByAdminLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "actionTokenGeneratedByUserLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "adminEventsDetailsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "adminEventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "adminTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authenticationFlows",
          "schema": "array",
          "description": ""
        },
        {
          "name": "authenticatorConfig",
          "schema": "array",
          "description": ""
        },
        {
          "name": "browserFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "browserSecurityHeaders",
          "schema": "object",
          "description": ""
        },
        {
          "name": "bruteForceProtected",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "clientAuthenticationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clientScopeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "clientSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "clientSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "components",
          "schema": "object",
          "description": ""
        },
        {
          "name": "defaultDefaultClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultGroups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultLocale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "defaultOptionalClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultSignatureAlgorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "directGrantFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayNameHtml",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dockerAuthenticationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "duplicateEmailsAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "editUsernameAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "emailTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabledEventTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "eventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "eventsExpiration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "eventsListeners",
          "schema": "array",
          "description": ""
        },
        {
          "name": "failureFactor",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "federatedUsers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "identityProviders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "internationalizationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "keycloakVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "loginTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "loginWithEmailAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "maxDeltaTimeSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "maxFailureWaitSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "minimumQuickLoginWaitSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionMaxLifespanEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "otpPolicyAlgorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "otpPolicyDigits",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyInitialCounter",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyLookAheadWindow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyPeriod",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "otpSupportedApplications",
          "schema": "array",
          "description": ""
        },
        {
          "name": "passwordPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "permanentLockout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quickLoginCheckMilliSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "realm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "refreshTokenMaxReuse",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "registrationAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "registrationEmailAsUsername",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "registrationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rememberMe",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "requiredActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "resetCredentialsFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resetPasswordAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "revokeRefreshToken",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "roles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scopeMappings",
          "schema": "array",
          "description": ""
        },
        {
          "name": "smtpServer",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sslRequired",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssoSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionIdleTimeoutRememberMe",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionMaxLifespanRememberMe",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "supportedLocales",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userFederationMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userFederationProviders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userManagedAccessAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "users",
          "schema": "array",
          "description": ""
        },
        {
          "name": "verifyEmail",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "waitIncrementSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAcceptableAaguids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAttestationConveyancePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAuthenticatorAttachment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAvoidSameAuthenticatorRegister",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webAuthnPolicyCreateTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAcceptableAaguids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAttestationConveyancePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAuthenticatorAttachment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessCreateTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRequireResidentKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRpEntityName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRpId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessSignatureAlgorithms",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessUserVerificationRequirement",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRequireResidentKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRpEntityName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRpId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicySignatureAlgorithms",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyUserVerificationRequirement",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{id}/name",
      "method": "/{id}/nameGet",
      "httpMethod": "get",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}",
      "method": "/{realm}Delete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Delete the realm",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}",
      "method": "/{realm}Get",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get the top-level representation of the realm   It will not include nested information like User and Client representations.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}",
      "method": "/{realm}Put",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.",
      "parameters": [
        {
          "name": "accessCodeLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessCodeLifespanLogin",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessCodeLifespanUserAction",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessTokenLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accessTokenLifespanForImplicitFlow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "accountTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "actionTokenGeneratedByAdminLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "actionTokenGeneratedByUserLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "adminEventsDetailsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "adminEventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "adminTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authenticationFlows",
          "schema": "array",
          "description": ""
        },
        {
          "name": "authenticatorConfig",
          "schema": "array",
          "description": ""
        },
        {
          "name": "browserFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "browserSecurityHeaders",
          "schema": "object",
          "description": ""
        },
        {
          "name": "bruteForceProtected",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "clientAuthenticationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clientScopeMappings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "clientSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "clientSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "components",
          "schema": "object",
          "description": ""
        },
        {
          "name": "defaultDefaultClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultGroups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultLocale",
          "schema": "string",
          "description": ""
        },
        {
          "name": "defaultOptionalClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultSignatureAlgorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "directGrantFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "displayNameHtml",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dockerAuthenticationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "duplicateEmailsAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "editUsernameAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "emailTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabledEventTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "eventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "eventsExpiration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "eventsListeners",
          "schema": "array",
          "description": ""
        },
        {
          "name": "failureFactor",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "federatedUsers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "identityProviders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "internationalizationEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "keycloakVersion",
          "schema": "string",
          "description": ""
        },
        {
          "name": "loginTheme",
          "schema": "string",
          "description": ""
        },
        {
          "name": "loginWithEmailAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "maxDeltaTimeSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "maxFailureWaitSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "minimumQuickLoginWaitSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "offlineSessionMaxLifespanEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "otpPolicyAlgorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "otpPolicyDigits",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyInitialCounter",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyLookAheadWindow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyPeriod",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "otpPolicyType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "otpSupportedApplications",
          "schema": "array",
          "description": ""
        },
        {
          "name": "passwordPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "permanentLockout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "quickLoginCheckMilliSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "realm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "refreshTokenMaxReuse",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "registrationAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "registrationEmailAsUsername",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "registrationFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rememberMe",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "requiredActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "resetCredentialsFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resetPasswordAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "revokeRefreshToken",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "roles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "scopeMappings",
          "schema": "array",
          "description": ""
        },
        {
          "name": "smtpServer",
          "schema": "object",
          "description": ""
        },
        {
          "name": "sslRequired",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssoSessionIdleTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionIdleTimeoutRememberMe",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionMaxLifespan",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ssoSessionMaxLifespanRememberMe",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "supportedLocales",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userFederationMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userFederationProviders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userManagedAccessAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "users",
          "schema": "array",
          "description": ""
        },
        {
          "name": "verifyEmail",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "waitIncrementSeconds",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAcceptableAaguids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAttestationConveyancePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAuthenticatorAttachment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyAvoidSameAuthenticatorRegister",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webAuthnPolicyCreateTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAcceptableAaguids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAttestationConveyancePreference",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAuthenticatorAttachment",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessCreateTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRequireResidentKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRpEntityName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessRpId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessSignatureAlgorithms",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyPasswordlessUserVerificationRequirement",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRequireResidentKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRpEntityName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicyRpId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "webAuthnPolicySignatureAlgorithms",
          "schema": "array",
          "description": ""
        },
        {
          "name": "webAuthnPolicyUserVerificationRequirement",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/admin-events",
      "method": "/{realm}/adminEventsDelete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Delete all admin events",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/admin-events",
      "method": "/{realm}/adminEventsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get admin events   Returns all admin events, or filters events based on URL query parameters listed here",
      "parameters": [
        {
          "name": "authClient",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authIpAddress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authRealm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authUser",
          "schema": "string",
          "description": "user id"
        },
        {
          "name": "dateFrom",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dateTo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        },
        {
          "name": "operationTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "resourcePath",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resourceTypes",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/attack-detection/brute-force/users",
      "method": "/{realm}/attackDetection/bruteForce/usersDelete",
      "httpMethod": "delete",
      "tag": "Attack Detection",
      "typeScriptTag": "attackDetection",
      "description": "Clear any user login failures for all users   This can release temporary disabled users",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/attack-detection/brute-force/users/{userId}",
      "method": "/{realm}/attackDetection/bruteForce/users/{userId}Delete",
      "httpMethod": "delete",
      "tag": "Attack Detection",
      "typeScriptTag": "attackDetection",
      "description": "Clear any user login failures for the user   This can release temporary disabled user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/attack-detection/brute-force/users/{userId}",
      "method": "/{realm}/attackDetection/bruteForce/users/{userId}Get",
      "httpMethod": "get",
      "tag": "Attack Detection",
      "typeScriptTag": "attackDetection",
      "description": "Get status of a username in brute force detection",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/authenticator-providers",
      "method": "/{realm}/authentication/authenticatorProvidersGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authenticator providers   Returns a list of authenticator providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/client-authenticator-providers",
      "method": "/{realm}/authentication/clientAuthenticatorProvidersGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get client authenticator providers   Returns a list of client authenticator providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/config-description/{providerId}",
      "method": "/{realm}/authentication/configDescription/{providerId}Get",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authenticator provider’s configuration description",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/config/{id}",
      "method": "/{realm}/authentication/config/{id}Delete",
      "httpMethod": "delete",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Delete authenticator configuration",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/config/{id}",
      "method": "/{realm}/authentication/config/{id}Get",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authenticator configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/config/{id}",
      "method": "/{realm}/authentication/config/{id}Put",
      "httpMethod": "put",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Update authenticator configuration",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions",
      "method": "/{realm}/authentication/executionsPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Add new authentication execution",
      "parameters": [
        {
          "name": "authenticator",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticatorConfig",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticatorFlow",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "autheticatorFlow",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "flowId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parentFlow",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "requirement",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions/{executionId}",
      "method": "/{realm}/authentication/executions/{executionId}Delete",
      "httpMethod": "delete",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Delete execution",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions/{executionId}",
      "method": "/{realm}/authentication/executions/{executionId}Get",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get Single Execution",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions/{executionId}/config",
      "method": "/{realm}/authentication/executions/{executionId}/configPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Update execution with new configuration",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions/{executionId}/lower-priority",
      "method": "/{realm}/authentication/executions/{executionId}/lowerPriorityPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Lower execution’s priority",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/executions/{executionId}/raise-priority",
      "method": "/{realm}/authentication/executions/{executionId}/raisePriorityPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Raise execution’s priority",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows",
      "method": "/{realm}/authentication/flowsGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authentication flows   Returns a list of authentication flows.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/flows",
      "method": "/{realm}/authentication/flowsPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Create a new authentication flow",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticationExecutions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "builtIn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "topLevel",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{flowAlias}/copy",
      "method": "/{realm}/authentication/flows/{flowAlias}/copyPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{flowAlias}/executions",
      "method": "/{realm}/authentication/flows/{flowAlias}/executionsGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authentication executions for a flow",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{flowAlias}/executions",
      "method": "/{realm}/authentication/flows/{flowAlias}/executionsPut",
      "httpMethod": "put",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Update authentication executions of a flow",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticationConfig",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticationFlow",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "configurable",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "flowId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "index",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "level",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "requirement",
          "schema": "string",
          "description": ""
        },
        {
          "name": "requirementChoices",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{flowAlias}/executions/execution",
      "method": "/{realm}/authentication/flows/{flowAlias}/executions/executionPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Add new authentication execution to a flow",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{flowAlias}/executions/flow",
      "method": "/{realm}/authentication/flows/{flowAlias}/executions/flowPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Add new flow with new execution to existing flow",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{id}",
      "method": "/{realm}/authentication/flows/{id}Delete",
      "httpMethod": "delete",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Delete an authentication flow",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/flows/{id}",
      "method": "/{realm}/authentication/flows/{id}Get",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get authentication flow for id",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/flows/{id}",
      "method": "/{realm}/authentication/flows/{id}Put",
      "httpMethod": "put",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Update an authentication flow",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authenticationExecutions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "builtIn",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "topLevel",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/form-action-providers",
      "method": "/{realm}/authentication/formActionProvidersGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get form action providers   Returns a list of form action providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/form-providers",
      "method": "/{realm}/authentication/formProvidersGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get form providers   Returns a list of form providers.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/per-client-config-description",
      "method": "/{realm}/authentication/perClientConfigDescriptionGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get configuration descriptions for all clients",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/register-required-action",
      "method": "/{realm}/authentication/registerRequiredActionPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Register a new required actions",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/required-actions",
      "method": "/{realm}/authentication/requiredActionsGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get required actions   Returns a list of required actions.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/required-actions/{alias}",
      "method": "/{realm}/authentication/requiredActions/{alias}Delete",
      "httpMethod": "delete",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Delete required action",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/required-actions/{alias}",
      "method": "/{realm}/authentication/requiredActions/{alias}Get",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get required action for alias",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/authentication/required-actions/{alias}",
      "method": "/{realm}/authentication/requiredActions/{alias}Put",
      "httpMethod": "put",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Update required action",
      "parameters": [
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "defaultAction",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/required-actions/{alias}/lower-priority",
      "method": "/{realm}/authentication/requiredActions/{alias}/lowerPriorityPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Lower required action’s priority",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/required-actions/{alias}/raise-priority",
      "method": "/{realm}/authentication/requiredActions/{alias}/raisePriorityPost",
      "httpMethod": "post",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Raise required action’s priority",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/authentication/unregistered-required-actions",
      "method": "/{realm}/authentication/unregisteredRequiredActionsGet",
      "httpMethod": "get",
      "tag": "Authentication Management",
      "typeScriptTag": "authenticationManagement",
      "description": "Get unregistered required actions   Returns a list of unregistered required actions.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clear-keys-cache",
      "method": "/{realm}/clearKeysCachePost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Clear cache of external public keys (Public keys of clients or Identity providers)",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clear-realm-cache",
      "method": "/{realm}/clearRealmCachePost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Clear realm cache",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clear-user-cache",
      "method": "/{realm}/clearUserCachePost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Clear user cache",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-description-converter",
      "method": "/{realm}/clientDescriptionConverterPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Base path for importing clients under this realm.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-registration-policy/providers",
      "method": "/{realm}/clientRegistrationPolicy/providersGet",
      "httpMethod": "get",
      "tag": "Client Registration Policy",
      "typeScriptTag": "clientRegistrationPolicy",
      "description": "Base path for retrieve providers with the configProperties properly filled",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes",
      "method": "/{realm}/clientScopesGet",
      "httpMethod": "get",
      "tag": "Client Scopes",
      "typeScriptTag": "clientScopes",
      "description": "Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes",
      "method": "/{realm}/clientScopesPost",
      "httpMethod": "post",
      "tag": "Client Scopes",
      "typeScriptTag": "clientScopes",
      "description": "Create a new client scope   Client Scope’s name must be unique!",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clientScopes/{id1}/protocolMappers/models/{id2}Delete",
      "httpMethod": "delete",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Delete the mapper",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clientScopes/{id1}/protocolMappers/models/{id2}Get",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mapper by id",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clientScopes/{id1}/protocolMappers/models/{id2}Put",
      "httpMethod": "put",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Update the mapper",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMapper",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}",
      "method": "/{realm}/clientScopes/{id}Delete",
      "httpMethod": "delete",
      "tag": "Client Scopes",
      "typeScriptTag": "clientScopes",
      "description": "Delete the client scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}",
      "method": "/{realm}/clientScopes/{id}Get",
      "httpMethod": "get",
      "tag": "Client Scopes",
      "typeScriptTag": "clientScopes",
      "description": "Get representation of the client scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}",
      "method": "/{realm}/clientScopes/{id}Put",
      "httpMethod": "put",
      "tag": "Client Scopes",
      "typeScriptTag": "clientScopes",
      "description": "Update the client scope",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/protocol-mappers/add-models",
      "method": "/{realm}/clientScopes/{id}/protocolMappers/addModelsPost",
      "httpMethod": "post",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Create multiple mappers",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/protocol-mappers/models",
      "method": "/{realm}/clientScopes/{id}/protocolMappers/modelsGet",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mappers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/protocol-mappers/models",
      "method": "/{realm}/clientScopes/{id}/protocolMappers/modelsPost",
      "httpMethod": "post",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Create a mapper",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMapper",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}",
      "method": "/{realm}/clientScopes/{id}/protocolMappers/protocol/{protocol}Get",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mappers by name for a specific protocol",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings",
      "method": "/{realm}/clientScopes/{id}/scopeMappingsGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get all scope mappings for the client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/clients/{client}Delete",
      "httpMethod": "delete",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Remove client-level roles from the client’s scope.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get the roles associated with a client’s scope   Returns roles for the client.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/clients/{client}Post",
      "httpMethod": "post",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Add client-level roles to the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/clients/{client}/availableGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "The available client-level roles   Returns the roles for the client that can be associated with the client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/clients/{client}/compositeGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get effective client roles   Returns the roles for the client that are associated with the client’s scope.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/realm",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/realmDelete",
      "httpMethod": "delete",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Remove a set of realm-level roles from the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/realm",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/realmGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get realm-level roles associated with the client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/realm",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/realmPost",
      "httpMethod": "post",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Add a set of realm-level roles to the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/realm/available",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/realm/availableGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get realm-level roles that are available to attach to this client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-scopes/{id}/scope-mappings/realm/composite",
      "method": "/{realm}/clientScopes/{id}/scopeMappings/realm/compositeGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/client-session-stats",
      "method": "/{realm}/clientSessionStatsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get client session stats   Returns a JSON map.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients",
      "method": "/{realm}/clientsGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get clients belonging to the realm   Returns a list of clients belonging to the realm",
      "parameters": [
        {
          "name": "clientId",
          "schema": "string",
          "description": "filter by clientId"
        },
        {
          "name": "first",
          "schema": "integer",
          "description": "the first result"
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "the max results to return"
        },
        {
          "name": "search",
          "schema": "boolean",
          "description": "whether this is a search query or a getClientById query"
        },
        {
          "name": "viewableOnly",
          "schema": "boolean",
          "description": "filter clients that cannot be viewed in full by admin"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients",
      "method": "/{realm}/clientsPost",
      "httpMethod": "post",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Create a new client   Client’s client_id must be unique!",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "adminUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "alwaysDisplayInConsole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authenticationFlowBindingOverrides",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authorizationServicesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorizationSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "baseUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bearerOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "clientAuthenticatorType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "consentRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "defaultClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "directAccessGrantsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "frontchannelLogout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "fullScopeAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "implicitFlowEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nodeReRegistrationTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "optionalClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "publicClient",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "redirectUris",
          "schema": "array",
          "description": ""
        },
        {
          "name": "registeredNodes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "registrationAccessToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rootUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serviceAccountsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "standardFlowEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "surrogateAuthRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webOrigins",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients-initial-access",
      "method": "/{realm}/clientsInitialAccessGet",
      "httpMethod": "get",
      "tag": "Client Initial Access",
      "typeScriptTag": "clientInitialAccess",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients-initial-access",
      "method": "/{realm}/clientsInitialAccessPost",
      "httpMethod": "post",
      "tag": "Client Initial Access",
      "typeScriptTag": "clientInitialAccess",
      "description": "Create a new initial access token.",
      "parameters": [
        {
          "name": "count",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "expiration",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients-initial-access/{id}",
      "method": "/{realm}/clientsInitialAccess/{id}Delete",
      "httpMethod": "delete",
      "tag": "Client Initial Access",
      "typeScriptTag": "clientInitialAccess",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clients/{id1}/protocolMappers/models/{id2}Delete",
      "httpMethod": "delete",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Delete the mapper",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clients/{id1}/protocolMappers/models/{id2}Get",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mapper by id",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      "method": "/{realm}/clients/{id1}/protocolMappers/models/{id2}Put",
      "httpMethod": "put",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Update the mapper",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMapper",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}",
      "method": "/{realm}/clients/{id}Delete",
      "httpMethod": "delete",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Delete the client",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}",
      "method": "/{realm}/clients/{id}Get",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get representation of the client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}",
      "method": "/{realm}/clients/{id}Put",
      "httpMethod": "put",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Update the client",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "adminUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "alwaysDisplayInConsole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authenticationFlowBindingOverrides",
          "schema": "object",
          "description": ""
        },
        {
          "name": "authorizationServicesEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "authorizationSettings",
          "schema": "object",
          "description": ""
        },
        {
          "name": "baseUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bearerOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "clientAuthenticatorType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "clientId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "consentRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "defaultClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "defaultRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "directAccessGrantsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "frontchannelLogout",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "fullScopeAllowed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "implicitFlowEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nodeReRegistrationTimeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "optionalClientScopes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMappers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "publicClient",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "redirectUris",
          "schema": "array",
          "description": ""
        },
        {
          "name": "registeredNodes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "registrationAccessToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rootUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serviceAccountsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "standardFlowEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "surrogateAuthRequired",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "webOrigins",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}",
      "method": "/{realm}/clients/{id}/certificates/{attr}Get",
      "httpMethod": "get",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Get key info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}/download",
      "method": "/{realm}/clients/{id}/certificates/{attr}/downloadPost",
      "httpMethod": "post",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Get a keystore file for the client, containing private key and public certificate",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "description": ""
        },
        {
          "name": "keyAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "keyPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmCertificate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "storePassword",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}/generate",
      "method": "/{realm}/clients/{id}/certificates/{attr}/generatePost",
      "httpMethod": "post",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Generate a new certificate with new key pair",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}/generate-and-download",
      "method": "/{realm}/clients/{id}/certificates/{attr}/generateAndDownloadPost",
      "httpMethod": "post",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "description": ""
        },
        {
          "name": "keyAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "keyPassword",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmCertificate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "storePassword",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}/upload",
      "method": "/{realm}/clients/{id}/certificates/{attr}/uploadPost",
      "httpMethod": "post",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Upload certificate and eventually private key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/certificates/{attr}/upload-certificate",
      "method": "/{realm}/clients/{id}/certificates/{attr}/uploadCertificatePost",
      "httpMethod": "post",
      "tag": "Client Attribute Certificate",
      "typeScriptTag": "clientAttributeCertificate",
      "description": "Upload only certificate, not private key",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/client-secret",
      "method": "/{realm}/clients/{id}/clientSecretGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get the client secret",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/client-secret",
      "method": "/{realm}/clients/{id}/clientSecretPost",
      "httpMethod": "post",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Generate a new secret for the client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/default-client-scopes",
      "method": "/{realm}/clients/{id}/defaultClientScopesGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get default client scopes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}",
      "method": "/{realm}/clients/{id}/defaultClientScopes/{clientScopeId}Delete",
      "httpMethod": "delete",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}",
      "method": "/{realm}/clients/{id}/defaultClientScopes/{clientScopeId}Put",
      "httpMethod": "put",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token",
      "method": "/{realm}/clients/{id}/evaluateScopes/generateExampleAccessTokenGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Create JSON with payload of example access token",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers",
      "method": "/{realm}/clients/{id}/evaluateScopes/protocolMappersGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Return list of all protocol mappers, which will be used when generating tokens issued for particular client.",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted",
      "method": "/{realm}/clients/{id}/evaluateScopes/scopeMappings/{roleContainerId}/grantedGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted",
      "method": "/{realm}/clients/{id}/evaluateScopes/scopeMappings/{roleContainerId}/notGrantedGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.",
      "parameters": [
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/installation/providers/{providerId}",
      "method": "/{realm}/clients/{id}/installation/providers/{providerId}Get",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/management/permissions",
      "method": "/{realm}/clients/{id}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/management/permissions",
      "method": "/{realm}/clients/{id}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/nodes",
      "method": "/{realm}/clients/{id}/nodesPost",
      "httpMethod": "post",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/nodes/{node}",
      "method": "/{realm}/clients/{id}/nodes/{node}Delete",
      "httpMethod": "delete",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Unregister a cluster node from the client",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/offline-session-count",
      "method": "/{realm}/clients/{id}/offlineSessionCountGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/offline-sessions",
      "method": "/{realm}/clients/{id}/offlineSessionsGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get offline sessions for client   Returns a list of offline user sessions associated with this client",
      "parameters": [
        {
          "name": "first",
          "schema": "integer",
          "description": "Paging offset"
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/optional-client-scopes",
      "method": "/{realm}/clients/{id}/optionalClientScopesGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get optional client scopes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}",
      "method": "/{realm}/clients/{id}/optionalClientScopes/{clientScopeId}Delete",
      "httpMethod": "delete",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}",
      "method": "/{realm}/clients/{id}/optionalClientScopes/{clientScopeId}Put",
      "httpMethod": "put",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/protocol-mappers/add-models",
      "method": "/{realm}/clients/{id}/protocolMappers/addModelsPost",
      "httpMethod": "post",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Create multiple mappers",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/protocol-mappers/models",
      "method": "/{realm}/clients/{id}/protocolMappers/modelsGet",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mappers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/protocol-mappers/models",
      "method": "/{realm}/clients/{id}/protocolMappers/modelsPost",
      "httpMethod": "post",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Create a mapper",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "protocolMapper",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}",
      "method": "/{realm}/clients/{id}/protocolMappers/protocol/{protocol}Get",
      "httpMethod": "get",
      "tag": "Protocol Mappers",
      "typeScriptTag": "protocolMappers",
      "description": "Get mappers by name for a specific protocol",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/push-revocation",
      "method": "/{realm}/clients/{id}/pushRevocationPost",
      "httpMethod": "post",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/registration-access-token",
      "method": "/{realm}/clients/{id}/registrationAccessTokenPost",
      "httpMethod": "post",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Generate a new registration access token for the client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles",
      "method": "/{realm}/clients/{id}/rolesGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get all roles for the realm or client",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "search",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles",
      "method": "/{realm}/clients/{id}/rolesPost",
      "httpMethod": "post",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Create a new role for the realm or client",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composite",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "containerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}",
      "method": "/{realm}/clients/{id}/roles/{roleName}Delete",
      "httpMethod": "delete",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Delete a role by name",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}",
      "method": "/{realm}/clients/{id}/roles/{roleName}Get",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get a role by name",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}",
      "method": "/{realm}/clients/{id}/roles/{roleName}Put",
      "httpMethod": "put",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Update a role by name",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composite",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "containerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/composites",
      "method": "/{realm}/clients/{id}/roles/{roleName}/compositesDelete",
      "httpMethod": "delete",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Remove roles from the role’s composite",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/composites",
      "method": "/{realm}/clients/{id}/roles/{roleName}/compositesGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get composites of the role",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/composites",
      "method": "/{realm}/clients/{id}/roles/{roleName}/compositesPost",
      "httpMethod": "post",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Add a composite to the role",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}",
      "method": "/{realm}/clients/{id}/roles/{roleName}/composites/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "An app-level roles for the specified app for the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/composites/realm",
      "method": "/{realm}/clients/{id}/roles/{roleName}/composites/realmGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get realm-level roles of the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/groups",
      "method": "/{realm}/clients/{id}/roles/{roleName}/groupsGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return List of Groups that have the specified role name",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": "if false, return a full representation of the GroupRepresentation objects"
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/management/permissions",
      "method": "/{realm}/clients/{id}/roles/{roleName}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/management/permissions",
      "method": "/{realm}/clients/{id}/roles/{roleName}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/roles/{role-name}/users",
      "method": "/{realm}/clients/{id}/roles/{roleName}/usersGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return List of Users that have the specified role name",
      "parameters": [
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings",
      "method": "/{realm}/clients/{id}/scopeMappingsGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get all scope mappings for the client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clients/{id}/scopeMappings/clients/{client}Delete",
      "httpMethod": "delete",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Remove client-level roles from the client’s scope.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clients/{id}/scopeMappings/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get the roles associated with a client’s scope   Returns roles for the client.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      "method": "/{realm}/clients/{id}/scopeMappings/clients/{client}Post",
      "httpMethod": "post",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Add client-level roles to the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/clients/{client}/available",
      "method": "/{realm}/clients/{id}/scopeMappings/clients/{client}/availableGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "The available client-level roles   Returns the roles for the client that can be associated with the client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite",
      "method": "/{realm}/clients/{id}/scopeMappings/clients/{client}/compositeGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get effective client roles   Returns the roles for the client that are associated with the client’s scope.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/realm",
      "method": "/{realm}/clients/{id}/scopeMappings/realmDelete",
      "httpMethod": "delete",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Remove a set of realm-level roles from the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/realm",
      "method": "/{realm}/clients/{id}/scopeMappings/realmGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get realm-level roles associated with the client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/realm",
      "method": "/{realm}/clients/{id}/scopeMappings/realmPost",
      "httpMethod": "post",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Add a set of realm-level roles to the client’s scope",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/realm/available",
      "method": "/{realm}/clients/{id}/scopeMappings/realm/availableGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get realm-level roles that are available to attach to this client’s scope",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/scope-mappings/realm/composite",
      "method": "/{realm}/clients/{id}/scopeMappings/realm/compositeGet",
      "httpMethod": "get",
      "tag": "Scope Mappings",
      "typeScriptTag": "scopeMappings",
      "description": "Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/service-account-user",
      "method": "/{realm}/clients/{id}/serviceAccountUserGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get a user dedicated to the service account",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/session-count",
      "method": "/{realm}/clients/{id}/sessionCountGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/test-nodes-available",
      "method": "/{realm}/clients/{id}/testNodesAvailableGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/clients/{id}/user-sessions",
      "method": "/{realm}/clients/{id}/userSessionsGet",
      "httpMethod": "get",
      "tag": "Clients",
      "typeScriptTag": "clients",
      "description": "Get user sessions for client   Returns a list of user sessions associated with this client",
      "parameters": [
        {
          "name": "first",
          "schema": "integer",
          "description": "Paging offset"
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/components",
      "method": "/{realm}/componentsGet",
      "httpMethod": "get",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parent",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/components",
      "method": "/{realm}/componentsPost",
      "httpMethod": "post",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/components/{id}",
      "method": "/{realm}/components/{id}Delete",
      "httpMethod": "delete",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/components/{id}",
      "method": "/{realm}/components/{id}Get",
      "httpMethod": "get",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/components/{id}",
      "method": "/{realm}/components/{id}Put",
      "httpMethod": "put",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "parentId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerType",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subType",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/components/{id}/sub-component-types",
      "method": "/{realm}/components/{id}/subComponentTypesGet",
      "httpMethod": "get",
      "tag": "Component",
      "typeScriptTag": "component",
      "description": "List of subcomponent types that are available to configure for a particular parent component.",
      "parameters": [
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/credential-registrators",
      "method": "/{realm}/credentialRegistratorsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/default-default-client-scopes",
      "method": "/{realm}/defaultDefaultClientScopesGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get realm default client scopes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/default-default-client-scopes/{clientScopeId}",
      "method": "/{realm}/defaultDefaultClientScopes/{clientScopeId}Delete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/default-default-client-scopes/{clientScopeId}",
      "method": "/{realm}/defaultDefaultClientScopes/{clientScopeId}Put",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/default-groups",
      "method": "/{realm}/defaultGroupsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get group hierarchy.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/default-groups/{groupId}",
      "method": "/{realm}/defaultGroups/{groupId}Delete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/default-groups/{groupId}",
      "method": "/{realm}/defaultGroups/{groupId}Put",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/default-optional-client-scopes",
      "method": "/{realm}/defaultOptionalClientScopesGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get realm optional client scopes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/default-optional-client-scopes/{clientScopeId}",
      "method": "/{realm}/defaultOptionalClientScopes/{clientScopeId}Delete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/default-optional-client-scopes/{clientScopeId}",
      "method": "/{realm}/defaultOptionalClientScopes/{clientScopeId}Put",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/events",
      "method": "/{realm}/eventsDelete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Delete all events",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/events",
      "method": "/{realm}/eventsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get events   Returns all events, or filters them based on URL query parameters listed here",
      "parameters": [
        {
          "name": "client",
          "schema": "string",
          "description": "App or oauth client name"
        },
        {
          "name": "dateFrom",
          "schema": "string",
          "description": "From date"
        },
        {
          "name": "dateTo",
          "schema": "string",
          "description": "To date"
        },
        {
          "name": "first",
          "schema": "integer",
          "description": "Paging offset"
        },
        {
          "name": "ipAddress",
          "schema": "string",
          "description": "IP address"
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        },
        {
          "name": "type",
          "schema": "array",
          "description": "The types of events to return"
        },
        {
          "name": "user",
          "schema": "string",
          "description": "User id"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/events/config",
      "method": "/{realm}/events/configGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Get the events provider configuration   Returns JSON object with events provider configuration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/events/config",
      "method": "/{realm}/events/configPut",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Update the events provider   Change the events provider and/or its configuration",
      "parameters": [
        {
          "name": "adminEventsDetailsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "adminEventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabledEventTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "eventsEnabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "eventsExpiration",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "eventsListeners",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/group-by-path/{path}",
      "method": "/{realm}/groupByPath/{path}Get",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups",
      "method": "/{realm}/groupsGet",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Get group hierarchy.",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "search",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups",
      "method": "/{realm}/groupsPost",
      "httpMethod": "post",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "create or add a top level realm groupSet or create child.",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRoles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subGroups",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/groups/count",
      "method": "/{realm}/groups/countGet",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Returns the groups counts.",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "description": ""
        },
        {
          "name": "top",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}",
      "method": "/{realm}/groups/{id}Delete",
      "httpMethod": "delete",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}",
      "method": "/{realm}/groups/{id}Get",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}",
      "method": "/{realm}/groups/{id}Put",
      "httpMethod": "put",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Update group, ignores subgroups.",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRoles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subGroups",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/children",
      "method": "/{realm}/groups/{id}/childrenPost",
      "httpMethod": "post",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Set or create child.",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRoles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "subGroups",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/management/permissions",
      "method": "/{realm}/groups/{id}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/management/permissions",
      "method": "/{realm}/groups/{id}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/members",
      "method": "/{realm}/groups/{id}/membersGet",
      "httpMethod": "get",
      "tag": "Groups",
      "typeScriptTag": "groups",
      "description": "Get users   Returns a list of users, filtered according to query parameters",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": "Only return basic information (only guaranteed to return id, username, created, first and last name,\n email, enabled state, email verification state, federation link, and access.\n Note that it means that namely user attributes, required actions, and not before are not returned.)"
        },
        {
          "name": "first",
          "schema": "integer",
          "description": "Pagination offset"
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings",
      "method": "/{realm}/groups/{id}/roleMappingsGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get role mappings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/groups/{id}/roleMappings/clients/{client}Delete",
      "httpMethod": "delete",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Delete client-level roles from user role mapping",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/groups/{id}/roleMappings/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get client-level role mappings for the user, and the app",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/groups/{id}/roleMappings/clients/{client}Post",
      "httpMethod": "post",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Add client-level roles to the user role mapping",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/clients/{client}/available",
      "method": "/{realm}/groups/{id}/roleMappings/clients/{client}/availableGet",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get available client-level roles that can be mapped to the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/clients/{client}/composite",
      "method": "/{realm}/groups/{id}/roleMappings/clients/{client}/compositeGet",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get effective client-level role mappings   This recurses any composite roles",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/realm",
      "method": "/{realm}/groups/{id}/roleMappings/realmDelete",
      "httpMethod": "delete",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Delete realm-level role mappings",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/realm",
      "method": "/{realm}/groups/{id}/roleMappings/realmGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get realm-level role mappings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/realm",
      "method": "/{realm}/groups/{id}/roleMappings/realmPost",
      "httpMethod": "post",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Add realm-level role mappings to the user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/realm/available",
      "method": "/{realm}/groups/{id}/roleMappings/realm/availableGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get realm-level roles that can be mapped",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/groups/{id}/role-mappings/realm/composite",
      "method": "/{realm}/groups/{id}/roleMappings/realm/compositeGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get effective realm-level role mappings   This will recurse all composite roles to get the result.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/import-config",
      "method": "/{realm}/identityProvider/importConfigPost",
      "httpMethod": "post",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Import identity provider from uploaded JSON file",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances",
      "method": "/{realm}/identityProvider/instancesGet",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get identity providers",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances",
      "method": "/{realm}/identityProvider/instancesPost",
      "httpMethod": "post",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Create a new identity provider",
      "parameters": [
        {
          "name": "addReadTokenRoleOnCreate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "firstBrokerLoginFlowAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "internalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "postBrokerLoginFlowAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "storeToken",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "trustEmail",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}",
      "method": "/{realm}/identityProvider/instances/{alias}Delete",
      "httpMethod": "delete",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Delete the identity provider",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}",
      "method": "/{realm}/identityProvider/instances/{alias}Get",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get the identity provider",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}",
      "method": "/{realm}/identityProvider/instances/{alias}Put",
      "httpMethod": "put",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Update the identity provider",
      "parameters": [
        {
          "name": "addReadTokenRoleOnCreate",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "alias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "displayName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "firstBrokerLoginFlowAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "internalId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linkOnly",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "postBrokerLoginFlowAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "storeToken",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "trustEmail",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/export",
      "method": "/{realm}/identityProvider/instances/{alias}/exportGet",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Export public broker configuration for identity provider",
      "parameters": [
        {
          "name": "format",
          "schema": "string",
          "description": "Format to use"
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/management/permissions",
      "method": "/{realm}/identityProvider/instances/{alias}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/management/permissions",
      "method": "/{realm}/identityProvider/instances/{alias}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Return object stating whether client Authorization permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mapper-types",
      "method": "/{realm}/identityProvider/instances/{alias}/mapperTypesGet",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get mapper types for identity provider",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mappers",
      "method": "/{realm}/identityProvider/instances/{alias}/mappersGet",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get mappers for identity provider",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mappers",
      "method": "/{realm}/identityProvider/instances/{alias}/mappersPost",
      "httpMethod": "post",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Add a mapper to identity provider",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderMapper",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      "method": "/{realm}/identityProvider/instances/{alias}/mappers/{id}Delete",
      "httpMethod": "delete",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Delete a mapper for the identity provider",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      "method": "/{realm}/identityProvider/instances/{alias}/mappers/{id}Get",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get mapper by id for the identity provider",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      "method": "/{realm}/identityProvider/instances/{alias}/mappers/{id}Put",
      "httpMethod": "put",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Update a mapper for the identity provider",
      "parameters": [
        {
          "name": "config",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderAlias",
          "schema": "string",
          "description": ""
        },
        {
          "name": "identityProviderMapper",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/identity-provider/providers/{provider_id}",
      "method": "/{realm}/identityProvider/providers/{providerId}Get",
      "httpMethod": "get",
      "tag": "Identity Providers",
      "typeScriptTag": "identityProviders",
      "description": "Get identity providers",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/keys",
      "method": "/{realm}/keysGet",
      "httpMethod": "get",
      "tag": "Key",
      "typeScriptTag": "key",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/logout-all",
      "method": "/{realm}/logoutAllPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Removes all user sessions.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/partial-export",
      "method": "/{realm}/partialExportPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Partial export of existing realm into a JSON file.",
      "parameters": [
        {
          "name": "exportClients",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "exportGroupsAndRoles",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/partialImport",
      "method": "/{realm}/partialImportPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Partial import from a JSON file to an existing realm.",
      "parameters": [
        {
          "name": "clients",
          "schema": "array",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "identityProviders",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ifResourceExists",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "roles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "users",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/push-revocation",
      "method": "/{realm}/pushRevocationPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Push the realm’s revocation policy to any client that has an admin url associated with it.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles",
      "method": "/{realm}/rolesGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get all roles for the realm or client",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "search",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles",
      "method": "/{realm}/rolesPost",
      "httpMethod": "post",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Create a new role for the realm or client",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composite",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "containerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}",
      "method": "/{realm}/rolesById/{roleId}Delete",
      "httpMethod": "delete",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Delete the role",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}",
      "method": "/{realm}/rolesById/{roleId}Get",
      "httpMethod": "get",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Get a specific role’s representation",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}",
      "method": "/{realm}/rolesById/{roleId}Put",
      "httpMethod": "put",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Update the role",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composite",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "containerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/composites",
      "method": "/{realm}/rolesById/{roleId}/compositesDelete",
      "httpMethod": "delete",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Remove a set of roles from the role’s composite",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/composites",
      "method": "/{realm}/rolesById/{roleId}/compositesGet",
      "httpMethod": "get",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Get role’s children   Returns a set of role’s children provided the role is a composite.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/composites",
      "method": "/{realm}/rolesById/{roleId}/compositesPost",
      "httpMethod": "post",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Make the role a composite role by associating some child roles",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/composites/clients/{client}",
      "method": "/{realm}/rolesById/{roleId}/composites/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Get client-level roles for the client that are in the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/composites/realm",
      "method": "/{realm}/rolesById/{roleId}/composites/realmGet",
      "httpMethod": "get",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Get realm-level roles that are in the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/management/permissions",
      "method": "/{realm}/rolesById/{roleId}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles-by-id/{role-id}/management/permissions",
      "method": "/{realm}/rolesById/{roleId}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Roles (by ID)",
      "typeScriptTag": "roles (byId)",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}",
      "method": "/{realm}/roles/{roleName}Delete",
      "httpMethod": "delete",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Delete a role by name",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles/{role-name}",
      "method": "/{realm}/roles/{roleName}Get",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get a role by name",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}",
      "method": "/{realm}/roles/{roleName}Put",
      "httpMethod": "put",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Update a role by name",
      "parameters": [
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientRole",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composite",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "composites",
          "schema": "object",
          "description": ""
        },
        {
          "name": "containerId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/roles/{role-name}/composites",
      "method": "/{realm}/roles/{roleName}/compositesDelete",
      "httpMethod": "delete",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Remove roles from the role’s composite",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles/{role-name}/composites",
      "method": "/{realm}/roles/{roleName}/compositesGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get composites of the role",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/composites",
      "method": "/{realm}/roles/{roleName}/compositesPost",
      "httpMethod": "post",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Add a composite to the role",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/roles/{role-name}/composites/clients/{client}",
      "method": "/{realm}/roles/{roleName}/composites/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "An app-level roles for the specified app for the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/composites/realm",
      "method": "/{realm}/roles/{roleName}/composites/realmGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Get realm-level roles of the role’s composite",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/groups",
      "method": "/{realm}/roles/{roleName}/groupsGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return List of Groups that have the specified role name",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": "if false, return a full representation of the GroupRepresentation objects"
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/management/permissions",
      "method": "/{realm}/roles/{roleName}/management/permissionsGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/management/permissions",
      "method": "/{realm}/roles/{roleName}/management/permissionsPut",
      "httpMethod": "put",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return object stating whether role Authoirzation permissions have been initialized or not and a reference",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/roles/{role-name}/users",
      "method": "/{realm}/roles/{roleName}/usersGet",
      "httpMethod": "get",
      "tag": "Roles",
      "typeScriptTag": "roles",
      "description": "Return List of Users that have the specified role name",
      "parameters": [
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/sessions/{session}",
      "method": "/{realm}/sessions/{session}Delete",
      "httpMethod": "delete",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Remove a specific user session.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/testLDAPConnection",
      "method": "/{realm}/testLdapConnectionPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "Test LDAP connection",
      "parameters": [
        {
          "name": "action",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bindCredential",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bindDn",
          "schema": "string",
          "description": ""
        },
        {
          "name": "componentId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "connectionTimeout",
          "schema": "string",
          "description": ""
        },
        {
          "name": "connectionUrl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "startTls",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useTruststoreSpi",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/testSMTPConnection",
      "method": "/{realm}/testSmtpConnectionPost",
      "httpMethod": "post",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/user-storage/{id}/name",
      "method": "/{realm}/userStorage/{id}/nameGet",
      "httpMethod": "get",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/user-storage/{id}/remove-imported-users",
      "method": "/{realm}/userStorage/{id}/removeImportedUsersPost",
      "httpMethod": "post",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Remove imported users",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/user-storage/{id}/sync",
      "method": "/{realm}/userStorage/{id}/syncPost",
      "httpMethod": "post",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Trigger sync of users   Action can be \"triggerFullSync\" or \"triggerChangedUsersSync\"",
      "parameters": [
        {
          "name": "action",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/user-storage/{id}/unlink-users",
      "method": "/{realm}/userStorage/{id}/unlinkUsersPost",
      "httpMethod": "post",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Unlink imported users from a storage provider",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/user-storage/{parentId}/mappers/{id}/sync",
      "method": "/{realm}/userStorage/{parentId}/mappers/{id}/syncPost",
      "httpMethod": "post",
      "tag": "User Storage Provider",
      "typeScriptTag": "userStorageProvider",
      "description": "Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is \"fedToKeycloak\" or \"keycloakToFed\"",
      "parameters": [
        {
          "name": "direction",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users",
      "method": "/{realm}/usersGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get users   Returns a list of users, filtered according to query parameters",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": "Maximum results size (defaults to 100)"
        },
        {
          "name": "search",
          "schema": "string",
          "description": "A String contained in username, first or last name, or email"
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users",
      "method": "/{realm}/usersPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Create a new user   Username must be unique.",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientConsents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "clientRoles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdTimestamp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "credentials",
          "schema": "array",
          "description": ""
        },
        {
          "name": "disableableCredentialTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "emailVerified",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "federatedIdentities",
          "schema": "array",
          "description": ""
        },
        {
          "name": "federationLink",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "requiredActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serviceAccountClientId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users-management-permissions",
      "method": "/{realm}/usersManagementPermissionsGet",
      "httpMethod": "get",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users-management-permissions",
      "method": "/{realm}/usersManagementPermissionsPut",
      "httpMethod": "put",
      "tag": "Realms Admin",
      "typeScriptTag": "realmsAdmin",
      "description": "",
      "parameters": [
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "resource",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopePermissions",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/count",
      "method": "/{realm}/users/countGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Returns the number of users that match the given criteria.",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": "email filter"
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": "first name filter"
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": "last name filter"
        },
        {
          "name": "search",
          "schema": "string",
          "description": "arbitrary search string for all the fields below"
        },
        {
          "name": "username",
          "schema": "string",
          "description": "username filter"
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}",
      "method": "/{realm}/users/{id}Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Delete the user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}",
      "method": "/{realm}/users/{id}Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get representation of the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}",
      "method": "/{realm}/users/{id}Put",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Update the user",
      "parameters": [
        {
          "name": "access",
          "schema": "object",
          "description": ""
        },
        {
          "name": "attributes",
          "schema": "object",
          "description": ""
        },
        {
          "name": "clientConsents",
          "schema": "array",
          "description": ""
        },
        {
          "name": "clientRoles",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdTimestamp",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "credentials",
          "schema": "array",
          "description": ""
        },
        {
          "name": "disableableCredentialTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "emailVerified",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "federatedIdentities",
          "schema": "array",
          "description": ""
        },
        {
          "name": "federationLink",
          "schema": "string",
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "groups",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notBefore",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "origin",
          "schema": "string",
          "description": ""
        },
        {
          "name": "realmRoles",
          "schema": "array",
          "description": ""
        },
        {
          "name": "requiredActions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "self",
          "schema": "string",
          "description": ""
        },
        {
          "name": "serviceAccountClientId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/configured-user-storage-credential-types",
      "method": "/{realm}/users/{id}/configuredUserStorageCredentialTypesGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Return credential types, which are provided by the user storage where user is stored.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/consents",
      "method": "/{realm}/users/{id}/consentsGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get consents granted by the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/consents/{client}",
      "method": "/{realm}/users/{id}/consents/{client}Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Revoke consent and offline tokens for particular client from user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/credentials",
      "method": "/{realm}/users/{id}/credentialsGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/credentials/{credentialId}",
      "method": "/{realm}/users/{id}/credentials/{credentialId}Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Remove a credential for a user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}",
      "method": "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}Post",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Move a credential to a position behind another credential",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst",
      "method": "/{realm}/users/{id}/credentials/{credentialId}/moveToFirstPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Move a credential to a first position in the credentials list of the user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/credentials/{credentialId}/userLabel",
      "method": "/{realm}/users/{id}/credentials/{credentialId}/userLabelPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Update a credential label for a user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/disable-credential-types",
      "method": "/{realm}/users/{id}/disableCredentialTypesPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Disable all credentials for a user of a specific type",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/execute-actions-email",
      "method": "/{realm}/users/{id}/executeActionsEmailPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.",
      "parameters": [
        {
          "name": "clientId",
          "schema": "string",
          "description": "Client id"
        },
        {
          "name": "lifespan",
          "schema": "integer",
          "description": "Number of seconds after which the generated token expires"
        },
        {
          "name": "redirectUri",
          "schema": "string",
          "description": "Redirect uri"
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/federated-identity",
      "method": "/{realm}/users/{id}/federatedIdentityGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get social logins associated with the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/federated-identity/{provider}",
      "method": "/{realm}/users/{id}/federatedIdentity/{provider}Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Remove a social login provider from user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/federated-identity/{provider}",
      "method": "/{realm}/users/{id}/federatedIdentity/{provider}Post",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Add a social login provider to the user",
      "parameters": [
        {
          "name": "identityProvider",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userName",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/groups",
      "method": "/{realm}/users/{id}/groupsGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [
        {
          "name": "briefRepresentation",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "first",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "max",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "search",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/groups/count",
      "method": "/{realm}/users/{id}/groups/countGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [
        {
          "name": "search",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/groups/{groupId}",
      "method": "/{realm}/users/{id}/groups/{groupId}Delete",
      "httpMethod": "delete",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/groups/{groupId}",
      "method": "/{realm}/users/{id}/groups/{groupId}Put",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/impersonation",
      "method": "/{realm}/users/{id}/impersonationPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Impersonate the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/logout",
      "method": "/{realm}/users/{id}/logoutPost",
      "httpMethod": "post",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/offline-sessions/{clientId}",
      "method": "/{realm}/users/{id}/offlineSessions/{clientId}Get",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get offline sessions associated with the user and client",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/reset-password",
      "method": "/{realm}/users/{id}/resetPasswordPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Set up a new password for the user.",
      "parameters": [
        {
          "name": "createdDate",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "credentialData",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "secretData",
          "schema": "string",
          "description": ""
        },
        {
          "name": "temporary",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userLabel",
          "schema": "string",
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/role-mappings",
      "method": "/{realm}/users/{id}/roleMappingsGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get role mappings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/users/{id}/roleMappings/clients/{client}Delete",
      "httpMethod": "delete",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Delete client-level roles from user role mapping",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/users/{id}/roleMappings/clients/{client}Get",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get client-level role mappings for the user, and the app",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/clients/{client}",
      "method": "/{realm}/users/{id}/roleMappings/clients/{client}Post",
      "httpMethod": "post",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Add client-level roles to the user role mapping",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/clients/{client}/available",
      "method": "/{realm}/users/{id}/roleMappings/clients/{client}/availableGet",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get available client-level roles that can be mapped to the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/clients/{client}/composite",
      "method": "/{realm}/users/{id}/roleMappings/clients/{client}/compositeGet",
      "httpMethod": "get",
      "tag": "Client Role Mappings",
      "typeScriptTag": "clientRoleMappings",
      "description": "Get effective client-level role mappings   This recurses any composite roles",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/realm",
      "method": "/{realm}/users/{id}/roleMappings/realmDelete",
      "httpMethod": "delete",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Delete realm-level role mappings",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/realm",
      "method": "/{realm}/users/{id}/roleMappings/realmGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get realm-level role mappings",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/realm",
      "method": "/{realm}/users/{id}/roleMappings/realmPost",
      "httpMethod": "post",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Add realm-level role mappings to the user",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/realm/available",
      "method": "/{realm}/users/{id}/roleMappings/realm/availableGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get realm-level roles that can be mapped",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/role-mappings/realm/composite",
      "method": "/{realm}/users/{id}/roleMappings/realm/compositeGet",
      "httpMethod": "get",
      "tag": "Role Mapper",
      "typeScriptTag": "roleMapper",
      "description": "Get effective realm-level role mappings   This will recurse all composite roles to get the result.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    },
    {
      "url": "/{realm}/users/{id}/send-verify-email",
      "method": "/{realm}/users/{id}/sendVerifyEmailPut",
      "httpMethod": "put",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Send an email-verification email to the user   An email contains a link the user can click to verify their email address.",
      "parameters": [
        {
          "name": "clientId",
          "schema": "string",
          "description": "Client id"
        },
        {
          "name": "redirectUri",
          "schema": "string",
          "description": "Redirect uri"
        }
      ],
      "responses": []
    },
    {
      "url": "/{realm}/users/{id}/sessions",
      "method": "/{realm}/users/{id}/sessionsGet",
      "httpMethod": "get",
      "tag": "Users",
      "typeScriptTag": "users",
      "description": "Get sessions associated with the user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "2XX",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "http://keycloak.local",
  "apiDescription": "This is a REST API reference for the Keycloak Admin",
  "apiTitle": "Keycloak Admin REST API",
  "endpoints": 192,
  "sdkMethods": 472,
  "schemas": 65,
  "parameters": 704,
  "difficultyScore": 680.5,
  "difficulty": "Very Hard"
}