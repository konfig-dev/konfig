{
  "providerName": "linode.com",
  "openApiRaw": "https://www.linode.com/docs/api/openapi.yaml",
  "securitySchemes": {
    "oauth": {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://login.linode.com/oauth/authorize",
          "scopes": {
            "account:read_only": "Allows access to GET information about your Account.",
            "account:read_write": "Allows access to all endpoints related to your Account.",
            "databases:read_only": "*Originally missing*",
            "databases:read_write": "*Originally missing*",
            "domains:read_only": "Allows access to GET Domains on your Account.",
            "domains:read_write": "Allows access to all Domain endpoints.",
            "events:read_only": "Allows access to GET your Events.",
            "events:read_write": "Allows access to all endpoints related to your Events.",
            "firewall:read_only": "Allows access to GET information about your Firewalls.",
            "firewall:read_write": "Allows acces to all Firewall endpoints.",
            "images:read_only": "Allows access to GET your Images.",
            "images:read_write": "Allows access to all endpoints related to your Images.",
            "ips:read": "*Originally missing*",
            "ips:read_only": "Allows access to GET your ips.",
            "ips:read_write": "Allows access to all endpoints related to your ips.",
            "linodes:read_only": "Allows access to GET Linodes on your Account.",
            "linodes:read_write": "Allow access to all endpoints related to your Linodes.",
            "lke:read_only": "Allows access to GET LKE Clusters on your Account.",
            "lke:read_write": "Allows access to all endpoints related to LKE Clusters on your Account.",
            "longview:read_only": "Allows access to GET your Longview Clients.",
            "longview:read_write": "Allows access to all endpoints related to your Longview Clients.",
            "nodebalancers:read_only": "Allows access to GET NodeBalancers on your Account.",
            "nodebalancers:read_write": "Allows access to all NodeBalancer endpoints.",
            "object_storage:read_only": "Allows access to GET information related to your Object Storage.",
            "object_storage:read_write": "Allows access to all Object Storage endpoints.",
            "stackscripts:read_only": "Allows access to GET your StackScripts.",
            "stackscripts:read_write": "Allows access to all endpoints related to your StackScripts.",
            "volumes:read_only": "Allows access to GET your Volumes.",
            "volumes:read_write": "Allows access to all endpoints related to your Volumes."
          },
          "tokenUrl": "https://login.linode.com/oauth/token"
        }
      },
      "type": "oauth2"
    },
    "personalAccessToken": {
      "scheme": "bearer",
      "type": "http"
    }
  },
  "homepage": "linode.com",
  "apiVersion": "4.151.1",
  "methods": [
    {
      "url": "/account",
      "method": "getAccount",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Account View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account",
      "method": "updateAccount",
      "httpMethod": "put",
      "tag": "Account",
      "description": "Account Update",
      "parameters": [
        {
          "name": "active_promotions",
          "schema": "array",
          "description": ""
        },
        {
          "name": "active_since",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_1",
          "schema": "string",
          "description": ""
        },
        {
          "name": "address_2",
          "schema": "string",
          "description": ""
        },
        {
          "name": "balance",
          "schema": "number",
          "description": ""
        },
        {
          "name": "balance_uninvoiced",
          "schema": "number",
          "description": ""
        },
        {
          "name": "billing_source",
          "schema": "string",
          "description": ""
        },
        {
          "name": "capabilities",
          "schema": "array",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "company",
          "schema": "string",
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "description": ""
        },
        {
          "name": "credit_card",
          "schema": "object",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "euuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "first_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tax_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "zip",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/cancel",
      "method": "cancelAccount",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Account Cancel",
      "parameters": [
        {
          "name": "comments",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/credit-card",
      "method": "createCreditCard",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Credit Card Add/Edit",
      "parameters": [
        {
          "name": "card_number",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cvv",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "expiry_month",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "expiry_year",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/entity-transfers",
      "method": "getEntityTransfers",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Entity Transfers List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/entity-transfers",
      "method": "createEntityTransfer",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Entity Transfer Create",
      "parameters": [
        {
          "name": "entities",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing an Entity Transfer.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/entity-transfers/{token}",
      "method": "deleteEntityTransfer",
      "httpMethod": "delete",
      "tag": "Account",
      "description": "Entity Transfer Cancel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/entity-transfers/{token}",
      "method": "getEntityTransfer",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Entity Transfer View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing an Entity Transfer.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/entity-transfers/{token}/accept",
      "method": "acceptEntityTransfer",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Entity Transfer Accept",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/events",
      "method": "getEvents",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Events List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/events/{eventId}",
      "method": "getEvent",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Event View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event.\nThe Events returned depends on your grants.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/events/{eventId}/read",
      "method": "eventRead",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Event Mark as Read",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/events/{eventId}/seen",
      "method": "eventSeen",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Event Mark as Seen",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/invoices",
      "method": "getInvoices",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Invoices List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/invoices/{invoiceId}",
      "method": "getInvoice",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Invoice View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account Invoice object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/invoices/{invoiceId}/items",
      "method": "getInvoiceItems",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Invoice Items List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/logins",
      "method": "getAccountLogins",
      "httpMethod": "get",
      "tag": "Account",
      "description": "User Logins List All",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/logins/{loginId}",
      "method": "getAccountLogin",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Login View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a previous successful login for a User.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/maintenance",
      "method": "getMaintenance",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Maintenance List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/notifications",
      "method": "getNotifications",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Notifications List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients",
      "method": "getClients",
      "httpMethod": "get",
      "tag": "Account",
      "description": "OAuth Clients List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients",
      "method": "createClient",
      "httpMethod": "post",
      "tag": "Account",
      "description": "OAuth Client Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target=\"_top\" href=\"https://login.linode.com\">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}",
      "method": "deleteClient",
      "httpMethod": "delete",
      "tag": "Account",
      "description": "OAuth Client Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}",
      "method": "getClient",
      "httpMethod": "get",
      "tag": "Account",
      "description": "OAuth Client View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target=\"_top\" href=\"https://login.linode.com\">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}",
      "method": "updateClient",
      "httpMethod": "put",
      "tag": "Account",
      "description": "OAuth Client Update",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "description": ""
        },
        {
          "name": "secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "thumbnail_url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target=\"_top\" href=\"https://login.linode.com\">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}/reset-secret",
      "method": "resetClientSecret",
      "httpMethod": "post",
      "tag": "Account",
      "description": "OAuth Client Secret Reset",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A third-party application registered to Linode that users may log into with their Linode account through our authentication server at <a target=\"_top\" href=\"https://login.linode.com\">https://login.linode.com</a>.  Using an OAuth Client, a third-party developer may be given access to some, or all, of a User's account for the purposes of their application.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}/thumbnail",
      "method": "getClientThumbnail",
      "httpMethod": "get",
      "tag": "Account",
      "description": "OAuth Client Thumbnail View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/oauth-clients/{clientId}/thumbnail",
      "method": "setClientThumbnail",
      "httpMethod": "put",
      "tag": "Account",
      "description": "OAuth Client Thumbnail Update",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payment-methods",
      "method": "getPaymentMethods",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Payment Methods List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payment-methods",
      "method": "createPaymentMethod",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Payment Method Add",
      "parameters": [
        {
          "name": "data",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "is_default",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payment-methods/{paymentMethodId}",
      "method": "deletePaymentMethod",
      "httpMethod": "delete",
      "tag": "Account",
      "description": "Payment Method Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payment-methods/{paymentMethodId}",
      "method": "getPaymentMethod",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Payment Method View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Payment Method Response Object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payment-methods/{paymentMethodId}/make-default",
      "method": "makePaymentMethodDefault",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Payment Method Make Default",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payments",
      "method": "getPayments",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Payments List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payments",
      "method": "createPayment",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Payment Make",
      "parameters": [
        {
          "name": "cvv",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "payment_method_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "usd",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Payment object response."
        },
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payments/paypal",
      "method": "createPayPalPayment",
      "httpMethod": "post",
      "tag": "Account",
      "description": "PayPal Payment Stage",
      "parameters": [
        {
          "name": "cancel_url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "redirect_url",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "usd",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "299",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payments/paypal/execute",
      "method": "executePayPalPayment",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Staged/Approved PayPal Payment Execute",
      "parameters": [
        {
          "name": "payer_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment_id",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "202",
          "description": ""
        },
        {
          "statusCode": "299",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/payments/{paymentId}",
      "method": "getPayment",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Payment View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Payment object response."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/promo-codes",
      "method": "createPromoCredit",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Promo Credit Add",
      "parameters": [
        {
          "name": "promo_code",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Promotions generally\noffer a set amount of credit that can be used toward your Linode\nservices, and the promotion expires after a specified date. As well,\na monthly cap on the promotional offer is set.\n\nSimply put, a promotion offers a certain amount of credit every\nmonth, until either the expiration date is passed, or until the total\npromotional credit is used, whichever comes first.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/service-transfers",
      "method": "getServiceTransfers",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Service Transfers List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/service-transfers",
      "method": "createServiceTransfer",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Service Transfer Create",
      "parameters": [
        {
          "name": "entities",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a Service Transfer.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/service-transfers/{token}",
      "method": "deleteServiceTransfer",
      "httpMethod": "delete",
      "tag": "account",
      "description": "Service Transfer Cancel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/service-transfers/{token}",
      "method": "getServiceTransfer",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Service Transfer View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a Service Transfer.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/service-transfers/{token}/accept",
      "method": "acceptServiceTransfer",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Service Transfer Accept",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/settings",
      "method": "getAccountSettings",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Account Settings View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account Settings object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/settings",
      "method": "updateAccountSettings",
      "httpMethod": "put",
      "tag": "Account",
      "description": "Account Settings Update",
      "parameters": [
        {
          "name": "backups_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "longview_subscription",
          "schema": "string",
          "description": ""
        },
        {
          "name": "managed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "network_helper",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "object_storage",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account Settings object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/settings/managed-enable",
      "method": "enableAccountManaged",
      "httpMethod": "post",
      "tag": "Account",
      "description": "Linode Managed Enable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/transfer",
      "method": "getTransfer",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Network Utilization View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing your network utilization for the current month, in Gigabytes.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users",
      "method": "getUsers",
      "httpMethod": "get",
      "tag": "Account",
      "description": "Users List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users",
      "method": "createUser",
      "httpMethod": "post",
      "tag": "Account",
      "description": "User Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users/{username}",
      "method": "deleteUser",
      "httpMethod": "delete",
      "tag": "Account",
      "description": "User Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users/{username}",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Account",
      "description": "User View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users/{username}",
      "method": "updateUser",
      "httpMethod": "put",
      "tag": "Account",
      "description": "User Update",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "restricted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ssh_keys",
          "schema": "array",
          "description": ""
        },
        {
          "name": "tfa_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A User on your Account. Unrestricted users can log in and access information about your Account, while restricted users may only access entities or perform actions they've been granted access to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users/{username}/grants",
      "method": "getUserGrants",
      "httpMethod": "get",
      "tag": "Account",
      "description": "User's Grants View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/account/users/{username}/grants",
      "method": "updateUserGrants",
      "httpMethod": "put",
      "tag": "Account",
      "description": "User's Grants Update",
      "parameters": [
        {
          "name": "database",
          "schema": "array",
          "description": ""
        },
        {
          "name": "domain",
          "schema": "array",
          "description": ""
        },
        {
          "name": "global",
          "schema": "object",
          "description": ""
        },
        {
          "name": "image",
          "schema": "array",
          "description": ""
        },
        {
          "name": "linode",
          "schema": "array",
          "description": ""
        },
        {
          "name": "longview",
          "schema": "array",
          "description": ""
        },
        {
          "name": "nodebalancer",
          "schema": "array",
          "description": ""
        },
        {
          "name": "stackscript",
          "schema": "array",
          "description": ""
        },
        {
          "name": "volume",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/engines",
      "method": "getDatabasesEngines",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed Database Engines List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/engines/{engineId}",
      "method": "getDatabasesEngine",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed Database Engine View",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database engine object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/instances",
      "method": "getDatabasesInstances",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed Databases List All",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances",
      "method": "getDatabasesMongoDbInstances",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Databases List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}",
      "method": "deleteDatabasesMongoDbInstance",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed MongoDB Database Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}",
      "method": "getDatabasesMongoDbInstance",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Database View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed MongoDB Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}",
      "method": "putDatabasesMongoDbInstance",
      "httpMethod": "put",
      "tag": "Databases",
      "description": "Managed MongoDB Database Update",
      "parameters": [
        {
          "name": "allow_list",
          "schema": "array",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updates",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed MongoDB Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/backups",
      "method": "getDatabasesMongoDbInstanceBackups",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Database Backups List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/backups",
      "method": "postDatabasesMongoDbInstanceBackup",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MongoDB Database Backup Snapshot Create",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/backups/{backupId}",
      "method": "deleteDatabaseMongoDbInstanceBackup",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed MongoDB Database Backup Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/backups/{backupId}",
      "method": "getDatabasesMongoDbInstanceBackup",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Database Backup View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A database backup object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/backups/{backupId}/restore",
      "method": "postDatabasesMongoDbInstanceBackupRestore",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MongoDB Database Backup Restore",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/credentials",
      "method": "getDatabasesMongoDbInstanceCredentials",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Database Credentials View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database object for database credentials."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/credentials/reset",
      "method": "postDatabasesMongoDbInstanceCredentialsReset",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MongoDB Database Credentials Reset",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/patch",
      "method": "postDatabasesMongoDbInstancePatch",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MongoDB Database Patch",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mongodb/instances/{instanceId}/ssl",
      "method": "getDatabasesMongoDbInstanceSsl",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MongoDB Database SSL Certificate View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database SSL object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances",
      "method": "getDatabasesMySqlInstances",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Databases List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances",
      "method": "postDatabasesMySqlInstances",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MySQL Database Create",
      "parameters": [
        {
          "name": "allow_list",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "cluster_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "encrypted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "engine",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "replication_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ssl_connection",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed MySQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}",
      "method": "deleteDatabasesMySqlInstance",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed MySQL Database Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}",
      "method": "getDatabasesMySqlInstance",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Database View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed MySQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}",
      "method": "putDatabasesMySqlInstance",
      "httpMethod": "put",
      "tag": "Databases",
      "description": "Managed MySQL Database Update",
      "parameters": [
        {
          "name": "allow_list",
          "schema": "array",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updates",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed MySQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/backups",
      "method": "getDatabasesMySqlInstanceBackups",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Database Backups List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/backups",
      "method": "postDatabasesMySqlInstanceBackup",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MySQL Database Backup Snapshot Create",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/backups/{backupId}",
      "method": "deleteDatabaseMySqlInstanceBackup",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed MySQL Database Backup Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/backups/{backupId}",
      "method": "getDatabasesMySqlInstanceBackup",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Database Backup View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A database backup object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/backups/{backupId}/restore",
      "method": "postDatabasesMySqlInstanceBackupRestore",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MySQL Database Backup Restore",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/credentials",
      "method": "getDatabasesMySqlInstanceCredentials",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Database Credentials View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database object for database credentials."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/credentials/reset",
      "method": "postDatabasesMySqlInstanceCredentialsReset",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MySQL Database Credentials Reset",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/patch",
      "method": "postDatabasesMySqlInstancePatch",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed MySQL Database Patch",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/mysql/instances/{instanceId}/ssl",
      "method": "getDatabasesMySqlInstanceSsl",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed MySQL Database SSL Certificate View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database SSL object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances",
      "method": "getDatabasesPostgreSqlInstances",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Databases List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances",
      "method": "postDatabasesPostgreSqlInstances",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Create",
      "parameters": [
        {
          "name": "allow_list",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "cluster_size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "encrypted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "engine",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "replication_commit_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "replication_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ssl_connection",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed PostgreSQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}",
      "method": "deleteDatabasesPostgreSqlInstance",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}",
      "method": "getDatabasesPostgreSqlInstance",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed PostgreSQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}",
      "method": "putDatabasesPostgreSqlInstance",
      "httpMethod": "put",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Update",
      "parameters": [
        {
          "name": "allow_list",
          "schema": "array",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updates",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed PostgreSQL Databases object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/backups",
      "method": "getDatabasesPostgreSqlInstanceBackups",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Backups List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/backups",
      "method": "postDatabasesPostgreSqlInstanceBackup",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Backup Snapshot Create",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/backups/{backupId}",
      "method": "deleteDatabasePostgreSqlInstanceBackup",
      "httpMethod": "delete",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Backup Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/backups/{backupId}",
      "method": "getDatabasesPostgreSqlInstanceBackup",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Backup View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A database backup object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/backups/{backupId}/restore",
      "method": "postDatabasesPostgreSqlInstanceBackupRestore",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Backup Restore",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/credentials",
      "method": "getDatabasesPostgreSqlInstanceCredentials",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Credentials View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database object for database credentials."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/credentials/reset",
      "method": "postDatabasesPostgreSqlInstanceCredentialsReset",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Credentials Reset",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/patch",
      "method": "postDatabasesPostgreSqlInstancePatch",
      "httpMethod": "post",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database Patch",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/postgresql/instances/{instanceId}/ssl",
      "method": "getDatabasesPostgreSqlInstanceSsl",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed PostgreSQL Database SSL Certificate View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database SSL object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/types",
      "method": "getDatabasesTypes",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed Database Types List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/databases/types/{typeId}",
      "method": "getDatabasesType",
      "httpMethod": "get",
      "tag": "Databases",
      "description": "Managed Database Type View",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Managed Database plan type object."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains",
      "method": "getDomains",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Domains List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains",
      "method": "createDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Domain Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/import",
      "method": "importDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Domain Import",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "remote_nameserver",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}",
      "method": "deleteDomain",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Domain Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}",
      "method": "getDomain",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Domain View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}",
      "method": "updateDomain",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Domain Update",
      "parameters": [
        {
          "name": "axfr_ips",
          "schema": "array",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "domain",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expire_sec",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "master_ips",
          "schema": "array",
          "description": ""
        },
        {
          "name": "refresh_sec",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "retry_sec",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "soa_email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ttl_sec",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/clone",
      "method": "cloneDomain",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Domain Clone",
      "parameters": [
        {
          "name": "domain",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/records",
      "method": "getDomainRecords",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Domain Records List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/records",
      "method": "createDomainRecord",
      "httpMethod": "post",
      "tag": "Domains",
      "description": "Domain Record Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A single record on a Domain.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/records/{recordId}",
      "method": "deleteDomainRecord",
      "httpMethod": "delete",
      "tag": "Domains",
      "description": "Domain Record Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/records/{recordId}",
      "method": "getDomainRecord",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Domain Record View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A single record on a Domain.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/records/{recordId}",
      "method": "updateDomainRecord",
      "httpMethod": "put",
      "tag": "Domains",
      "description": "Domain Record Update",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "priority",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "service",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "description": ""
        },
        {
          "name": "target",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ttl_sec",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A single record on a Domain.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/domains/{domainId}/zone-file",
      "method": "getDomainZone",
      "httpMethod": "get",
      "tag": "Domains",
      "description": "Domain Zone File View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images",
      "method": "getImages",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Images List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images",
      "method": "createImage",
      "httpMethod": "post",
      "tag": "Images",
      "description": "Image Create",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "disk_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Image object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/upload",
      "method": "/images/uploadPost",
      "httpMethod": "post",
      "tag": "Images",
      "description": "Image Upload",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/{imageId}",
      "method": "deleteImage",
      "httpMethod": "delete",
      "tag": "Images",
      "description": "Image Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/{imageId}",
      "method": "getImage",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Image View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Image object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images/{imageId}",
      "method": "updateImage",
      "httpMethod": "put",
      "tag": "Images",
      "description": "Image Update",
      "parameters": [
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "created_by",
          "schema": "string",
          "description": ""
        },
        {
          "name": "deprecated",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "eol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expiry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "vendor",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Image object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances",
      "method": "getLinodeInstances",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Linodes List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances",
      "method": "createLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}",
      "method": "deleteLinodeInstance",
      "httpMethod": "delete",
      "tag": "Linode Instances",
      "description": "Linode Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}",
      "method": "getLinodeInstance",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Linode View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}",
      "method": "updateLinodeInstance",
      "httpMethod": "put",
      "tag": "Linode Instances",
      "description": "Linode Update",
      "parameters": [
        {
          "name": "alerts",
          "schema": "object",
          "description": ""
        },
        {
          "name": "backups",
          "schema": "object",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "host_uuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hypervisor",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "image",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "ipv4",
          "schema": "array",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "description": ""
        },
        {
          "name": "specs",
          "schema": "object",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "watchdog_enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups",
      "method": "getBackups",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Backups List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups",
      "method": "createSnapshot",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Snapshot Create",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a Backup or snapshot for a Linode with Backup service enabled.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups/cancel",
      "method": "cancelBackups",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Backups Cancel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups/enable",
      "method": "enableBackups",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Backups Enable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups/{backupId}",
      "method": "getBackup",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Backup View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a Backup or snapshot for a Linode with Backup service enabled.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/backups/{backupId}/restore",
      "method": "restoreBackup",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Backup Restore",
      "parameters": [
        {
          "name": "linode_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "overwrite",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/boot",
      "method": "bootLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Boot",
      "parameters": [
        {
          "name": "config_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/clone",
      "method": "cloneLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Clone",
      "parameters": [
        {
          "name": "backups_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "configs",
          "schema": "array",
          "description": ""
        },
        {
          "name": "disks",
          "schema": "array",
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "private_ip",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/configs",
      "method": "getLinodeConfigs",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Configuration Profiles List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/configs",
      "method": "addLinodeConfig",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Configuration Profile Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/configs/{configId}",
      "method": "deleteLinodeConfig",
      "httpMethod": "delete",
      "tag": "Linode Instances",
      "description": "Configuration Profile Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/configs/{configId}",
      "method": "getLinodeConfig",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Configuration Profile View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/configs/{configId}",
      "method": "updateLinodeConfig",
      "httpMethod": "put",
      "tag": "Linode Instances",
      "description": "Configuration Profile Update",
      "parameters": [
        {
          "name": "comments",
          "schema": "string",
          "description": ""
        },
        {
          "name": "devices",
          "schema": "object",
          "description": ""
        },
        {
          "name": "helpers",
          "schema": "object",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "interfaces",
          "schema": "array",
          "description": ""
        },
        {
          "name": "kernel",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "memory_limit",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "root_device",
          "schema": "string",
          "description": ""
        },
        {
          "name": "run_level",
          "schema": "string",
          "description": ""
        },
        {
          "name": "virt_mode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks",
      "method": "getLinodeDisks",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Disks List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks",
      "method": "addLinodeDisk",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Disk Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}",
      "method": "deleteDisk",
      "httpMethod": "delete",
      "tag": "Linode Instances",
      "description": "Disk Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}",
      "method": "getLinodeDisk",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Disk View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}",
      "method": "updateDisk",
      "httpMethod": "put",
      "tag": "Linode Instances",
      "description": "Disk Update",
      "parameters": [
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "filesystem",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}/clone",
      "method": "cloneLinodeDisk",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Disk Clone",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}/password",
      "method": "resetDiskPassword",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Disk Root Password Reset",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/disks/{diskId}/resize",
      "method": "resizeDisk",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Disk Resize",
      "parameters": [
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/firewalls",
      "method": "getLinodeFirewalls",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Firewalls List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/ips",
      "method": "getLinodeIPs",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Networking Information List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/ips",
      "method": "addLinodeIp",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "IPv4 Address Allocate",
      "parameters": [
        {
          "name": "public",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/ips/{address}",
      "method": "removeLinodeIp",
      "httpMethod": "delete",
      "tag": "Linode Instances",
      "description": "IPv4 Address Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/ips/{address}",
      "method": "getLinodeIp",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "IP Address View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/ips/{address}",
      "method": "updateLinodeIp",
      "httpMethod": "put",
      "tag": "Linode Instances",
      "description": "IP Address Update",
      "parameters": [
        {
          "name": "rdns",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/migrate",
      "method": "migrateLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "DC Migration/Pending Host Migration Initiate",
      "parameters": [
        {
          "name": "region",
          "schema": "string",
          "description": ""
        },
        {
          "name": "upgrade",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/mutate",
      "method": "mutateLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Upgrade",
      "parameters": [
        {
          "name": "allow_auto_disk_resize",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/nodebalancers",
      "method": "getLinodeNodeBalancers",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Linode NodeBalancers View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/password",
      "method": "resetLinodePassword",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Root Password Reset",
      "parameters": [
        {
          "name": "root_pass",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/reboot",
      "method": "rebootLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Reboot",
      "parameters": [
        {
          "name": "config_id",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/rebuild",
      "method": "rebuildLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Rebuild",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/rescue",
      "method": "rescueLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Boot into Rescue Mode",
      "parameters": [
        {
          "name": "devices",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/resize",
      "method": "resizeLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Resize",
      "parameters": [
        {
          "name": "allow_auto_disk_resize",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/shutdown",
      "method": "shutdownLinodeInstance",
      "httpMethod": "post",
      "tag": "Linode Instances",
      "description": "Linode Shut Down",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/stats",
      "method": "getLinodeStats",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Linode Statistics View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in \"[timestamp, reading]\" array format. Timestamp is a UNIX timestamp in EST.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/stats/{year}/{month}",
      "method": "getLinodeStatsByYearMonth",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Statistics View (year/month)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "CPU, IO, IPv4, and IPv6 statistics. Graph data, if available, is in \"[timestamp, reading]\" array format. Timestamp is a UNIX timestamp in EST.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/transfer",
      "method": "getLinodeTransfer",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Network Transfer View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/transfer/{year}/{month}",
      "method": "getLinodeTransferByYearMonth",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Network Transfer View (year/month)",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/instances/{linodeId}/volumes",
      "method": "getLinodeVolumes",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Linode's Volumes List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/kernels",
      "method": "getKernels",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Kernels List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/kernels/{kernelId}",
      "method": "getKernel",
      "httpMethod": "get",
      "tag": "Linode Instances",
      "description": "Kernel View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Linux kernel object"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/stackscripts",
      "method": "getStackScripts",
      "httpMethod": "get",
      "tag": "StackScripts",
      "description": "StackScripts List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/stackscripts",
      "method": "addStackScript",
      "httpMethod": "post",
      "tag": "StackScripts",
      "description": "StackScript Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A StackScript enables you to quickly deploy a fully-configured application in an automated manner.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/stackscripts/{stackscriptId}",
      "method": "deleteStackScript",
      "httpMethod": "delete",
      "tag": "StackScripts",
      "description": "StackScript Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/stackscripts/{stackscriptId}",
      "method": "getStackScript",
      "httpMethod": "get",
      "tag": "StackScripts",
      "description": "StackScript View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A StackScript enables you to quickly deploy a fully-configured application in an automated manner.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/stackscripts/{stackscriptId}",
      "method": "updateStackScript",
      "httpMethod": "put",
      "tag": "StackScripts",
      "description": "StackScript Update",
      "parameters": [
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "deployments_active",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "deployments_total",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "images",
          "schema": "array",
          "description": ""
        },
        {
          "name": "is_public",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mine",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "rev_note",
          "schema": "string",
          "description": ""
        },
        {
          "name": "script",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "user_defined_fields",
          "schema": "array",
          "description": ""
        },
        {
          "name": "user_gravatar_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A StackScript enables you to quickly deploy a fully-configured application in an automated manner.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/types",
      "method": "getLinodeTypes",
      "httpMethod": "get",
      "tag": "Linode Types",
      "description": "Types List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/linode/types/{typeId}",
      "method": "getLinodeType",
      "httpMethod": "get",
      "tag": "Linode Types",
      "description": "Type View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Returns collection of Linode types, including pricing and specifications for each type. These are used when [creating](/docs/api/linode-instances/#linode-create) or [resizing](/docs/api/linode-instances/#linode-resize) Linodes.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters",
      "method": "getLkeClusters",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Clusters List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters",
      "method": "createLkeCluster",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster Create",
      "parameters": [
        {
          "name": "control_plane",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "k8s_version",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "node_pools",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Kubernetes cluster."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}",
      "method": "deleteLkeCluster",
      "httpMethod": "delete",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}",
      "method": "getLkeCluster",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Kubernetes cluster."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}",
      "method": "putLkeCluster",
      "httpMethod": "put",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster Update",
      "parameters": [
        {
          "name": "control_plane",
          "schema": "object",
          "description": ""
        },
        {
          "name": "k8s_version",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/api-endpoints",
      "method": "getLkeClusterApiEndpoints",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes API Endpoints List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/dashboard",
      "method": "getLkeClusterDashboard",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster Dashboard URL View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/kubeconfig",
      "method": "deleteLkeClusterKubeconfig",
      "httpMethod": "delete",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubeconfig Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/kubeconfig",
      "method": "getLkeClusterKubeconfig",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubeconfig View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/nodes/{nodeId}",
      "method": "deleteLkeClusterNode",
      "httpMethod": "delete",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/nodes/{nodeId}",
      "method": "getLkeClusterNode",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/nodes/{nodeId}/recycle",
      "method": "postLkeClusterNodeRecycle",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Recycle",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools",
      "method": "getLkeClusterPools",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pools List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools",
      "method": "postLkeClusterPools",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pool Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools/{poolId}",
      "method": "deleteLkeNodePool",
      "httpMethod": "delete",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pool Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools/{poolId}",
      "method": "getLkeNodePool",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pool View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.\n"
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools/{poolId}",
      "method": "putLkeNodePool",
      "httpMethod": "put",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pool Update",
      "parameters": [
        {
          "name": "autoscaler",
          "schema": "object",
          "description": ""
        },
        {
          "name": "count",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.\n"
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/pools/{poolId}/recycle",
      "method": "postLkeClusterPoolRecycle",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Node Pool Recycle",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/recycle",
      "method": "postLkeClusterRecycle",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Cluster Nodes Recycle",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/regenerate",
      "method": "postLkeClusterRegenerate",
      "httpMethod": "post",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Cluster Regenerate",
      "parameters": [
        {
          "name": "kubeconfig",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "servicetoken",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/clusters/{clusterId}/servicetoken",
      "method": "postLkecServiceTokenDelete",
      "httpMethod": "delete",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Service Token Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/versions",
      "method": "getLkeVersions",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Versions List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/lke/versions/{version}",
      "method": "getLkeVersion",
      "httpMethod": "get",
      "tag": "Linode Kubernetes Engine (LKE)",
      "description": "Kubernetes Version View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "LKE versions\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/clients",
      "method": "getLongviewClients",
      "httpMethod": "get",
      "tag": "Longview",
      "description": "Longview Clients List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/clients",
      "method": "createLongviewClient",
      "httpMethod": "post",
      "tag": "Longview",
      "description": "Longview Client Create",
      "parameters": [
        {
          "name": "api_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "apps",
          "schema": "object",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "install_code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A LongviewClient is a single monitor set up to track statistics about one of your servers.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/clients/{clientId}",
      "method": "deleteLongviewClient",
      "httpMethod": "delete",
      "tag": "Longview",
      "description": "Longview Client Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/clients/{clientId}",
      "method": "getLongviewClient",
      "httpMethod": "get",
      "tag": "Longview",
      "description": "Longview Client View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A LongviewClient is a single monitor set up to track statistics about one of your servers.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/clients/{clientId}",
      "method": "updateLongviewClient",
      "httpMethod": "put",
      "tag": "Longview",
      "description": "Longview Client Update",
      "parameters": [
        {
          "name": "api_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "apps",
          "schema": "object",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "install_code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A LongviewClient is a single monitor set up to track statistics about one of your servers.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/plan",
      "method": "getLongviewPlan",
      "httpMethod": "get",
      "tag": "Longview",
      "description": "Longview Plan View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Longview Subscription represents a tier of Longview service you can subscribe to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/plan",
      "method": "updateLongviewPlan",
      "httpMethod": "put",
      "tag": "Longview",
      "description": "Longview Plan Update",
      "parameters": [
        {
          "name": "longview_subscription",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Longview Subscription represents a tier of Longview service you can subscribe to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/subscriptions",
      "method": "getLongviewSubscriptions",
      "httpMethod": "get",
      "tag": "Longview",
      "description": "Longview Subscriptions List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/longview/subscriptions/{subscriptionId}",
      "method": "getLongviewSubscription",
      "httpMethod": "get",
      "tag": "Longview",
      "description": "Longview Subscription View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Longview Subscription represents a tier of Longview service you can subscribe to.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/contacts",
      "method": "getManagedContacts",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Contacts List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/contacts",
      "method": "createManagedContact",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Contact Create",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about someone Linode's special forces may contact in case an issue is detected with a manager service.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/contacts/{contactId}",
      "method": "deleteManagedContact",
      "httpMethod": "delete",
      "tag": "Managed",
      "description": "Managed Contact Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/contacts/{contactId}",
      "method": "getManagedContact",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Contact View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about someone Linode's special forces may contact in case an issue is detected with a manager service.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/contacts/{contactId}",
      "method": "updateManagedContact",
      "httpMethod": "put",
      "tag": "Managed",
      "description": "Managed Contact Update",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Information about someone Linode's special forces may contact in case an issue is detected with a manager service.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials",
      "method": "getManagedCredentials",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Credentials List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials",
      "method": "createManagedCredential",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Credential Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials/sshkey",
      "method": "viewManagedSshKey",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed SSH Key View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A unique SSH public key that allows Linode's special forces to access a Managed server to respond to Issues.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials/{credentialId}",
      "method": "getManagedCredential",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Credential View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials/{credentialId}",
      "method": "updateManagedCredential",
      "httpMethod": "put",
      "tag": "Managed",
      "description": "Managed Credential Update",
      "parameters": [
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_decrypted",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A securely-stored Credential that allows Linode's special forces to access a Managed server to respond to Issues.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials/{credentialId}/revoke",
      "method": "deleteManagedCredential",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Credential Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/credentials/{credentialId}/update",
      "method": "updateManagedCredentialUsernamePassword",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Credential Username and Password Update",
      "parameters": [
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/issues",
      "method": "getManagedIssues",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Issues List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/issues/{issueId}",
      "method": "getManagedIssue",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Issue View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Issue that was detected with a service Linode is managing.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/linode-settings",
      "method": "getManagedLinodeSettings",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Linode Settings List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/linode-settings/{linodeId}",
      "method": "getManagedLinodeSetting",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Linode's Managed Settings View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/linode-settings/{linodeId}",
      "method": "updateManagedLinodeSetting",
      "httpMethod": "put",
      "tag": "Managed",
      "description": "Linode's Managed Settings Update",
      "parameters": [
        {
          "name": "group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssh",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Settings for a specific Linode related to Managed Services. There is one ManagedLinodeSettings object for each Linode on your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services",
      "method": "getManagedServices",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Services List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services",
      "method": "createManagedService",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Service Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services/{serviceId}",
      "method": "deleteManagedService",
      "httpMethod": "delete",
      "tag": "Managed",
      "description": "Managed Service Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services/{serviceId}",
      "method": "getManagedService",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Service View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services/{serviceId}",
      "method": "updateManagedService",
      "httpMethod": "put",
      "tag": "Managed",
      "description": "Managed Service Update",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "consultation_group",
          "schema": "string",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "credentials",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "description": ""
        },
        {
          "name": "service_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "timeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services/{serviceId}/disable",
      "method": "disableManagedService",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Service Disable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/services/{serviceId}/enable",
      "method": "enableManagedService",
      "httpMethod": "post",
      "tag": "Managed",
      "description": "Managed Service Enable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/managed/stats",
      "method": "getManagedStats",
      "httpMethod": "get",
      "tag": "Managed",
      "description": "Managed Stats List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls",
      "method": "getFirewalls",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Firewalls List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls",
      "method": "createFirewalls",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Firewall Create",
      "parameters": [
        {
          "name": "devices",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "rules",
          "schema": "undefined",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}",
      "method": "deleteFirewall",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "Firewall Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}",
      "method": "getFirewall",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Firewall View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}",
      "method": "updateFirewall",
      "httpMethod": "put",
      "tag": "Networking",
      "description": "Firewall Update",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A resource that controls incoming and outgoing network traffic to a Linode service. Only one Firewall can be attached to a Linode at any given time. [Create a Firewall Device](/docs/api/networking/#firewall-create) to assign a Firewall to a Linode service. Currently, Firewalls can only be assigned to Linode instances.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/devices",
      "method": "getFirewallDevices",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Firewall Devices List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/devices",
      "method": "createFirewallDevice",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Firewall Device Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Associates a Firewall with a Linode service. A Firewall can be assigned to a single Linode service at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/devices/{deviceId}",
      "method": "deleteFirewallDevice",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "Firewall Device Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/devices/{deviceId}",
      "method": "getFirewallDevice",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Firewall Device View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Associates a Firewall with a Linode service. A Firewall can be assigned to a single Linode service at a time. Additional disabled Firewalls can be assigned to a service, but they cannot be enabled if another active Firewall is already assigned to the same service.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/rules",
      "method": "getFirewallRules",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "Firewall Rules List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "The inbound and outbound access rules to apply to the Firewall.\n\nA Firewall may have up to 25 rules across its inbound and outbound rulesets.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/firewalls/{firewallId}/rules",
      "method": "updateFirewallRules",
      "httpMethod": "put",
      "tag": "Networking",
      "description": "Firewall Rules Update",
      "parameters": [
        {
          "name": "inbound",
          "schema": "undefined",
          "description": ""
        },
        {
          "name": "outbound",
          "schema": "undefined",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The inbound and outbound access rules to apply to the Firewall.\n\nA Firewall may have up to 25 rules across its inbound and outbound rulesets.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips",
      "method": "getIPs",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "IP Addresses List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips",
      "method": "allocateIp",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "IP Address Allocate",
      "parameters": [
        {
          "name": "linode_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "public",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips/assign",
      "method": "assignIPs",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "IP Addresses Assign",
      "parameters": [
        {
          "name": "assignments",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips/share",
      "method": "shareIPs",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "IP Addresses Share",
      "parameters": [
        {
          "name": "ips",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips/{address}",
      "method": "getIp",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "IP Address View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ips/{address}",
      "method": "updateIp",
      "httpMethod": "put",
      "tag": "Networking",
      "description": "IP Address RDNS Update",
      "parameters": [
        {
          "name": "rdns",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An IP address that exists in Linode's system, either IPv4 or IPv6.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv4/assign",
      "method": "assignIPv4S",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "Linodes Assign IPv4s",
      "parameters": [
        {
          "name": "assignments",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv4/share",
      "method": "shareIPv4S",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "IPv4 Sharing Configure",
      "parameters": [
        {
          "name": "ips",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv6/pools",
      "method": "getIPv6Pools",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "IPv6 Pools List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv6/ranges",
      "method": "getIPv6Ranges",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "IPv6 Ranges List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv6/ranges",
      "method": "postIPv6Range",
      "httpMethod": "post",
      "tag": "Networking",
      "description": "IPv6 Range Create",
      "parameters": [
        {
          "name": "linode_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "prefix_length",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "route_target",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv6/ranges/{range}",
      "method": "deleteIPv6Range",
      "httpMethod": "delete",
      "tag": "Networking",
      "description": "IPv6 Range Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/ipv6/ranges/{range}",
      "method": "getIPv6Range",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "IPv6 Range View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing an IPv6 range.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/networking/vlans",
      "method": "getVlaNs",
      "httpMethod": "get",
      "tag": "Networking",
      "description": "VLANs List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers",
      "method": "getNodeBalancers",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "NodeBalancers List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers",
      "method": "createNodeBalancer",
      "httpMethod": "post",
      "tag": "NodeBalancers",
      "description": "NodeBalancer Create",
      "parameters": [
        {
          "name": "client_conn_throttle",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "configs",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}",
      "method": "deleteNodeBalancer",
      "httpMethod": "delete",
      "tag": "NodeBalancers",
      "description": "NodeBalancer Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}",
      "method": "getNodeBalancer",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "NodeBalancer View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}",
      "method": "updateNodeBalancer",
      "httpMethod": "put",
      "tag": "NodeBalancers",
      "description": "NodeBalancer Update",
      "parameters": [
        {
          "name": "client_conn_throttle",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "hostname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "ipv4",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ipv6",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "description": ""
        },
        {
          "name": "transfer",
          "schema": "object",
          "description": ""
        },
        {
          "name": "updated",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Linode's load balancing solution.  Can handle multiple ports, SSL termination, and any number of backends.  NodeBalancer ports are configured with NodeBalancer Configs, and each config is given one or more NodeBalancer Node that accepts traffic.  The traffic should be routed to the  NodeBalancer's ip address, the NodeBalancer will handle routing individual requests to backends.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs",
      "method": "getNodeBalancerConfigs",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "Configs List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs",
      "method": "createNodeBalancerConfig",
      "httpMethod": "post",
      "tag": "NodeBalancers",
      "description": "Config Create",
      "parameters": [
        {
          "name": "algorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_attempts",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "check_body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_interval",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "check_passive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "check_path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_timeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "cipher_suite",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "nodebalancer_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "nodes_status",
          "schema": "object",
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "proxy_protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_cert",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_commonname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_fingerprint",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stickiness",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.\n\nNodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}",
      "method": "deleteNodeBalancerConfig",
      "httpMethod": "delete",
      "tag": "NodeBalancers",
      "description": "Config Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}",
      "method": "getNodeBalancerConfig",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "Config View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.\n\nNodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}",
      "method": "updateNodeBalancerConfig",
      "httpMethod": "put",
      "tag": "NodeBalancers",
      "description": "Config Update",
      "parameters": [
        {
          "name": "algorithm",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_attempts",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "check_body",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_interval",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "check_passive",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "check_path",
          "schema": "string",
          "description": ""
        },
        {
          "name": "check_timeout",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "cipher_suite",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "nodebalancer_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "nodes_status",
          "schema": "object",
          "description": ""
        },
        {
          "name": "port",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "proxy_protocol",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_cert",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_commonname",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_fingerprint",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssl_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "stickiness",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.\n\nNodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes",
      "method": "getNodeBalancerConfigNodes",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "Nodes List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes",
      "method": "createNodeBalancerNode",
      "httpMethod": "post",
      "tag": "NodeBalancers",
      "description": "Node Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}",
      "method": "deleteNodeBalancerConfigNode",
      "httpMethod": "delete",
      "tag": "NodeBalancers",
      "description": "Node Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}",
      "method": "getNodeBalancerNode",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "Node View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/nodes/{nodeId}",
      "method": "updateNodeBalancerNode",
      "httpMethod": "put",
      "tag": "NodeBalancers",
      "description": "Node Update",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "description": ""
        },
        {
          "name": "config_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "mode",
          "schema": "string",
          "description": ""
        },
        {
          "name": "nodebalancer_id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "description": ""
        },
        {
          "name": "weight",
          "schema": "integer",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancerNode represents a single backend serving requests for a single port of a NodeBalancer.  Nodes are specific to NodeBalancer Configs, and serve traffic over their private IP.  If the same Linode is serving traffic for more than one port on the same NodeBalancer, one NodeBalancer Node is required for each config (port) it should serve requests on.  For example, if you have four backends, and each should response to both HTTP and HTTPS requests, you will need two NodeBalancerConfigs (port 80 and port 443) and four backends each - one for each of the Linodes serving requests for that port.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild",
      "method": "rebuildNodeBalancerConfig",
      "httpMethod": "post",
      "tag": "NodeBalancers",
      "description": "Config Rebuild",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.\n\nNodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/nodebalancers/{nodeBalancerId}/stats",
      "method": "/nodebalancers/{nodeBalancerId}/statsGet",
      "httpMethod": "get",
      "tag": "NodeBalancers",
      "description": "NodeBalancer Statistics View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Stats for this NodeBalancer.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets",
      "method": "getObjectStorageBuckets",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Buckets List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets",
      "method": "createObjectStorageBucket",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage Bucket Create",
      "parameters": [
        {
          "name": "acl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "cluster",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "cors_enabled",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}",
      "method": "getObjectStorageBucketinCluster",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Buckets in Cluster List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}",
      "method": "deleteObjectStorageBucket",
      "httpMethod": "delete",
      "tag": "Object Storage",
      "description": "Object Storage Bucket Remove",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}",
      "method": "getObjectStorageBucket",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Bucket View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Object Storage Bucket. This should be accessed primarily through the S3 API; [click here for more information](https://docs.ceph.com/en/latest/radosgw/s3/#api).\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/access",
      "method": "modifyObjectStorageBucketAccess",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage Bucket Access Modify",
      "parameters": [
        {
          "name": "acl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "cors_enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/access",
      "method": "updateObjectStorageBucketAccess",
      "httpMethod": "put",
      "tag": "Object Storage",
      "description": "Object Storage Bucket Access Update",
      "parameters": [
        {
          "name": "acl",
          "schema": "string",
          "description": ""
        },
        {
          "name": "cors_enabled",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/object-acl",
      "method": "viewObjectStorageBucketAcl",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Object ACL Config View",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "The `name` of the object for which to retrieve its Access Control List (ACL). Use the [Object Storage Bucket Contents List](/docs/api/object-storage/#object-storage-bucket-contents-list) endpoint to access all object names in a bucket.\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/object-acl",
      "method": "updateObjectStorageBucketAcl",
      "httpMethod": "put",
      "tag": "Object Storage",
      "description": "Object Storage Object ACL Config Update",
      "parameters": [
        {
          "name": "acl",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/object-list",
      "method": "getObjectStorageBucketContent",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Bucket Contents List",
      "parameters": [
        {
          "name": "marker",
          "schema": "string",
          "required": false,
          "description": "The \"marker\" for this request, which can be used to paginate through large buckets. Its value should be the value of the `next_marker` property returned with the last page. Listing bucket contents *does not* support arbitrary page access. See the `next_marker` property in the responses section for more details.\n"
        },
        {
          "name": "delimiter",
          "schema": "string",
          "required": false,
          "description": "The delimiter for object names; if given, object names will be returned up to the first occurrence of this character. This is most commonly used with the `/` character to allow bucket transversal in a manner similar to a filesystem, however any delimiter may be used. Use in conjunction with `prefix` to see object names past the first occurrence of the delimiter.\n"
        },
        {
          "name": "prefix",
          "schema": "string",
          "required": false,
          "description": "Filters objects returned to only those whose name start with the given prefix. Commonly used in conjunction with `delimiter` to allow transversal of bucket contents in a manner similar to a filesystem.\n"
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/object-url",
      "method": "createObjectStorageObjectUrl",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage Object URL Create",
      "parameters": [
        {
          "name": "content_type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expires_in",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "method",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/ssl",
      "method": "deleteObjectStorageSsl",
      "httpMethod": "delete",
      "tag": "Object Storage",
      "description": "Object Storage TLS/SSL Cert Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/ssl",
      "method": "getObjectStorageSsl",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage TLS/SSL Cert View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "If this Object Storage bucket has a corresponding TLS/SSL Certificate.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/buckets/{clusterId}/{bucket}/ssl",
      "method": "createObjectStorageSsl",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage TLS/SSL Cert Upload",
      "parameters": [
        {
          "name": "certificate",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "private_key",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "If this Object Storage bucket has a corresponding TLS/SSL Certificate.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/cancel",
      "method": "cancelObjectStorage",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage Cancel",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/clusters",
      "method": "getObjectStorageClusters",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Clusters List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/clusters/{clusterId}",
      "method": "getObjectStorageCluster",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Cluster View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An Object Storage Cluster"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/keys",
      "method": "getObjectStorageKeys",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Keys List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/keys",
      "method": "createObjectStorageKeys",
      "httpMethod": "post",
      "tag": "Object Storage",
      "description": "Object Storage Key Create",
      "parameters": [
        {
          "name": "access_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "bucket_access",
          "schema": "array",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "limited",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "secret_key",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A keypair used to communicate with the Object Storage S3 API."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/keys/{keyId}",
      "method": "deleteObjectStorageKey",
      "httpMethod": "delete",
      "tag": "Object Storage",
      "description": "Object Storage Key Revoke",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/keys/{keyId}",
      "method": "getObjectStorageKey",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Key View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A keypair used to communicate with the Object Storage S3 API."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/keys/{keyId}",
      "method": "updateObjectStorageKey",
      "httpMethod": "put",
      "tag": "Object Storage",
      "description": "Object Storage Key Update",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A keypair used to communicate with the Object Storage S3 API."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/object-storage/transfer",
      "method": "getObjectStorageTransfer",
      "httpMethod": "get",
      "tag": "Object Storage",
      "description": "Object Storage Transfer View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile",
      "method": "getProfile",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Profile View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile",
      "method": "updateProfile",
      "httpMethod": "put",
      "tag": "Profile",
      "description": "Profile Update",
      "parameters": [
        {
          "name": "authentication_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "authorized_keys",
          "schema": "array",
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "description": ""
        },
        {
          "name": "email_notifications",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "ip_whitelist_enabled",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lish_auth_method",
          "schema": "string",
          "description": ""
        },
        {
          "name": "referrals",
          "schema": "object",
          "description": ""
        },
        {
          "name": "restricted",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "timezone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "two_factor_auth",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "uid",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        },
        {
          "name": "verified_phone_number",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/apps",
      "method": "getProfileApps",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Authorized Apps List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/apps/{appId}",
      "method": "deleteProfileApp",
      "httpMethod": "delete",
      "tag": "Profile",
      "description": "App Access Revoke",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/apps/{appId}",
      "method": "getProfileApp",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Authorized App View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An application you have authorized access to your Account through OAuth.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/devices",
      "method": "getDevices",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Trusted Devices List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/devices/{deviceId}",
      "method": "revokeTrustedDevice",
      "httpMethod": "delete",
      "tag": "Profile",
      "description": "Trusted Device Revoke",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/devices/{deviceId}",
      "method": "getTrustedDevice",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Trusted Device View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A trusted device object represents an active Remember Me session with <a target=\"_top\" href=\"https://login.linode.com\">login.linode.com</a>.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/grants",
      "method": "getProfileGrants",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Grants List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A structure representing all grants a restricted User has on the Account. Not available for unrestricted users, as they have access to everything without grants. If retrieved from the `/profile/grants` endpoint, entities to which a User has no access will be omitted.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/logins",
      "method": "getProfileLogins",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Logins List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/logins/{loginId}",
      "method": "getProfileLogin",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Login View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a previous successful login for a User.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/phone-number",
      "method": "deleteProfilePhoneNumber",
      "httpMethod": "delete",
      "tag": "Profile",
      "description": "Phone Number Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/phone-number",
      "method": "postProfilePhoneNumber",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Phone Number Verification Code Send",
      "parameters": [
        {
          "name": "iso_code",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phone_number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/phone-number/verify",
      "method": "postProfilePhoneNumberVerify",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Phone Number Verify",
      "parameters": [
        {
          "name": "otp_code",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/preferences",
      "method": "getUserPreferences",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "User Preferences View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A dictionary of user preferences."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/preferences",
      "method": "updateUserPreferences",
      "httpMethod": "put",
      "tag": "Profile",
      "description": "User Preferences Update",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object of user preferences."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/security-questions",
      "method": "getSecurityQuestions",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Security Questions List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Security questions and responses object for GET operation."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/security-questions",
      "method": "postSecurityQuestions",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Security Questions Answer",
      "parameters": [
        {
          "name": "security_questions",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Security questions and responses object for POST operation."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/sshkeys",
      "method": "getSshKeys",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "SSH Keys List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/sshkeys",
      "method": "addSshKey",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "SSH Key Add",
      "parameters": [
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "ssh_key",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A credential object for authenticating a User's secure shell connection to a Linode.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/sshkeys/{sshKeyId}",
      "method": "deleteSshKey",
      "httpMethod": "delete",
      "tag": "Profile",
      "description": "SSH Key Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/sshkeys/{sshKeyId}",
      "method": "getSshKey",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "SSH Key View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A credential object for authenticating a User's secure shell connection to a Linode.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/sshkeys/{sshKeyId}",
      "method": "updateSshKey",
      "httpMethod": "put",
      "tag": "Profile",
      "description": "SSH Key Update",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A credential object for authenticating a User's secure shell connection to a Linode.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tfa-disable",
      "method": "tfaDisable",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Two Factor Authentication Disable",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tfa-enable",
      "method": "tfaEnable",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Two Factor Secret Create",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tfa-enable-confirm",
      "method": "tfaConfirm",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Two Factor Authentication Confirm/Enable",
      "parameters": [
        {
          "name": "tfa_code",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tokens",
      "method": "getPersonalAccessTokens",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Personal Access Tokens List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tokens",
      "method": "createPersonalAccessToken",
      "httpMethod": "post",
      "tag": "Profile",
      "description": "Personal Access Token Create",
      "parameters": [
        {
          "name": "expiry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopes",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tokens/{tokenId}",
      "method": "deletePersonalAccessToken",
      "httpMethod": "delete",
      "tag": "Profile",
      "description": "Personal Access Token Revoke",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tokens/{tokenId}",
      "method": "getPersonalAccessToken",
      "httpMethod": "get",
      "tag": "Profile",
      "description": "Personal Access Token View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/profile/tokens/{tokenId}",
      "method": "updatePersonalAccessToken",
      "httpMethod": "put",
      "tag": "Profile",
      "description": "Personal Access Token Update",
      "parameters": [
        {
          "name": "created",
          "schema": "string",
          "description": ""
        },
        {
          "name": "expiry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "id",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scopes",
          "schema": "string",
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Personal Access Token is a token generated manually to access the API without going through an OAuth login.  Personal Access Tokens can have scopes just like OAuth tokens do, and are commonly used to give access to command-line tools like the Linode CLI, or when writing your own integrations.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/regions",
      "method": "getRegions",
      "httpMethod": "get",
      "tag": "Regions",
      "description": "Regions List",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/regions/{regionId}",
      "method": "getRegion",
      "httpMethod": "get",
      "tag": "Regions",
      "description": "Region View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An area where Linode services are available."
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets",
      "method": "getTickets",
      "httpMethod": "get",
      "tag": "Support",
      "description": "Support Tickets List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets",
      "method": "createTicket",
      "httpMethod": "post",
      "tag": "Support",
      "description": "Support Ticket Open",
      "parameters": [
        {
          "name": "database_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "domain_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "firewall_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "lkecluster_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "longviewclient_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "managed_issue",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "nodebalancer_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "summary",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vlan",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "volume_id",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Support Ticket opened on your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets/{ticketId}",
      "method": "getTicket",
      "httpMethod": "get",
      "tag": "Support",
      "description": "Support Ticket View",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Support Ticket opened on your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets/{ticketId}/attachments",
      "method": "createTicketAttachment",
      "httpMethod": "post",
      "tag": "Support",
      "description": "Support Ticket Attachment Create",
      "parameters": [
        {
          "name": "file",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets/{ticketId}/close",
      "method": "closeTicket",
      "httpMethod": "post",
      "tag": "Support",
      "description": "Support Ticket Close",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets/{ticketId}/replies",
      "method": "getTicketReplies",
      "httpMethod": "get",
      "tag": "Support",
      "description": "Replies List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/support/tickets/{ticketId}/replies",
      "method": "createTicketReply",
      "httpMethod": "post",
      "tag": "Support",
      "description": "Reply Create",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An object representing a reply to a Support Ticket.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags",
      "method": "getTags",
      "httpMethod": "get",
      "tag": "Tags",
      "description": "Tags List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags",
      "method": "createTag",
      "httpMethod": "post",
      "tag": "Tags",
      "description": "New Tag Create",
      "parameters": [
        {
          "name": "domains",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "linodes",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "nodebalancers",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "volumes",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A tag that has been applied to an object on your Account. Tags are currently for organizational purposes only.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{label}",
      "method": "deleteTag",
      "httpMethod": "delete",
      "tag": "Tags",
      "description": "Tag Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/tags/{label}",
      "method": "getTaggedObjects",
      "httpMethod": "get",
      "tag": "Tags",
      "description": "Tagged Objects List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes",
      "method": "getVolumes",
      "httpMethod": "get",
      "tag": "Volumes",
      "description": "Volumes List",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes",
      "method": "createVolume",
      "httpMethod": "post",
      "tag": "Volumes",
      "description": "Volume Create",
      "parameters": [
        {
          "name": "config_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "size",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}",
      "method": "deleteVolume",
      "httpMethod": "delete",
      "tag": "Volumes",
      "description": "Volume Delete",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}",
      "method": "getVolume",
      "httpMethod": "get",
      "tag": "Volumes",
      "description": "Volume View",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of a collection to return."
        },
        {
          "name": "page_size",
          "schema": "integer",
          "description": "The number of items to return per page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}",
      "method": "updateVolume",
      "httpMethod": "put",
      "tag": "Volumes",
      "description": "Volume Update",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}/attach",
      "method": "attachVolume",
      "httpMethod": "post",
      "tag": "Volumes",
      "description": "Volume Attach",
      "parameters": [
        {
          "name": "config_id",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "linode_id",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "persist_across_boots",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}/clone",
      "method": "cloneVolume",
      "httpMethod": "post",
      "tag": "Volumes",
      "description": "Volume Clone",
      "parameters": [
        {
          "name": "label",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}/detach",
      "method": "detachVolume",
      "httpMethod": "post",
      "tag": "Volumes",
      "description": "Volume Detach",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/volumes/{volumeId}/resize",
      "method": "resizeVolume",
      "httpMethod": "post",
      "tag": "Volumes",
      "description": "Volume Resize",
      "parameters": [
        {
          "name": "size",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A Block Storage Volume associated with your Account.\n"
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.linode.com/v4",
  "apiDescription": "## Introduction\nThe Linode API provides the ability to programmatically manage the full\nrange of Linode products and services.\n\nThis reference is designed to assist application developers and system\nadministrators.  Each endpoint includes descriptions, request syntax, and\nexamples using standard HTTP requests. Response data is returned in JSON\nformat.\n\n\nThis document was generated from our OpenAPI Specification.  See the\n<a target=\"_top\" href=\"https://www.openapis.org\">OpenAPI website</a> for more information.\n\n<a target=\"_top\" href=\"/docs/api/openapi.yaml\">Download the Linode OpenAPI Specification</a>.\n\n\n## Changelog\n\n<a target=\"_top\" href=\"/docs/products/tools/api/release-notes/\">View our Changelog</a> to see release\nnotes on all changes made to our API.\n\n## Access and Authentication\n\nSome endpoints are publicly accessible without requiring authentication.\nAll endpoints affecting your Account, however, require either a Personal\nAccess Token or OAuth authentication (when using third-party\napplications).\n\n### Personal Access Token\n\nThe easiest way to access the API is with a Personal Access Token (PAT)\ngenerated from the\n<a target=\"_top\" href=\"https://cloud.linode.com/profile/tokens\">Linode Cloud Manager</a> or\nthe [Create Personal Access Token](/docs/api/profile/#personal-access-token-create) endpoint.\n\nAll scopes for the OAuth security model ([defined below](/docs/api/#oauth)) apply to this\nsecurity model as well.\n\n### Authentication\n\n| Security Scheme Type: | HTTP |\n|-----------------------|------|\n| **HTTP Authorization Scheme** | bearer |\n\n## OAuth\n\nIf you only need to access the Linode API for personal use,\nwe recommend that you create a [personal access token](/docs/api/#personal-access-token).\nIf you're designing an application that can authenticate with an arbitrary Linode user, then\nyou should use the OAuth 2.0 workflows presented in this section.\n\nFor a more detailed example of an OAuth 2.0 implementation, see our guide on [How to Create an OAuth App with the Linode Python API Library](/docs/products/tools/api/guides/create-an-oauth-app-with-the-python-api-library/#oauth-2-authentication-exchange).\n\nBefore you implement OAuth in your application, you first need to create an OAuth client. You can do this [with the Linode API](/docs/api/account/#oauth-client-create) or [via the Cloud Manager](https://cloud.linode.com/profile/clients):\n\n  - When creating the client, you'll supply a `label` and a `redirect_uri` (referred to as the Callback URL in the Cloud Manager).\n  - The response from this endpoint will give you a `client_id` and a `secret`.\n  - Clients can be public or private, and are private by default. You can choose to make the client public when it is created.\n    - A private client is used with applications which can securely store the client secret (that is, the secret returned to you when you first created the client). For example, an application running on a secured server that only the developer has access to would use a private OAuth client. This is also called a confidential client in some OAuth documentation.\n    - A public client is used with applications where the client secret is not guaranteed to be secure. For example, a native app running on a user's computer may not be able to keep the client secret safe, as a user could potentially inspect the source of the application. So, native apps or apps that run in a user's browser should use a public client.\n    - Public and private clients follow different workflows, as described below.\n\n### OAuth Workflow\n\nThe OAuth workflow is a series of exchanges between your third-party app and Linode. The workflow is used\nto authenticate a user before an application can start making API calls on the user's behalf.\n\nNotes:\n\n- With respect to the diagram in [section 1.2 of RFC 6749](https://tools.ietf.org/html/rfc6749#section-1.2), login.linode.com (referred to in this section as the *login server*)\nis the Resource Owner and the Authorization Server; api.linode.com (referred to here as the *api server*) is the Resource Server.\n- The OAuth spec refers to the private and public workflows listed below as the [authorization code flow](https://tools.ietf.org/html/rfc6749#section-1.3.1) and [implicit flow](https://tools.ietf.org/html/rfc6749#section-1.3.2).\n\n| PRIVATE WORKFLOW | PUBLIC WORKFLOW |\n|------------------|------------------|\n| 1.  The user visits the application's website and is directed to login with Linode. | 1.  The user visits the application's website and is directed to login with Linode. |\n| 2.  Your application then redirects the user to Linode's [login server](https://login.linode.com) with the client application's `client_id` and requested OAuth `scope`, which should appear in the URL of the login page. | 2.  Your application then redirects the user to Linode's [login server](https://login.linode.com) with the client application's `client_id` and requested OAuth `scope`, which should appear in the URL of the login page. |\n| 3.  The user logs into the login server with their username and password. | 3.  The user logs into the login server with their username and password. |\n| 4.  The login server redirects the user to the specificed redirect URL with a temporary authorization `code` (exchange code) in the URL. | 4.  The login server redirects the user back to your application with an OAuth `access_token` embedded in the redirect URL's hash. This is temporary and expires in two hours. No `refresh_token` is issued. Therefore, once the `access_token` expires, a new one will need to be issued by having the user log in again. |\n| 5.  The application issues a POST request (*see additional details below*) to the login server with the exchange code, `client_id`, and the client application's `client_secret`. | |\n| 6.  The login server responds to the client application with a new OAuth `access_token` and `refresh_token`. The `access_token` is set to expire in two hours. | |\n| 7.  The `refresh_token` can be used by contacting the login server with the `client_id`, `client_secret`, `grant_type`, and `refresh_token` to get a new OAuth `access_token` and `refresh_token`. The new `access_token` is good for another two hours, and the new `refresh_token` can be used to extend the session again by this same method (*see additional details below*). | |\n\n#### OAuth Private Workflow - Additional Details\n\nThe following information expands on steps 5 through 7 of the private workflow:\n\nOnce the user has logged into Linode and you have received an exchange code,\nyou will need to trade that exchange code for an `access_token` and `refresh_token`. You\ndo this by making an HTTP POST request to the following address:\n\n```\nhttps://login.linode.com/oauth/token\n```\n\nMake this request as `application/x-www-form-urlencoded` or as\n`multipart/form-data` and include the following parameters in the POST body:\n\n| PARAMETER | DESCRIPTION |\n|-----------|-------------|\n| client_id | Your app's client ID. |\n| client_secret | Your app's client secret. |\n| code | The code you just received from the redirect. |\n\nYou'll get a response like this:\n\n```json\n{\n  \"scope\": \"linodes:read_write\",\n  \"access_token\": \"03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c\",\n  \"refresh_token\": \"f2ec9712e616fdb5a2a21aa0e88cfadea7502ebc62cf5bd758dbcd65e1803bad\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 7200\n}\n```\n\nIncluded in the response is an `access_token`. With this token, you can proceed to make\nauthenticated HTTP requests to the API by adding this header to each request:\n\n```\nAuthorization: Bearer 03d084436a6c91fbafd5c4b20c82e5056a2e9ce1635920c30dc8d81dc7a6665c\n```\n\nThis `access_token` is set to expire in two hours. To refresh access prior to expiration, make another request to the same URL with the following parameters in the POST body:\n\n| PARAMETER | DESCRIPTION |\n|-----------|-------------|\n| grant_type | The grant type you're using. Use \"refresh_token\" when refreshing access. |\n| client_id | Your app's client ID. |\n| client_secret | Your app's client secret. |\n| refresh_token | The `refresh_token` received from the previous response. |\n\nYou'll get another response with an updated `access_token` and `refresh_token`, which can then be used to refresh access again.\n\n### OAuth Reference\n\n| Security Scheme Type | OAuth 2.0 |\n|-----------------------|--------|\n| **Authorization URL** | `https://login.linode.com/oauth/authorize` |\n| **Token URL** | `https://login.linode.com/oauth/token` |\n| **Scopes** | <ul><li>`account:read_only` - Allows access to GET information about your Account.</li><li>`account:read_write` - Allows access to all endpoints related to your Account.</li><li>`databases:read_only` - Allows access to GET Managed Databases on your Account.</li><li>`databases:read_write` - Allows access to all endpoints related to your Managed Databases.</li><li>`domains:read_only` - Allows access to GET Domains on your Account.</li><li>`domains:read_write` - Allows access to all Domain endpoints.</li><li>`events:read_only` - Allows access to GET your Events.</li><li>`events:read_write` - Allows access to all endpoints related to your Events.</li><li>`firewall:read_only` - Allows access to GET information about your Firewalls.</li><li>`firewall:read_write` - Allows access to all Firewall endpoints.</li><li>`images:read_only` - Allows access to GET your Images.</li><li>`images:read_write` - Allows access to all endpoints related to your Images.</li><li>`ips:read_only` - Allows access to GET your ips.</li><li>`ips:read_write` - Allows access to all endpoints related to your ips.</li><li>`linodes:read_only` - Allows access to GET Linodes on your Account.</li><li>`linodes:read_write` - Allow access to all endpoints related to your Linodes.</li><li>`lke:read_only` - Allows access to GET LKE Clusters on your Account.</li><li>`lke:read_write` - Allows access to all endpoints related to LKE Clusters on your Account.</li><li>`longview:read_only` - Allows access to GET your Longview Clients.</li><li>`longview:read_write` - Allows access to all endpoints related to your Longview Clients.</li><li>`nodebalancers:read_only` - Allows access to GET NodeBalancers on your Account.</li><li>`nodebalancers:read_write` - Allows access to all NodeBalancer endpoints.</li><li>`object_storage:read_only` - Allows access to GET information related to your Object Storage.</li><li>`object_storage:read_write` - Allows access to all Object Storage endpoints.</li><li>`stackscripts:read_only` - Allows access to GET your StackScripts.</li><li>`stackscripts:read_write` - Allows access to all endpoints related to your StackScripts.</li><li>`volumes:read_only` - Allows access to GET your Volumes.</li><li>`volumes:read_write` - Allows access to all endpoints related to your Volumes.</li></ul><br/>|\n\n## Requests\n\nRequests must be made over HTTPS to ensure transactions are encrypted. Data included in requests must be supplied in json format unless otherwise specified in the command description.\n\nThe following request methods are supported:\n\n| METHOD  | USAGE |\n|---------|-------|\n| GET     | Retrieves data about collections and individual resources. |\n| POST    | For collections, creates a new resource of that type. Also used to perform actions on action endpoints. |\n| PUT     | Updates an existing resource. |\n| DELETE  | Deletes a resource. This is a destructive action. |\n| HEAD    | Returns only the response header information of a GET request |\n| OPTIONS | Provides permitted communication options for a command |\n\n## Responses\n\n### Response Status Codes\n\nActions will return one of the following HTTP response status codes:\n\n| STATUS  | DESCRIPTION |\n|---------|-------------|\n| 200 OK  | The request was successful. |\n| 202 Accepted | The request was successful, but processing has not been completed. The response body includes a \"warnings\" array containing the details of incomplete processes. |\n| 204 No Content | The server successfully fulfilled the request and there is no additional content to send. |\n| 299 Deprecated | The request was successful, but involved a deprecated endpoint. The response body includes a \"warnings\" array containing warning messages. |\n| 400 Bad Request | You submitted an invalid request (missing parameters, etc.). |\n| 401 Unauthorized | You failed to authenticate for this resource. |\n| 403 Forbidden | You are authenticated, but don't have permission to do this. |\n| 404 Not Found | The resource you're requesting does not exist. |\n| 429 Too Many Requests | You've hit a rate limit. |\n| 500 Internal Server Error | Please [open a Support Ticket](/docs/api/support/#support-ticket-open). |\n\n### Response Headers\n\nThere are many ways to access response header information for individual command URLs, depending on how you are accessing the Linode API. For example, to view HTTP response headers for the `/regions` endpoint when making requests with `curl`, use the `-I` or `--head` option as follows:\n\n```Shell\ncurl -I https://api.linode.com/v4/regions\n```\n\nResponses may include the following headers:\n\n| HEADER | DESCRIPTION | EXAMPLE |\n|--------|-------------|---------|\n| Access-Control-Allow-Credentials | Responses to credentialed requests are exposed to frontend JavaScript code. | true |\n| Access-Control-Allow-Headers | All permissible request headers for this endpoint. | Authorization, Origin, X-Requested-With, Content-Type, Accept, X-Filter |\n| Access-Control-Allow-Methods | Permissible HTTP methods for this endpoint | HEAD, GET, OPTIONS, POST, PUT, DELETE |\n| Access-Control-Allow-Origin | Indicates origin access permissions. The wildcard character `*` means any origin can access the resource. | * |\n| Access-Control-Expose-Headers | Available headers to include in response to cross-origin requests. | X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Status |\n| Cache-Control | Controls caching in browsers and shared caches such as CDNs. | private, max-age=60, s-maxage=60 |\n| Content-Security-Policy | Controls which resources are allowed to load. By default, resources do not load. | default-src 'none' |\n| Content-Type | All responses are in json format. | application/json |\n| Content-Warning | A message containing instructions for successful requests that were not able to be completed. | Please contact support for assistance. |\n| Retry-After | The remaining time in seconds until the current [rate limit](#rate-limiting) window resets. | 60 |\n| Strict-Transport-Security | Enforces HTTPS-only access until the returned time in seconds. | max-age=31536000 |\n| Vary | Optional request headers that affected the response content. | Authorization, X-Filter |\n| X-Accepted-OAuth-Scopes | Required [scopes](#oauth-reference) for accessing the requested command. | linodes:read_only |\n| X-Customer-UUID | A unique identifier for the account owning the the [personal access token](#personal-access-token) that was used for the request. | ABCDEF01-3456-789A-BCDEF0123456789A |\n| X-OAuth-Scopes | Allowed [scopes](#oauth-reference) associated with the [personal access token](#personal-access-token) that was used for the request. A value of `*` indicates read/write access for all scope categories. | images:read_write linodes:read_only |\n| X-RateLimit-Limit | The maximum number of permitted requests during the [rate limit](#rate-limiting) window for this endpoint. | 800 |\n| X-RateLimit-Remaining | The remaining number of permitted requests in the current [rate limit](#rate-limiting) window. | 798 |\n| X-RateLimit-Reset | The time when the current [rate limit](#rate-limiting) window rests in UTC epoch seconds. | 1674747739 |\n| X-Spec-Version | The current API version that handled the request. | 4.150.0 |\n\n## Errors\n\nSuccess is indicated via <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\" target=\"_top\">Standard HTTP status codes</a>.\n`2xx` codes indicate success, `4xx` codes indicate a request error, and\n`5xx` errors indicate a server error. A\nrequest error might be an invalid input, a required parameter being omitted,\nor a malformed request. A server error means something went wrong processing\nyour request. If this occurs, please\n[open a Support Ticket](/docs/api/support/#support-ticket-open)\nand let us know. Though errors are logged and we work quickly to resolve issues,\nopening a ticket and providing us with reproducable steps and data is always helpful.\n\nThe `errors` field is an array of the things that went wrong with your request.\nWe will try to include as many of the problems in the response as possible,\nbut it's conceivable that fixing these errors and resubmitting may result in\nnew errors coming back once we are able to get further along in the process\nof handling your request.\n\nWithin each error object, the `field` parameter will be included if the error\npertains to a specific field in the JSON you've submitted. This will be\nomitted if there is no relevant field. The `reason` is a human-readable\nexplanation of the error, and will always be included.\n\n## Pagination\n\nResource lists are always paginated. The response will look similar to this:\n\n```json\n{\n    \"data\": [ ... ],\n    \"page\": 1,\n    \"pages\": 3,\n    \"results\": 300\n}\n```\n\n* Pages start at 1. You may retrieve a specific page of results by adding\n`?page=x` to your URL (for example, `?page=4`). If the value of `page`\nexceeds `2^64/page_size`, the last possible page will be returned.\n\n\n* Page sizes default to 100,\nand can be set to return between 25 and 500. Page size can be set using\n`?page_size=x`.\n\n## Filtering and Sorting\n\nCollections are searchable by fields they include, marked in the spec as\n`x-linode-filterable: true`. Filters are passed\nin the `X-Filter` header and are formatted as JSON objects. Here is a request\ncall for Linode Types in our \"standard\" class:\n\n```Shell\ncurl \"https://api.linode.com/v4/linode/types\" \\\n  -H 'X-Filter: { \"class\": \"standard\" }'\n```\n\nThe filter object's keys are the keys of the object you're filtering,\nand the values are accepted values. You can add multiple filters by\nincluding more than one key. For example, filtering for \"standard\" Linode\nTypes that offer one vcpu:\n\n```Shell\n curl \"https://api.linode.com/v4/linode/types\" \\\n  -H 'X-Filter: { \"class\": \"standard\", \"vcpus\": 1 }'\n```\n\nIn the above example, both filters are combined with an \"and\" operation.\nHowever, if you wanted either Types with one vcpu or Types in our \"standard\"\nclass, you can add an operator:\n\n ```Shell\ncurl \"https://api.linode.com/v4/linode/types\" \\\n  -H 'X-Filter: { \"+or\": [ { \"vcpus\": 1 }, { \"class\": \"standard\" } ] }'\n```\n\nEach filter in the `+or` array is its own filter object, and all conditions\nin it are combined with an \"and\" operation as they were in the previous example.\n\nOther operators are also available. Operators are keys of a Filter JSON\nobject. Their value must be of the appropriate type, and they are evaluated\nas described below:\n\n| OPERATOR | TYPE   | DESCRIPTION                       |\n|----------|--------|-----------------------------------|\n| +and     | array  | All conditions must be true.       |\n| +or      | array  | One condition must be true.        |\n| +gt      | number | Value must be greater than number. |\n| +gte     | number | Value must be greater than or equal to number. |\n| +lt      | number | Value must be less than number. |\n| +lte     | number | Value must be less than or equal to number. |\n| +contains | string | Given string must be in the value. |\n| +neq      | string | Does not equal the value.          |\n| +order_by | string | Attribute to order the results by - must be filterable. |\n| +order    | string | Either \"asc\" or \"desc\". Defaults to \"asc\". Requires `+order_by`. |\n\nFor example, filtering for [Linode Types](/docs/api/linode-types/)\nthat offer memory equal to or higher than 61440:\n\n```Shell\ncurl \"https://api.linode.com/v4/linode/types\" \\\n  -H '\n    X-Filter: {\n      \"memory\": {\n        \"+gte\": 61440\n      }\n    }'\n```\n\nYou can combine and nest operators to construct arbitrarily-complex queries.\nFor example, give me all [Linode Types](/docs/api/linode-types/)\nwhich are either `standard` or `highmem` class, or\nhave between 12 and 20 vcpus:\n\n```Shell\ncurl \"https://api.linode.com/v4/linode/types\" \\\n  -H '\n    X-Filter: {\n      \"+or\": [\n        {\n          \"+or\": [\n            {\n              \"class\": \"standard\"\n            },\n            {\n              \"class\": \"highmem\"\n            }\n          ]\n        },\n        {\n          \"+and\": [\n            {\n              \"vcpus\": {\n                \"+gte\": 12\n              }\n            },\n            {\n              \"vcpus\": {\n                \"+lte\": 20\n              }\n            }\n          ]\n        }\n      ]\n    }'\n```\n## Time Values\n\nAll times returned by the API are in UTC, regardless of the timezone configured within your user's profile (see `timezone` property within [Profile View](/docs/api/profile/#profile-view__responses)).\n\n## Rate Limiting\n\nRate limits on API requests help maintain the health and stability of the Linode API. Accordingly, every endpoint of the Linode API applies a rate limit on a per user basis as determined by OAuth token for authenticated requests or IP address for public endpoints.\n\nEach rate limit consists of a total number of requests and a time window. For example, if an endpoint has a rate limit of 800 requests per minute, then up to 800 requests over a one minute window are permitted. Subsequent requests to an endpoint after hitting a rate limit return a 429 error. You can successfully remake requests to that endpoint after the rate limit window resets.\n\n### Linode APIv4 Rate Limits\n\nWith the Linode API, you can generally make up to 1,600 general API requests every two minutes. Additionally, all endpoints have a rate limit of 800 requests per minute unless otherwise specified below.\n\n**Note:** There may be rate limiting applied at other levels outside of the API, for example, at the load balancer.\n\nCreating Linodes has a dedicated rate limit of 10 requests per 30 seconds. That endpoint is:\n\n* [Linode Create](/docs/api/linode-instances/#linode-create)\n\n`/stats` endpoints have their own dedicated rate limits of 100 requests per minute. These endpoints are:\n\n* [View Linode Statistics](/docs/api/linode-instances/#linode-statistics-view)\n* [View Linode Statistics (year/month)](/docs/api/linode-instances/#statistics-yearmonth-view)\n* [View NodeBalancer Statistics](/docs/api/nodebalancers/#nodebalancer-statistics-view)\n* [List Managed Stats](/docs/api/managed/#managed-stats-list)\n\nObject Storage endpoints have a dedicated rate limit of 750 requests per second. The Object Storage endpoints are:\n\n* [Object Storage Endpoints](/docs/api/object-storage/)\n\nOpening Support Tickets has a dedicated rate limit of 2 requests per minute. That endpoint is:\n\n* [Open Support Ticket](/docs/api/support/#support-ticket-open)\n\nAccepting Service Transfers has a dedicated rate limit of 2 requests per minute. That endpoint is:\n\n* [Service Transfer Accept](/docs/api/account/#service-transfer-accept)\n\n### Rate Limit HTTP Response Headers\n\nThe Linode API includes the following HTTP response headers which are designed to help you avoid hitting rate limits which might disrupt your applications:\n\n* **X-RateLimit-Limit**: The maximum number of permitted requests during the rate limit window for this endpoint.\n* **X-RateLimit-Remaining**: The remaining number of permitted requests in the current rate limit window.\n* **X-RateLimit-Reset**: The time when the current rate limit window rests in UTC epoch seconds.\n* **Retry-After**: The remaining time in seconds until the current rate limit window resets.\n\n## CLI (Command Line Interface)\n\nThe <a href=\"https://github.com/linode/linode-cli\" target=\"_top\">Linode CLI</a> allows you to easily\nwork with the API using intuitive and simple syntax. It requires a\n[Personal Access Token](/docs/api/#personal-access-token)\nfor authentication, and gives you access to all of the features and functionality\nof the Linode API that are documented here with CLI examples.\n\nEndpoints that do not have CLI examples are currently unavailable through the CLI, but\ncan be accessed via other methods such as Shell commands and other third-party applications.\n",
  "apiTitle": "Linode API",
  "endpoints": 226,
  "sdkMethods": 712,
  "schemas": 114,
  "parameters": 565,
  "contactUrl": "https://linode.com",
  "contactEmail": "support@linode.com",
  "difficultyScore": 910.25,
  "difficulty": "Very Hard"
}