{
  "providerName": "anchore.io",
  "openApiRaw": "https://raw.githubusercontent.com/anchore/anchore-engine/master/anchore_engine/services/apiext/swagger/swagger.yaml",
  "securitySchemes": {},
  "homepage": "anchore.io",
  "apiVersion": "0.1.20",
  "methods": [
    {
      "url": "/",
      "method": "ping",
      "httpMethod": "get",
      "description": "Simple status check",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/account",
      "method": "getUsersAccount",
      "httpMethod": "get",
      "tag": "Identity",
      "description": "List the account for the authenticated user",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account information"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts",
      "method": "listAccounts",
      "httpMethod": "get",
      "tag": "User Management",
      "description": "List user summaries. Only available to the system admin user.",
      "parameters": [
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": "Filter accounts by state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts",
      "method": "createAccount",
      "httpMethod": "post",
      "tag": "User Management",
      "description": "Create a new user. Only avaialble to admin user.",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account information"
        },
        {
          "statusCode": "409",
          "description": "Generic HTTP API error response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}",
      "method": "deleteAccount",
      "httpMethod": "delete",
      "tag": "User Management",
      "description": "Delete the specified account, only allowed if the account is in the disabled state. All users will be deleted along with the account and all resources will be garbage collected",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}",
      "method": "getAccount",
      "httpMethod": "get",
      "tag": "User Management",
      "description": "Get info about an user. Only available to admin user. Uses the main user Id, not a username.",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Account information"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/state",
      "method": "updateAccountState",
      "httpMethod": "put",
      "tag": "User Management",
      "description": "Update the state of an account to either enabled or disabled. For deletion use the DELETE route",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A summary of account status"
        },
        {
          "statusCode": "400",
          "description": "Generic HTTP API error response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users",
      "method": "listUsers",
      "httpMethod": "get",
      "tag": "User Management",
      "description": "List accounts for the user",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of user credential records"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users",
      "method": "createUser",
      "httpMethod": "post",
      "tag": "User Management",
      "description": "Create a new user",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication."
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users/{username}",
      "method": "deleteUser",
      "httpMethod": "delete",
      "tag": "User Management",
      "description": "Delete a specific user credential by username of the credential. Cannot be the credential used to authenticate the request.",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users/{username}",
      "method": "getAccountUser",
      "httpMethod": "get",
      "tag": "User Management",
      "description": "Get a specific user in the specified account",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users/{username}/credentials",
      "method": "deleteUserCredential",
      "httpMethod": "delete",
      "tag": "User Management",
      "description": "Delete a credential by type",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "credentialType",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users/{username}/credentials",
      "method": "listUserCredentials",
      "httpMethod": "get",
      "tag": "User Management",
      "description": "Get current credential summary",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/accounts/{accountname}/users/{username}/credentials",
      "method": "createUserCredential",
      "httpMethod": "post",
      "tag": "User Management",
      "description": "add/replace credential",
      "parameters": [
        {
          "name": "accountname",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives",
      "method": "listArchives",
      "httpMethod": "get",
      "tag": "Archives",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A summarization of the available archives, a place to for long-term storage of audit, analysis, or other data to remove it from the system's working set but keep it available."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/images",
      "method": "listAnalysisArchive",
      "httpMethod": "get",
      "tag": "Archives",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of archived analyses"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/images",
      "method": "archiveImageAnalysis",
      "httpMethod": "post",
      "tag": "Archives",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of analysis archive add results"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/images/{imageDigest}",
      "method": "deleteArchivedAnalysis",
      "httpMethod": "delete",
      "tag": "Archives",
      "description": "Performs a synchronous archive deletion",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/images/{imageDigest}",
      "method": "getArchivedAnalysis",
      "httpMethod": "get",
      "tag": "Archives",
      "description": "Returns the archive metadata record identifying the image and tags for the analysis in the archive.",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": "The image digest to identify the image analysis"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/rules",
      "method": "listAnalysisArchiveRules",
      "httpMethod": "get",
      "tag": "Archives",
      "description": "",
      "parameters": [
        {
          "name": "systemGlobal",
          "schema": "boolean",
          "required": false,
          "description": "If true include system global rules (owned by admin) even for non-admin users. Defaults to true if not set. Can be set to false to exclude globals"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Rule set for automatic archiving of system objects and flushing of archived objects (permament delete)."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/rules",
      "method": "createAnalysisArchiveRule",
      "httpMethod": "post",
      "tag": "Archives",
      "description": "",
      "parameters": [
        {
          "name": "analysis_age_days",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "exclude",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "last_updated",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "max_images_per_account",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "rule_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "selector",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "system_global",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tag_versions_newer",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "transition",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A rule for auto-archiving image analysis by time and/or tag-history"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/rules/{ruleId}",
      "method": "deleteAnalysisArchiveRule",
      "httpMethod": "delete",
      "tag": "Archives",
      "description": "",
      "parameters": [
        {
          "name": "ruleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/archives/rules/{ruleId}",
      "method": "getAnalysisArchiveRule",
      "httpMethod": "get",
      "tag": "Archives",
      "description": "",
      "parameters": [
        {
          "name": "ruleId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A rule for auto-archiving image analysis by time and/or tag-history"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/event_types",
      "method": "listEventTypes",
      "httpMethod": "get",
      "tag": "Events",
      "description": "List Event Types",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Array of EventCategory objects"
        }
      ]
    },
    {
      "url": "/events",
      "method": "deleteEvents",
      "httpMethod": "delete",
      "tag": "Events",
      "description": "Delete Events",
      "parameters": [
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Delete events that occurred before the timestamp"
        },
        {
          "name": "since",
          "schema": "string",
          "required": false,
          "description": "Delete events that occurred after the timestamp"
        },
        {
          "name": "level",
          "schema": "string",
          "required": false,
          "description": "Delete events that match the level - INFO or ERROR"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/events",
      "method": "listEvents",
      "httpMethod": "get",
      "tag": "Events",
      "description": "List Events",
      "parameters": [
        {
          "name": "sourceServicename",
          "schema": "string",
          "required": false,
          "description": "Filter events by the originating service"
        },
        {
          "name": "sourceHostid",
          "schema": "string",
          "required": false,
          "description": "Filter events by the originating host ID"
        },
        {
          "name": "eventType",
          "schema": "string",
          "required": false,
          "description": "Filter events by a prefix match on the event type (e.g. \"user.image.\")"
        },
        {
          "name": "resourceType",
          "schema": "string",
          "required": false,
          "description": "Filter events by the type of resource - tag, imageDigest, repository etc"
        },
        {
          "name": "resourceId",
          "schema": "string",
          "required": false,
          "description": "Filter events by the id of the resource"
        },
        {
          "name": "level",
          "schema": "string",
          "required": false,
          "description": "Filter events by the level - INFO or ERROR"
        },
        {
          "name": "since",
          "schema": "string",
          "required": false,
          "description": "Return events that occurred after the timestamp"
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Return events that occurred before the timestamp"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "Pagination controls - return the nth page of results. Defaults to first page if left empty"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of events in the result set. Defaults to 100 if left empty"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Response envelope for paginated listing of events"
        }
      ]
    },
    {
      "url": "/events/{eventId}",
      "method": "deleteEvent",
      "httpMethod": "delete",
      "tag": "Events",
      "description": "Delete Event",
      "parameters": [
        {
          "name": "eventId",
          "schema": "string",
          "required": true,
          "description": "Event ID of the event to be deleted"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": []
    },
    {
      "url": "/events/{eventId}",
      "method": "getEvent",
      "httpMethod": "get",
      "tag": "Events",
      "description": "Get Event",
      "parameters": [
        {
          "name": "eventId",
          "schema": "string",
          "required": true,
          "description": "Event ID of the event for lookup"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A record of occurance of an asynchronous event triggered either by system or by user activity"
        }
      ]
    },
    {
      "url": "/health",
      "method": "healthCheck",
      "httpMethod": "get",
      "description": "Health check, returns 200 and no body if service is running",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/images",
      "method": "deleteImagesAsync",
      "httpMethod": "delete",
      "tag": "Images",
      "description": "Bulk mark images for deletion",
      "parameters": [
        {
          "name": "imageDigests",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of delete image responses"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images",
      "method": "listImages",
      "httpMethod": "get",
      "tag": "Images",
      "description": "List all visible images",
      "parameters": [
        {
          "name": "history",
          "schema": "boolean",
          "required": false,
          "description": "Include image history in the response"
        },
        {
          "name": "fulltag",
          "schema": "string",
          "required": false,
          "description": "Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1)"
        },
        {
          "name": "imageStatus",
          "schema": "string",
          "required": false,
          "description": "Filter by image_status value on the record. Default if omitted is 'active'."
        },
        {
          "name": "analysisStatus",
          "schema": "string",
          "required": false,
          "description": "Filter by analysis_status value on the record."
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Anchore Images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images",
      "method": "addImage",
      "httpMethod": "post",
      "tag": "Images",
      "description": "Submit a new image for analysis by the engine",
      "parameters": [
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": "Override any existing entry in the system"
        },
        {
          "name": "autosubscribe",
          "schema": "boolean",
          "required": false,
          "description": "Instruct engine to automatically begin watching the added tag for updates from registry"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "annotations",
          "schema": "object",
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "digest",
          "schema": "string",
          "description": ""
        },
        {
          "name": "dockerfile",
          "schema": "string",
          "description": ""
        },
        {
          "name": "image_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "source",
          "schema": "object",
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Anchore Images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}",
      "method": "deleteImageByImageId",
      "httpMethod": "delete",
      "tag": "Images",
      "description": "Delete image by docker imageId",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Image deletion response containing status and details"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}",
      "method": "getImageByImageId",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Lookup image by docker imageId",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Anchore Images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/check",
      "method": "getImagePolicyCheckByImageId",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Check policy evaluation status for image",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "detail",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "history",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Evaluation response object"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/content",
      "method": "listImageContentByImageid",
      "httpMethod": "get",
      "tag": "Images",
      "description": "List image content types",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/content/files",
      "method": "getImageContentByTypeImageIdFiles",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type files",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "File content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/content/java",
      "method": "getImageContentByTypeImageIdJavapackage",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type java",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Java package content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/content/{ctype}",
      "method": "getImageContentByTypeImageId",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ctype",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Package content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/vuln",
      "method": "getImageVulnerabilityTypesByImageId",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get vulnerability types",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/by_id/{imageId}/vuln/{vtype}",
      "method": "getImageVulnerabilitiesByTypeImageId",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get vulnerabilities by type",
      "parameters": [
        {
          "name": "imageId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vtype",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "envelope containing list of vulnerabilities"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}",
      "method": "deleteImage",
      "httpMethod": "delete",
      "tag": "Images",
      "description": "Delete an image analysis",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "force",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Image deletion response containing status and details"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}",
      "method": "getImage",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get image metadata",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Anchore Images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/artifacts/file_content_search",
      "method": "listFileContentSearchResults",
      "httpMethod": "get",
      "description": "Return a list of analyzer artifacts of the specified type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Simple array of RetrievedFileMetadata objects"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/artifacts/retrieved_files",
      "method": "listRetrievedFiles",
      "httpMethod": "get",
      "description": "Return a list of analyzer artifacts of the specified type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Simple array of RetrievedFileMetadata objects"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/artifacts/secret_search",
      "method": "listSecretSearchResults",
      "httpMethod": "get",
      "description": "Return a list of analyzer artifacts of the specified type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Simple array of RetrievedFileMetadata objects"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/check",
      "method": "getImagePolicyCheck",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Check policy evaluation status for image",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "policyId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "tag",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "detail",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "history",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "interactive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Evaluation response object"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/content",
      "method": "listImageContent",
      "httpMethod": "get",
      "tag": "Images",
      "description": "List image content types",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/content/files",
      "method": "getImageContentByTypeFiles",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type files",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "File content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/content/java",
      "method": "getImageContentByTypeJavapackage",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type java",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Java package content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/content/malware",
      "method": "getImageContentByTypeMalware",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type malware",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Malware listing response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/content/{ctype}",
      "method": "getImageContentByType",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the content of an image by type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "ctype",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Package content listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/metadata",
      "method": "listImageMetadata",
      "httpMethod": "get",
      "tag": "Images",
      "description": "List image metadata types",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/metadata/{mtype}",
      "method": "getImageMetadataByType",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get the metadata of an image by type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mtype",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Generic wrapper for metadata listings from images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/sboms/native",
      "method": "getImageSbomNative",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get image sbom in the native Anchore format",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/vuln",
      "method": "getImageVulnerabilityTypes",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get vulnerability types",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/images/{imageDigest}/vuln/{vtype}",
      "method": "getImageVulnerabilitiesByType",
      "httpMethod": "get",
      "tag": "Images",
      "description": "Get vulnerabilities by type",
      "parameters": [
        {
          "name": "imageDigest",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "vtype",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "forceRefresh",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "vendorOnly",
          "schema": "boolean",
          "required": false,
          "description": "Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where `will_not_fix` is False. If false all vulnerabilities are returned regardless of `will_not_fix`"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "envelope containing list of vulnerabilities"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/import/images",
      "method": "importImageArchive",
      "httpMethod": "post",
      "tag": "Import",
      "description": "Import an anchore image tar.gz archive file. This is a deprecated API replaced by the \"/imports/images\" route",
      "parameters": [
        {
          "name": "archive_file",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of Anchore Images"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/imports/images",
      "method": "listOperations",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "Lists in-progress imports",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images",
      "method": "createOperation",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Begin the import of an image analyzed by Syft into the system",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An import record, creating a unique identifier for referencing the operation as well as its state"
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}",
      "method": "invalidateOperation",
      "httpMethod": "delete",
      "tag": "Imports",
      "description": "Invalidate operation ID so it can be garbage collected",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An import record, creating a unique identifier for referencing the operation as well as its state"
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}",
      "method": "getOperation",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "Get detail on a single import",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An import record, creating a unique identifier for referencing the operation as well as its state"
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/dockerfile",
      "method": "listImportDockerfiles",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List uploaded dockerfiles",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/dockerfile",
      "method": "importImageDockerfile",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Begin the import of an image analyzed by Syft into the system",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/image_config",
      "method": "listImportImageConfigs",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List uploaded image configs",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/image_config",
      "method": "importImageConfig",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Import a docker or OCI image config to associate with the image",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/manifest",
      "method": "listImportImageManifests",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List uploaded image manifests",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/manifest",
      "method": "importImageManifest",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Import a docker or OCI distribution manifest to associate with the image",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/packages",
      "method": "listImportPackages",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List uploaded package manifests",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/packages",
      "method": "importImagePackages",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Begin the import of an image analyzed by Syft into the system",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "artifactRelationships",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "artifacts",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "descriptor",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "distro",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "schema",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "source",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/parent_manifest",
      "method": "listImportParentManifests",
      "httpMethod": "get",
      "tag": "Imports",
      "description": "List uploaded parent manifests (manifest lists for a tag)",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/imports/images/{operation_id}/parent_manifest",
      "method": "importImageParentManifest",
      "httpMethod": "post",
      "tag": "Imports",
      "description": "Import a docker or OCI distribution manifest list to associate with the image",
      "parameters": [
        {
          "name": "operationId",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/oauth/token",
      "method": "getOauthToken",
      "httpMethod": "post",
      "description": "Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth",
      "parameters": [
        {
          "name": "client_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "grant_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "description": ""
        },
        {
          "name": "username",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/policies",
      "method": "listPolicies",
      "httpMethod": "get",
      "tag": "Policies",
      "description": "List policies",
      "parameters": [
        {
          "name": "detail",
          "schema": "boolean",
          "required": false,
          "description": "Include policy bundle detail in the form of the full bundle content for each entry"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of PolicyBundleRecord objects"
        }
      ]
    },
    {
      "url": "/policies",
      "method": "addPolicy",
      "httpMethod": "post",
      "tag": "Policies",
      "description": "Add a new policy",
      "parameters": [
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "blacklisted_images",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "comment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "mappings",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "policies",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "version",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "whitelisted_images",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "whitelists",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A policy bundle plus some metadata"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/policies/{policyId}",
      "method": "deletePolicy",
      "httpMethod": "delete",
      "tag": "Policies",
      "description": "Delete policy",
      "parameters": [
        {
          "name": "policyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "404",
          "description": "Generic HTTP API error response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/policies/{policyId}",
      "method": "getPolicy",
      "httpMethod": "get",
      "tag": "Policies",
      "description": "Get specific policy",
      "parameters": [
        {
          "name": "policyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "detail",
          "schema": "boolean",
          "required": false,
          "description": "Include policy bundle detail in the form of the full bundle content for each entry"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of PolicyBundleRecord objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/policies/{policyId}",
      "method": "updatePolicy",
      "httpMethod": "put",
      "tag": "Policies",
      "description": "Update policy",
      "parameters": [
        {
          "name": "policyId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "active",
          "schema": "boolean",
          "required": false,
          "description": "Mark policy as active"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "created_at",
          "schema": "string",
          "description": ""
        },
        {
          "name": "last_updated",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policyId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policy_source",
          "schema": "string",
          "description": ""
        },
        {
          "name": "policybundle",
          "schema": "object",
          "description": ""
        },
        {
          "name": "userId",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of PolicyBundleRecord objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/query/images/by_package",
      "method": "queryImagesByPackage",
      "httpMethod": "get",
      "tag": "Query",
      "description": "List of images containing given package",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": "Name of package to search for (e.g. sed)"
        },
        {
          "name": "packageType",
          "schema": "string",
          "required": false,
          "description": "Type of package to filter on (e.g. dpkg)"
        },
        {
          "name": "version",
          "schema": "string",
          "required": false,
          "description": "Version of named package to filter on (e.g. 4.4-1)"
        },
        {
          "name": "page",
          "schema": "string",
          "required": false,
          "description": "The page of results to fetch. Pages start at 1"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Pagination wrapped list of images that match some filter"
        },
        {
          "statusCode": "400",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/query/images/by_vulnerability",
      "method": "queryImagesByVulnerability",
      "httpMethod": "get",
      "tag": "Query",
      "description": "List images vulnerable to the specific vulnerability ID.",
      "parameters": [
        {
          "name": "vulnerabilityId",
          "schema": "string",
          "required": true,
          "description": "The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001)"
        },
        {
          "name": "namespace",
          "schema": "string",
          "required": false,
          "description": "Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04)"
        },
        {
          "name": "affectedPackage",
          "schema": "string",
          "required": false,
          "description": "Filter results to images with vulnable packages with the given package name (e.g. libssl)"
        },
        {
          "name": "severity",
          "schema": "string",
          "required": false,
          "description": "Filter results to vulnerable package/vulnerability with the given severity"
        },
        {
          "name": "vendorOnly",
          "schema": "boolean",
          "required": false,
          "description": "Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "The page of results to fetch. Pages start at 1"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Pagination wrapped list of images with vulnerabilties that match some filter"
        },
        {
          "statusCode": "400",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/query/vulnerabilities",
      "method": "queryVulnerabilities",
      "httpMethod": "get",
      "tag": "Query",
      "description": "Listing information about given vulnerability",
      "parameters": [
        {
          "name": "id",
          "schema": "array",
          "required": true,
          "description": "The ID of the vulnerability (e.g. CVE-1999-0001)"
        },
        {
          "name": "affectedPackage",
          "schema": "string",
          "required": false,
          "description": "Filter results by specified package name (e.g. sed)"
        },
        {
          "name": "affectedPackageVersion",
          "schema": "string",
          "required": false,
          "description": "Filter results by specified package version (e.g. 4.4-1)"
        },
        {
          "name": "page",
          "schema": "string",
          "required": false,
          "description": "The page of results to fetch. Pages start at 1"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page"
        },
        {
          "name": "namespace",
          "schema": "array",
          "required": false,
          "description": "Namespace(s) to filter vulnerability records by"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A paginated listing of vulnerability records sorted by ID in descending order"
        },
        {
          "statusCode": "400",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/registries",
      "method": "listRegistries",
      "httpMethod": "get",
      "tag": "Registries",
      "description": "List configured registries",
      "parameters": [
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of registry configurations"
        }
      ]
    },
    {
      "url": "/registries",
      "method": "createRegistry",
      "httpMethod": "post",
      "tag": "Registries",
      "description": "Add a new registry",
      "parameters": [
        {
          "name": "validate",
          "schema": "boolean",
          "required": false,
          "description": "flag to determine whether or not to validate registry/credential at registry add time"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "registry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_pass",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_user",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_verify",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of registry configurations"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/registries/{registry}",
      "method": "deleteRegistry",
      "httpMethod": "delete",
      "tag": "Registries",
      "description": "Delete a registry configuration",
      "parameters": [
        {
          "name": "registry",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/registries/{registry}",
      "method": "getRegistry",
      "httpMethod": "get",
      "tag": "Registries",
      "description": "Get a specific registry configuration",
      "parameters": [
        {
          "name": "registry",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of registry configurations"
        }
      ]
    },
    {
      "url": "/registries/{registry}",
      "method": "updateRegistry",
      "httpMethod": "put",
      "tag": "Registries",
      "description": "Update/replace a registry configuration",
      "parameters": [
        {
          "name": "registry",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "validate",
          "schema": "boolean",
          "required": false,
          "description": "flag to determine whether or not to validate registry/credential at registry update time"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "registry",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_name",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_pass",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_user",
          "schema": "string",
          "description": ""
        },
        {
          "name": "registry_verify",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of registry configurations"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/repositories",
      "method": "addRepository",
      "httpMethod": "post",
      "tag": "Repository Credentials",
      "description": "Add repository to watch",
      "parameters": [
        {
          "name": "repository",
          "schema": "string",
          "required": true,
          "description": "full repository to add e.g. docker.io/library/alpine"
        },
        {
          "name": "autosubscribe",
          "schema": "boolean",
          "required": false,
          "description": "flag to enable/disable auto tag_update activation when new images from a repo are added"
        },
        {
          "name": "dryrun",
          "schema": "boolean",
          "required": false,
          "description": "flag to return tags in the repository without actually watching the repository, default is false"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of subscriptions"
        }
      ]
    },
    {
      "url": "/status",
      "method": "getStatus",
      "httpMethod": "get",
      "tag": "System",
      "description": "Service status",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "System status response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "listSubscriptions",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "description": "List all subscriptions",
      "parameters": [
        {
          "name": "subscriptionKey",
          "schema": "string",
          "required": false,
          "description": "filter only subscriptions matching key"
        },
        {
          "name": "subscriptionType",
          "schema": "string",
          "required": false,
          "description": "filter only subscriptions matching type"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of subscriptions"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/subscriptions",
      "method": "addSubscription",
      "httpMethod": "post",
      "tag": "Subscriptions",
      "description": "Add a subscription of a specific type",
      "parameters": [
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "subscription_key",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subscription_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "subscription_value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of subscriptions"
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}",
      "method": "deleteSubscription",
      "httpMethod": "delete",
      "tag": "Subscriptions",
      "description": "Delete subscriptions of a specific type",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}",
      "method": "getSubscription",
      "httpMethod": "get",
      "tag": "Subscriptions",
      "description": "Get a specific subscription set",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of subscriptions"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/subscriptions/{subscriptionId}",
      "method": "updateSubscription",
      "httpMethod": "put",
      "tag": "Subscriptions",
      "description": "Update an existing and specific subscription",
      "parameters": [
        {
          "name": "subscriptionId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "subscription_value",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of subscriptions"
        }
      ]
    },
    {
      "url": "/summaries/imagetags",
      "method": "listImagetags",
      "httpMethod": "get",
      "tag": "Summaries",
      "description": "List all visible image digests and tags",
      "parameters": [
        {
          "name": "imageStatus",
          "schema": "array",
          "required": false,
          "description": "Filter images in one or more states such as active, deleting. Defaults to active images only if unspecified"
        },
        {
          "name": "xAnchoreAccount",
          "schema": "string",
          "required": false,
          "description": "An account name to change the resource scope of the request to that account, if permissions allow (admin only)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "a list of AnchoreImageTagSummary objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system",
      "method": "getServiceDetail",
      "httpMethod": "get",
      "tag": "System",
      "description": "System status",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "System status response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/error_codes",
      "method": "describeErrorCodes",
      "httpMethod": "get",
      "tag": "System",
      "description": "Describe anchore engine error codes.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of Error Code Descriptions"
        }
      ]
    },
    {
      "url": "/system/feeds",
      "method": "getSystemFeeds",
      "httpMethod": "get",
      "tag": "System",
      "description": "list feeds operations and information",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/feeds",
      "method": "postSystemFeeds",
      "httpMethod": "post",
      "tag": "System",
      "description": "trigger feeds operations",
      "parameters": [
        {
          "name": "flush",
          "schema": "boolean",
          "required": false,
          "description": "instruct system to flush existing data feeds records from anchore-engine"
        },
        {
          "name": "sync",
          "schema": "boolean",
          "required": false,
          "description": "instruct system to re-sync data feeds"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An array of feed sync summaries representing the result of an explicit feed sync operation"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/feeds/{feed}",
      "method": "deleteFeed",
      "httpMethod": "delete",
      "tag": "System",
      "description": "Delete the groups and data for the feed and disable the feed itself",
      "parameters": [
        {
          "name": "feed",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/system/feeds/{feed}",
      "method": "toggleFeedEnabled",
      "httpMethod": "put",
      "tag": "System",
      "description": "Disable the feed so that it does not sync on subsequent sync operations",
      "parameters": [
        {
          "name": "feed",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "Metadata on a single feed based on what the engine finds from querying the endpoints"
        }
      ]
    },
    {
      "url": "/system/feeds/{feed}/{group}",
      "method": "deleteFeedGroup",
      "httpMethod": "delete",
      "tag": "System",
      "description": "Delete the group data and disable the group itself",
      "parameters": [
        {
          "name": "feed",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/system/feeds/{feed}/{group}",
      "method": "toggleGroupEnabled",
      "httpMethod": "put",
      "tag": "System",
      "description": "Disable a specific group within a feed to not sync",
      "parameters": [
        {
          "name": "feed",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "group",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/system/policy_spec",
      "method": "describePolicy",
      "httpMethod": "get",
      "tag": "System",
      "description": "Describe the policy language spec implemented by this service.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of Gate specifications"
        }
      ]
    },
    {
      "url": "/system/services",
      "method": "listServices",
      "httpMethod": "get",
      "tag": "System",
      "description": "List system services",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of service objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/services/{servicename}",
      "method": "getServicesByName",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get a service configuration and state",
      "parameters": [
        {
          "name": "servicename",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of service objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/services/{servicename}/{hostid}",
      "method": "deleteService",
      "httpMethod": "delete",
      "tag": "System",
      "description": "Delete the service config",
      "parameters": [
        {
          "name": "servicename",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "hostid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/services/{servicename}/{hostid}",
      "method": "getServicesByNameAndHost",
      "httpMethod": "get",
      "tag": "System",
      "description": "Get service config for a specific host",
      "parameters": [
        {
          "name": "servicename",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "hostid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A list of service objects"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/system/webhooks/{webhook_type}/test",
      "method": "testWebhook",
      "httpMethod": "post",
      "tag": "System",
      "description": "Adds the capabilities to test a webhook delivery for the given notification type",
      "parameters": [
        {
          "name": "webhookType",
          "schema": "string",
          "required": true,
          "description": "The Webhook Type that we should test"
        },
        {
          "name": "notificationType",
          "schema": "string",
          "required": false,
          "description": "What kind of Notification to send"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": "Generic HTTP API error response"
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/user",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Identity",
      "description": "List authenticated user info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/user/credentials",
      "method": "getCredentials",
      "httpMethod": "get",
      "tag": "Identity",
      "description": "Get current credential summary",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/user/credentials",
      "method": "addCredential",
      "httpMethod": "post",
      "tag": "Identity",
      "description": "add/replace credential",
      "parameters": [
        {
          "name": "created_at",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication."
        },
        {
          "statusCode": "500",
          "description": "Generic HTTP API error response"
        }
      ]
    },
    {
      "url": "/version",
      "method": "versionCheck",
      "httpMethod": "get",
      "description": "Returns the version object for the service, including db schema version info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "Version information for a service"
        }
      ]
    }
  ],
  "apiBaseUrl": "/",
  "apiDescription": "This is the Anchore Engine API. Provides the primary external API for users of the service.",
  "apiTitle": "Anchore Engine API Server",
  "endpoints": 75,
  "sdkMethods": 112,
  "schemas": 149,
  "parameters": 276,
  "contactEmail": "nurmi@anchore.com",
  "difficultyScore": 255.5,
  "difficulty": "Hard"
}