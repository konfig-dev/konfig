{
  "providerName": "clever-cloud.com",
  "openApiRaw": "https://www.clever-cloud.com/doc/api/swagger.json",
  "homepage": "clever-cloud.com",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "//openapi",
      "method": "//openapiGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/application/{appId}/environment",
      "method": "/application/{appId}/environmentGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/application/{appId}/environment",
      "method": "/application/{appId}/environmentPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/authorize",
      "method": "postAuthorize",
      "httpMethod": "post",
      "tag": "all",
      "description": "Handled by our API.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/events/event-socket",
      "method": "/events/eventSocketGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve events as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/github",
      "method": "getGithub",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A simple transaction id"
        }
      ]
    },
    {
      "url": "/github/applications",
      "method": "getGithubApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/github/callback",
      "method": "getGithubCallback",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "error",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "error_description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "error_uri",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Cookie",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/emails",
      "method": "getGithubEmails",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/github/keys",
      "method": "getGithubKeys",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/github/link",
      "method": "deleteGithubLink",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/github/link",
      "method": "getGithubLink",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "transactionId",
          "schema": "string",
          "required": false,
          "description": "From GET /github"
        },
        {
          "name": "redirectUrl",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/login",
      "method": "getGithubLogin",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "redirectUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fromAuthorize",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/redeploy",
      "method": "postGithubRedeploy",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "User-Agent",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "X-Github-Event",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "X-Hub-Signature",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/signup",
      "method": "getGithubSignup",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "redirectUrl",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fromAuthorize",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/signup",
      "method": "postGithubSignup",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "transactionId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "otherId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "otherEmail",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "autoLink",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "terms",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/github/username",
      "method": "getGithubUsername",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/logs-socket/{appId}",
      "method": "/logsSocket/{appId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "WebSocket to get logs for :appID. Optional queryString arg bind_to_es=true to bind WS on log storage and not real time AMQP broker",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/drains",
      "method": "/logs/drainsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch all the logs drains (ccadmin dedicated route)",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/logs/drains/{drainId}",
      "method": "/logs/drains/{drainId}Put",
      "httpMethod": "put",
      "tag": "all",
      "description": "Fetch all the logs drains (ccadmin dedicated route)",
      "parameters": [
        {
          "name": "drainId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/logs-chunked/{appId}",
      "method": "/logs/logsChunked/{appId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve logs as they come through a chunked, never-ending response",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Application Id"
        },
        {
          "name": "download",
          "schema": "boolean",
          "required": false,
          "description": "Tell the user-agent to download the body as a file"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/logs-socket/{appId}",
      "method": "/logs/logsSocket/{appId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Application Id"
        },
        {
          "name": "since",
          "schema": "string",
          "required": false,
          "description": "Only fetch logs newer than this (ISO-8601 formatted) date"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "A pattern to filter with"
        },
        {
          "name": "deployment_id",
          "schema": "string",
          "required": false,
          "description": "Only fetch logs emitted by this deployment"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}",
      "method": "/logs/{appId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Application Id"
        },
        {
          "name": "limit",
          "schema": "integer",
          "required": false,
          "description": "Number of lines to return"
        },
        {
          "name": "order",
          "schema": "string",
          "required": false,
          "description": "Logs order"
        },
        {
          "name": "after",
          "schema": "string",
          "required": false,
          "description": "Lowest bound for logs date, ISO 8601"
        },
        {
          "name": "before",
          "schema": "string",
          "required": false,
          "description": "Highest bounds for logs date, ISO 8601"
        },
        {
          "name": "filter",
          "schema": "string",
          "required": false,
          "description": "A pattern to filter with"
        },
        {
          "name": "deployment_id",
          "schema": "string",
          "required": false,
          "description": "Only fetch logs emitted by this deployment"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}/drains",
      "method": "/logs/{appId}/drainsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs drains for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}/drains",
      "method": "/logs/{appId}/drainsPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "Add a log drain for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}/drains/:idOrUrl",
      "method": "/logs/{appId}/drains/:idOrUrlDelete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Delete the logs drain by id or url for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}/drains/:idOrUrl",
      "method": "/logs/{appId}/drains/:idOrUrlGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs drain by id or url for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/logs/{appId}/sse",
      "method": "/logs/{appId}/sseGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve logs as they come through a sse connection. To have authorization, you have to add `authorization=oAuthAuthorizationString` as query param.",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/newsfeeds/blog",
      "method": "getNewsfeedsBlog",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/newsfeeds/engineering",
      "method": "getNewsfeedEngineering",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/notifications/emailhooks/{ownerId}",
      "method": "/notifications/emailhooks/{ownerId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "list created e-mail hooks",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/emailhooks/{ownerId}",
      "method": "/notifications/emailhooks/{ownerId}Post",
      "httpMethod": "post",
      "tag": "all",
      "description": "create a hook for e-mail notifications",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/emailhooks/{ownerId}/:id",
      "method": "/notifications/emailhooks/{ownerId}/:idDelete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "delete an e-mail hook",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/emailhooks/{ownerId}/:id",
      "method": "/notifications/emailhooks/{ownerId}/:idPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "edit an e-mail hook",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/info/events",
      "method": "/notifications/info/eventsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "list available events",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/notifications/info/webhookformats",
      "method": "/notifications/info/webhookformatsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "list available webhook formats",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/notifications/webhooks/{ownerId}",
      "method": "/notifications/webhooks/{ownerId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "list created hooks",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/webhooks/{ownerId}",
      "method": "/notifications/webhooks/{ownerId}Post",
      "httpMethod": "post",
      "tag": "all",
      "description": "create a hook for notifications",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/webhooks/{ownerId}/:id",
      "method": "/notifications/webhooks/{ownerId}/:idDelete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "delete a hook",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/notifications/webhooks/{ownerId}/:id",
      "method": "/notifications/webhooks/{ownerId}/:idPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "edit a hook",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/access_token",
      "method": "postOauthAccessToken",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "oauth_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_timestamp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_nonce",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_verifier",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback_confirmed",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/access_token_query",
      "method": "/oauth/accessTokenQueryPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "oauth_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_timestamp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_nonce",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_verifier",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback_confirmed",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/authorize",
      "method": "getOauthAuthorize",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "oauth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Cookie",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/authorize",
      "method": "postOauthAuthorize",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "almighty",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_organisations",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_organisations",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_organisations_services",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_organisations_applications",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_organisations_members",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_organisations_bills",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_organisations_credit_count",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_organisations_consumption_statistics",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_personal_information",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_personal_information",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_ssh_keys",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_services",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "manage_applications",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_bills",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_credit_count",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "access_consumption_statistics",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "Cookie",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/request_token",
      "method": "postOauthRequestToken",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "oauth_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_timestamp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_nonce",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_verifier",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback_confirmed",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/request_token_query",
      "method": "/oauth/requestTokenQueryPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "oauth_consumer_key",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature_method",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_signature",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_timestamp",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_nonce",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_version",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_verifier",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_token_secret",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauth_callback_confirmed",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/oauth/rights",
      "method": "getOauthRights",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/openapi.{type}",
      "method": "/openapi.{type}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get the swagger for this API as {type}",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations",
      "method": "getOrganisations",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "user",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations",
      "method": "postOrganisations",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "VAT",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zipcode",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}",
      "method": "deleteOrganisationsId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}",
      "method": "getOrganisationsId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}",
      "method": "putOrganisationsId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "VAT",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "company",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "zipcode",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders",
      "method": "getOrganisationsIdAddonproviders",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders",
      "method": "postOrganisationsIdAddonproviders",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "api",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A provider"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}",
      "method": "/organisations/{id}/addonproviders/{providerId}Delete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Remove an add-on provider",
      "parameters": [],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}",
      "method": "getOrganisationsIdAddonprovidersProviderId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A provider"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}",
      "method": "putOrganisationsIdAddonprovidersProviderId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "api",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "A provider"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/features",
      "method": "getOrganisationsIdAddonprovidersProviderIdFeatures",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/features",
      "method": "postOrganisationsIdAddonprovidersProviderIdFeatures",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/features/{featureId}",
      "method": "deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans",
      "method": "getOrganisationsIdAddonprovidersProviderIdPlans",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans",
      "method": "postOrganisationsIdAddonprovidersProviderIdPlans",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "features",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "price",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans/{planId}",
      "method": "deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans/{planId}",
      "method": "getOrganisationsIdAddonprovidersProviderIdPlansPlanId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans/{planId}",
      "method": "putOrganisationsIdAddonprovidersProviderIdPlansPlanId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "features",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "price",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}",
      "method": "deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}",
      "method": "putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/sso",
      "method": "getOrganisationsIdAddonsAddonIdSso",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/tags",
      "method": "getOrganisationsIdAddonprovidersProviderIdTags",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addonproviders/{providerId}/testers",
      "method": "postOrganisationsIdAddonprovidersProviderIdTesters",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addons",
      "method": "getOrganisationsIdAddons",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons",
      "method": "postOrganisationsIdAddons",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An addon"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/preorders",
      "method": "/organisations/{id}/addons/preordersPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addons/{addonId}",
      "method": "deleteOrganisationsIdAddonsAddonId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addons/{addonId}",
      "method": "getOrganisationsIdAddonsAddonId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An addon"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}",
      "method": "putOrganisationsIdAddonsAddonId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "An addon"
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/applications",
      "method": "getOrganisationsIdAddonsAddonIdApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/env",
      "method": "getOrganisationsIdAddonsAddonIdEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/instances",
      "method": "/organisations/{id}/addons/{addonId}/instancesGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "List instances for this add-on.",
      "parameters": [
        {
          "name": "deploymentId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "withDeleted",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "List of instances."
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/instances/{instanceId}",
      "method": "/organisations/{id}/addons/{addonId}/instances/{instanceId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get a specific instance for {addonId}",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/migrations",
      "method": "/organisations/{id}/addons/{addonId}/migrationsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get past migrations from add-on.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/migrations",
      "method": "/organisations/{id}/addons/{addonId}/migrationsPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "Start a new add-on migration",
      "parameters": [
        {
          "name": "planId",
          "schema": "string",
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": "The output of the POST to the add-on API."
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/migrations/{migrationId}",
      "method": "/organisations/{id}/addons/{addonId}/migrations/{migrationId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get a given migration",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/sso",
      "method": "/organisations/{id}/addons/{addonId}/ssoGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/tags",
      "method": "getOrganisationsIdAddonsAddonIdTags",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/tags/{tag}",
      "method": "deleteOrganisationsIdAddonsAddonIdTagsTag",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/addons/{addonId}/tags/{tag}",
      "method": "putOrganisationsIdAddonsAddonIdTagsTag",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications",
      "method": "getOrganisationsIdApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications",
      "method": "postOrganisationsIdApplications",
      "httpMethod": "post",
      "tag": "all",
      "description": "Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cancelOnPush",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "deploy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "homogeneous",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVariant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVersion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "minFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "minInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oauthApp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthAppId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthService",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "separateBuild",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shutdownable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "stickySessions",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "zone",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}",
      "method": "deleteOrganisationsIdApplicationsAppId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}",
      "method": "getOrganisationsIdApplicationsAppId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}",
      "method": "putOrganisationsIdApplicationsAppId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cancelOnPush",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "deploy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "homogeneous",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVariant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVersion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "minFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "minInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oauthApp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthAppId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthService",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "separateBuild",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shutdownable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "stickySessions",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "zone",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/addons",
      "method": "getOrganisationsIdApplicationsAppIdAddons",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/addons",
      "method": "postOrganisationsIdApplicationsAppIdAddons",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/addons/env",
      "method": "getOrganisationsIdApplicationsAppIdAddonsEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/addons/{addonId}",
      "method": "deleteOrganisationsIdApplicationsAppIdAddonsAddonId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/branch",
      "method": "/organisations/{id}/applications/{appId}/branchPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/branches",
      "method": "/organisations/{id}/applications/{appId}/branchesGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/buildflavor",
      "method": "/organisations/{id}/applications/{appId}/buildflavorPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/dependencies",
      "method": "getOrganisationsIdApplicationsAppIdDependencies",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/dependencies/env",
      "method": "/organisations/{id}/applications/{appId}/dependencies/envGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}",
      "method": "deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}",
      "method": "putOrganisationsIdApplicationsAppIdDependenciesDependencyId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/dependents",
      "method": "getOrganisationsIdApplicationsAppIdDependents",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/deployments",
      "method": "getOrganisationsIdApplicationsAppIdDeployments",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/deployments/{deploymentId}",
      "method": "/organisations/{id}/applications/{appId}/deployments/{deploymentId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances",
      "method": "deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/env",
      "method": "getOrganisationsIdApplicationsAppIdEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/env",
      "method": "putOrganisationsIdApplicationsAppIdEnv",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/env/{envName}",
      "method": "deleteOrganisationsIdApplicationsAppIdEnvEnvName",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/env/{envName}",
      "method": "putOrganisationsIdApplicationsAppIdEnvEnvName",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/exposed_env",
      "method": "/organisations/{id}/applications/{appId}/exposedEnvGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/exposed_env",
      "method": "/organisations/{id}/applications/{appId}/exposedEnvPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/instances",
      "method": "deleteOrganisationsIdApplicationsAppIdInstances",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/instances",
      "method": "getOrganisationsIdApplicationsAppIdInstances",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/instances",
      "method": "postOrganisationsIdApplicationsAppIdInstances",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "commit",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/instances/{instanceId}",
      "method": "/organisations/{id}/applications/{appId}/instances/{instanceId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/tags",
      "method": "getOrganisationsIdApplicationsAppIdTags",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/tags/{tag}",
      "method": "deleteOrganisationsIdApplicationsAppIdTagsTag",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/tags/{tag}",
      "method": "putOrganisationsIdApplicationsAppIdTagsTag",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts",
      "method": "getOrganisationsIdApplicationsAppIdVhosts",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts/favourite",
      "method": "deleteOrganisationsIdApplicationsAppIdVhostsFavourite",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts/favourite",
      "method": "getOrganisationsIdApplicationsAppIdVhostsFavourite",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts/favourite",
      "method": "putOrganisationsIdApplicationsAppIdVhostsFavourite",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "fqdn",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts/{domain}",
      "method": "deleteOrganisationsIdApplicationsAppIdVhostsDomain",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/applications/{appId}/vhosts/{domain}",
      "method": "putOrganisationsIdApplicationsAppIdVhostsDomain",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "fqdn",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/avatar",
      "method": "putOrganisationsIdAvatar",
      "httpMethod": "put",
      "tag": "all",
      "description": "If you want to upload an image from your computer, send the image in the body of the request without anything else.",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/consumers",
      "method": "getOrganisationsIdConsumers",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/consumers",
      "method": "postOrganisationsIdConsumers",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "baseUrl",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "picture",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rights",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/consumers/{key}",
      "method": "deleteOrganisationsIdConsumersKey",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/consumers/{key}",
      "method": "getOrganisationsIdConsumersKey",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/consumers/{key}",
      "method": "putOrganisationsIdConsumersKey",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "baseUrl",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "picture",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rights",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/consumers/{key}/secret",
      "method": "getOrganisationsIdConsumersKeySecret",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/consumptions",
      "method": "getOrganisationsIdConsumptions",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/credits",
      "method": "getOrganisationsIdCredits",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/deployments",
      "method": "getOrganisationsIdDeployments",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/instances",
      "method": "getOrganisationsIdInstances",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/members",
      "method": "getOrganisationsIdMembers",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organisations/{id}/members",
      "method": "postOrganisationsIdMembers",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "invitationKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "job",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/members/{userId}",
      "method": "deleteOrganisationsIdMembersUserId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/members/{userId}",
      "method": "putOrganisationsIdMembersUserId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "job",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payment-info",
      "method": "getOrganisationsIdPaymentInfo",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings",
      "method": "getOrganisationsIdPaymentsBillings",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings",
      "method": "postOrganisationsIdPaymentsBillings",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings/unpaid",
      "method": "/organisations/{id}/payments/billings/unpaidGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings/{bid}",
      "method": "deleteOrganisationsIdPaymentsBillingsBid",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings/{bid}",
      "method": "getOrganisationsIdPaymentsBillingsBid",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings/{bid}",
      "method": "putOrganisationsIdPaymentsBillingsBid",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/billings/{bid}.pdf",
      "method": "getOrganisationsIdPaymentsBillingsBidPdf",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/fullprice/{price}",
      "method": "getOrganisationsIdPaymentsFullPricePrice",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/methods",
      "method": "/organisations/{id}/payments/methodsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/methods",
      "method": "/organisations/{id}/payments/methodsPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/methods/default",
      "method": "/organisations/{id}/payments/methods/defaultGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/methods/default",
      "method": "/organisations/{id}/payments/methods/defaultPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "deviceData",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "token",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/methods/{mId}",
      "method": "/organisations/{id}/payments/methods/{mId}Delete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/monthlyinvoice",
      "method": "/organisations/{id}/payments/monthlyinvoiceGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/monthlyinvoice/maxcredit",
      "method": "/organisations/{id}/payments/monthlyinvoice/maxcreditPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/recurring",
      "method": "deleteOrganisationsIdPaymentsRecurring",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/organisations/{id}/payments/recurring",
      "method": "/organisations/{id}/payments/recurringGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/password_forgotten",
      "method": "getPasswordForgotten",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/password_forgotten",
      "method": "postPasswordForgotten",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "login",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "drop_tokens",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "TesterPass",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/password_forgotten/{key}",
      "method": "getPasswordForgottenKey",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/password_forgotten/{key}",
      "method": "postPasswordForgottenKey",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "pass",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pass2",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/payments/assets/pay_button/{token}/button.png",
      "method": "/payments/assets/payButton/{token}/buttonPngGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/payments/coupons/{name}",
      "method": "getPaymentsCouponsName",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/payments/providers",
      "method": "getPaymentsProviders",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/payments/tokens/stripe",
      "method": "getPaymentsTokensStripe",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/payments/{bid}/end/stripe",
      "method": "/payments/{bid}/end/stripePost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/products/addonproviders",
      "method": "getProductsAddonProviders",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/addonproviders/{provider_id}",
      "method": "getProductsAddonProvidersProviderId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A provider"
        }
      ]
    },
    {
      "url": "/products/addonproviders/{provider_id}/versions",
      "method": "/products/addonproviders/{providerId}/versionsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/products/countries",
      "method": "getProductsCountries",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/countrycodes",
      "method": "getProductsCountrycodes",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/instances",
      "method": "getProductsInstances",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "for",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/instances/{type}-{version}",
      "method": "getProductsInstancesTypeVersion",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "for",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "app",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/products/mfa_kinds",
      "method": "/products/mfaKindsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/products/packages",
      "method": "getProductsPackages",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "coupon",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "orgaId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/products/prices",
      "method": "getProductsPrices",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/products/zones",
      "method": "getProductsZones",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self",
      "method": "deleteSelf",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self",
      "method": "getSelf",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user representation"
        }
      ]
    },
    {
      "url": "/self",
      "method": "putSelf",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lang",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "terms",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "zipcode",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/addons",
      "method": "getSelfAddons",
      "httpMethod": "get",
      "tag": "all",
      "description": "Addon",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/addons",
      "method": "postSelfAddons",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/addons/preorders",
      "method": "/self/addons/preordersPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/addons/{addonId}",
      "method": "deleteSelfAddonsAddonId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/addons/{addonId}",
      "method": "getSelfAddonsAddonId",
      "httpMethod": "get",
      "tag": "all",
      "description": "Specific addon",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "An addon"
        }
      ]
    },
    {
      "url": "/self/addons/{addonId}",
      "method": "putSelfAddonsAddonId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "payment",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plan",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "providerId",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/addons/{addonId}/applications",
      "method": "getSelfAddonsAddonIdApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/addons/{addonId}/env",
      "method": "getSelfAddonsAddonIdEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/addons/{addonId}/plan",
      "method": "putSelfAddonsAddonIdPlan",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "features",
          "schema": "array",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "price",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "slug",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/addons/{addonId}/sso",
      "method": "getSelfAddonsAddonIdSso",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/addons/{addonId}/tags",
      "method": "getSelfAddonsAddonIdTags",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/addons/{addonId}/tags/{tag}",
      "method": "deleteSelfAddonsAddonIdTagsTag",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/addons/{addonId}/tags/{tag}",
      "method": "putSelfAddonsAddonIdTagsTag",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications",
      "method": "getSelfApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications",
      "method": "postSelfApplications",
      "httpMethod": "post",
      "tag": "all",
      "description": "Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cancelOnPush",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "deploy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "homogeneous",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVariant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVersion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "minFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "minInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oauthApp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthAppId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthService",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "separateBuild",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shutdownable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "stickySessions",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "zone",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}",
      "method": "deleteSelfApplicationsAppId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}",
      "method": "getSelfApplicationsAppId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}",
      "method": "putSelfApplicationsAppId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cancelOnPush",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "deploy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "homogeneous",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVariant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVersion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "minFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "minInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oauthApp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthAppId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthService",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "separateBuild",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shutdownable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "stickySessions",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "zone",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/addons",
      "method": "getSelfApplicationsAppIdAddons",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/addons",
      "method": "postSelfApplicationsAppIdAddons",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/addons/env",
      "method": "getSelfApplicationsAppIdAddonsEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/addons/{addonId}",
      "method": "deleteSelfApplicationsAppIdAddonsAddonId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/branch",
      "method": "/self/applications/{appId}/branchPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/branches",
      "method": "/self/applications/{appId}/branchesGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/buildflavor",
      "method": "/self/applications/{appId}/buildflavorPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/dependencies",
      "method": "getSelfApplicationsAppIdDependencies",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/dependencies/env",
      "method": "/self/applications/{appId}/dependencies/envGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/dependencies/{dependencyId}",
      "method": "deleteSelfApplicationsAppIdDependenciesDependencyId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/dependencies/{dependencyId}",
      "method": "getSelfApplicationsAppIdDependenciesDependencyId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "archived",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "cancelOnPush",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "deploy",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "enabled",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "favourite",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "homogeneous",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVariant",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "instanceVersion",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "maxInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "minFlavor",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "minInstances",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "oauthApp",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthAppId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "oauthService",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "separateBuild",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "shutdownable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "stickySessions",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "tags",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "zone",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/dependents",
      "method": "getSelfApplicationsAppIdDependents",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/deployments",
      "method": "getSelfApplicationsAppIdDeployments",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "limit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "offset",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "action",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/deployments/{deploymentId}",
      "method": "/self/applications/{appId}/deployments/{deploymentId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/deployments/{deploymentId}/instances",
      "method": "deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/env",
      "method": "getSelfApplicationsAppIdEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/env",
      "method": "putSelfApplicationsAppIdEnv",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/env/{envName}",
      "method": "deleteSelfApplicationsAppIdEnvEnvName",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/env/{envName}",
      "method": "putSelfApplicationsAppIdEnvEnvName",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/exposed_env",
      "method": "/self/applications/{appId}/exposedEnvGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/exposed_env",
      "method": "/self/applications/{appId}/exposedEnvPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/instances",
      "method": "deleteSelfApplicationsAppIdInstances",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/instances",
      "method": "getSelfApplicationsAppIdInstances",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/instances",
      "method": "postSelfApplicationsAppIdInstances",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "commit",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/instances/{instanceId}",
      "method": "/self/applications/{appId}/instances/{instanceId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/tags",
      "method": "getSelfApplicationsAppIdTags",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/tags/{tag}",
      "method": "deleteSelfApplicationsAppIdTagsTag",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/tags/{tag}",
      "method": "putSelfApplicationsAppIdTagsTag",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/vhosts",
      "method": "getSelfApplicationsAppIdVhosts",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/vhosts/favourite",
      "method": "deleteSelfApplicationsAppIdVhostsFavourite",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/vhosts/favourite",
      "method": "getSelfApplicationsAppIdVhostsFavourite",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/applications/{appId}/vhosts/favourite",
      "method": "putSelfApplicationsAppIdVhostsFavourite",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "fqdn",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/vhosts/{domain}",
      "method": "deleteSelfApplicationsAppIdVhostsDomain",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/applications/{appId}/vhosts/{domain}",
      "method": "putSelfApplicationsAppIdVhostsDomain",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "fqdn",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/avatar",
      "method": "putSelfAvatar",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "source",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/change_password",
      "method": "putSelfChangePassword",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/cli_tokens",
      "method": "/self/cliTokensGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "cli_token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/confirmation_email",
      "method": "getSelfConfirmationEmail",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/consumers",
      "method": "getSelfConsumers",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/consumers",
      "method": "postSelfConsumers",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "baseUrl",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "picture",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rights",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/consumers/{key}",
      "method": "deleteSelfConsumersKey",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/consumers/{key}",
      "method": "getSelfConsumersKey",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/consumers/{key}",
      "method": "putSelfConsumersKey",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "baseUrl",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "picture",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "rights",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "url",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/consumers/{key}/secret",
      "method": "getSelfConsumersKeySecret",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/consumptions",
      "method": "getSelfConsumptions",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "from",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "to",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/credits",
      "method": "getSelfCredits",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/emails",
      "method": "getSelfEmails",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/emails/{email}",
      "method": "deleteSelfEmailsEmail",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/emails/{email}",
      "method": "putSelfEmailsEmail",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/id",
      "method": "getSelfId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/instances",
      "method": "getSelfInstances",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/keys",
      "method": "getSelfKeys",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/keys/{key}",
      "method": "deleteSelfKeysKey",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/keys/{key}",
      "method": "putSelfKeysKey",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "body",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/mfa/{kind}",
      "method": "/self/mfa/{kind}Delete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/mfa/{kind}",
      "method": "/self/mfa/{kind}Post",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/mfa/{kind}",
      "method": "/self/mfa/{kind}Put",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/mfa/{kind}/backupcodes",
      "method": "/self/mfa/{kind}/backupcodesGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/mfa/{kind}/confirmation",
      "method": "/self/mfa/{kind}/confirmationPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payment-info",
      "method": "getSelfPaymentInfo",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings",
      "method": "getSelfPaymentsBillings",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings",
      "method": "postSelfPaymentsBillings",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings/{bid}",
      "method": "deleteSelfPaymentsBillingsBid",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings/{bid}",
      "method": "getSelfPaymentsBillingsBid",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings/{bid}",
      "method": "putSelfPaymentsBillingsBid",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/billings/{bid}.pdf",
      "method": "getSelfPaymentsBillingsBidPdf",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "token",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/self/payments/fullprice/{price}",
      "method": "getSelfPaymentsFullpricePrice",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/methods",
      "method": "getSelfPaymentsMethods",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/methods",
      "method": "postSelfPaymentsMethods",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/methods/default",
      "method": "/self/payments/methods/defaultGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/methods/default",
      "method": "/self/payments/methods/defaultPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/methods/{mId}",
      "method": "deleteSelfPaymentsMethodsMId",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/monthlyinvoice",
      "method": "/self/payments/monthlyinvoiceGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/monthlyinvoice/maxcredit",
      "method": "/self/payments/monthlyinvoice/maxcreditPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/recurring",
      "method": "deleteSelfPaymentsRecurring",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/recurring",
      "method": "/self/payments/recurringGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/payments/tokens/stripe",
      "method": "/self/payments/tokens/stripeGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/tokens",
      "method": "deleteSelfTokens",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/tokens",
      "method": "getSelfTokens",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/tokens/{token}",
      "method": "deleteSelfTokensToken",
      "httpMethod": "delete",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/self/validate_email",
      "method": "getSelfValidateEmail",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "validationKey",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/summary",
      "method": "getSummary",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users",
      "method": "postUsers",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "invitationKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "addonBetaInvitationKey",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "pass",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "url_next",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "terms",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lang",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "password",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "terms",
          "schema": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "zipcode",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/users/{id}",
      "method": "getUsersId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": "A user representation"
        }
      ]
    },
    {
      "url": "/users/{id}/applications",
      "method": "getUsersIdApplications",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/users/{userId}/git-info",
      "method": "getUsersUserIdGitInfo",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/v2/providers/addon-matomo/resources",
      "method": "createMatomo",
      "httpMethod": "post",
      "tag": "all",
      "description": "Create Matomo addon",
      "parameters": [],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v2/providers/addon-matomo/resources/{matomoId}",
      "method": "deleteMatomo",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Delete Matomo addon",
      "parameters": [
        {
          "name": "matomoId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v3/logs/{appId}",
      "method": "/v3/logs/{appId}Get",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/drains",
      "method": "/v3/logs/{appId}/drainsGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs drains for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/drains",
      "method": "/v3/logs/{appId}/drainsPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "Add a log drain for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/drains/:idOrUrl",
      "method": "/v3/logs/{appId}/drains/:idOrUrlDelete",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Delete the logs drain by id or url for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/drains/:idOrUrl",
      "method": "/v3/logs/{appId}/drains/:idOrUrlGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Fetch the logs drain by id or url for a given application",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/logs-chunked",
      "method": "/v3/logs/{appId}/logsChunkedGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve logs as they come through a chunked, never-ending response",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v3/logs/{appId}/logs-socket",
      "method": "/v3/logs/{appId}/logsSocketGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "Retrieve logs as they come through a websocket connection. To have authorization, you have to send a `{ \"message_type\": \"oauth\", \"authorization\": \"oauth authorization string\" }` message",
      "parameters": [
        {
          "name": "appId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/addon-providers/addon-matomo/addons/{matomoId}",
      "method": "getMatomo",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get Matomo addon",
      "parameters": [
        {
          "name": "matomoId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/addon-providers/addon-matomo/token/validate",
      "method": "getMatomoKTokenValidation",
      "httpMethod": "get",
      "tag": "all",
      "description": "Validate a keycloak token",
      "parameters": [
        {
          "name": "keycloakToken",
          "schema": "string",
          "description": "Environment variable injected on the app with 'KEYCLOAK_TOKEN' name"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/addon-providers/config-provider/addons/{configurationProviderId}",
      "method": "getConfigProvider",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get Addon provider configuration",
      "parameters": [
        {
          "name": "configurationProviderId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env",
      "method": "getConfigProviderEnv",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get provider's addon environment",
      "parameters": [
        {
          "name": "configurationProviderId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env",
      "method": "updateConfigProviderEnv",
      "httpMethod": "put",
      "tag": "all",
      "description": "Update provider's addon environment",
      "parameters": [
        {
          "name": "configurationProviderId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups",
      "method": "listNetworkGroups",
      "httpMethod": "get",
      "tag": "all",
      "description": "List Network Groups",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups",
      "method": "createNetworkGroup",
      "httpMethod": "post",
      "tag": "all",
      "description": "Create Network Group",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "409",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}",
      "method": "deleteNetworkGroup",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Delete Network Group",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}",
      "method": "getNetworkGroup",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get Network Group",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers",
      "method": "createNetworkGroupExternalPeer",
      "httpMethod": "post",
      "tag": "all",
      "description": "Add external peer",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}",
      "method": "deleteNetworkGroupExternalPeer",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Remove external peer",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "peerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members",
      "method": "listNetworkGroupMembers",
      "httpMethod": "get",
      "tag": "all",
      "description": "List members",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members",
      "method": "createNetworkGroupMember",
      "httpMethod": "post",
      "tag": "all",
      "description": "Add member",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "email",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "job",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}",
      "method": "deleteNetworkGroupMember",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Remove member",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}",
      "method": "getNetworkGroupMember",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get member",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "memberId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers",
      "method": "listNetworkGroupPeers",
      "httpMethod": "get",
      "tag": "all",
      "description": "List peers",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}",
      "method": "deleteNetworkGroupPeer",
      "httpMethod": "delete",
      "tag": "all",
      "description": "Remove peer",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "peerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": []
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}",
      "method": "getNetworkGroupPeer",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get peer",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "peerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration",
      "method": "getNetworkGroupWireGuardConfiguration",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get WireGuard® configuration",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "peerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream",
      "method": "getNetworkGroupWireGuardConfigurationStream",
      "httpMethod": "get",
      "tag": "all",
      "description": "Get WireGuard® configuration",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "peerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream",
      "method": "getNetworkGroupStream",
      "httpMethod": "get",
      "tag": "all",
      "description": "Network Group SSE",
      "parameters": [
        {
          "name": "ownerId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        },
        {
          "name": "networkGroupId",
          "schema": "string",
          "required": true,
          "description": "Automatically added"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vendor//addons",
      "method": "/vendor//addonsPost",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/vendor//apps/{addonId}/logscollector",
      "method": "/vendor//apps/{addonId}/logscollectorGet",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/vendor/apps",
      "method": "getVendorApps",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "offset",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/vendor/apps/{addonId}",
      "method": "getVendorAppsAddonId",
      "httpMethod": "get",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/vendor/apps/{addonId}",
      "method": "putVendorAppsAddonId",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [],
      "responses": []
    },
    {
      "url": "/vendor/apps/{addonId}/consumptions",
      "method": "postVendorBillingOwnerId",
      "httpMethod": "post",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "cost",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": []
    },
    {
      "url": "/vendor/apps/{addonId}/migration_callback",
      "method": "/vendor/apps/{addonId}/migrationCallbackPut",
      "httpMethod": "put",
      "tag": "all",
      "description": "",
      "parameters": [
        {
          "name": "plan_id",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "region",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": []
    }
  ],
  "apiBaseUrl": "https://api.clever-cloud.com/v2",
  "apiDescription": "Public API for managing Clever-Cloud data and products",
  "apiTitle": "Clever-Cloud API",
  "endpoints": 229,
  "sdkMethods": 454,
  "schemas": 71,
  "parameters": 474,
  "difficultyScore": 608,
  "difficulty": "Very Hard"
}