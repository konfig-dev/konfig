{
  "providerName": "vonage.com",
  "openApiRaw": "https://raw.githubusercontent.com/nexmo/api-specification/master/definitions/vonage-business-cloud/vgis.yml",
  "securitySchemes": {},
  "homepage": "vonage.com",
  "serviceName": "vgis",
  "apiVersion": "1.0.1",
  "methods": [
    {
      "url": "/self",
      "method": "getUser",
      "httpMethod": "get",
      "tag": "Users",
      "description": "User info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/account",
      "method": "getAccount",
      "httpMethod": "get",
      "tag": "Accounts",
      "description": "Account info",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls",
      "method": "listCalls",
      "httpMethod": "get",
      "tag": "Calls",
      "description": "List active calls",
      "parameters": [
        {
          "name": "fromDate",
          "schema": "integer",
          "description": "Return calls that occurred after this point in time"
        },
        {
          "name": "toDate",
          "schema": "integer",
          "description": "Return calls that occurred before this point in time"
        },
        {
          "name": "direction",
          "schema": "string",
          "description": "Filter by call direction. For multiple criteria, seperate values by a comma."
        },
        {
          "name": "states",
          "schema": "string",
          "description": "Filter calls by state. For multiple criteria, seperate values by a comma."
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Page number of calls to return"
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "Return this amount of calls in the response"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort in either ascending or descending order"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Sort calls by property"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls",
      "method": "createCall",
      "httpMethod": "post",
      "tag": "Calls",
      "description": "Place a call",
      "parameters": [
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/count",
      "method": "getCallsCount",
      "httpMethod": "get",
      "tag": "Calls",
      "description": "Get calls count",
      "parameters": [
        {
          "name": "fromDate",
          "schema": "integer",
          "description": "Return calls that occurred after this point in time"
        },
        {
          "name": "toDate",
          "schema": "integer",
          "description": "Return calls that occurred before this point in time"
        },
        {
          "name": "direction",
          "schema": "string",
          "description": "Filter by call direction. For multiple criteria, seperate values by a comma."
        },
        {
          "name": "states",
          "schema": "string",
          "description": "Filter calls by state. For multiple criteria, seperate values by a comma."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}",
      "method": "destroyCall",
      "httpMethod": "delete",
      "tag": "Calls",
      "description": "End a call",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}",
      "method": "getRoles",
      "httpMethod": "get",
      "tag": "Calls",
      "description": "Get a call",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}/answer",
      "method": "callAnswer",
      "httpMethod": "put",
      "tag": "Calls",
      "description": "Answer call (On supported devices)",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}/hold",
      "method": "callUnold",
      "httpMethod": "delete",
      "tag": "Calls",
      "description": "Unhold",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}/hold",
      "method": "callHold",
      "httpMethod": "put",
      "tag": "Calls",
      "description": "Put call on hold",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}/transfer",
      "method": "callTransfer",
      "httpMethod": "post",
      "tag": "Calls",
      "description": "Transfer call",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        },
        {
          "name": "phoneNumber",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/calls/{id}/vmtransfer",
      "method": "callVmTransfer",
      "httpMethod": "put",
      "tag": "Calls",
      "description": "Send call to voicemail",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the call"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/events",
      "method": "listEvents",
      "httpMethod": "get",
      "tag": "Events",
      "description": "List events",
      "parameters": [
        {
          "name": "types",
          "schema": "string",
          "description": "Record type"
        },
        {
          "name": "fromDate",
          "schema": "integer",
          "description": "Return events that occurred after this point in time"
        },
        {
          "name": "toDate",
          "schema": "integer",
          "description": "Return events that occurred before this point in time"
        },
        {
          "name": "direction",
          "schema": "string",
          "description": "Filter by event direction"
        },
        {
          "name": "states",
          "schema": "string",
          "description": "Filter events by state"
        },
        {
          "name": "offset",
          "schema": "integer",
          "description": "Page number of events to return"
        },
        {
          "name": "size",
          "schema": "integer",
          "description": "Return this amount of events in the response"
        },
        {
          "name": "order",
          "schema": "string",
          "description": "Sort in either ascending or descending order'"
        },
        {
          "name": "sort",
          "schema": "string",
          "description": "Sort events by property"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/events/count",
      "method": "getEventsCount",
      "httpMethod": "get",
      "tag": "Events",
      "description": "Get events count",
      "parameters": [
        {
          "name": "fromDate",
          "schema": "integer",
          "description": "Return events that occurred after this point in time"
        },
        {
          "name": "toDate",
          "schema": "integer",
          "description": "Return events that occurred before this point in time"
        },
        {
          "name": "direction",
          "schema": "string",
          "description": "Filter by event direction"
        },
        {
          "name": "states",
          "schema": "string",
          "description": "Filter events by state"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/events/{id}",
      "method": "getEvent",
      "httpMethod": "get",
      "tag": "Events",
      "description": "Get event",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/webhooks",
      "method": "listWebhooks",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "List web hooks",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/webhooks",
      "method": "createWebhook",
      "httpMethod": "post",
      "tag": "Webhooks",
      "description": "Create a new webhook subscription",
      "parameters": [
        {
          "name": "events",
          "schema": "array",
          "description": ""
        },
        {
          "name": "metadataPolicy",
          "schema": "string",
          "description": ""
        },
        {
          "name": "signingAlgo",
          "schema": "string",
          "description": ""
        },
        {
          "name": "signingKey",
          "schema": "string",
          "description": ""
        },
        {
          "name": "url",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/webhooks/{id}",
      "method": "destroyWebhook",
      "httpMethod": "delete",
      "tag": "Webhooks",
      "description": "Remove a web hook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the webhook"
        }
      ],
      "responses": [
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/webhooks/{id}",
      "method": "viewWebhook",
      "httpMethod": "get",
      "tag": "Webhooks",
      "description": "Get web hook details",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique identifier of the webhook"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    },
    {
      "url": "/self/webhooks/{id}/renew",
      "method": "renewWebhook",
      "httpMethod": "put",
      "tag": "Webhooks",
      "description": "Renews a web hook",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Webhook ID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "400",
          "description": ""
        },
        {
          "statusCode": "422",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.vonage.com/t/vbc.prod/vis/v1",
  "apiDescription": "The Vonage Integration Suite API enables call control and webhooks for call events.\n\nYour application must subscribe to the VonageIntegrationSuite API suite to use this API.\n",
  "apiTitle": "Vonage Integration Suite",
  "endpoints": 15,
  "sdkMethods": 20,
  "schemas": 11,
  "parameters": 43,
  "contactUrl": "https://integrate.vonage.com",
  "contactEmail": "gunifydevops@vonage.com",
  "difficultyScore": 36.25,
  "difficulty": "Easy"
}