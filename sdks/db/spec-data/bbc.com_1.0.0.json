{
  "providerName": "bbc.com",
  "openApiRaw": "http://programmes.api.bbc.com/nitro/api",
  "securitySchemes": {
    "api_key": {
      "in": "query",
      "name": "api_key",
      "type": "apiKey"
    }
  },
  "homepage": "bbc.com",
  "apiVersion": "1.0.0",
  "methods": [
    {
      "url": "/",
      "method": "getApi",
      "httpMethod": "get",
      "tag": "schema",
      "typeScriptTag": "schema",
      "description": "Get API definition",
      "parameters": [],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/availabilities",
      "method": "listAvailability",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Discover details of on-demand availability for programmes and their versions",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* scheduled_start: sort chronologically by scheduled start time/date, ascending\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "availability",
          "schema": "array",
          "required": false,
          "description": "filter for subset of availabilities"
        },
        {
          "name": "descendantsOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of availabilities that have PID as ancestor"
        },
        {
          "name": "mediaSet",
          "schema": "array",
          "required": false,
          "description": "filter for subset of availabilities with media set"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "territory",
          "schema": "array",
          "required": false,
          "description": "filter for availabilities in given territory"
        },
        {
          "name": "debug",
          "schema": "boolean",
          "required": false,
          "description": "Turn on debug information (undocumented)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/broadcasts",
      "method": "listBroadcasts",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Build schedules and find metadata for TV and radio broadcasts",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* start_date: sort chronologically by scheduled start time/date, ascending\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* titles: return ancestor programme titles\n"
        },
        {
          "name": "authority",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that have given authority"
        },
        {
          "name": "descendantsOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that are descendants of the given programme PID"
        },
        {
          "name": "endFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that end on or later than the specified datetime"
        },
        {
          "name": "endTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that end on or earlier than the specified datetime"
        },
        {
          "name": "format",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that are classified in the given format ID"
        },
        {
          "name": "genre",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that are classified in the given genre ID"
        },
        {
          "name": "id",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that have given identifier"
        },
        {
          "name": "item",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts with the given item performed on it"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "people",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that have given contributor"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts having given PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "scheduleDay",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that start on the specified day (BBC time)"
        },
        {
          "name": "scheduleDayFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that start on or after the specified day (BBC time)"
        },
        {
          "name": "scheduleDayTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that start on or before the specified day (BBC time)"
        },
        {
          "name": "serviceMasterBrand",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts with given service master brand"
        },
        {
          "name": "sid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts that are on the specified linear service"
        },
        {
          "name": "startFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that start on or later than the specified datetime"
        },
        {
          "name": "startTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that start on or earlier than the specified datetime"
        },
        {
          "name": "version",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts with given PID as their parent version"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/groups",
      "method": "listGroups",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Find metadata for curated groups: seasons, collections, galleries or franchises",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* pid: sort alphabetically by PID\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* alternate_images: mixin to return the alternate images for a group\n* group_for: mixin to return links to programme entities that group belongs to\n* images: mixin to add image information for a group\n* related_links: mixin to return related links for the group\n"
        },
        {
          "name": "forDescendantsOf",
          "schema": "string",
          "required": false,
          "description": "filter for groups related to given programme or its descendants"
        },
        {
          "name": "forProgramme",
          "schema": "string",
          "required": false,
          "description": "filter for subset of groups directly related to a given programme"
        },
        {
          "name": "group",
          "schema": "string",
          "required": false,
          "description": "filter for subset of groups which belong to the given group pid"
        },
        {
          "name": "groupType",
          "schema": "array",
          "required": false,
          "description": "filter for subset of groups that have the given group type"
        },
        {
          "name": "member",
          "schema": "string",
          "required": false,
          "description": "filter for subset of groups which contain an entity with the given pid as a member"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for groups by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for groups by partner PID"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of seasons, collections, galleries or franchises having given PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of groups matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "embargoed",
          "schema": "string",
          "required": false,
          "description": "Control return of embargoed items (undocumented)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/images",
      "method": "listImages",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Find metadata for images",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* group_position: sort numerically by position, ascending only\n* pid: sort alphabetically by PID\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "group",
          "schema": "string",
          "required": false,
          "description": "filter for images belonging to the given group (i.e. Gallery)"
        },
        {
          "name": "imageType",
          "schema": "array",
          "required": false,
          "description": "filter for images by type"
        },
        {
          "name": "isAlternateImageFor",
          "schema": "string",
          "required": false,
          "description": "filter for alternate images by entity PID"
        },
        {
          "name": "isImageFor",
          "schema": "string",
          "required": false,
          "description": "filter for images by entity PID"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for images by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for images by partner PID"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of images having given PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of images matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "embargoed",
          "schema": "string",
          "required": false,
          "description": "Control return of embargoed items (undocumented)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/items",
      "method": "listItems",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Look inside programmes to find segments: chapters, tracks and more",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* pid: sort by pid, descending\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* contributions: mixin to return information about contributors to items\n* images: mixin to add image information for an item\n* offset: mixin to return programme segment offsets, works in conjunction with programme filter\n* play_event: mixin to return programme segment events, works in conjunction with programme or segment_event filters\n"
        },
        {
          "name": "authority",
          "schema": "string",
          "required": false,
          "description": "filter for subset of items that have an ID issued by the given authority"
        },
        {
          "name": "id",
          "schema": "array",
          "required": false,
          "description": "filter for subset of items having given ID"
        },
        {
          "name": "idType",
          "schema": "string",
          "required": false,
          "description": "filter for subset of items that have given an ID of the given type"
        },
        {
          "name": "itemType",
          "schema": "array",
          "required": false,
          "description": "filter for specific type(s) of items"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for items by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for items by partner PID"
        },
        {
          "name": "people",
          "schema": "string",
          "required": false,
          "description": "filter for subset of items that have specified person involved"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of items matching one of the given PIDs"
        },
        {
          "name": "programme",
          "schema": "string",
          "required": false,
          "description": "filter for subset of items that are part of the given programme"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of items matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "segmentEvent",
          "schema": "string",
          "required": false,
          "description": "filter for item with the given segment_event"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/master_brands",
      "method": "listMasterbrands",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "List all Master Brands",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* mid: sort by mid, ascending\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* images: mixin to add image information for a masterbrand\n"
        },
        {
          "name": "mid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of masterbrands that have given identifier"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for masterbrands by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for masterbrands by partner PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of masterbrands matching supplied keyword/phrase (boolean operators permitted)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/people",
      "method": "listPeople",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Find the people behind and in programmes: cast, crew, guests and more",
      "parameters": [
        {
          "name": "authority",
          "schema": "string",
          "required": false,
          "description": "filter for subset of people that have an ID issued by the given authority"
        },
        {
          "name": "hasExternalId",
          "schema": "array",
          "required": false,
          "description": "filter for people who have an external identifier"
        },
        {
          "name": "id",
          "schema": "array",
          "required": false,
          "description": "filter for subset of people having given ID"
        },
        {
          "name": "idType",
          "schema": "string",
          "required": false,
          "description": "filter for subset of people that have given an ID of the given type"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for people by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for people by partner PID"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of people having given PID"
        },
        {
          "name": "programme",
          "schema": "string",
          "required": false,
          "description": "filter for subset of people that have contributed to the given programme pid"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of people matching supplied keyword/phrase (boolean operators permitted)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/pips",
      "method": "listPips",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Look inside pips entities",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes matching supplied keyword/phrase (boolean operators permitted)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/programme_details",
      "method": "listProgrammeDetails",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Exposes programme information for a single pid",
      "parameters": [
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerPid",
          "schema": "string",
          "required": false,
          "description": "Filter for programme information by partner PID"
        },
        {
          "name": "pid",
          "schema": "string",
          "required": false,
          "description": "Filter for programme information for the provided PID"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/programmes",
      "method": "listProgrammes",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Start here for programmes metadata: Brands, Series, Episodes and Clips",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* group_position: sort numerically by position in group, ascending\n* pid: sort alphabetically by PID, descending\n* position: sort numerically by position, ascending\n* promotion: sort by promotion rank, ascending\n* release_date: sort chronologically by release date, descending\n* relevance: sort by weighting of search term (use with q parameter)\n* scheduled_start: sort chronologically by scheduled start time/date, ascending\n* strict_title: sort alphabetically by title, ascending\n* title: sort by title librarian style (ignoring leading 'The', 'A', etc), ascending\n* tree: sort by root pid and then preorder tree sort. Requires entities to have release date.\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* alternate_images: mixin to return the alternate images for a programme\n* ancestor_titles: mixin to return ancestor programme titles\n* availability: mixin to return programme availability information\n* available_simulcasts: mixin to return information about programmes that are currently available as simulcasts\n* available_versions: mixin to return information about programmes that are currently available on demand\n* available_webcasts: mixin to return information about programmes that are currently available as webcasts\n* contributions: mixin to return information about contributors to a programme\n* duration: mixin to return original version duration in programme concept entities\n* genre_groupings: mixin to return list of genre groupings\n* genre_groups: mixin to return list of genre groups\n* images: mixin to add image information for a programme\n* is_embeddable: mixin to add embeddable information for a programme\n* previous_next: mixin to return the programmes which appear before and after a programme (as determined by the sort applied in the request)\n* programme_type: mixin to return the programme type\n* related_links: mixin to return information about related links to a programme\n* titles: mixin to return ancestor programme titles\n* versions_availability: mixin to return information about programmes that are currently available\n"
        },
        {
          "name": "audioDescribed",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that are audio-described"
        },
        {
          "name": "availability",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that have availability"
        },
        {
          "name": "availabilityEntityType",
          "schema": "array",
          "required": false,
          "description": "additional filter when availability=available"
        },
        {
          "name": "availabilityFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes that are available after or at the specified datetime"
        },
        {
          "name": "availabilityType",
          "schema": "array",
          "required": false,
          "description": "filter for a subset of programmes that are available for a given type"
        },
        {
          "name": "childrenOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that have PID as immediate parent"
        },
        {
          "name": "descendantsOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that have PID as ancestor"
        },
        {
          "name": "duration",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that have given duration"
        },
        {
          "name": "entityType",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that have given entity type"
        },
        {
          "name": "format",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with format"
        },
        {
          "name": "genre",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with genre"
        },
        {
          "name": "group",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes which belong to the given group pid"
        },
        {
          "name": "initialLetter",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes with title beginning with initial letter librarian style (ignoring leading 'The', 'An' (Welsh), etc) 0-9 a-z"
        },
        {
          "name": "initialLetterEnd",
          "schema": "string",
          "required": false,
          "description": "Programmes with (librarian) titles whose initial letter is equal/before given letter. Use with initial_letter_start for a range"
        },
        {
          "name": "initialLetterStart",
          "schema": "string",
          "required": false,
          "description": "Programmes with (librarian) titles whose initial letter is equal/after given letter. Use with initial_letter_end for range."
        },
        {
          "name": "initialLetterStrict",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with title beginning with initial letter"
        },
        {
          "name": "item",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with linked to versions which have the given item pids"
        },
        {
          "name": "masterBrand",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with master_brand"
        },
        {
          "name": "mediaSet",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes with media set"
        },
        {
          "name": "mediaType",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with media type"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for programmes by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for programmes by partner PID"
        },
        {
          "name": "paymentType",
          "schema": "array",
          "required": false,
          "description": "filter for a subset of programmes that are of the given payment_type"
        },
        {
          "name": "people",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes with contributions by given people PID"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes having given PID"
        },
        {
          "name": "promotedFor",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes which are promoted for given service"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "signed",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that are signed"
        },
        {
          "name": "tagName",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes with tag"
        },
        {
          "name": "tagScheme",
          "schema": "string",
          "required": false,
          "description": "filter for subset of programmes with a tag"
        },
        {
          "name": "tleo",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes that are TLEOs"
        },
        {
          "name": "version",
          "schema": "array",
          "required": false,
          "description": "filter for subset of programmes with given PID as one of their versions"
        },
        {
          "name": "embargoed",
          "schema": "string",
          "required": false,
          "description": "Control return of embargoed items (undocumented)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/promotions",
      "method": "listPromotions",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Discover metadata for content promotions",
      "parameters": [
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* related_links: mixin to return information about related links to a promotion\n"
        },
        {
          "name": "context",
          "schema": "string",
          "required": false,
          "description": "filter for subset of promotions belonging to a given context"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for promotions by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for promotions by partner PID"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of promotions having given PID"
        },
        {
          "name": "promotedBy",
          "schema": "array",
          "required": false,
          "description": "filter for subset of promotions having given promoted by"
        },
        {
          "name": "promotedFor",
          "schema": "array",
          "required": false,
          "description": "filter for subset of promotions having given promoted for"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of promotions matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "status",
          "schema": "array",
          "required": false,
          "description": "filter for subset of promotions with status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/schedules",
      "method": "listSchedules",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Build schedules and find metadata for TV and radio broadcasts and webcasts",
      "parameters": [
        {
          "name": "sort",
          "schema": "string",
          "required": false,
          "description": "Sorts:\n* start_date: sort chronologically by scheduled start time/date, ascending\n"
        },
        {
          "name": "sortDirection",
          "schema": "string",
          "required": false,
          "description": "Sort direction"
        },
        {
          "name": "mixin",
          "schema": "array",
          "required": false,
          "description": "Mixins:\n* ancestor_titles: return ancestor programme titles\n* images: mixin to add image information for broadcasts and webcasts\n* titles: return ancestor programme titles\n"
        },
        {
          "name": "authority",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that have given authority"
        },
        {
          "name": "descendantsOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that are descendants of the given programme PID"
        },
        {
          "name": "endFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that end on or later than the specified datetime"
        },
        {
          "name": "endTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that end on or earlier than the specified datetime"
        },
        {
          "name": "format",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that are classified in the given format ID"
        },
        {
          "name": "genre",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that are classified in the given genre ID"
        },
        {
          "name": "group",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that have programmes in the given group"
        },
        {
          "name": "id",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that have given identifier"
        },
        {
          "name": "idType",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that have given id type"
        },
        {
          "name": "item",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts with the given item performed on it"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for broadcasts and webcasts by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for broadcasts and webcasts by partner PID"
        },
        {
          "name": "people",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that have given contributor"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts having given PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "repeat",
          "schema": "boolean",
          "required": false,
          "description": "filter to show either only repeats or non-repeats"
        },
        {
          "name": "scheduleDay",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that start on the specified day (BBC time)"
        },
        {
          "name": "scheduleDayFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that start on or after the specified day (BBC time)"
        },
        {
          "name": "scheduleDayTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that start on or before the specified day (BBC time)"
        },
        {
          "name": "serviceMasterBrand",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts with given service master brand"
        },
        {
          "name": "sid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that are on the specified linear service"
        },
        {
          "name": "startFrom",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that start on or later than the specified datetime"
        },
        {
          "name": "startTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts that start on or earlier than the specified datetime"
        },
        {
          "name": "version",
          "schema": "array",
          "required": false,
          "description": "filter for subset of broadcasts and webcasts with given PID as their parent version"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/schema",
      "method": "getXsd",
      "httpMethod": "get",
      "tag": "schema",
      "typeScriptTag": "schema",
      "description": "Get Schema definition",
      "parameters": [],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/services",
      "method": "listServices",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Information about the linear services used for broadcast transmissions",
      "parameters": [
        {
          "name": "endFrom",
          "schema": "string",
          "required": false,
          "description": "Return services that end on or later than the specified datetime"
        },
        {
          "name": "endTo",
          "schema": "string",
          "required": false,
          "description": "filter for subset of broadcasts that end on or earlier than the specified datetime"
        },
        {
          "name": "mid",
          "schema": "array",
          "required": false,
          "description": "filter for services by masterbrand MID"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for services by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for services by partner PID"
        },
        {
          "name": "q",
          "schema": "string",
          "required": false,
          "description": "filter for subset of services matching supplied keyword/phrase (boolean operators permitted)"
        },
        {
          "name": "serviceType",
          "schema": "array",
          "required": false,
          "description": "filter for specified type of linear services"
        },
        {
          "name": "sid",
          "schema": "array",
          "required": false,
          "description": "filter for specified linear service"
        },
        {
          "name": "startFrom",
          "schema": "string",
          "required": false,
          "description": "Return services that start on or later than the specified datetime"
        },
        {
          "name": "startTo",
          "schema": "string",
          "required": false,
          "description": "Return services that start earlier than the specified datetime"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/brands/{pid}",
      "method": "getRawBrand",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw brand",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/brands/{pid}/franchises/",
      "method": "getRawBrandFranchises",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw brand franchise",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/episodes/{pid}",
      "method": "getRawEpisode",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw episode",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/episodes/{pid}/ancestors/",
      "method": "getRawAncestors",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw ancestors",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/episodes/{pid}/formats/",
      "method": "getRawFormats",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw formats",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/episodes/{pid}/genre_groups/",
      "method": "getRawGenreGroups",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw genre groups",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/images/{pid}",
      "method": "getRawImage",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw image",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/master_brands/{mbid}",
      "method": "getRawMasterbrand",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw masterbrand",
      "parameters": [
        {
          "name": "mbid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/promotions/{pid}",
      "method": "getRawPromotion",
      "httpMethod": "get",
      "tag": "Raw",
      "typeScriptTag": "raw",
      "description": "Get raw promotion",
      "parameters": [
        {
          "name": "pid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/versions",
      "method": "listVersions",
      "httpMethod": "get",
      "tag": "feeds",
      "typeScriptTag": "feeds",
      "description": "Metadata on editorial programme versions: original, signed, audio-described, etc",
      "parameters": [
        {
          "name": "availability",
          "schema": "array",
          "required": false,
          "description": "filter for subset of versions that have availability"
        },
        {
          "name": "descendantsOf",
          "schema": "array",
          "required": false,
          "description": "filter for subset of versions having given programme PID"
        },
        {
          "name": "mediaSet",
          "schema": "array",
          "required": false,
          "description": "filter for subset of versions with availability in the given media set"
        },
        {
          "name": "page",
          "schema": "integer",
          "required": false,
          "description": "which page of results to return"
        },
        {
          "name": "pageSize",
          "schema": "integer",
          "required": false,
          "description": "number of results in each page"
        },
        {
          "name": "partnerId",
          "schema": "array",
          "required": false,
          "description": "filter for versions by partner ID"
        },
        {
          "name": "partnerPid",
          "schema": "array",
          "required": false,
          "description": "filter for versions by partner PID"
        },
        {
          "name": "paymentType",
          "schema": "array",
          "required": false,
          "description": "filter for a subset of versions that are of the given payment_type"
        },
        {
          "name": "pid",
          "schema": "array",
          "required": false,
          "description": "filter for subset of versions having given PID"
        },
        {
          "name": "embargoed",
          "schema": "string",
          "required": false,
          "description": "Control return of embargoed items (undocumented)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://programmes.api.bbc.com",
  "apiDescription": "BBC Nitro is the BBC's application programming interface (API) for BBC Programmes Metadata.",
  "apiTitle": "BBC Nitro API",
  "endpoints": 25,
  "sdkMethods": 25,
  "schemas": 219,
  "parameters": 213,
  "contactUrl": "http://developer.bbc.co.uk/",
  "contactEmail": "nitro@bbc.co.uk",
  "difficultyScore": 187.75,
  "difficulty": "Hard"
}