{
  "providerName": "openfintech.io",
  "openApiRaw": "https://docs.openfintech.io/swagger.yaml",
  "securitySchemes": {},
  "homepage": "openfintech.io",
  "apiVersion": "2017-08-24T00:00:00.000Z",
  "methods": [
    {
      "url": "/banks",
      "method": "/banksGet",
      "httpMethod": "get",
      "tag": "Banks",
      "description": "List of banks",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[sortCode]",
          "schema": "string",
          "description": "Filtering by banks code."
        },
        {
          "name": "filter[code]",
          "schema": "string",
          "description": "Filtering by code."
        },
        {
          "name": "filter[status]",
          "schema": "array",
          "description": "Filtration by status."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| code | -code |\n| status | -status |\n| sort_code | -sort_code |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/banks/{id}",
      "method": "/banks/{id}Get",
      "httpMethod": "get",
      "tag": "Banks",
      "description": "Bank by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/countries",
      "method": "/countriesGet",
      "httpMethod": "get",
      "tag": "Countries",
      "description": "List of countries",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[region]",
          "schema": "array",
          "description": "Filtration by region."
        },
        {
          "name": "filter[subRegion]",
          "schema": "array",
          "description": "Filtration by sub region."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| area | -area |\n| population | -population |\n| region | -region |\n| sub_region | -sub_region |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/countries/{id}",
      "method": "/countries/{id}Get",
      "httpMethod": "get",
      "tag": "Countries",
      "description": "Country by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/currencies",
      "method": "/currenciesGet",
      "httpMethod": "get",
      "tag": "Currencies",
      "description": "List of currencies",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[search]",
          "schema": "string",
          "description": "Full text search with name, code, type, code_iso_alpha3, code_jsons_alpha, code_estandards_alpha, category."
        },
        {
          "name": "filter[codeIsoAlpha3]",
          "schema": "string",
          "description": "Filtering by ISO code."
        },
        {
          "name": "filter[codeIsoNumeric3]",
          "schema": "integer",
          "description": "Filtering by ISO number."
        },
        {
          "name": "filter[codeEstandardsAlpha]",
          "schema": "string",
          "description": "Filtering by estandards code."
        },
        {
          "name": "filter[currencyType]",
          "schema": "array",
          "description": "Filtration by currency type."
        },
        {
          "name": "filter[category]",
          "schema": "array",
          "description": "Filtration by category."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| type | -type |\n| category | -category |\n| code | -code |\n| code_iso_alpha3 | -code_iso_alpha3 |\n| code_iso_numeric3 | -code_iso_numeric3 |\n| code_estandards_alpha | -code_estandards_alpha |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/currencies/{id}",
      "method": "/currencies/{id}Get",
      "httpMethod": "get",
      "tag": "Currencies",
      "description": "Currency by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/deposit-methods",
      "method": "/depositMethodsGet",
      "httpMethod": "get",
      "tag": "Deposit methods",
      "description": "List of deposit methods",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[search]",
          "schema": "string",
          "description": "Full text search with id, name, code, category."
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        },
        {
          "name": "filter[code]",
          "schema": "string",
          "description": "Filtering by code."
        },
        {
          "name": "filter[processorName]",
          "schema": "string",
          "description": "Filtering by processor_name."
        },
        {
          "name": "filter[category]",
          "schema": "array",
          "description": "Filtering by category."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| code | -code |\n| processor_name | -processor_name |\n| category | -category |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/deposit-methods/{id}",
      "method": "/depositMethods/{id}Get",
      "httpMethod": "get",
      "tag": "Deposit methods",
      "description": "Deposit method by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/exchangers",
      "method": "/exchangersGet",
      "httpMethod": "get",
      "tag": "Exchangers",
      "description": "List of exchangers",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        },
        {
          "name": "filter[status]",
          "schema": "array",
          "description": "Filtration by status."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| status | -status |\n| wmid | -wmid |\n| rate_type | -rate_type |\n| rates_export_standard | <nobr>-rates_export_standard</nobr> |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/exchangers/{id}",
      "method": "/exchangers/{id}Get",
      "httpMethod": "get",
      "tag": "Exchangers",
      "description": "Exchanger by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/merchant-industries",
      "method": "/merchantIndustriesGet",
      "httpMethod": "get",
      "tag": "Merchant industries",
      "description": "List of merchant industries",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/merchant-industries/{id}",
      "method": "/merchantIndustries/{id}Get",
      "httpMethod": "get",
      "tag": "Merchant industries",
      "description": "Merchant industry by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations",
      "method": "/organizationsGet",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "List of organizations",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[search]",
          "schema": "string",
          "description": "Full text search with id, name, code."
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        },
        {
          "name": "filter[code]",
          "schema": "string",
          "description": "Filtering by code."
        },
        {
          "name": "filter[status]",
          "schema": "array",
          "description": "Filtration by status."
        },
        {
          "name": "filter[industries]",
          "schema": "string",
          "description": "Filtering by industries."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| code | -code |\n| status | -status |\n| description | -description |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/organizations/{id}",
      "method": "/organizations/{id}Get",
      "httpMethod": "get",
      "tag": "Organizations",
      "description": "Organization by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-methods",
      "method": "/paymentMethodsGet",
      "httpMethod": "get",
      "tag": "Payment methods",
      "description": "List of payment methods",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[search]",
          "schema": "string",
          "description": "Full text search with id, name, code, category."
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        },
        {
          "name": "filter[code]",
          "schema": "string",
          "description": "Filtering by code."
        },
        {
          "name": "filter[processorName]",
          "schema": "string",
          "description": "Filtering by processor_name."
        },
        {
          "name": "filter[category]",
          "schema": "array",
          "description": "Filtering by category."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| code | -code |\n| processor_name | -processor_name |\n| category | -category |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-methods/{id}",
      "method": "/paymentMethods/{id}Get",
      "httpMethod": "get",
      "tag": "Payment methods",
      "description": "Payment method by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-providers",
      "method": "/paymentProvidersGet",
      "httpMethod": "get",
      "tag": "Payment providers",
      "description": "List of payment providers",
      "parameters": [
        {
          "name": "page[number]",
          "schema": "integer",
          "description": "Current page number."
        },
        {
          "name": "page[size]",
          "schema": "integer",
          "description": "Page size.<br>*Default value: 100*\n"
        },
        {
          "name": "filter[search]",
          "schema": "string",
          "description": "Full text search with id, code, name."
        },
        {
          "name": "filter[name]",
          "schema": "string",
          "description": "Filtering by name."
        },
        {
          "name": "filter[code]",
          "schema": "string",
          "description": "Filtering by code."
        },
        {
          "name": "filter[types]",
          "schema": "array",
          "description": "Filtering by types."
        },
        {
          "name": "filter[salesChannels]",
          "schema": "array",
          "description": "Filtering by sales channels."
        },
        {
          "name": "filter[features]",
          "schema": "array",
          "description": "Filtering by features."
        },
        {
          "name": "sort",
          "schema": "array",
          "description": "Sort params:<br>\n\n| ASC | DESC |\n|-----|------|\n| name | -name |\n| code | -code |\n"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    },
    {
      "url": "/payment-providers/{id}",
      "method": "/paymentProviders/{id}Get",
      "httpMethod": "get",
      "tag": "Payment providers",
      "description": "Payment provider by ID",
      "parameters": [
        {
          "name": "id",
          "schema": "string",
          "required": true,
          "description": "Unique ID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.openfintech.io/v1",
  "apiDescription": "# Introduction\n[OpenFinTech.io](https://openfintech.io) is an open database that comprises of standardized primary data for FinTech industry.<br>\nIt contains such information as geolocation data (countries, cities, regions), organizations, currencies (national, digital, virtual, crypto), banks, digital exchangers, payment providers (PSP), payment methods, etc.<br>\nIt is created for communication of cross-integrated micro-services on \"one language\". This is achieved through standardization of entity identifiers that are used to exchange information among different services.<br>\n\n### UML\nUML Domain Model diagram you can find [here](https://api.openfintech.io/public_domain_model.png).<br>\n\n### Persistence\nEntities are updated not more than 1 time per day.<br>\n\n### Terms and Conditions\nThis *OpenFinTech.io* is made available under the [Open Database License](http://opendatacommons.org/licenses/odbl/1.0/).<br>\nAny rights in individual contents of the database are licensed under the [Database Contents License](http://opendatacommons.org/licenses/dbcl/1.0/).<br>\n\n### Contacts\nFor any questions, please email - info@openfintech.io<br>\nOr you can contact us at <a href=\"https://gitter.im/paymaxicom/openfintech.io\">Gitter</a><br>\n\nPowered by [Paymaxi](https://www.paymaxi.com)\n\n# Get Started\n\nIf you use [POSTMAN](https://www.getpostman.com) or similar program which can operate with swagger`s files - just [download](https://docs.openfintech.io) our spec and [import it](https://www.getpostman.com/docs/importing_swagger). Also you can try live [API demo](https://api.openfintech.io).\n\n## Overview\n\nThe OpenFinTech API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API has predictable, resource-oriented URLs, and uses HTTP response codes to indicate API errors.<br>\nAPI is based on [JSON API](http://jsonapi.org) standard. JSON is returned by all API responses, including errors, although our API libraries convert responses to appropriate language-specific objects.<br>\nJSON API requires use of the JSON API media type (`application/vnd.api+json`) for exchanging data.<br>\n### Additional Request Headers\n#### ACCEPT HEADER\nYour requests should always include the header:\n```curl\nAccept: application/vnd.api+json\n```\n\n## Authentication\n\nTo use OpenFinTech API no needed authorization.\n\n## Versioning\n\nWhen we make changes to the API, we release new, dated versions. The current version is **2017-08-24**. Read our [API upgrades guide]() to see our API changelog and to learn more about backwards compatibility.\n\n## Pagination\n\nOpenFinTech APIs to retrieve lists of banks, currencies and other resources - paginated to **100** items by default. The pagination information will be included in the list API response under the node name `meta` - contains information about listed objects [`total` - contains information about total count of listed objects, `pages` - count of pages], `links` - contain links to navigate between pages [`first` - link to first page, `prev` - link to previous page, `next` - link to next page, `last` - link to last page].<br>\nBy default first page will be listed. For navigating through pages, use the page parameter (e.g. `page[number]`, `page[size]`).<br>\nThe `page[size]` parameter can be used to set the number of records that you want to receive in the response.<br>\nThe `page[number]` parameter can be used to set needed page number.<br>\nExample of response:\n```json\n{\n  \"meta\": {\n    \"total\": 419,\n    \"pages\": 42\n  },\n  \"links\": {\n    \"first\": \"/v1/{path}?page[number]=1&page[size]=10\",\n    \"prev\": \"/v1/{path}?page[number]=39&page[size]=10\",\n    \"next\": \"/v1/{path}?page[number]=41&page[size]=10\",\n    \"last\": \"/v1/{path}?page[number]=42&page[size]=10\"\n  }\n```\n\n### Sorting\n\nOpenFinTech\\`s API supported query parameter to sort result collection [e.g. `?sort=code`]. Information about available parameters may be found in the endpoint description. Positive parameter [e.g. `?sort=code`] points to ascending sorting, negative  [e.g. `?sort=-code`] - to descending sorting. Also, supported multiple sorting parameters [e.g. `?sort=code, -name, id`, etc.]\n```curl\nhttps://api.openfintech.io/v1/countries?sort=name,-area\n```\n\n### Filtering\n\nFiltering provided by unique query key `filter[*filtering_condition*]`. Information about available parameters may be found in the endpoint description.\n```curl\nhttps://api.openfintech.io/v1/countries?filter[region]=europe\n```\n\n## Images\n\nOpenFinTech provides two types of images: icons and logos. To get one of those types you should to use next url pattern:\n``` curl\nhttps://api.openfintech.io/v1/{path}/{id}/{icon/logo}\n```\nAlso, images can be resized by adding next parameters: `h={height}&w={width}`. For example, you want to get organization icon with width equals to 20 pixels:\n``` curl\nhttps://api.openfintech.io/v1/organizations/{id}/icon?w=20&h=20\n```\nIf argument height or width is missing API returns original image with real sizes.\n\n## Errors\n\nAPI uses conventional HTTP response codes to indicate the success or failure of an API request. In general, codes in the `2xx` range indicate success, codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, etc.), and codes in the `5xx` range indicate an error with OpenFinTech's servers (these are rare).\n\n| Code | Description |\n|------|-------------|\n| 200 - OK\t| Everything worked as expected. |\n| 400 - Bad Request |\tThe request was unacceptable, often due to missing a required parameter. |\n| 401 - Unauthorized |\tNo valid API key provided. |\n| 402 - Request Failed\t| The parameters were valid but the request failed. |\n| 404 - Not Found |\tThe requested resource doesn't exist. |\n| 409 - Conflict\t| The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 - Too Many Requests |\tToo many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 - Server Errors |\tSomething went wrong on OpenFinTech's end. (These are rare.) |\n",
  "apiTitle": "OpenFinTech.io",
  "endpoints": 18,
  "sdkMethods": 18,
  "schemas": 93,
  "parameters": 70,
  "difficultyScore": 82,
  "difficulty": "Easy"
}