{
  "providerName": "visma.com",
  "openApiRaw": "https://api.severa.visma.com/psapublicrest/openapidocs/v1.0/doc.json",
  "homepage": "visma.com",
  "apiVersion": "1.0",
  "methods": [
    {
      "url": "/heartbeat/authorized",
      "method": "heartBeatGetAuthorization",
      "httpMethod": "get",
      "tag": "NoScope",
      "description": "Returns http status code 204 for successful authentication.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/heartbeat/database",
      "method": "heartBeatGetDatabaseStatus",
      "httpMethod": "get",
      "tag": "NoScope",
      "description": "Can be used to check the status of the database.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/heartbeat/server",
      "method": "heartBeatGetServerStatus",
      "httpMethod": "get",
      "tag": "NoScope",
      "description": "Can be used to check the status of the REST Api.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities",
      "method": "activitiesGetActivities",
      "httpMethod": "get",
      "tag": "ActivitiesRead",
      "description": "Get all activities of an organization",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "closed",
          "schema": "boolean",
          "description": "Optional: Which activities to fetch - open/closed, Default all."
        },
        {
          "name": "activityCategories",
          "schema": "array",
          "description": "Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all."
        },
        {
          "name": "customerGuids",
          "schema": "array",
          "description": "Optional: ID of customer. Default all."
        },
        {
          "name": "includeTasksWithNoCustomer",
          "schema": "boolean",
          "description": "Optional: Include the activities that don't have customer. Default is true."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all."
        },
        {
          "name": "includeTasksWithNoProject",
          "schema": "boolean",
          "description": "Optional: Include the activities that don't have project. Default is true."
        },
        {
          "name": "projectBusinessUnitGuids",
          "schema": "array",
          "description": "Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all."
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": "Optional: ID of the project manager. If not provided, returns for all project managers. Default all."
        },
        {
          "name": "userGuids",
          "schema": "array",
          "description": "Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all."
        },
        {
          "name": "includeAsMember",
          "schema": "boolean",
          "description": "Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include."
        },
        {
          "name": "userKeywordGuids",
          "schema": "array",
          "description": "Optional: User keyword Ids of activity owner to search for."
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "description": "Optional: starting date and time from which to get the activities in user's timezone. Finds all activities that end after the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all."
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "description": "Optional: ending date and time to which to get the activities in user's timezone. Finds all activities that start before or on the date time. Format \"2017-04-12T13%3A20%3A00%2b02%3A00\". Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset."
        },
        {
          "name": "projectTaskStatusGuids",
          "schema": "array",
          "description": "Optional: ID of the project task status. Default all."
        },
        {
          "name": "phaseGuids",
          "schema": "array",
          "description": "Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all."
        },
        {
          "name": "includeSubPhases",
          "schema": "boolean",
          "description": "Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false."
        },
        {
          "name": "contactGuids",
          "schema": "array",
          "description": "Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all."
        },
        {
          "name": "hasDuration",
          "schema": "boolean",
          "description": "Optional: has duration flag for the activity. Default all."
        },
        {
          "name": "hasHours",
          "schema": "boolean",
          "description": "Optional: has any work hour entries associated with the activity. Default all."
        },
        {
          "name": "isUnassigned",
          "schema": "boolean",
          "description": "Optional: is the activity unassigned. Default all."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get activities that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "useStrictStartAndEndDateTime",
          "schema": "boolean",
          "description": "Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false."
        },
        {
          "name": "activityTypeGuids",
          "schema": "array",
          "description": "Optional: ID of the project activity type. Default all."
        },
        {
          "name": "recurrenceType",
          "schema": "string",
          "description": "Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None = not recurring activity)"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities",
      "method": "activitiesPostActivity",
      "httpMethod": "post",
      "tag": "ActivitiesWrite",
      "description": "Insert a activity",
      "parameters": [
        {
          "name": "activityType",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "endDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hasDuration",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "hasHours",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isAllDay",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isUnassigned",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "location",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ownerUser",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTaskStatus",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrence",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceParentActivityGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceRule",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "startDateTime",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{activityGuid}/activityparticipants",
      "method": "activityParticipantsGetActivityParticipants",
      "httpMethod": "get",
      "tag": "ActivitiesRead",
      "description": "Get participants for an activity",
      "parameters": [
        {
          "name": "activityGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the activity"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{activityGuid}/activityparticipants/{activityParticipantGuid}",
      "method": "activityParticipantsDeleteActivityParticipant",
      "httpMethod": "delete",
      "tag": "ActivitiesDelete",
      "description": "Delete activity participant.",
      "parameters": [
        {
          "name": "activityGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the activity from which to delete the participant. If an activity occurrence guid is given, this will create an exception to the recurring activity and delete the participant from that."
        },
        {
          "name": "activityParticipantGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the participant"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{guid}",
      "method": "activitiesDeleteActivity",
      "httpMethod": "delete",
      "tag": "ActivitiesDelete",
      "description": "Delete an activity",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the activity to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{guid}",
      "method": "activitiesGetActivity",
      "httpMethod": "get",
      "tag": "ActivitiesRead",
      "description": "Get activity by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the activity."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{guid}",
      "method": "activitiesPatchActivity",
      "httpMethod": "patch",
      "tag": "ActivitiesWrite",
      "description": "Update (Patch) a activity or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the activity. Can also be comma separate list of IDs to patch multiple activities with one call. When multiple IDs are given, returns model which has list of succeeded activities and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activities/{guid}/exceptions",
      "method": "activitiesDeleteExceptions",
      "httpMethod": "delete",
      "tag": "ActivitiesDelete",
      "description": "Resets exceptions from a recurring activity.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the recurring activity"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activityparticipants",
      "method": "activityParticipantsPostActivityParticipant",
      "httpMethod": "post",
      "tag": "ActivitiesWrite",
      "description": "Adds an activity participant",
      "parameters": [
        {
          "name": "activityGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "mobilePhone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "participantGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "status",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activityparticipants/{guid}",
      "method": "activityParticipantsGetActivityParticipant",
      "httpMethod": "get",
      "tag": "ActivitiesRead",
      "description": "Get activity participant",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the participant"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activityparticipants/{guid}",
      "method": "activityParticipantsPatchActivityParticipants",
      "httpMethod": "patch",
      "tag": "ActivitiesWrite",
      "description": "Update (Patch) a activity participant or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the activity participant"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activitytypes",
      "method": "activityTypesGetActivityTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the Activity Types",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get activity types that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "category",
          "schema": "array",
          "description": "Optional: Category or multiple categories of activity types to search for. Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activitytypes",
      "method": "activityTypesPostActivityType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert an Activity type.",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isPaidLeave",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activitytypes/{guid}",
      "method": "activityTypesDeleteActivityType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an activity type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the activity type to delete"
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the activity type to which to move usages of this activity type. Default null. If activity type is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activitytypes/{guid}",
      "method": "activityTypesGetActivityType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Activity Type by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Activity Type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/activitytypes/{guid}",
      "method": "activityTypesPatchActivityType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an Activity Type or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Activity Type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/addresses",
      "method": "addressesGetAddresses",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the addresses.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get addresses that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/addresses/{guid}",
      "method": "addressesDeleteAddress",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Delete an address.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the address to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/addresses/{guid}",
      "method": "addressesGetAddress",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get address by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/addresses/{guid}",
      "method": "addressesPatchAddress",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) an address or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the address."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/bankaccounts",
      "method": "bankAccountsGetBankAccounts",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all bank accounts for current organization.",
      "parameters": [
        {
          "name": "companyGuid",
          "schema": "string",
          "description": "Optional: ID of the company."
        },
        {
          "name": "businessUnitGuid",
          "schema": "string",
          "description": "Optional: ID of the business unit."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from bank account name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=BankName&sortings[0].value=Desc &sortings[1].key=BusinessUnitName&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/bankaccounts/{guid}",
      "method": "bankAccountsGetBankAccount",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get bank account by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the bank account."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/businessunits",
      "method": "businessUnitsGetBusinessUnits",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the BusinessUnits",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits"
        },
        {
          "name": "companyGuid",
          "schema": "string",
          "description": "Optional: ID of the company to which the business units belong."
        },
        {
          "name": "companyCountryGuid",
          "schema": "string",
          "description": "Optional: ID of the country in which the company of business units is located."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from business unit name."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get business units that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the business unit."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Optional: Name of the business unit."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/businessunits/{guid}",
      "method": "businessUnitsGetBusinessUnit",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get businessUnit by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the businessUnit."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/businessunits/{guid}",
      "method": "businessUnitsPatchBusinessUnit",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an businessUnit or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the businessUnit."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/communicationtypes",
      "method": "communicationTypesGetCommunicationTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all communication types.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from communication type name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/communicationtypes",
      "method": "communicationTypesPostCommunicationType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a communication type.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/communicationtypes/{guid}",
      "method": "communicationTypesDeleteCommunicationType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a communication type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the communication type."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/communicationtypes/{guid}",
      "method": "communicationTypesGetCommunicationType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get communication type by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID used to get the communication type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/communicationtypes/{guid}",
      "method": "communicationTypesPatchCommunicationType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a communication type or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the communication type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactcommunications",
      "method": "contactCommunicationsGetCommunications",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all contact communications.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from contact communication value."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get contact communications that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactcommunications",
      "method": "contactCommunicationsPostContactCommunication",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a communication for a contact.",
      "parameters": [
        {
          "name": "communicationType",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "contact",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isForbiddenToUse",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactcommunications/{guid}",
      "method": "contactCommunicationsDeleteContactCommunication",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes contact's communication.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the contact's communication."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactcommunications/{guid}",
      "method": "contactCommunicationsGetCommunication",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get contact communication by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the contact communication."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactcommunications/{guid}",
      "method": "contactCommunicationsPatchContactCommunication",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) a contact's communication or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the contact's communication."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons",
      "method": "contactsGetContacts",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all the contact persons.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from contact person's name or communication method (i.e. phone number or email address)."
        },
        {
          "name": "searchCriterias",
          "schema": "array",
          "description": "Optional: Search criterias."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=FirstName&sortings[0].value=Desc &sortings[1].key=LastName&sortings[1].value=Asc\"."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get contact persons that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons",
      "method": "contactsPostContact",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a contact.",
      "parameters": [
        {
          "name": "addressGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "dateOfBirth",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "emails",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDeleted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isEmailAllowed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "jobTitle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phoneNumbers",
          "schema": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "salutation",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "satisfactionLevel",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "timeZone",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons/{contactGuid}/addresses",
      "method": "addressesGetContactAddress",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get contact person's address",
      "parameters": [
        {
          "name": "contactGuid",
          "schema": "string",
          "required": true,
          "description": "ID for the contact person"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons/{guid}",
      "method": "contactsDeleteContact",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a contact.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the contact."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons/{guid}",
      "method": "contactsGetContact",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get contact by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the contact."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactpersons/{guid}",
      "method": "contactsPatchContact",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) an contact or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the contact."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactroles",
      "method": "contactRolesGetContactRoles",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get contact roles.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from contact role name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactroles",
      "method": "contactRolesPostContactRole",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a contact role.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactroles/{guid}",
      "method": "contactRolesDeleteContactRole",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a contact role.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the contact role to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the contact role to which to move usages of this contact role. Default null. If contact role is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactroles/{guid}",
      "method": "contactRolesGetContactRole",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get contact role by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the contact role."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contactroles/{guid}",
      "method": "contactRolesPatchContactRole",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a contact role or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the contact role."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contacts/{contactGuid}/contactcommunications",
      "method": "contactCommunicationsGetCommunications2",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all communications for a contact.",
      "parameters": [
        {
          "name": "contactGuid",
          "schema": "string",
          "required": true,
          "description": "Whose communications are requested."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contacts/{contactGuid}/keywords",
      "method": "keywordsGetContactKeywords",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all the keywords for contact.",
      "parameters": [
        {
          "name": "contactGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user whose keywords are requested."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contacts/{contactGuid}/keywords/{guid}",
      "method": "keywordsDeleteContactKeyword",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Delete a keyword from the contact",
      "parameters": [
        {
          "name": "contactGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/contacts/{contactGuid}/keywords/{guid}",
      "method": "keywordsLinkKeywordToContact",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Link existing keyword to contact",
      "parameters": [
        {
          "name": "contactGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costaccounts",
      "method": "costAccountsGetCostAccounts",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get cost accounts.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from cost account name or identifier."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costaccounts",
      "method": "costAccountsPostCostAccount",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a cost account.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTravelTypeDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costaccounts/{guid}",
      "method": "costAccountsDeleteCostAccount",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a cost account.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the cost account to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costaccounts/{guid}",
      "method": "costAccountsGetCostAccount",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get cost account by Guid.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Cost account's guid."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costaccounts/{guid}",
      "method": "costAccountsPatchCostAccount",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a cost account or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the cost account."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costcenters",
      "method": "costCentersGetCostCenters",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get cost centers.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from cost center name or identifier."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get cost centers that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\"."
        },
        {
          "name": "identifier",
          "schema": "string",
          "description": "Optional: Identifier of the cost center."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Optional: Name of the cost center."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costcenters",
      "method": "costCentersPostCostCenter",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a cost center.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costcenters/{guid}",
      "method": "costCentersDeleteCostCenter",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a cost center.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the cost center to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costcenters/{guid}",
      "method": "costCentersGetCostCenter",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get cost center by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the cost center."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/costcenters/{guid}",
      "method": "costCentersPatchCostCenter",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a cost center or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the cost center."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/currencies",
      "method": "currenciesGetCurrencies",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the Currencies",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text based search applied to the result. Matches currency name and code."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\". Using additional sorting fields \"CreatedDate\" and / or \"LastUpdatedDate\" as keys sort currencies without a timestamp provided when sorting with other date fields."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/currencies/{guid}",
      "method": "currenciesGetCurrency",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get currency by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the currency."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/currencies/{guid}",
      "method": "currenciesPatchCurrency",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an currency or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the currency."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customercountrysettings",
      "method": "customerCountrySettingsPostCustomerCountrySettings",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a customer country setting.",
      "parameters": [
        {
          "name": "country",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "isTaxFree",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "taxFreeDescription",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "valueAddedTax",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "zeroVatCategoryCodeEn16931",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customercountrysettings/{guid}",
      "method": "customerCountrySettingsDeleteCustomerCountrySetting",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a customer country setting.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer country setting."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customercountrysettings/{guid}",
      "method": "customerCountrySettingsPatchCustomerCountrySettings",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) a customer country setting.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer country setting."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customermarketsegments",
      "method": "customerMarketSegmentsGetAllCustomerMarketSegments",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all Customer Market Segments.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from customer market segment name."
        },
        {
          "name": "parentMarketSegmentGuid",
          "schema": "string",
          "description": "Optional: Fetches all children of a parent based on parent market segment guid."
        },
        {
          "name": "includeParentLevel",
          "schema": "boolean",
          "description": "Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default = true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customermarketsegments",
      "method": "customerMarketSegmentsPostCustomerMarketSegment",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Add a market segment for customer.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "marketSegment",
          "schema": "object",
          "description": ""
        },
        {
          "name": "parentMarketSegment",
          "schema": "object",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customermarketsegments/{guid}",
      "method": "customerMarketSegmentsDeleteCustomerMarketSegment",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a customer market segment.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the customer market segment to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customermarketsegments/{guid}",
      "method": "customerMarketSegmentsGetCustomerMarketSegment",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the customer market segment.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Customer market segment guid."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers",
      "method": "customersGetCustomers",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all the customers",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers."
        },
        {
          "name": "customerOwnerGuids",
          "schema": "array",
          "description": "Optional: List of customer owner ids to search for. Default all."
        },
        {
          "name": "isInternal",
          "schema": "boolean",
          "description": "Optional: When true returns only internal customer"
        },
        {
          "name": "numbers",
          "schema": "array",
          "description": "Optional: List of customer numbers."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get customers that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "emailAddresses",
          "schema": "array",
          "description": "Optional: Get customers where email address matches to any provided email address"
        },
        {
          "name": "customerNames",
          "schema": "array",
          "description": "Optional: Get customers where customer name matches to any provided customer name"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers",
      "method": "customersPostCustomer",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a customer.",
      "parameters": [
        {
          "name": "annualRevenue",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "eInvoiceAddress",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eInvoiceOperator",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "headquarterAddress",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "industry",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceTemplate",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "invoicingVat",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isInternal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "kvkNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "number",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "numberOfEmployees",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "overdueInterest",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "owner",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentTerm",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "pricelist",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "timezone",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "vatNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "website",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties",
      "method": "customerCustomPropertiesGetCustomerCustomProperties",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the customer custom properties.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive customer properties."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from custom property name."
        },
        {
          "name": "isInUse",
          "schema": "boolean",
          "description": "Optional: Is the customer property used in any custom property usage."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties",
      "method": "customerCustomPropertiesPostCustomerCustomProperty",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a customer custom property.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parameters",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "usageCount",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/customercustompropertyselectionitems",
      "method": "customerCustomPropertySelectionItemsPostCustomerCustomPropertySelectionItem",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a customer custom property selection item.",
      "parameters": [
        {
          "name": "customerCustomProperty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}",
      "method": "customerCustomPropertySelectionItemsDeleteCustomerCustomPropertySelectionItem",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a customer custom property selection item.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}",
      "method": "customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItem",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get customer custom property selection item by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the customer custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/customercustompropertyselectionitems/{guid}",
      "method": "customerCustomPropertySelectionItemsPatchCustomerCustomPropertySelectionItem",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a customer custom property selection item or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/{customPropertyGuid}/customercustompropertyselectionitems",
      "method": "customerCustomPropertySelectionItemsGetCustomerCustomPropertySelectionItems",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the customer custom properties.",
      "parameters": [
        {
          "name": "customPropertyGuid",
          "schema": "string",
          "required": true,
          "description": "Custom property id used to get the customer custom property selection items."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive selection items."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/{guid}",
      "method": "customerCustomPropertiesDeleteCustomerCustomProperty",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a customer custom property.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/{guid}",
      "method": "customerCustomPropertiesGetCustomerCustomProperty",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get customer custom property by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the customer custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customproperties/{guid}",
      "method": "customerCustomPropertiesPatchCustomerCustomProperty",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a customer custom property or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customvalues",
      "method": "customerCustomValuesPostCustomerCustomValue",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a customer custom value.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customProperty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "customerGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customvalues/{guid}",
      "method": "customerCustomValuesDeleteCustomerCustomValue",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a customer custom value.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customvalues/{guid}",
      "method": "customerCustomValuesGetCustomerCustomValue",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get customer custom value by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the customer custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/customvalues/{guid}",
      "method": "customerCustomValuesPatchCustomerCustomValue",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) a customer custom value or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer custom value Can also be comma separate list of IDs to patch multiple customer custom values with one call. When multiple IDs are given, returns model which has list of succeeded customer custom values and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/addresses",
      "method": "addressesGetCustomerAddresses",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get customer's addresses",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "ID for the customer."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/addresses",
      "method": "addressesPostCustomerAddress",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert an address.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer to add the address for."
        },
        {
          "name": "addressline",
          "schema": "string",
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "description": ""
        },
        {
          "name": "contacts",
          "schema": "array",
          "description": ""
        },
        {
          "name": "country",
          "schema": "object",
          "description": ""
        },
        {
          "name": "countryRegion",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "description": ""
        },
        {
          "name": "fax",
          "schema": "string",
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "isBillingAddress",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isPostalAddress",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "isVisitAddress",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "description": ""
        },
        {
          "name": "postalCode",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/contactpersons",
      "method": "contactsGetCustomerContacts",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the contact persons for a customer.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "Customer guid used to get the contact persons."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from contact person's name or communication method (i.e. phone number or email address)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/customercountrysettings",
      "method": "customerCountrySettingsGetCustomerCountrySettings",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get all the country settings for a customer.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/customermarketsegments",
      "method": "customerMarketSegmentsGetCustomerMarketSegments",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the Market Segments for a customer.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "includeMarketSegmentsFromRegistry",
          "schema": "boolean",
          "description": "Optional: Return also the markets segments that are not in use for the customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/customersalesnotes",
      "method": "salesNotesGetCustomerSalesNotes",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the customer sales notes.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "Customer guid used to get the notes."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/customvalues",
      "method": "customerCustomValuesGetCustomerCustomValues",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get the customer custom values.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "Optional: Get only values of active or inactive customer custom properties."
        },
        {
          "name": "target",
          "schema": "array",
          "description": "List of target for which to get the values."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/projects",
      "method": "projectsGetCustomerProjects",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get customer's projects",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the customer."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all."
        },
        {
          "name": "currencyGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectKeywordGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesPersonGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "businessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "minimumBillableAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "customerOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "marketSegmentationGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "hasRecurringFees",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "companyCurrencyGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectMemberUserGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "numbers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{customerGuid}/salesnotes",
      "method": "salesNotesGetAllCustomerSalesNotes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the sales notes by customer guid.",
      "parameters": [
        {
          "name": "customerGuid",
          "schema": "string",
          "required": true,
          "description": "Customer guid used to get the notes."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{guid}",
      "method": "customersDeleteCustomer",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a customer.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{guid}",
      "method": "customersGetCustomer",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get customer by GUID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID used to get the customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customers/{guid}",
      "method": "customersPatchCustomer",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) an customer or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customersalesnotes",
      "method": "salesNotesPostCustomerSalesNotes",
      "httpMethod": "post",
      "tag": "CustomersWrite",
      "description": "Insert a customer sales note.",
      "parameters": [
        {
          "name": "customer",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "note",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customersalesnotes/{guid}",
      "method": "salesNotesDeleteCustomerSalesNote",
      "httpMethod": "delete",
      "tag": "CustomersDelete",
      "description": "Deletes a customer sales note.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the customer sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customersalesnotes/{guid}",
      "method": "salesNotesGetCustomerSalesNote",
      "httpMethod": "get",
      "tag": "CustomersRead",
      "description": "Get customer sales note by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the customer sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/customersalesnotes/{guid}",
      "method": "salesNotesPatchCustomerSalesNote",
      "httpMethod": "patch",
      "tag": "CustomersWrite",
      "description": "Update (Patch) a customer sales note or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the customer sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deletedphasemembers",
      "method": "phaseMembersGetAllDeletedPhaseMembers",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all deleted phase members",
      "parameters": [
        {
          "name": "deletedSince",
          "schema": "string",
          "description": "Optional: Get phase members that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "isUserActive",
          "schema": "boolean",
          "description": "Optional: Is the user active. Default nothing = all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deletedprojectfees",
      "method": "projectFeesGetDeletedProjectFees",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get the deleted project fees.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all."
        },
        {
          "name": "userGuids",
          "schema": "array",
          "description": "Optional: ID of the user. If not provided, returns for all users. Default all."
        },
        {
          "name": "deletedSince",
          "schema": "string",
          "description": "Optional: Get project fees that have been deleted after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deletedprojecttravelexpenses",
      "method": "projectTravelExpensesGetDeletedProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get the deleted project travel expenses.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "projectGuid",
          "schema": "array",
          "description": "Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all."
        },
        {
          "name": "userGuid",
          "schema": "array",
          "description": "Optional: ID of the user. If not provided, returns for all users. Default all."
        },
        {
          "name": "deletedSince",
          "schema": "string",
          "description": "Optional: Get project travel expenses that have been deleted after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/deletedworkhours",
      "method": "workHoursGetDeletedWorkHours",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get the deleted work hours.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all."
        },
        {
          "name": "userGuids",
          "schema": "array",
          "description": "Optional: ID of the user. If not provided, returns for all users. Default all."
        },
        {
          "name": "deletedSince",
          "schema": "string",
          "description": "Optional: Get work hours that have been deleted after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/files/{fileGuid}/keywords",
      "method": "keywordsGetFileKeywords",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get all the keywords for file.",
      "parameters": [
        {
          "name": "fileGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the file for which keywords are requested."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/files/{fileGuid}/keywords/{guid}",
      "method": "keywordsDeleteFileKeyword",
      "httpMethod": "delete",
      "tag": "FilesDelete",
      "description": "Delete a keyword from the file",
      "parameters": [
        {
          "name": "fileGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/files/{fileGuid}/keywords/{guid}",
      "method": "keywordsLinkKeywordToFile",
      "httpMethod": "post",
      "tag": "FilesWrite",
      "description": "Link existing keyword to file",
      "parameters": [
        {
          "name": "fileGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/files/{guid}",
      "method": "filesGetFile",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get file by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the file."
        },
        {
          "name": "includeDataInResponse",
          "schema": "boolean",
          "description": "Is data included in response as base64 string."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/files/{guid}/filedata",
      "method": "fileDataGetDataForFile",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get file data by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the file."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flatrates",
      "method": "flatRatesGetAllFlatRates",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get all flat rates",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get flat rates that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "invoiceGuid",
          "schema": "string",
          "description": "Optional: Get flat rates by invoice guid. Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flatrates",
      "method": "flatRatesPostFlatRate",
      "httpMethod": "post",
      "tag": "FeesWrite",
      "description": "Insert a flat rate.",
      "parameters": [
        {
          "name": "billAdditionalHours",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "billingSchedule",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "includesHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plannedBillingDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "price",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "pricePerAdditionalHour",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flatrates/{guid}",
      "method": "flatRatesDeleteFlatRate",
      "httpMethod": "delete",
      "tag": "FeesDelete",
      "description": "Delete a flat rate of a phase.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of flat rate."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flatrates/{guid}",
      "method": "flatRatesGetFlatrate",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get flat rate.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id of the flat rate."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flatrates/{guid}",
      "method": "flatRatesPatchFlatRate",
      "httpMethod": "patch",
      "tag": "FeesWrite",
      "description": "Update (Patch) a flat rate or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the flat rate."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flextimeadjustments",
      "method": "flextimeAdjustmentsPostFlextimeAdjustment",
      "httpMethod": "post",
      "tag": "UsersWrite",
      "description": "Insert a flextime adjustment.",
      "parameters": [
        {
          "name": "adjustmentDate",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "amount",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flextimeadjustments/{guid}",
      "method": "flextimeAdjustmentsDeleteFlextimeAdjustment",
      "httpMethod": "delete",
      "tag": "UsersWrite",
      "description": "Delete an flextime adjustment.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the flextime adjustment to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flextimeadjustments/{guid}",
      "method": "flextimeAdjustmentsGetFlextimeAdjustment",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get Flextime Adjustment by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Flextime Adjustment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/flextimeadjustments/{guid}",
      "method": "flextimeAdjustmentsPatchFlextimeAdjustment",
      "httpMethod": "patch",
      "tag": "UsersWrite",
      "description": "Update (Patch) an Flextime Adjustment or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Flextime Adjustment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/holidays",
      "method": "holidaysGetHolidays",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get holidays.",
      "parameters": [
        {
          "name": "year",
          "schema": "integer",
          "description": "Optional: Holidays for this year only. Default: all years."
        },
        {
          "name": "countryGuid",
          "schema": "string",
          "description": "Optional: Holidays for this country only. Default local."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/holidaysbytimeperiod",
      "method": "holidaysGetHolidaysByTimePeriod",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get holidays with start and end date.",
      "parameters": [
        {
          "name": "startDate",
          "schema": "string",
          "description": "Start date for holidays."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "End date for holidays."
        },
        {
          "name": "countryGuid",
          "schema": "string",
          "description": "Optional: Holidays for this country only. Default local."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/industries",
      "method": "industriesGetIndustries",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the industries.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from industry name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/industries",
      "method": "industriesPostIndustry",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert an industry.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/industries/{guid}",
      "method": "industriesDeleteIndustry",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an industry.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the industry to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the industry to which to move usages of this industry. Default null. If industry is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/industries/{guid}",
      "method": "industriesGetIndustry",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get industry by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the industry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/industries/{guid}",
      "method": "industriesPatchIndustry",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an industry or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the industry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/integrations/vismafinancials/companyinformation",
      "method": "organizationsGetVismaFinancialsCompanyInfo",
      "httpMethod": "get",
      "tag": "OrganizationRead",
      "description": "Get Visma.net Financials integration company information.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicefiles/{guid}",
      "method": "filesGetInvoiceFile",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get invoice file by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the invoice file."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows",
      "method": "invoiceRowsGetInvoiceRows",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get invoice rows",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get invoice rows that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{guid}",
      "method": "invoiceRowsDeleteInvoiceRow",
      "httpMethod": "delete",
      "tag": "InvoicesDelete",
      "description": "Deletes an invoice row",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the invoice row."
        },
        {
          "name": "setAsNonBillable",
          "schema": "boolean",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{guid}",
      "method": "invoiceRowsGetInvoiceRow",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get invoice row by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the invoice row."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{guid}",
      "method": "invoiceRowsPatchInvoiceRow",
      "httpMethod": "patch",
      "tag": "InvoicesWrite",
      "description": "Update (Patch) a invoice row or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/projectfees",
      "method": "projectFeesGetInvoiceRowProjectFees",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project fees on an invoice row",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/projecttravelexpenses",
      "method": "projectTravelExpensesGetInvoiceRowProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project travel expenses on an invoice row",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojectfees",
      "method": "reimbursedProjectFeesGetInvoiceRowReimbursedProjectFees",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project fees on an invoice row",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/reimbursedprojecttravelexpenses",
      "method": "reimbursedProjectTravelExpensesGetInvoiceRowProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project travel expenses on an invoice row.",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Searched string: part of name or description."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional. If true, calculates the total count of project fees. Default false."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/reimbursedworkhours",
      "method": "reimbursedWorkHoursGetInvoiceRowReimbursedWorkHours",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all reimbursed hours on an invoice row.",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from description or invoice description."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicerows/{invoiceRowGuid}/workhours",
      "method": "workHoursGetInvoiceRowWorkHours",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the work hours on an invoice row",
      "parameters": [
        {
          "name": "invoiceRowGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice row."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices",
      "method": "invoicesGetInvoices",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get Invoices",
      "parameters": [
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "paymentDateStart",
          "schema": "string",
          "description": "Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date."
        },
        {
          "name": "invoiceStatusGuids",
          "schema": "array",
          "description": "Optional: Get invoices with this status only. Default: all statuses."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all."
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": "Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all."
        },
        {
          "name": "projectBusinessUnitGuids",
          "schema": "array",
          "description": "Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all."
        },
        {
          "name": "customerGuids",
          "schema": "array",
          "description": "Optional: List of customer IDs. Get invoices for these customers."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: starting date from which to get the invoices. Default all."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: end date from which to get the invoices. Default all."
        },
        {
          "name": "minimumTotalExcludingTax",
          "schema": "number",
          "description": "Optional: specifies minimum value for invoice total in organization currency."
        },
        {
          "name": "maximumTotalExcludingTax",
          "schema": "number",
          "description": "Optional: specifies maximum value for invoice total in organization currency."
        },
        {
          "name": "referenceNumbers",
          "schema": "array",
          "description": "Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number."
        },
        {
          "name": "numbers",
          "schema": "array",
          "description": "Optional: Invoice number. If not provided, returns invoices with any invoice number."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get invoices that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "salesPersonGuids",
          "schema": "array",
          "description": "Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons."
        },
        {
          "name": "createdByUserGuids",
          "schema": "array",
          "description": "Optional: ID of the user who created the invoice. If not provided, returns for all users."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices",
      "method": "invoicesPostInvoiceCreation",
      "httpMethod": "post",
      "tag": "InvoicesWrite",
      "description": "Add an invoice to project(s)",
      "parameters": [
        {
          "name": "billingCustomerGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "date",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "groupProjects",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceStatusGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projects",
          "schema": "array",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{guid}",
      "method": "invoicesDeleteInvoice",
      "httpMethod": "delete",
      "tag": "InvoicesDelete",
      "description": "Delete an invoice.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the invoice to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{guid}",
      "method": "invoicesGetInvoice",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get invoice by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the invoice."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{guid}",
      "method": "invoicesPatchInvoice",
      "httpMethod": "patch",
      "tag": "InvoicesWrite",
      "description": "Update (Patch) an invoice or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the invoice"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{guid}/pdf",
      "method": "pdfGetInvoicePdf",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get an invoice PDF.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "The invoice GUID."
        },
        {
          "name": "invoiceType",
          "schema": "string",
          "description": "Optional: type of invoice."
        },
        {
          "name": "pdfGetOptions",
          "schema": "string",
          "description": "Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{guid}/projects/{projectGuid}",
      "method": "invoicesDeleteProjectFromInvoice",
      "httpMethod": "delete",
      "tag": "InvoicesDelete",
      "description": "Delete a project from invoice.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "The invoice GUID."
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "The project GUID."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/files",
      "method": "filesGetInvoiceFiles",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get all files of a invoice by its id.",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the invoice used to get the files."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/finvoice",
      "method": "finvoicesGetFinvoiceByInvoiceGuid",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/invoicerows",
      "method": "invoiceRowsGetInvoiceRowsForInvoice",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get Invoice rows for an invoice.",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "rowType",
          "schema": "string",
          "description": "Optional: Type of the row. Either Hours or ProjectFees, Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/invoicesettings",
      "method": "invoiceSettingsGetInvoiceSettings",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get invoice settings by invoice GUID",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "Invoice GUID used to get the invoice settings."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/projectfees",
      "method": "projectFeesGetInvoiceProjectFees",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project fees on an invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/projecttravelexpenses",
      "method": "projectTravelExpensesGetInvoiceProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project travel expenses on an invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/reimbursedprojectfees",
      "method": "reimbursedProjectFeesGetInvoiceReimbursedProjectFees",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project fees on an invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/reimbursedprojecttravelexpenses",
      "method": "reimbursedProjectTravelExpensesGetInvoiceProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the project travel expenses on an invoice.",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Searched string: part of name or description."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional. If true, calculates the total count of project fees. Default false."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/reimbursedworkhours",
      "method": "reimbursedWorkHoursGetInvoiceReimbursedWorkHours",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all reimbursed hours on an invoice.",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from description or invoice description."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/uninvoicedprojectfees",
      "method": "projectFeesGetUninvoicedProjectFeesForInvoice",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get uninvoiced project fees available for invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/uninvoicedprojecttravelexpenses",
      "method": "projectTravelExpensesGetUninvoicedProjectTravelExpensesForInvoice",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get uninvoiced project travel expenses available for invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/uninvoicedworkhours",
      "method": "workHoursGetUninvoicedWorkHoursForInvoice",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get uninvoiced work hours available for invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoices/{invoiceGuid}/workhours",
      "method": "workHoursGetInvoiceWorkHours",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get all the work hours on an invoice",
      "parameters": [
        {
          "name": "invoiceGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicesettings/{guid}",
      "method": "invoiceSettingsPatchInvoiceSettings",
      "httpMethod": "patch",
      "tag": "InvoicesWrite",
      "description": "Update (Patch) invoice setting",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice settings"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses",
      "method": "invoiceStatusesGetInvoiceStatuses",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get invoice statuses.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from invoice status name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses",
      "method": "invoiceStatusesPostInvoiceStatus",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a invoice status.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hasInvoiceNumber",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefaultForCreditNote",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isPaid",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isReadOnly",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isSent",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isWaitingPayment",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses/{guid}",
      "method": "invoiceStatusesDeleteInvoiceStatus",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an invoice status.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the invoice status to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses/{guid}",
      "method": "invoiceStatusesGetInvoiceStatus",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Invoice status by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Invoice status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses/{guid}",
      "method": "invoiceStatusesPatchInvoiceStatus",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an Invoice status or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Invoice status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicestatuses/{invoiceStatusGuid}/finvoices",
      "method": "finvoicesGetFinvoicesByInvoiceStatus",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "",
      "parameters": [
        {
          "name": "invoiceStatusGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicetemplates",
      "method": "invoiceTemplatesGetInvoiceTemplates",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get invoice templates.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": ""
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/invoicetemplates/{guid}",
      "method": "invoiceTemplatesGetInvoiceTemplate",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get invoice template by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the invoice template."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/keywords",
      "method": "keywordsGetKeywords",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the keywords.",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "description": "Optional: category of the keyword."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from keyword."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get keywords that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\"."
        },
        {
          "name": "keyword",
          "schema": "string",
          "description": "Optional: Keyword name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/keywords",
      "method": "keywordsPostKeyword",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a keyword.",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "keyword",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/keywords/{guid}",
      "method": "keywordsDeleteKeyword",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete keyword by ID. It will also be deleted from any entity it is used in (Project, etc.)",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the keyword."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the keyword to which to move usages of this keyword. Default null. If keyword is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/keywords/{guid}",
      "method": "keywordsGetKeyword",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get keyword by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the keyword."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/keywords/{guid}",
      "method": "keywordsPatchKeyword",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a keyword or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the keyword."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/kpiformulas",
      "method": "kpiFormulasGetKpiFormulas",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get saved KPI formulas.",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "description": "Optional: Category of KPI formula (Project, Invoice, User)."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: return with given active status. Default is to return all."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc\"."
        },
        {
          "name": "includeDefinition",
          "schema": "boolean",
          "description": "Optional: Include definition to response. Default false."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get KPI formulas that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/leadsources",
      "method": "leadSourcesGetLeadSources",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the lead sources.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from lead source name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/leadsources",
      "method": "leadSourcesPostLeadSource",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a lead source.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/leadsources/{guid}",
      "method": "leadSourcesDeleteLeadSource",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a lead source.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the lead source to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the lead source to which to move usages of this lead source. Default null. If industry is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/leadsources/{guid}",
      "method": "leadSourcesGetLeadSource",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get lead source by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the lead source."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/leadsources/{guid}",
      "method": "leadSourcesPatchLeadSource",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an lead source or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the lead source."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries",
      "method": "countriesGetCountries",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the Countries.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries/{code2}",
      "method": "countriesGetCountryByCode2",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a country by ISO Alpha-2 code",
      "parameters": [
        {
          "name": "code2",
          "schema": "string",
          "required": true,
          "description": "Optional: ISO Alpha-2 code used to get a country."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries/{code3}",
      "method": "countriesGetCountryByCode3",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a country by ISO Alpha-3 code",
      "parameters": [
        {
          "name": "code3",
          "schema": "string",
          "required": true,
          "description": "Optional: ISO Alpha-3 code used to get a country."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries/{countryGuid}/countryregions",
      "method": "countriesGetCountryRegions",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the Country regions for a country.",
      "parameters": [
        {
          "name": "countryGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the country."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries/{countryName}",
      "method": "countriesGetCountryByName",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a country by name",
      "parameters": [
        {
          "name": "countryName",
          "schema": "string",
          "required": true,
          "description": "Optional: English country name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countries/{guid}",
      "method": "countriesGetCountry",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get country by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the country."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/countryregions/{guid}",
      "method": "countriesGetCountryRegion",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get country region by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the country region."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/formattingcultures",
      "method": "formattingCulturesGetFormattings",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the Formatting Cultures",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/formattingcultures/{guid}",
      "method": "formattingCulturesGetFormattingCulture",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get formatting culture by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the formatting culture."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/languages",
      "method": "languagesGetLanguages",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the languages",
      "parameters": [
        {
          "name": "isInvoiceLanguage",
          "schema": "boolean",
          "description": "Optional: which languages to fetch. only invoice languages or non invoice languages?, default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/languages/{guid}",
      "method": "languagesGetLanguage",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get language by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the language."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/timezones",
      "method": "timezonesGetTimezones",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the timezones.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/localization/timezones/{guid}",
      "method": "timezonesGetTimezone",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get timezone by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the timezone."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/login/oauth/access_token",
      "method": "publicBearerAuthenticationGetAccessTokenJson",
      "httpMethod": "post",
      "tag": "NoScope",
      "description": "Get oAuth2 access token.",
      "parameters": [
        {
          "name": "client_id",
          "schema": "string",
          "description": ""
        },
        {
          "name": "client_secret",
          "schema": "string",
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "description": ""
        },
        {
          "name": "grant_type",
          "schema": "string",
          "description": ""
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "description": ""
        },
        {
          "name": "refresh_token",
          "schema": "string",
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "description": ""
        },
        {
          "name": "state",
          "schema": "string",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/login/oauth/authorize",
      "method": "publicBearerAuthenticationGetAuthorizationCode",
      "httpMethod": "get",
      "tag": "NoScope",
      "description": "Get the oAuth2 authorization code flow code.",
      "parameters": [
        {
          "name": "response_type",
          "schema": "string",
          "description": "code"
        },
        {
          "name": "state",
          "schema": "string",
          "description": "Unguessable random string."
        },
        {
          "name": "client_id",
          "schema": "string",
          "description": "Client id."
        },
        {
          "name": "redirect_uri",
          "schema": "string",
          "description": "Url where to redirect after code has been retrieved."
        },
        {
          "name": "scope",
          "schema": "string",
          "description": "Scopes that client requests. If scopes that are not allowed for the client are requested, returns unauthorized."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/marketsegments",
      "method": "marketSegmentsGetMarketSegments",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the Market Segments.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from market segment name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "includeChildSegments",
          "schema": "boolean",
          "description": "Optional: Include also child market segments. If false returns only parent segments. Default true."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/marketsegments",
      "method": "marketSegmentsPostMarketSegment",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a market segment.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parentMarketSegment",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/marketsegments/{guid}",
      "method": "marketSegmentsDeleteMarketSegment",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a market segment.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the market segment to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the lead source to which to move usages of this market segment. Default null."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/marketsegments/{guid}",
      "method": "marketSegmentsGetMarketSegment",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Market Segment by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Market Segment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/marketsegments/{guid}",
      "method": "marketSegmentsPatchMarketSegment",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an Market Segment or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Market Segment."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/organizationdetails",
      "method": "organizationDetailsGetOrganizationDetails",
      "httpMethod": "get",
      "tag": "OrganizationRead",
      "description": "Get the details of organization.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/organizationdetails",
      "method": "organizationDetailsPatchOrganizationDetails",
      "httpMethod": "patch",
      "tag": "OrganizationWrite",
      "description": "Update (Patch) a organization details or a part of it",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/organizationsettings",
      "method": "organizationSettingsGetOrganizationSettings",
      "httpMethod": "get",
      "tag": "OrganizationRead",
      "description": "Get the settings of organization.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimeprices/{guid}",
      "method": "overtimePricesGetOvertimePrice",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get overtime price by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the overtime price."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimes",
      "method": "overtimesGetOvertimes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get overtime definitions.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from overtime name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimes",
      "method": "overtimesPostOvertime",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert an overtime.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "includeInFlextime",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "multipliesUnitCost",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "percentage",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimes/{guid}",
      "method": "overtimesDeleteOvertime",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an overtime.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the overtime to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimes/{guid}",
      "method": "overtimesGetOvertime",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get overtime definition by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the overtime definition."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/overtimes/{guid}",
      "method": "overtimesPatchOvertime",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an overtime or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the overtime."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/permissionprofiles",
      "method": "permissionProfilesGetPermissionProfiles",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the Permission Profiles.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from permission profile name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/permissionprofiles/{guid}",
      "method": "permissionProfilesGetPermissionProfile",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Permission Profile by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Permission Profile."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasemembers",
      "method": "phaseMembersGetAllPhaseMembers",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all active phase members",
      "parameters": [
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get phase members that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "isUserActive",
          "schema": "boolean",
          "description": "Optional: Is the user active. Default nothing = all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasemembers",
      "method": "phaseMembersPostPhaseMember",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Adds a phase member.",
      "parameters": [
        {
          "name": "addToAllSubPhases",
          "schema": "boolean",
          "description": "Optional: Add member to all sub phases. Default true."
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "currentWorkcontractTitle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "workHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "workHoursIncludingChildPhases",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasemembers/{userGuid}",
      "method": "phaseMembersDeletePhaseMember",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a phase member",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the phase member to remove"
        },
        {
          "name": "resourceAllocationAction",
          "schema": "string",
          "description": "Optional: The action to be applied to the user's resource allocations"
        },
        {
          "name": "transferToUserGuid",
          "schema": "string",
          "description": "Optional: GUID of the user to whom the resource allocations are transferred."
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "currentWorkcontractTitle",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "workHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "workHoursIncludingChildPhases",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasemembersfrombusinessunitusers",
      "method": "phaseMembersPostPhaseMembersFromBusinessUnitUsers",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Adds business unit users to phase members.",
      "parameters": [
        {
          "name": "addToAllSubPhases",
          "schema": "boolean",
          "description": "Optional: Add member to all sub phases. Default true."
        },
        {
          "name": "businessUnitGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases",
      "method": "phasesGetPhases",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the phases.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get phases that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the phase."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: List of project ids."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases",
      "method": "phasesPostPhase",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a phase",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "deadline",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "defaultWorkType",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isCompleted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "originalDeadline",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "originalStartDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "originalWorkHoursEstimate",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "parentPhase",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "phaseStatus",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workHoursEstimate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{guid}",
      "method": "phasesDeletePhase",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a phase",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the phase."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{guid}",
      "method": "phasesGetPhase",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get phase by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the phase."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{guid}",
      "method": "phasesPatchPhase",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a phase or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the phase"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{phaseGuid}/phasemembers",
      "method": "phaseMembersGetPhaseMembers",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get phase members",
      "parameters": [
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the phase."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Is the member active on the phase. Filters only root phase members. Default nothing = all."
        },
        {
          "name": "isUserActive",
          "schema": "boolean",
          "description": "Optional: Is the user active. Default nothing = all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{phaseGuid}/resourceallocations/allocations",
      "method": "resourceAllocationsGetResourceAllocationsByPhaseGuid",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)",
      "parameters": [
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "userLicenseTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectManagerUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useSalesProbability",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "superiorUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resourceAllocationGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesProgress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phases/{phaseGuid}/worktypes",
      "method": "workTypesGetPhaseWorkTypes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all work types that are available for a phase (for work hour entry)",
      "parameters": [
        {
          "name": "phaseGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the phase."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: number of rows to fetch"
        },
        {
          "name": "userGuid",
          "schema": "string",
          "description": "Id of the user for whom the work types are retrieved. Default is current user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasestatustypes",
      "method": "phaseStatusTypesGetPhaseStatusTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get phase status types",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types"
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": ""
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasestatustypes",
      "method": "phaseStatusTypesPostPhaseStatusType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a phase status type",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasestatustypes/{guid}",
      "method": "phaseStatusTypesDeletePhaseStatusType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a phase status type",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the phase status type to delete"
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the phase status type to which to move usages of this phase status type. Default null. If phase status type is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasestatustypes/{guid}",
      "method": "phaseStatusTypesGetPhaseStatusType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get phase status type by GUID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the phase status type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/phasestatustypes/{guid}",
      "method": "phaseStatusTypesPatchPhaseStatusType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a phase status type or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the phase status type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelists",
      "method": "priceListsGetPricelists",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all price lists.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from price list name."
        },
        {
          "name": "currencyGuid",
          "schema": "string",
          "description": "Optional: ID of the price list currency."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\"."
        },
        {
          "name": "name",
          "schema": "string",
          "description": "Optional: Name of the price list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelists/{guid}",
      "method": "priceListsGetPriceList",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get price list by GUID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID used to get the price list."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelists/{pricelistGuid}/pricelistversions",
      "method": "priceListVersionsGetPricelistVersionsByPricelist",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all price list versions of a price list.",
      "parameters": [
        {
          "name": "pricelistGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelistversions/{guid}",
      "method": "priceListVersionsGetPricelistVersion",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a price list version by guid.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelistversions/{pricelistVersionGuid}/overtimeprices",
      "method": "overtimePricesGetOvertimePrices",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the overtime prices for a price list version.",
      "parameters": [
        {
          "name": "pricelistVersionGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelistversions/{pricelistVersionGuid}/productprices",
      "method": "productPricesGetProductPrices",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the product prices for a price list version.",
      "parameters": [
        {
          "name": "pricelistVersionGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the price list version."
        },
        {
          "name": "fromPricelistOnly",
          "schema": "boolean",
          "description": "If true return only prices from the price list, if false also returns prices from the products. Default is false."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from Product name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
        },
        {
          "name": "productCode",
          "schema": "string",
          "description": "Optional: Absolute search for products with specified product code."
        },
        {
          "name": "productGuids",
          "schema": "array",
          "description": "Optional: Search all product price(s) by products guid(s)."
        },
        {
          "name": "isVolumePriced",
          "schema": "boolean",
          "description": "Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products."
        },
        {
          "name": "productCategoryGuids",
          "schema": "array",
          "description": "Optional: Search product prices according to product category / categories by product category guid(s)."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional: Search product prices according to product type / types."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelistversions/{pricelistVersionGuid}/travelprices",
      "method": "travelPricesGetTravelPrices",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the travel prices for a price list version.",
      "parameters": [
        {
          "name": "pricelistVersionGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the price list version."
        },
        {
          "name": "fromPricelistOnly",
          "schema": "boolean",
          "description": "If true return only prices from the price list, if false also returns prices from the products. Default is false."
        },
        {
          "name": "expenseClasses",
          "schema": "array",
          "description": "Optional: List of expense classes to search by, defaults to all travel categories."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from Product name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/pricelistversions/{pricelistVersionGuid}/workhourprices",
      "method": "workHourPricesGetWorkHourPrices",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the workHourPrices for a price list version.",
      "parameters": [
        {
          "name": "pricelistVersionGuid",
          "schema": "string",
          "required": true,
          "description": "Price list version identifier."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page.."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get prices that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcategories",
      "method": "productCategoriesGetProductCategories",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get product categories.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from product category name or code."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get product categories that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: ?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcategories",
      "method": "productCategoriesPostProductCategory",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a product category.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcategories/{guid}",
      "method": "productCategoriesDeleteProductCategory",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a product category.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the product category to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcategories/{guid}",
      "method": "productCategoriesGetProductCategory",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get product category by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the product category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcategories/{guid}",
      "method": "productCategoriesPatchProductCategory",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a product category or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the product category."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcountrysettings",
      "method": "productCountrySettingsPostProductCountrySettings",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a product country setting",
      "parameters": [
        {
          "name": "country",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcountrysettings/{guid}",
      "method": "productCountrySettingsDeleteProductCountrySetting",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a product country setting",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the product country setting."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productcountrysettings/{guid}",
      "method": "productCountrySettingsPatchProductCountrySettings",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a product country setting",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the product country setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/productprices/{guid}",
      "method": "productPricesGetProductPrice",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get product price by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the product price."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products",
      "method": "productsGetProducts",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the Products",
      "parameters": [
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "type",
          "schema": "string",
          "description": "Product type. if given, it filters the products by the given type."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products"
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the product."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get products that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products",
      "method": "productsPostProduct",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a product.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "productCategory",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "proposalDescription",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products/{guid}",
      "method": "productsDeleteProduct",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a product.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the product to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products/{guid}",
      "method": "productsGetProduct",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get product by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the product."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products/{guid}",
      "method": "productsPatchProduct",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an product or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the product."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/products/{productGuid}/productcountrysettings",
      "method": "productCountrySettingsGetProductCountrySettings",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the country settings for a product",
      "parameters": [
        {
          "name": "productGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the product."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectbillingcustomers",
      "method": "projectBillingCustomersPostProjectBillingCustomer",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a billing customer for a project.",
      "parameters": [
        {
          "name": "billingAddress",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "billingContact",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "billingCustomer",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "canBeDeleted",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectbillingcustomers/{guid}",
      "method": "projectBillingCustomersDeleteProjectBillingCustomer",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a project billing customer.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project billing customer to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectbillingcustomers/{guid}",
      "method": "projectBillingCustomersGetProjectBillingCustomer",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a project billing customer.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project billing customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectbillingcustomers/{guid}",
      "method": "projectBillingCustomersPatchProjectBillingCustomer",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a project billing customer.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project billing customer."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfees",
      "method": "projectFeesGetProjectFeesByToken",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get the project fees.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch"
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get project fees that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfees",
      "method": "projectFeesPostProjectFee",
      "httpMethod": "post",
      "tag": "FeesWrite",
      "description": "Insert a project fee.",
      "parameters": [
        {
          "name": "billingDependencyPhase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "billingSchedule",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "costCenter",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "displayPeriodStartDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hasVolumePricing",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "invoice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceQuantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowComment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowDescription",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "plannedBillingDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "productType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfees/{guid}",
      "method": "projectFeesDeleteProjectFree",
      "httpMethod": "delete",
      "tag": "FeesDelete",
      "description": "Deletes a project fee.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project fee."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfees/{guid}",
      "method": "projectFeesGetProjectFee",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get projectFee by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the projectFee."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfees/{guid}",
      "method": "projectFeesPatchProjectFee",
      "httpMethod": "patch",
      "tag": "FeesWrite",
      "description": "Update (Patch) a projectFee or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project fee Can also be comma separate list of IDs to patch multiple project fees with one call. When multiple IDs are given, returns model which has list of succeeded project fees and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectfiles/{guid}",
      "method": "filesGetProjectFile",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get project file by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the project file."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectforecasts",
      "method": "projectForecastsPostForecast",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a project forecast",
      "parameters": [
        {
          "name": "billingForecast",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "billingForecastNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expenseForecast",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "expenseForecastNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "laborExpenseForecast",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "laborExpenseForecastNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "month",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "revenueForecast",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "revenueForecastNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "year",
          "schema": "integer",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectforecasts/{guid}",
      "method": "projectForecastsDeleteForecast",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a project forecast",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the project forecast to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectforecasts/{guid}",
      "method": "projectForecastsGetForecast",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project forecast by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the project forecast."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectforecasts/{guid}",
      "method": "projectForecastsPatchForecast",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) an project forecast or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project forecast"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectinvoicesettings",
      "method": "projectInvoiceSettingsPostProjectInvoiceSettings",
      "httpMethod": "post",
      "tag": "InvoicesWrite",
      "description": "Create a new project invoice settings.",
      "parameters": [
        {
          "name": "freeText1",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "freeText2",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "htmlText1",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "htmlText2",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "projectFeeDescriptionFormat",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectFeeGrouping",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectFeePrimaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectFeeSecondaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTravelExpenseDescriptionFormat",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTravelExpenseGrouping",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTravelExpensePrimaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectTravelExpenseSecondaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "showAttachmentPriceExcludingValueAddedTax",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showAttachmentUnit",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showAttachmentUnitPrice",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showAttachmentValueAddedTax",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showCategories",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showFooter",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showLogoAndTitle",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showPriceExcludingValueAddedTax",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showQuantity",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showReferenceNumber",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showUnit",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showUnitPrice",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "showValueAddedTax",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "style",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workHourDescriptionFormat",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workHourGrouping",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workHourPrimaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workHourSecondaryGroupBy",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectinvoicesettings/{guid}",
      "method": "projectInvoiceSettingsDeleteProjectInvoiceSettings",
      "httpMethod": "delete",
      "tag": "InvoicesDelete",
      "description": "Delete an project invoice settings.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the project invoice settings to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectinvoicesettings/{guid}",
      "method": "projectInvoiceSettingsGetProjectInvoiceSetting",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get project invoice settings by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project invoice settings."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectinvoicesettings/{guid}",
      "method": "projectInvoiceSettingsPatchProjectInvoiceSettings",
      "httpMethod": "patch",
      "tag": "InvoicesWrite",
      "description": "Update (Patch) project invoice settings.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project invoice settings."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectlinks",
      "method": "filesPostProjectLink",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Add a link to a project.",
      "parameters": [
        {
          "name": "category",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "contentType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "fileGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isInternal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isReadOnly",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "size",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "usages",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectmembercostexceptions",
      "method": "projectMemberCostExceptionsPost",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Add a cost exception to a project member.",
      "parameters": [
        {
          "name": "cost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectmembercostexceptions/{guid}",
      "method": "projectMemberCostExceptionsDelete",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a project member cost exception.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project member cost exception."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectmembercostexceptions/{guid}",
      "method": "projectMemberCostExceptionsGetProjectMemberCostException",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get project member cost exception by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the cost exception."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectmembercostexceptions/{guid}",
      "method": "projectMemberCostExceptionsPatch",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) project member cost exception.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project member cost exception."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectproducts",
      "method": "projectProductsPostProjectProduct",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Adds a product to a project.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectproducts/{guid}",
      "method": "projectProductsDeleteProjectProduct",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a project product.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project product to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectrecurringfeerules",
      "method": "projectRecurringFeeRulesGetProjectRecurringFeeRules",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get the recurring fee rules.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectrecurringfeerules",
      "method": "projectRecurringFeeRulesPostProjectRecurringFeeRule",
      "httpMethod": "post",
      "tag": "FeesWrite",
      "description": "Insert a projectRecurringFeeRule.",
      "parameters": [
        {
          "name": "costCenter",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "displayPeriodStartDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "frequency",
          "schema": "integer",
          "required": true,
          "description": ""
        },
        {
          "name": "hasVolumePricing",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "productType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceEndDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceEndType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceStartDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "recurrenceTimes",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "recurringSalesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectrecurringfeerules/{guid}",
      "method": "projectRecurringFeeRulesDeleteProjectRecurringFeeRule",
      "httpMethod": "delete",
      "tag": "FeesDelete",
      "description": "Deletes a projectRecurringFeeRule.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project recurring fee rule."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectrecurringfeerules/{guid}",
      "method": "projectRecurringFeeRulesGetProjectRecurringFeeRule",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get project's RecurringFeeRule by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the ProjectRecurringFeeRule."
        },
        {
          "name": "includeInactive",
          "schema": "boolean",
          "description": "Indicates the rule should be returned even if it is not active. Default is false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectrecurringfeerules/{guid}",
      "method": "projectRecurringFeeRulesPatchProjectRecurringFeeRule",
      "httpMethod": "patch",
      "tag": "FeesWrite",
      "description": "Update (Patch) a projectRecurringFeeRule or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the projectRecurringFeeRule."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects",
      "method": "projectsGetProjects",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the projects",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "currencyGuid",
          "schema": "string",
          "description": "Optional: ID of project currency."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get projects that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all."
        },
        {
          "name": "customerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectKeywordGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesPersonGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "businessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "minimumBillableAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "customerOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "marketSegmentationGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "hasRecurringFees",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "companyCurrencyGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectMemberUserGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "numbers",
          "schema": "array",
          "description": ""
        },
        {
          "name": "internal",
          "schema": "boolean",
          "description": "Optional: Get internal / non-internal projects."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects",
      "method": "projectsPostProject",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a project",
      "parameters": [
        {
          "name": "billingContact",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "businessUnit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "completionEstimatePercentage",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "costCenter",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "currency",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "customerContact",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "deadline",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expectedOrderDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "expectedValue",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "internalName",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceNotes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceTemplate",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isInternal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isJoiningAllowed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "leadSource",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "orderNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "ourReference",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "paymentTerm",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "probability",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "projectOwner",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "projectStatus",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "salesPerson",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "salesStatus",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "useOvertimeMultipliers",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "useProductsFromSetting",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "useWorktypesFromSetting",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "yourReference",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties",
      "method": "projectCustomPropertiesGetProjectCustomProperties",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the project custom properties.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive project properties."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from custom property name."
        },
        {
          "name": "isInUse",
          "schema": "boolean",
          "description": "Optional: Is the customer property used in any custom property usage."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties",
      "method": "projectCustomPropertiesPostProjectCustomProperty",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a project custom property.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parameters",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "usageCount",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/projectcustompropertyselectionitems",
      "method": "projectCustomPropertySelectionItemsPostProjectCustomPropertySelectionItem",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a project custom property selection item.",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectCustomProperty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}",
      "method": "projectCustomPropertySelectionItemsDeleteProjectCustomPropertySelectionItem",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a project custom property selection item.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}",
      "method": "projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItem",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get project custom property selection item by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the project custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/projectcustompropertyselectionitems/{guid}",
      "method": "projectCustomPropertySelectionItemsPatchProjectCustomPropertySelectionItem",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a project custom property selection item or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/{customPropertyGuid}/projectcustompropertyselectionitems",
      "method": "projectCustomPropertySelectionItemsGetProjectCustomPropertySelectionItems",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the project custom properties.",
      "parameters": [
        {
          "name": "customPropertyGuid",
          "schema": "string",
          "required": true,
          "description": "Custom property id used to get the project custom property selection items."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive selection items."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/{guid}",
      "method": "projectCustomPropertiesDeleteProjectCustomProperty",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a project custom property.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/{guid}",
      "method": "projectCustomPropertiesGetProjectCustomProperty",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get project custom property by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the project custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customproperties/{guid}",
      "method": "projectCustomPropertiesPatchProjectCustomProperty",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a project custom property or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customvalues",
      "method": "projectCustomValuesPostProjectCustomValue",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a project custom value.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customProperty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customvalues/{guid}",
      "method": "projectCustomValuesDeleteProjectCustomValue",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a project custom value.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customvalues/{guid}",
      "method": "projectCustomValuesGetProjectCustomValue",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project custom value by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the project custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/customvalues/{guid}",
      "method": "projectCustomValuesPatchProjectCustomValue",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a project custom value or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{guid}",
      "method": "projectsDeleteProject",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a project",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the project to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{guid}",
      "method": "projectsGetProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{guid}",
      "method": "projectsPatchProject",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a project or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{guid}/phaseswithhierarchy",
      "method": "phasesGetProjectPhases",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project's phases as flat list",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/customvalues",
      "method": "projectCustomValuesGetProjectCustomValues",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the project custom values.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "Optional: Get only values of active or inactive project custom properties."
        },
        {
          "name": "target",
          "schema": "array",
          "description": "List of target for which to get the values."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/files",
      "method": "filesGetProjectFiles",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get all files of a project by its id.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project used to get the files."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/flatrates",
      "method": "flatRatesGetFlatratesForProject",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get project's flat rates.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/keywords",
      "method": "keywordsGetProjectKeywords",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the keywords for project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project for which keywords are requested."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/keywords/{guid}",
      "method": "keywordsDeleteProjectKeyword",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a keyword from the project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/keywords/{guid}",
      "method": "keywordsLinkKeywordToProject",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Link existing keyword to project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/overtimeprices",
      "method": "overtimePricesGetOvertimePricesForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the overtimePrices for a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/pricelists/custom",
      "method": "priceListsPostCustomPricelist",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Create custom price list for a project. If project already has a custom price list returns existing price list.\nCreates a new price list if project doesn't have a custom price list.\nProject can only have one custom price list.\nNote that project's price list will be changed to the custom price list created here and\nalso existing prices are copied to the new price list.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "isVolumePricing",
          "schema": "boolean",
          "description": "Get the custom volume pricing price list or regular custom price list. Default is false."
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/productprices",
      "method": "productPricesGetProductPricesForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the productPrices for a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "fromPricelistOnly",
          "schema": "boolean",
          "description": "If true return only prices from the price list, if false also returns prices from the products. Default is false."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from Product name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
        },
        {
          "name": "isAvailable",
          "schema": "boolean",
          "description": "Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all."
        },
        {
          "name": "productCode",
          "schema": "string",
          "description": "Optional: Absolute search for products with specified product code."
        },
        {
          "name": "productGuids",
          "schema": "array",
          "description": "Optional: Search all product price(s) by products guid(s)."
        },
        {
          "name": "isVolumePriced",
          "schema": "boolean",
          "description": "Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products."
        },
        {
          "name": "productCategoryGuids",
          "schema": "array",
          "description": "Optional: Search product prices according to product category / categories by product category guid(s)."
        },
        {
          "name": "productTypes",
          "schema": "array",
          "description": "Optional: Search product prices according to product type / types."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/productsforproject",
      "method": "productsGetSearchedProducts",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Gets available products for the given project where price information comes from projects price list",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the project"
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "type",
          "schema": "string",
          "description": "Product type. if given, it filters the products by the given type"
        },
        {
          "name": "includeProductsFromRegistry",
          "schema": "boolean",
          "description": "Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectbillingcustomers",
      "method": "projectBillingCustomersGetWorkHourPricesForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the billing customers for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectfees",
      "method": "projectFeesGetProjectFeesForProject",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get all the project fees for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting"
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "isBilled",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
        },
        {
          "name": "includeRecurringRules",
          "schema": "boolean",
          "description": "Optional: Also fetches recurring rules along with project fees. Default is false."
        },
        {
          "name": "isBillablePeriodInFuture",
          "schema": "boolean",
          "description": "Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectforecasts",
      "method": "projectForecastsDeleteForecasts",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete the project forecasts from a month onward, including the given month.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Project for the forecasts to delete"
        },
        {
          "name": "year",
          "schema": "integer",
          "description": "Year where to start deleting the forecasts"
        },
        {
          "name": "month",
          "schema": "integer",
          "description": "Month where to start deleting the forecasts"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectforecasts",
      "method": "projectForecastsGetForecasts",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the project forecasts",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "project for the forecasts"
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Start date of the date range for the forecasts"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "End date of the date range for the forecasts"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectinvoicesettings",
      "method": "projectInvoiceSettingsGetProjectInvoiceSettings",
      "httpMethod": "get",
      "tag": "InvoicesRead",
      "description": "Get project invoice settings by project ID.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectmembercostexceptions",
      "method": "projectMemberCostExceptionsGetProjectMemberCostExceptionsForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all cost exceptions of project members for a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Guid of the project."
        },
        {
          "name": "userGuid",
          "schema": "string",
          "description": "Optional: Guid of the user."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectproducts",
      "method": "projectProductsDeleteAllProjectProducts",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes all project products of a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project from where project products to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectproducts",
      "method": "projectProductsGetProjectProducts",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project products",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project."
        },
        {
          "name": "includeProductsFromRegistry",
          "schema": "boolean",
          "description": "Optional: Includes products available from product registry"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "Fetch only active"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectrecurringfeerules",
      "method": "projectRecurringFeeRulesGetProjectRecurringFeeRulesForProject",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get all the Recurring Fee Rules for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project to get the recurring fee rules."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isBillablePeriodInFuture",
          "schema": "boolean",
          "description": "Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false."
        },
        {
          "name": "billableTimePeriod",
          "schema": "string",
          "description": "the time period for any uninvoiced recurring rules."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectsalesnotes",
      "method": "salesNotesGetProjectSalesNotes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the sales notes of a case.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Project guid used to get the notes."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get sales notes that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projecttravelexpenses",
      "method": "projectTravelExpensesGetProjectTravelExpensesForProject",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get all the project travel expenses for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "isBilled",
          "schema": "boolean",
          "description": "Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isBillablePeriodInFuture",
          "schema": "boolean",
          "description": "Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectworkhourprices",
      "method": "projectWorkHourPricesGetWorkHourPricesForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the work hour prices for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Guid of the project."
        },
        {
          "name": "fromPricelistOnly",
          "schema": "boolean",
          "description": "If true return only prices from the price list, if false also returns prices from the products. Default is false."
        },
        {
          "name": "isAvailable",
          "schema": "boolean",
          "description": "Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get project work hour prices that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/projectworktypes",
      "method": "projectWorkTypesGetProjectWorktypes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project work types.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project."
        },
        {
          "name": "includeWorktypesFromRegistry",
          "schema": "boolean",
          "description": "Include work types also from registry. If false, returns only project specific work types. Default false."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from work type name."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get project work types that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/proposals",
      "method": "proposalsGetProposalsForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the proposals for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Project id for which to get proposals."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get proposals that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/resourceallocations/allocations",
      "method": "resourceAllocationsGetResourceAllocationsByProjectGuid",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "userLicenseTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "phaseGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectManagerUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useSalesProbability",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "superiorUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resourceAllocationGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesProgress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/salesstatushistory",
      "method": "salesStatusHistoryGetSalesStatusHistory",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the sales status history for a project",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "The project for which the sales status history is fetched."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/teamproductivity",
      "method": "teamProductivityGetTeamProductivity",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get team productivity of a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/travelexpensetypes",
      "method": "travelExpenseTypesGetSearchedTravelExpenseTypes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Search active travel expense types of project by part of the name or code.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the project."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Searched string: part of name or code."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "userGuid",
          "schema": "string",
          "description": "Optional: Id of the user to fetch travels for."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/travelprices",
      "method": "travelPricesGetTravelPricesForProject",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the travel prices for a project.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "fromPricelistOnly",
          "schema": "boolean",
          "description": "If true return only prices from the price list, if false also returns prices from the settings. Default is false."
        },
        {
          "name": "expenseClasses",
          "schema": "array",
          "description": "Optional: List of expense classes to search by, defaults to all travel categories."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from Product name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate the number of total rows. Default false = total row count is returned as zero."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/workhours",
      "method": "workHoursGetProjectWorkHours",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get all the work hours for phases of a project for invoicing",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the project."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "isBilled",
          "schema": "boolean",
          "description": "Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: starting date from which to get the hours. Default all."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: starting date to which to get the hours. Default all."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projects/{projectGuid}/worktypesforproject",
      "method": "workTypesGetSearchedWorktypes",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Search active work types by part of the name or code.",
      "parameters": [
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the case to which proposal is connected."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Searched string: part of name or code."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectsalesnotes",
      "method": "salesNotesPostProjectSalesNotes",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a project sales note.",
      "parameters": [
        {
          "name": "note",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectsalesnotes/{guid}",
      "method": "salesNotesDeleteProjectSalesNote",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a project sales note.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectsalesnotes/{guid}",
      "method": "salesNotesGetProjectSalesNote",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project sales note by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the project sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectsalesnotes/{guid}",
      "method": "salesNotesPatchProjectSalesNote",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a project sales note or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project sales note."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectstatustypes",
      "method": "projectStatusTypesGetProjectStatusTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the ProjectStatusTypes",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes"
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from ProjectStatusType name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectstatustypes",
      "method": "projectStatusTypesPostProjectStatusType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a project status type",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectstatustypes/{guid}",
      "method": "projectStatusTypesDeleteProjectStatusType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a projectStatusType",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the projectStatusType to delete"
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the project status type to which to move usages of this project status type. Default null. If project status type is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectstatustypes/{guid}",
      "method": "projectStatusTypesGetProjectStatusType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get projectStatusType by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the projectStatusType."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectstatustypes/{guid}",
      "method": "projectStatusTypesPatchProjectStatusType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a projectStatusType or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the projectStatusType"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttaskstatuses",
      "method": "projectTaskStatusesGetProjectTaskStatuses",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the project task statuses.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from activity type name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttaskstatuses",
      "method": "projectTaskStatusesPostProjectTaskStatus",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a project task status.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDone",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttaskstatuses/{guid}",
      "method": "projectTaskStatusesDeleteProjectTaskStatus",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a project task status.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the project task status to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the project task status to which to move usages of this project task status. Default null."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttaskstatuses/{guid}",
      "method": "projectTaskStatusesGetProjectTaskStatus",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Project task status by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Project task status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttaskstatuses/{guid}",
      "method": "projectTaskStatusesPatchProjectTaskStatus",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an Project task status or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Project task status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpensefiles/{guid}",
      "method": "filesGetTravelExpenseFile",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get travel expense file by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the travel expense file."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses",
      "method": "projectTravelExpensesGetProjectTravelExpenses",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get the project travel expenses.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get project travel expenses that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses",
      "method": "projectTravelExpensesPostProjectTravelExpense",
      "httpMethod": "post",
      "tag": "TravelsWrite",
      "description": "Insert a project travel expense.",
      "parameters": [
        {
          "name": "billingDependencyPhase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "billingSchedule",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "costAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "costCenter",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceQuantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowComment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowDescription",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plannedBillingDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "purchaseVatRate",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "travelEndTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "travelExpense",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "travelReimbursement",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "travelReimbursementRequired",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "travelStartTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses/{guid}",
      "method": "projectTravelExpensesDeleteProjectTravelExpense",
      "httpMethod": "delete",
      "tag": "TravelsDelete",
      "description": "Deletes a project travel expense.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the project travel expense."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses/{guid}",
      "method": "projectTravelExpensesGetProjectTravelExpense",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get project travel expense by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the project travel expense."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses/{guid}",
      "method": "projectTravelExpensesPatchProjectTravelExpense",
      "httpMethod": "patch",
      "tag": "TravelsWrite",
      "description": "Update (Patch) a project travel expense or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project travel expense."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projecttravelexpenses/{projectTravelExpenseGuid}/files",
      "method": "filesGetTravelExpenseFiles",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get all files of a travel expense by its id.",
      "parameters": [
        {
          "name": "projectTravelExpenseGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the travel expense used to get the files."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworkhourprices",
      "method": "projectWorkHourPricesPostProjectWorkHourPrice",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a work hour price",
      "parameters": [
        {
          "name": "isBillable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "workType",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworkhourprices/{guid}",
      "method": "projectWorkHourPricesDeleteProjectWorkHourPrice",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a work hour price",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the work hour price."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworkhourprices/{guid}",
      "method": "projectWorkHourPricesGetProjectWorkHourPrice",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get project work hour price by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the work hour price."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworkhourprices/{guid}",
      "method": "projectWorkHourPricesPatchProjectWorkHourPrice",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a work hour price or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the work hour price"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworktypes",
      "method": "projectWorkTypesPostProjectWorktype",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Adds a work type to a project.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "worktype",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworktypes/{guid}",
      "method": "projectWorkTypesDeleteProjectWorktype",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Deletes a project work type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the project work type to remove."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/projectworktypes/{guid}",
      "method": "projectWorkTypesPatchProjectWorktype",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (patch) a project work type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the project work type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalfeerows",
      "method": "proposalFeesGetProposalFees",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the proposal fee rows.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalfeerows",
      "method": "proposalFeesPostProposalFee",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a proposal fee row.",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isShownOnProposal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "projectFee",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "proposal",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "subtotal",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalfeerows/{guid}",
      "method": "proposalFeesDeleteProposalFee",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a proposal fee row",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the proposal fee row to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalfeerows/{guid}",
      "method": "proposalFeesGetProposalFee",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the proposal fee rows by guid",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "proposal fee row id to get"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalfeerows/{guid}",
      "method": "proposalFeesPatchProposalFee",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a proposal fee row or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the proposal fee row"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals",
      "method": "proposalsGetProposals",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the proposals",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get proposals that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals",
      "method": "proposalsPostProposal",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a proposal.",
      "parameters": [
        {
          "name": "billingAddress",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "culture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "customerContactPerson",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "freeText1",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "freeText2",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "proposalDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "proposalStatus",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{guid}",
      "method": "proposalsDeleteProposal",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a proposal",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Guid for the proposal to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{guid}",
      "method": "proposalsGetProposal",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get Proposal by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Proposal."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{guid}",
      "method": "proposalsPatchProposal",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a Proposal or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Guid of the Proposal"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{guid}/proposalsettings",
      "method": "proposalSettingsGetProposalSettings",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get settings for a proposal",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Proposal."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{guid}/proposalsettings",
      "method": "proposalSettingsPatchProposalSettings",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) proposal settings",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Guid of the Proposal"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{proposalGuid}/proposalfeerows",
      "method": "proposalFeesGetProposalFeesForProposal",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the proposal fee rows for a proposal",
      "parameters": [
        {
          "name": "proposalGuid",
          "schema": "string",
          "required": true,
          "description": "proposal id for which to get proposal fees rows."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{proposalGuid}/proposalsubtotals",
      "method": "proposalSubtotalsGetProposalSubtotalsForProposal",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the proposal subtotals for a proposal",
      "parameters": [
        {
          "name": "proposalGuid",
          "schema": "string",
          "required": true,
          "description": "proposal id for which to get proposal subtotals."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposals/{proposalGuid}/proposalworkrows",
      "method": "proposalWorkhoursGetProposalWorkHoursForProposal",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get all the proposal work rows.",
      "parameters": [
        {
          "name": "proposalGuid",
          "schema": "string",
          "required": true,
          "description": "proposal id for which to get proposal work rows."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses",
      "method": "proposalStatusesGetProposalStatuses",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the proposal statuses",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "proposalStatusName",
          "schema": "string",
          "description": "Optional: Search by proposal status name."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses",
      "method": "proposalStatusesPostProposalStatus",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a proposal status",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isLost",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isWon",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses/{guid}",
      "method": "proposalStatusesDeleteProposalStatus",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an proposal status",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the proposal status to delete"
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the proposal status to which to move usages of this proposal status. Default null. If proposal status is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses/{guid}",
      "method": "proposalStatusesGetProposalStatus",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get Proposal status by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Proposal status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses/{guid}",
      "method": "proposalStatusesPatchProposalStatus",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an Proposal status or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Proposal status"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalstatuses/{guid}/usage",
      "method": "proposalStatusesGetUsage",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get usage for an proposal status.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the proposal status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalsubtotals",
      "method": "proposalSubtotalsGetProposalSubtotals",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the proposal subtotals.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalsubtotals",
      "method": "proposalSubtotalsPostProposalSubtotal",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a proposal subtotal",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isShownOnProposal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "proposal",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalsubtotals/{guid}",
      "method": "proposalSubtotalsDeleteProposalSubtotal",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a proposal subtotal",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the proposal subtotal to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalsubtotals/{guid}",
      "method": "proposalSubtotalsGetProposalSubtotal",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get Proposal subtotal by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the Proposal subtotal."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalsubtotals/{guid}",
      "method": "proposalSubtotalsPatchProposalSubtotal",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a Proposal subtotal or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the Proposal subtotal"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalworkrows",
      "method": "proposalWorkhoursGetProposalWorkHours",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the proposal work rows.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get proposal work rows that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalworkrows",
      "method": "proposalWorkhoursPostProposalWorkhour",
      "httpMethod": "post",
      "tag": "ProjectsWrite",
      "description": "Insert a proposal work row.",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isShownOnProposal",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "proposal",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "subtotal",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "workType",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalworkrows/{guid}",
      "method": "proposalWorkhoursDeleteProposalWorkhour",
      "httpMethod": "delete",
      "tag": "ProjectsDelete",
      "description": "Delete a proposal work row.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the proposal work row to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalworkrows/{guid}",
      "method": "proposalWorkhoursGetProposalWorkhour",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get the proposal work row by guid.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "proposal work row id to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/proposalworkrows/{guid}",
      "method": "proposalWorkhoursPatchProposalWorkhour",
      "httpMethod": "patch",
      "tag": "ProjectsWrite",
      "description": "Update (Patch) a proposal work row or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the proposal work row."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/refreshtoken",
      "method": "publicBearerAuthenticationGetAccessTokenTokenFromRefreshToken",
      "httpMethod": "post",
      "tag": "NoScope",
      "description": "Get new access token using a refresh token.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations",
      "method": "resourceAllocationsGetResourceAllocations",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocations",
      "parameters": [
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations",
      "method": "resourceAllocationsPostResourceAllocation",
      "httpMethod": "post",
      "tag": "ResourceallocationsWrite",
      "description": "Insert a resource allocation",
      "parameters": [
        {
          "name": "allocationHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "allocationPercentage",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "endDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations/allocations",
      "method": "resourceAllocationsPostResourceAllocations",
      "httpMethod": "post",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocations (its POST because of being able to accommodate more filters)",
      "parameters": [
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "includeAbsences",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "phaseGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectBusinessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectManagerUserGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectTagGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "resourceAllocationGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesProgresses",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "superiorUserGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "useSalesProbability",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "userBusinessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userLicenseTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "userTagGuids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations/{guid}",
      "method": "resourceAllocationsDeleteResourceAllocation",
      "httpMethod": "delete",
      "tag": "ResourceallocationsDelete",
      "description": "Delete an resource allocation",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the resource allocation to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations/{guid}",
      "method": "resourceAllocationsGetResourceAllocation",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocation by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the resource allocation."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/resourceallocations/{guid}",
      "method": "resourceAllocationsPatchResourceAllocation",
      "httpMethod": "patch",
      "tag": "ResourceallocationsWrite",
      "description": "Update (Patch) a resource allocation or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the resource allocation"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roleallocations",
      "method": "roleAllocationsGetRoleAllocations",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get role allocations.",
      "parameters": [
        {
          "name": "startDate",
          "schema": "string",
          "required": true,
          "description": "Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "useSalesProbability",
          "schema": "boolean",
          "description": "Optional: Calculates the hours based on sales probability set for the project. Default is true."
        },
        {
          "name": "roleGuids",
          "schema": "array",
          "description": "Optional: Role IDs."
        },
        {
          "name": "phaseGuids",
          "schema": "array",
          "description": "Optional: Phase IDs."
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": "Optional: Project IDs."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roleallocations",
      "method": "roleAllocationsPostRoleAllocation",
      "httpMethod": "post",
      "tag": "ResourceallocationsWrite",
      "description": "Insert a role allocation.",
      "parameters": [
        {
          "name": "allocationHours",
          "schema": "number",
          "required": true,
          "description": ""
        },
        {
          "name": "endDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "role",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roleallocations/{guid}",
      "method": "roleAllocationsDeleteRoleAllocation",
      "httpMethod": "delete",
      "tag": "ResourceallocationsDelete",
      "description": "Delete a role allocation.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the role allocation to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roleallocations/{guid}",
      "method": "roleAllocationsGetRoleAllocation",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get role allocation by GUID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID used to get the role allocation."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roleallocations/{guid}",
      "method": "roleAllocationsPatchRoleAllocation",
      "httpMethod": "patch",
      "tag": "ResourceallocationsWrite",
      "description": "Update (Patch) a role allocation.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the role allocation."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roles",
      "method": "rolesGetRoles",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get roles.",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: Page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get roles that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roles",
      "method": "rolesPostRole",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a role.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roles/{guid}",
      "method": "rolesDeleteRole",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a role.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the role to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roles/{guid}",
      "method": "rolesGetRole",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get role by GUID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the role."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/roles/{guid}",
      "method": "rolesPatchRole",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a role or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the role."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/rootphaseswithhierarchy",
      "method": "phasesGetRootPhases",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Get a list of root phases with information about hierarchy.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "customerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectKeywordGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesPersonGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "businessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "customerOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "openProjects",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "projectMemberUserGuids",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesaccounts",
      "method": "salesAccountsGetSalesAccounts",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get sales accounts.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from cost account name or identifier."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesaccounts",
      "method": "salesAccountsPostSalesAccount",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a sales account.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isProductDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isTravelTypeDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isWorkTypeDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "number",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesaccounts/{guid}",
      "method": "salesAccountsDeleteSalesAccount",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a sales account.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the sales account to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesaccounts/{guid}",
      "method": "salesAccountsGetSalesAccount",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get sales account by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the sales account."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesaccounts/{guid}",
      "method": "salesAccountsPatchSalesAccount",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a sales account or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the sales account."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salescases",
      "method": "projectsGetSalesCases",
      "httpMethod": "get",
      "tag": "ProjectsRead",
      "description": "Gets the sales cases (sales status is in progress)",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "customerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "currencyGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectKeywordGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesPersonGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "businessUnitGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "minimumBillableAmount",
          "schema": "number",
          "description": ""
        },
        {
          "name": "customerOwnerGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": ""
        },
        {
          "name": "marketSegmentationGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "isClosed",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "hasRecurringFees",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "companyCurrencyGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "projectMemberUserGuids",
          "schema": "array",
          "description": ""
        },
        {
          "name": "numbers",
          "schema": "array",
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesstatustypes",
      "method": "salesStatusTypesGetSalesStatusTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the sales status types",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types"
        },
        {
          "name": "salesState",
          "schema": "string",
          "description": "Optional: Get sales status types of the sales state."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: First row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from sales status type name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc\""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesstatustypes",
      "method": "salesStatusTypesPostSalesStatusType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a sales status type",
      "parameters": [
        {
          "name": "defaultProbability",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isProposalDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "salesState",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesstatustypes/{guid}",
      "method": "salesStatusTypesDeleteSalesStatusType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete an sales status type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the sales status type to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the sales status type to which to move usages of this sales status type. Default null. If sales status type is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesstatustypes/{guid}",
      "method": "salesStatusTypesGetSalesStatusType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get sales status type by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the sales status type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/salesstatustypes/{guid}",
      "method": "salesStatusTypesPatchSalesStatusType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an sales status type or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the sales status type"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/signout",
      "method": "publicBearerAuthenticationLogout",
      "httpMethod": "post",
      "tag": "NoScope",
      "description": "Logout. Invalidates refresh token. Access token will be invalid when it expires.",
      "parameters": [],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentries",
      "method": "timeEntriesGetTimeEntries",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get the time entries.",
      "parameters": [
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "phaseGuid",
          "schema": "array",
          "description": "Optional: Filters time entries for given phases."
        },
        {
          "name": "timeEntryTypeGuid",
          "schema": "array",
          "description": "Optional: Filters time entries for given time entry types."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get time entries that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentries",
      "method": "timeEntriesPostTimeEntry",
      "httpMethod": "post",
      "tag": "HoursWrite",
      "description": "Insert a time entry.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "customer",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventDate",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "project",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "startTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "timeEntryType",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentries/{guid}",
      "method": "timeEntriesDeleteTimeEntry",
      "httpMethod": "delete",
      "tag": "HoursDelete",
      "description": "Deletes a time entry.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the time entry."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentries/{guid}",
      "method": "timeEntriesGetTimeEntry",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get time entry by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the time entry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentries/{guid}",
      "method": "timeEntriesPatchTimeEntry",
      "httpMethod": "patch",
      "tag": "HoursWrite",
      "description": "Update (Patch) a time entry or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the time entry."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentrytypes",
      "method": "timeEntryTypesGetTimeEntryTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all time entry types.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from time entry type name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculates the total row count."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentrytypes",
      "method": "timeEntryTypesPostTimeEntryType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a time entry type.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "identifier",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentrytypes/{guid}",
      "method": "timeEntryTypesDeleteTimeEntryType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a time entry type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the time entry type."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentrytypes/{guid}",
      "method": "timeEntryTypesGetTimeEntryType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get time entry type by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID used to get the time entry type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/timeentrytypes/{guid}",
      "method": "timeEntryTypesPatchTimeEntryType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a time entry type or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the time entry type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/token",
      "method": "publicBearerAuthenticationGetLoginToken",
      "httpMethod": "post",
      "tag": "NoScope",
      "description": "Can be used to get the login information and access token for the api client.",
      "parameters": [
        {
          "name": "client_id",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "client_secret",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "scope",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypecountrysettings",
      "method": "travelExpenseTypeCountrySettingsPostTravelExpenseTypeCountrySettings",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a travel expense type country setting",
      "parameters": [
        {
          "name": "country",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "product",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "purchaseVatRate",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypecountrysettings/{guid}",
      "method": "travelExpenseTypeCountrySettingsDeleteTravelExpenseTypeCountrySetting",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a travel expense type country setting",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the travel expense type country setting."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypecountrysettings/{guid}",
      "method": "travelExpenseTypeCountrySettingsPatchTravelExpenseTypeCountrySettings",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a travel expense type country setting",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the travel expense type country setting"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes",
      "method": "travelExpenseTypesGetTravelExpenseTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all the travel expense types.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default all."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Searched string: part of name or code."
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the travel expense type."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=IsActive&sortings[0].value=Asc&sortings[1].key=Name&sortings[1].value=Desc."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes",
      "method": "travelExpenseTypesPostTravelExpenseType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a new travel expense type.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "costAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "includeTime",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "measurementUnit",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "productCategory",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "purchaseVatRate",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "unitCost",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "vatRate",
          "schema": "number",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes/{guid}",
      "method": "travelExpenseTypesDeleteTravelExpenseType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a travel expense type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Guid for the travel expense type to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes/{guid}",
      "method": "travelExpenseTypesGetTravelExpenseType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get travel expense type by guid.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the travel expense type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes/{guid}",
      "method": "travelExpenseTypesPatchTravelExpenseType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) an travel expense type or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Guid of the travel expense type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelexpensetypes/{travelExpenseTypeGuid}/travelexpensetypecountrysettings",
      "method": "travelExpenseTypeCountrySettingsGetTravelExpenseTypeCountrySettings",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all country settings for a travel expense type",
      "parameters": [
        {
          "name": "travelExpenseTypeGuid",
          "schema": "string",
          "required": true,
          "description": "Guid of the travel expense type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelprices/{guid}",
      "method": "travelPricesGetTravelPrice",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get travel price by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the travel price."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements",
      "method": "travelReimbursementsGetTravelReimbursements",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get travel reimbursements.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "travelReimbursementStatusGuids",
          "schema": "array",
          "description": "Optional: List of travel reimbursement status ids."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements",
      "method": "travelReimbursementsPostTravelReimbursement",
      "httpMethod": "post",
      "tag": "TravelsWrite",
      "description": "Add a travel reimbursement",
      "parameters": [
        {
          "name": "addAllUnreimbursedTravelExpenses",
          "schema": "boolean",
          "description": "Optional: Add all of user's unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added."
        },
        {
          "name": "includedProjectTravelExpenses",
          "schema": "array",
          "description": "Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored."
        },
        {
          "name": "advancePayment",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "groupBy",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "travelReimbursementStatus",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements/{guid}",
      "method": "travelReimbursementsDeleteTravelReimbursement",
      "httpMethod": "delete",
      "tag": "TravelsDelete",
      "description": "Delete a travel reimbursement",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of travel reimbursement"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements/{guid}",
      "method": "travelReimbursementsGetTravelReimbursement",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get travel reimbursement by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of travel reimbursement"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements/{guid}",
      "method": "travelReimbursementsPatchTravelReimbursement",
      "httpMethod": "patch",
      "tag": "TravelsWrite",
      "description": "Update (Patch) a travel reimbursement",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the travel reimbursement"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements/{guid}/pdf",
      "method": "pdfGetTravelReimbursementPdf",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get a travel reimbursement PDF.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "The travel reimbursement GUID."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursements/{travelReimbursementGuid}/projecttravelexpenses",
      "method": "projectTravelExpensesGetProjectTravelExpensesForTravelReimbursement",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get all the project travel expenses for a travel reimbursement",
      "parameters": [
        {
          "name": "travelReimbursementGuid",
          "schema": "string",
          "required": true,
          "description": "Optional: ID of the travel reimbursement"
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursementstatuses",
      "method": "travelReimbursementStatusGetTravelReimbursementStatuses",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the travel reimbursement statuses.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from travel reimbursement name."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursementstatuses",
      "method": "travelReimbursementStatusPostTravelReimbursementStatus",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a travel reimbursement status.",
      "parameters": [
        {
          "name": "createdBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createdDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isApproved",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isLocked",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedBy",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastUpdatedDateTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursementstatuses/{guid}",
      "method": "travelReimbursementStatusDeleteTravelReimbursementStatus",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a travel reimbursement status.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the travel reimbursement status to delete."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the travel reimbursement status to which to move usages of this travel reimbursement status. Default null. If travel reimbursement status is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursementstatuses/{guid}",
      "method": "travelReimbursementStatusGetTravelReimbursementStatus",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the travel reimbursement statuses by guid.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "reimbursement status id to get."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/travelreimbursementstatuses/{guid}",
      "method": "travelReimbursementStatusPatchTravelReimbursementStatus",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a travel reimbursement status or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the travel reimbursement status."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users",
      "method": "usersGetUsers",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get users",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "If not given, return all users, if given as true return only active users, if given as false returns only inactive users"
        },
        {
          "name": "businessUnitGuids",
          "schema": "array",
          "description": "Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all."
        },
        {
          "name": "keywordGuids",
          "schema": "array",
          "description": "Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get users that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "supervisorUserGuids",
          "schema": "array",
          "description": "Optional: ID of the supervisor to get subordinates for."
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the user."
        },
        {
          "name": "email",
          "schema": "string",
          "description": "Optional: Email address of the user."
        },
        {
          "name": "purpose",
          "schema": "string",
          "description": "Optional: Filter users by purpose."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users",
      "method": "usersPostUser",
      "httpMethod": "post",
      "tag": "UsersWrite",
      "description": "Insert an user.",
      "parameters": [
        {
          "name": "address",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "bankAccountNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "birthDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "businessUnit",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "city",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "country",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "countryRegion",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "createDefaultWorkContract",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "culture",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "defaultActivityType",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "email",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "firstName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "language",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "lastName",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "notes",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "permissionProfile",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "phone",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "postalCode",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "salutation",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "satisfaction",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "socialSecurityNumber",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "superiorUser",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "timezone",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "userType",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "workType",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties",
      "method": "userCustomPropertiesGetUserCustomProperties",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the user custom properties.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive user custom properties."
        },
        {
          "name": "isInUse",
          "schema": "boolean",
          "description": "Optional: Is the customer property used in any custom property usage."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get custom properties that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties",
      "method": "userCustomPropertiesPostUserCustomProperty",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a user custom property.",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "parameters",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "permission",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "type",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/usercustompropertyselectionitems",
      "method": "userCustomPropertySelectionItemsPostUserCustomPropertySelectionItem",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a user custom property selection item.",
      "parameters": [
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "sortOrder",
          "schema": "integer",
          "required": false,
          "description": ""
        },
        {
          "name": "userCustomProperty",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/usercustompropertyselectionitems/{guid}",
      "method": "userCustomPropertySelectionItemsDeleteUserCustomPropertySelectionItem",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a user custom property selection item.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the user custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/usercustompropertyselectionitems/{guid}",
      "method": "userCustomPropertySelectionItemsGetUserCustomPropertySelectionItem",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get user custom property selection item by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the user custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/usercustompropertyselectionitems/{guid}",
      "method": "userCustomPropertySelectionItemsPatchUserCustomPropertySelectionItem",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a user custom property selection item or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the user custom property selection item."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/{customPropertyGuid}/usercustompropertyselectionitems",
      "method": "userCustomPropertySelectionItemsGetUserCustomPropertySelectionItems",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get the user custom properties.",
      "parameters": [
        {
          "name": "customPropertyGuid",
          "schema": "string",
          "required": true,
          "description": "Custom property id used to get the user custom property selection items."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Get only active or inactive selection items."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get custom property selection items that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/{guid}",
      "method": "userCustomPropertiesDeleteUserCustomProperty",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a user custom property.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the user custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/{guid}",
      "method": "userCustomPropertiesGetUserCustomProperty",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get user custom property by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the user custom property."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customproperties/{guid}",
      "method": "userCustomPropertiesPatchUserCustomProperty",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a user custom property or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customvalues",
      "method": "userCustomValuesPostUserCustomValue",
      "httpMethod": "post",
      "tag": "UsersWrite",
      "description": "Insert a user custom value.",
      "parameters": [
        {
          "name": "customProperty",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "value",
          "schema": "string",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customvalues/{guid}",
      "method": "userCustomValuesDeleteUserCustomValue",
      "httpMethod": "delete",
      "tag": "UsersDelete",
      "description": "Deletes a user custom value.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the user custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customvalues/{guid}",
      "method": "userCustomValuesGetUserCustomValue",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get user custom value by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the user custom value."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/customvalues/{guid}",
      "method": "userCustomValuesPatchUserCustomValue",
      "httpMethod": "patch",
      "tag": "UsersWrite",
      "description": "Update (Patch) a user custom value or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{guid}",
      "method": "usersDeleteUser",
      "httpMethod": "delete",
      "tag": "UsersDelete",
      "description": "Delete an user.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{guid}",
      "method": "usersGetUser",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get user by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{guid}",
      "method": "usersPatchUser",
      "httpMethod": "patch",
      "tag": "UsersWrite",
      "description": "Update (Patch) an user or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/customvalues",
      "method": "userCustomValuesGetUserCustomValues",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get the user custom values.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "description": "Optional: Get only values of active or inactive user custom properties."
        },
        {
          "name": "targets",
          "schema": "array",
          "description": "Optional: List of target for which to get the values."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get user custom values that have been added or changed after this date time (greater or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/flextime",
      "method": "flextimeGetFlextime",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date.\nValues are returned only if the advanced time tracking add-on is active.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the user."
        },
        {
          "name": "eventDate",
          "schema": "string",
          "description": "Date for which to get the balance. Max 12 months into the future."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/flextimeadjustments",
      "method": "flextimeAdjustmentsGetFlextimeAdjustments",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get the Flextime Adjustments.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user for whom to get the adjustments."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "403",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/keywords",
      "method": "keywordsGetUserKeywords",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get all the keywords for user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user for who keywords are requested."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=Keyword&sortings[0].value=Desc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/keywords/{guid}",
      "method": "keywordsDeleteUserKeyword",
      "httpMethod": "delete",
      "tag": "UsersDelete",
      "description": "Delete a keyword from the user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/keywords/{guid}",
      "method": "keywordsLinkKeywordToUser",
      "httpMethod": "post",
      "tag": "UsersWrite",
      "description": "Link existing keyword to user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/projectfees",
      "method": "projectFeesGetUserProjectFees",
      "httpMethod": "get",
      "tag": "FeesRead",
      "description": "Get all the projectFees for a user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "productType",
          "schema": "string",
          "description": "Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting."
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null."
        },
        {
          "name": "isBilled",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null."
        },
        {
          "name": "invoiceableDate",
          "schema": "string",
          "description": "Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null."
        },
        {
          "name": "hasPhase",
          "schema": "boolean",
          "description": "Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Start date search criteria. Only get project fees that have event date from this date."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "End date search criteria. Only get project fees that have event date until this date."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/projectmembercostexceptions",
      "method": "projectMemberCostExceptionsGetProjectMemberCostExceptionsForUser",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get all cost exceptions of project members for user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "Guid of the user."
        },
        {
          "name": "isProjectClosed",
          "schema": "boolean",
          "description": "Search only for open or closed projects. Default all projects."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/projecttravelexpenses",
      "method": "projectTravelExpensesGetProjectTravelExpensesForUser",
      "httpMethod": "get",
      "tag": "TravelsRead",
      "description": "Get all the project travel expenses for a user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: starting date from which to get the travel expenses. Default all."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: starting date to which to get the travel expenses. Default all."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "expenseClass",
          "schema": "string",
          "description": "Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense"
        },
        {
          "name": "isReimbursed",
          "schema": "boolean",
          "description": "Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null."
        },
        {
          "name": "isTravelReimbursementRequired",
          "schema": "boolean",
          "description": "Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all."
        },
        {
          "name": "travelReimbursementGuid",
          "schema": "string",
          "description": "Optional: ID of the travel reimbursement"
        },
        {
          "name": "costCurrencyGuid",
          "schema": "string",
          "description": "Optional: ID of the cost currency."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/resourceallocations/allocations",
      "method": "resourceAllocationsGetResourceAllocationsByUserGuid",
      "httpMethod": "get",
      "tag": "ResourceallocationsRead",
      "description": "Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days"
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get resource allocations that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "userLicenseTypes",
          "schema": "array",
          "description": ""
        },
        {
          "name": "phaseGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userBusinessUnitGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectManagerUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "userTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "useSalesProbability",
          "schema": "boolean",
          "description": ""
        },
        {
          "name": "projectStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "projectTagGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "superiorUserGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesStatusTypeGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "resourceAllocationGuid",
          "schema": "string",
          "description": ""
        },
        {
          "name": "salesProgress",
          "schema": "string",
          "description": ""
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: Number of rows to fetch."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/timeentries",
      "method": "timeEntriesGetTimeEntriesForUser",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get all the time entries for a user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: starting date from which to get the time entries. Default all."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: starting date to which to get the time entries. Default all."
        },
        {
          "name": "phaseGuid",
          "schema": "array",
          "description": "Optional: Filters time entries for given phases."
        },
        {
          "name": "timeEntryTypeGuid",
          "schema": "array",
          "description": "Optional: Filters time entries for given time entry types."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/travelexpensesfiles",
      "method": "filesGetUsersTravelExpensesFiles",
      "httpMethod": "get",
      "tag": "FilesRead",
      "description": "Get all files of all travel expenses of the user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "GUID of the user used to get the files attached to travel expenses."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: Start date to from which to check travel expenses."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: End date to check for availability until travel expenses."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/workcontracts",
      "method": "workContractsGetWorkContractsForUser",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get all the work contracts for the user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the user."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/workcontracts/current",
      "method": "workContractsGetCurrentWorkContractForUser",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Gets current work contract for the user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "Id of the user"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/workdays",
      "method": "workdaysGetWorkdays",
      "httpMethod": "get",
      "tag": "UsersRead",
      "description": "Get workdays for a user.",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": true,
          "description": "Start date of the workdays."
        },
        {
          "name": "endDate",
          "schema": "string",
          "required": true,
          "description": "End date of the workdays."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/workdays/{date}",
      "method": "workdaysPatchWorkDay",
      "httpMethod": "patch",
      "tag": "UsersWrite",
      "description": "Update (Patch) a workday or a part of it",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "date",
          "schema": "string",
          "required": true,
          "description": "Date of the workday.."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/users/{userGuid}/workhours",
      "method": "workHoursGetWorkHoursForUser",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get all the work hours for a user",
      "parameters": [
        {
          "name": "userGuid",
          "schema": "string",
          "required": true,
          "description": "ID of the user."
        },
        {
          "name": "startDate",
          "schema": "string",
          "description": "Optional: starting date from which to get the hours. Default all."
        },
        {
          "name": "endDate",
          "schema": "string",
          "description": "Optional: starting date to which to get the hours. Default all."
        },
        {
          "name": "phaseGuid",
          "schema": "array",
          "description": "Optional: ID of the phase to get the hours for. Default all."
        },
        {
          "name": "workTypeGuid",
          "schema": "array",
          "description": "Optional: ID of the work type. Default all."
        },
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vatrates",
      "method": "vatRatesGetVatRates",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all organization vat rates",
      "parameters": [
        {
          "name": "countryGuid",
          "schema": "string",
          "description": "If not given, return all vat rates in organizations country. If given return only for that country."
        },
        {
          "name": "active",
          "schema": "boolean",
          "description": "If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vatrates",
      "method": "vatRatesPostVatRate",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a vat rate",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "countryGuid",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "percentage",
          "schema": "number",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vatrates/{guid}",
      "method": "vatRatesDeleteVatRate",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a vat rate",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID for the vat rate to delete"
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vatrates/{guid}",
      "method": "vatRatesGetVatRate",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get a vat rate by GUID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to get the vat rate."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/vatrates/{guid}",
      "method": "vatRatesPatchVatRate",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a vat rate or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID of the vat rate"
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workcontracts",
      "method": "workContractsPostWorkContract",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a work contract.",
      "parameters": [
        {
          "name": "resetFlextime",
          "schema": "boolean",
          "description": "Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true = reset flextime."
        },
        {
          "name": "dailyHours",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "endDate",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "flextimeLimitPerDay",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "hourCost",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "isFlextimeActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isOvertimeAllowed",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "role",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "startDate",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "title",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "workWeek",
          "schema": "array",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workcontracts/{guid}",
      "method": "workContractsDeleteWorkContract",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Delete a work contract.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID for the work contract to delete."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workcontracts/{guid}",
      "method": "workContractsGetWorkContract",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get work contract by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the work contract."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workcontracts/{guid}",
      "method": "workContractsPatchWorkContract",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a work contract or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the work contract."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhourprices/{guid}",
      "method": "workHourPricesGetWorkHourPrice",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get work hour price by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the work hour price."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhours",
      "method": "workHoursGetWorkHours",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get the work hours.",
      "parameters": [
        {
          "name": "pageToken",
          "schema": "string",
          "description": "Optional: page token to fetch the next page."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get work hours that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "billableStatus",
          "schema": "string",
          "description": "Billable status type"
        },
        {
          "name": "eventDateStart",
          "schema": "string",
          "description": "Optional: Get work hours that have event date after this date time (greater or equal)."
        },
        {
          "name": "eventDateEnd",
          "schema": "string",
          "description": "Optional: Get work hours that have event date before this date time (less or equal)."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhours",
      "method": "workHoursPostWorkHour",
      "httpMethod": "post",
      "tag": "HoursWrite",
      "description": "Insert a work hour",
      "parameters": [
        {
          "name": "description",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "endTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "eventDate",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "invoice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceQuantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowComment",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "invoiceRowDescription",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "isApproved",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isBillable",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "overtime",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "phase",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "plannedInvoiceQuantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "quantity",
          "schema": "number",
          "required": false,
          "description": ""
        },
        {
          "name": "startTime",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "unitPrice",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "user",
          "schema": "object",
          "required": true,
          "description": ""
        },
        {
          "name": "workType",
          "schema": "object",
          "required": true,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhours/{guid}",
      "method": "workHoursDeleteWorkHour",
      "httpMethod": "delete",
      "tag": "HoursDelete",
      "description": "Deletes a work hour.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the work hour."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhours/{guid}",
      "method": "workHoursGetWorkHour",
      "httpMethod": "get",
      "tag": "HoursRead",
      "description": "Get work hour by ID",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the work hour."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/workhours/{guid}",
      "method": "workHoursPatchWorkHour",
      "httpMethod": "patch",
      "tag": "HoursWrite",
      "description": "Update (Patch) a work hour or a part of it",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the work hour. Can also be comma separate list of IDs to patch multiple work hours with one call. When multiple IDs are given, returns model which has list of succeeded work hours and list of errors."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/worktypes",
      "method": "workTypesGetWorkTypes",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get all work types.",
      "parameters": [
        {
          "name": "active",
          "schema": "boolean",
          "description": "Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned."
        },
        {
          "name": "productive",
          "schema": "boolean",
          "description": "Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned."
        },
        {
          "name": "firstRow",
          "schema": "integer",
          "description": "Optional: first row to fetch. Default 0 = first row."
        },
        {
          "name": "rowCount",
          "schema": "integer",
          "description": "Optional: How many rows to fetch, Default 20, maximum 100."
        },
        {
          "name": "textToSearch",
          "schema": "string",
          "description": "Optional: Text to search from work type name or code."
        },
        {
          "name": "code",
          "schema": "string",
          "description": "Optional: Code of the work type."
        },
        {
          "name": "changedSince",
          "schema": "string",
          "description": "Optional: Get work types that have been added or changed after this date time (greater or equal)."
        },
        {
          "name": "calculateRowCount",
          "schema": "boolean",
          "description": "Optional: Calculate total number of rows."
        },
        {
          "name": "sortings",
          "schema": "array",
          "description": "Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be \"Desc\" or \"Asc\". Example: \"?sortings[0].key=name&sortings[0].value=Asc\"."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/worktypes",
      "method": "workTypesPostWorkType",
      "httpMethod": "post",
      "tag": "SettingsWrite",
      "description": "Insert a work type.",
      "parameters": [
        {
          "name": "code",
          "schema": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "hourCost",
          "schema": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "isActive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isDefault",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "isProductive",
          "schema": "boolean",
          "required": false,
          "description": ""
        },
        {
          "name": "name",
          "schema": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "salesAccount",
          "schema": "object",
          "required": false,
          "description": ""
        }
      ],
      "responses": [
        {
          "statusCode": "201",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/worktypes/{guid}",
      "method": "workTypesDeleteWorkType",
      "httpMethod": "delete",
      "tag": "SettingsDelete",
      "description": "Deletes a work type.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "GUID used to delete the work type."
        },
        {
          "name": "moveUsagesToGuid",
          "schema": "string",
          "description": "Optional: ID of the work type to which to move usages of this work type. Default null. If work type is in use and usages aren't moved the deletion might fail."
        }
      ],
      "responses": [
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/worktypes/{guid}",
      "method": "workTypesGetWorkType",
      "httpMethod": "get",
      "tag": "SettingsRead",
      "description": "Get work type by ID.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "Id used to get the work type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    },
    {
      "url": "/v1/worktypes/{guid}",
      "method": "workTypesPatchWorkType",
      "httpMethod": "patch",
      "tag": "SettingsWrite",
      "description": "Update (Patch) a work type or a part of it.",
      "parameters": [
        {
          "name": "guid",
          "schema": "string",
          "required": true,
          "description": "ID of the work type."
        }
      ],
      "responses": [
        {
          "statusCode": "200",
          "description": ""
        },
        {
          "statusCode": "default",
          "description": ""
        }
      ]
    }
  ],
  "apiBaseUrl": "https://api.severa.visma.com/rest-api",
  "apiDescription": "The API uses OAuth2 client creadentials flow. To get the Bearer token for the resources you have to request the token by using route '/token', found from Authentication controller.\r\n\r\nYou need to provide a Client_Id, client_secret and scope needed. The client_id and client_secret can be obtained from Severa UI Rest Api settings section.\r\n\r\nAfter authentication, calls need to use the Bearer token as authorization header (Bearer {accessToken}). The calls also need to have Client_Id header.\r\n\r\nThe access token can be refreshed from '/refreshtoken' route using the refresh token which was obtained from the authentication.\r\n\r\n",
  "apiTitle": "Severa Public Rest API Documentation",
  "endpoints": 312,
  "sdkMethods": 512,
  "schemas": 366,
  "parameters": 2026,
  "difficultyScore": 1201.5,
  "difficulty": "Very Hard"
}