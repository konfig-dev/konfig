openapi: 3.0.1
x-tagGroups:
  - name: Account information
    tags:
      - Accounts
      - Cards
      - CardTransactions
      - Transactions
  - name: Payments(deprecated)
    tags:
      - Payment requests
      - Payment templates
      - Payouts
      - Recurring payments
      - Signing baskets
  - name: Insights
    tags:
      - Insights
  - name: Compliance
    tags:
      - Bank id
      - Central person register denmark
      - Compliance data
      - Kyc
      - Screen data
      - Tra
      - User identification
      - User identity verification
  - name: Webhooks
    tags:
      - Webhooks
  - name: Consents
    tags:
      - Consent authorizations
      - Provider authorizations
servers:
  - url: api.finshark.io
    description: url
info:
  title: Finshark API
  description: Finshark API
  contact:
    name: ''
    email: support@finshark.io
  version: v1
  x-logo:
    url: https://cdn.finshark.io/logo/logo-dark.svg
    altText: FinsharkLogo
paths:
  /v1/accounts:
    get:
      tags:
        - Accounts
      summary: Get list of accounts.
      parameters:
        - name: sessionId
          in: header
          description: The session identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and accounts are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Detailed information about an account.
      parameters:
        - name: sessionId
          in: header
          description: The session identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: accountId
          in: path
          description: Internal technical account identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and one account is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/balances:
    get:
      tags:
        - Accounts
      summary: Get all types of balances for the selected account.
      parameters:
        - name: accountId
          in: path
          description: Internal technical account identifier.
          required: true
          schema:
            type: string
        - name: sessionId
          in: header
          description: The session identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and balances are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards:
    get:
      tags:
        - Cards
      summary: Get list of cards.
      parameters:
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and cards are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardsResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Detailed information about an card.
      parameters:
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: cardId
          in: path
          description: Internal technical card identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and one card is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}/cardtransactions:
    get:
      tags:
        - CardTransactions
      summary: Get a list of transactions for the selected account.
      parameters:
        - name: cardId
          in: path
          description: Internal technical card identifier.
          required: true
          schema:
            type: string
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: bookingStatus
          in: query
          description: Filter transactions by booking status.
          schema:
            $ref: '#/components/schemas/BookingStatusType'
        - name: dateFrom
          in: query
          description: >-
            Filter transactions by a "from" date. Value is Unix timestamp
            (milliseconds).
          schema:
            type: integer
            format: int64
        - name: dateTo
          in: query
          description: >-
            Filter transactions by a "to" date. Value is Unix timestamp
            (milliseconds).
          schema:
            type: integer
            format: int64
        - name: sequenceNumber
          in: query
          description: Set to get next transactions page.
          schema:
            type: string
        - name: hash
          in: query
          description: Filter transactions by hash.
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and transactions are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionsResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cards/{cardId}/cardtransactions/{transactionId}:
    get:
      tags:
        - CardTransactions
      summary: Get a transaction by transaction identifier.
      parameters:
        - name: cardId
          in: path
          description: Internal technical card identifier.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: Transaction identifier.
          required: true
          schema:
            type: string
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      summary: Get a list of transactions for the selected account.
      parameters:
        - name: accountId
          in: path
          description: Internal technical account identifier.
          required: true
          schema:
            type: string
        - name: sessionId
          in: header
          description: The session identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: bookingStatus
          in: query
          description: Filter transactions by booking status.
          schema:
            $ref: '#/components/schemas/BookingStatusType'
        - name: dateFrom
          in: query
          description: >-
            Filter transactions by a "from" date. Value is Unix timestamp
            (milliseconds).
          schema:
            type: integer
            format: int64
        - name: dateTo
          in: query
          description: >-
            Filter transactions by a "to" date. Value is Unix timestamp
            (milliseconds).
          schema:
            type: integer
            format: int64
        - name: sequenceNumber
          in: query
          description: Set to get next transactions page.
          schema:
            type: string
        - name: hash
          in: query
          description: Filter transactions by hash.
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and transactions are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/accounts/{accountId}/transactions/{transactionId}:
    get:
      tags:
        - Transactions
      summary: Get a transaction by transaction identifier.
      parameters:
        - name: accountId
          in: path
          description: Internal technical account identifier.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: Transaction identifier.
          required: true
          schema:
            type: string
        - name: sessionId
          in: header
          description: The session identifier from authorization response.
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier from authorization response.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and transaction is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '204':
          description: Indicates that the request was performed but no content is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '206':
          description: >-
            Successful response, with a partial representation of a list of
            transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: >-
            Error caused by exceeding unattended accesses to api due to calling
            to this api and account combination too many times in one day.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/bankId/identify:
    post:
      tags:
        - Bank id
      summary: Initiates an authentication order.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BankIdIdentifyDto'
      responses:
        '200':
          description: Success
  /v1/bankId/{orderRef}:
    get:
      tags:
        - Bank id
      summary: Collects the result of a sign or auth order using orderRef as reference.
      parameters:
        - name: orderRef
          in: path
          required: true
          schema:
            type: string
        - name: userIdentification
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
  /v1/bankId/qr:
    post:
      tags:
        - Bank id
      summary: Retrieves QR code data based on the provided QR data request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QrDataRequest'
      responses:
        '200':
          description: Success
  /v1/compliance/dk/{ssn}/cpr:
    get:
      tags:
        - Central person register denmark
      summary: Gets a mapped response from CPR Service for provider person id.
      parameters:
        - name: ssn
          in: path
          description: Person identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and CPR details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CPRResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/compliance-data:
    get:
      tags:
        - Compliance data
      summary: Retrieves compliance data based on specified parameters.
      parameters:
        - name: filterParam
          in: query
          description: The filter parameter for compliance data.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The size of the page for pagination.
          schema:
            type: integer
            format: int32
            default: 100
        - name: pageNumber
          in: query
          description: The page number for pagination.
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        '200':
          description: Success
  /v1/compliance-data/accounts:
    get:
      tags:
        - Compliance data
      summary: Retrieves accounts by search term.
      parameters:
        - name: searchTerm
          in: query
          description: The search term for accounts.
          schema:
            type: string
      responses:
        '200':
          description: Success
  /v1/kyc:
    post:
      tags:
        - Kyc
      summary: Create a KYC report.
      parameters:
        - name: authorizationId
          in: query
          schema:
            type: string
        - name: ssn
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/kyc/{id}:
    get:
      tags:
        - Kyc
      summary: Get a KYC report.
      parameters:
        - name: id
          in: path
          description: KYC identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/screen-data/{personId}:
    get:
      tags:
        - Screen data
      summary: Gets data by personId and corporateId.
      parameters:
        - name: personId
          in: path
          description: The person identifier.
          required: true
          schema:
            type: string
        - name: corporateId
          in: query
          description: The corporate identifier.
          schema:
            type: string
      responses:
        '200':
          description: Success
    put:
      tags:
        - Screen data
      summary: Updates data.
      parameters:
        - name: personId
          in: path
          description: The person identifier.
          required: true
          schema:
            type: string
        - name: corporateId
          in: query
          description: The corporate identifier.
          schema:
            type: string
      requestBody:
        description: >-
          The new object of Finshark.Compliance.Core.Payloads.ScreenDataDto type
          with data to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScreenDataDto'
      responses:
        '200':
          description: Success
  /v1/screen-data:
    post:
      tags:
        - Screen data
      summary: Adds data to database.
      requestBody:
        description: Screen data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenData'
          text/json:
            schema:
              $ref: '#/components/schemas/ScreenData'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ScreenData'
      responses:
        '200':
          description: Success
  /v1/tra-result:
    get:
      tags:
        - Tra
      summary: Returns TRA recommendation value from cache.
      parameters:
        - name: authorizationId
          in: query
          schema:
            type: string
        - name: paymentId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The request is valid and KYC details are in response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraEvaluationDto'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: TRA recommendation for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identification:
    post:
      tags:
        - User identification
      summary: Post user data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataDto'
      responses:
        '200':
          description: The request is valid.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person for provided parameters is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identity-verification/user-authentication:
    post:
      tags:
        - User identity verification
      summary: Starts FTN authentication flow for given user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentityVerificationDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityVerificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/user-identity-verification/session-details:
    get:
      tags:
        - User identity verification
      summary: Gets details of FTN authentication flow.
      parameters:
        - name: sessionId
          in: query
          description: Id of FTN session.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdentityVerificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/insights/request:
    post:
      tags:
        - Insights
      summary: Creating an insights request.
      parameters:
        - name: sessionId
          in: header
          description: The session identifier from authorization response
          schema:
            type: string
            format: uuid
        - name: authorizationId
          in: header
          description: The Authorization identifier
          schema:
            type: string
            format: uuid
        - name: sandbox
          in: query
          description: ''
          schema:
            type: boolean
            default: false
        - name: callbackUri
          in: query
          description: ''
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateInsightsRequest'
        required: true
      responses:
        '201':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
            application/json:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
            text/json:
              schema:
                $ref: '#/components/schemas/InsightsRequestStatus'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/insights/{requestId}:
    get:
      tags:
        - Insights
      summary: Get an insights report.
      parameters:
        - name: requestId
          in: path
          description: request identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/InsightsResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Server Error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments:
    post:
      tags:
        - Payment requests
      summary: Creating a Payment Request.
      requestBody:
        description: Payment Request.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreatePaymentRequest'
                - $ref: '#/components/schemas/PaymentRequestDetailsModel'
                - $ref: '#/components/schemas/PaymentRequestModel'
              description: >-
                Payment request data required for successfully storing a
                `PaymentRequest`.
        required: true
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentRequestModel'
                  - $ref: '#/components/schemas/PaymentRequestDetailsModel'
                description: Payment request returned as respone on create action.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payment requests
      summary: Get all Payment Requests for selected organizationId.
      parameters:
        - name: searchClientId
          in: query
          description: Search by client identifier.
          schema:
            type: string
        - name: searchRecipient
          in: query
          description: Search by recipient.
          schema:
            type: string
        - name: searchStatus
          in: query
          description: >-
            Search by payment request status, comma separated (E.G. "AUTHORIZED,
            IN_PROGRESS" will fetch only payments with AUTHORIZED and
            IN_PROGRESS status).
          schema:
            type: string
        - name: searchClientAccess
          in: query
          description: >-
            Environment on which the call has been invoked, comma separated
            (e.g. "PRODUCTION, SANDBOX", or "SANDBOX"). Blank returns all.
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort response by clientId, recipient, status.
          schema:
            type: string
        - name: sortDirection
          in: query
          description: Sort direction "desc" or "asc".
          schema:
            type: string
        - name: pageIndex
          in: query
          description: Page index.
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          description: Items per page.
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: Request was fulfilled and Payment Requests are listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedPaymentRequestModels'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}:
    get:
      tags:
        - Payment requests
      summary: Get Payment Request details by id.
      parameters:
        - name: id
          in: path
          description: Payment Request identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and Payment Request data is listed.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentRequestModel'
                  - $ref: '#/components/schemas/PaymentRequestDetailsModel'
                description: Payment request returned as respone on create action.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Payment requests
      summary: Delete Payment Request.
      parameters:
        - name: id
          in: path
          description: Payment Request identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was fulfilled and Payment Request is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}/details:
    get:
      tags:
        - Payment requests
      summary: >-
        Get Payment Request details and authorization information by payment
        request id.
      parameters:
        - name: id
          in: path
          description: Payment Request identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and Payment Request data is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequestDetailsModel'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/{id}/refund:
    post:
      tags:
        - Payment requests
      summary: Create a payment refund request.
      parameters:
        - name: id
          in: path
          description: Payment Request identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Payment refund request.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRefundRequest'
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentRequestModel'
                  - $ref: '#/components/schemas/PaymentRequestDetailsModel'
                description: Payment request returned as respone on create action.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates:
    post:
      tags:
        - Payment templates
      summary: Creating a payment template.
      requestBody:
        description: Payment template body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentTemplate'
      responses:
        '201':
          description: The request has been fulfilled and a payment template is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payment templates
      summary: Get all templates.
      responses:
        '200':
          description: Request was fulfilled and payment trmplates are listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates/{id}:
    get:
      tags:
        - Payment templates
      summary: Get payment template by id.
      parameters:
        - name: id
          in: path
          description: Payment template identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and template data is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Payment templates
      summary: Creating a request to update a Payment template.
      parameters:
        - name: id
          in: path
          description: Payment template identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Payment template request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentTemplate'
      responses:
        '200':
          description: The request has been fulfilled and a payout is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTemplate'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Payment templates
      summary: Delete payment template.
      parameters:
        - name: id
          in: path
          description: Payment template identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Request was fulfilled and Payment template data is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            text/plain:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
            text/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payments/templates/{id}/initiate:
    post:
      tags:
        - Payment templates
      summary: Creating a payment request from a template.
      parameters:
        - name: id
          in: path
          description: Template identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Payment template body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestInit'
      responses:
        '201':
          description: The request has been fulfilled and a payment request is created.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentRequestModel'
                  - $ref: '#/components/schemas/PaymentRequestDetailsModel'
                description: Payment request returned as respone on create action.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts:
    post:
      tags:
        - Payouts
      summary: Create a payout.
      requestBody:
        description: Payout request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayout'
      responses:
        '201':
          description: The request has been fulfilled and a payout is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payout'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Payouts
      summary: Get all payouts.
      parameters:
        - name: dateFrom
          in: query
          description: >-
            If set, payouts created from that date will be returned. Value must
            be set in Unix epoch time format (milliseconds).
          schema:
            type: integer
            format: int64
        - name: dateTo
          in: query
          description: >-
            If set, payouts created until that date will be returned. Value must
            be set in Unix epoch time format (milliseconds).
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: If set, payouts filtered by status will be returned.
          schema:
            $ref: '#/components/schemas/PayoutStatus'
        - name: paymentId
          in: query
          description: If set, payouts filtered by paymentId will be returned.
          schema:
            type: string
      responses:
        '200':
          description: Request was fulfilled and payouts are listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payout'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts/{id}/authorization:
    post:
      tags:
        - Payouts
      summary: Authorizes a payout.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The request has been fulfilled and the payout is authorized.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource  does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/payouts/{id}:
    get:
      tags:
        - Payouts
      summary: Get payout by id.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and payout is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payout'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Client does not have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/recurring-payments:
    post:
      tags:
        - Recurring payments
      summary: Create a new recurring payment.
      requestBody:
        description: Create Recurring Payment request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringPaymentCreateRequest'
        required: true
      responses:
        '200':
          description: The request has been fulfilled and a recurring payment is created.
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPaymentResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/recurring-payments/{id}:
    get:
      tags:
        - Recurring payments
      summary: Get the recurring payment.
      parameters:
        - name: id
          in: path
          description: Recurring payment identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and recurring payment is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringPaymentResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: >-
            This method is currently not available for corporate access, only
            for payments to private individuals.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '504':
          description: Returned when request has been timed out in the gateway.
    delete:
      tags:
        - Recurring payments
      summary: Delete/cancel the recurring payment.
      parameters:
        - name: id
          in: path
          description: Recurring payment identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and recurring payment is deleted.
        '204':
          description: No Content
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by end user (PSU) not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/signing-baskets:
    post:
      tags:
        - Signing baskets
      summary: Create a new signing basket.
      parameters:
        - name: ignoreSizeLimit
          in: query
          description: If set to true, any signing basket size limits are ignored.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Create Signing Basket Request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigningBasketCreateRequest'
        required: true
      responses:
        '201':
          description: The request has been fulfilled and signing basket is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/signing-baskets/{id}:
    get:
      tags:
        - Signing baskets
      summary: Get Signing Basket details.
      parameters:
        - name: id
          in: path
          description: Signing Basket identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has been fulfilled and Signing Basket is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigningBasketResponse'
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Signing baskets
      summary: Delete/cancel the signing basket.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request has been fulfilled and Signing Basket is deleted.
        '400':
          description: Error caused by invalid or missing data.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetails'
                  - $ref: '#/components/schemas/ValidationProblemDetails'
        '401':
          description: Authentication failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by user not permitted access to the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/consent-authorizations/{id}:
    get:
      tags:
        - Consent authorizations
      summary: Getting consent authorization status with expiry time.
      parameters:
        - name: id
          in: path
          description: Consent authorization identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and consent authorization info is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAuthorizationInfo'
        '401':
          description: Request failed due to missing or invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Error caused by access permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/providers/authorizations/{authorizationId}/validation:
    post:
      tags:
        - Provider authorizations
      summary: Validate the PSU authorization data.
      parameters:
        - name: authorizationId
          in: path
          description: Authorization identifier.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Object with properties that should be validate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationValidationRequest'
      responses:
        '200':
          description: Object that contains validation result of the each properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizattionValidationResponse'
        '400':
          description: Error caused by invalid or missing request data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Endpoint does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: >-
            Returned when service is unavailable due to scheduled reasons, such
            as maintenance or if response time is longer than timeout (60
            seconds).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/Webhooks:
    get:
      tags:
        - Webhooks
      summary: Gets a list of all webhooks.
      responses:
        '200':
          description: Request was fulfilled and webhooks are listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Webhooks
      summary: Creates a new webhook.
      requestBody:
        description: Webhooks creation request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Request was fulfilled and webhook is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Error caused by invalid or missing input request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/Webhooks/{id}:
    put:
      tags:
        - Webhooks
      summary: Updates an existing webhook.
      parameters:
        - name: id
          in: path
          description: Webhook identifier.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New webhook request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Request was fulfilled and webhook is updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Error caused by invalid or missing webhook input request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Webhooks
      summary: Gets a single webhook by id.
      parameters:
        - name: id
          in: path
          description: Webhook identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Request was fulfilled and webhook is listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: Returned when the user is not authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Webhooks
      summary: Deletes an existing webhook.
      parameters:
        - name: id
          in: path
          description: Webhook identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Request was fulfilled and webhook is deleted.
        '401':
          description: Returned when the user is not authorised.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You do not have the permissions to access this resource.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource does not exist or URL is not constructed correctly.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: >-
            Error caused by remote technical issues, this status code is used
            for unforeseen technical issues.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Account:
      type: object
      properties:
        accountNumber:
          type: string
          description: >-
            Represents account/payment recipient number. The format of the
            account numbers depends on the account types and the banks.
          nullable: true
        balances:
          $ref: '#/components/schemas/BalancesDetails'
        bban:
          type: string
          description: Basic Bank Account Number.
          nullable: true
        bic:
          type: string
          description: Bank Identifier Code used for international transactions.
          nullable: true
        bicAddress:
          type: string
          description: Address linked to the selected BIC.
          nullable: true
        currencyCode:
          type: string
          description: The ISO 4217 currency code of the account.
          nullable: true
        details:
          $ref: '#/components/schemas/AccountDetails'
        disabled:
          type: boolean
          description: The disabled account doesn't exists anymore or it is not in use.
          nullable: true
        iban:
          type: string
          description: International Bank Account Number.
          nullable: true
        id:
          type: string
          description: >-
            Internal technical identifier of the account. This is the data
            element to be used in the path when retrieving data from a dedicated
            account. Used for the transactions, holders and balances endpoints.
          nullable: true
        name:
          type: string
          description: Account display name given by the user.
          nullable: true
        ownerName:
          type: string
          description: The name of the account's owner.
          nullable: true
        ownerId:
          type: string
          description: The account owner's identifier.
          nullable: true
        ownership:
          type: number
          description: Indicates how much of the account is owned by the user.
          format: double
          nullable: true
        product:
          type: string
          description: Banks or financial institutions product name.
          nullable: true
        type:
          $ref: '#/components/schemas/AccountType'
        clearingNumber:
          type: string
          description: Clearing number.
          nullable: true
        pgnr:
          type: string
          description: PlusGiro number - contains only numbers.
          nullable: true
        bgnr:
          type: string
          description: BankGiro number - contains only numbers.
          nullable: true
      additionalProperties: false
      description: >-
        This object contains data about the bank accounts. All data depends on
        the account type.
    AccountDetails:
      type: object
      properties:
        fixationPeriod:
          type: integer
          description: >-
            The interest rate fixation period determines the period for which
            the interest rate agreed in the loan agreement is applicable. This
            period is expressed in months.
          format: int32
          nullable: true
        interestRate:
          type: number
          description: Interest rate of the loans and savings accounts.
          format: double
          nullable: true
        nextTermsModificationDay:
          type: integer
          description: >-
            A terms modification day is a point in time when the initial fixed
            interest rate changes after the defined period in Unix epoch time
            format (milliseconds).
          format: int64
          nullable: true
      additionalProperties: false
      description: >-
        Account details contain information only applicable for loan and saving
        accounts.
    AccountType:
      enum:
        - BUSINESS
        - CHECKING
        - CREDIT_CARD
        - EXTERNAL
        - INVESTMENT
        - LOAN
        - MORTGAGE
        - OTHER
        - PENSION
        - SAVINGS
      type: string
      description: Available types of the account.
    AccountsResponse:
      required:
        - providerId
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/ProviderId'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
          description: List of Finshark.Connections.Core.Accounts.Account.
          nullable: true
        statusCode:
          $ref: '#/components/schemas/ErrorStatusCode'
        tppMessages:
          type: array
          items:
            type: string
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          nullable: true
      additionalProperties: false
      description: The list of accounts.
    Amount:
      type: object
      properties:
        currency:
          type: string
          description: >-
            The currency code. This must be a valid ISO 4217 currency code. See
            the ASPSPs' documentation for details of supported currencies.
          nullable: true
        value:
          type: number
          description: >-
            The amount given with fractional digits, where fractions must be
            compliant to the currency definition. Up to 14 significant figures.
            Negative amounts are signed by minus. The decimal separator is a
            dot.: -?[0-9]{1,14}(\\.[0-9]{1,3})?.
          format: double
          nullable: true
      additionalProperties: false
      description: Amount with value and currency.
    BalancesDetails:
      type: object
      properties:
        available:
          $ref: '#/components/schemas/Amount'
        booked:
          $ref: '#/components/schemas/Amount'
        creditLimit:
          $ref: '#/components/schemas/Amount'
        current:
          $ref: '#/components/schemas/Amount'
      additionalProperties: false
      description: Represents the details of the different types of balances.
    BalancesResponse:
      type: object
      properties:
        accountId:
          type: string
          description: The internal technical identifier of the account.
          nullable: true
        balances:
          $ref: '#/components/schemas/BalancesDetails'
      additionalProperties: false
      description: The object with the account's balances.
    BookingStatusType:
      enum:
        - ALL
        - BOOKED
        - PENDING
      type: string
      description: Currently available booking statuses of the transactions.
    Card:
      type: object
      properties:
        id:
          type: string
          description: Credit card identifier.
          nullable: true
        masked_credit_card_number:
          type: string
          description: Masked credit card number.
          nullable: true
        product_name:
          type: string
          description: Credit card product name.
          nullable: true
        credit_limit:
          type: number
          description: Credit limit of the credit card.
          format: double
          nullable: true
        credit_available_balance:
          type: number
          description: Available balance on the credit card.
          format: double
          nullable: true
        credit_booked_balance:
          type: number
          description: Booked balance on the credit card.
          format: double
          nullable: true
      additionalProperties: false
      description: This object contains data about the card details.
    CardTransaction:
      required:
        - hash
      type: object
      properties:
        id:
          type: string
          description: Credit card transaction ID.
          nullable: true
        amount:
          type: number
          description: >-
            Monetary amount of the credit card transaction in the card's
            currency.
          format: double
          nullable: true
        beneficiary:
          type: string
          description: Beneficiary of the credit card transaction.
          nullable: true
        booking_date:
          type: integer
          description: Booking date of the credit card transaction.
          format: int64
          nullable: true
        currency:
          type: string
          description: Currency code according to ISO 4217.
          nullable: true
        original_amount:
          type: number
          description: >-
            Monetary amount of the credit card transaction in the original
            transaction currency.
          format: double
          nullable: true
        original_currency:
          type: string
          description: Original credit card transaction currency.
          nullable: true
        transaction_date:
          type: integer
          description: Transaction date of the credit card transaction.
          format: int64
          nullable: true
        transaction_type:
          type: string
          description: Credit card transaction type.
          nullable: true
        hash:
          type: string
          description: Hash of the transaction.
      additionalProperties: false
    CardTransactionsResponse:
      type: object
      properties:
        metaData:
          $ref: '#/components/schemas/MetaData'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/CardTransaction'
          description: The transactions resulting from the query.
          nullable: true
      additionalProperties: false
    CardsResponse:
      required:
        - providerId
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/ProviderId'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          description: List of Finshark.Connections.Core.Cards.Card.
          nullable: true
        statusCode:
          $ref: '#/components/schemas/ErrorStatusCode'
        tppMessages:
          type: array
          items:
            type: string
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          nullable: true
      additionalProperties: false
      description: The list of cards.
    ErrorStatusCode:
      enum:
        - CONTACT_BANK
        - CONTACT_BANK_KYC_INVALID
        - CONTACT_BANK_INTERNET_BANK_AGREEMENT
        - MBID_NOT_ACTIVATED
        - EXTRA_VERIFICATION_NEEDED
        - EXTRA_CONFIRMATION_NEEDED
        - TRANSIENT_BANK_ERROR
      type: string
      description: >-
        The type of status code message that is generated and displayed helps us
        determine what failed or future actions during an API calls.
    MetaData:
      type: object
      properties:
        download:
          type: string
          description: >-
            Link which is used to download transaction details in different
            formats.
          nullable: true
        nextLink:
          type: string
          description: >-
            Used in long transaction response as page next link, where is
            required to return next page to get more information of transaction
            details. It is filled with sequence number, date from and date to of
            the transactions.
          nullable: true
      additionalProperties: false
      description: Meta data object with information of page pagination.
    RemittanceInformation:
      type: object
      properties:
        reference:
          type: string
          description: The remittance reference number for the payment.
          nullable: true
        referenceType:
          $ref: '#/components/schemas/RemittanceInformationType'
      additionalProperties: false
      description: Remittance information.
    RemittanceInformationType:
      enum:
        - OCR
        - REFERENCE
        - SCOR
        - UNSTRUCTURED
      type: string
      description: The remittance information type for the payments and transactions.
    Transaction:
      required:
        - hash
      type: object
      properties:
        accountId:
          type: string
          description: >-
            The internal technical identifier of the account that the
            transaction belongs to.
          nullable: true
        amount:
          $ref: '#/components/schemas/Amount'
        bookingDate:
          type: integer
          description: >-
            The booking date is the date when the transaction is booked on the
            account. The value is in Unix epoch time (milliseconds).
          format: int64
          nullable: true
        category:
          $ref: '#/components/schemas/TransactionCategory'
        creditorName:
          type: string
          description: Name of the creditor for a debited transaction.
          nullable: true
        debtorName:
          type: string
          description: Name of the debtor for a credited transaction.
          nullable: true
        description:
          type: string
          description: The description of the transaction.
          nullable: true
        hash:
          type: string
          description: Hash of the transaction.
        id:
          type: string
          description: The internal technical identifier of the transaction.
          nullable: true
        notes:
          type: string
          description: A free-text field of the transaction.
          nullable: true
        remittanceInformations:
          type: array
          items:
            $ref: '#/components/schemas/RemittanceInformation'
          description: >-
            Swedish domestic payment OCR number or other type of structured
            reference or unstructured reference.
          nullable: true
        status:
          $ref: '#/components/schemas/TransactionStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        valueDate:
          type: integer
          description: >-
            The value date is the start date for interest calculation. The value
            is in Unix epoch time (milliseconds).
          format: int64
          nullable: true
        date:
          type: integer
          description: >-
            The date value is the date when happened the earliest transaction
            action (TransactionDate, ValueDate or BookingDate, respectively).
            The value is in Unix epoch time (milliseconds).
          format: int64
          nullable: true
      additionalProperties: false
      description: The transaction object.
    TransactionCategory:
      enum:
        - EXPENSES
        - INCOME
        - TRANSFERS
      type: string
      description: The available categories of the transactions.
    TransactionStatus:
      enum:
        - BOOKED
        - PENDING
      type: string
      description: The possible status of the transaction.
    TransactionType:
      enum:
        - CARD
        - PAYMENT
        - OTHER
        - TRANSFER
        - WITHDRAWAL
      type: string
      description: Type of the transaction.
    TransactionsResponse:
      type: object
      properties:
        metaData:
          $ref: '#/components/schemas/MetaData'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
          description: The transactions resulting from the query.
          nullable: true
      additionalProperties: false
      description: The response that contains the information about transactions.
    BankIdIdentifyDto:
      type: object
      properties:
        personalNumber:
          type: string
          description: >-
            A personal identification number to be used to complete the
            transaction.

            If a BankID with another personal number attempts to sign the
            transaction, it fails.
          nullable: true
      additionalProperties: false
      description: Data transfer object for BankId identification.
    CPRResponse:
      type: object
      properties:
        personInformation:
          $ref: '#/components/schemas/Person'
        currentPerson:
          $ref: '#/components/schemas/Person'
        personForeignAddress:
          $ref: '#/components/schemas/Person'
        guardianPerson:
          $ref: '#/components/schemas/GuardianPerson'
        fraudAlert:
          $ref: '#/components/schemas/FraudAlertPerson'
      additionalProperties: false
      description: Successful response object for CPR Denmark.
    ForeignAddress:
      type: object
      properties:
        addressLine1:
          type: string
          description: Address lines for foreign addresses.
          nullable: true
        addressLine2:
          type: string
          description: Address lines for foreign addresses.
          nullable: true
        addressLine3:
          type: string
          description: Address lines for foreign addresses.
          nullable: true
        addressLine4:
          type: string
          description: Address lines for foreign addresses.
          nullable: true
        addressLine5:
          type: string
          description: Address lines for foreign addresses.
          nullable: true
        country:
          type: string
          description: Country text for foreign address.
          nullable: true
        countryCode:
          type: string
          description: Country code for foreign address.
          nullable: true
        registrationDate:
          type: string
          description: Registration date of the foreign address.
          nullable: true
      additionalProperties: false
    FraudAlertPerson:
      type: object
      properties:
        fraudAlertStartDate:
          type: string
          description: The date and time of a fraud alert.
          format: date-time
        personId:
          type: string
          description: Danish civil registration number - CPR number.
          nullable: true
      additionalProperties: false
    GuardianPerson:
      type: object
      properties:
        guardianAddress:
          $ref: '#/components/schemas/Address'
        guardianName:
          type: string
          description: The name of the guardian.
          nullable: true
        personId:
          type: string
          description: Danish civil registration number - CPR number.
          nullable: true
      additionalProperties: false
    KycResponse:
      required:
        - id
        - status
      type: object
      properties:
        id:
          type: string
          description: KYC Identifier.
          format: uuid
        firstName:
          type: string
          description: First name.
          nullable: true
        lastName:
          type: string
          description: Last name.
          nullable: true
        birthDate:
          type: string
          description: Date of birth in format YYYY-MM-DD.
          nullable: true
        address:
          type: string
          description: Address.
          nullable: true
        city:
          type: string
          description: City.
          nullable: true
        zipCode:
          type: string
          description: Zip code.
          nullable: true
        region:
          type: string
          description: Region.
          nullable: true
        status:
          minLength: 1
          type: string
          description: |-
            Status - enum:
            [IN_PROGRESS, COMPLETED, FAILED].
        createDate:
          type: string
          description: Date and time of KYC request creation.
          format: date-time
          nullable: true
      additionalProperties: false
      description: Response object for KYC request.
    Name:
      type: object
      properties:
        firstName:
          type: string
          description: First name.
          nullable: true
        fullName:
          type: string
          description: Full name (both first and last name space separated).
          nullable: true
        lastName:
          type: string
          description: Last name.
          nullable: true
        middleName:
          type: string
          description: Middle name.
          nullable: true
      additionalProperties: false
    NationalRegistrationAddress:
      type: object
      properties:
        address:
          type: string
          description: Full street address text line.
          nullable: true
        buildingNumber:
          type: string
          description: Building number, used on Greenland in place of house number.
          nullable: true
        coAddress:
          type: string
          description: c/o address.
          nullable: true
        doorPlacement:
          type: string
          description: Door placement.
          nullable: true
        floorNumber:
          type: string
          description: Floor number.
          nullable: true
        houseNumber:
          type: string
          description: House number.
          nullable: true
        locality:
          type: string
          description: Locality text, e.g. farm name.
          nullable: true
        municipalityCode:
          type: string
          description: Municipality code.
          nullable: true
        municipalityLong:
          type: string
          description: Municipality long text.
          nullable: true
        municipalityShort:
          type: string
          description: Municipality short text.
          nullable: true
        registrationDate:
          type: string
          description: Registration date for the address.
          format: date-time
        streetCode:
          type: string
          description: Street code.
          nullable: true
        streetText:
          type: string
          description: Street name.
          nullable: true
        streetTextForAddress:
          type: string
          description: An abbreviation of street name, which is used for shipments.
          nullable: true
        town:
          type: string
          description: Postal town.
          nullable: true
        village:
          type: string
          description: Village text.
          nullable: true
        zipCode:
          type: string
          description: Zip code.
          nullable: true
      additionalProperties: false
    Person:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        birthDate:
          type: string
          description: Birth date.
          format: date-time
          nullable: true
        birthDateUncertain:
          type: boolean
          description: Whether the birth date is unclear.
          nullable: true
        currentPersonId:
          type: string
          description: >-
            New personal identification number if it was changed for some
            reason.
          nullable: true
        gender:
          type: string
          description: Gender code.
          nullable: true
        guardianshipDate:
          type: string
          description: Date of guardianship.
          nullable: true
        marketingProtection:
          type: boolean
          description: Whether the person has chosen to be protected against marketing.
          nullable: true
        name:
          $ref: '#/components/schemas/Name'
        pendingChanges:
          type: boolean
          description: If there are pending changes to the CPR register.
          nullable: true
        personId:
          type: string
          description: Danish civil registration number - CPR number.
          nullable: true
        personStatus:
          $ref: '#/components/schemas/PersonStatus'
        secrecyMarked:
          type: boolean
          description: Whether the person is secrecy marked.
          nullable: true
      additionalProperties: false
    PersonStatus:
      type: object
      properties:
        code:
          type: string
          description: >-
            Person status code, shows for example if person is dead or has
            emigrated etc.
          nullable: true
        fromDate:
          type: string
          description: Date from when status was set.
          format: date-time
          nullable: true
        statusDateUncertain:
          type: boolean
          description: Whether the status date is uncertain.
          nullable: true
        text:
          type: string
          description: Descriptive text for status code.
          nullable: true
      additionalProperties: false
    Providers:
      enum:
        - fi-op
        - fi-op-sand
        - fi-spankki
        - fi-spankki-sand
        - fi-nordea
        - fi-nordea-sand
        - fi-danskebank
        - fi-danskebank-sand
        - fi-handelsbanken
        - fi-handelsbanken-sand
        - fi-norwegian
        - fi-norwegian-sand
        - fi-revolut
        - fi-revolut-sand
        - fi-alandsbanken
        - fi-alandsbanken-sand
        - fi-morrowbank
        - fi-morrowbank-sand
        - fi-poppankki
        - fi-poppankki-sand
        - fi-saastopankki
        - fi-saastopankki-sand
        - fi-omasaastopankki
        - fi-omasaastopankki-sand
        - dk-nordea
        - dk-nordea-sand
        - dk-sparekassendanmark-sand
        - dk-sparekassendanmark
        - dk-lansparbank-sand
        - dk-lansparbank
        - dk-sparekassenkronjylland-sand
        - dk-sparekassenkronjylland
        - dk-folkesparekassen-sand
        - dk-folkesparekassen
        - dk-ikanobank-sand
        - dk-ikanobank
        - dk-basisbank-sand
        - dk-basisbank
        - dk-norwegian
        - dk-norwegian-sand
        - dk-danskebank
        - dk-danskebank-sand
        - dk-swedbank-sand
        - dk-swedbank
        - dk-sparnordbank-sand
        - dk-sparnordbank
        - dk-arbejderneslandsbank-sand
        - dk-arbejderneslandsbank
        - dk-nykreditbank-sand
        - dk-nykreditbank
        - dk-vestjyskbank-sand
        - dk-vestjyskbank
        - dk-coopbank-sand
        - dk-coopbank
        - dk-monsbank-sand
        - dk-monsbank
        - dk-andelskassenfelleskassen-sand
        - dk-andelskassenfelleskassen
        - dk-jyskebank
        - dk-jyskebank-sand
        - dk-ringkjobinglandbobank
        - dk-ringkjobinglandbobank-sand
        - dk-kreditbanken
        - dk-kreditbanken-sand
        - dk-revolut
        - dk-revolut-sand
      type: string
      description: List of provider identifiers.
    QrDataRequest:
      required:
        - qrStartSecret
        - qrStartToken
        - qrTime
      type: object
      properties:
        qrStartSecret:
          minLength: 1
          type: string
          description: Used to compute the animated QR code.
        qrStartToken:
          minLength: 1
          type: string
          description: Used to compute the animated QR code.
        qrTime:
          type: integer
          description: Represents the time associated with a QR code.
          format: int32
      additionalProperties: false
      description: Represents a request for QR code data retrieval.
    ScreenData:
      type: object
      properties:
        personId:
          type: string
          nullable: true
        corporateId:
          type: string
          nullable: true
        screenedForPEP:
          type: string
          default: 'No'
          nullable: true
        screenedForSanctionList:
          type: string
          default: 'No'
          nullable: true
        blocked:
          type: string
          default: 'No'
          nullable: true
      additionalProperties: false
    ScreenDataDto:
      type: object
      properties:
        screenedForPEP:
          type: string
          description: Screened for PEP (Politically exposes persons).
          nullable: true
        screenedForSanctionList:
          type: string
          description: Screened for sanction list.
          nullable: true
        blocked:
          type: string
          description: Blocked.
          nullable: true
      additionalProperties: false
      description: Data transfer object for ScreenData.
    TraEvaluationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        paymentId:
          type: string
          nullable: true
        recommendation:
          type: string
          nullable: true
        formLink:
          type: string
          nullable: true
      additionalProperties: false
    UserDataDto:
      type: object
      properties:
        authorizationId:
          type: string
          description: Authorization identifier.
          nullable: true
        personalId:
          type: string
          description: Personal user identifier.
          nullable: true
        corporateId:
          type: string
          description: Corporate identifier.
          nullable: true
        name:
          type: string
          description: End user name.
          nullable: true
        givenName:
          type: string
          description: End user given name.
          nullable: true
        surname:
          type: string
          description: End user surname.
          nullable: true
        email:
          type: string
          description: End user email address.
          nullable: true
        phoneNumber:
          type: string
          description: End user phone number.
          nullable: true
      additionalProperties: false
      description: DTO for user identification.
    UserIdentityVerificationDto:
      type: object
      properties:
        providerId:
          $ref: '#/components/schemas/Providers'
        paymentId:
          type: string
          description: Gets or sets the Payment ID.
          nullable: true
        authorizationId:
          type: string
          description: Gets or sets the Payment ID.
          nullable: true
        successRedirectUrl:
          type: string
          description: >-
            Callback redirect url called after end of the user identity
            verification flow.
          nullable: true
        failRedirectUrl:
          type: string
          description: >-
            Callback redirect url called after user identity verification flow
            has failed.
          nullable: true
      additionalProperties: false
      description: Data transfer object for User Identity Verification.
    UserIdentityVerificationResponse:
      type: object
      properties:
        sessionId:
          type: string
          nullable: true
        psuId:
          type: string
          nullable: true
        paymentId:
          type: string
          nullable: true
        authorizationId:
          type: string
          nullable: true
        successRedirectUrl:
          type: string
          nullable: true
        failRedirectUrl:
          type: string
          nullable: true
        authenticationUrl:
          type: string
          nullable: true
        externalReference:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserIdentityVerificationStatus'
        subjectId:
          type: string
          nullable: true
        subjectIdpId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
        issuingCountry:
          type: string
          nullable: true
        nationalIdentityType:
          type: string
          nullable: true
        identificationDate:
          type: string
          format: date-time
      additionalProperties: false
    UserIdentityVerificationStatus:
      enum:
        - CREATED
        - SUCCESS
        - ERROR
        - ABORT
        - CANCELLED
        - WAITING_FOR_USER
        - PENDING
        - COMPLETE
        - FAILED
      type: string
      description: Signicat statuses.
    AccountHolder:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: false
    BalanceDetails:
      type: object
      properties:
        calendarMonthEndBalance:
          type: number
          format: double
          nullable: true
        calendarMonthStartBalance:
          type: number
          format: double
          nullable: true
        netCashFlow:
          type: number
          format: double
          nullable: true
        statementEndBalance:
          type: number
          format: double
          nullable: true
        statementStartBalance:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    CashDetails:
      type: object
      properties:
        averageCountOfCashDepositAMonth:
          type: number
          format: double
          nullable: true
        averageCountOfCashWithdrawalAMonth:
          type: number
          format: double
          nullable: true
        averageSumOfCashDepositAMonth:
          type: number
          format: double
          nullable: true
        averageSumOfCashWithdrawalAMonth:
          type: number
          format: double
          nullable: true
        cashDepositMonthlyTrend:
          type: number
          format: double
          nullable: true
        cashDepositToIncome:
          type: number
          format: double
          nullable: true
        cashWithdrawalMonthlyTrend:
          type: number
          format: double
          nullable: true
        cashWithdrawalToExpenses:
          type: number
          format: double
          nullable: true
        cashWithdrawalToIncome:
          type: number
          format: double
          nullable: true
        stableMonthlyCashDeposits:
          type: boolean
          nullable: true
      additionalProperties: false
    Categorisation:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/InsightsAccount'
          nullable: true
        categoryTreeVersion:
          type: string
          nullable: true
      additionalProperties: false
    CategoryId:
      type: object
      properties:
        expense:
          type: string
          nullable: true
        income:
          type: string
          nullable: true
      additionalProperties: false
    Country:
      enum:
        - dk
        - fi
        - 'no'
        - se
      type: string
    CreateInsightsRequest:
      required:
        - country
      type: object
      properties:
        country:
          $ref: '#/components/schemas/Country'
        dropSharedAccounts:
          type: boolean
          nullable: true
        dropJointAccounts:
          type: boolean
          nullable: true
        period:
          type: integer
          format: int32
          nullable: true
        currency:
          type: string
          nullable: true
      additionalProperties: false
    Currency:
      type: object
      properties:
        code:
          type: string
          nullable: true
        creditTurnover:
          type: number
          format: double
          nullable: true
        debitTurnover:
          type: number
          format: double
          nullable: true
        endBalance:
          type: number
          format: double
          nullable: true
        startBalance:
          type: number
          format: double
          nullable: true
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/InsightsTransaction'
          nullable: true
      additionalProperties: false
    Definition:
      type: object
      properties:
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionDetails'
          nullable: true
        income:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionDetails'
          nullable: true
      additionalProperties: false
    DefinitionDetails:
      type: object
      properties:
        categoryId:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
      additionalProperties: false
    GamblingDetails:
      type: object
      properties:
        averageCountAMonth:
          type: number
          format: double
          nullable: true
        averageSumAMonth:
          type: number
          format: double
          nullable: true
        daysSinceLastTransaction:
          type: integer
          format: int32
          nullable: true
        gamblingToAllExpenses:
          type: number
          format: double
          nullable: true
        monthlyRegularityOfGambling:
          type: number
          format: double
          nullable: true
        ratioOfCasino:
          type: number
          format: double
          nullable: true
        ratioOfLottery:
          type: number
          format: double
          nullable: true
        ratioOfSportsBetting:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    Income:
      type: object
      properties:
        averageDaysBetweenIncomePayments:
          type: integer
          format: int32
          nullable: true
        averageMonthlyDiscretionaryIncome:
          type: number
          format: double
          nullable: true
        averageMonthlyIncome:
          type: number
          format: double
          nullable: true
        calendarMonths:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithIncome:
          type: integer
          format: int32
          nullable: true
        daysSinceLastIncomePayment:
          type: integer
          format: int32
          nullable: true
        debtToIncomeRatio:
          type: number
          format: double
          nullable: true
        definitions:
          $ref: '#/components/schemas/Definition'
        incomeByCategory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IncomeDetails'
          nullable: true
        lastIncompleteMonth:
          $ref: '#/components/schemas/MonthlyIncome'
        monthlyRegularity:
          type: number
          format: double
          nullable: true
        monthlyStability:
          type: number
          format: double
          nullable: true
        monthlyTrend:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    IncomeDetails:
      type: object
      properties:
        averageIncomePayment:
          type: number
          format: double
          nullable: true
        averageMonthlyIncome:
          type: number
          format: double
          nullable: true
        daysSinceLastIncomePayment:
          type: integer
          format: int32
          nullable: true
        medianIncomePayment:
          type: number
          format: double
          nullable: true
        numberOfIncomePayments:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    InsightsAccount:
      type: object
      properties:
        accountNumber:
          type: string
          nullable: true
        bank:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
          nullable: true
        holders:
          type: array
          items:
            $ref: '#/components/schemas/AccountHolder'
          nullable: true
        iban:
          type: string
          nullable: true
        isJointOwnership:
          type: boolean
          nullable: true
        isSharedOwnership:
          type: boolean
          nullable: true
        periodEnd:
          type: string
          nullable: true
        periodStart:
          type: string
          nullable: true
      additionalProperties: false
    InsightsCurrency:
      type: object
      properties:
        displayCurrency:
          type: string
          nullable: true
        appliedCurrencyConversions:
          type: array
          items:
            $ref: '#/components/schemas/InsightsCurrencyDetails'
          nullable: true
      additionalProperties: false
    InsightsCurrencyDetails:
      type: object
      properties:
        currency:
          type: string
          nullable: true
        rate:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    InsightsDetails:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/InsightsCurrency'
      additionalProperties: false
    InsightsRequestStatus:
      required:
        - id
        - requestStatus
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestStatus:
          $ref: '#/components/schemas/RequestStatus'
      additionalProperties: false
    InsightsResponse:
      required:
        - id
        - requestStatus
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestStatus:
          $ref: '#/components/schemas/RequestStatus'
        rejectReason:
          type: string
          nullable: true
        report:
          $ref: '#/components/schemas/InsightsResponseDetails'
      additionalProperties: false
    InsightsResponseDetails:
      type: object
      properties:
        categorisation:
          $ref: '#/components/schemas/Categorisation'
        creditScores:
          type: object
          additionalProperties:
            type: number
            format: double
          nullable: true
        features:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: number
              format: double
          nullable: true
        insightsDetails:
          $ref: '#/components/schemas/InsightsDetails'
        insightsIncome:
          $ref: '#/components/schemas/Income'
        insightsLoans:
          $ref: '#/components/schemas/Loan'
        insightsRisk:
          $ref: '#/components/schemas/Risk'
        kyc:
          type: array
          items:
            $ref: '#/components/schemas/KycDetails'
          nullable: true
        observations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Observation'
          nullable: true
        marketing:
          $ref: '#/components/schemas/Marketing'
        simpleScore:
          type: integer
          format: int32
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
      additionalProperties: false
    InsightsTransaction:
      type: object
      properties:
        amount:
          type: number
          format: double
          nullable: true
        categoryId:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        date:
          type: string
          nullable: true
        info:
          type: string
          nullable: true
        transactionId:
          type: string
          nullable: true
        partner:
          type: string
          nullable: true
      additionalProperties: false
    KycDetails:
      type: object
      properties:
        address:
          type: string
          nullable: true
        bank:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        fullName:
          type: string
          nullable: true
        iban:
          type: string
          nullable: true
        personIdentification:
          type: array
          items:
            $ref: '#/components/schemas/PersonIdentification'
          nullable: true
        phoneNumber:
          type: string
          nullable: true
      additionalProperties: false
    Loan:
      type: object
      properties:
        averageMonthlyOutgoingLoanPayment:
          type: number
          format: double
          nullable: true
        calendarMonths:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithIncomingLoans:
          type: integer
          format: int32
          nullable: true
        calendarMonthsWithOutgoingLoans:
          type: integer
          format: int32
          nullable: true
        daysSinceLastIncomingLoan:
          type: integer
          format: int32
          nullable: true
        loansByCategory:
          type: array
          items:
            $ref: '#/components/schemas/LoanDetails'
          nullable: true
        monthlyIncomingLoanTrend:
          type: number
          format: double
          nullable: true
        monthlyOutgoingLoanTrend:
          type: number
          format: double
          nullable: true
        ratioOfIncomingLoansToAllIncome:
          type: number
          format: double
          nullable: true
        ratioOfOutgoingLoansToAllExpenses:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    LoanDetails:
      type: object
      properties:
        averageMonthlyOutgoingLoanPayment:
          type: number
          format: double
          nullable: true
        categoryId:
          $ref: '#/components/schemas/CategoryId'
        categoryTitle:
          type: string
          nullable: true
        daysSinceLastIncomingLoan:
          type: integer
          format: int32
          nullable: true
        monthlyIncomingLoanTrend:
          type: number
          format: double
          nullable: true
        monthlyOutgoingLoanTrend:
          type: number
          format: double
          nullable: true
        numberOfIncomingLoanSources:
          type: integer
          format: int32
          nullable: true
        numberOfOutgoingLoanSources:
          type: integer
          format: int32
          nullable: true
        ratioOfOutgoingLoanCategoryToLoans:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    Marketing:
      type: object
      properties:
        segments:
          $ref: '#/components/schemas/Segments'
      additionalProperties: false
    Metadata:
      type: object
      properties:
        statementDetails:
          $ref: '#/components/schemas/StatementDetails'
        insightsDetails:
          $ref: '#/components/schemas/InsightsDetails'
      additionalProperties: false
    MonthlyIncome:
      type: object
      properties:
        expectedRemainingIncome:
          type: number
          format: double
          nullable: true
        month:
          type: string
          nullable: true
        receivedIncome:
          type: number
          format: double
          nullable: true
        remainingMonthlyDiscretionaryIncome:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    Observation:
      type: object
      properties:
        description:
          type: string
          nullable: true
        severity:
          type: string
          nullable: true
      additionalProperties: false
    PaymentDetails:
      type: object
      properties:
        averageCountAMonth:
          type: number
          format: double
          nullable: true
        averageSumAMonth:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    PersonIdentification:
      type: object
      properties:
        _type:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
      additionalProperties: false
    RequestStatus:
      enum:
        - PENDING
        - PROCESSING
        - PROCESSED
        - REJECTED
      type: string
    Risk:
      type: object
      properties:
        alimonyPayments:
          $ref: '#/components/schemas/PaymentDetails'
        bailiffs:
          $ref: '#/components/schemas/PaymentDetails'
        balance:
          $ref: '#/components/schemas/BalanceDetails'
        cash:
          $ref: '#/components/schemas/CashDetails'
        debtCollection:
          $ref: '#/components/schemas/PaymentDetails'
        dishonours:
          $ref: '#/components/schemas/PaymentDetails'
        gambling:
          $ref: '#/components/schemas/GamblingDetails'
        loanFines:
          $ref: '#/components/schemas/PaymentDetails'
      additionalProperties: false
    Segment:
      type: object
      properties:
        triggered:
          type: boolean
          nullable: true
        details:
          type: string
          nullable: true
      additionalProperties: false
    Segments:
      type: object
      properties:
        hasChildren:
          $ref: '#/components/schemas/Segment'
        hasCar:
          $ref: '#/components/schemas/Segment'
        hasHouse:
          $ref: '#/components/schemas/Segment'
        hasPets:
          $ref: '#/components/schemas/Segment'
        hasLifeInsurance:
          $ref: '#/components/schemas/Segment'
        isDigital:
          $ref: '#/components/schemas/Segment'
        interestedInClothing:
          $ref: '#/components/schemas/Segment'
        interestedInSports:
          $ref: '#/components/schemas/Segment'
        interestedInTraveling:
          $ref: '#/components/schemas/Segment'
        interestedInBeauty:
          $ref: '#/components/schemas/Segment'
        interestedInCulture:
          $ref: '#/components/schemas/Segment'
        interestedInGambling:
          $ref: '#/components/schemas/Segment'
      additionalProperties: false
    StatementDetails:
      type: object
      properties:
        countOfAnalysedAccounts:
          type: integer
          format: int32
          nullable: true
        countOfUploadedAccounts:
          type: integer
          format: int32
          nullable: true
        dropJointAccounts:
          type: boolean
          nullable: true
        dropSharedAccounts:
          type: boolean
          nullable: true
      additionalProperties: false
    Address:
      type: object
      properties:
        city:
          type: string
          description: City/district, state.
          nullable: true
        street:
          type: string
          description: >-
            Street of the building/residence.

            Any diacritic or accended character will be replaced by its own
            equivalent.
          nullable: true
        country:
          type: string
          description: Country.
          nullable: true
      additionalProperties: false
      description: Person/company address information.
    ApplicationType:
      enum:
        - BANK_ID
        - NORDEA_ID
        - BANKNORWEGIAN_APP
      type: string
      description: Type of application used in decoupled authorization.
    ChargeBearerType:
      enum:
        - SHAR
        - DEBT
      type: string
      description: >-
        Which party/parties will bear the charges associated with the processing
        of the payment transaction.
    CreatePaymentRefundRequest:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        description:
          type: string
          description: Description.
          nullable: true
      additionalProperties: false
      description: Payment Refund Request.
    CreatePaymentRequest:
      required:
        - amount
        - creditor
        - paymentProductId
        - region
        - remittanceInformation
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        executionDate:
          type: integer
          description: >-
            Execution date in Unix epoch time format (milliseconds). If the date
            is not a valid bank date for the payment product, then the payment
            will be rejected.
          format: int64
          nullable: true
        externalReference:
          type: string
          description: Payment request identifier in the source system.
          nullable: true
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          type: string
          description: >-
            Region code is defined by <a
            href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"
            target="_blank">ISO 3166</a> standards (e.g. SE, NO, FI, DK).
        paymentProductId:
          type: string
          description: >-
            Payment product identifier linked to the payment request. <br />
            Possible values:

            * se-domestic-credit-transfer,

            * se-international-credit-transfer,

            * se-sepa-credit-transfer,

            * fi-international-credit-transfer,

            * fi-sepa-credit-transfer,

            * dk-domestic-credit-transfer,

            * dk-international-credit-transfer,

            * dk-sepa-credit-transfer,

            * no-domestic-credit-transfer,

            * no-international-credit-transfer,

            * no-sepa-credit-transfer,

            * sepa-credit-transfer.
        paymentTemplateId:
          type: string
          description: >-
            References the PaymentTemplate which has created this PaymentRequest
            (optional).
          nullable: true
        settlementCreditors:
          type: array
          items:
            $ref: '#/components/schemas/SettlementCreditor'
          description: >-
            Final creditor to which funds will be transfered through settlement
            account.
          nullable: true
      additionalProperties: false
      description: >-
        Payment request data required for successfully storing a
        `PaymentRequest`.
    CreatePaymentTemplate:
      required:
        - creditor
        - name
        - paymentProductId
        - region
      type: object
      properties:
        name:
          type: string
          description: Name of the tepmlate.
        description:
          type: string
          description: Description of the template.
          nullable: true
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          type: string
          description: Region code (e.g. SE, NO, FI, DK).
        paymentProductId:
          type: string
          description: Payment product identifier linked to the payment request.
      additionalProperties: false
    CreatePayout:
      type: object
      properties:
        paymentId:
          type: string
          description: ID of the payment for which payout will be created.
        description:
          type: string
          description: Description of the payout.
          nullable: true
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        creditor:
          $ref: '#/components/schemas/PayoutCreditor'
        externalReference:
          type: string
          description: External reference.
          nullable: true
        delayExecution:
          type: boolean
          description: Delay execution.
      additionalProperties: false
    Frequency:
      enum:
        - MONTHLY
      type: string
      description: Valid periodicities for recurring payments.
    PagedPaymentRequestModels:
      type: object
      properties:
        items:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PaymentRequestModel'
              - $ref: '#/components/schemas/PaymentRequestDetailsModel'
            description: Payment request returned as respone on create action.
          description: List of the payment requests.
          nullable: true
        totalItemsCount:
          type: integer
          description: Total number of payment requests.
          format: int64
      additionalProperties: false
      description: Payment request with count number.
    PaymentAccount:
      required:
        - accountNumber
        - accountType
      type: object
      properties:
        accountNumber:
          type: string
          description: |-
            Account number.
            For international payments account number must be an IBAN.
        accountType:
          $ref: '#/components/schemas/PaymentAccountType'
        bic:
          type: string
          description: Mandatory for international payments.
          nullable: true
        currencyCode:
          type: string
          description: The ISO 4217 currency code of the account.
          nullable: true
      additionalProperties: false
      description: Account number and type./>.
    PaymentAccountType:
      enum:
        - IBAN
        - BBAN
        - BG
        - PG
        - SettlementAccountId
      type: string
      description: Account types.
    PaymentAmount:
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          type: string
          description: >-
            Currency that is subject to transaction. This must be a valid ISO
            4217 currency code.
        value:
          pattern: ^\$?\d+(\.(\d{0,2}))?$
          type: number
          description: The amount of the payment transaction.
          format: double
      additionalProperties: false
      description: Amount, i.e. value and currency.
    PaymentCreditor:
      required:
        - account
        - name
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        address:
          $ref: '#/components/schemas/Address'
        message:
          type: string
          description: >-
            Message for the creditor to appear on their transaction. Max length
            12 characters.
          nullable: true
        name:
          type: string
          description: >-
            Name of the creditor.

            The value cannot contains one of the special characters:
            .,:\\-+\"'/\\€$£₤().
      additionalProperties: false
      description: Describes the creditor party for the payment.
    PaymentDebtor:
      required:
        - account
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        email:
          type: string
          description: Email address of the debtor.
          nullable: true
        message:
          type: string
          description: >-
            Message for the debtor to appear on their transaction. Max length 12
            characters.
          nullable: true
        name:
          type: string
          description: Name of the debtor.
          nullable: true
        phoneNumber:
          type: string
          description: Phone number of the debtor.
          nullable: true
      additionalProperties: false
      description: Describes the debtor party for the payment.
    PaymentRemittanceInformation:
      required:
        - type
        - value
      type: object
      properties:
        value:
          type: string
          description: The remittance reference number for the payment.
        type:
          $ref: '#/components/schemas/PaymentRemittanceInformationType'
      additionalProperties: false
      description: >-
        Used to link a payment and a reason for the payment (e.g. link a payment
        with an invoice).
    PaymentRemittanceInformationType:
      enum:
        - UNSTRUCTURED
        - OCR
      type: string
      description: The remittance information type for the payments.
    PaymentRequestDetailsModel:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaymentRequestModel'
      properties:
        authorizationId:
          type: string
          description: >-
            Provider suthorization identifier used during payment initialization
            processs. Set only if payment has been successfully initialized.
          format: uuid
          nullable: true
        providerId:
          $ref: '#/components/schemas/ProviderId'
      additionalProperties: false
      description: Payment request returned as respone on get action.
    PaymentRequestInit:
      required:
        - debtor
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        executionDate:
          type: integer
          description: >-
            Execution date in Unix epoch time format (milliseconds). If the date
            is not a valid bank date for the payment product, then the payment
            will be rejected.
          format: int64
          nullable: true
      additionalProperties: false
      description: >-
        Since payment templates do not have Debtor and/or other information
        pertinent to a `PaymentRequest`, this class

        provides fields required when initiating a `PaymentRequest` creation
        from a template i.e. `/payments/templates/{id}/initiate`.
    PaymentRequestModel:
      required:
        - id
        - status
      type: object
      allOf:
        - $ref: '#/components/schemas/CreatePaymentRequest'
      properties:
        id:
          type: string
          description: Payment request identifier.
          format: uuid
        clientId:
          type: string
          description: Client identifier got from Finshark developer portal.
          nullable: true
        ClientAccess:
          type: string
          description: >-
            Client Access can have the following values: 'PRODUCTION',
            'SANDBOX'.
          nullable: true
        status:
          type: string
          description: |-
            The status of the payment request. Possible values:
            * CREATED,
            * DELETED,
            * IN_PROGRESS,
            * CANCELED,
            * FAILED,
            * REJECTED,
            * TIME_OUT,
            * AUTHORIZED,
            * PARTIALLY_AUTHORIZED.
            * COMPLETED.
      additionalProperties: false
      description: Payment request returned as respone on create action.
    PaymentStatusType:
      enum:
        - CREATED
        - RECEIVED
        - CANCELED
        - FAILED
        - REJECTED
        - RECIPIENT_AUTHORIZATION_REQUIRED
        - EXTENDED_BANKID_REQUIRED
        - AUTHORIZATION_REQUIRED
        - IN_PROGRESS_CODE
        - IN_PROGRESS
        - RECIPIENT_AUTHORIZED
        - TIME_OUT
        - PARTIALLY_AUTHORIZED
        - AUTHORIZED_PENDING_VALIDATION
        - AUTHORIZED_PENDING_CHECK
        - AUTHORIZED_PENDING_SETTLEMENT
        - AUTHORIZED
        - COMPLETED
        - DELETED
      type: string
      description: Available payment statuses.
    PaymentTemplate:
      required:
        - creditor
        - id
        - name
        - paymentProductId
        - region
      type: object
      properties:
        id:
          type: string
          description: Template identifier in Finshark's database.
        name:
          type: string
          description: Name of the tepmlate.
        description:
          type: string
          description: Description of the template.
          nullable: true
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          type: string
          description: Region code (e.g. SE, NO, FI, DK).
        paymentProductId:
          type: string
          description: Payment product identifier linked to the payment request.
      additionalProperties: false
    PaymentTemplateAmount:
      required:
        - currency
        - value
      type: object
      properties:
        currency:
          type: string
          description: >-
            Currency that is subject to transaction. This must be a valid ISO
            4217 currency code.
        value:
          type: number
          description: The amount of the payment transaction.
          format: double
        isAmountEditable:
          type: boolean
          description: Whether the Currnecy and Amount fields are fixed.
      additionalProperties: false
      description: Amount, i.e. value and currency.
    Payout:
      required:
        - amount
        - currency
        - id
        - status
      type: object
      properties:
        id:
          type: string
          description: Payout identifier.
          format: uuid
        organizationId:
          type: integer
          description: Organization identifier.
          format: int32
        createdAt:
          type: integer
          description: >-
            Date when payout was created in Unix epoch time format
            (milliseconds).
          format: int64
          nullable: true
        date:
          type: string
          description: Date when payout was created.
          format: date-time
        description:
          type: string
          description: Description of the payout.
          nullable: true
        amount:
          type: string
          description: Amount of the payout.
        currency:
          type: string
          description: Currency of the payout.
        message:
          type: string
          description: Payout message.
          nullable: true
        status:
          $ref: '#/components/schemas/PayoutStatus'
        creditor:
          $ref: '#/components/schemas/PayoutCreditor'
        paymentId:
          type: string
          description: Identifier of the payment for which payout is created.
          nullable: true
        externalReference:
          type: string
          description: External reference.
          nullable: true
        comment:
          type: string
          description: Comment of the payout.
          nullable: true
        clientId:
          type: string
          description: Client identifier.
          nullable: true
        clientAccess:
          type: string
          description: Client access.
          nullable: true
        debtor:
          $ref: '#/components/schemas/PayoutDebtor'
      additionalProperties: false
    PayoutAccount:
      required:
        - iban
      type: object
      properties:
        iban:
          type: string
        accountNumber:
          type: string
          nullable: true
        accountType:
          type: string
          nullable: true
      additionalProperties: false
    PayoutCreditor:
      type: object
      properties:
        iban:
          type: string
          description: IBAN number of the creditor.
          nullable: true
        bban:
          type: string
          description: BBAN number of the creditor.
          nullable: true
        name:
          type: string
          description: Name of the creditor.
          nullable: true
        personalNumber:
          type: string
          description: Personal number of the creditor.
          nullable: true
        email:
          type: string
          description: Email of the creditor.
          nullable: true
      additionalProperties: false
      description: Payout creditor details.
    PayoutDebtor:
      required:
        - account
      type: object
      properties:
        name:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        account:
          $ref: '#/components/schemas/PayoutAccount'
      additionalProperties: false
    PayoutStatus:
      enum:
        - CREATED
        - PROCESSED
        - CANCELED
        - FAILED
      type: string
      description: |-
        Status of the payout. <br /> Possible values:
        * CREATED
        * PROCESSED
        * CANCELED
        * FAILED.
    ProviderId:
      enum:
        - se-danskebank
        - se-danskebank-sand
        - se-handelsbanken
        - se-handelsbanken-sand
        - se-icabanken
        - se-icabanken-sand
        - se-lansforsakringar
        - se-lansforsakringar-sand
        - se-nordea
        - se-nordea-sand
        - se-seb
        - se-seb-sand
        - se-swedbank
        - se-swedbank-sand
        - se-skandia
        - se-skandia-sand
        - se-norwegian
        - se-norwegian-sand
        - se-sparbankensyd-sand
        - se-sparbankensyd
        - se-brabanksverige
        - se-ekobankenmedlemsbank
        - se-facitbankse
        - se-jakmedlemsbank
        - se-lansparbankse
        - se-skandiabanken
        - se-revolut
        - se-revolut-sand
        - se-alandsbanken
        - se-alandsbanken-sand
        - se-morrowbank
        - se-morrowbank-sand
        - fi-op
        - fi-op-sand
        - fi-spankki
        - fi-spankki-sand
        - fi-nordea
        - fi-nordea-sand
        - fi-danskebank
        - fi-danskebank-sand
        - fi-handelsbanken
        - fi-handelsbanken-sand
        - fi-norwegian
        - fi-norwegian-sand
        - fi-revolut
        - fi-revolut-sand
        - fi-alandsbanken
        - fi-alandsbanken-sand
        - fi-morrowbank
        - fi-morrowbank-sand
        - fi-poppankki
        - fi-poppankki-sand
        - fi-saastopankki
        - fi-saastopankki-sand
        - fi-omasaastopankki
        - fi-omasaastopankki-sand
        - no-dnb
        - no-dnb-sand
        - no-norwegian
        - no-norwegian-sand
        - no-sparebankennarvik
        - no-sparebankennarvik-sand
        - no-aasensparebank
        - no-afjordsparebank
        - no-andebusparebank
        - no-arendalomegnssparekasse
        - no-askimspydebergsparebank
        - no-aurskogsparebank
        - no-aurlandsparebank
        - no-romsdalsparebank
        - no-eikakredittbankas
        - no-biensparebank
        - no-birkenessparebank
        - no-bjugnsparebank
        - no-blakersparebank
        - no-skagerraksparebank
        - no-bergsparebank
        - no-sparebankendin
        - no-bank2
        - no-cultura
        - no-personellservicetrondelag
        - no-drangedalsparebank
        - no-eidsbergsparebank
        - no-etnedalsparebank
        - no-evjehornnessparebank
        - no-facitbankno
        - no-forsvaretspersonellservice
        - no-gildeskalsparebank
        - no-ostreagdersparebank
        - no-grongspareban
        - no-gruesparebank
        - no-haltdalensparebank
        - no-sparebank68Nord
        - no-hemnesparebank
        - no-hegrasparebank
        - no-hjartdalgransheradsparebank
        - no-hjelmelandsparebank
        - no-holandsetskogsparebank
        - no-honefosssparebank
        - no-indresognsparebank
        - no-neringsbankenasa
        - no-jernbanepersonelletssparebank
        - no-nidarossparebank
        - no-jerensparebank
        - no-kvinesdalsparebank
        - no-larvikbanken
        - no-lillestromsparebank
        - no-markersparebank
        - no-melhussparebank
        - no-maritimemerchantbank
        - no-mybankasa
        - no-skuesparebank
        - no-nordiccorporatebankasa
        - no-odalsparebank
        - no-ofotensparebank
        - no-orklasparebank
        - no-oppdalsbanken
        - no-orskogsparebank
        - no-orlandsparebank
        - no-boligbankenasa
        - no-brabank
        - no-rindalsparebank
        - no-rorosbanken
        - no-sandnessparebank
        - no-selbusparebank
        - no-soknedalsparebank
        - no-stadsbygdsparebank
        - no-storebrand
        - no-strommensparebank
        - no-surnadalsparebank
        - no-sunndalsparebank
        - no-fornebubanken
        - no-tinnsparebank
        - no-tolgaossparebank
        - no-totenssparebank
        - no-trogstadsparebank
        - no-tysnessparebank
        - no-easybank
        - no-valdressparebank
        - no-viksparebank
        - no-vallesparebank
        - no-vossveksellandmandsbank
        - no-handelsbanken
        - no-handelsbanken-sand
        - no-sbanken
        - no-sbanken-sand
        - no-swedbank
        - no-swedbank-sand
        - no-revolut
        - no-revolut-sand
        - no-morrowbank
        - no-morrowbank-sand
        - no-nordea
        - no-nordea-sand
        - no-sparebankenvest
        - no-sparebankenvest-sand
        - dk-nordea
        - dk-nordea-sand
        - dk-sparekassendanmark-sand
        - dk-sparekassendanmark
        - dk-lansparbank-sand
        - dk-lansparbank
        - dk-sparekassenkronjylland-sand
        - dk-sparekassenkronjylland
        - dk-folkesparekassen-sand
        - dk-folkesparekassen
        - dk-ikanobank-sand
        - dk-ikanobank
        - dk-basisbank-sand
        - dk-basisbank
        - dk-norwegian
        - dk-norwegian-sand
        - dk-danskebank
        - dk-danskebank-sand
        - dk-swedbank-sand
        - dk-swedbank
        - dk-sparnordbank-sand
        - dk-sparnordbank
        - dk-arbejderneslandsbank-sand
        - dk-arbejderneslandsbank
        - dk-nykreditbank-sand
        - dk-nykreditbank
        - dk-vestjyskbank-sand
        - dk-vestjyskbank
        - dk-coopbank-sand
        - dk-coopbank
        - dk-monsbank-sand
        - dk-monsbank
        - dk-andelskassenfelleskassen-sand
        - dk-andelskassenfelleskassen
        - dk-jyskebank
        - dk-jyskebank-sand
        - dk-ringkjobinglandbobank
        - dk-ringkjobinglandbobank-sand
        - dk-kreditbanken
        - dk-kreditbanken-sand
        - dk-revolut
        - dk-revolut-sand
        - nl-abnamro-sand
        - nl-abnamro
        - nl-ing
        - nl-ing-sand
        - nl-sns-sand
        - nl-sns
        - nl-asn-sand
        - nl-asn
        - nl-regiobank-sand
        - nl-regiobank
        - nl-rabobank
        - nl-rabobank-sand
        - nl-revolut
        - nl-revolut-sand
        - nl-handelsbanken
        - nl-handelsbanken-sand
        - nl-triodos
        - nl-triodos-sand
        - nl-knab
        - nl-knab-sand
        - be-bnpparibasfortis
        - be-bnpparibasfortis-sand
        - be-belfius
        - be-belfius-sand
        - be-kbc
        - be-kbc-sand
      type: string
      description: List of provider identifiers.
    RecurringPaymentCreateRequest:
      required:
        - amount
        - creditor
        - frequency
        - paymentProductId
        - region
        - startDate
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        frequency:
          $ref: '#/components/schemas/Frequency'
        paymentProductId:
          type: string
          description: Payment product identifier linked to the recurring payment.
        region:
          type: string
          description: Region code (e.g. SE, NO, FI, DK).
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        startDate:
          type: integer
          description: >-
            Represents the first date of recurring payment in Unix epoch time
            format (milliseconds).
          format: int64
      additionalProperties: false
      description: Request body when creating a new recurring payment.
    RecurringPaymentResponse:
      required:
        - amount
        - creditor
        - frequency
        - id
        - paymentProductId
        - startDate
        - status
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/PaymentAmount'
        chargeBearer:
          $ref: '#/components/schemas/ChargeBearerType'
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        frequency:
          $ref: '#/components/schemas/Frequency'
        id:
          type: string
          description: Recurring payment identifier.
        paymentProductId:
          type: string
          description: >-
            Information about provider's paymentProductId for which recurring
            payment is intiated.
        psuMessage:
          type: string
          description: >-
            Message for the PSU, included if an action needs to be taken by the
            user during a pending signing.
          nullable: true
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        scaMethods:
          type: array
          items:
            $ref: '#/components/schemas/ScaMethod'
          description: List of available SCA methods.
          nullable: true
        startDate:
          type: integer
          description: >-
            First date of recurring payment in Unix epoch time format
            (milliseconds).
          format: int64
        status:
          $ref: '#/components/schemas/PaymentStatusType'
        tppMessages:
          type: array
          items:
            type: string
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          nullable: true
      additionalProperties: false
      description: Recurring payment response model.
    ScaMethod:
      required:
        - scaMethodType
      type: object
      properties:
        href:
          type: string
          description: Redirect link for redirect or decoupled SCA methods.
          nullable: true
        downloadLink:
          type: string
          description: |-
            Download link used to get image that contains dynamic QR code.
            Supported formats:

                PNG.
          nullable: true
        downloadInterval:
          type: integer
          description: >-
            Download interval represents the period of changing the content of
            the downloadLink.
          format: int32
          nullable: true
        scaMethodType:
          $ref: '#/components/schemas/ScaMethodType'
        application:
          $ref: '#/components/schemas/ApplicationType'
      additionalProperties: false
      description: Strong customer authentication method.
    ScaMethodType:
      enum:
        - PSU_DECOUPLED
        - PSU_REDIRECT
      type: string
      description: Strong customer authentication methods.
    SettlementCreditor:
      required:
        - accountNumber
        - accountType
        - amount
      type: object
      properties:
        accountNumber:
          type: string
          description: Creditor's account number.
        accountType:
          $ref: '#/components/schemas/PaymentAccountType'
        bic:
          type: string
          description: Bank Identifier Code is mandatory when specified BBAN.
          nullable: true
        amount:
          pattern: ^\$?\d+(\.(\d{0,2}))?$
          type: number
          description: Amount which will be transferred to the creditor.
          format: double
        currencyCode:
          type: string
          description: The ISO 4217 currency code of the account.
          nullable: true
        name:
          type: string
          description: Creditor's name.
          nullable: true
      additionalProperties: false
      description: Settlement Creditor information.
    SigningBasketCreateRequest:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/PaymentDebtor'
        paymentIds:
          type: array
          items:
            type: string
          description: >-
            Array of paymentIds to include in the basket. If any of the payments
            are not signable the creation will be rejected.
          nullable: true
        payments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CreatePaymentRequest'
              - $ref: '#/components/schemas/PaymentRequestDetailsModel'
              - $ref: '#/components/schemas/PaymentRequestModel'
            description: >-
              Payment request data required for successfully storing a
              `PaymentRequest`.
          description: >-
            Array of payments reaquests payloads to include in the basket. If
            any of the payments payloads are not signable the creation will be
            rejected.
          nullable: true
      additionalProperties: false
      description: Signing Basket body request when creating a new basket.
    SigningBasketResponse:
      required:
        - amount
        - currency
        - id
        - paymentIds
        - paymentProductId
        - status
      type: object
      properties:
        amount:
          type: number
          description: Total amount of the basket.
          format: double
        currency:
          type: string
          description: >-
            Currency of the basket amount. This must be a valid ISO 4217
            currency code.
        id:
          type: string
          description: GUID, resource ID of the signing basket.
        paymentIds:
          type: array
          items:
            type: string
          description: >-
            Array of signing basket payment ids included in the signing basket
            returned only when signing basket has been created using list of
            payment Ids.
        payments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PaymentRequestModel'
              - $ref: '#/components/schemas/PaymentRequestDetailsModel'
            description: Payment request returned as respone on create action.
          description: >-
            Array of signing basket payments included in the signing basket
            returned only when signing basket has been created using list of
            payment bodies.
          nullable: true
        paymentProductId:
          type: string
          description: Payment product identifier linked to the signing basket.
        psuMessage:
          type: string
          description: >-
            Message for the PSU, included if an action needs to be taken by the
            user during a pending signing.
          nullable: true
        scaMethods:
          type: array
          items:
            $ref: '#/components/schemas/ScaMethod'
          description: List of available SCA methods.
          nullable: true
        status:
          $ref: '#/components/schemas/SigningBasketStatus'
        tppMessages:
          type: array
          items:
            type: string
          description: >-
            Message for the TPP, e.g. if an action needs to be taken by the user
            during a pending signing or an error message.
          nullable: true
        debtorAccountNumber:
          type: string
          description: >-
            Account number of a debtor, set when creating payment request for
            signing basket.
          nullable: true
      additionalProperties: false
      description: Signing basket response model.
    SigningBasketStatus:
      enum:
        - CREATED
        - RECEIVED
        - CANCELED
        - FAILED
        - REJECTED
        - RECIPIENT_AUTHORIZATION_REQUIRED
        - AUTHORIZATION_REQUIRED
        - IN_PROGRESS_CODE
        - IN_PROGRESS
        - RECIPIENT_AUTHORIZED
        - PARTIALLY_AUTHORIZED
        - AUTHORIZED
        - COMPLETED
        - DELETED
      type: string
      description: Available signing basket statuses.
    UpdatePaymentTemplate:
      type: object
      properties:
        name:
          type: string
          description: Name of the tepmlate.
          nullable: true
        description:
          type: string
          description: Description of the template.
          nullable: true
        creditor:
          $ref: '#/components/schemas/PaymentCreditor'
        amount:
          $ref: '#/components/schemas/PaymentTemplateAmount'
        remittanceInformation:
          $ref: '#/components/schemas/PaymentRemittanceInformation'
        region:
          type: string
          description: Region code (e.g. SE, NO, FI, DK).
          nullable: true
        paymentProductId:
          type: string
          description: Payment product identifier linked to the payment request.
          nullable: true
      additionalProperties: false
    ValidationProblemDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
      properties:
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          nullable: true
      additionalProperties: {}
    AuthorizationValidationRequest:
      type: object
      properties:
        psuId:
          type: string
          description: >-
            Set when wants to validate if selected PSU identifier has been used
            during consent authorization process.
          nullable: true
        organizationId:
          type: string
          description: >-
            Set when wants to validate if selected organization identifier has
            been used during consent authorization process.
          nullable: true
      additionalProperties: false
      description: >-
        Use validation request when wants to check if selected properties have
        been used during consent authorization process.
    AuthorizattionValidationResponse:
      type: object
      properties:
        psuId:
          $ref: '#/components/schemas/ValidationType'
        organizationId:
          $ref: '#/components/schemas/ValidationType'
      additionalProperties: false
      description: >-
        The authorization validation response contains the validation results of
        each selected property.
    ConsentAuthorizationInfo:
      required:
        - authorizationId
        - status
      type: object
      properties:
        authorizationId:
          type: string
          description: Consent authorization identifier.
          format: uuid
        expiryTime:
          type: integer
          description: >-
            Expiration UTC date and time of the consent in Unix timestamp
            (milliseconds).
          format: int64
          nullable: true
        ExpiryIn:
          type: integer
          description: Consent expires in seconds.
          format: int64
          nullable: true
        status:
          $ref: '#/components/schemas/ConsentStatusType'
      additionalProperties: false
      description: Consent authorization details.
    ConsentStatusType:
      enum:
        - AUTHORIZED
        - CANCELED
        - EXPIRED
        - FAILED
        - IN_PROGRESS
        - REJECTED
      type: string
      description: Consent statuses.
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    ValidationType:
      enum:
        - VALID
        - INVALID
        - UNKNOWN
      type: string
      description: PSU identifier validation type that can be found in response.
    CreateWebhookRequest:
      required:
        - event
        - url
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          minLength: 1
          type: string
          description: >-
            Gets or sets webhook url parameter. Supports only HTTPS. Maximal
            length is 256.
      additionalProperties: false
      description: Webhook request body.
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    UpdateWebhookRequest:
      required:
        - event
        - url
      type: object
      properties:
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          minLength: 1
          type: string
          description: >-
            Gets or sets webhook url parameter. Supports only HTTPS. Maximal
            length is 256.
      additionalProperties: false
      description: Webhook request body.
    WebhookEventType:
      enum:
        - paymentStatusChanged
        - verifiedAccount
        - payoutStatusChanged
      type: string
      description: Webhook event type.
    WebhookResponse:
      required:
        - clientId
        - event
        - id
        - url
      type: object
      properties:
        id:
          type: string
          description: Gets or sets webhook identifier.
          format: uuid
        clientId:
          minLength: 1
          type: string
          description: Gets or sets client identifier.
        event:
          $ref: '#/components/schemas/WebhookEventType'
        url:
          minLength: 1
          type: string
          description: Gets or sets webhook url.
      additionalProperties: false
      description: Webhook response body.
  securitySchemes:
    Bearer:
      type: apiKey
      description: Please enter into field the word 'Bearer' following by space and JWT
      name: Authorization
      in: header
security:
  - Bearer: []
