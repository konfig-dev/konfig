openapi: 3.0.1
info:
  description: >
    Ducky Data's APIs provide footprint data for a wide variety of products and
    circular services, as well as individuals, and consumption-based emissions
    for municipalities and other administrative units.


    The endpoints are divided by functionality. 

    The Calculate endpoints compute the footprint of an individual based on
    their habits and other lifestyle data. 

    The Change endpoint generates climate friendly tips based on the user's
    habits, and can be used to nudge the user towards sutainable behavioral
    change.

    The Compare endpoints return the average footprint of a citizen in a given
    area (municipality or BSU).

    The Convert endpoints turn physical data like energy use or transaction
    amount into climate footprint.

    Reporting endpoints are for calculating scope 1 & 2 emissions according to
    the GHG protocol.

    The Track endpoints returns the values of indicators (drivers of footprint)
    for a given area (municipality or BSU).

    The Translate endpoints contextualize a given quantity of CO2e by expressing
    them in something more tangible, like a flight trip.


    In the description of each endpoint, you will find the link to a user
    documentation page detailing the sources and calculation principles.

    All of our user documentation pages can be found
    [here](https://support.ducky.eco/en/ducky-insights#introduction-to-ducky-insights).


    ### Base URL

    The API is served over HTTPS.

    The section [API Servers](https://storage.googleapis.com) indicates the base
    URLs for all requests in the documentation.


    ### Authentication

    The API requires [authentication](https://storage.googleapis.com). You have
    to negotiate an `access_token` and send it with every request, in the
    `authorization` header.


    Step-by-step:

    1. [Email Ducky to request](mailto:api@ducky.eco) a `CLIENT_ID` and a
    `CLIENT_SECRET`

    2. Negotiate an `access_token` with Auth0

    3. Send authenticated requests to Ducky API


    Learn in detail how to negotiate and use an `access_token` in the
    [Authentication section](https://storage.googleapis.com).
  title: Ducky Data V3 - climate data APIs
  version: 3.0.0
servers:
  - url: https://api.ducky.eco/v3
paths:
  /calculate/finance:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: Format output based on a custom mapping
          in: query
          name: categoryMapping
          schema:
            default: ducky
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumptionKgCO2ePerTransactionsResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - calculate
      description: >
        Get footprint in kilograms CO2 equivalent for a given amount of money
        spent in a category.

        This endpoint receives a list of monetary transactions and returns, for
        each transaction, a footprint.

        Habit data can additionally be provided to improve the calculation.

        If no habit data is provided a default average dataset for the given
        datasource will be used. 

        The returned value is given in kilograms and is rounded to grams.


        [See detailed user documentation
        here](https://support.ducky.eco/en/calculation-finance)
      operationId: calculate-finance-transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateFinanceTransactionsInput'
        description: |
          Habits input

          All habits inputs are optional and missing values are defaulted.
        required: true
      summary: Get kgCO2e per monetary transaction
      x-codegen-request-body-name: body
  /calculate/food-and-drink:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculateFoodAndDrinkResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - calculate
      description: >
        The purpose is to calculate the weight, cost and footprint of food,
        beverages and the resulting food waste, based on the dietary habits of
        the consumer.

        This can be used to show actual change in footprint over time and
        savings from sustainable measures.


        [See detailed user documentation
        here](https://support.ducky.eco/en/calculation-food-and-drink)
      operationId: calculate-food-and-drink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateFoodAndDrinkHabitsInput'
        description: >
          Calculate food and drink input.

          If you have not submitted optional data, you get the conversion factor
          for the given category in return.
        required: true
      summary: Get kgCO2e, weight, waste, and money spent per food category.
      x-codegen-request-body-name: body
  /calculator:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - japan
              - united_kingdom
            type: string
        - description: Categories to include in response
          explode: false
          in: query
          name: categories
          schema:
            default: '["public","consumption","transport","food","energy"]'
            items:
              enum:
                - public
                - consumption
                - transport
                - food
                - energy
              type: string
            type: array
          style: form
        - allowEmptyValue: true
          description: Include subcategories
          in: query
          name: subCategories
          schema:
            default: false
            type: boolean
        - description: Is the footprint for an individual or a household
          in: query
          name: scope
          schema:
            default: household
            enum:
              - household
              - individual
            type: string
        - allowEmptyValue: true
          description: Prevent rounding of percentages
          in: query
          name: precision
          schema:
            default: false
            type: boolean
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FootprintResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - calculate
      description: >
        Get an individual or household footprint in kilograms CO2 equivalent for
        the given habits.

        This endpoint receives a list of habits broken down into categories and
        a household description. 

        This can be used to build your own climate calculator with as many
        inputs as you'd like.

        If an empty body is provided an average footprint for the given
        datasource will be returned.

        This can be used to compare a person's climate footprint to the average
        footprint for a country.

        All inputs are optional and missing values are defaulted.

        The returned object contains a breakdown of an annual footprint in
        categories and subcategories, with absolute and percentage values.


        [See detailed user documentation
        here](https://support.ducky.eco/en/calculate-general)
      operationId: calculate-footprint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatorHabitsInput'
        description: |
          Habits input

          All inputs are optional and missing values are defaulted.
        required: true
      summary: Calculate annual footprint by categories
      x-codegen-request-body-name: body
  /change:
    post:
      parameters:
        - description: Region of the requested data set
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - japan
              - united_kingdom
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'.


            We provide historical data only for the values of the returned
            indicators.


            [See detailed user documentation
            here](https://support.ducky.eco/en/change-general)

            Please note that some indicators have "static" values and do not
            support historical data.
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
        - description: Language of the text returned
          in: query
          name: language
          schema:
            default: 'no'
            enum:
              - 'no'
              - ja
              - en
            type: string
        - description: >
            Order the results using the specified attribute.

            The attributes of type "indicator" (co2, points, moneySaved) are
            sorted by descending order.

            The attributes of type "investment" (financialCost, timeRequirement,
            socialDifficulty) are sorted by ascending order.
          in: query
          name: orderBy
          schema:
            default: co2
            enum:
              - co2
              - points
              - moneySaved
              - financialCost
              - timeRequirement
              - socialDifficulty
              - random
            type: string
        - description: |
            Choose whether the legacy tipID should be outputted.
          in: query
          name: returnLegacyTipId
          schema:
            default: false
            type: boolean
        - description: >
            Choose whether to ignore tips that would produce a zero or negative
            impact in terms of CO2 footprint.

            Such cases will happen if a user already has good habits on some
            area, and the tip concerns improving behaviour exactly on this
            subject, but to a lesser extent than the user is already doing.

            Tips where this is the case are by default removed to avoid crowding
            the output with tips that are not helpful.
          in: query
          name: ignoreZeroOrNegativeTips
          schema:
            default: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - change
      description: |
        Get tips for how to lower you co2 emissions by changing your behaviour.
      operationId: change-getAll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRequestBody'
        description: |
          Habits input and filtering criteria

          All habit inputs are optional and missing values are defaulted.
          Only activities matching the filtering criteria will be returned.
          If no filtering criteria is provided, all activities will be returned.
      summary: Get tips for improving behaviour.
  /compare/food-and-drink:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareFoodAndDrinkResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - compare
      description: >
        Retrieve an average footprint, close to your filtering criteria,
        computed based on real citizen's data.

        The response can be compare against the /calculate/food-and-drink
        endpoint's response.


        [See detailed user documentation
        here](https://support.ducky.eco/en/compare-food-and-drink)
      operationId: compare-food-and-drink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompareInput'
        description: |
          Filtering criteria
        required: true
      summary: Fetch an average food-and-drink footprint based on filtering criteria.
      x-codegen-request-body-name: body
  /compare/general:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareGeneralResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - compare
      description: >
        Retrieve an average footprint for a given areaId, computed based on real
        citizen's data.

        The response can be compare against the /calculator endpoint's response.


        [See detailed user documentation
        here](https://support.ducky.eco/en/compare-general)
      operationId: compare-general
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompareInput'
        description: |
          Filtering criteria
        required: true
      summary: Fetch an average category-based footprint based on filtering criteria.
      x-codegen-request-body-name: body
  /compare/transport:
    post:
      parameters:
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
        - description: >
            Area code of the area for which transport footprint is requested.
            [See detailed area ID
            documentation](https://doc.api.ducky.eco/area-ids-mapping) for
            mapping between area names and their codes.
          in: query
          name: areaId
          required: true
          schema:
            example: no-3024
            type: string
        - description: >
            Choose which time range you wish to receive data for. Currently the
            most granular data available is per month, which means that if a
            monthly range is requested, you will directly receive the data for
            the requested month. If you choose a yearly range, the values are a
            sum of all monthly values accross the given year.
          in: query
          name: timeRange
          schema:
            default: monthly
            enum:
              - monthly
              - yearly
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompareTransportResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - compare
      description: >
        Retrieve the transport footprint per capita for a given area and time.
        Both municipalities and basic statistical units (BSUs) are valid areas.
        The result will be valid for the month that the inputed date belongs to.

        The footprints are calculated based on the area indicators accessible
        through the track/transport endpoint. 

        If an indicator is missing for an area, the most granular indicator
        available will be used instead. 

        It will be collected from the closest parent which contains the relevant
        indicator. 

        In the case of a BSU, this would mean that the indicator from a
        municipality is to be preferred over one from the country/region.

        [See detailed user documentation
        here](https://support.ducky.eco/en/compare-transport).
      operationId: compare-transport
      summary: Fetch transport footprint for a given area.
      x-codegen-request-body-name: body
  /convert/energy:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertEnergyResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Get footprint in kilograms CO2 equivalent for energy usage by category.

        This endpoint receives 


        - a data source to base calculations on

        - a list of Energy categories, associated to a value and its unit


        At least one category must be provided.

        Amount is optional.

        If you have not submitted optional data, you get the conversion factor
        for the given category in return.

        This endpoint returns, for each category


        - footprint in kilograms of CO2e, rounded to grams


        [See detailed user documentation
        here](https://support.ducky.eco/en/convert-energy)
      operationId: convert-energy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertEnergyInput'
        description: >
          Convert Energy input.

          At least one category must be provided.

          Amount is optional.

          If you have not submitted optional data, you get the conversion factor
          for the given category in return.
        required: true
      summary: Get kgCO2e per kWh used.
      x-codegen-request-body-name: body
  /convert/finance:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - denmark
              - sweden
              - finland
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertFinanceResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Get footprint in kilograms of CO2-equivalents for financial transactions
        by category.

        This endpoint receives


        - a data source to base calculations on

        - a list of financial categories, associated to an amount and its unit


        At least one category must be provided.

        Amount and unit of currency is optional.

        If you have not provided a unit, it defaults to the unit corresponding
        to the dataSource.

        If you have not submitted an amount, you get the conversion factor for
        the given category in return.

        This endpoint returns, for each category


        - footprint in kilograms of CO2e, rounded to grams


        [See detailed user documentation
        here](https://support.ducky.eco/en/convert-finance)
      operationId: convert-finance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertFinanceInput'
        description: >
          Convert finance input.

          At least one category must be provided.

          Amount and unit of currency is optional.

          If you have not provided a unit, it defaults to the unit corresponding
          to the dataSource.

          If you have not submitted an amount, you get the conversion factor for
          the given category in return.
        required: true
      summary: |
        Get footprint in kilograms of CO2-equivalents for financial transactions
        by category.
      x-codegen-request-body-name: body
  /convert/food-and-drink:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertFoodAndDrinkResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Get footprint in kilograms CO2 equivalent for a given amount of calories
        (or weight) spent in some categories of Food and Drink.


        This endpoint receives  


        - a data source to base calculations on

        - a list of Food & Drink categories, optionally associated to a value
        and its unit


        At least one category must be provided.

        Values and units are optional.

        If you have not submitted optional data, you get the conversion factor
        for the given category in return.

        This endpoint returns, for each category


        - footprint in kilograms of CO2e, rounded to grams

        - weight


        [See detailed user documentation
        here](https://support.ducky.eco/en/calculation-food-and-drink)
      operationId: convert-food_and_drink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertFoodAndDrinkInput'
        description: >
          Convert Food & Drink input.

          At least one category must be provided.

          Values and units are optional.

          If you have not submitted optional data, you get the conversion factor
          for the given category in return.
        required: true
      summary: Get kgCO2e per calory or weight of Food and Drink.
      x-codegen-request-body-name: body
  /convert/goods-and-services:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertGoodsAndServicesResponse'
          description: >
            A successful response


            The returned item names are the same as the inputed ones. If a
            number (a GPC Brick code) was provided, it returns a number. If a
            string was provided, it returns a string.

            The order of the response is the same as the order of the input.
            Therefore, if multiple items have the same `itemName`, the ordering
            of the output indicates the matching input.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Get the cradle-to-gate footprint (in kgCO2e) for an item. Optionally,
        also the carbon savings possible as a result of renting, repairing or
        buying the item used.


        Note that this endpoint converts items that can be linked to [GPC brick
        codes](https://gpc-browser.gs1.org/). Services, which cannot be linked
        to GPC brick codes, are covered by the [Convert Finance
        endpoint](https://doc.api.ducky.eco/api-reference/api-v3#post-/convert/finance),
        where their footprint is specified by their price.


        This endpoint receives:

        * Unique item identifier: GPC code or item name


        Optional input fields:

        * Purchase type (called useMode):
            * None (only returns the average cradle-to-gate footprint of the given item)
            * Buying used
            * Renting
            * Repairing
        * Number of items

        * Duration of the rental period

        * Price of the item

        * Business model of the company: Online or Physical

        * Weight of the item


        The endpoint returns the cradle-to-gate footprint of producing a new
        item(s) of the type specified, and optionally the savings associated
        with the purchase type.

        For example, if the item you input is a t-shirt, and the purchase mode
        is buying used, you are returned the footprint of producing a t-shirt
        and the achievable savings from buying it used.


        [See detailed user documentation
        here](https://support.ducky.eco/en/convert-goods-services)
      operationId: convert-goods-and-services
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertGoodsAndServicesInput'
        description: |
          Convert Circular Economy input.
        required: true
      summary: >-
        Get footprint of an item and optionally the avoided emissions obtained
        by choosing to rent, repair or buy an item used instead of new.
      x-codegen-request-body-name: body
  /convert/goods-and-services/list-items:
    get:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertGoodsAndServicesItemsListResponse'
          description: |
            A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Returns all valid items for the convert/goods-and-services endpoint,
        with both names (string) and GPC brick code (number).
      operationId: convert-goods-and-services/list-items
      summary: >-
        Get a list of all valid items for the convert/goods-and-services
        endpoint.
      x-codegen-request-body-name: body
  /convert/transport:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertTransportResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - convert
      description: >
        Get footprint in kilograms CO2 equivalent for transport usage by
        category.

        This endpoint receives 


        - a data source to base calculations on

        - a list of Transport categories, associated to a value and its unit as
        well as occupancy rate


        At least one category must be provided.

        Amount and occupancy rate are optional.

        If you have not submitted optional amount data, you get the conversion
        factor for the given category in return.

        If you do not provide occupancy rate, a default value is used instead.

        This endpoint returns, for each category


        - footprint in kilograms of CO2e, rounded to grams

        - Life cycle breakdown of the footprint, in kilograms of CO2e, rounded
        to grams


        The life cycle breakdown includes


        - production phase emissions

        - use phase emissions

        - infrastructure emissions


        [See detailed user documentation
        here](https://support.ducky.eco/en/convert-transport)
      operationId: convert-transport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertTransportInput'
        description: >
          Convert Transport input.

          At least one category must be provided.

          Amount is optional.

          Occupancy rate is optional.

          If you have not submitted optional amount data, you get the conversion
          factor for the given category in return.

          If you do not provide occupancy rate, a default value is used instead.
        required: true
      summary: Get kgCO2e per distance travelled.
      x-codegen-request-body-name: body
  /ping:
    get:
      responses:
        '200':
          content: {}
          description: API is ready to accept requests
      tags:
        - ping
      operationId: ping
      summary: Check if the API is running
  /ping/protected:
    get:
      responses:
        '200':
          content: {}
          description: |
            API is ready to accept requests and your authentication token
            is valid
      security:
        - ApiKeyAuth: []
      tags:
        - ping
      operationId: protected/ping
      summary: Check if the API is running and if your authentication token is valid
  /report/scope-1:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          required: false
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          required: false
          schema:
            default: today
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  report:
                    $ref: '#/components/schemas/Scope1ReportingResponse'
                required:
                  - report
                type: object
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - reporting
      description: >
        Compute greenhouse gas emissions for your company's assets.

        There are many relevant reporting schemes and Ducky has chosen to comply
        with the leading GHG Protocol standard.

        Here, an organisation’s GHG emissions are classified into three scopes:
          - Scope 1 (direct emissions)
          - Scope 2 (indirect emissions)
          - Scope 3 (value chain emissions)
        Our reporting endpoints are created to ensure compliance with the GHG
        Protocol.


        Scope 1 emissions are direct emissions from company-owned and controlled
        resources.

        They are divided into four categories: stationary combustion (e.g fuels,
        heating sources), mobile combustion (vehicles owned or operated by the
        firm), fugitive emissions (GHG gases released from refrigeration, air
        conditioning units) and process emissions (released during industrial
        processes, on-site manufacturing).

        Note that fugitive emissions are not included in our calculations as it
        is not common to account for them.


        To summarise, the emissions from all the fuels used by the organisation
        are reported under Scope 1.


        [See detailed user documentation
        here](https://support.ducky.eco/en/reporting-ghg-emissions)
      operationId: report-scope-1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scope1ReportingInput'
        description: >
          Submit a list of entries to include in your scope 1 GHG emissions
          report.

          Each entry refers to a company-owned asset that releases CO2e
          emissions.

          Each entry contains activity data which can be expressed in one of the
          three available types:

          1. Fuel used

          2. Distance travelled

          3. Money spent on fuel


          It is mandatory to provide at least one type of activity data.

          It is unnecessary to fill more than one type of activity data.

          If you choose to provide more than one type of activity data, there
          exists a preference hierarchy for deciding which activity data will be
          used in the calculations: fuel use takes precedence over distance
          travelled, and distance travelled takes precedence over money spent on
          fuel.
        required: true
      summary: Compute Scope 1 GHG emissions.
  /report/scope-2:
    post:
      parameters:
        - description: Data Source to use for calculation
          in: query
          name: dataSource
          required: false
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          required: false
          schema:
            default: today
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties: false
                properties:
                  report:
                    $ref: '#/components/schemas/Scope2ReportingResponse'
                required:
                  - report
                type: object
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - reporting
      description: >
        Compute greenhouse gas emissions for your company's assets.

        There are many relevant reporting schemes and Ducky has chosen to comply
        with the leading GHG Protocol standard.

        Here, an organisation’s GHG emissions are classified into three scopes:
          - Scope 1 (direct emissions)
          - Scope 2 (indirect emissions)
          - Scope 3 (value chain emissions)
        Our reporting endpoints are created to ensure compliance with the GHG
        Protocol.


        Scope 2 emissions are indirect emissions from the generation of
        purchased electricity, heating, cooling and steam, from a utility
        provider.

        In other words, all GHG emissions released from the consumption of
        purchased electricity, steam, heat and cooling.

        The GHG standard highlights two approaches to allocate Scope 2 GHG
        emissions to the end consumer: location-based and market-based.

        The market-based method reflects emissions from electricity that
        companies have purposefully chosen (or their lack of choice), while the
        location-based method reflects the average emissions intensity of grids
        on which energy consumption occurs.


        [See detailed user documentation here](https
        ://support.ducky.eco/en/reporting-ghg-emissions)
      operationId: report-scope-2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scope2ReportingInput'
        description: >
          Submit a list of entries to include in your scope 2 GHG emissions
          report.
        required: true
      summary: Compute Scope 2 GHG emissions.
  /track/transport:
    post:
      parameters:
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
        - description: >
            Choose which time range you wish to receive data for. Currently the
            most granular data available is per month, which means that if a
            monthly range is requested, you will directly receive the data for
            the requested month. If you choose a yearly range, the values are an
            average of all monthly values accross the given year
          in: query
          name: timeRange
          schema:
            default: monthly
            enum:
              - monthly
              - yearly
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaIndicatorsResponse'
          description: A successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Not Found
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - track
      description: >
        Track transport indicators (parameters that influence the transport
        footprint) to see how they change over time. Indicators are provided for
        municipality or BSU area codes, and are updated monthly.

        [See detailed user documentation
        here](https://support.ducky.eco/en/track-transport-indicators). 

        If an indicator is missing, the most granular indicator available will
        be used instead. 

        It will be collected from the closest parent which contains it, and is
        smallest in size. 

        In the case of a grunnkrets, this would mean that the indicator from a
        municipality is to be preferred over one from the country/region.
      operationId: track-transport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AreaIndicatorsInput'
        required: true
      summary: Get indicators for a certain administrative area.
  /translate/car:
    post:
      parameters:
        - description: Region of the requested data set
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - japan
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateCarDistanceResponse'
          description: Translated value
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - translate
      description: >
        Get CO2 equivalents translated into familiar quantities, in the form of
        the distance between two destinations driven by car, per person. 

        Life-cycle assessment is used for the calculations, which means that
        production, oil extraction, infrastructure and end-of-life treatment
        emissions are also taken into account.


        If the submitted CO2e does not match any of of our journeys, there are
        two possible outcomes

        - if the submitted CO2e corresponds to a distance higher than that of
        the largest translation in our database, the largest translation is
        outputted, with `numberOfTimes` indicating how many times this journey
        can be performed to emit the submitted CO2e.

        - if the submitted CO2e corresponds to a distance smaller than that of
        the largest translation in our database, the translation field is left
        undefined.


        [See detailed user documentation
        here](https://support.ducky.eco/en/translate-to-car-trips)
      operationId: translate-car
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateInput'
        description: >
          Kilograms of CO2 equivalents that are to be translated. This is per
          passenger.
      summary: Translate kilograms CO2 equivalent to distance travelled by car
  /translate/energy:
    post:
      parameters:
        - description: Region of the requested data set
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - japan
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateEnergyResponse'
          description: Translated value
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - translate
      description: >
        Get CO2 equivalents translated into familiar quantities, in the form of
        the energy required to use an electrical appliance for a given amount of
        time. European energy mix is used.


        [See detailed user documentation
        here](https://support.ducky.eco/en/translate-to-energy-usage)
      operationId: translate-energy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateInput'
        description: |
          Kilograms of CO2 equivalents that are to be translated.
      summary: >-
        Translate kilograms CO2 equivalent to the usage of an electrical
        appliance.
  /translate/plane:
    post:
      parameters:
        - description: Region of the requested data set
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
            type: string
        - description: >
            You can choose to use data from any date for which we have data

            in our database. If you do not submit a date, the current (and
            thereby the

            most updated data) will be used. Must be of format 'yyyy-mm-dd'
          in: query
          name: dataFromDate
          schema:
            format: date
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslatePlaneDistanceResponse'
          description: Translated value
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - translate
      description: >
        Get CO2 equivalents translated into familiar quantities, in the form of
        the distance between two destinations flown by an airplane, per
        passenger.

        Life-cycle assessment is used for the calculations, which means that
        production, oil extraction, infrastructure and end-of-life treatment
        emissions are also taken into account.


        If the submitted CO2e does not match any of of our journeys, there are
        two possible outcomes

        - if the submitted CO2e corresponds to a distance higher than that of
        the largest translation in our database, the largest translation is
        outputted, with `numberOfTimes` indicating how many times this journey
        can be performed to emit the submitted CO2e.

        - if the submitted CO2e corresponds to a distance smaller than that of
        the largest translation in our database, the translation field is left
        undefined.


        [See detailed user documentation
        here](https://support.ducky.eco/en/translate-to-plane-trips)
      operationId: translate-plane
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateInput'
        description: >
          Kilograms of CO2 equivalents that are to be translated. This is per
          passenger travelling in economy class.
      summary: Translate kilograms CO2 equivalent to distance flown by an airplane.
  /translate/tree:
    post:
      parameters:
        - description: Region of the requested data set
          in: query
          name: dataSource
          schema:
            default: norway
            enum:
              - norway
              - japan
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslateTreeResponse'
          description: Translated value
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
          description: Invalid request
        default:
          content: {}
          description: Unexpected error
      security:
        - ApiKeyAuth: []
      tags:
        - translate
      description: >
        Get CO2 equivalents translated into familiar quantities, in the form of
        area of trees that is required to absorb the given amount of CO2 during
        a period of time.


        [See detailed user documentation
        here](https://support.ducky.eco/en/translate-to-tree-area)
      operationId: translate-tree
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateInput'
        description: |
          Kilograms of CO2 equivalents that are to be translated.
      summary: >-
        Translate kilograms CO2 equivalent to how quickly it can be absorbed by
        a number of trees.
components:
  schemas:
    AreaIndicatorsInput:
      additionalProperties: false
      properties:
        areaId:
          description: >-
            Area code of the area for which indicators are requested. [See
            detailed area ID
            documentation](https://doc.api.ducky.eco/area-ids-mapping) for
            mapping between area names and their codes.
          example: no-5001
          type: string
      required:
        - areaId
      type: object
    AreaIndicatorsResponse:
      additionalProperties: false
      properties:
        area:
          additionalProperties: false
          properties:
            id:
              example: no-5001
              type: string
            name:
              example: Trondheim
              type: string
            parentId:
              description: >
                The closest parent of the requested area. In the case of a BSU,
                this will be the municipality that the BSU belongs to, and in
                the case of a municipality, it will be the county that the
                municipality belongs to, etc.
              example: no-50
              type: string
          required:
            - id
            - name
          type: object
        indicators:
          description: |
            A list of indicators for the given area
          items:
            additionalProperties: false
            properties:
              indicator:
                additionalProperties: false
                description: |
                  The indicator of a given area
                properties:
                  unit:
                    description: The unit is always per inhabitant, per year.
                    example: km
                    type: string
                  value:
                    example: 300
                    type: number
                required:
                  - value
                  - unit
                type: object
              name:
                description: |
                  Name of the indicator
                example: Domestic flights
                type: string
              originAreaId:
                description: >
                  The area the indicator belongs to. 

                  This field is relevant when an area is missing an indicator,
                  but one if its parents has it.

                  The endpoint returns the indicator from the parent, and
                  `originAreaId` will be the `areaId` of the parent.

                  When `timeRange` is `yearly`, this parameter will not be
                  outputted.
                type: string
            required:
              - name
              - indicator
            type: object
          type: array
      required:
        - area
        - indicators
      type: object
    CalculateFinanceHabitsInput:
      properties:
        consumption:
          $ref: '#/components/schemas/CalculateFinanceHabitsInputConsumption'
        food:
          $ref: '#/components/schemas/CalculateFinanceHabitsInputFood'
        household:
          $ref: '#/components/schemas/CalculatorHabitsInputHousehold'
      type: object
    CalculateFinanceHabitsInputConsumption:
      additionalProperties: false
      description: >
        This category refers to a citizen's habits when it comes to purchasing
        goods and services.
      properties:
        ethicalConsumer:
          default: ethicalConsumer3
          description: >
            Answer to the question "How often do you purchase ethical or
            environmentally friendly products?"

            * ethicalConsumer1 - Always, if possible;

            * ethicalConsumer2 - Often;

            * ethicalConsumer3 - Occasionally;

            * ethicalConsumer4 - Rarely
          enum:
            - ethicalConsumer1
            - ethicalConsumer2
            - ethicalConsumer3
            - ethicalConsumer4
          type: string
        qualityConsumer:
          default: qualityConsumer3
          description: |
            Answer to the question "How often to you buy high quality products?"
            * qualityConsumer1 - Always, if possible;
            * qualityConsumer2 - Often;
            * qualityConsumer3 - Occasionally;
            * qualityConsumer4 - Rarely
          enum:
            - qualityConsumer1
            - qualityConsumer2
            - qualityConsumer3
            - qualityConsumer4
          type: string
        repairConsumer:
          default: repairConsumer3
          description: >
            Answer to the question "How often do you repair worn or broken
            items?"

            * repairConsumer1 - Always, if possible;

            * repairConsumer2 - Often;

            * repairConsumer3 - Occasionally;

            * repairConsumer4 - Rarely
          enum:
            - repairConsumer1
            - repairConsumer2
            - repairConsumer3
            - repairConsumer4
          type: string
      type: object
    CalculateFinanceHabitsInputFood:
      additionalProperties: false
      properties:
        dairyAmount:
          default: dairyAmount4
          description: |
            Answer to the question "How much dairy is in your diet?"
            * dairyAmount1 - None;
            * dairyAmount2 - very little;
            * dairyAmount3 - less than average;
            * dairyAmount4 - about average;
            * dairyAmount5 - I love dairy products!
          enum:
            - dairyAmount1
            - dairyAmount2
            - dairyAmount3
            - dairyAmount4
            - dairyAmount5
          type: string
        meatConsumption:
          default: meatConsumption4
          description: |
            Answer to the question "How often do you eat meat?"
            * meatConsumption1 - Vegetarian (Never);
            * meatConsumption2 - Flexitarian (1-2 times per week);
            * meatConsumption3 - 3-4 times per week;
            * meatConsumption4 - Almost every day;
            * meatConsumption5 - All the time
          enum:
            - meatConsumption1
            - meatConsumption2
            - meatConsumption3
            - meatConsumption4
            - meatConsumption5
          type: string
        meatPreference:
          default: meatPreference3
          description: >
            Answer to the question "When you eat meat, how often is it red meat
            (beef, lamb and game)?"

            * meatPreference1 - Never

            * meatPreference2 - Once in a while

            * meatPreference3 - About half the time

            * meatPreference4 - More than half but not always (75% of the time)

            * meatPreference5 - Most of the time (90%  of the time)
          enum:
            - meatPreference1
            - meatPreference2
            - meatPreference3
            - meatPreference4
            - meatPreference5
          type: string
        seaFoodConsumption:
          default: seaFoodConsumption3
          description: |
            Answer to the question "How often do you consume seafood?"
            * seaFoodConsumption1 - I don’t eat seafood
            * seaFoodConsumption2 - I eat seafood occasionally
            * seaFoodConsumption3 - I eat seafood frequently
            * seaFoodConsumption4 - I love seafood
          enum:
            - seaFoodConsumption1
            - seaFoodConsumption2
            - seaFoodConsumption3
            - seaFoodConsumption4
          type: string
        seaFoodPreference:
          default: seaFoodPreference2
          description: >
            Answer to the question "When you eat seafood, how frequently is it
            shellfish?"

            * seaFoodPreference1 - Never

            * seaFoodPreference2 - Every now and then

            * seaFoodPreference3 - Quite often
          enum:
            - seaFoodPreference1
            - seaFoodPreference2
            - seaFoodPreference3
          type: string
      type: object
    CalculateFinanceTransactionInput:
      properties:
        amount:
          description: |
            The amount of money spent
            The amount must be a positive number
          example: 250
          format: float
          minimum: 0
          type: number
        category:
          description: >
            The category in which this amount of money was spent.

            This category must belong to the categoryMapping enumeration (passed
            as query parameter).


            ## List of valid categories

            ### Ducky/default categories (`categoryMapping=ducky`)

            - food

            - nonAlcoholicBeverages

            - alcoholicBeverages

            - tobacco

            - clothing

            - footwear

            - actualRentals

            - imputedRentals

            - homeMaintenance

            - homeServices

            - energy

            - energyElectricity

            - energySolidFuels

            - furniture

            - textiles

            - appliances

            - tableware

            - houseAndGarden

            - householdMaintenance

            - medicalSupplies

            - outpatientServices

            - hospitalServices

            - vehiclePurchase

            - operationOfTransportEquipment

            - fuelsForTransport

            - maintenanceOfTransportEquipment

            - transportServices

            - transportRailway

            - transportRoad

            - transportAir

            - transportWater

            - postalServices

            - computerEquipment

            - telephoneServices

            - audiovisualEquipment

            - recreationalGoods

            - gamesGardensAndPets

            - sportingGoods

            - recreationalServices

            - newspapersAndBooks

            - packageHolidays

            - preAndPrimarySchool

            - secondarySchool

            - vocationalSchool

            - universityAndCollege

            - otherEducation

            - catering

            - accommodation

            - personalCare

            - personalEffects

            - socialProtection

            - insurance

            - financialServices

            - otherServices

            - donations


            ### SMN categories (`categoryMapping=smn`)

            - alarm

            - andre_dagligvarer

            - andre_utgifter

            - annen_reise

            - annet

            - annet_innskudd

            - annet_til_barna

            - apotek

            - apper_og_spill

            - arrangement

            - aviser

            - bankboks

            - barnebutikker

            - barnehager

            - betaling

            - betalingsoppfolging

            - bilavgifter

            - bildeler_og_pleie

            - bilforhandler

            - bilforsikring

            - billan

            - bokhandler

            - boliglan

            - boligutgifter

            - bom

            - briller_og_opptikk

            - byggvare

            - dagligvarer

            - dating

            - digital_markedsplass

            - drivstoff

            - dyr

            - eiendomsforvaltning

            - fastfood

            - flybilletter

            - forsikring

            - foto

            - fritidsaktiviteter

            - gavekort

            - godteri

            - hage_og_blomster

            - handverker

            - helsekost

            - hobby

            - hvitevarer_og_elektronikk

            - hytte

            - internett

            - kafe

            - kantine

            - kino

            - kiosk

            - kjokkenutstyr

            - klaer

            - kollektivtransport

            - kommunale_avgifter

            - kredittkort

            - krypto_epenger

            - kurs_utdanning

            - lan

            - lan_hobby_fritidsutstyr

            - lege

            - leiebil

            - leker

            - lonn

            - medlemskap_veldedighet

            - minibank

            - mobiltelefon

            - mobler_og_interior

            - museum

            - nettjenester

            - overforing

            - overnatting

            - parkering

            - pengespill

            - post

            - reiseselskap

            - renter_innskudd

            - renter_og_gebyrer

            - restaurant

            - sfo

            - skatt

            - skjonnhet

            - sko

            - smykker

            - sparing

            - sportsutstyr

            - stroem

            - strommetjenester

            - studielan

            - tannlege

            - taxi

            - tidsskrifter

            - trafikkskole

            - trening

            - tv

            - utbytte

            - utesteder

            - utlegg_og_refusjon

            - utleie_og_salg

            - velvare

            - vennebetaling

            - verksted

            - verktoy
          example: con1
          type: string
        currency:
          default: NOK
          description: |
            The currency of the amount
          enum:
            - NOK
          example: NOK
          type: string
        id:
          description: |
            A unique ID identifying a transaction
            The ID must be unique within this query
          example: transaction_id_1
          type: string
      required:
        - amount
        - category
        - id
      type: object
    CalculateFinanceTransactionsInput:
      properties:
        habits:
          $ref: '#/components/schemas/CalculateFinanceHabitsInput'
        transactions:
          description: |
            List of monetary transactions
          items:
            $ref: '#/components/schemas/CalculateFinanceTransactionInput'
          type: array
      required:
        - transactions
      type: object
    CalculateFoodAndDrinkHabitsInput:
      properties:
        food:
          $ref: '#/components/schemas/CalculatorHabitsInputFood'
        user:
          $ref: '#/components/schemas/UserInput'
      type: object
    CalculateFoodAndDrinkResponse:
      properties:
        categories:
          properties:
            beverages:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            dairyAndEggs:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            fish:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            grains:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            leftovers:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            meat:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
            produce:
              $ref: '#/components/schemas/CalculateFoodAndDrinkResponseCategory'
          required:
            - beverages
            - dairyAndEggs
            - fish
            - grains
            - leftovers
            - meat
            - produce
          type: object
        totalCo2Kg:
          type: number
      required:
        - categories
      type: object
    CalculateFoodAndDrinkResponseCategory:
      properties:
        foodCo2Kg:
          type: number
        foodCost:
          type: number
        foodKg:
          type: number
        foodWasteCo2Kg:
          type: number
        foodWasteCost:
          type: number
        foodWasteKg:
          type: number
      required:
        - foodCo2Kg
        - foodCost
        - foodKg
        - foodWasteCo2Kg
        - foodWasteCost
        - foodWasteKg
      type: object
    CalculatorHabitsInput:
      properties:
        consumption:
          $ref: '#/components/schemas/CalculatorHabitsInputConsumption'
        energy:
          $ref: '#/components/schemas/CalculatorHabitsInputEnergy'
        food:
          $ref: '#/components/schemas/CalculatorHabitsInputFood'
        household:
          $ref: '#/components/schemas/CalculatorHabitsInputHousehold'
        transport:
          $ref: '#/components/schemas/CalculatorHabitsInputTransport'
        user:
          $ref: '#/components/schemas/UserInput'
      type: object
    CalculatorHabitsInputConsumption:
      description: >
        This category refers to a citizen's habits when it comes to purchasing
        goods and services.
      properties:
        correctWashingClothes:
          default: correctWashingClothes1
          description: >
            Answer to the question "Do you read the washing instructions on your
            garments and wash them accordingly?"

            * correctWashingClothes1 - No

            * correctWashingClothes2 - Only for expensive clothes

            * correctWashingClothes3 - Yes, for everything
          enum:
            - correctWashingClothes1
            - correctWashingClothes2
            - correctWashingClothes3
          type: string
        donateClothes:
          default: donateClothes1
          description: |
            Answer to the question "How often do you donate clothes?"
            * donateClothes1 - Never;
            * donateClothes2 - Maybe once a year;
            * donateClothes3 - Maybe once per season;
            * donateClothes4 - Monthly;
          enum:
            - donateClothes1
            - donateClothes2
            - donateClothes3
            - donateClothes4
          type: string
        ethicalConsumer:
          default: ethicalConsumer3
          description: >
            Answer to the question "How often do you purchase ethical or
            environmentally friendly products?"

            * ethicalConsumer1 - Always, if possible;

            * ethicalConsumer2 - Often;

            * ethicalConsumer3 - Occasionally;

            * ethicalConsumer4 - Rarely
          enum:
            - ethicalConsumer1
            - ethicalConsumer2
            - ethicalConsumer3
            - ethicalConsumer4
          type: string
        fastFashionClothes:
          default: fastFashionClothes2
          description: >
            Answer to the question "How often do you buy clothing from fast
            fashion brands?"

            * fastFashionClothes1 - Never 

            * fastFashionClothes2 - Occasionally

            * fastFashionClothes3 - Regularly 

            * fastFashionClothes4 - Most of my clothing is fast fashion

            * fastFashionClothes5 - Love fast fashion
          enum:
            - fastFashionClothes1
            - fastFashionClothes2
            - fastFashionClothes3
            - fastFashionClothes4
            - fastFashionClothes5
          type: string
        newClothes:
          default: 36
          description: >
            Answer to the question "How many pieces of clothing do you buy new
            per year?"
          maximum: 200
          minimum: 0
          type: number
        qualityClothes:
          default: qualityClothes3
          description: >
            Answer to the question "How often do you buy clothes from good
            quality brands (like eg. brands providing lifetime guarantee)?"

            * qualityClothes1 - Always, if possible;

            * qualityClothes2 - Often;

            * qualityClothes3 - Occasionally;

            * qualityClothes4 - Rarely;
          enum:
            - qualityClothes1
            - qualityClothes2
            - qualityClothes3
            - qualityClothes4
          type: string
        qualityConsumer:
          default: qualityConsumer3
          description: |
            Answer to the question "How often to you buy high quality products?"
            * qualityConsumer1 - Always, if possible;
            * qualityConsumer2 - Often;
            * qualityConsumer3 - Occasionally;
            * qualityConsumer4 - Rarely
          enum:
            - qualityConsumer1
            - qualityConsumer2
            - qualityConsumer3
            - qualityConsumer4
          type: string
        rentalClothes:
          default: 0
          description: >
            Answer to the question "How many pieces of clothing do you rent per
            year?"
          maximum: 100
          minimum: 0
          type: number
        repairClothes:
          default: 0
          description: >
            Answer to the question "How many pieces of clothing do you repair
            per year?"
          maximum: 75
          minimum: 0
          type: number
        repairConsumer:
          default: repairConsumer3
          description: >
            Answer to the question "How often do you repair worn or broken
            items?"

            * repairConsumer1 - Always, if possible;

            * repairConsumer2 - Often;

            * repairConsumer3 - Occasionally;

            * repairConsumer4 - Rarely
          enum:
            - repairConsumer1
            - repairConsumer2
            - repairConsumer3
            - repairConsumer4
          type: string
        serviceConsumer:
          default: serviceConsumer3
          description: >
            Answer to the question "How often do you choose to buy services
            instead of goods?"

            * serviceConsumer1 - Love cultural events and services;

            * serviceConsumer2 - Frequently;

            * serviceConsumer3 - About average;

            * serviceConsumer4 - Love buying stuff
          enum:
            - serviceConsumer1
            - serviceConsumer2
            - serviceConsumer3
            - serviceConsumer4
          type: string
        textileReuse:
          default: textileReuse2
          description: >
            Answer to the question "Do you reuse old clothes for other purposes?
            (like reusing a tshirt as a wash cloth, old bedsheet as a tablecloth
            etc..)"

            * textileReuse1 - Never, I love new textiles

            * textileReuse2 - Like an average person

            * textileReuse3 - Occasionally

            * textileReuse4 - I actively try to
          enum:
            - textileReuse1
            - textileReuse2
            - textileReuse3
            - textileReuse4
          type: string
        usedClothes:
          default: 0
          description: >
            Answer to the question "How many pieces of clothing do you buy
            secondhand per year?"
          maximum: 50
          minimum: 0
          type: number
        wasteConsumer:
          default: wasteConsumer3
          description: >
            Answer to the question "How much do you recycle?"

            * wasteConsumer1 - Always, and I reduce the amount of waste I
            generate;

            * wasteConsumer2 - As much as possible;

            * wasteConsumer3 - Often;

            * wasteConsumer4 - I'm not great at recycling
          enum:
            - wasteConsumer1
            - wasteConsumer2
            - wasteConsumer3
            - wasteConsumer4
          type: string
        yearlyDonationAmount:
          description: The amount of money donated per year, in local currency
          minimum: 0
          type: number
      type: object
    CalculatorHabitsInputEnergy:
      properties:
        cabinSqm:
          description: >
            The size of your cabin or second home in square meters (m2). Leave
            empty if you don't have a cabin. This applies to the datasource
            Norway only, other datasources will always use zero regardless of
            input.
          example: 30
          minimum: 0
          type: number
        dishWasher:
          default: dishWasher3
          description: >
            Answer to the question "What is your approach to clothes and
            dishwashing?"

            * dishWasher1 - I always fill the machines and try to reduce the
            amount that needs to be washed;

            * dishWasher2 - I try to run full loads;

            * dishWasher3 - I don't really think about it;

            * dishWasher4 - I often run half-full loads
          enum:
            - dishWasher1
            - dishWasher2
            - dishWasher3
            - dishWasher4
          type: string
        energySaver:
          default: energySaver3
          description: >
            Answer to the question "How conscious are you of the electricity use
            of electronic devices?"

            * energySaver1 - I avoid leaving electronics on or on standby;

            * energySaver2 - I reduce electricity use by avoiding devices on
            standby;

            * energySaver3 - Don't know;

            * energySaver4 - I have a lot of electronic devices on at most times
          enum:
            - energySaver1
            - energySaver2
            - energySaver3
            - energySaver4
          type: string
        heatSource:
          default: heatSource5
          description: |
            Answer to the question "What is your primary heat source?"
            * heatSource1 - Geothermal heat pump;
            * heatSource2 - Water source heat pump;
            * heatSource3 - Air-to-air heat pump;
            * heatSource4 - Panel heaters;
            * heatSource5 - Don't know (default);
            * heatSource6 - District heating;
            * heatSource7 - Fuel oil;
            * heatSource8 - Gas
          enum:
            - heatSource1
            - heatSource2
            - heatSource3
            - heatSource4
            - heatSource5
            - heatSource6
            - heatSource7
            - heatSource8
          type: string
        heatSourceWood:
          default: heatSourceWood2
          description: >
            Answer to the question "How much wood do you typically heat with per
            year?"

            * heatSourceWood1 - None;

            * heatSourceWood2 - Around 500 liters;

            * heatSourceWood3 - 1-3000 liters;

            * heatSourceWood4 - 3-5000 liters;

            * heatSourceWood5 - More than 5000 liters


            In the case where sqm <= 100, the default value is set to
            heatSourceWood3
          enum:
            - heatSourceWood1
            - heatSourceWood2
            - heatSourceWood3
            - heatSourceWood4
            - heatSourceWood5
          type: string
        heatedArea:
          default: heatedArea3
          description: >
            Answer to the question "What fraction of the area of your house is
            heated?"

            * heatedArea1 - Around 60%;

            * heatedArea2 - Around 75%;

            * heatedArea3 - Most rooms (around 90%) are heated;

            * heatedArea4 - All rooms are heated
          enum:
            - heatedArea1
            - heatedArea2
            - heatedArea3
            - heatedArea4
          type: string
        hotWater:
          default: hotWater3
          description: >
            Answer to the question "How often do you save hot water for purposes
            other than showering?"

            * hotWater1 - Always if possible;

            * hotWater2 - Often;

            * hotWater3 - Sometimes (default);

            * hotWater4 - Never
          enum:
            - hotWater1
            - hotWater2
            - hotWater3
            - hotWater4
          type: string
        indoorTemp:
          default: indoorTemp3
          description: >
            Answer to the question "What is the average indoor temperature in
            your house?"

            * indoorTemp1 - 4 C colder than average;

            * indoorTemp2 - 2 C colder than average;

            * indoorTemp3 - Average;

            * indoorTemp4 - Warmer than average
          enum:
            - indoorTemp1
            - indoorTemp2
            - indoorTemp3
            - indoorTemp4
          type: string
        ledLights:
          default: ledLights3
          description: >
            Answer to the question "What type of light bulbs do you have?"

            * ledLights1 - Almost all LED;

            * ledLights2 - Mostly LED;

            * ledLights3 - Very few or no LED


            In Japan, the default is ledLights2, but everywhere else it is
            ledLights3
          enum:
            - ledLights1
            - ledLights2
            - ledLights3
          type: string
        lightsOff:
          default: lightsOff3
          description: >
            Answer to the question "How often do you turn off lights you aren't
            using?"

            * lightsOff1 - Always;

            * lightsOff2 - Often;

            * lightsOff3 - Average;

            * lightsOff4 - Never
          enum:
            - lightsOff1
            - lightsOff2
            - lightsOff3
            - lightsOff4
          type: string
        renovateLevel:
          default: renovateLevel4
          description: >
            Answer to the question "When was your dwelling place built or last
            significantly renovated?"

            * renovateLevel1 - After 2010;

            * renovateLevel2 - In the 2000s;

            * renovateLevel3 - In the 90s;

            * renovateLevel4 - In the 80s;

            * renovateLevel5 - Before 1980
          enum:
            - renovateLevel1
            - renovateLevel2
            - renovateLevel3
            - renovateLevel4
            - renovateLevel5
          type: string
        showerFreq:
          description: Number of showers taken per week
          minimum: 0
          type: number
        showerLength:
          description: Average shower length, in minutes
          minimum: 0
          type: number
        showerType:
          default: showerType2
          description: |
            Answer to the question "What type of shower head do you have?"
            * showerType1 - Efficient shower head;
            * showerType2 - Don't know;
            * showerType3 - Regular shower head
          enum:
            - showerType1
            - showerType2
            - showerType3
          type: string
        solarPanelKW:
          description: >
            The amount of electricity in kW produced by your solar panels per
            year.  

            Should only be used if you have solar panels, but do not know the
            production in energy units (kWh).

            Leave empty if you don't have solar panels.
          example: 2
          minimum: 0
          type: number
        solarPanelKWH:
          description: >
            The amount of electricity in kWh produced by your solar panels, per
            year.

            Leave empty if you don't have solar panels.
          example: 10000
          minimum: 0
          type: number
        solarSize:
          description: |
            The size of your solar panels installation.

            * solarSize1: no solar panels installation
            * solarSize2: small solar panels installation
            * solarSize3: medium solar panels installation
            * solarSize4: large solar panels installation
          enum:
            - solarSize1
            - solarSize2
            - solarSize3
            - solarSize4
          example: solarSize3
          type: string
        tumbleDrier:
          default: tumbleDrier3
          description: |
            Answer to the question "How often do you air dry laundry?"
            * tumbleDrier1 - Always, if possible;
            * tumbleDrier2 - Often;
            * tumbleDrier3 - Occasionally;
            * tumbleDrier4 - I always tumble dry
          enum:
            - tumbleDrier1
            - tumbleDrier2
            - tumbleDrier3
            - tumbleDrier4
          type: string
      type: object
    CalculatorHabitsInputFood:
      properties:
        dairyAmount:
          default: dairyAmount4
          description: |
            Answer to the question "How much dairy is in your diet?"
            * dairyAmount1 - None; 
            * dairyAmount2 - very little; 
            * dairyAmount3 - less than average; 
            * dairyAmount4 - about average; 
            * dairyAmount5 - I love dairy products!
          enum:
            - dairyAmount1
            - dairyAmount2
            - dairyAmount3
            - dairyAmount4
            - dairyAmount5
          type: string
        dietAmount:
          default: dietAmount3
          description: |
            Answer to the question "How much do you eat?"
            * dietAmount1 - very little;
            * dietAmount2 - as an average woman;
            * dietAmount3 - about average;
            * dietAmount4 - as an average man;
            * dietAmount5 - like a horse
          enum:
            - dietAmount1
            - dietAmount2
            - dietAmount3
            - dietAmount4
            - dietAmount5
          type: string
        foodWaste:
          default: foodWaste3
          description: |
            Answer to the question "How much food do you throw away?"
            * foodWaste1 - I eat everything;
            * foodWaste2 - I throw away very little;
            * foodWaste3 - About average;
            * foodWaste4 - Quite a lot
          enum:
            - foodWaste1
            - foodWaste2
            - foodWaste3
            - foodWaste4
          type: string
        meatConsumption:
          default: meatConsumption4
          description: |
            Answer to the question "How often do you eat meat?"
            * meatConsumption1 - Vegetarian (Never);
            * meatConsumption2 - Flexitarian (1-2 times per week);
            * meatConsumption3 - 3-4 times per week;
            * meatConsumption4 - Almost every day;
            * meatConsumption5 - All the time
          enum:
            - meatConsumption1
            - meatConsumption2
            - meatConsumption3
            - meatConsumption4
            - meatConsumption5
          type: string
        meatPreference:
          default: meatPreference3
          description: >
            Answer to the question "When you eat meat, how often is it red meat
            (beef, lamb and game)?"

            * meatPreference1 - Never

            * meatPreference2 - Once in a while

            * meatPreference3 - About half the time

            * meatPreference4 - More than half but not always (75% of the time)

            * meatPreference5 - Most of the time (90%  of the time)
          enum:
            - meatPreference1
            - meatPreference2
            - meatPreference3
            - meatPreference4
            - meatPreference5
          type: string
        seaFoodConsumption:
          default: seaFoodConsumption3
          description: |
            Answer to the question "How often do you consume seafood?"
            * seaFoodConsumption1 - I don’t eat seafood
            * seaFoodConsumption2 - I eat seafood occasionally
            * seaFoodConsumption3 - I eat seafood frequently
            * seaFoodConsumption4 - I love seafood
          enum:
            - seaFoodConsumption1
            - seaFoodConsumption2
            - seaFoodConsumption3
            - seaFoodConsumption4
          type: string
        seaFoodPreference:
          default: seaFoodPreference2
          description: >
            Answer to the question "When you eat seafood, how frequently is it
            shellfish?"

            * seaFoodPreference1 - Never

            * seaFoodPreference2 - Every now and then

            * seaFoodPreference3 - Quite often
          enum:
            - seaFoodPreference1
            - seaFoodPreference2
            - seaFoodPreference3
          type: string
      type: object
    CalculatorHabitsInputHousehold:
      description: >
        Description of the household to calibrate calculations.  The contents of
        this object are defaulted to values specific for the chosen dataSource.
      properties:
        members:
          description: >
            How many people reside in the household. There must be minimum one
            adult.
          properties:
            adults:
              example: 2
              minimum: 1
              type: integer
            children:
              minimum: 0
              type: integer
          type: object
        monthlyIncomeAfterTax:
          description: >
            Monthly income after tax for the entire household, in the local
            currency for the selected datasource.
          example: 30000
          minimum: 0
          type: number
        sqm:
          description: |
            Dwelling size  in square meters (m2).
          minimum: 0
          type: number
        type:
          description: Type of dwelling
          enum:
            - detached
            - row
            - apartment
          example: detached
          type: string
      type: object
    CalculatorHabitsInputTransport:
      properties:
        boatTrips:
          minimum: 0
          type: number
        carTrips:
          description: Number of longer car trips taken per year, by approximate distance.
          properties:
            continental:
              minimum: 0
              type: number
            country:
              minimum: 0
              type: number
            regional:
              minimum: 0
              type: number
          type: object
        distanceWork:
          description: One-way distance travelled to work per day, in kilometers.
          minimum: 0
          type: number
        drivingDistance:
          properties:
            vehicleElectric:
              minimum: 0
              type: number
            vehicleFossil:
              minimum: 0
              type: number
            vehicleHybrid:
              minimum: 0
              type: number
            vehicleMotorbike:
              minimum: 0
              type: number
            vehicleShared:
              minimum: 0
              type: number
          type: object
        flightTrips:
          description: |
            Number of flights taken (for leisure purposes) per year, by
            approximate flight distance.
          properties:
            continental:
              minimum: 0
              type: number
            country:
              minimum: 0
              type: number
            global:
              minimum: 0
              type: number
          type: object
        publicTrips:
          description: |
            Number of trips taken per year using public transport (buses
            and trains), by approximate trip distance.
          properties:
            continental:
              minimum: 0
              type: number
            country:
              minimum: 0
              type: number
            regional:
              minimum: 0
              type: number
          type: object
        socialKm:
          description: |
            Number of kilometers travelled by mode of transport for leisure
            purposes (shopping, visiting friends, other recreation)
          properties:
            coDrive:
              minimum: 0
              type: number
            ebike:
              minimum: 0
              type: number
            public:
              minimum: 0
              type: number
            vehicleElectric:
              minimum: 0
              type: number
            vehicleFossil:
              minimum: 0
              type: number
            vehicleHybrid:
              minimum: 0
              type: number
            vehicleMotorbike:
              minimum: 0
              type: number
            vehicleShared:
              minimum: 0
              type: number
            walkBike:
              minimum: 0
              type: number
          type: object
        vehicles:
          description: Number of vehicles of each type owned by the user
          properties:
            ebike:
              minimum: 0
              type: number
            electric:
              minimum: 0
              type: number
            fossil:
              minimum: 0
              type: number
            hybrid:
              minimum: 0
              type: number
            motorbike:
              minimum: 0
              type: number
          type: object
        workFreq:
          description: |
            Number of days per week a certain type of vehicle is used to
            commute to work
          properties:
            coDrive:
              minimum: 0
              type: number
            ebike:
              minimum: 0
              type: number
            public:
              minimum: 0
              type: number
            vehicleElectric:
              minimum: 0
              type: number
            vehicleFossil:
              minimum: 0
              type: number
            vehicleHybrid:
              minimum: 0
              type: number
            vehicleMotorbike:
              minimum: 0
              type: number
            vehicleShared:
              minimum: 0
              type: number
            walkBike:
              minimum: 0
              type: number
          type: object
      type: object
    ChangeRequestBody:
      additionalProperties: false
      properties:
        filteringCriteria:
          additionalProperties: false
          description: >
            For an activity to be returned by the change endpoint, it has to
            match the filtering criteria.

            It is optional to provide filtering criteria, and if no values are
            given for a criteria, no activities will be excluded based on this
            criteria.


            Example: To query all tips related to energy and transport and with
            a cost lower than 100€, use the filters below.

            ```

            { "module": ["energy", "transport"], "financialCost": ["0_10",
            "10_100"]  }

            ```
          properties:
            tags:
              description: |
                Specify categories and SDGs you want tips for.
              items:
                description: |
                  Tags are used to categorize tips. They also include SDGs.
                enum:
                  - consumption
                  - energy
                  - food
                  - food_waste
                  - plastic
                  - sustainable_food
                  - transport
                  - tutorial
                  - microplastics
                  - overuse
                  - plastic_on_the_go
                  - handprint
                  - textile
                  - daily_habit
                  - work
                  - SDG1
                  - SDG2
                  - SDG3
                  - SDG4
                  - SDG5
                  - SDG6
                  - SDG7
                  - SDG8
                  - SDG9
                  - SDG10
                  - SDG11
                  - SDG12
                  - SDG13
                  - SDG14
                  - SDG15
                  - SDG16
                  - SDG17
                example: sustainable_food
                type: string
              type: array
            financialCost:
              items:
                description: |
                  The financial cost of implementing an acitivity in Euros
                  * 0_10 - less than 10€
                  * 10_100 - 10-100€
                  * 100_1000 - 100-1000€
                  * 1000_10000 - 1000–10000€
                  * 10000+ - greater than 10000€
                enum:
                  - '0_10'
                  - '10_100'
                  - '100_1000'
                  - '1000_10000'
                  - 10000+
                example: '0_10'
                type: string
              type: array
            id:
              items:
                description: |
                  Unique key used to identify a specific tip.
                example: 42
                oneOf:
                  - type: string
                  - type: integer
              type: array
            module:
              items:
                description: |
                  The module the activity belongs to
                  * public
                  * consumption
                  * transport
                  * food
                  * energy
                  * global
                enum:
                  - public
                  - consumption
                  - transport
                  - food
                  - energy
                  - global
                example: energy
                type: string
              type: array
            points:
              items:
                description: >
                  A measure of the collective impact of implementing an activity

                  * 5 - Individual Impact.  For example: activities you can do
                  yourself without any communication with or influencing of
                  others.

                  * 10 - Social Impact.  For example: complimenting, talking to,
                  inspiring, encouraging friends, family, colleagues, local
                  store etc.

                  * 15 - Community Impact.  For example: complimenting, talking
                  to, inspiring, encouraging high level bodies such as
                  organizations, politicians, municipalities etc
                enum:
                  - 5
                  - 10
                  - 15
                example: 5
                type: number
              type: array
            socialDifficulty:
              items:
                description: >
                  The level of social difficulty related to implementing an
                  activity
                enum:
                  - sociallyAcceptable
                  - inconvenient
                  - normBreaking
                example: sociallyAcceptable
                type: string
              type: array
            timeRequirement:
              items:
                description: |
                  The time requirements related to implementing an activity
                enum:
                  - minutes
                  - hours
                  - days
                  - months
                example: minutes
                type: string
              type: array
          type: object
        habits:
          $ref: '#/components/schemas/CalculatorHabitsInput'
      type: object
    ChangeResponse:
      additionalProperties: false
      properties:
        activities:
          items:
            properties:
              tags:
                properties:
                  categories:
                    items:
                      $ref: '#/components/schemas/TagResponse'
                    type: array
                  sdgs:
                    items:
                      $ref: '#/components/schemas/TagResponse'
                    type: array
                required:
                  - categories
                  - sdgs
                type: object
              description:
                example: |
                  Kan logges på netter hvor innetemperaturen er minst 2 grader
                  mindre enn dagtemperaturen.
                type: string
              group:
                description: >
                  Groups are used to tag similar tips.

                  When used in conjunction with groupOverrides, it allows to
                  identify tips that are incompatible with each others.

                  Eg. you cannot implement tips in the 'bought_something' group
                  as well as 'bought_nothing' group.

                  However, you can implement multiple tips from the
                  'bought_something' group at the same time (bought used
                  electronics, bought used clothing, ...)
                enum:
                  - all_meals
                  - bought_nothing
                  - bought_something
                  - dairy
                  - separate_meals
                  - vegan_all_meals
                example: all_meals
                type: string
              groupOverrides:
                description: >
                  "GroupOverrides" is a list of tips' groups which are
                  incompatible with the current tip.

                  Eg. The tip "I bought used clothes today" has group
                  'bought_something' and overrides the group 'bought_nothing',
                  because it is not possible to buy something and buy nothing.
                items:
                  description: >
                    Groups are used to tag similar tips.

                    When used in conjunction with groupOverrides, it allows to
                    identify tips that are incompatible with each others.

                    Eg. you cannot implement tips in the 'bought_something'
                    group as well as 'bought_nothing' group.

                    However, you can implement multiple tips from the
                    'bought_something' group at the same time (bought used
                    electronics, bought used clothing, ...)
                  enum:
                    - all_meals
                    - bought_nothing
                    - bought_something
                    - dairy
                    - separate_meals
                    - vegan_all_meals
                  example: separate_meals
                  type: string
                type: array
              id:
                example: 1
                type: number
              imageUrls:
                additionalProperties:
                  additionalProperties:
                    example: https://image-url.svg
                    type: string
                  type: object
                type: object
              indicators:
                $ref: '#/components/schemas/IndicatorsResponse'
              investments:
                $ref: '#/components/schemas/InvestmentsResponse'
              legacyTipId:
                description: |
                  Legacy id or autoincremented id of the tip.
                example: activity_clothing_07
                type: string
              module:
                description: |
                  The module the activity belongs to
                  * public
                  * consumption
                  * transport
                  * food
                  * energy
                  * global
                enum:
                  - public
                  - consumption
                  - transport
                  - food
                  - energy
                  - global
                example: energy
                type: string
              subCategory:
                enum:
                  - all_meals
                  - breakfast
                  - dinner
                  - energy
                  - food_waste
                  - job
                  - leisure
                  - school
                  - shower
                  - sustainable_food
                  - temperature
                  - workTravel
                  - lunch
                  - null
                example: all_meals
                nullable: true
                type: string
              title:
                example: Jeg reduserte natt-temperaturen
                type: string
            required:
              - description
              - id
              - imageUrls
              - indicators
              - investments
              - module
              - subCategory
              - tags
              - title
            type: object
          type: array
      type: object
    CompareFoodAndDrinkResponse:
      properties:
        categories:
          properties:
            beverages:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
            dairyAndEggs:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
            fish:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
            grains:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
            meat:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
            produce:
              $ref: '#/components/schemas/CompareFoodAndDrinkResponseCategory'
          required:
            - beverages
            - dairyAndEggs
            - fish
            - grains
            - meat
            - produce
          type: object
        totalCo2Kg:
          type: number
      required:
        - categories
      type: object
    CompareFoodAndDrinkResponseCategory:
      properties:
        co2Kg:
          type: number
      required:
        - co2Kg
      type: object
    CompareGeneralConsumptionResponse:
      additionalProperties: false
      properties:
        co2Kg:
          type: number
        percent:
          type: number
        subCategories:
          additionalProperties: false
          properties:
            clothes:
              type: number
            furniture:
              type: number
            maintenance:
              type: number
            pPurchases:
              type: number
            pServices:
              type: number
            services:
              type: number
          type: object
      required:
        - co2Kg
        - percent
      type: object
    CompareGeneralEnergyResponse:
      additionalProperties: false
      properties:
        co2Kg:
          type: number
        percent:
          type: number
        subCategories:
          additionalProperties: false
          properties:
            cabin:
              type: number
            heat:
              type: number
            light:
              type: number
            other:
              type: number
            water:
              type: number
          type: object
      required:
        - co2Kg
        - percent
      type: object
    CompareGeneralFoodResponse:
      additionalProperties: false
      properties:
        co2Kg:
          type: number
        percent:
          type: number
        subCategories:
          additionalProperties: false
          properties:
            beverages:
              type: number
            dairyAndEggs:
              type: number
            fish:
              type: number
            grains:
              type: number
            meat:
              type: number
            produce:
              type: number
          type: object
      required:
        - co2Kg
        - percent
      type: object
    CompareGeneralPublicResponse:
      additionalProperties: false
      properties:
        co2Kg:
          type: number
        percent:
          type: number
        subCategories:
          additionalProperties: false
          properties:
            county:
              type: number
            municipality:
              type: number
            national:
              type: number
          type: object
      required:
        - co2Kg
        - percent
      type: object
    CompareGeneralResponse:
      properties:
        categories:
          properties:
            consumption:
              $ref: '#/components/schemas/CompareGeneralConsumptionResponse'
            energy:
              $ref: '#/components/schemas/CompareGeneralEnergyResponse'
            food:
              $ref: '#/components/schemas/CompareGeneralFoodResponse'
            public:
              $ref: '#/components/schemas/CompareGeneralPublicResponse'
            transport:
              $ref: '#/components/schemas/CompareGeneralTransportResponse'
          required:
            - consumption
            - energy
            - food
            - public
            - transport
          type: object
        totalCo2Kg:
          type: number
      required:
        - categories
        - totalCo2Kg
      type: object
    CompareGeneralTransportResponse:
      additionalProperties: false
      properties:
        co2Kg:
          type: number
        percent:
          type: number
        subCategories:
          additionalProperties: false
          properties:
            boat:
              type: number
            bus:
              type: number
            car:
              type: number
            flight:
              type: number
            train:
              type: number
          type: object
      required:
        - co2Kg
        - percent
      type: object
    CompareInput:
      properties:
        filters:
          properties:
            areaId:
              description: >
                The ID of the area.

                Use [the mapping
                documentation](https://doc.api.ducky.eco//area-ids-mapping) to
                fetch an areaID from an area's name.
              example: no-5001
              type: string
          required:
            - areaId
          type: object
      required:
        - filters
      type: object
    CompareTransportResponse:
      additionalProperties: false
      properties:
        area:
          additionalProperties: false
          properties:
            id:
              example: no-5001
              type: string
            name:
              example: Trondheim
              type: string
            parentId:
              description: >
                The closest parent of the requested area. In the case of a BSU,
                this will be the municipality that the BSU belongs to, and in
                the case of a municipality, it will be the county that the
                municipality belongs to, etc.
              example: no-50
              type: string
          required:
            - id
            - name
          type: object
        mobilityFootprint:
          additionalProperties: false
          description: |
            Mobility footprint, divided by mode of transport.
          properties:
            boat:
              $ref: '#/components/schemas/PurposeOfTravel'
            bus:
              $ref: '#/components/schemas/PurposeOfTravel'
            plane:
              $ref: '#/components/schemas/PurposeOfTravel'
            privateVehicles:
              $ref: '#/components/schemas/PurposeOfTravel'
            train:
              $ref: '#/components/schemas/PurposeOfTravel'
          required:
            - privateVehicles
            - bus
            - boat
            - plane
            - train
          type: object
      required:
        - area
        - mobilityFootprint
      type: object
    ConsumptionKgCO2ePerTransaction:
      description: |
        How many kilograms of CO2e per transaction.
      properties:
        co2eKg:
          description: |
            Kilograms of CO2e for this transaction
          example: 45
          type: number
        error:
          description: >
            If an error occured while processing this transaction, this field
            will hold an informative error message.

            When this field exist, the field `co2eKg` does not exist.


            Response will either contain `co2eKg` (successful calculation) or
            `error` (failure) never both.


            A typical error is that the transaction's category is invalid.
          type: string
        id:
          example: transaction_id_1
          type: string
      type: object
    ConsumptionKgCO2ePerTransactionsResponse:
      description: |
        Consumption for each transaction.
      items:
        $ref: '#/components/schemas/ConsumptionKgCO2ePerTransaction'
      type: array
    ConvertEnergyCategoryItem:
      properties:
        amount:
          example: 10
          minimum: 0
          type: number
        category:
          enum:
            - electricity
            - wood
            - oil
            - districtHeating
            - average
            - gas
            - solarPanel
          example: electricity
          type: string
        unit:
          enum:
            - kWh
            - liters
          example: kWh
          type: string
      required:
        - category
        - unit
      type: object
    ConvertEnergyInput:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ConvertEnergyCategoryItem'
          minItems: 1
          type: array
      required:
        - categories
      type: object
    ConvertEnergyResponse:
      description: |
        A mapping with the categories provided in the input.
        Other categories are not included.

        Each category contains the amount of CO2 equivalent, both in kilograms.
      properties:
        average:
          $ref: '#/components/schemas/ConvertResponseItem'
        districtHeating:
          $ref: '#/components/schemas/ConvertResponseItem'
        electricity:
          $ref: '#/components/schemas/ConvertResponseItem'
        gas:
          $ref: '#/components/schemas/ConvertResponseItem'
        oil:
          $ref: '#/components/schemas/ConvertResponseItem'
        solarPanel:
          $ref: '#/components/schemas/ConvertResponseItem'
        wood:
          $ref: '#/components/schemas/ConvertResponseItem'
      type: object
    ConvertFinanceInput:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ConvertFinanceItem'
          minItems: 1
          type: array
      required:
        - categories
      type: object
    ConvertFinanceItem:
      properties:
        amount:
          description: |
            The amount of the financial transaction.
          example: 10
          minimum: 0
          type: number
        category:
          description: >
            We support two different revisions of the Classification of
            individual consumption by purpose (COICOP) system, 1999 and 2018.

            Users can choose categories from either or both revisions, but are
            adviced that the 2018 will produce more up-to-date results.


            | Category                        | COICOP-1999 | COICOP-2018 |
            Explanation                                                                                                                                                                                                                                                                                                                  
            |

            |---------------------------------|-------------|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            | food                            | x           | x           | Food
            and edibles purchased for consumption at
            home                                                                                                                                                                                                                                                                           
            |

            | nonAlcoholicBeverages           | x           | x           |
            Juices, water, soft drinks, coffee,
            tea                                                                                                                                                                                                                                                                                      
            |

            | foodProductionServices          |             | x           | Oil
            pressing, grinding of cereals for flour production, fruit crushing
            for production of
            juices                                                                                                                                                                                                                              
            |

            | alcoholicBeverages              | x           | x           |
            Beer, wine, spirits and
            liquor                                                                                                                                                                                                                                                                                               
            |

            | alcoholProductionServices       |             | x           |
            Brewing services, fruit crushing and pressing for production of
            alcoholic beverages, distilling and fermentation
            services                                                                                                                                                                                                    
            |

            | tobacco                         | x           | x           |
            Cigarettes, cigars, other tobacco products, other
            narcotics                                                                                                                                                                                                                                                                  
            |

            | narcotics                       |             | x           | All
            narcotics purchased by households, legal and illegal (Ex: marijuana,
            opium, kava, betel leaves, mushrooms, chemicals, synthetic
            drugs)                                                                                                                                                                                   
            |

            | clothing                        | x           | x           |
            Clothing materials, garments, and tailoring, repair and cleaning
            services                                                                                                                                                                                                                                                    
            |

            | footwear                        | x           | x           |
            Footwear and repair and cleaning
            services                                                                                                                                                                                                                                                                                    
            |

            | actualRentals                   | x           | x           |
            Payment for rental of land, residences both primary and secondary,
            and connected parking
            spaces                                                                                                                                                                                                                              
            |

            | imputedRentals                  | x           | x           | The
            economic value in rental equivalent of dwellings that are owned by
            their residents. Not the same as e.g.
            mortgage                                                                                                                                                                                                        
            |

            | homeMaintenance                 | x           | x           |
            Materials for regular home maintenance such as paints, plumbing
            items & fire extinguishers, security equipment, and services related
            to regular
            maintenance                                                                                                                                                                  
            |

            | homeServices                    | x           | x           |
            Water supply, garbage, sewage collection and similar
            services                                                                                                                                                                                                                                                                
            |

            | energy                          | x           | x           |
            Electricity, gas and other
            fuels                                                                                                                                                                                                                                                                                             
            |

            | energyElectricity               | x           | x           |
            Electricity from all
            sources                                                                                                                                                                                                                                                                                                 
            |

            | energySolidFuels                | x           | x           |
            Solid fuels such as firewood, coal,
            etc                                                                                                                                                                                                                                                                                      
            |

            | furniture                       | x           | x           |
            Furniture including garden furnitures, furnishings such as light,
            loose objects such as carpets, art and clocks, and repair and
            installation of such
            items                                                                                                                                                                   
            |

            | textiles                        | x           | x           |
            Household textiles such as curtains, bedding, towels, doormats;
            repair of such
            items                                                                                                                                                                                                                                         
            |

            | appliances                      | x           | x           |
            Major household appliances such as refrigerators, dishwashers,
            ovens, vacuum cleaners and air-conditioners, and repair and
            installation of such
            items                                                                                                                                                                        
            |

            | tableware                       | x           | x           |
            Glassware, cutlery, flatware, silverware, kitch utensils and other
            small household items; repair of such
            items                                                                                                                                                                                                               
            |

            | houseAndGarden                  | x           | x           |
            Motorized tools like drills and lawn mowners, small hand tools for
            house and garden, and repair of such
            items                                                                                                                                                                                                                
            |

            | householdMaintenance            | x           | x           |
            Expendendable household goods like soaps and polishes, cleaning
            implements, napkins, and disposable kitchen goods; glue and
            tape                                                                                                                                                                                             
            |

            | medicalSupplies                 | x           | x           |
            Medicines, vaccines, medical devices, and other medical products
            including assistive producs like hearing aids or crutches; repair
            and maintenance of such
            items                                                                                                                                                             
            |

            | outpatientServices              | x           | x           | All
            medical services that don't require an overnight stay, including
            dental work and long term assistive
            care                                                                                                                                                                                                                
            |

            | inpatientServices               |             | x           |
            Treatment and/or care (including dental) that requires an overnight
            stay; all medical services needed to deliver inpatient care services
            during the overnight stay even if separately invoiced (e.g. lab
            tests, diagnostic imaging
            services);                                                                                
            |

            | healthServices                  |             | x           |
            Diagnostic imaging and laboratory services (MRI, CT, X-rays),
            blood/urine tests
            etc                                                                                                                                                                                                                                          
            |

            | hospitalServices                | x           |             | All
            medical services that require an overnight hospital
            stay                                                                                                                                                                                                                                                                 
            |

            | vehiclePurchase                 | x           | x           |
            Purchase of vehicles for transport including cars, motorcycles,
            bicycles and animal-drawn
            vehicles                                                                                                                                                                                                                           
            |

            | operationOfTransportEquipment   | x           | x           |
            Parts and accessories for personal transport
            equipment                                                                                                                                                                                                                                                                       
            |

            | fuelsForTransport               | x           | x           |
            Petrol (gasoline), diesel, liquid petroleum gas, lubricants;
            electricity as a fuel when separately priced from other
            electricity                                                                                                                                                                                             
            |

            | maintenanceOfTransportEquipment | x           | x           |
            Services related to maintenance and repair of personal transport
            equipment; includes parking &
            tolls                                                                                                                                                                                                                         
            |

            | passengerTransportServices      |             | x           |
            Transport of individuals and groups of persons and accompanied
            luggage by train, high speed trains, maglevs, light-rail, bus, share
            taxis, carpooling or ridesharing, local bus charter services, taxi
            and hired vehicle with driver. Transport of students to and from
            school                                                |

            | transportServices               | x           |             | All
            transport services public and
            private                                                                                                                                                                                                                                                                                    
            |

            | transportRailway                | x           | x           |
            Passenger transport by railway, rapid transit or
            tram                                                                                                                                                                                                                                                                        
            |

            | transportRoad                   | x           | x           |
            Passenger transport by road, including buses (regular routes,
            charter and school buses), taxis or hired cars, tuk-tuks, motorcycle
            taxis                                                                                                                                                                                     
            |

            | transportAir                    | x           | x           |
            Passenger transport by air, any
            distance                                                                                                                                                                                                                                                                                     
            |

            | transportWater                  | x           | x           |
            Passenger transport by water, including ships, boats, ferries,
            hovercraft, hydrofoils and water
            taxis                                                                                                                                                                                                                        
            |

            | goodsTransportServices          |             | x           |
            Postal and courier services (courier service for letters, parcel
            delivery for goods), letter handling services (new postage stamps
            etc), and other transport of goods (food delivery, prescription
            drugs
            etc)                                                                                                                
            |

            | postalServices                  | x           |             |
            Stamps, courier services, parcel delivery, delivery of
            goods                                                                                                                                                                                                                                                                 
            |

            | itEquipment                     |             | x           |
            Telephone and mobile equipment (telephones, telefax machines, mobile
            handsets, smartphones, PCs), Pc peripherals like printers, scanners,
            monitors, AR, routers, information processing equipment (TV sets, CD
            players, blue rays, smartwatches, tablets, powerbanks, batteries),
            recording media (CDs, DVDs, video casettes) |

            | computerEquipment               | x           |             |
            Fixed and mobile telephone equipment, including smart phones,
            personal computers, printers, routers/modem, small electronic
            gadgets, and accessories like cables, discs and drives, and gadgets
            like smartwatches or e-book
            readers                                                                                          
            |

            | software                        |             | x           |
            Computer software packages, such as OS, applications, software
            subscriptions, and use of online
            software.                                                                                                                                                                                                                    
            |

            | audiovisualEquipment            | x           |             |
            Cameras of all kinds and accessories such as lenses; binoculars,
            telescopes and
            compasses                                                                                                                                                                                                                                    
            |

            | itServices                      |             | x           |
            Subscription costs of telephone equipment, telephone calls, mobile
            phone data and voice plans, repair of telecommunication equipment,
            telefax services, subscription to streaming
            services                                                                                                                                   
            |

            | telephoneServices               | x           |             |
            Installation and subscription costs or fees for internet and phones;
            subscriptions to streaming services or
            TV                                                                                                                                                                                                               
            |

            | recreationalGoods               | x           | x           |
            Camper vans, baots, canoes, kayaks, golf carts,
            etc                                                                                                                                                                                                                                                                          
            |

            | sportingGoods                   | x           | x           |
            Equipment for sport, camping and open-air
            recreation                                                                                                                                                                                                                                                                         
            |

            | gamesGardensAndPets             | x           | x           |
            Board and card games, video games, consoles and game apps, other
            tools, celebration articles, sporting goods, garden products and
            flowers, pets and pet
            products                                                                                                                                                             
            |

            | recreationalServices            | x           | x           |
            Rental, maintenance and repair of recreational items, as well as
            veterinary services, tickets to sporting event, fairgrounds or
            theater, and membership fees to recreational services;
            gambling                                                                                                                              
            |

            | culturalGoods                   |             | x           |
            Musical instruments, replacement parts for instruments, Audio-visual
            media (tapes, CDs, DVDs, download of music and
            films)                                                                                                                                                                                                   
            |

            | culturalServices                |             | x           |
            Services provided by cultural facilities (cinemas, theatres, concert
            venues, libraries
            etc)                                                                                                                                                                                                                                  
            |

            | newspapersAndBooks              | x           | x           | All
            kinds of books in physical and electronic form, recorded
            tapes/CDs/DVDs, newspaper and other periodicals, stationary and misc
            printed matter like
            brochures                                                                                                                                                              
            |

            | packageHolidays                 | x           | x           |
            All-inclusive holidays or
            tours                                                                                                                                                                                                                                                                                              
            |

            | preAndPrimarySchool             | x           | x           |
            Kindergarten and primary
            education                                                                                                                                                                                                                                                                                           
            |

            | secondarySchool                 | x           | x           |
            Secondary
            education                                                                                                                                                                                                                                                                                                          
            |

            | vocationalSchool                | x           | x           |
            Post-secondary non-tertiary education; preparation for labour market
            endtry                                                                                                                                                                                                                                                  
            |

            | universityAndCollege            | x           | x           |
            Higher education such as universities or
            colleges                                                                                                                                                                                                                                                                            
            |

            | otherEducation                  | x           | x           |
            Education not defined by level such as language courses or tutoring
            and driving
            lessons                                                                                                                                                                                                                                      
            |

            | catering                        | x           | x           | Food
            purchased for consumption outside of the home such as restaurants,
            cafeterias, cafés, vending machines or cinemas; includes
            tips                                                                                                                                                                                        
            |

            | accommodation                   | x           | x           |
            Resorts, hotels, hostels, rental cabins, guesthouses, dormitories or
            railway sleeping
            cars                                                                                                                                                                                                                                   
            |

            | insurance                       | x           | x           | All
            types of insurance including life, health, dwelling and
            transport                                                                                                                                                                                                                                                        
            |

            | financialServices               | x           | x           |
            Moneylenders and credit cars; fees for
            banking                                                                                                                                                                                                                                                                               
            |

            | personalCare                    | x           | x           |
            Appliances such as razors or toothbrushes, including electric
            appliances, and repair of such items; make-up, hair dressing and
            salons                                                                                                                                                                                        
            |

            | personalEffects                 | x           | x           |
            Jewelry, watches, devotional/religious items, bags and purses;
            repair of such
            items                                                                                                                                                                                                                                          
            |

            | socialProtection                | x           | x           |
            Non-medical assistance and support services to the elderl, disabled
            or
            destitute                                                                                                                                                                                                                                             
            |

            | otherServices                   | x           | x           |
            Legal services, services for real estate agents, photocopies,
            administrative documents, and other personal services like
            astrologers or private
            detectives                                                                                                                                                                   
            |

            | donations                       | x           | x           | All
            kinds of charitable
            donations                                                                                                                                                                                                                                                                                            
            |

            | waterSupply                       | x           | x           |
            Water
            supply                                                                                                                                                                                                                                                                                            
            |

            | refuseCollection                       | x           | x          
            | Reuse collection and
            disposal                                                                                                                                                                                                                                                                                            
            |



            Some categories have been renamed from COICOP-1999 to COICOP-2018.

            * `transportServices` is now `passengerTransportServices`

            * `postalServices` is now `goodsTransportServices`

            * `computerEquipment` is now `itEquipment`

            * `telephoneServices` is now `itServices`

            * `hospitalServices` is now `healthServices`
          enum:
            - food
            - nonAlcoholicBeverages
            - alcoholicBeverages
            - tobacco
            - clothing
            - footwear
            - actualRentals
            - imputedRentals
            - homeMaintenance
            - homeServices
            - energy
            - furniture
            - textiles
            - appliances
            - tableware
            - houseAndGarden
            - householdMaintenance
            - medicalSupplies
            - outpatientServices
            - hospitalServices
            - vehiclePurchase
            - operationOfTransportEquipment
            - transportServices
            - postalServices
            - computerEquipment
            - telephoneServices
            - audiovisualEquipment
            - recreationalGoods
            - gamesGardensAndPets
            - recreationalServices
            - newspapersAndBooks
            - packageHolidays
            - preAndPrimarySchool
            - secondarySchool
            - vocationalSchool
            - universityAndCollege
            - otherEducation
            - catering
            - accommodation
            - personalCare
            - personalEffects
            - socialProtection
            - insurance
            - financialServices
            - otherServices
            - donations
            - energyElectricity
            - energySolidFuels
            - sportingGoods
            - fuelsForTransport
            - maintenanceOfTransportEquipment
            - transportRailway
            - transportRoad
            - transportAir
            - transportWater
            - alcoholProductionServices
            - culturalGoods
            - culturalServices
            - foodProductionServices
            - goodsTransportServices
            - healthServices
            - inpatientServices
            - itEquipment
            - itServices
            - narcotics
            - passengerTransportServices
            - software
            - waterSupply
            - refuseCollection
          example: food
          type: string
        unit:
          description: >
            Currency of the transaction. The default is the one corresponding to
            the dataSource.
          enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BRL
            - BSD
            - BTC
            - BTN
            - BWP
            - BYN
            - BYR
            - BZD
            - CAD
            - CDF
            - CHF
            - CLF
            - CLP
            - CNH
            - CNY
            - COP
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EEK
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GGP
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - IMP
            - INR
            - IQD
            - IRR
            - ISK
            - JEP
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRO
            - MRU
            - MTL
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SRD
            - SSP
            - STD
            - STN
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VES
            - VND
            - VUV
            - WST
            - XAF
            - XAG
            - XAU
            - XCD
            - XDR
            - XOF
            - XPD
            - XPF
            - XPT
            - YER
            - ZAR
            - ZMK
            - ZMW
          example: NOK
          type: string
      required:
        - category
      type: object
    ConvertFinanceResponse:
      description: |
        A mapping with the categories provided in the input.
        Other categories are not included.

        Each category contains the amount of CO2 equivalent, both in kilograms.
      properties:
        accommodation:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        actualRentals:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        alcoholicBeverages:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        appliances:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        audiovisualEquipment:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        catering:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        clothing:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        combinedTelecomServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        computerEquipment:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        donations:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        energy:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        financialServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        food:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        footwear:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        furniture:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        gamesGardensAndPets:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        homeMaintenance:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        homeServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        hospitalServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        houseAndGarden:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        householdMaintenance:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        imputedRentals:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        insurance:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        internetSubscriptionFees:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        medicalSupplies:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        newspapersAndBooks:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        nonAlcoholicBeverages:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        operationOfTransportEquipment:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        otherEducation:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        otherServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        outpatientServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        packageHolidays:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        personalCare:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        personalEffects:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        postalServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        preAndPrimarySchool:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        recreationalGoods:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        recreationalServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        refuseCollection:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        secondarySchool:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        socialProtection:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        tableware:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        telephoneServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        textiles:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        tobacco:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        transportServices:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        universityAndCollege:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        vehiclePurchase:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        vocationalSchool:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
        waterSupply:
          $ref: '#/components/schemas/ConvertFinanceResponseItemWithError'
      type: object
    ConvertFinanceResponseItemWithError:
      properties:
        co2e:
          description: Total kilograms of CO2 equivalent, rounded to grams.
          example: 100
          type: number
        conversionRates:
          items:
            default: No conversion was made
            description: |
              All the conversion rates used in the calculation.  
              They follow the same order as the units in the input.
            oneOf:
              - type: string
              - type: integer
          type: array
        error:
          description: >
            Accumulation of all errors that occurred while processing items of
            this category.

            A typical error is that the item's category is invalid.
          example: |
            Category "keyboard" does not exist within the required dataset.
          type: string
      required:
        - co2e
        - conversionRates
      type: object
    ConvertFoodAndDrinkCategoryItem:
      properties:
        amount:
          example: 10
          minimum: 0
          type: number
        category:
          description: >
            You will find the food and drink categories below. The different
            levels reflect the degree of precision.

            * Level 1 categories cover the big food groups.  These are overall
            groups and cannot be used as inputs.

            * Level 2 categories are well-detailed food groups and are the most
            basic level at which we can calculate CO2 footprint for food and
            drink.

            * Level 3 categories are specific food items.  These are only
            available in the Norwegian dataset.


            Multipliers are marked with whether they are available in the
            Norwegian (NO), Japanese (JA) and/or British (UK) datasets. Note in
            particular

            that meat (level 2) is only present in JA and UK, but is split into
            beef, pork etc in the NO dataset (level 2).


            - dairyAndEggs
              - butterAndOil - NO, JA, UK
                - oliveOil - NO
                - butter - NO
                - europeanCornOil - NO
                - nonEuropeanCornOil - NO
                - palmOil - NO
                - europeanSunflowerOil - NO
                - nonEuropeanSunflowerOil - NO
                - europeanLinseedOil - NO
                - nonEuropeanLinseedOil - NO
                - cookingOil - NO
                - europeanRapeseedOil - NO
                - nonEuropeanRapeseedOil - NO
                - highFatMargarine - NO
                - lowFatMargarine - NO
                - mayonnaise - NO
                - aioli - NO
                - saladDressing - NO
                - remoulade - NO
              - eggs - NO, JA, UK
              - cheese - NO, JA, UK
                - fetaCheese - NO
                - parmesanCheese - NO
                - halloumiCheese - NO
                - goatCheese - NO
                - mozarellaCheese - NO
                - whiteCheese - NO
                - hardCheese - NO
                - blueCheese - NO
              - milkAndYogurt - NO, JA, UK
                - skimmedMilk - NO
                - semiSkimmedMilk - NO
                - wholeMilk - NO
                - yoghurt - NO
                - almondMilk - NO
                - soyMilk - NO
                - riceMilk - NO
                - oatMilk - NO
              - cream - NO, JA, UK
                - soyCream - NO
                - oatCream - NO
                - veganIceCream - NO
                - localIceCream - NO
                - europeanIceCream - NO
                - creamLowFat - NO
                - creamHighFat - NO
                - sourCreamLowFat - NO
                - sourCreamHighFat - NO
                - creamCheese - NO
            - meat
              - meat - JA, UK
              - beef - NO
                - localBeef - NO
                - europeanBeef - NO
                - nonEuropeanBeef - NO
              - lamb - NO
                - localLamb - NO
                - europeanLamb - NO
                - nonEuropeanLamb - NO
              - game - NO
                - moose - NO
                - reindeer - NO
                - rabbit - NO
                - deer - NO
              - poultry - NO
                - localChicken - NO
                - europeanChicken - NO
                - nonEuropeanChicken - NO
                - goose - NO
                - turkey - NO
                - hen - NO
                - europeanDuck - NO
                - nonEuropeanDuck - NO
              - pork - NO
                - localPork - NO
                - europeanPork - NO
                - nonEuropeanPork - NO
            - seafood
              - fish - NO, JA, UK
                - atlanticHalibut - NO
                - plaice - NO
                - basa - NO
                - haddock - NO
                - alaskaPollock - NO
                - whiting - NO
                - sardines - NO
                - anchovies - NO
                - salmonFarmed - NO
                - salmonWild - NO
                - trout - NO
                - europeanTuna - NO
                - nonEuropeanTuna - NO
                - mackerel - NO
                - saithe - NO
                - hoki - NO
                - hake - NO
                - cod - NO
                - doverSole - NO
                - sprat - NO
                - tilapia - NO
                - pikePerch - NO
                - herring - NO
              - shellfish - NO
                - crab - NO
                - europeanLobster - NO
                - nonEuropeanLobster - NO
                - europeanPrawns - NO
                - nonEuropeanPrawns - NO
                - scallops - NO
                - squid - NO
                - europeanOyster - NO
                - nonEuropeanOyster - NO
                - crayfish - NO
                - mussels - NO
                - caviar - NO
            - beverages
              - juice - NO, JA, UK
                - citrusJuice - NO
                - miscellaneousJuice - NO
                - appleJuice - NO
              - coffee - NO, JA, UK
                - coffeeBrewed - NO
                - coffeeInstant - NO
                - coffeeGround - NO
              - tea - NO, JA, UK
                - teaLeaves - NO
                - teaInstant - NO
              - soda - NO, JA, UK
                - squashDrink - NO
                - softDrinks - NO
              - beer - NO, JA, UK
                - localBeer - NO
                - europeanBeer - NO
                - cider - NO
              - wine - NO, JA, UK
                - wineRose - NO
                - wineWhite - NO
                - wineRed - NO
              - liquor - NO, JA, UK
            - produce
              - vegetables - NO, JA, UK
                - lettuce - NO
                - greenhouseLettuce - NO
                - cucumber - NO
                - greenhouseCucumber - NO
                - rucola - NO
                - spinach - NO
                - localCabbage - NO
                - europeanCabbage - NO
                - localKale - NO
                - europeanKale - NO
                - cauliflower - NO
                - fennel - NO
                - localBroccoli - NO
                - europeanBroccoli - NO
                - kohlrabi - NO
                - chives - NO
                - localOnion - NO
                - europeanOnion - NO
                - leek - NO
                - bellPepper - NO
                - greenhouseBellPepper - NO
                - cherryTomato - NO
                - greenhouseCherryTomato - NO
                - tomato - NO
                - greenhouseTomato - NO
                - sprouts - NO
                - chilliPepper - NO
                - europeanCorn - NO
                - nonEuropeanCorn - NO
                - squash - NO
                - greenhouseSquash - NO
                - europeanAspargus - NO
                - nonEuropeanAspargus - NO
                - aubergine - NO
                - greenhouseAubergine - NO
                - pumpkin - NO
                - swede - NO
                - turnip - NO
                - carrot - NO
                - beetroot - NO
                - artichoke - NO
                - localRadish - NO
                - europeanRadish - NO
                - rootCelery - NO
                - algae - NO
                - europeanMushroom - NO
                - nonEuropeanMushroom - NO
                - fabaBeans - NO
                - brownBeans - NO
                - localLentils - NO
                - europeanLentils - NO
                - nonEuropeanLentils - NO
                - peas - NO
                - chickpeas - NO
                - europeanGreenBeans - NO
                - nonEuropeanGreenBeans - NO
                - greenPeas - NO
                - europeanSoyBeans - NO
                - nonEuropeanSoyBeans - NO
                - localWhiteBeans - NO
                - europeanWhiteBeans - NO
                - nonEuropeanWhiteBeans - NO
              - potatoes - NO, JA, UK
                - localPotato - NO
                - europeanPotato - NO
                - nonEuropeanPotato - NO
                - potatoChips - NO
                - europeanSweetPotato - NO
                - nonEuropeanSweetPotato - NO
              - fruitAndBerries - NO, JA, UK
                - orange - NO
                - greenhouseOrange - NO
                - lime - NO
                - lemon - NO
                - greenhouseLemon - NO
                - grapefruit - NO
                - blackberry - NO
                - strawberry - NO
                - greenhouseStrawberry - NO
                - lingonberry - NO
                - localBlueberry - NO
                - europeanBlueberry - NO
                - nonEuropeanBlueberry - NO
                - raspberry - NO
                - localApple - NO
                - europeanApple - NO
                - localPear - NO
                - europeanPear - NO
                - nonEuropeanPear - NO
                - pineapple - NO
                - apricot - NO
                - banana - NO
                - europeanKiwi - NO
                - nonEuropeanKiwi - NO
                - mango - NO
                - melon - NO
                - peach - NO
                - europeanGrapes - NO
                - nonEuropeanGrapes - NO
                - pomegranate - NO
                - passionFruit - NO
                - localCherry - NO
                - europeanCherry - NO
                - localPlum - NO
                - europeanPlum - NO
                - cashew - NO
                - hazelnut - NO
                - pistachio - NO
                - almond - NO
                - peanut - NO
                - chestnut - NO
                - coconut - NO
                - europeanSunflowerSeed - NO
                - nonEuropeanSunflowerSeed - NO
                - europeanFlaxSeed - NO
                - nonEuropeanFlaxSeed - NO
                - europeanPumpkinSeed - NO
                - nonEuropeanPumpkinSeed - NO
                - sesameSeed - NO
                - walnut - NO
                - olives - NO
                - avocado - NO
            - grains
              - bread - NO, JA, UK
                - wholeWheatBread - NO
                - glutenFreeBread - NO
                - ryeBread - NO
                - wheatBread - NO
                - tortilla - NO
                - tacoShell - NO
                - potatoBread - NO
              - sugarAndSweets - NO, JA, UK
                - cocoa - NO
                - localFruitJam - NO
                - europeanFruitJam - NO
                - localSugar - NO
                - nonEuropeanSugar - NO
                - milkChocolate - NO
                - meringue - NO
                - nougat - NO
                - localHoney - NO
                - nonEuropeanHoney - NO
                - marshmallow - NO
                - darkChocolate - NO
                - candy - NO
              - cakes - NO, JA, UK
                - buns - NO
                - cookie - NO
                - pastry - NO
                - glutenFreeCookie - NO
                - fruitBasedDessert - NO
                - dairyBasedDessert - NO
              - grainProducts - NO, JA, UK
                - stickyRice - NO
                - jasmineRice - NO
                - basmatiRice - NO
                - parboiledRice - NO
                - oatmeal - NO
                - cornFlakes - NO
                - muesli - NO
                - rolledOats - NO
                - semolina - NO
                - localGlutenFreePasta - NO
                - europeanGlutenFreePasta - NO
                - pastaFresh - NO
                - localPasta - NO
                - europeanPasta - NO
                - noodles - NO
                - millet - NO
                - europeanQuinoa - NO
                - nonEuropeanQuinoa - NO
                - bulgur - NO
                - soyFlour - NO
                - potatoStarch - NO
                - cornFlour - NO
                - cornstarch - NO
                - ryeFlour - NO
                - wheatFlour - NO
              - misc - NO, JA, UK
                - vinegar - NO
                - pesto - NO
                - localKetchup - NO
                - europeanKetchup - NO
                - localMustard - NO
                - europeanMustard - NO
                - BBQSauce - NO
                - soySauce - NO
                - popcorn - NO
                - tofu - NO
                - butterSauce - NO
                - cheeseSauce - NO
                - localSoyMince - NO
                - europeanSoyMince - NO
                - plantBasedMince - NO
                - quornMycoprotein - NO
                - vegetarianBalls - NO
                - basil - NO
                - parsley - NO
                - dill - NO
                - garlic - NO
                - salt - NO
                - spiceMix - NO
                - saffron - NO
                - stock - NO
                - coriander - NO
          enum:
            - bread
            - wholeWheatBread
            - glutenFreeBread
            - ryeBread
            - wheatBread
            - tortilla
            - tacoShell
            - potatoBread
            - grainProducts
            - stickyRice
            - jasmineRice
            - basmatiRice
            - parboiledRice
            - oatmeal
            - cornFlakes
            - muesli
            - rolledOats
            - semolina
            - localGlutenFreePasta
            - europeanGlutenFreePasta
            - pastaFresh
            - localPasta
            - europeanPasta
            - noodles
            - millet
            - europeanQuinoa
            - nonEuropeanQuinoa
            - bulgur
            - soyFlour
            - potatoStarch
            - cornFlour
            - cornstarch
            - ryeFlour
            - wheatFlour
            - cakes
            - buns
            - cookie
            - pastry
            - glutenFreeCookie
            - fruitBasedDessert
            - dairyBasedDessert
            - sugarAndSweets
            - cocoa
            - localFruitJam
            - europeanFruitJam
            - localSugar
            - nonEuropeanSugar
            - milkChocolate
            - meringue
            - nougat
            - localHoney
            - nonEuropeanHoney
            - marshmallow
            - darkChocolate
            - candy
            - misc
            - vinegar
            - pesto
            - localKetchup
            - europeanKetchup
            - localMustard
            - europeanMustard
            - BBQSauce
            - soySauce
            - popcorn
            - tofu
            - butterSauce
            - cheeseSauce
            - localSoyMince
            - europeanSoyMince
            - plantBasedMince
            - quornMycoprotein
            - vegetarianBalls
            - basil
            - parsley
            - dill
            - garlic
            - salt
            - spiceMix
            - saffron
            - stock
            - coriander
            - potatoes
            - localPotato
            - europeanPotato
            - nonEuropeanPotato
            - potatoChips
            - europeanSweetPotato
            - nonEuropeanSweetPotato
            - vegetables
            - lettuce
            - greenhouseLettuce
            - cucumber
            - greenhouseCucumber
            - rucola
            - spinach
            - localCabbage
            - europeanCabbage
            - localKale
            - europeanKale
            - cauliflower
            - fennel
            - localBroccoli
            - europeanBroccoli
            - kohlrabi
            - chives
            - localOnion
            - europeanOnion
            - leek
            - bellPepper
            - greenhouseBellPepper
            - cherryTomato
            - greenhouseCherryTomato
            - tomato
            - greenhouseTomato
            - sprouts
            - chilliPepper
            - europeanCorn
            - nonEuropeanCorn
            - squash
            - greenhouseSquash
            - europeanAspargus
            - nonEuropeanAspargus
            - aubergine
            - greenhouseAubergine
            - pumpkin
            - swede
            - turnip
            - carrot
            - beetroot
            - artichoke
            - localRadish
            - europeanRadish
            - rootCelery
            - algae
            - europeanMushroom
            - nonEuropeanMushroom
            - fabaBeans
            - brownBeans
            - localLentils
            - europeanLentils
            - nonEuropeanLentils
            - peas
            - chickpeas
            - europeanGreenBeans
            - nonEuropeanGreenBeans
            - greenPeas
            - europeanSoyBeans
            - nonEuropeanSoyBeans
            - localWhiteBeans
            - europeanWhiteBeans
            - nonEuropeanWhiteBeans
            - fruitAndBerries
            - orange
            - greenhouseOrange
            - lime
            - lemon
            - greenhouseLemon
            - grapefruit
            - blackberry
            - strawberry
            - greenhouseStrawberry
            - lingonberry
            - localBlueberry
            - europeanBlueberry
            - nonEuropeanBlueberry
            - raspberry
            - localApple
            - europeanApple
            - localPear
            - europeanPear
            - nonEuropeanPear
            - pineapple
            - apricot
            - banana
            - europeanKiwi
            - nonEuropeanKiwi
            - mango
            - melon
            - peach
            - europeanGrapes
            - nonEuropeanGrapes
            - pomegranate
            - passionFruit
            - localCherry
            - europeanCherry
            - localPlum
            - europeanPlum
            - cashew
            - hazelnut
            - pistachio
            - almond
            - peanut
            - chestnut
            - coconut
            - europeanSunflowerSeed
            - nonEuropeanSunflowerSeed
            - europeanFlaxSeed
            - nonEuropeanFlaxSeed
            - europeanPumpkinSeed
            - nonEuropeanPumpkinSeed
            - sesameSeed
            - walnut
            - olives
            - avocado
            - fish
            - atlanticHalibut
            - plaice
            - basa
            - haddock
            - alaskaPollock
            - whiting
            - sardines
            - anchovies
            - salmonFarmed
            - salmonWild
            - trout
            - europeanTuna
            - nonEuropeanTuna
            - mackerel
            - saithe
            - hoki
            - hake
            - cod
            - doverSole
            - sprat
            - tilapia
            - pikePerch
            - herring
            - shellfish
            - crab
            - europeanLobster
            - nonEuropeanLobster
            - europeanPrawns
            - nonEuropeanPrawns
            - scallops
            - squid
            - europeanOyster
            - nonEuropeanOyster
            - crayfish
            - mussels
            - caviar
            - meat
            - beef
            - localBeef
            - europeanBeef
            - nonEuropeanBeef
            - lamb
            - localLamb
            - europeanLamb
            - nonEuropeanLamb
            - game
            - moose
            - reindeer
            - rabbit
            - deer
            - poultry
            - localChicken
            - europeanChicken
            - nonEuropeanChicken
            - goose
            - turkey
            - hen
            - europeanDuck
            - nonEuropeanDuck
            - pork
            - localPork
            - europeanPork
            - nonEuropeanPork
            - eggs
            - milkAndYogurt
            - skimmedMilk
            - semiSkimmedMilk
            - wholeMilk
            - yoghurt
            - almondMilk
            - soyMilk
            - riceMilk
            - oatMilk
            - cream
            - soyCream
            - oatCream
            - veganIceCream
            - localIceCream
            - europeanIceCream
            - creamLowFat
            - creamHighFat
            - sourCreamLowFat
            - sourCreamHighFat
            - creamCheese
            - cheese
            - fetaCheese
            - parmesanCheese
            - halloumiCheese
            - goatCheese
            - mozarellaCheese
            - whiteCheese
            - hardCheese
            - blueCheese
            - butterAndOil
            - oliveOil
            - butter
            - europeanCornOil
            - nonEuropeanCornOil
            - palmOil
            - europeanSunflowerOil
            - nonEuropeanSunflowerOil
            - europeanLinseedOil
            - nonEuropeanLinseedOil
            - cookingOil
            - europeanRapeseedOil
            - nonEuropeanRapeseedOil
            - highFatMargarine
            - lowFatMargarine
            - mayonnaise
            - aioli
            - saladDressing
            - remoulade
            - juice
            - citrusJuice
            - miscellaneousJuice
            - appleJuice
            - coffee
            - coffeeBrewed
            - coffeeInstant
            - coffeeGround
            - tea
            - teaLeaves
            - teaInstant
            - soda
            - squashDrink
            - softDrinks
            - beer
            - localBeer
            - europeanBeer
            - cider
            - wine
            - wineRose
            - wineWhite
            - wineRed
            - liquor
          example: potatoes
          type: string
        unit:
          default: kcal
          enum:
            - kg
            - kcal
          example: kcal
          type: string
      required:
        - category
      type: object
    ConvertFoodAndDrinkInput:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ConvertFoodAndDrinkCategoryItem'
          minItems: 1
          type: array
      required:
        - categories
      type: object
    ConvertFoodAndDrinkResponse:
      description: >
        A mapping with the categories provided in the input.

        Other categories are not included.


        Each category contains the weight and the amount of CO2 equivalent, both
        in kilograms.
      properties:
        BBQSauce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        aioli:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        alaskaPollock:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        algae:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        almond:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        almondMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        anchovies:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        appleJuice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        apricot:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        artichoke:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        atlanticHalibut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        aubergine:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        avocado:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        banana:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        basa:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        basil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        basmatiRice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        beef:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        beer:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        beetroot:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        bellPepper:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        blackberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        blueCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        bread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        brownBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        bulgur:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        buns:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        butter:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        butterAndOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        butterSauce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cakes:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        candy:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        carrot:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cashew:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cauliflower:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        caviar:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cheeseSauce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cherryTomato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        chestnut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        chickpeas:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        chilliPepper:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        chives:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cider:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        citrusJuice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cocoa:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coconut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cod:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coffee:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coffeeBrewed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coffeeGround:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coffeeInstant:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cookie:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cookingOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        coriander:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cornFlakes:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cornFlour:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cornstarch:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        crab:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        crayfish:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        creamCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        creamHighFat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        creamLowFat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        cucumber:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        dairyBasedDessert:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        darkChocolate:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        deer:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        dill:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        doverSole:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        eggs:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanApple:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanAspargus:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanBeef:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanBeer:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanBlueberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanBroccoli:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanCabbage:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanCherry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanChicken:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanCorn:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanCornOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanDuck:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanFlaxSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanFruitJam:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanGlutenFreePasta:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanGrapes:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanGreenBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanIceCream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanKale:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanKetchup:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanKiwi:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanLamb:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanLentils:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanLinseedOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanLobster:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanMushroom:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanMustard:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanOnion:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanOyster:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPasta:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPear:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPlum:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPork:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPotato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPrawns:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanPumpkinSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanQuinoa:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanRadish:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanRapeseedOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanSoyBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanSoyMince:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanSunflowerOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanSunflowerSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanSweetPotato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanTuna:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        europeanWhiteBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fabaBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fennel:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fetaCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fish:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fruitAndBerries:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        fruitBasedDessert:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        game:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        garlic:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        glutenFreeBread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        glutenFreeCookie:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        goatCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        goose:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        grainProducts:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        grapefruit:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenPeas:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseAubergine:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseBellPepper:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseCherryTomato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseCucumber:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseLemon:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseLettuce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseOrange:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseSquash:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseStrawberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        greenhouseTomato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        haddock:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        hake:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        halloumiCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        hardCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        hazelnut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        hen:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        herring:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        highFatMargarine:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        hoki:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        jasmineRice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        juice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        kohlrabi:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lamb:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        leek:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lemon:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lettuce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lime:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lingonberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        liquor:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localApple:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localBeef:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localBeer:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localBlueberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localBroccoli:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localCabbage:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localCherry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localChicken:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localFruitJam:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localGlutenFreePasta:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localHoney:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localIceCream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localKale:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localKetchup:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localLamb:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localLentils:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localMustard:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localOnion:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localPasta:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localPear:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localPlum:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localPork:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localPotato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localRadish:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localSoyMince:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localSugar:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        localWhiteBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        lowFatMargarine:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mackerel:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mango:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        marshmallow:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mayonnaise:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mealLeftovers:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        meat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        melon:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        meringue:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        milkAndYogurt:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        milkChocolate:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        millet:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        misc:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        miscellaneousJuice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        moose:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mozarellaCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        muesli:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        mussels:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanAspargus:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanBeef:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanBlueberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanChicken:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanCorn:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanCornOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanDuck:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanFlaxSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanGrapes:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanGreenBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanHoney:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanKiwi:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanLamb:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanLentils:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanLinseedOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanLobster:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanMushroom:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanOyster:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanPear:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanPork:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanPotato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanPrawns:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanPumpkinSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanQuinoa:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanRapeseedOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanSoyBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanSugar:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanSunflowerOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanSunflowerSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanSweetPotato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanTuna:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nonEuropeanWhiteBeans:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        noodles:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        nougat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        oatCream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        oatMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        oatmeal:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        oliveOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        olives:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        orange:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        palmOil:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        parboiledRice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        parmesanCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        parsley:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        passionFruit:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pastaFresh:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pastry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        peach:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        peanut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        peas:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pesto:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pikePerch:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pineapple:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pistachio:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        plaice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        plantBasedMince:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pomegranate:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        popcorn:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pork:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        potatoBread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        potatoChips:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        potatoStarch:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        potatoes:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        poultry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        pumpkin:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        quornMycoprotein:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        rabbit:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        raspberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        reindeer:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        remoulade:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        riceMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        rolledOats:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        rootCelery:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        rucola:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        ryeBread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        ryeFlour:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        saffron:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        saithe:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        saladDressing:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        salmonFarmed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        salmonWild:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        salt:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sardines:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        scallops:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        semiSkimmedMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        semolina:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sesameSeed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        shellfish:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        skimmedMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        soda:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        softDrinks:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sourCreamHighFat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sourCreamLowFat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        soyCream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        soyFlour:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        soyMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        soySauce:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        spiceMix:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        spinach:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sprat:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sprouts:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        squash:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        squashDrink:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        squid:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        stickyRice:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        stock:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        strawberry:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        sugarAndSweets:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        swede:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tacoShell:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tea:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        teaInstant:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        teaLeaves:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tilapia:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tofu:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tomato:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        tortilla:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        trout:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        turkey:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        turnip:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        veganIceCream:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        vegetables:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        vegetarianBalls:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        vinegar:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        walnut:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wheatBread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wheatFlour:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        whiteCheese:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        whiting:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wholeMilk:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wholeWheatBread:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wine:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wineRed:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wineRose:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        wineWhite:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
        yoghurt:
          $ref: '#/components/schemas/ConvertFoodAndDrinkResponseItem'
      type: object
    ConvertFoodAndDrinkResponseItem:
      allOf:
        - $ref: '#/components/schemas/ConvertResponseItemWithError'
        - properties:
            weight:
              description: Weight in kilograms
              example: 10
              type: number
          required:
            - weight
          type: object
    ConvertGoodsAndServiceItemName:
      description: >
        Unique identifier for the item. Can either be the name of the item or
        its GPC brick code.


        Pass the name of the item as a string.


        Pass the GPC brick code as an integer.


        The full list of supported names and GPC codes can be found below:


        | Item name                                                     | GPC
        brick code |

        |---------------------------------------------------------------|----------------|

        | Athletic Footwear - General                                   |      
        10001070 |

        | Athletic Footwear - Specialist                                |      
        10001071 |

        | Belts                                                         |      
        10004114 |

        | Bras                                                          |      
        10001345 |

        | Briefs                                                        |      
        10001347 |

        | Dresses                                                       |      
        10001333 |

        | Dressing gowns                                                |      
        10001338 |

        | Handkerchiefs/Pocket Square                                   |      
        10001327 |

        | Handwear                                                      |      
        10001328 |

        | Headwear                                                      |      
        10001329 |

        | Jackets                                                       |      
        10001350 |

        | Night dresses                                                 |      
        10001339 |

        | Pantyhose                                                     |      
        10002425 |

        | Scarf/Tie/Neckwear                                            |      
        10001330 |

        | Shirts                                                        |      
        10001352 |

        | Shorts                                                        |      
        10001356 |

        | Skirts                                                        |      
        10001334 |

        | Sleep trousers/ shorts                                        |      
        10001358 |

        | Socks                                                         |      
        10001348 |

        | Sportswear - handwear                                         |      
        10003707 |

        | Sportswear - Upper body wear                                  |      
        10001344 |

        | Sweaters                                                      |      
        10001351 |

        | Swimsuit - 2+ piece                                           |      
        10008068 |

        | Swimsuit - one piece                                          |      
        10008067 |

        | Swimsuit bottom                                               |      
        10008066 |

        | Swimsuit top                                                  |      
        10008065 |

        | Trousers                                                      |      
        10001335 |

        | Undershirts                                                   |      
        10001349 |

        | Underskrits                                                   |      
        10002424 |

        | Camping cookware                                              |      
        10002092 |

        | Camping seating                                               |      
        10002081 |

        | Camping showers                                               |      
        10002097 |

        | Camping stove                                                 |      
        10002087 |

        | Camping table                                                 |      
        10002084 |

        | Camping tableware                                             |      
        10003773 |

        | Combat Sports Equipment                                       |      
        10004096 |

        | Curling                                                       |      
        10001794 |

        | Cycle sports equipment  - Scooters                            |      
        10006391 |

        | Diving equipment                                              |      
        10001848 |

        | Exercise machines (non-powered)                               |      
        10001815 |

        | Exercise machines (powered)                                   |      
        10001814 |

        | Fencing (Non Powered)                                         |      
        10004112 |

        | Fencing (Powered)                                             |      
        10004098 |

        | Fishing bait                                                  |      
        10001915 |

        | Fishing nets                                                  |      
        10001918 |

        | Fishing reels                                                 |      
        10001914 |

        | Fishing rods                                                  |      
        10001913 |

        | Fishing/Angling Sports Equipment Other                        |      
        10001923 |

        | Free weights/dumbbells                                        |      
        10001816 |

        | Frisbees                                                      |      
        10001771 |

        | Gym accessories                                               |      
        10001819 |

        | Kites                                                         |      
        10001831 |

        | Lanterns                                                      |      
        10002076 |

        | Lifebelts/Life-Jackets/Lifesuits                              |      
        10005389 |

        | Liferafts/Life-Buoys/Flotation Cushions                       |      
        10005390 |

        | Protective goggles                                            |      
        10001905 |

        | Protective mouth guards                                       |      
        10001904 |

        | Pucks                                                         |      
        10001769 |

        | Punching/Kicking                                              |      
        10001806 |

        | Racquets                                                      |      
        10001776 |

        | Scooter/Skateboard Sports Equipment Other                     |      
        10001843 |

        | Shuttlecocks                                                  |      
        10001770 |

        | Skateboards (non-powered)                                     |      
        10001840 |

        | Skateboards (powered)                                         |      
        10005814 |

        | Skis                                                          |      
        10001792 |

        | Sleds                                                         |      
        10001790 |

        | Sleeping bags                                                 |      
        10002080 |

        | Sleeping mat                                                  |      
        10002079 |

        | Snow/Ice sports equipment - Accessories                       |      
        10001795 |

        | Sports balls                                                  |      
        10001768 |

        | Sports Equipment Bags/Cases/Covers                            |      
        10001892 |

        | Sports Exercise Monitors                                      |      
        10001822 |

        | Sticks/Bats/Clubs                                             |      
        10001780 |

        | Surfboards/ Waterskis                                         |      
        10001844 |

        | Tent accessories (clip, buckle, hook)                         |      
        10002072 |

        | Tent heaters                                                  |      
        10002075 |

        | Tents                                                         |      
        10002069 |

        | Throwing (Javelin, hammer, discuss)                           |      
        10001762 |

        | Water heaters                                                 |      
        10004099 |

        | Watercraft                                                    |      
        10001887 |

        | Watercraft - Replacement Parts/Accessories                    |      
        10001889 |

        | Chargers                                                      |      
        10000548 |

        | Cycle Accessories - Tools/Tyre Patch Kits                     |      
        10008274 |

        | Cycle Anti-theft Device                                       |      
        10006392 |

        | Cycles (non-powered)                                          |      
        10001810 |

        | Cycles (powered)                                              |      
        10005815 |

        | Cycles Parts - Lighting                                       |      
        10008260 |

        | Cycles Parts - Stands                                         |      
        10008268 |

        | Cycles Parts - Tyres/Wheels                                   |      
        10008259 |

        | Cycles Transport - Baskets/Crates/Panniers                    |      
        10008272 |

        | Cycles Transport - Children seats                             |      
        10008271 |

        | Swimming training aids (training board, pull buoy)            |      
        10001847 |

        | Sportswear - Full body wear                                   |      
        10001342 |

        | Equipment Racks/Carriers (Automotive)                         |      
        10002734 |

        | Trailers                                                      |      
        10002993 |

        | Sportswear - Lower body wear                                  |      
        10001343 |

        | Pumps (Non Powered)                                           |      
        10005702 |

        | Indoor/Outdoor Games                                          |      
        10005181 |

        | Optic Appliances - Sunglasses                                 |      
        10000637 |

        | Sportswear - other                                            |      
        10006840 |

        | Body padding                                                  |      
        10001907 |

        | Sportswear - Headwear                                         |      
        10003708 |

        | Sports Goals/Nets/Enclosures                                  |      
        10001893 |

        | Canopies/Tarpaulins (Lawn/Garden)                             |      
        10003321 |

        | Neckwear                                                      |      
        10004113 |

        | Shoe cleaning                                                 |       
        1000400 |

        | Boards/Skis (Water Sports) - Replacement Parts/Accessories    |      
        10001845 |

        | Snow/Ice Sports Equipment Other                               |      
        10001797 |

        | Fishing/Angling Sports Equipment Variety Packs                |      
        10001922 |

        | Food/Beverage Warmers/Coolers (Non Powered)                   |      
        10002161 |

        | Slicing/Chopping Boards                                       |      
        10002147 |

        | Shoe colour/dyes                                              |      
        10000432 |

        | Footwear Inserts                                              |      
        10001074 |

        | Boots                                                         |      
        10001076 |

        | Tongs/Tweezers/Mallets/Mashers/Whisks                         |      
        10002171 |

        | Shoes                                                         |      
        10001077 |

        | Trekking equipment (Ice screw, climbing rope, nuts, ascender) |      
        10001798 |

        | Fully enclosed                                                |      
        10001078 |

        | Partially enclosed                                            |      
        10001079 |

        | Electric Torches/Flashlights                                  |      
        10005642 |

        | Safety shoes                                                  |      
        10001082 |

        | Binoculars                                                    |      
        10001499 |

        | Kitchen Knives/Cleavers                                       |      
        10002168 |

        | Saws - Non Powered                                            |      
        10003799 |

        | Axes                                                          |      
        10003383 |

        | Shovels/Spades                                                |      
        10003390 |

        | Tent extensions                                               |      
        10002070 |

        | First Aid - Accessories                                       |      
        10000449 |

        | gps Equipment - Mobile Communication                          |      
        10001193 |

        | Computer/Video Game Monitors                                  |      
        10001153 |

        | Computer Keyboards                                            |      
        10001150 |

        | Computer/Video Game Headsets                                  |      
        10005741 |

        | Video Game Consoles - Non Portable                            |      
        10003817 |

        | Footwear - Replacement Parts/Accessories                      |      
        10000433 |

        | Racquet Sports Equipment Variety Packs                        |      
        10001779 |

        | Racquet Sports Equipment Other                                |      
        10004097 |

        | Printed Maps                                                  |      
        10004105 |

        | Firelighting Tools/Matches                                    |      
        10000543 |

        | Spatulas/Scoops/Ladles                                        |      
        10002170 |

        | Skewers/Sticks                                                |      
        10002174 |

        | Overalls                                                      |      
        10001332 |

        | Prams/Pushchairs/Strollers                                    |      
        10000793 |

        | Baby Car/Booster Seats                                        |      
        10000792 |

        | Pram/Pushchair/Stroller Accessories                           |      
        10000797 |

        | Darts                                                         |      
        10001860 |

        | Metal Detectors                                               |      
        10006277 |

        | Digital Cameras                                               |      
        10001487 |

        | Printed Books/Compositions                                    |      
        10000926 |

        | Batteries                                                     |      
        10000546 |

        | Boomerang                                                     |      
        10001772 |

        | Parachuting boards                                            |      
        10001834 |

        | Parachutes                                                    |      
        10001832 |

        | Magnifying glass                                              |      
        10003776 |

        | Action Figures (Non Powered)                                  |      
        10006395 |

        | Sports Equipment Accessories Other                            |      
        10001903 |

        | Toys - Ride-on (Powered)                                      |      
        10005188 |

        | Lawn/Garden Hand Tools Other                                  |      
        10003865 |

        | Household/Office Stool                                        |      
        30010726 |

        | Garden Chair                                                  |      
        10003242 |

        | Garden Bench                                                  |      
        10003248 |

        | Bean bag                                                      |      
        10002197 |

        | Office Cupboard/Display Cabinet                               |      
        10005199 |

        | Drawer                                                        |      
        10002117 |

        | Filing Cabinet                                                |      
        10002185 |

        | Sofa                                                          |      
        10002195 |

        | Sofa Bed                                                      |      
        10002196 |

        | Desk/Workstation                                              |      
        10002203 |

        | Lounge Chair                                                  |      
        10002193 |

        | Office Box/Basket                                             |      
        10002187 |

        | Shelving Unit                                                 |      
        10002184 |

        | Coffee Table                                                  |      
        30009821 |

        | Dining Table                                                  |      
        30009822 |

        | Boardroom Table                                               |      
        30010741 |

        | Office Chair                                                  |      
        30010725 |

        | Folding Table                                                 |      
        10002202 |

        | Side Table                                                    |      
        30009823 |
      example: belts
      oneOf:
        - type: string
        - type: integer
    ConvertGoodsAndServicesInput:
      additionalProperties: false
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConvertGoodsAndServicesInputItem'
          minItems: 1
          type: array
      required:
        - items
      type: object
    ConvertGoodsAndServicesInputItem:
      additionalProperties: false
      properties:
        buyUsedInput:
          additionalProperties: false
          description: |
            Input parameters specifically used for the buy used case.
          properties:
            price:
              description: |
                Price of buying an item used. Only applicable for for buyUsed.
              example: 100
              type: number
          type: object
        itemName:
          $ref: '#/components/schemas/ConvertGoodsAndServiceItemName'
        numberOfItems:
          default: 1
          description: |
            Number of items to be bought, rented or repaired.
          type: number
        rentalInput:
          additionalProperties: false
          description: |
            Input parameters specifically used for the rental case.
          properties:
            duration:
              default: 7
              description: >
                The number of days the item is rented. Only applicable for
                rental.
              type: number
          type: object
        storeType:
          default: physicalStore
          description: >
            Type of store (online or physical) from which the item is bought or
            rented.

            When `notSpecified`, emissions related to shipping/traveling to and
            from the store are not included.
          enum:
            - physicalStore
            - onlineStore
            - notSpecified
          type: string
        useMode:
          default: none
          description: >
            Mode of buying the product. The default is "none", which is
            equivalent to buying the product new. If any of the other use modes
            are provided, the savings associated with this use mode as opposed
            to buying new are calculated.
          enum:
            - rental
            - buyUsed
            - repair
            - none
          type: string
        weight:
          default: 1
          description: >
            Weight in kg of the item. Used to calculate shipping-related
            footprint for online shopping.
          type: number
      required:
        - itemName
      type: object
    ConvertGoodsAndServicesItemsListResponse:
      additionalProperties: false
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConvertGoodsAndServicesItemsListResponseItem'
          type: array
      type: object
    ConvertGoodsAndServicesItemsListResponseItem:
      properties:
        gpcBrickCode:
          description: GPC brick code for the item
          example: 10001070
          type: number
        itemName:
          description: Name of the item.
          example: Athletic Footwear - General
          type: string
      required:
        - itemName
        - gpcBrickCode
      type: object
    ConvertGoodsAndServicesResponse:
      items:
        $ref: '#/components/schemas/ConvertGoodsAndServicesResponseItem'
      type: array
    ConvertGoodsAndServicesResponseItem:
      allOf:
        - $ref: '#/components/schemas/ConvertResponseItemWithError'
        - properties:
            circularCo2eSavings:
              description: >
                The avoided emissions due to the circular action performed on
                this item, in kgCO2e. Only calculated if useMode is provided in
                the input.
              example: 0.1083
              type: number
            co2e:
              description: >-
                The cradle-to-gate footprint of producing a new item of the type
                specified, in kgCO2e
              type: number
            itemName:
              $ref: '#/components/schemas/ConvertGoodsAndServiceItemName'
          required:
            - itemName
          type: object
    ConvertResponseItem:
      properties:
        co2e:
          description: Total kilograms of CO2 equivalent, rounded to grams.
          example: 100
          type: number
      required:
        - co2e
      type: object
    ConvertResponseItemWithError:
      allOf:
        - $ref: '#/components/schemas/ConvertResponseItem'
        - properties:
            error:
              description: >
                If an error occurred while processing this item, this field will
                hold an informative error message.

                When this field exist, the field `co2e` does not exist.


                Response will either contain `co2e` (successful calculation) or
                `error` (failure) never both.


                A typical error is that the item's category is invalid.
              example: Category "keyboard" does not exist within the required dataset.
              type: string
          type: object
    ConvertTransportCategoryItem:
      properties:
        amount:
          example: 10
          minimum: 0
          type: number
        category:
          description: >
            You will find the transport categories below. The different levels
            reflect the degree of precision.

            * Level 1 categories are averages of different modes of propulsion
            and travel patterns. Use them if you don't know which mode of
            propulsion is used.

            * Level 2 categories are well-detailed and cover most of the mode of
            transportation.

            * Level 3 categories prove higher granularity and greater accuracy.
            Use them if you have detailed knowledge of the mode of propulsion.


            We differentiate between for instance long and short flights because
            of differences in the type of aircraft used, occupancy and emission
            profiles for different parts of the journey.


            - privateCar - Passenger car, unknown propulsion system
              - electricCar - Electric car
              - hybridCar - Hybrid car
              - fossilCar - Gasoline or diesel car
            - sharedCarAverage - Car belonging to a car collective, unknown
            propulsion system
              - sharedCar - Car belonging to a car collective
                - fossilSharedCar - Gasoline or diesel car belonging to a car collective
                - electricSharedCar - Electric car belonging to a car collective
                - hybridSharedCar - Hybrid car belonging to a car collective
            - taxi - Taxi, unknown propulsion system
              - taxi - Taxi, unknown propulsion system
                - fossilTaxi - Taxi running on gasoline or diesel
                - hybridTaxi - Taxi powered by a hybrid propulsion system
                - electricTaxi - Taxi powered by an electric motor
            - motorbikeAverage - Motorized two-wheeler vehicle, unknown
            propulsion system
              - motorbike - Average of motorized two-wheeler vehicles
                - fossilMotorbike - Gasoline or diesel motorbike
                - electricMotorbike - Electric  motorbike
            - bus - Bus trip, unknown propulsion system, unknown distance
              - busShort - Short bus trip, typically within cities
                - bioGasBusShort - Intra-city trip with bus running  on biogas
                - dieselBusShort - Intra-city trip with bus powered by a diesel engine
                - electricBusShort - Intra-city  trip with bus powered by an electric motor
                - hybridBusShort - Intra-city  trip with bus powered by a hybrid engine
              - busLong - Long bus trip, between cities
            - micromobility - Average of all micromobility modes
              - walkBike - Walking or cycling
              - electricBike - Electric bike
                - electricScooter - Electric scooters (Lime, bolt etc.)
            - trainAverage - Train or subway, unknown propulsion system
              - train - Train or subway
                - dieselTrain - Train powered by diesel engine
                - electricTrain - Train powered by electricity
            - flight - Flight, unknown distance
              - flightDomestic - Less than 500 km
              - flightContinental - Between 500 km and 2000 km
              - flightGlobal - More than 2000 km
            - boat -  Average of maritime transportation modes (ferry, cruise,
            motorboat)
              - cruiseBoat - Long distance cruise trips
                - fossilMotorBoat - Motorboat powered by diesel or gasoline
                - electricMotorBoat - Motorboat powered by an electric motor
                - ferryCarPassenger - Passenger traveling by car on a ferry
                - ferryFootPassenger - Foot passenger on a ferry
          enum:
            - privateCar
            - electricCar
            - hybridCar
            - fossilCar
            - sharedCarAverage
            - sharedCar
            - fossilSharedCar
            - electricSharedCar
            - hybridSharedCar
            - taxi
            - fossilTaxi
            - hybridTaxi
            - electricTaxi
            - motorbikeAverage
            - motorbike
            - fossilMotorbike
            - electricMotorbike
            - bus
            - busShort
            - bioGasBusShort
            - dieselBusShort
            - electricBusShort
            - hybridBusShort
            - busLong
            - micromobility
            - walkBike
            - electricBike
            - electricScooter
            - trainAverage
            - train
            - dieselTrain
            - electricTrain
            - flight
            - flightDomestic
            - flightContinental
            - flightGlobal
            - boat
            - cruiseBoat
            - fossilMotorBoat
            - electricMotorBoat
            - ferryCarPassenger
            - ferryFootPassenger
          example: fossilCar
          type: string
        occupancyRate:
          description: >
            The value should be between 0.001 and 1, where 0 means that there
            are no people on board the vehicle and 1 means that all available
            seats are occupied.
          example: 0.25
          maximum: 1
          minimum: 0.001
          type: number
        unit:
          default: km
          enum:
            - km
            - kWh
            - days
          example: km
          type: string
      required:
        - category
        - unit
      type: object
    ConvertTransportInput:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ConvertTransportCategoryItem'
          minItems: 1
          type: array
      required:
        - categories
      type: object
    ConvertTransportResponse:
      description: |
        A mapping with the categories provided in the input.
        Other categories are not included.

        Each category contains the amount of CO2 equivalent, both in kilograms.
      properties:
        bioGasBusShort:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        boat:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        bus:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        busLong:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        busShort:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        cruiseBoat:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        dieselBusShort:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        dieselTrain:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricBike:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricBusShort:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricMotorBoat:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricMotorbike:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricScooter:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricSharedCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricTaxi:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        electricTrain:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        ferryCarPassenger:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        ferryFootPassenger:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        flight:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        flightContinental:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        flightDomestic:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        flightGlobal:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        fossilCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        fossilMotorBoat:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        fossilMotorbike:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        fossilSharedCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        fossilTaxi:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        hybridBusShort:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        hybridCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        hybridSharedCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        hybridTaxi:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        micromobility:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        motorbike:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        motorbikeAverage:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        privateCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        sharedCar:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        sharedCarAverage:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        taxi:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        train:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        trainAverage:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
        walkBike:
          $ref: '#/components/schemas/ConvertTransportResponseItem'
      type: object
    ConvertTransportResponseItem:
      allOf:
        - $ref: '#/components/schemas/ConvertResponseItem'
        - properties:
            co2e:
              description: |
                Total kilograms of CO2 equivalent, rounded to grams, per
                passenger.
              example: 100
              type: number
            infrastructureCo2e:
              description: |
                Infrastructure emissions in kilograms of CO2 equivalent,
                rounded to grams, per passenger.
              example: 100
              type: number
            productionCo2e:
              description: |
                Production phase emissions in kilograms of CO2 equivalent,
                rounded to grams, per passenger.
              example: 100
              type: number
            usePhaseCo2e:
              description: |
                Use phase emissions in kilograms of CO2 equivalent, rounded
                to grams, per passenger.
              example: 100
              type: number
          required:
            - infrastructureCo2e
            - productionCo2e
            - usePhaseCo2e
          type: object
    FootprintResponse:
      properties:
        categories:
          properties:
            consumption:
              description: >
                This category gives the footprint of a citizen's habits when it
                comes to purchasing goods and services.
              properties:
                co2Kg:
                  type: number
                percent:
                  description: >
                    Percentage of total emissions that can be attributed to this
                    category.
                  type: number
                subCategories:
                  properties:
                    clothesAndShoes:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    furnitureAndEquipment:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    maintenance:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    personalPurchases:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    personalServices:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    services:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                  type: object
              required:
                - co2Kg
                - percent
              type: object
            energy:
              properties:
                co2Kg:
                  type: number
                percent:
                  description: >
                    Percentage of total emissions that can be attributed to this
                    category.
                  type: number
                subCategories:
                  properties:
                    electronics:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    heat:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    light:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    water:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                  type: object
              required:
                - co2Kg
                - percent
              type: object
            food:
              properties:
                co2Kg:
                  type: number
                percent:
                  description: >
                    Percentage of total emissions that can be attributed to this
                    category.
                  type: number
                subCategories:
                  properties:
                    dairy:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    fish:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    foodWaste:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    fruitsAndVegetables:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    grain:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    liquids:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    meat:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    services:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    transportAndSales:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                  type: object
              required:
                - co2Kg
                - percent
              type: object
            public:
              properties:
                co2Kg:
                  type: number
                percent:
                  description: >
                    Percentage of total emissions that can be attributed to this
                    category.
                  type: number
                subCategories:
                  properties:
                    country:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    municipality:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    province:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                  type: object
              required:
                - co2Kg
                - percent
              type: object
            transport:
              properties:
                co2Kg:
                  type: number
                percent:
                  description: >
                    Percentage of total emissions that can be attributed to this
                    category.
                  type: number
                subCategories:
                  properties:
                    holiday:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    social:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                    work:
                      $ref: '#/components/schemas/FootprintSubCategoryResponse'
                  type: object
              required:
                - co2Kg
                - percent
              type: object
          type: object
        categoriesPercent:
          description: >
            When filtering based on categories, categoriesPercent represents the
            percent of the total emissions that are attributed to these
            categories.  

            For instance, imagine a case where you filter for public and
            consumption, and these are 19 and 24 percent of the total
            respectively. categoriesPercent is the sum of these, and would
            therefore be equal to 43.
          type: number
        totalCategoriesCo2Kg:
          type: number
        totalCo2Kg:
          type: number
      required:
        - categories
        - categoriesPercent
        - totalCategoriesCo2Kg
        - totalCo2Kg
      type: object
    FootprintSubCategoryResponse:
      properties:
        co2Kg:
          type: number
        percent:
          description: >
            Percentage of emissions within the category (public, consumption,
            transport, food or energy), attributed to this subcategory.
          type: number
      required:
        - co2Kg
        - percent
      type: object
    Indicator:
      additionalProperties: false
      properties:
        description:
          example: >
            MARKDOWN:\n## Visste du at?\n- 

            Kjøttproduksjon fører til store CO₂e- utslipp på grunn av
            fôrdyrkingen (som i stor grad består av soya og mais), metanutslipp
            gjennom raping fra drøvtyggere og hugging av regnskog.\n- 

            Det er store forskjeller på type kjøtt og hvordan kjøttet er
            fremstilt. 

            Eksempelvis vil det være mye bedre for klimagassutslippene om du
            spiser viltkjøtt enn kjøtt fra storindustri, og kylling fremfor
            storfe og sau.\n- 

            Ved å teste ut plantebaserte retter i kostholdet ditt bidrar du til
            en viktig reduksjon i klimagassutslipp.\n\n## 

            Dokumenterte effekter\n- 

            Beregningen er gjort ved å fjerne ditt kaloriinntaket fra
            kjøttprodukter, og overføre disse kaloriene til grønnsaker, frukt og
            kornprodukter.\n- Vi har lagt til grunn at 20% av kaloriintaket
            kommer fra frokost. \n\n## 

            Les mer\n-
            [https://static.ducky.eco/calculator_documentation.pdf](https://static.ducky.eco/calculator_documentation.pdf)\n\n## 

            Tips til å komme i gang\n-
            [https://vegetarmat.org/type/frokost/](https://vegetarmat.org/type/frokost/)
          type: string
        id:
          enum:
            - co2
            - money
            - points
          type: string
        name:
          type: string
        value:
          type: number
      required:
        - id
        - name
        - value
      type: object
    IndicatorsResponse:
      additionalProperties: false
      description: >
        Indicators quantify the impact of the activity you participated in,
        based on different metrics.
      properties:
        co2:
          allOf:
            - $ref: '#/components/schemas/Indicator'
          description: >
            This indicator quantifies the emissions saved, in mg of co2
            equivalents.
          type: object
        money:
          allOf:
            - $ref: '#/components/schemas/Indicator'
          description: |
            This indicator quantifies the amount of money saved.
          type: object
        points:
          allOf:
            - $ref: '#/components/schemas/Indicator'
          description: |
            Points reflect a general level of impact per indicator.
          type: object
      type: object
    InvalidRequest:
      properties:
        errors:
          items:
            type: string
          type: array
      type: object
    Investment:
      additionalProperties: false
      properties:
        category:
          additionalProperties: false
          properties:
            id:
              description: |
                The ID of the investment category.

                Existing ids:
                * socialDifficulty
                * financialCost
                * timeRequirement
              enum:
                - socialDifficulty
                - financialCost
                - timeRequirement
              example: socialDifficulty
              type: string
            name:
              description: >-
                Name of investment category, translated according to the
                requested language
              example: social difficulty
              type: string
          required:
            - id
            - name
          type: object
        value:
          additionalProperties: false
          properties:
            id:
              description: |
                The ID of the size of the investment.

                Existing IDs per category:
                * socialDifficulty
                  - sociallyAcceptable
                  - inconvenient
                  - normBreaking
                * financialCost
                  - 0_10
                  - 10_100
                  - 100_1000
                  - 1000_10000
                  - 10000+
                * timeRequirement
                  - minutes
                  - hours
                  - days
                  - months
              example: normBreaking
              type: string
            name:
              description: >-
                The size of the investment, translated according to the
                requested language
              example: breaks social norms
              type: string
          required:
            - id
            - name
          type: object
      required:
        - category
        - value
      type: object
    InvestmentsResponse:
      additionalProperties: false
      properties:
        financialCost:
          allOf:
            - $ref: '#/components/schemas/Investment'
          description: |
            Quantifies the financial cost for implementing the related tip.
          type: object
        socialDifficulty:
          allOf:
            - $ref: '#/components/schemas/Investment'
          description: >
            Quantifies the perceived social difficulty of implementing the
            related tip.
          type: object
        timeRequirement:
          allOf:
            - $ref: '#/components/schemas/Investment'
          description: >
            Quantifies the temporal investment needed for implementing the
            related tip.
          type: object
      type: object
    MobilityFootprintCO2e:
      additionalProperties: false
      properties:
        kgCO2e:
          description: |
            Footprint of travel, in kg of CO2 equivalents.
          type: number
      required:
        - kgCO2e
      type: object
    PurposeOfTravel:
      additionalProperties: false
      description: |
        Purpose of the journey.
      properties:
        other:
          $ref: '#/components/schemas/MobilityFootprintCO2e'
        work:
          $ref: '#/components/schemas/MobilityFootprintCO2e'
      required:
        - other
        - work
      type: object
    Scope1ReportingInput:
      additionalProperties: false
      properties:
        entries:
          items:
            $ref: '#/components/schemas/Scope1ReportingInputItem'
          type: array
      required:
        - entries
      type: object
    Scope1ReportingInputItem:
      additionalProperties: false
      description: |
        Provide at least one type of activity data (fuel, distance or money).
      properties:
        distance:
          additionalProperties: false
          properties:
            value:
              description: |
                The distance travelled by the vehicle (in kilometers).
              example: 150
              type: number
            vehicleType:
              description: |
                Type of vehicle
              enum:
                - smallDieselCar
                - mediumDieselCar
                - largeDieselCar
                - averageDieselCar
                - smallGasolineCar
                - mediumGasolineCar
                - largeGasolineCar
                - averageGasolineCar
                - averageHybridCar
                - averagePHEVCar
                - averageElectricCar
                - motorbike
                - averageDieselVan
                - averageGasolineVan
                - averageHGV
                - averageHGVRefrigerated
              example: motorbike
              type: string
          required:
            - vehicleType
            - value
          type: object
        fuel:
          additionalProperties: false
          properties:
            fuelType:
              description: |
                Type of fuel
              enum:
                - butane
                - CNG
                - LNG
                - LPG
                - naturalGas
                - nonBlendedNaturalGas
                - petroleumGas
                - propane
                - aviationSpirit
                - ATF
                - kerosene
                - diesel
                - nonBlendedDiesel
                - fuelOil
                - gasOil
                - naptha
                - gasoline
                - nonBlendedBensin
                - coalIndustrial
                - coalPowerGen
                - coke
                - bioEthanol
                - bioDieselME
                - bioDieselHVO
                - bioGasoline
                - woodPellets
                - woodLogs
                - woodChips
                - grassStraw
                - bioGas
                - landfillGas
                - electricityConsumptionMix
                - electricityProductionMix
                - electricityResidualMix
                - heatPump
                - chiller
                - districtHeating
              example: diesel
              type: string
            unit:
              description: |
                The unit of the selected activity data.
              enum:
                - liters
                - kWh
              example: liters
              type: string
            value:
              description: |
                The quantity of fuel consumed, matching the provided unit.
              example: 50
              type: number
          required:
            - fuelType
            - value
            - unit
          type: object
        id:
          description: >
            An optional unique identifier to be able to identify this entry in
            the output breakdown.


            Additionally, you can rely on the ordering of the output to identify
            an entry as we return the entries in the same order as in the input.
          example: invoice-01
          oneOf:
            - type: number
            - type: string
        money:
          additionalProperties: false
          properties:
            fuelType:
              description: |
                Type of fuel
              enum:
                - diesel
                - gasoline
              example: diesel
              type: string
            value:
              description: |
                The amount spent on fuel (in NOK).
              example: 100
              type: number
          required:
            - fuelType
            - value
          type: object
      type: object
    Scope1ReportingResponse:
      additionalProperties: false
      properties:
        scope1:
          additionalProperties: false
          properties:
            entries:
              description: |
                Breakdown per inputted entry of the GHG emissions.
                The order is the same as the inputted list.
              items:
                $ref: '#/components/schemas/Scope1ReportingResponseItem'
              type: array
            errors:
              description: >
                If some errors happened while processing the inputted entries,
                you will receive a partial GHG emissions report

                and this list will contain a summary of errors.

                Errors are attached to their specific entries in the `entries`
                list.


                When this list is empty, all entries were successfully
                processed.
              items:
                additionalProperties: false
                properties:
                  error:
                    description: >
                      If this entry had an error, you will find a description of
                      the error in this field.
                    type: string
                  id:
                    description: |
                      ID of the current entry (if provided in the input).
                    example: invoice-01
                    oneOf:
                      - type: number
                      - type: string
                required:
                  - error
                type: object
              type: array
            totalFootprint:
              additionalProperties: false
              properties:
                co2eKg:
                  description: >
                    Total footprint of all valid entries provided as input,
                    expressed in kilograms of CO2 equivalents.
                  example: 1500
                  type: number
              required:
                - co2eKg
              type: object
          required:
            - totalFootprint
            - entries
          type: object
      required:
        - scope1
      type: object
    Scope1ReportingResponseItem:
      additionalProperties: false
      properties:
        co2eKg:
          description: |
            GHG emissions of this entry.
          example: 100
          type: number
        error:
          description: >
            If this entry had an error, you will find a description of the error
            in this field.
          type: string
        id:
          description: >
            If an ID was given in the input, you will find it back in this
            field.
          example: invoice-01
          oneOf:
            - type: number
            - type: string
      type: object
    Scope2ReportingInput:
      additionalProperties: false
      properties:
        entries:
          items:
            $ref: '#/components/schemas/Scope2ReportingInputItem'
          type: array
      required:
        - entries
      type: object
    Scope2ReportingInputItem:
      additionalProperties: false
      description: |
        Purchased utility
      properties:
        energyWithGuaranteeOfOrigin:
          additionalProperties: false
          description: >
            A Guarantee of Origin is a EU guarantee that a given amount of power
            is produced at a particular power plant.
          properties:
            emissionFactor:
              default: 0
              description: >
                Emission factor, expressed in mg of CO2e per kWh, for the part
                of energy with Guarantee of Origin.


                When the energy is coming from a renewable source, this factor
                is usually 0.
              example: 0
              type: number
            value:
              description: |
                The part of the energy (kWh) with Guarantee of Origin.
              example: 100
              type: number
          required:
            - value
          type: object
        fuelType:
          description: |
            Source of fuel

            Default values based on utilityType:

            | utilityType | default fuelType         |
            |-------------|--------------------------|
            | electricity | electricityProductionMix |
            | heating     | districtHeating          |
            | cooling     | chiller                  |
            | steam       | naturalGas               |
          enum:
            - butane
            - CNG
            - LNG
            - LPG
            - naturalGas
            - nonBlendedNaturalGas
            - petroleumGas
            - propane
            - aviationSpirit
            - ATF
            - kerosene
            - diesel
            - nonBlendedDiesel
            - fuelOil
            - gasOil
            - naptha
            - gasoline
            - nonBlendedBensin
            - coalIndustrial
            - coalPowerGen
            - coke
            - bioEthanol
            - bioDieselME
            - bioDieselHVO
            - bioGasoline
            - woodPellets
            - woodLogs
            - woodChips
            - grassStraw
            - bioGas
            - landfillGas
            - electricityConsumptionMix
            - electricityProductionMix
            - electricityResidualMix
            - heatPump
            - chiller
            - districtHeating
          example: diesel
          type: string
        id:
          description: >
            An optional unique identifier to be able to identify this entry in
            the output breakdown.


            Additionally, you can rely on the ordering of the output to identify
            an entry as we return the entries in the same order as in the input.
          example: invoice-01
          oneOf:
            - type: number
            - type: string
        unit:
          default: kWh
          description: |
            Unit of the purchased utility. For now, only kWh is supported.
          enum:
            - kWh
          example: kWh
          type: string
        utilityType:
          description: |
            Type of the purchased utility.

            The default fuelType depends on the type of utility.
          enum:
            - electricity
            - heating
            - cooling
            - steam
          example: electricity
          type: string
        value:
          description: >
            Total value of the purchased utility, expressed in kWh, with or
            without Guarantee of Origin.
          example: 500
          type: number
      required:
        - utilityType
        - value
      type: object
    Scope2ReportingResponse:
      additionalProperties: false
      properties:
        scope2:
          additionalProperties: false
          properties:
            entries:
              description: |
                Breakdown per inputted entry of the GHG emissions.
                The order is the same as the inputted list.
              items:
                $ref: '#/components/schemas/Scope2ReportingResponseItem'
              type: array
            errors:
              description: >
                If some errors happened while processing the inputted entries,
                you will receive a partial GHG emissions report

                and this list will contain a summary of errors.

                Errors are attached to their specific entries in the `entries`
                list.


                When this list is empty, all entries were successfully
                processed.
              items:
                additionalProperties: false
                properties:
                  error:
                    description: >
                      If this entry had an error, you will find a description of
                      the error in this field.
                    type: string
                  id:
                    description: |
                      ID of the current entry (if provided in the input).
                    example: invoice-01
                    oneOf:
                      - type: number
                      - type: string
                required:
                  - error
                type: object
              type: array
            totalFootprint:
              additionalProperties: false
              description: >
                Total footprint of all valid entries provided as input,
                expressed in kilograms of CO2 equivalents.
              properties:
                locationBasedEmissions:
                  additionalProperties: false
                  properties:
                    co2eKg:
                      description: >
                        Total footprint of all valid entries provided as input,
                        using the location-based method.

                        The location-based method reflects the average emissions
                        intensity of grids on which energy consumption occurs.
                      example: 1500
                      type: number
                  required:
                    - co2eKg
                  type: object
                marketBasedEmissions:
                  additionalProperties: false
                  properties:
                    co2eKg:
                      description: >
                        Total footprint of all valid entries provided as input,
                        using the market-based method.

                        The market-based method reflects emissions from
                        electricity that companies have purposefully chosen (or
                        their lack of choice).
                      example: 1500
                      type: number
                  required:
                    - co2eKg
                  type: object
              required:
                - locationBasedEmissions
                - marketBasedEmissions
              type: object
          required:
            - totalFootprint
            - entries
          type: object
      required:
        - scope2
      type: object
    Scope2ReportingResponseItem:
      additionalProperties: false
      properties:
        energyConsumption:
          additionalProperties: false
          properties:
            kWh:
              description: |
                Total amount of consumed energy of this entry, expressed in kWh.
              example: 100
              type: number
          type: object
        error:
          description: >
            If this entry had an error, you will find a description of the error
            in this field.
          type: string
        id:
          description: >
            If an ID was given in the input, you will find it back in this
            field.
          example: invoice-01
          oneOf:
            - type: number
            - type: string
        locationBasedEmissions:
          additionalProperties: false
          description: >
            The location-based method reflects the average emissions intensity
            of grids on which energy consumption occurs.
          properties:
            co2eKg:
              description: >
                GHG emissions of this entry, expressed in kilograms of CO2
                equivalents.
              example: 100
              type: number
          required:
            - co2eKg
          type: object
        marketBasedEmissions:
          additionalProperties: false
          description: >
            The market-based method reflects emissions from electricity that
            companies have purposefully chosen (or their lack of choice).
          properties:
            co2eKg:
              description: >
                GHG emissions of this entry, expressed in kilograms of CO2
                equivalents.
              example: 100
              type: number
          required:
            - co2eKg
          type: object
      type: object
    TagResponse:
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          description: Name of tag given in the requested language
          type: string
      required:
        - id
        - name
      type: object
    TranslateCarDistanceResponse:
      description: |
        A list of valid translations
      items:
        additionalProperties: false
        description: |
          A car trip from one location to another
        properties:
          translation:
            additionalProperties: false
            description: >
              A car journey whose distance closely resembles the distance
              translated from the submitted CO2e amount.  In the case where the
              submitted CO2e amount is equivalent to a distance higher than that
              of the largest translation in our database, the largest
              translation is outputted. `numberOfTimes` indicates how many times
              this journey can be performed to emit the submitted CO2e.


              This field is left undefined if no translations match the
              submitted CO2e, and the amount is not equivalent to a distance
              higher than our longest journey.
            properties:
              actualDistance:
                description: |
                  The real distance for this car trip
                example: 84.3
                type: number
              destinationA:
                description: |
                  Trip starting point
                example: Oslo
                type: string
              destinationB:
                description: |
                  Trip destination
                example: Trondheim
                type: string
              numberOfTimes:
                description: >
                  The number of times our longest journey can be travelled per
                  the inputted CO2e amount.
                type: number
              unit:
                description: |
                  Unit for the actualDistance
                enum:
                  - km
                example: km
                type: string
              vehicle:
                description: |
                  Type of vehicle this tranlation is valid for
                enum:
                  - gasoline_car
                example: gasoline_car
                type: string
            required:
              - actualDistance
              - unit
              - destinationA
              - destinationB
              - vehicle
            type: object
          unit:
            description: |
              Unit for the given distance
            enum:
              - km
            example: km
            type: string
          value:
            description: >
              The exact distance driven by car corresponding to the amount of
              CO2e (for one passenger) submitted.
            example: 85
            type: number
        required:
          - value
          - unit
        type: object
      type: array
    TranslateEnergyResponse:
      description: |
        A list of valid translations
      items:
        description: >
          Usage of an electrical appliance, in time used, corresponding to the
          amount of CO2e inputed.
        properties:
          translation:
            properties:
              appliance:
                description: |
                  Name of the electrical appliance
                example: microwave
                type: string
              applianceUnit:
                description: |
                  Time unit
                enum:
                  - hours
                  - days
                  - months
                  - years
                example: hours
                type: string
              quantity:
                description: >
                  Amount of time this electric appliance needs to be used to
                  consume an amount of energy that closely resembles that
                  calculated from the submitted amount of CO2e.
                example: 890
                type: number
            required:
              - quantity
              - applianceUnit
              - appliance
            type: object
          unit:
            description: |
              Unit for the given value
            enum:
              - kWh
            example: kWh
            type: string
          value:
            description: |
              The exact energy consumed by this appliance
            example: 850
            type: number
        required:
          - value
          - unit
          - translation
        type: object
      type: array
    TranslateInput:
      properties:
        kgco2e:
          description: |
            Kilograms of CO2 equivalents to translate
          example: 100
          type: number
      required:
        - kgco2e
      type: object
    TranslatePlaneDistanceResponse:
      description: |
        A list of valid translations
      items:
        additionalProperties: false
        description: |
          A plane journey from one destination to another.
        properties:
          translation:
            additionalProperties: false
            description: >
              A plane journey whose distance closely resembles the distance
              translated from the submitted CO2e amount. In the case where the
              submitted CO2e amount is equivalent to a distance higher than that
              of the largest translation in our database, the largest
              translation is outputted. `numberOfTimes` indicates how many times
              this journey can be performed to emit the submitted CO2e. This
              field is left undefined if no translations match the submitted
              CO2e, and the amount is not equivalent to a distance higher than
              our longest journey.
            properties:
              actualDistance:
                description: |
                  The real distance for this plane journey.
                example: 890
                type: number
              destinationA:
                description: |
                  Trip starting point
                example: Oslo
                type: string
              destinationB:
                description: |
                  Trip destination
                example: Trondheim
                type: string
              flightType:
                description: |
                  Type of flight.
                enum:
                  - local_flight
                  - continental_flight
                  - global_flight
                example: continental_flight
                type: string
              numberOfTimes:
                description: >
                  The number of times our longest journey can be travelled per
                  the inputted CO2e amount.
                type: number
              unit:
                description: |
                  Unit for the actualDistance
                enum:
                  - km
                example: km
                type: string
            required:
              - actualDistance
              - unit
              - destinationA
              - destinationB
              - flightType
            type: object
          unit:
            description: |
              Unit for the given distance
            enum:
              - km
            example: km
            type: string
          value:
            description: >
              The exact distance flown by airplane corresponding to the amount
              of CO2e (for one passenger) submitted.
            example: 850
            type: number
        required:
          - value
          - unit
        type: object
      type: array
    TranslateTreeResponse:
      description: |
        An area of trees absorbing the given amount of kg CO2e per year
      properties:
        unit:
          description: |
            Unit for an area
          enum:
            - m2 per year
          example: m2 per year
          type: string
        value:
          description: >
            The area of trees needed to absorb the given amount of kgCO2e over
            one year
          example: 10
          type: number
      required:
        - value
        - unit
      type: object
    UserInput:
      description: >-
        Characteristics of the user whose footprint is to be calculated.  Only
        used in the context of food waste.
      properties:
        age:
          description: Age of the user.
          example: 32
          type: number
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: >
        Protected requests expect the `Authorization` header with a bearer token
        respecting the format `Bearer $ACCESS_TOKEN`.


        This **documentation is interactive**: set your `access_token` here and
        test all requests directly from your browser

        (`access_token` must be formatted as `Bearer $ACCESS_TOKEN`).

        Or set it individually for each request, in the `Authorization` header.



        ### Introduction

        The API requires an `access_token` for every request (except
        [/ping](https://storage.googleapis.com)).


        Step-by-step:

        1. [Ask Ducky](mailto:api@ducky.eco) for a `CLIENT_ID` and a
        `CLIENT_SECRET`

        2. Negotiate an `access_token` with Auth0

        3. Send authenticated requests to Ducky API


        Keep reading to learn how to obtain an `access_token` and use it to
        perform requests.


        ---


        ### Prerequisite

        To use the API, you have to get `CLIENT_ID` and a `CLIENT_SECRET`.

        To do so, please contact Ducky at [api@ducky.eco](mailto:api@ducky.eco).


        > Note: even without an `access_token`, you can browse the documentation
        and explore its possibilities by looking at the example outputs.



        ### Getting an access token

        #### Request

        Authentication is provided by Auth0. Before using Ducky API, you send a
        query to Auth0, asking for an `access_token`.


        To negotiate an `access_token`, send a request based on this curl
        snippet (update it with your `$CLIENT_ID`& `$CLIENT_SECRET`):


        ```shell

        curl --request POST \
          --url https://ducky-prod.eu.auth0.com/oauth/token \
          --header 'content-type: application/json' \
          --data '{"client_id":"$CLIENT_ID","client_secret":"$CLIENT_SECRET","audience":"ducky-api-prod","grant_type":"client_credentials"}'
        ```


        #### Response

        The response contains an `access_token` and an expiration time. You
        should store both and use the `access_token` until its expiration date.
        After expiration, repeat the process above to negotiate a new token.


        ```json

        {
          "access_token": "example_access_token",
          "token_type": "Bearer",
          "expires_in": 86400
        }

        ```

        ```


        ### Usage

        Now that you have an `access_token`, you can start using the Ducky API.

        Send the `access_token` with each request, in an `Authorization` header.

        Make sure to prefix it with the `token_type` which is always `Bearer`.


        ##### Example

        To make sure you're ready to use the API, you can use the
        [/ping/protected endpoint](https://storage.googleapis.com).

        It validates your `access_token` and checks if the API is ready to
        accept connections.


        ```shell

        curl --request GET \
          --url https://api.ducky.eco/v3/ping/protected \
          --header 'authorization: Bearer example_access_token'
        ```
      in: header
      name: Authorization
      type: apiKey
