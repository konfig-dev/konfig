publishJson:
  company: Namely
  serviceName: false
  sdkName: namely-{language}-sdk
  clientName: Namely
  metaDescription: >-
    Namely is the HR, Payroll, and Benefits platform your employees will love.
    Finally, there's HR software that employees actually use—built to fit your
    company culture. Manage all of your HR data in one place, with personalized
    service to help your company get better, faster. Namely is used by some of
    the world's most innovative and exciting companies in media, technology,
    commerce, and more.
  apiStatusUrls: false
  homepage: namely.com
  developerDocumentation: developers.namely.com/
  categories:
    - hr
    - payroll
    - benefits
    - compliance
    - hr_analytics
    - talent
rawSpecString: |
  openapi: 3.0.0
  info:
    version: ''
    title: Namely API
    description: >-
      Move your app forward with the Namely API Move your app forward with the
      Namely API
  paths:
    /companies/info:
      get:
        operationId: GET_companies-info
        summary: Company Info
        tags:
          - Company Info
        description: >-
          Get company related information. This includes authentication methods,
          name, permalink, and background image.


          Note: Authentication is **not** required for this endpoint because the
          data (company name, background image, etc.) are required for displaying
          the public home page of a Namely company.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Compay name
                    permalink:
                      type: string
                      description: Company permalink, the subdomain before namely.com
                    background_url:
                      type: string
                      description: Background image on the login page.
                    logo_url:
                      type: string
                      description: Logo image on the home page.
                    authentications:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - email_password
                              - google_oauth2
                              - saml
                          init_url:
                            type: string
    /folders:
      get:
        operationId: GET_folders
        summary: Get all Folders
        tags:
          - Company Resources
        description: This endpoint returns a list of folders and their information.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Folder'
        security:
          - Authorization: []
      post:
        operationId: POST_folders
        summary: Create Folder
        tags:
          - Company Resources
        description: >-
          To create a folder, a title is required. An array of folders will be
          returned upon success, similar to folders index endpoint.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Folder'
        responses:
          '201':
            description: Created Reponse
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Folder'
        security:
          - Authorization: []
    /resources/{id}:
      parameters:
        - name: id
          in: path
          description: The resource's id.
          required: true
          schema:
            type: string
      get:
        operationId: GET_resources-id
        summary: Get a Resource
        tags:
          - Company Resources
        description: >-
          Specify the id of the resource to get a complete description. Please see
          "Download Resource" documentation to actually download a specific
          resource.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    groups:
                      type: array
                      items:
                        $ref: '#/components/schemas/Resource'
        security:
          - Authorization: []
    /folders/{id}/resources:
      parameters:
        - name: id
          in: path
          description: Use the folder id to pull the resources you want to see.
          required: true
          schema:
            type: string
      get:
        operationId: GET_folders-id-resources
        summary: Get Resources in a Folder
        tags:
          - Company Resources
        description: >-
          This method returns an array of resources, whose format and content will
          be the same as the show resource endpoint.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Resource'
                    meta:
                      type: object
                      properties:
                        is_super_admin:
                          type: boolean
                        accepted_file_extensions:
                          type: string
        security:
          - Authorization: []
      delete:
        operationId: DELETE_folders-id-resources
        summary: Delete Resource
        tags:
          - Company Resources
        description: This endpoint deletes a specified resource.
        responses:
          '200':
            description: Successful Response
        security:
          - Authorization: []
    /resources:
      get:
        operationId: GET_resources
        summary: Get Resources not in a Folder
        tags:
          - Company Resources
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Resource'
                    meta:
                      type: object
                      properties:
                        is_super_admin:
                          type: boolean
                        accepted_file_extensions:
                          type: string
    /folders/{id}:
      parameters:
        - name: id
          in: path
          description: <code>id</code> of the folder you want to update
          required: true
          schema:
            type: string
      put:
        operationId: PUT_folders-id
        summary: Update Folder
        tags:
          - Company Resources
        description: Updates the name of a folder.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Folder'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resources:
                      type: array
                      items:
                        $ref: '#/components/schemas/Folder'
        security:
          - Authorization: []
      delete:
        operationId: DELETE_folders-id
        summary: Delete Folder
        tags:
          - Company Resources
        description: You must pass in the folder id to delete a specific folder.
        responses:
          '200':
            description: Successful Response
        security:
          - Authorization: []
    /groups:
      get:
        operationId: GET_groups
        summary: Get all Groups
        tags:
          - Groups & Teams
          - Groups
        description: >-
          Returns an array of all groups. Every group must belong to one and only
          one group type. Each group type can have zero to many associated groups.
          Although not present in this endpoint, each group can also have zero to
          many associated profiles (i.e. people within groups).


          Office Locations and Departments are groups.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    groups:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group'
                    meta:
                      $ref: '#/components/schemas/Meta_Group'
                    links:
                      type: object
                      properties:
                        groups.group_types:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        group_types:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group_Type'
        security:
          - Authorization: []
    /groups/{id}:
      parameters:
        - name: id
          in: path
          description: id of the group you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_groups-id
        summary: Get a Group
        tags:
          - Groups & Teams
          - Groups
        description: >-
          Returns same information about the group as in the
          #endpoint:Z6r47eQWjcuNA9mq5 endpoint, as well as linked any profiles
          associated with that group (zero to many).
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    groups:
                      type: array
                      items:
                        $ref: '#/components/schemas/group-singular'
                    meta:
                      $ref: '#/components/schemas/Meta_Group'
                    links:
                      type: object
                      properties:
                        groups.group_types:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        group_types:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group_Type'
        security:
          - Authorization: []
    /group_types:
      get:
        operationId: GET_group_types
        summary: Get all Group Types
        tags:
          - Groups & Teams
          - Groups
        description: >-
          Returns an array of all group types. Although not present in this
          endpoint, every group must belong to one and only one group type. Each
          group type can have zero to many associated groups. Each group type can
          also have zero to many associated profiles (i.e. people within groups
          that belong to those group types).
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    group_types:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group_Type'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        group_type.group:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        group_types:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group_Type'
        security:
          - Authorization: []
    /group_types/{id}:
      parameters:
        - name: id
          in: path
          description: id of the group type you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_group_types-id
        summary: Get a Group Type
        tags:
          - Groups & Teams
        description: >-
          Returns same information about the group as in the
          #endpoint:27wPhQbAeFhxwiHkp endpoint, as well as linked any profiles
          associated with that group type (zero to many).
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    group_types:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group_Type'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        group_type.group:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        group_types:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group_Type'
        security:
          - Authorization: []
    /group_types/{id}/groups:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      get:
        operationId: GET_group_types-id-groups
        summary: Get Groups from Group Type
        tags:
          - Groups & Teams
        description: >-
          Returns an array of all groups associated with the `id` of the
          group_type.
        responses:
          '200':
            description: ''
            content:
              application/javascript:
                schema:
                  type: object
                  properties:
                    groups:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group'
                    meta:
                      $ref: '#/components/schemas/Meta_Group'
                    links:
                      type: object
                      properties:
                        groups.group_types:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        group_types:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group_Type'
        security:
          - Authorization: []
    /teams:
      get:
        operationId: GET_teams
        summary: Get all Teams
        tags:
          - Groups & Teams
          - Teams
        description: >-
          Returns an array of all teams as well as linked, a list of team
          categories. Every team can belong to zero to many team categories. Each
          team category can have zero to many associated teams. Although not
          present in this endpoint, each team can also have zero to many
          associated profiles (i.e. people within teams).
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    teams:
                      type: array
                      items:
                        $ref: '#/components/schemas/team'
                    links:
                      type: object
                      properties:
                        teams.categories:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        categories:
                          type: array
                          items:
                            $ref: '#/components/schemas/team-category'
    /teams/{id}:
      parameters:
        - name: id
          in: path
          description: <code>id</code> of the team you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_teams-id
        summary: Get a Team
        tags:
          - Groups & Teams
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    teams:
                      type: array
                      items:
                        $ref: '#/components/schemas/team'
                    links:
                      type: object
                      properties:
                        teams.categories:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        categories:
                          type: array
                          items:
                            $ref: '#/components/schemas/team-category'
    /events:
      get:
        operationId: GET_events
        summary: Get all Events
        tags:
          - Home Feed
          - Events
        description: >-
          Returns all events, paginated. Linked to the event is an array of any
          profiles that commented on the event. Only events associated with the
          profiles of active employees are eligible to appear.
        parameters:
          - name: limit
            in: query
            description: Limit of records to be retrieved
            schema:
              type: integer
              maximum: 30
              default: ''
          - name: after
            in: query
            description: >-
              <code>id</code> of the first record BEFORE the events you want to
              retrieve
            schema:
              type: string
          - name: filter[type]
            in: query
            description: >-
              The type of event you want to retrieve; examples include `birthday`,
              `announcement`, `recent_arrival` or `anniversary`
            schema:
              type: string
          - name: profile_id
            in: query
            description: >-
              <code>id</code> of the profile that you wish to pull all associated
              events from
            schema:
              type: string
          - name: order
            in: query
            description: >-
              This parameter allows you to change how results are ordered. Valid
              values are `asc` and `desc` - It defaults to `desc`
            schema:
              type: string
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    events:
                      type: array
                      items:
                        $ref: '#/components/schemas/Event'
                    meta:
                      $ref: '#/components/schemas/Events_Meta'
                    links:
                      type: object
                      properties:
                        events.profile:
                          $ref: '#/components/schemas/Link'
                        events.comments:
                          $ref: '#/components/schemas/Link'
                        events.file:
                          $ref: '#/components/schemas/Link'
                        comments.profile:
                          $ref: '#/components/schemas/Link'
                        profile.image:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Profile'
                        comments:
                          type: array
                          items:
                            $ref: '#/components/schemas/Comment'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
      post:
        operationId: POST_events
        summary: Create an Announcement
        tags:
          - Home Feed
          - Events
        description: >-
          Creates an announcement. Other event types are auto-generated and cannot
          be manually created.


          The file parameters allow you to include a file which is located in the
          announcement. As with uploading a file to a profile, the file must be
          previously uploaded via the `file create` endpoint.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Event'
        responses:
          '201':
            description: Create Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    events:
                      type: array
                      items:
                        $ref: '#/components/schemas/Event'
                    meta:
                      $ref: '#/components/schemas/Events_Meta'
                    links:
                      type: object
                      properties:
                        events.profile:
                          $ref: '#/components/schemas/Link'
                        events.comments:
                          $ref: '#/components/schemas/Link'
                        events.file:
                          $ref: '#/components/schemas/Link'
                        comments.profile:
                          $ref: '#/components/schemas/Link'
                        profile.image:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Profile'
                        comments:
                          type: array
                          items:
                            $ref: '#/components/schemas/Comment'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
    /events/{id}:
      parameters:
        - name: id
          in: path
          description: id of event.
          required: true
          schema:
            type: string
      get:
        operationId: GET_events-id
        summary: Get an Event
        tags:
          - Home Feed
          - Events
        description: Returns information about a single event.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    events:
                      type: array
                      items:
                        $ref: '#/components/schemas/Event'
                    meta:
                      $ref: '#/components/schemas/Events_Meta'
                    links:
                      type: object
                      properties:
                        events.profile:
                          $ref: '#/components/schemas/Link'
                        events.comments:
                          $ref: '#/components/schemas/Link'
                        events.file:
                          $ref: '#/components/schemas/Link'
                        comments.profile:
                          $ref: '#/components/schemas/Link'
                        profile.image:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Linked_Profile'
                        comments:
                          type: array
                          items:
                            $ref: '#/components/schemas/Comment'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
      delete:
        operationId: DELETE_events-id
        summary: Delete an Announcement
        tags:
          - Home Feed
        description: Delete a particular event.
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      default: Success!
    /events/{event-id}/comments:
      parameters:
        - name: event-id
          in: path
          description: <code>id</code> of the event whose comments you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_events-id-comments
        summary: Get an Event's Comments
        tags:
          - Home Feed
          - Comments
        description: Returns all comments associated with a particular event.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    events:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
                    meta:
                      $ref: '#/components/schemas/Comment_Meta'
                    links:
                      type: object
                      properties:
                        comments.profile:
                          $ref: '#/components/schemas/Link'
                        profile.image:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Linked_Profile'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
    /likes/event/{event-id}/recent:
      parameters:
        - name: event-id
          in: path
          description: <code>id</code> of the event whose likes you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_likes-event-event_id-recent
        summary: Get an Event's Likes
        tags:
          - Home Feed
          - Likes
        description: Returns a list of profiles that liked a particular event.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    likes:
                      type: array
                      items:
                        $ref: '#/components/schemas/Like'
        security:
          - Authorization: []
    /likes/event_comment/{comment-id}/recent:
      parameters:
        - name: comment-id
          in: path
          description: <code>id</code> of the comment whose likes you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_likes-event_comment-comment-id-recent
        summary: Get an Event's Comment's Likes
        tags:
          - Home Feed
        description: >-
          Returns a list of profiles that liked a particular comment on a
          particular event.
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    likes:
                      type: array
                      items:
                        $ref: '#/components/schemas/Like'
    /events/{id}/comments:
      parameters:
        - name: id
          in: path
          description: id of event.
          required: true
          schema:
            type: string
      post:
        operationId: POST_events-id-comments
        summary: Create an Event's Comment
        tags:
          - Home Feed
          - Comments
        description: Creates a comment on a particular event.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Comment'
        responses:
          '201':
            description: Created Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    events:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
                    meta:
                      $ref: '#/components/schemas/Comment_Meta'
                    links:
                      type: object
                      properties:
                        comments.profile:
                          $ref: '#/components/schemas/Link'
                        profile.image:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Linked_Profile'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
    /likes/event/{id}:
      parameters:
        - name: id
          in: path
          description: <code>id</code> of the event you want to like
          required: true
          schema:
            type: string
      post:
        operationId: POST_likes-event-id
        summary: Create an Event's Like
        tags:
          - Home Feed
        description: >-
          Like a particular event simply by `POST`ing to the endpoint with its
          <code>id</code> in the path parameters.
        responses:
          '200':
            description: Success!
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: object
                      properties:
                        likes_count:
                          type: integer
                          description: total number of likes on event
                        liked_by_current_profile:
                          type: boolean
                          description: >-
                            <code>true</code> if the token bearer has liked this
                            event (will always be true with a 200 response)
                examples:
                  response:
                    value:
                      message:
                        likes_count: 2
                        liked_by_current_profile: true
        security:
          - Authorization: []
    /likes/event_comment/{comment-id}:
      parameters:
        - name: comment-id
          in: path
          description: <code>id</code> of the comment you want to like
          required: true
          schema:
            type: string
      post:
        operationId: POST_likes-event_comment-comment-id
        summary: Create an Event's Comment's Like
        tags:
          - Home Feed
        description: >-
          Like a particular comment simply by `POST`ing to the endpoint with its
          <code>id</code> in the path parameters.
        responses:
          default:
            description: ''
            content:
              application/json:
                schema: {}
      delete:
        operationId: DELETE_likes-event_comment-comment-id
        summary: Delete an Event's Comment's Like
        tags:
          - Home Feed
        description: >-
          Delete your like from a particular comment. You can only delete your own
          like (from the profile related to the token).
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      default: Success!
    /events/{event-id}/comments/{comment-id}:
      parameters:
        - name: event-id
          in: path
          description: <code>id</code> of the event to which the comment belongs
          required: true
          schema:
            type: string
        - name: comment-id
          in: path
          description: <code>id</code> of the comment you want to delete from the event
          required: true
          schema:
            type: string
      delete:
        operationId: DELETE_events-eventID-comments-commentID
        summary: Delete an Event's Comment
        tags:
          - Home Feed
          - Comments
        description: Delete a particular comment on an event.
        responses:
          '200':
            description: Succssful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      default: Success!
        security:
          - Authorization: []
    /likes/event/{event-id}:
      parameters:
        - name: event-id
          in: path
          description: <code>id</code> of the event from which you want to delete the like
          required: true
          schema:
            type: string
      delete:
        operationId: DELETE_likes-event-id
        summary: Delete an Event's Like
        tags:
          - Home Feed
        description: Delete a particular like from an event.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delete_Like'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      default: Success!
        security:
          - Authorization: []
    /job_tiers:
      get:
        operationId: GET_job_tiers
        summary: Get all Job Tiers
        tags:
          - Jobs Info
          - Job Tier
        description: >-
          Returns an array of all job tiers. Each job tier can have zero to many
          linked job titles (while each job title must have one and only one
          linked job tier).
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_tiers:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Tier'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_tiers.job_titles:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title_Link'
        security:
          - Authorization: []
      post:
        operationId: POST_job_tiers
        summary: Create a Job Tier
        tags:
          - Jobs Info
          - Job Tier
        description: Creates a job tier.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Job_Tier'
        responses:
          '201':
            description: Create Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_tiers:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Tier'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_tiers.job_titles:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
        security:
          - Authorization: []
    /job_tiers/{id}:
      parameters:
        - name: id
          in: path
          description: <code>id</code> of the job tier you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_job_tiers-id
        summary: Get a Job Tier
        tags:
          - Jobs Info
          - Job Tier
        description: Returns information about a single job tier.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_tiers:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Tier'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_tiers.job_titles:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
        security:
          - Authorization: []
      put:
        operationId: PUT_job_tiers-id
        summary: Update a Job Tier
        tags:
          - Jobs Info
          - Job Tier
        description: >-
          Updates the label of a job tier.


          Use the #endpoint:3iHo6fSyKNs2dsaSC endpoint to get a list of job tiers,
          whose <code>id</code> is used in the path parameters.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Job_Tier'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_tiers:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Tier'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_tiers.job_titles:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
        security:
          - Authorization: []
    /job_titles:
      get:
        operationId: GET_job_titles
        summary: Get all Job Titles
        tags:
          - Jobs Info
          - Job Title
        description: >-
          Returns all job titles. Each job title must have one and only one linked
          job tier (and each job tier can have zero to many linked job titles).


          When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must
          either use the <code>title</code> or <code>id</code> of a
          <code>job_title</code>.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_titles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Title'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_titles.job_tier:
                          type: object
                          items:
                            $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_tiers:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Tier'
        security:
          - Authorization: []
      post:
        operationId: POST_job_titles
        summary: Create a Job Title
        tags:
          - Jobs Info
          - Job Title
        description: >-
          Creates a job title.


          Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers,
          whose <code>id</code> is used to populate the value for the
          <code>parent</code> (job tier) key in the request body.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Job_Title'
        responses:
          '201':
            description: Create Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_titles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Title'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_titles.job_tier:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_tiers:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Tier'
        security:
          - Authorization: []
    /job_titles/{id}:
      parameters:
        - name: id
          in: path
          description: id of the job title you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_job_titles-id
        summary: Get a Job Title
        tags:
          - Jobs Info
          - Job Title
        description: >-
          Returns information about a single Job Title..


          When using the #endpoint:K6iFb2x6z2yTM9jev endpoint, the API user must
          either use the <code>title</code> or <code>id</code> of a
          <code>job_title</code>.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_titles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Title'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_titles.job_tier:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_tiers:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Tier'
        security:
          - Authorization: []
      put:
        operationId: PUT_job_titles-id
        summary: Update a Job Title
        tags:
          - Jobs Info
          - Job Title
        description: >-
          Updates the label and/or parent (job tier) of a job title.


          Use the #endpoint:xfyRRDnWE32d5PNBZ endpoint to get a list of job tiers,
          whose <code>id</code> is used to populate the value for the
          <code>parent</code> (job tier) key in the request body. 


          If not updating the <code>parent</code>, use the <code>id</code> of the
          current <code>parent</code> value; if not updating the
          <code>title</code>, use the current job title <code>title</code>.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Job_Title'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    job_titles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job_Title'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        job_titles.job_tier:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        job_tiers:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Tier'
        security:
          - Authorization: []
    /countries:
      get:
        operationId: GET_countries
        summary: Get all Countries
        tags:
          - Namely System Info
          - Countries
        description: >-
          Returns all valid countries in Namely. A country is universal and may
          not be modified.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    countries:
                      type: array
                      items:
                        $ref: '#/components/schemas/countries'
        security:
          - Authorization: []
    /countries/{id}:
      parameters:
        - name: id
          in: path
          description: >-
            id of the country (an abbreviation of the country's name) you want to
            view
          required: true
          schema:
            type: string
      get:
        operationId: GET_countries-id
        summary: Get a Country
        tags:
          - Namely System Info
          - Countries
        description: >-
          Returns one country, as well as a list of a country’s subdivisions (e.g.
          a list of its states or provinces).
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    countries:
                      type: array
                      items:
                        $ref: '#/components/schemas/Country'
        security:
          - Authorization: []
    /notifications:
      get:
        operationId: GET_notifications
        summary: Get all Notifications
        tags:
          - Notifications
        description: >-
          Returns all notifications for the current API user/token bearer.


          There are three main types of notifications:

          1. Time Off

          2. Mentioned/Appreciated

          3. Generic (All Other)


          <strong>There are also three "200" responses on this page</strong>.
          However, the actual notification response is a combination of all three
          responses (assuming the user has received all three types of
          notifications).


          Time Off and Mentioned/Appreciated have distinct "links" associated with
          the notification object. Certain keys will be present or absent based on
          the nature of notification (e.g. the "comment_id" key will only be
          present if you were mentioned in a comment).
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    notifications:
                      $ref: '#/components/schemas/generic-notification'
                    links:
                      type: object
                      properties:
                        notifications.profile_id:
                          $ref: '#/components/schemas/Link'
                        profiles.job_title:
                          $ref: '#/components/schemas/Link'
                        profiles.image:
                          $ref: '#/components/schemas/Link'
                        notifications.requester_id:
                          $ref: '#/components/schemas/Link'
                        notifications.responder_id:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Profile'
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title_Link'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
    /profiles/{id}/notifications:
      parameters:
        - name: id
          in: path
          description: id of the profile whose notifications you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_notifications-id
        summary: Get a Profile's Notifications
        tags:
          - Notifications
        description: >-
          Returns notifications for a profile in a paginated form. By default,
          there will be 30 notifications per page. At most, you can request 50
          notifications per page.


          There are three main types of notifications:

          1. Time Off

          2. Mentioned/Appreciated

          3. Generic (All Other)


          <strong>There are also three "200" responses on this page</strong>.
          However, the actual notification response is a combination of all three
          responses (assuming the user has received all three types of
          notifications).


          Time Off and Mentioned/Appreciated have distinct "links" associated with
          the notification object. Certain keys will be present or absent based on
          the nature of notification (e.g. the "comment_id" key will only be
          present if you were mentioned in a comment).
        parameters:
          - name: page
            in: query
            description: the page of information you'd like to receive.
            required: false
            schema:
              type: integer
          - name: per_page
            in: query
            description: >-
              the number of employees to retrieve when using pagination; default
              is 30 and the limit is 50.
            required: false
            schema:
              type: integer
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    notifications:
                      $ref: '#/components/schemas/generic-notification'
                    links:
                      type: object
                      properties:
                        notifications.profile_id:
                          $ref: '#/components/schemas/Link'
                        profiles.job_title:
                          $ref: '#/components/schemas/Link'
                        profiles.image:
                          $ref: '#/components/schemas/Link'
                        notifications.requester_id:
                          $ref: '#/components/schemas/Link'
                        notifications.responder_id:
                          $ref: '#/components/schemas/Link'
                    linked:
                      type: object
                      properties:
                        profiles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Profile'
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title_Link'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
        security:
          - Authorization: []
    /profiles/fields:
      get:
        operationId: GET_profiles-fields
        summary: Get all Profile Fields
        tags:
          - Profile Fields
        description: >-
          Returns all profiles fields as configured at your company with
          instructions on valid format for passing through the API. This includes
          custom fields, but exceptions can be found on the
          #endpoint:K6iFb2x6z2yTM9jev page.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    fields:
                      type: array
                      items:
                        $ref: '#/components/schemas/Field'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        fields.sections:
                          type: string
                    linked:
                      type: object
                      properties:
                        sections:
                          type: array
                          items:
                            $ref: '#/components/schemas/Section'
        security:
          - Authorization: []
      post:
        operationId: POST_profiles-fields
        summary: Create a Profile Field
        tags:
          - Profile Fields
        description: Creates a profile field within a profile field section.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Profile_Field'
        responses:
          '201':
            description: Created Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    fields:
                      type: array
                      items:
                        $ref: '#/components/schemas/Field'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        fields.sections:
                          type: string
                    linked:
                      type: object
                      properties:
                        sections:
                          type: array
                          items:
                            $ref: '#/components/schemas/Section'
        security:
          - Authorization: []
    /profiles/fields/{id}:
      parameters:
        - name: id
          in: path
          description: id of the profile field you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_profiles-fields-id
        summary: Get a Profile Field
        tags:
          - Profile Fields
        description: Returns information about a single Profile Field.
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    fields:
                      type: array
                      items:
                        $ref: '#/components/schemas/Field'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        fields.sections:
                          type: string
                    linked:
                      type: object
                      properties:
                        sections:
                          type: array
                          items:
                            $ref: '#/components/schemas/Section'
        security:
          - Authorization: []
      put:
        operationId: PUT_profiles-fields-id
        summary: Update a Profile Field
        tags:
          - Profile Fields
        description: >-
          Updates a profile field within a profile field section. Supports
          changing the label and the profile field section in which it sits.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Profile_Field'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    fields:
                      type: array
                      items:
                        $ref: '#/components/schemas/Field'
                    meta:
                      type: object
                      properties:
                        count:
                          type: integer
                        status:
                          type: integer
                    links:
                      type: object
                      properties:
                        fields.sections:
                          type: string
                    linked:
                      type: object
                      properties:
                        sections:
                          type: array
                          items:
                            $ref: '#/components/schemas/Section'
        security:
          - Authorization: []
    /profiles/fields/sections:
      get:
        operationId: GET_profiles-fields-sections
        summary: Get all Profile Field Sections
        tags:
          - Profile Fields
          - Profile Fields Sections
        description: >-
          Returns all profiles field sections as configured at your company.
          Linked to this endpoint is a list of profile fields, including
          additional fields not necessarily included in the
          #endpoint:2PMjgBj4iCTtp4tJe endpoint, as not all are API transferrable.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    sections:
                      type: array
                      items:
                        $ref: '#/components/schemas/Section'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        sections.fields:
                          type: string
                    linked:
                      type: object
                      properties:
                        fields:
                          type: array
                          items:
                            $ref: '#/components/schemas/Field'
        security:
          - Authorization: []
    /profiles/fields/sections/{id}:
      parameters:
        - name: id
          in: path
          description: id of the profile field section you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_profiles-fields-sections-id
        summary: Get a Profile Field Section
        tags:
          - Profile Fields
          - Profile Fields Sections
        description: Returns information about a single Profile Field Section.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    sections:
                      type: array
                      items:
                        $ref: '#/components/schemas/Section'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        sections.fields:
                          type: string
                    linked:
                      type: object
                      properties:
                        fields:
                          type: array
                          items:
                            $ref: '#/components/schemas/Field'
        security:
          - Authorization: []
      put:
        operationId: PUT_profiles-fields-sections-id
        summary: Update a Profile Field Section
        tags:
          - Profile Fields
          - Profile Fields Sections
        description: Updates the name/label of a profile field section.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Section'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    title:
                      type: string
                    sections:
                      type: array
                      items:
                        $ref: '#/components/schemas/Section'
                    meta:
                      $ref: '#/components/schemas/Meta'
                    links:
                      type: object
                      properties:
                        sections.fields:
                          type: string
                    linked:
                      type: object
                      properties:
                        fields:
                          type: array
                          items:
                            $ref: '#/components/schemas/Field'
        security:
          - Authorization: []
    /profiles:
      get:
        operationId: GET_profiles
        summary: Get all Profiles
        tags:
          - Profiles
        description: >-
          Returns all active and inactive employee profiles in the same format as
          the #endpoint:wn3pJ3WtCYWuuBL6r endpoint.


          Every client-created custom field (the token bearer has permission to
          see) will appear as key at the bottom of the profile object.


          As a note, the following fields will always be returned in the API
          response, regardless of user permissions:


          1. id

          2. email

          3. first_name

          4. last_name

          5. user_status

          6. updated_at

          7. created_at

          8. preferred_name

          9. full_name

          10. job_title



          These will NOT be exposed to the user in the UI if their permissions are
          set correctly.


          ### Important Note About the Endpoint


          Please ensure you're paginating the response of the GET `/profiles`
          endpoint to ensure optimal performance avoid possible time-outs.


          **Examples:**

          1.
          `https://clientname.namely.com/api/v1/profiles.json?page=1&per_page=20&filter[user_status]=active`

          2.
          `https://clientname.namely.com/api/v1/profiles.json?page=2&per_page=20&filter[user_status]=active`

          3.
          `https://clientname.namely.com/api/v1/profiles.json?page=3&per_page=20&filter[user_status]=active`


          **Notes:**

          1. If you do not specify the `per_page` value, this will default to 30.
          The max possible is 50.

          2. If the response returns with less than the number of profiles
          requested (or none), the `count` in the `meta` object will be 0, and the
          `profiles` key will return an empty array.
        parameters:
          - name: page
            in: query
            description: the page of information you'd like to receive.
            required: false
            schema:
              type: integer
          - name: per_page
            in: query
            description: >-
              the number of employees to retrieve when using pagination; default
              is 30 and the limit is 50.
            required: false
            schema:
              type: integer
          - name: profile_format
            in: query
            description: >-
              format of the profile object; only <code>short</code> is supported -
              returns a truncated version of the profile object
            required: false
            schema:
              type: string
          - name: sort
            in: query
            description: >-
              sort order of profiles; valid values - <code>first_name</code>,
              <code>last_name</code>, <code>created_at</code>,
              <code>updated_at</code>; prepend with a - (minus) sign to reverse
              the order
            required: false
            schema:
              type: string
          - name: filter[first_name]
            in: query
            description: returns only profiles with the defined first name
            required: false
            schema:
              type: string
          - name: filter[last_name]
            in: query
            description: returns only profiles with the defined last name
            required: false
            schema:
              type: string
          - name: filter[email]
            in: query
            description: returns only profiles with the defined (company) email
            required: false
            schema:
              type: string
          - name: filter[personal_email]
            in: query
            description: returns only profiles with the defined personal email
            required: false
            schema:
              type: string
          - name: filter[job_title]
            in: query
            description: >-
              returns only profiles with the defined job title; must be the
              job_title's <code>title</code>
            required: false
            schema:
              type: string
          - name: filter[reports_to]
            in: query
            description: >-
              <code>id</code> of the profile for whose direct reports you to view;
              returns only those profiles
            required: false
            schema:
              type: string
          - name: filter[user_status]
            in: query
            description: >-
              returns only profiles with the defined <code>user_status</code>;
              <code>active</code>, <code>pending</code>, and <code>inactive</code>
              are supported
            required: false
            schema:
              type: string
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    profiles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Profile'
                    meta:
                      $ref: '#/components/schemas/Profile_Meta'
                    links:
                      $ref: '#/components/schemas/Profile_Links'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
                        groups:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group'
                        teams:
                          type: array
                          items:
                            $ref: '#/components/schemas/team'
        security:
          - Authorization: []
      post:
        operationId: POST_profiles
        summary: Create a Profile
        tags:
          - Profiles
        description: "**Create a profile as a draft Onboarding session**\n\n1. Ensure that the Onboarding feature has been enabled for your company.\n2. In the body of the POST /profiles request, use \"pending\" as the value of the user_status field along with the other required fields found in the Request Body section below.\n\n*Sample Request:*\n```json\n{\n    \"profiles\": [\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Smith\",\n            \"user_status\": \"pending\",\n            \"start_date\": \"2019-01-01\",\n            \"personal_email\": \"personal@email.com\",\n            \"email\": \"work@email.com\"\n        }\n    ]\n}\n```\n\n**Create a profile with a job title set**\n\n1. Retrieve the title or id of a  by making a GET request to the /job_titles or /job_titles/{id} endpoint (see the  section).\n2. In the body of the POST /profiles request, include the job_title field in addition to the other required fields found in the Request Body section below.\n3. The value of the job_title field should be set to an object containing the title (string) or id (guid) of an existing job title. Passing both values is also valid.\n\n*Sample Request:*\n```json\n{\n    \"profiles\": [\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Smith\",\n            \"user_status\": \"active\",\n            \"start_date\": \"2019-01-01\",\n            \"personal_email\": \"personal@email.com\",\n            \"email\": \"work@email.com\",\n            \"job_title\": {\n            \t\"id\": \"a4d5783d-a447-4269-8724-b710d0267aa4\"\n            }\n        }\n    ]\n}\n```\n\n**Create a profile with an address set**\n\n1. Retrieve the country_id of an  by making a GET request to the /countries endpoint (see the  section).\n2. The state_id is the 2-letter abbreviation for a state in the United States.\n3. In the body of the POST /profiles request, include the home field and set its value equal to an object containing a valid street address as well as the country_id and state_id.\n4. Note that every field in the home object (address1, address2, city, state_id, country_id, or zip) is validated against an actual address. If any field in the address object is invalid, a 422 Unprocessable Entity error will be returned.\n\n*Sample Request:*\n```json\n{\n    \"profiles\": [\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Smith\",\n            \"user_status\": \"active\",\n            \"start_date\": \"2019-01-01\",\n            \"personal_email\": \"personal@email.com\",\n            \"email\": \"work@email.com\",\n            \"home\": {\n                \"address1\": \"195 Broadway\",\n                \"address2\": \"\",\n                \"city\": \"New York\",\n                \"state_id\": \"NY\",\n                \"country_id\": \"US\",\n                \"zip\": \"10007\"\n            }\n        }\n    ]\n}\n```\n\n**Create a profile with a salary set**\n\n1. In the body of the POST /profiles request, include the salary field and set its value equal to an object containing a currency_type, a date representing the start date of the salary, and a yearly_amount.\n2. \"USD\" is currently the only valid value for currency_type.\n\n*Sample Request:*\n```json\n{\n    \"profiles\": [\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Smith\",\n            \"user_status\": \"active\",\n            \"start_date\": \"2019-01-01\",\n            \"personal_email\": \"personal@email.com\",\n            \"email\": \"work@email.com\",\n            \"salary\": {\n                \"currency_type\": \"USD\",\n                \"date\": \"2019-01-10\",\n                \"yearly_amount\": 100000\n            }\n        }\n    ]\n}\n```"
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Create_Profile'
        responses:
          '201':
            description: Created Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    profiles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Profile'
                    meta:
                      $ref: '#/components/schemas/Profile_Meta'
                    links:
                      $ref: '#/components/schemas/Profile_Links'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
                        groups:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group'
                        teams:
                          type: array
                          items:
                            $ref: '#/components/schemas/team'
        security:
          - Authorization: []
    /profiles/{id}:
      parameters:
        - name: id
          in: path
          description: id of the profile you want to view
          required: true
          schema:
            type: string
      get:
        operationId: GET_profiles-id
        summary: Get a Profile
        tags:
          - Profiles
        description: >-
          Returns same information about the profile as in the
          #endpoint:E2y2tKYabriCCzTiJ endpoint but isolated.


          Every client-created custom field (the token bearer has permission to
          see) will appear as key at the bottom of the profile object.


          As a note, the following fields will always be returned in the API
          response, regardless of user permissions:


          1. id

          2. email

          3. first_name

          4. last_name

          5. user_status

          6. updated_at

          7. created_at

          8. preferred_name

          9. full_name

          10. job_title



          These will NOT be exposed to the user in the UI if their permissions are
          set correctly.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    profiles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Profile'
                    meta:
                      $ref: '#/components/schemas/Profile_Meta'
                    links:
                      $ref: '#/components/schemas/Profile_Links'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
                        groups:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group'
                        teams:
                          type: array
                          items:
                            $ref: '#/components/schemas/team'
        security:
          - Authorization: []
      put:
        operationId: PUT_profiles-id
        summary: Update a Profile
        tags:
          - Profiles
        description: "Note: the only fields that need to be included in a PUT /profiles/{id} request are the ones that should be updated.\n\n**Update a profile with a new job title**\n\n1. Retrieve the `title` or `id` of a  #model:JcAXAf5CGXH22bS6Z by making a GET request to the /job_titles or /job_titles/{id} endpoint (see the #docTextSection:FwRLDxsBbevBbo8uz section).\n2. In the body of the PUT /profiles/{id} request, include the `job_title` field.\n3. The value of the `job_title` field should be set to an object containing the `title` (string) or `id` (guid) of an existing job title. Passing both values is also valid.\n\n_Sample Request:_\n```json\n{\n    \"profiles\": [\n        {\n            \"job_title\": {\n            \t\"id\": \"a4d5783d-a447-4269-8724-b710d0267aa4\"\n            }\n        }\n    ]\n}\n```\n\n**Update a profile with a new address**\n\n1. Retrieve the `country_id` of an #model:yq9tkBR24wuBhzizY by making a GET request to the /countries endpoint (see the #endpoint:ECuAqAqRDoaFMn9ZH section).\n2. The `state_id` is the 2-letter abbreviation for a state in the United States.\n3. In the body of the PUT /profiles/{id} request, include the `home` field and set its value equal to an object containing a valid street address as well as the `country_id` and `state_id`.\n4. Note that every field in the `home` object (`address1`, `address2`, `city`, `state_id`, `country_id`, or `zip`) is validated against an actual address. If any field in the address object is invalid, a 422 Unprocessable Entity error will be returned.\n\n_Sample Request:_\n```json\n{\n    \"profiles\": [\n        {\n            \"home\": {\n                \"address1\": \"195 Broadway\",\n                \"address2\": \"\",\n                \"city\": \"New York\",\n                \"state_id\": \"NY\",\n                \"country_id\": \"US\",\n                \"zip\": \"10007\"\n            }\n        }\n    ]\n}\n```\n\n**Update a profile with a new salary**\n\n1. In the body of the PUT /profiles/{id} request, include the `salary` field and set its value equal to an object containing a `currency_type`, a `date` representing the start date of the salary, and a `yearly_amount`.\n2. \"USD\" is currently the only valid value for `currency_type`.\n3. Note that the `date` is the start date of the new salary. When updating an employee's salary, the `date` value that's passed in must be at least 2 days after the `date` value of the preceding salary. This is because with each new salary, the previous salary is automatically end-dated with a date that must be at least 1 day after the start date of the previous salary. If a passed-in date is invalid, a 422 Unprocessable Entity error will be returned.\n\n_Sample Request:_\n```json\n{\n    \"profiles\": [\n        {\n            \"salary\": {\n                \"currency_type\": \"USD\",\n                \"date\": \"2019-01-10\",\n                \"yearly_amount\": 100000\n            }\n        }\n    ]\n}\n```"
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update_Profile'
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    profiles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Profile'
                    meta:
                      type: object
                      properties:
                        count:
                          type: integer
                        status:
                          type: integer
                    links:
                      type: object
                      items:
                        $ref: '#/components/schemas/Profile_Links'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
                        groups:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group'
                        teams:
                          type: array
                          items:
                            $ref: '#/components/schemas/team'
        security:
          - Authorization: []
    /profiles/me:
      get:
        operationId: GET_profiles-me
        summary: Get Current User's Profile
        tags:
          - Profiles
        description: >-
          Returns same information about the profile as in the
          #endpoint:E2y2tKYabriCCzTiJ endpoint but isolated, and about the current
          user only (the profile that owns the access token used to access the
          API).


          Every client-created custom field (the token bearer has permission to
          see) will appear as key at the bottom of the profile object.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    profiles:
                      type: array
                      items:
                        $ref: '#/components/schemas/Profile'
                    meta:
                      $ref: '#/components/schemas/Profile_Meta'
                    links:
                      $ref: '#/components/schemas/Profile_Links'
                    linked:
                      type: object
                      properties:
                        job_titles:
                          type: array
                          items:
                            $ref: '#/components/schemas/Job_Title'
                        files:
                          type: array
                          items:
                            $ref: '#/components/schemas/File'
                        groups:
                          type: array
                          items:
                            $ref: '#/components/schemas/Group'
                        teams:
                          type: array
                          items:
                            $ref: '#/components/schemas/team'
        security:
          - Authorization: []
    /reports/{id}:
      parameters:
        - name: id
          in: path
          description: >-
            <code>id</code> of the report from Namely; can be found at the end of
            the URL of the report on the web
          required: true
          schema:
            type: string
      get:
        operationId: GET_reports-id
        summary: Get a Report
        tags:
          - Reports
        description: >-
          This endpoint returns a JSON format version of a report created in
          Namely. These reports update instantly, so each new call to the API will
          provide the user with updated information.


          After information about the report itself, there is an array of objects
          that are the columns within the report. The position of the columns is
          important.


          After the columns is what is technically an array of arrays without any
          keys. Each "sub"-array represents a line in the report and is a list of
          values whose position on the list within each "sub"-array sequentially
          corresponds to the column. For example, if the second "column" is "last
          name", the second "value" in each "sub"-array is the value.


          The reports API does not technically have a limit to how many lines can
          be pulled through the API at once. However, we would suggest limiting it
          to around 200 lines. A user could likely pull more than that without any
          problems, but they will eventually run into a timeout. There is no hard
          limit, however.


          Do not have your integration rely on field 'labels' as they are
          dynamic.  Please use the field 'name' instead.
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    reports:
                      type: array
                      items:
                        $ref: '#/components/schemas/Report'
                    meta:
                      type: object
                    links:
                      type: object
                    linked:
                      type: object
        security:
          - Authorization: []
  tags:
    - name: Company Info
    - name: Company Resources
    - name: Groups & Teams
    - name: Groups
    - name: Teams
    - name: Home Feed
    - name: Events
    - name: Comments
    - name: Likes
    - name: Jobs Info
    - name: Job Tier
    - name: Job Title
    - name: Namely System Info
    - name: Countries
    - name: Notifications
    - name: Profile Fields
    - name: Profile Fields Sections
    - name: Profiles
    - name: Reports
  components:
    securitySchemes:
      Authorization:
        name: Authorization
        type: apiKey
        in: header
    schemas:
      Field:
        title: Field
        type: object
        properties:
          id:
            description: unique identifier of the profile field
            type: string
          name:
            description: >-
              immutable name of the profile field; auto created based on label if
              using UI to create profile field
            type: string
          label:
            description: label of the profile field; editable on UI and through API
            type: string
          type:
            description: >-
              immutable data type of the profile field; valid values include
              <code>text</code>, <code>image</code>, <code>referencehistory</code>
              (<code>job_title</code> only), <code>select</code>,
              <code>date</code>, <code>email</code>, <code>longtext</code>,
              <code>checkboxes</code>, <code>address</code>, <code>address</code>,
              <code>file</code>, <code>referenceselect</code>
              (<code>user_status</code> only), <code>salary</code>,
              <code>number</code>, <code>address</code>
            type: string
          default:
            description: N/A - no longer supported
            type: boolean
          deletable:
            description: <code>true</code> if the profile field is able to be deleted
            type: boolean
          valid_format_info:
            description: >-
              valid format information for passing data through the API for the
              profile field
            type: string
          block_index:
            description: >-
              refers to the profile field "block" in which the profile field is
              located (included in "linked"); sequentially corresponds based the
              position of the block title; top position is 0
            type: integer
          links:
            type: object
            properties:
              section:
                type: string
                description: >-
                  unique identifier of the #endpoint:66aqLXinWcyrR2aY2 in which
                  the profile field is located
      Subdivision:
        title: Subdivision
        type: object
        properties:
          id:
            type: string
            description: >-
              unique identifier of the subdivision unit (e.g. NJ); abbreviation of
              the name; used in the #model:yq9tkBR24wuBhzizY model
          name:
            type: string
            description: name of the subdivision unit (e.g. New Jersey)
      Home:
        title: Home
        type: object
        description: fields represent the entire home address
        properties:
          address1:
            type: string
            description: address line 1 of the home address
          address2:
            type: string
            description: address line 2 of the home address
          city:
            type: string
            description: city of the home address
          state_id:
            type: string
            description: >-
              state of the home address; for US, must be the 2-digit code; for
              other countries, refer to the #docTextSection:7izuT4kPbi3FngZbD
              endpoints
          country_id:
            type: string
            description: >-
              "US" for the US; must be the ISO Alpha-2 code; for other countries,
              refer to the #docTextSection:7izuT4kPbi3FngZbD endpoints or just use
              the ISO Alpha-2 code
          zip:
            type: string
            description: zip or postal code of the home address
      Link:
        title: Link
        type: object
        properties:
          type:
            type: string
      Report:
        title: Report
        type: object
        properties:
          id:
            type: string
            description: >-
              unique identifier of the report; identical to the <code>id</code> in
              the path parameters
          type:
            type: string
            description: describes the type of report (e.g. salary_history)
          columns:
            type: array
            items:
              $ref: '#/components/schemas/Column'
          content:
            type: array
            items:
              $ref: '#/components/schemas/Content'
          links:
            type: object
      File:
        title: File
        type: object
        properties:
          id:
            type: string
          filename:
            type: string
          mime_type:
            type: string
          original:
            type: string
          thumbs:
            type: array
            items:
              $ref: '#/components/schemas/Thumb'
      Like:
        title: Like
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the like
          href:
            type: string
            description: a link to the profile of "liker"
          full_name:
            type: string
            description: full name of the "liker" per his/her profile
          job_title:
            type: string
            description: label of the job title of the "liker" per his/her profile
          links:
            type: object
            properties:
              image:
                type: string
                description: unique identifier of the profile image of the "liker"
              thumbs:
                type: object
                description: multiple resolutions of the profile image
      Country:
        title: Country
        type: object
        properties:
          id:
            type: string
            description: >-
              unique identifier of the profile; 2-digit ISO code; used when
              passing home or office #model:yq9tkBR24wuBhzizY
          name:
            type: string
            description: name of the country
          subdivision_type:
            type: string
            description: name of the country's subdivision (e.g. State, Province)
          links:
            type: array
            items:
              type: object
              properties:
                subdivision:
                  type: array
                  items:
                    $ref: '#/components/schemas/Subdivision'
      Profile:
        title: Profile
        type: object
        properties:
          id:
            description: unique identifier of the profile
            type: string
          email:
            description: company email of the profile
            type: string
          first_name:
            description: first name of the profile
            type: string
          last_name:
            description: last name of the profile
            type: string
          user_status:
            description: >-
              user status of the profile; valid values in the API are
              <code>active</code>, <code>pending</code>, and <code>inactive</code>
            type: string
          updated_at:
            description: >-
              epoch time that the profile was updated; equal to
              <code>create_at</code> if never updated
            type: integer
          created_at:
            description: epoch time that the profile was created
            type: integer
          preferred_name:
            description: >-
              preferred name of the profile; <code>null</code> if never provided;
              blank if provided then deleted
            type: string
          image:
            $ref: '#/components/schemas/Image'
          full_name:
            description: combination of <code>first_name</code> and <code>last_name</code>
            type: string
          job_title:
            $ref: '#/components/schemas/Job_Title_Link'
          reports_to:
            description: >-
              information regarding the profile to whom the profile of this object
              reports
            type: array
            items:
              type: object
              properties:
                id:
                  description: >-
                    unique identifier of the profile to whom the profile of this
                    object reports; <code>no_guid</code> if null; cannot be
                    <code>null</code> if any other <code>reports_to</code> keys
                    provided
                  type: string
                first_name:
                  description: >-
                    first name of the profile to whom the profile of this object
                    reports; <code>Nobody</code> if null; cannot be
                    <code>null</code> if any other <code>reports_to</code> keys
                    provided
                  type: string
                last_name:
                  description: >-
                    last name of the profile to whom the profile of this object
                    reports; <code>Nobody</code> if null; cannot be
                    <code>null</code> if any other <code>reports_to</code> keys
                    provided
                  type: string
                email:
                  description: >-
                    company email of the profile to whom the profile of this
                    object reports; <code>None</code> if null; cannot be
                    <code>null</code> if any other <code>reports_to</code> keys
                    provided
                  type: string
          employee_type:
            description: >-
              employee type of the profile; valid values include <code>Full
              Time</code>, <code>Part Time</code>, <code>Intern</code>,
              <code>Contractor</code>, <code>Freelance</code>
            type: object
            properties:
              title:
                type: string
          access_role:
            description: returns the type of access_role assigned to the profile
            type: string
          ethnicity:
            description: >-
              self described ethnicity of the profile; <code>null</code> if never
              provided
            nullable: true
            type: string
          links:
            type: object
            properties:
              job_title:
                $ref: '#/components/schemas/Job_Title_Link'
              groups:
                type: array
                items:
                  $ref: '#/components/schemas/Group_Link'
              teams:
                type: array
                items:
                  $ref: '#/components/schemas/Team_Link'
              '':
                type: string
          middle_name:
            description: >-
              middle name of the profile; <code>null</code> if never provided;
              blank if provided then deleted
            type: string
          gender:
            description: >-
              gender of the profile; <code>null</code> if never provided; valid
              values include <code>Male</code> and <code>Female</code>
            type: string
          job_change_reason:
            description: >-
              job change reason of the profile; <code>null</code> if never
              provided; valid values include <code>New Hire</code>, <code>Salary
              Change</code>, <code>Promotion</code>, and <code>Transfer</code>
            type: string
          terminated_reason:
            description: >-
              terminated reason of the profile; <code>null</code> if never
              provided
            type: string
          start_date:
            description: start date of the profile; format <code>YYYY-MM-DD</code>
            type: string
          departure_date:
            description: >-
              departure date of the profile; format <code>YYYY-MM-DD</code>; blank
              if never provided or provided then deleted
            type: string
          employee_id:
            description: >-
              employee id of the profile; blank if never provided or provided then
              deleted
            type: string
          personal_email:
            description: >-
              employee id of the profile; blank if never provided or provided then
              deleted
            type: string
          dob:
            description: >-
              date of birth of the profile; format <code>YYYY-MM-DD</code>; blank
              if never provided or provided then deleted
            type: string
          ssn:
            description: ssn of the profile; blank if never provided or provided then deleted
            type: string
          marital_status:
            description: >-
              marital status of the profile; <code>null</code> if never provided;
              valid values include <code>Single</code>, <code>Married</code>,
              <code>Civil Partnership</code>, <code>Separated</code>, and
              <code>Divorced</code>
            type: string
          bio:
            description: >-
              bio of the profile; <code>null</code> if never provided; blank if
              provided then deleted
            type: string
          asset_management:
            description: >-
              list of assets on the profile; blank if never provided or provided
              then deleted; valid values include <code>Laptop</code>, <code>Cell
              Phone</code>, <code>Building Keys</code>, <code>Corporate
              Card</code>, and <code>Air Card</code>
            type: string
          laptop_asset_number:
            description: >-
              laptop asset number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          corporate_card_member:
            description: >-
              corporate card number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          key_tag_number:
            description: >-
              key tag number of the profile; <code>null</code> if never provided;
              blank if provided then deleted
            type: string
          linkedin_url:
            description: >-
              linkedin_url of the profile; <code>null</code> if never provided;
              blank if provided then deleted
            type: string
          office_main_number:
            description: >-
              office main number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          office_direct_dial:
            description: >-
              office direct dial number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          office_phone:
            description: >-
              office phone number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          office_fax:
            description: >-
              office fax number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          office_company_mobile:
            description: >-
              office company mobile phone number of the profile; <code>null</code>
              if never provided; blank if provided then deleted
            type: string
          home_phone:
            description: >-
              home phone number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          mobile_phone:
            description: >-
              mobile phone number of the profile; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          home:
            $ref: '#/components/schemas/Home'
          office:
            $ref: '#/components/schemas/Office'
          emergency_contact:
            description: >-
              name of the profile's emergency contact; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          emergency_contact_phone:
            description: >-
              phone number of the profile's emergency contact; <code>null</code>
              if never provided; blank if provided then deleted
            type: string
          resume:
            description: >-
              resume of the profile; <code>null</code> if never provided; blank if
              provided then deleted
            type: string
          current_job_description:
            description: >-
              current job description of of the profile; <code>null</code> if
              never provided; blank if provided then deleted
            type: string
          job_description:
            description: >-
              current job description of of the profile; <code>null</code> if
              never provided; blank if provided then deleted
            type: string
          salary:
            $ref: '#/components/schemas/Salary'
          healthcare:
            $ref: '#/components/schemas/Healthcare'
          healthcare_info:
            description: >-
              description of the profile's healthcare plan; <code>null</code> if
              never provided; blank if provided then deleted
            type: string
          dental:
            $ref: '#/components/schemas/Dental'
          dental_info:
            description: >-
              description of the profile's dental plan; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          vision_plan_info:
            description: >-
              description of the profile's vision plan; <code>null</code> if never
              provided; blank if provided then deleted
            type: string
          life_insurance_info:
            description: >-
              description of the profile's life insurance plan; <code>null</code>
              if never provided; blank if provided then deleted
            type: string
          namely_time_employee_role:
            description: only applies to companies using Namely Time
            type: string
          namely_time_manager_role:
            description: only applies to companies using Namely Time
            type: string
      Healthcare:
        title: Healthcare
        type: object
        properties:
          beneficiary:
            description: >-
              relationship of the profile's healthcare plan's beneficiary to the
              profile; valid values include <code>Employee Only</code>,
              <code>Employee/Child</code>, <code>Employee/Spouse</code>,
              <code>Family</code>, <code>Not Applicable</code>, and
              <code>Waive</code>; blank if never provided or provided then
              deleted; cannot be <code>null</code> if any other
              <code>healthcare</code> keys provided
            type: string
          amount:
            description: >-
              amount of the profile's healthcare plan; numbers only; cannot be
              <code>null</code> if any other <code>healthcare</code> keys provided
            type: string
          currency_type:
            description: >-
              currency type of the profile's healthcare plan amount; default
              <code>USD</code>
            type: string
      Content:
        title: Content
        type: array
        description: >-
          this is technically an array of arrays without any keys "sub"-arrays;
          each "sub"-array represents a line in the report, and is a list of
          values, whose position on the list within "sub"-array sequentially
          corresponds to the column; for example, if the second "column" is "last
          name", the second "value" in each "sub"-array is the value
        items:
          type: array
          items: {}
      Event:
        title: Event
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the event
          href:
            type: string
            description: a link to the event on the web
          type:
            type: string
            description: >-
              the type of event: <code>announcement</code> (posted by a profile)
              or <code>birthday</code>, <code>anniversary</code>,
              <code>recent_arrival</code> (auto-generated)
          time:
            type: integer
            description: epoch time that the event was created/generated
          ufc_offset:
            type: integer
            description: the hour difference between UTC and the main office of the company
          content:
            type: string
            description: >-
              content of the post, displayed in markdown; null for anything but
              type: <code>announcement</code>
          html_content:
            type: string
            description: >-
              content of the post, displayed in HTML; null for anything but type:
              <code>announcement</code>
          years_at_company:
            type: integer
            description: >-
              number of years related profile has been at the company; null for
              anything but: <code>anniversary</code>
          use_comments:
            type: boolean
            description: >-
              <code>true</code> if the company has commenting enabled on the home
              feed; same as in <code>meta</code>
          can_comment:
            type: boolean
            description: >-
              <code>true</code> if the token bearer has a role with permission to
              comment on events on the home feed (will be same value on all
              events)
          can_destroy:
            type: boolean
            description: >-
              <code>true</code> if the token bearer has a role with permission to
              delete the event; will always be <code>true</code> for one's own
              announcement
          links:
            type: object
            properties:
              profile:
                type: string
                description: >-
                  profile id of the profile related to the event; profile that
                  created the <code>announcement</code> or profile associated with
                  a <code>birthday</code>, <code>anniversary</code>, or
                  <code>recent_arrival
              comments:
                type: array
                description: >-
                  list of unique identifiers for each comment associated with the
                  event; 0 to many
                items:
                  type: string
              file:
                type: string
                description: >-
                  unique identifiers of a file associated with the event (photo,
                  document, etc.); zero to one; null for anything but type:
                  <code>announcement</code>
              appreciations:
                description: >-
                  <code>id</code> of any profiles "appreciated" in the content of
                  the event; all "mentioned" profiles in the content of an
                  appreciation announcement will also be listed here; zero to
                  many; null for anything but type: <code>announcement</code>;
                  null if event is not an appreciation
                items:
                  type: string
                oneOf:
                  - type: string
                  - type: array
                    items: {}
          can_like:
            type: boolean
            description: >-
              <code>true</code> if the token bearer has a role with permission to
              like events on the home feed (will be same value on all events)
          likes_count:
            type: integer
            description: total number of likes on event
          liked_by_current_profile:
            type: boolean
            description: <code>true</code> if the token bearer has liked this event
      Dental:
        title: Dental
        type: object
        properties:
          beneficiary:
            description: >-
              relationship of the profile's dental plan's beneficiary to the
              profile; valid values include <code>Employee Only</code>,
              <code>Employee/Child</code>, <code>Employee/Spouse</code>,
              <code>Family</code>, <code>Not Applicable</code>, and
              <code>Waive</code>; blank if never provided or provided then
              deleted; cannot be <code>null</code> if any other
              <code>dental</code> keys provided
            type: string
          amount:
            description: >-
              amount of the profile's dental plan; numbers only; cannot be
              <code>null</code> if any other <code>dental</code> keys provided
            type: string
          currency_type:
            description: >-
              currency type of the profile's dental plan amount; default
              <code>USD</code>
            type: string
      Resource:
        title: Resource
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the resource file
          title:
            type: string
            description: name/label of the resource file
          link:
            type: string
          file_name:
            type: string
            description: file name of the resource file
          file_format:
            type: string
          file_size:
            type: string
          file_url:
            type: string
          last_edited:
            type: string
          folder_id:
            type: integer
            description: >-
              <code>id</code> of the folder in which the resource file sits;
              <code>null</code> if not in a folder
      Address:
        title: Address
        type: object
        properties:
          address1:
            type: string
          address2:
            type: string
          city:
            type: string
          state_id:
            type: string
          zip:
            type: string
          state:
            type: string
          country:
            type: string
          country_id:
            type: string
          phone:
            type: string
      Linked:
        title: Linked
        type: object
        properties:
          job_titles:
            type: array
            items:
              $ref: '#/components/schemas/Job_Title'
          files:
            type: array
            items:
              $ref: '#/components/schemas/File'
          groups:
            type: array
            items:
              $ref: '#/components/schemas/Group'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/team'
      Office:
        title: Office
        type: object
        description: >-
          these fields represent the entire office address and are inherited from
          the "Office Location" group assigned to the profile
        properties:
          address1:
            type: string
            description: address line 1 of the office address
          address2:
            type: string
            description: address line 2 of the office address
          city:
            type: string
            description: city of the office address
          state_id:
            type: string
            description: >-
              state of the office address; for US, must be the 2-digit code; for
              other countries, refer to the #docTextSection:7izuT4kPbi3FngZbD
              endpoints
          country_id:
            type: string
            description: >-
              "US" for the US; must be the ISO Alpha-2 code; for other countries,
              refer to the #docTextSection:7izuT4kPbi3FngZbD endpoints or just use
              the ISO Alpha-2 code
          zip:
            type: string
            description: zip or postal code of the office address
          phone:
            type: string
            description: phone number associated with the office location
      Group:
        title: Group
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the group
          title:
            type: string
            description: name/label of the group
          type:
            type: string
            description: name of the group type to which the group belongs
          is_team:
            type: boolean
            description: true if the group is a team
          address:
            $ref: '#/components/schemas/Address'
          count:
            type: integer
            description: number of profiles associated with this group
          links:
            type: object
            properties:
              group_type:
                type: string
                description: group type to which the group belongs
      Column:
        title: Column
        type: array
        description: 'columns within the report; note: position of the columns is important'
        items:
          type: object
          properties:
            name:
              type: string
              description: immutable name of the report column
            type:
              type: string
              description: data type of the report column
            label:
              type: string
              description: name/label of the report column
      Comment:
        title: Comment
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the comment
          content:
            type: string
            description: content of the comment, displayed in markdown
          html_content:
            type: string
            description: content of the comment, displayed in HTML
          created_at:
            type: integer
            description: epoch time that the comment was created
          can_destroy:
            type: boolean
            description: >-
              <code>true</code> if the token bearer has a role with permission to
              delete the comment; will always be <code>true</code> for one's own
              comment
          links:
            type: object
            properties:
              profile:
                type: string
          utc_offset:
            type: integer
            description: the hour difference between UTC and the main office of the company
          likes_count:
            type: integer
            description: total number of likes on comment
          liked_by_current_profile:
            type: boolean
            description: <code>true</code> if the token bearer has liked this comment
      Image:
        title: Image
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the image
          filename:
            type: string
            description: image's file name
          mime_type:
            type: string
            description: image type
          original:
            type: string
            description: link of image with original resolution
          thumbs:
            $ref: '#/components/schemas/Thumb'
      Salary:
        title: Salary
        type: object
        properties:
          currency_type:
            description: >-
              currency of the profile's <strong>current</strong> salary;
              <code>null</code> if never provided or no <strong>current</strong>
              salary; cannot be <code>null</code> if any other salary keys
              provided
            type: string
          date:
            description: >-
              start date of the profile's <strong>current</strong> salary;
              <code>null</code> if never provided or no <strong>current</strong>
              salary; cannot be <code>null</code> if any other salary keys
              provided
            type: string
          guid:
            description: >-
              unique identifier of the profile's <strong>current</strong> salary;
              <code>null</code> if never provided or no <strong>current</strong>
              salary; cannot be <code>null</code> if any other salary keys
              provided
            type: string
          pay_group_id:
            description: >-
              unique identifier of the pay group associated with the profile's
              <strong>current</strong> salary; <code>null</code> if never provided
              or no <strong>current</strong> salary
            type: integer
          payroll_job_id:
            description: >-
              unique identifier of the payroll job associated with the profile's
              <strong>current</strong> salary; <code>null</code> if never provided
              or no <strong>current</strong> salary
            type: string
          rate:
            description: >-
              rate of the profile's <strong>current</strong> salary; valid values
              include <code>annually</code>, <code>weekly</code>,
              <code>biweekly</code>, <code>bimonthly</code>,
              <code>semimonthly</code>, <code>monthly</code>,
              <code>quarterly</code>, <code>semiannually</code>, and
              <code>thirteen_monthly</code>; <code>null</code> if never provided;
              blank if provided then deleted; cannot be <code>null</code> if any
              other salary keys provided
            type: string
          yearly_amount:
            description: >-
              annualized amount ("amount_raw" * # of pay periods based on the
              "rate") of the profile's <strong>current</strong> salary; all
              salaries are annualized; <code>null</code> if never provided; blank
              if provided then deleted; cannot be <code>null</code> if any other
              salary keys provided
            type: integer
          hourly:
            description: >-
              true if the salary is hourly, and false if yearly; cannot be
              <code>null</code> if any other salary keys provided. Known as
              is_hourly elsewhere in the app.
            type: boolean
          amount_raw:
            description: >-
              returns the amount as it was inputted on the UI; if yearly, will be
              the amount per pay period; if hourly, will be the hourly rate;
              cannot be <code>null</code> if any other salary keys provided
            type: string
          payroll_company:
            type: string
            description: >-
              The Payroll Company associated with this salary. Required if
              multiple Payroll Companies. "Company name" defaults to first Payroll
              Company.
          payroll_job:
            type: string
            description: >-
              Name of the Payroll Job for this Salary. Required if multiple
              Payroll Companies. Value of "Job name" will take first Payroll Job
              from specified Payroll Company.
      Folder:
        title: Folder
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the folder
          title:
            type: string
            description: name/label of the folder
          type:
            type: string
            default: Folders::DocumentFolder
            description: ''
          items_count:
            type: integer
            description: number of files within the folder
          position:
            type: integer
            description: position of the folder on the UI; 0 is the top position
      Meta:
        title: Meta
        type: object
        properties:
          count:
            type: integer
            description: number of total objects
          status:
            type: integer
            description: HTTP response
      Section:
        title: Section
        type: object
        properties:
          id:
            description: unique identifier of the profile field section
            type: string
          title:
            description: >-
              label of the profile field section; only editable on through the API
              via the #endpoint:eoL989Gmn6vnfSPbE</a> endpoint
            type: string
          block_titles:
            description: list of the "block" subsections within the section; can be empty
            type: array
            items:
              type: string
          links:
            type: object
            properties:
              fields:
                type: array
                description: >-
                  list of unique identifiers of each #endpoint:kxzfwAD7zrZ9CByGA
                  located within the profile field section
                items:
                  type: string
      Thumb:
        title: Thumb
        type: object
        description: different resolutions of the image
        properties:
          75x75:
            type: string
          75x75c:
            type: string
          150x150:
            type: string
          150x150c:
            type: string
          300x300:
            type: string
          300x300c:
            type: string
          450x450:
            type: string
          550x450c:
            type: string
          800x800:
            type: string
          800x800c:
            type: string
      countries:
        title: Countries
        type: object
        properties:
          id:
            type: string
            description: >-
              unique identifier of the profile; 2-digit ISO code; used when
              passing home or office <code>address</code>
          name:
            type: string
            description: name of the country
          subdivision_type:
            type: string
            description: name of the country's subdivision (e.g. State, Province)
      update-job-tier-payload:
        title: Update Job Tier Payload
        type: object
        properties:
          title:
            type: string
            description: '[new] name/label of job tier'
        required:
          - title
      update-job-title-payload:
        title: Update Job Title Payload
        type: object
        properties:
          title:
            type: string
            description: '[new] name/label of the job title you’re updating'
          parent:
            type: string
            description: >-
              id of the [new] job tier with which you want to associate the job
              title
        required:
          - title
          - parent
      team:
        title: Team
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the team
          name:
            type: string
            description: name/label of the team
          email:
            type: string
            description: >-
              email address (@namely.com) of the team; emails all members of the
              team
          updated_at:
            type: number
            description: epoch time of when the team was updated
          created_at:
            type: number
            description: epoch time of when the team was created
          links:
            type: object
            properties:
              team_categories:
                type: array
                description: >-
                  <code>id</code> of any team categories to which the team
                  belongs; 0 to many
                items:
                  type: string
      team-category:
        title: Team Category
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the team category
          title:
            type: string
            description: name/label of the team category
      group-singular:
        title: Group Singular
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the group
          title:
            type: string
            description: name/label of the group
          type:
            type: string
            description: <code>id</code> of the group type to which the group belongs
          address:
            $ref: '#/components/schemas/Address'
          links:
            type: object
            properties:
              group_type:
                type: string
                description: group type to which the group belongs
              profiles:
                type: array
                description: >-
                  array of profiles, identified by its <code>id</code>, that
                  belong to the group
                items:
                  type: string
          linked:
            type: array
            items:
              $ref: '#/components/schemas/Profile'
      notification:
        title: Time Off Notification
        type: object
        properties:
          id:
            type: integer
            description: unique identifier of the notification
          text:
            type: string
            description: content of the notification
            pattern: >-
              Your [time off type] request has been [approved, denied, edited] by
              [full name].
          type:
            type: string
            description: type of notification; type = pto.responded, pto.new, pto.deleted
            pattern: com.<<company>>.namely.notifications.<<type>>
          timestamp:
            description: epoch time that the event was created/generated
            type: integer
          seen:
            type: string
            description: >-
              <code>true</code> if the token bearer has viewed the list of
              notifications since this notification was created
          read:
            type: string
            description: >-
              <code>true</code> if the token bearer has clicked/tapped on the the
              notification
          links:
            type: object
            properties:
              time_off_request_id:
                type: string
                description: >-
                  unique identifier of the time off request mentioned in the
                  notification
              profile_id:
                type: string
                description: >-
                  id of the profile associated with the time off request mentioned
                  in the notification
              requester_id:
                type: string
                description: >-
                  id of the profile that requested the time off mentioned in the
                  notification; requester_id does not have to be the same as
                  profile_id if time off was requested on someone else's behalf
              responder_id:
                type: string
                description: >-
                  only present if the request has been responded to; id of the
                  profile that responded to the time off request mentioned in the
                  notification
      mention-notification:
        title: Mention/Appreciate Notification
        type: object
        properties:
          id:
            type: integer
            description: unique identifier of the notification
          text:
            type: string
            description: content of the notification
            pattern: >-
              [Full name] has [mentioned/appreciated] [you/team name] in a
              [post/comment].
          type:
            type: string
            description: always social.mentioned
            pattern: com.<<company>>.namely.notifications.<<type>>
            default: social.mentioned
          timestamp:
            description: epoch time that the event was created/generated
            type: integer
          seen:
            type: string
            description: >-
              <code>true</code> if the token bearer has viewed the list of
              notifications since this notification was created
          read:
            type: string
            description: >-
              <code>true</code> if the token bearer has clicked/tapped on the the
              notification
          links:
            type: object
            properties:
              profile_id:
                type: string
                description: id of the profile that created the post or comment
              comment_id:
                type: string
                description: >-
                  only present if the notification is in re: a comment; id of the
                  comment you were mentioned in (can't be appreciated in a
                  comment)
              event_id:
                type: string
                description: >-
                  id of the event you were mentioned/appreciated in or the event
                  that the comment you were mentioned in is associated with
              team_ids:
                description: >-
                  only present if team was mentioned (teams can't be appreciated);
                  id of any teams that were mentioned in the post/comment
                type: array
                items:
                  type: string
      generic-notification:
        title: Generic Notification
        type: object
        properties:
          id:
            type: integer
            description: unique identifier of the notification
          text:
            type: string
            description: content of the notification
          type:
            description: empty
            type: string
          timestamp:
            description: epoch time that the event was created/generated
            type: integer
          seen:
            type: string
            description: >-
              <code>true</code> if the token bearer has viewed the list of
              notifications since this notification was created
          read:
            type: string
            description: >-
              <code>true</code> if the token bearer has clicked/tapped on the the
              notification
          links:
            default: null
            type: string
      Team_Link:
        title: Team Link
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the team
          name:
            type: string
            description: name/label of the team
      Update_Folder:
        title: Update Folder
        required:
          - folders
        type: object
        properties:
          folders:
            type: array
            items:
              $ref: '#/components/schemas/Update_Folder_Payload'
      Events_Meta:
        title: Events Meta
        type: object
        properties:
          response:
            description: HTTP response
            type: integer
          use_comments:
            description: >-
              <code>true</code> if the company has commenting enabled on the home
              feed; same on the <code>event</code> object
            type: boolean
          use_updates:
            description: >-
              <code>true</code> if the token bearer has a role with permission to
              post announcements on the home feed
            type: boolean
          use_mentions:
            description: >-
              <code>true</code> if the company has mentioning enabled on the home
              feed
            type: boolean
          use_appreciations:
            description: >-
              <code>true</code> if the company has appreciations enabled on the
              home feed
            type: boolean
          use_likes:
            description: <code>true</code> if the company has likes enabled on the home feed
            type: boolean
          count:
            description: number of events returned on the page
            type: integer
      Create_Job_Tier:
        title: Create Job Tier
        required:
          - job_tiers
        type: object
        properties:
          job_tiers:
            type: array
            items:
              $ref: '#/components/schemas/Create_Job_Tier_Payload'
      Create_Like:
        title: Create Like
        required:
          - message
        type: object
        properties:
          message:
            type: array
            items:
              $ref: '#/components/schemas/Create_Like_Payload'
      Update_Resource_Payload:
        title: Update Resource Payload
        required:
          - title
          - description
        type: object
        properties:
          title:
            type: string
          description:
            type: string
      Update_Section_Payload:
        title: Update Section Payload
        type: object
        properties:
          title:
            type: string
            description: new name/label of the profile field section
        required:
          - title
      Create_Event:
        title: Create Event
        required:
          - events
        type: object
        properties:
          events:
            type: array
            items:
              $ref: '#/components/schemas/Create_Event_Payload'
      Create_Job_Tier_Payload:
        title: Create Job Tier Payload
        type: object
        properties:
          title:
            type: string
            description: name/label of the job tier you’re creating
        required:
          - title
      Meta_Group:
        title: Meta Group
        type: object
        properties:
          response:
            type: integer
            description: HTTP response
          count:
            type: integer
            description: number of total groups
          page_title:
            type: string
          page_copy:
            type: string
      Update_Section:
        title: Update Section
        required:
          - sections
        type: object
        properties:
          sections:
            type: array
            items:
              $ref: '#/components/schemas/Update_Section_Payload'
      Job_Title_Link:
        title: Job Title Link
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the job title
          title:
            type: string
            description: name/label of the job title
      Update_Resource:
        title: Update Resource
        required:
          - folder_id
          - resources
        type: object
        properties:
          folder_id:
            type: string
          resources:
            type: array
            items:
              $ref: '#/components/schemas/Update_Resource_Payload'
      Update_Profile_Field_Payload:
        title: Update Profile Field Payload
        type: object
        properties:
          label:
            description: >-
              [new] label of the profile field; cannot contain special characters;
              cannot contain word "id"; must be unique; immutable
              <code>name</code> will be auto-generated based on label
            type: string
          section:
            description: >-
              id of the [new] profile field section in which you want the place
              the field
            type: string
      Job_Tier:
        title: Job Tier
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the job tier
          numerical_id:
            type: string
          title:
            type: string
            default: ''
            description: name/label of the job tier
          links:
            type: object
            properties:
              job_titles:
                type: array
                description: id of the job titles associated with the job tier
                items:
                  type: string
      Linked_Profile:
        title: Linked Profile
        type: object
        properties:
          id:
            type: string
          email:
            type: string
          first_name:
            type: string
          last_name:
            type: string
          user_status:
            type: string
          updated_at:
            type: integer
          created_at:
            type: integer
          preferred_name:
            type: string
          image:
            type: object
            items:
              $ref: '#/components/schemas/Image'
          full_name:
            type: string
      Create_Section:
        title: Create Section
        required:
          - sections
        type: object
        properties:
          sections:
            type: array
            items:
              $ref: '#/components/schemas/Create_Section_Payload'
      Create_Like_Payload:
        title: Create Like Payload
        type: object
        properties:
          liked_by_current_profile:
            type: boolean
          likes_count:
            type: integer
      Job_Title:
        title: Job Title
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the job title
          parent_id:
            type: string
            description: >-
              id of the job tier associated with the job title (when creating a
              job title, the key is "parent")
          title:
            type: string
            description: name/label of the job title
          links:
            type: object
            properties:
              job_tier:
                type: string
                description: 'id of the job tier associated with the job title '
      Create_Job_Title_Payload:
        title: Create Job Title Payload
        type: object
        properties:
          title:
            type: string
            description: name/label of the job title you’re creating
          parent:
            type: string
            description: id of the job tier with which you want to associate the job title
        required:
          - title
          - parent
      Update_Profile_Payload:
        title: Update Profile Payload
        type: object
        description: ''
        properties:
          email:
            type: string
            description: company email of the profile
          first_name:
            type: string
          last_name:
            type: string
          user_status:
            type: string
            description: valid values are <code>active</code> or <code>pending</code>
          start_date:
            type: string
            description: valid format is YYYY-MM-DD
          personal_email:
            type: string
            description: REQUIRED if <code>user_status</code> = <code>pending</code>
          reports_to:
            type: string
            description: >-
              <code>id</code>of the profile you'd like to assign as the manager of
              the profile you're creating
          job_title:
            type: string
            description: >-
              in addition to passing the <code>id</code> of the <code>job
              title</code>, you can also pass the <code>title</code>, however, it
              is case-sensitive
      Update_Profile:
        title: Update Profile
        required:
          - profiles
        type: object
        properties:
          profiles:
            type: array
            items:
              $ref: '#/components/schemas/Update_Profile_Payload'
      Update_Group_Type_Payload:
        title: Update Group Type Payload
        type: object
        properties:
          title:
            type: string
            description: '[new] name/label of the group type you''re updating'
          x_groups_as_teams:
            type: boolean
            description: >-
              if <code>true</code>, will be included on the “Teams” page in Namely
              and eligible for @mention (additional permissions apply)
            default: 'false'
        required:
          - title
      Create_Resource:
        title: Create Resource
        required:
          - resources
        type: object
        properties:
          resources:
            type: array
            items:
              $ref: '#/components/schemas/Create_Resource_Payload'
      Create_Resource_Payload:
        title: Create Resource Payload
        required:
          - title
          - description
          - user_file_id
        type: object
        properties:
          title:
            type: string
          description:
            type: string
          user_file_id:
            type: string
      Create_Section_Payload:
        title: Create Section Payload
        type: object
        properties:
          title:
            type: string
            description: name/label of the profile field section
        required:
          - title
      Create_Profile_Payload:
        title: Create Profile Payload
        type: object
        description: ''
        properties:
          first_name:
            type: string
          last_name:
            type: string
          user_status:
            type: string
            description: >-
              Possible values are <code>active</code>, <code>inactive</code>, or
              <code>pending</code>
          start_date:
            type: string
            description: Format is YYYY-MM-DD
          email:
            type: string
            description: Company email address
          personal_email:
            type: string
            description: >-
              Personal email address; REQUIRED if <code>user_status</code> =
              <code>'pending'</code>
        required:
          - first_name
          - last_name
          - user_status
          - start_date
          - email
          - personal_email
      Create_Group_Type_Payload:
        title: Create Group Type Payload
        type: object
        properties:
          title:
            type: string
            description: name/label of the group type you're creating
          x_groups_as_teams:
            type: boolean
            description: >-
              if <code>true</code>, will be included on the “Teams” page in Namely
              and eligible for @mention (additional permissions apply)
            default: 'false'
        required:
          - title
        example:
          title: Duis incididunt
          x_groups_as_teams: true
      Create_Profile_Field_Payload:
        title: Create Profile Field Payload
        type: object
        properties:
          label:
            type: string
            description: >-
              label of the profile field; cannot contain special characters;
              cannot contain word "id"; must be unique; immutable
              <code>name</code> will be auto-generated based on label
          section:
            description: >-
              id of the profile field section in which you want the place the
              field
            type: string
          type:
            description: >-
              field type; valid values are <code>text</code>,
              <code>long_text</code>, <code>date</code>, <code>file</code>, and
              <code>number</code>
            type: string
        required:
          - label
          - section
          - type
      Update_Group_Type:
        title: Update Group Type
        required:
          - group_types
        type: object
        properties:
          group_types:
            type: array
            items:
              $ref: '#/components/schemas/Update_Group_Type_Payload'
      Update_Group:
        title: Update Group
        required:
          - groups
        type: object
        properties:
          groups:
            type: array
            items:
              $ref: '#/components/schemas/Update_Group_Payload'
      Group_Type:
        title: Group Type
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the group type
          field_name:
            type: string
            description: immutable, system generated field name for the group type
          title:
            type: string
            description: name/label of the group type
          deletable:
            type: boolean
            description: >-
              denotes whether or not the group can be deleted by someone with the
              appropriate permissions; <code>true</code> for all groups except
              Departments and Office Location.
          type:
            type: string
            description: >-
              returns one of three group types: office location, department, or
              custom; location and department are system delivered groups (will
              also not be deletable)
          x_groups_as_teams:
            type: boolean
            description: >-
              <code>true</code> if the group type has been chosen to display on
              the "Teams" page in Namely, eligible for @mention (additional
              permissions apply)
      Profile_Links:
        title: Profile Links
        type: object
        properties:
          profiles.job_title:
            $ref: '#/components/schemas/Link'
          profiles.image:
            $ref: '#/components/schemas/Link'
          profiles.groups:
            $ref: '#/components/schemas/Link'
          profiles.teams:
            $ref: '#/components/schemas/Link'
      Compensation_Benefits:
        title: Compensation & Benefits
        type: object
        properties:
          address1:
            type: string
          address2:
            type: string
          city:
            type: string
          country_id:
            type: string
          state_id:
            type: string
          zip:
            type: string
      Currency_Type:
        title: Currency Type
        type: object
        properties:
          iso:
            type: string
          name:
            type: string
          symbol:
            type: string
      Profile_Meta:
        title: Profile Meta
        type: object
        properties:
          count:
            type: integer
            description: number of profiles on the current page
          total_count:
            type: integer
            description: number of total profiles for the company
          status:
            type: integer
            description: HTTP response
      Update_Job_Tier:
        title: Update Job Tier
        type: object
        properties:
          job_tiers:
            type: array
            items:
              $ref: '#/components/schemas/Update_Job_Tier_Payload'
        required:
          - job_tiers
      Update_Folder_Payload:
        title: Update Folder Payload
        required:
          - title
        type: object
        properties:
          title:
            type: string
      Update_Job_Title:
        title: Update Job Title
        type: object
        properties:
          job_titles:
            type: array
            items:
              $ref: '#/components/schemas/update-job-title-payload'
        required:
          - job_titles
      Delete_Like_Payload:
        title: Delete Like Payload
        required:
          - liked_by_current_profile
          - likes_count
        type: object
        properties:
          liked_by_current_profile:
            type: boolean
          likes_count:
            type: integer
      Create_Folder:
        title: Create Folder
        required:
          - folders
        type: object
        properties:
          folders:
            type: array
            items:
              $ref: '#/components/schemas/Create_Folder_Payload'
      Create_Folder_Payload:
        title: Create Folder Payload
        required:
          - title
        type: object
        properties:
          title:
            type: string
      Create_Job_Title:
        title: Create Job Title
        type: object
        properties:
          job_titles:
            type: array
            items:
              $ref: '#/components/schemas/Create_Job_Title_Payload'
        required:
          - job_titles
      Create_Group_Type:
        title: Create Group Type
        required:
          - group_types
        type: object
        properties:
          group_types:
            type: array
            items:
              $ref: '#/components/schemas/Create_Group_Type_Payload'
      Update_Group_Payload:
        title: Update Group Payload
        type: object
        properties:
          address:
            $ref: '#/components/schemas/Address'
          group_type:
            type: string
            description: '[new] group type to which the group belongs'
          title:
            type: string
            description: '[new] name/label of the group'
        required:
          - address
          - group_type
          - title
      Create_Profile:
        title: Create Profile
        required:
          - profiles
        type: object
        properties:
          profiles:
            type: array
            items:
              $ref: '#/components/schemas/Create_Profile_Payload'
      Create_Event_Payload:
        title: Create Event Payload
        type: object
        properties:
          content:
            type: string
            description: >-
              the content of the announcement; formatted in markdown; to @mention
              a profile, use format:
              <code>[full_name](https://developers.namely.com/)</code> where {profile_id} is
              the <code>id</code> of the profile you want to mention
          is_appreciation:
            type: boolean
            description: if <code>true</code>, any @mentioned profile will be appreciated
            default: 'false'
          file_id:
            type: string
          email_all:
            type: boolean
            description: >-
              if <code>true</code>, will send an email to all active profiles per
              their company email address; will only be successful is token bearer
              has the corresponding permissions
            default: 'false'
        required:
          - content
      Group_Link:
        title: Group Link
        type: object
        properties:
          id:
            type: string
            description: unique identifier of the group
          name:
            type: string
            description: name/label of the group
      Update_Profile_Field:
        title: Update Profile Field
        required:
          - fields
        type: object
        properties:
          fields:
            type: array
            items:
              $ref: '#/components/schemas/Update_Profile_Field_Payload'
      Delete_Like:
        title: Delete Like
        required:
          - message
        type: object
        properties:
          message:
            type: array
            items:
              $ref: '#/components/schemas/Delete_Like_Payload'
      Create_Profile_Field:
        title: Create Profile Field
        required:
          - fields
        type: object
        properties:
          fields:
            type: array
            items:
              $ref: '#/components/schemas/Create_Profile_Field_Payload'
      Update_Job_Tier_Payload:
        title: Update Job Tier Payload
        type: object
        properties:
          title:
            type: string
            description: '[new] name/label of job tier'
        required:
          - title
      Comment_Meta:
        title: Comment Meta
        type: object
        properties:
          status:
            type: integer
            description: HTTP response
          page:
            type: integer
          use_at_mentions:
            type: boolean
            description: >-
              <code>true</code> if the company has mentioning enabled on the home
              feed
      Create_Comment_Payload:
        title: Create Comment Payload
        type: object
        properties:
          content:
            type: string
            description: >-
              the content of the comment; formatted in markdown; to @mention a
              profile, use format: <code>[full_name](https://developers.namely.com/)</code>
              where {profile_id} is the <code>id</code> of the profile you want to
              mention
        required:
          - content
      Create_Comment:
        title: Create Comment
        required:
          - comments
        type: object
        properties:
          comments:
            type: array
            items:
              $ref: '#/components/schemas/Create_Comment_Payload'
      Payroll_Company:
        title: Payroll Company
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          ein:
            type: string
          external_id:
            type: string
      Pay_Group:
        title: Pay Group
        type: object
        properties:
          id:
            type: string
          title:
            type: string
          pay_period_name:
            type: string
          pay_period_per_year:
            type: integer
          payroll_company_id:
            type: string
          read_only:
            type: boolean
      Payroll_Job:
        title: Payroll Job
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          code:
            type: string
          is_active:
            type: boolean
          is_default:
            type: boolean
          is_active_formatted:
            type: string
          payroll_company_id:
            type: string
      Create_Group:
        title: Create Group
        required:
          - groups
        type: object
        properties:
          groups:
            type: array
            items:
              $ref: '#/components/schemas/Create_Group_Payload'
      Create_Group_Payload:
        title: Create Group Payload
        type: object
        properties:
          title:
            type: string
          group_type:
            type: string
            description: ID of the group type to which this group belongs
          address:
            $ref: '#/components/schemas/Address'
        required:
          - title
          - group_type
        example:
          title: string (required))
          group_type: string (required)
          address:
            address1: string (optional)
            address2: string (optional)
            city: string (optional)
            state_id: string (optional)
            zip: string (optional)
            state: string (optional)
            country: string (optional)
            country_id: string (optional)
            phone: string (optional)
  servers:
    - url: https://{company}.namely.com/api/v1
      variables:
        company:
          default: your-company
konfigCliVersion: 1.38.61
