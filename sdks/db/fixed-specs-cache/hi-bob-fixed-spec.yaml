publishJson:
  company: HiBob
  serviceName: false
  sdkName: hi-bob-{language}-sdk
  clientName: HiBob
  metaDescription: >-
    HiBob is on a mission to transform how organizations operate in the modern
    world of work with its HR platform, "Bob." Leading the way for the future
    workplace, Bob offers resilient, agile technology that wraps all the
    complexities of HR processes into a game-changing, user-friendly tool that
    touches every employee across the business.


    Since late 2015, trusted and empowered "Bobbers" from around the world have
    brought their authentic selves to work, inspired to build our exceptional HR
    systems that will revolutionize the work experience for HR professionals,
    managers, and employees alike. Agile and adaptable, HiBob innovates through
    continuous learning loops to produce seismic cultural shifts for companies
    with dynamic, distributed workforces. Organizations using Bob are able to
    accelerate hiring, retain the best talent, and elevate employee engagement.
  apiStatusUrls: inherit
  homepage: hibob.com
  developerDocumentation: apidocs.hibob.com/reference/getting-started-1
  categories:
    - hr
    - human_resources
    - hr_metrics
    - hr_analytics
    - hr_dashboard
    - hr_reporting
    - hr_management_system
    - hr_softwares
    - hr_management
    - hr_platform
    - personnel_management
    - hris
    - software
    - hr_tech
    - recruitment_software_business_process_outsourcing
rawSpecString: |
  openapi: 3.0.1
  info:
    title: Bob API
    description: Access your employees data with the Bob API
    version: 1.0.0
  servers:
    - url: https://api.hibob.com/v1
      description: Production
    - url: https://api.sandbox.hibob.com/v1
      description: Sandbox
  paths:
    /people/search:
      post:
        tags:
          - People
        summary: Search for employees
        description: >-
          <b>Note:</b> Changes to this API are planned to take effect on May 31,
          2024.  Make sure to review all of the details in the <a
          href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
          pattern API Changes</a>  article in the help center.<br> <br>This API
          returns a list of requested employees with requested fields.  The data
          is filtered based on the requested fields and access level of the
          logged-in user.  Only viewable categories are returned.<br />
          <br><b>Note</b>: The values of the list fields represent the list item
          ID and not the list item value. To obtain the corresponding list item
          value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        requestBody:
          description: >-
            Read request content that allows you to select fields and other
            options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadEmployeesRequestReference'
          required: true
        responses:
          '200':
            description: Requested employees.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employees'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /people:
      get:
        tags:
          - People
        summary: Read all company employees
        deprecated: true
        description: >-
          <b>Note:</b> Deprecated at the end of March 2024. Please use
          <b>/people/search</b> ("Search for employees") instead. <br/><br/> This
          returns a list of all active employees. The data is filtered based on
          the access level of the logged-in user. Only viewable categories are
          returned.<br /><br> <b>Note</b>: The values of the list fields represent
          the list item ID and not the list item value. To obtain the
          corresponding list item value, use the HiBob metadata API to determine
          the field list name. Then, use the list item ID to locate the list item
          value. For more information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: showInactive
            in: query
            description: Should include inactive employees.
            schema:
              type: boolean
          - name: humanReadable
            in: query
            description: >-
              Whether to supply humanReadable values in JSON instead of
              machine-readable format (default).
            schema:
              type: boolean
              default: false
          - name: includeHumanReadable
            in: query
            description: >-
              Whether to include the additional "humanReadable" JSON node in the
              response.
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: All employees.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employees'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
      post:
        tags:
          - People
        summary: Create company employee.
        description: >-
          <b>Note:</b> Changes to this API are planned to take effect on May 31,
          2024.  Make sure to review all of the details in the <a
          href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
          pattern API Changes</a>  article in the help center.<br> <br>This
          creates a new employee record in Bob. You can include only the fields
          listed in the  [Fields Metadata
          API](https://apidocs.hibob.com/reference/get_company-people-fields). 
          <br /><br><b>Note</b>
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmployeeRequest'
          required: true
        responses:
          '200':
            description: Employee
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employee'
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /people/{identifier}:
      post:
        tags:
          - People
        summary: Read company employee fields by employee ID.
        description: >-
          <b>Note:</b> Changes to this API are planned to take effect on May 31,
          2024.  Make sure to review all of the details in the <a
          href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
          pattern API Changes</a>  article in the help center.<br> <br>Returns the
          employee's fields by the specified ID or email.<br /><br><b>Note</b>:
          The values of the list fields represent the list item ID and not the
          list item value. To obtain the corresponding list item value, use the
          HiBob metadata API to determine the field list name. Then, use the list
          item ID to locate the list item value. For more information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: identifier
            in: path
            description: employee ID or email
            required: true
            schema:
              type: string
              format: string
        requestBody:
          description: >-
            Read request content that allows you to select fields and other
            options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadSingleEmployeeRequestReference'
        responses:
          '200':
            description: Employee
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employees'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
      get:
        tags:
          - People
        summary: Read company employee by ID.
        deprecated: true
        description: >-
          <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST
          /people/{identifier}</b> ("Read company employee fields by ID.")
          instead. <br/><br/> Returns the employee by the specified ID.<br
          /><br><b>Note</b>: The values of the list fields represent the list item
          ID and not the list item value. To obtain the corresponding list item
          value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: identifier
            in: path
            description: employee id
            required: true
            schema:
              type: string
              format: string
          - name: fields
            in: query
            description: >-
              Whether to supply fields (paths) instead of empty list as a default
              in order  to not exceed data permitted.
            required: true
            schema:
              type: array
              items:
                type: string
          - name: humanReadable
            in: query
            description: >-
              Whether to supply humanReadable values in JSON instead of
              machine-readable (default) format.
            schema:
              type: boolean
              default: false
          - name: includeHumanReadable
            in: query
            description: >-
              Whether to include the additional "humanReadable" JSON node in the
              response.
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: Employee
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employees'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
      put:
        tags:
          - People
        summary: Update company employee.
        description: >-
          <b>Note:</b> Changes to this API are planned to take effect on May 31,
          2024.  Make sure to review all of the details in the <a
          href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
          pattern API Changes</a>  article in the help center.<br> <br>This
          updates the employee record in Bob. You can include only the fields
          listed in the  [Fields Metadata
          API](https://apidocs.hibob.com/reference/get_company-people-fields)
          where historical is equal to false.  <br /><br><b>Note</b>
        parameters:
          - name: identifier
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
              format: string
        requestBody:
          description: Use Fields Metadata API for available field definitions
          content:
            application/json:
              schema:
                type: object
                example:
                  firstName: Bob
                  personal:
                    birthDate: '2002-01-01'
                  about:
                    hobbies:
                      - music
                      - travel
                      - sport
          required: true
        responses:
          '200':
            description: Employee updated successfully.
            content: {}
          '304':
            description: If employee data not modified.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /employees/{identifier}/uninvite:
      post:
        tags:
          - People
        summary: Revoke access to Bob for an employee.
        parameters:
          - name: identifier
            in: path
            description: employee id
            required: true
            schema:
              type: string
              format: string
        responses:
          '200':
            description: Revoke access successful.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /employees/{identifier}/terminate:
      post:
        tags:
          - People
        summary: Terminate company employee.
        description: >-
          This changes the employee’s status to Terminated according to specified
          termination date. <br />
        parameters:
          - name: identifier
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
              format: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeTermination'
          required: true
        responses:
          '200':
            description: Termination entry added successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /onboarding/wizards:
      get:
        tags:
          - Onboarding
        summary: Get a summary of all onboarding wizards.
        description: >-
          Wizard info includes Wizard ID, name and description.<br /><b>Supported
          user types:</b> Service.
        responses:
          '200':
            description: Onboarding Wizards
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OnboardingWizards'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /employees/{employeeId}/invitations:
      post:
        tags:
          - People
        summary: Invite an employee with a welcome wizard ID.
        parameters:
          - name: employeeId
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
              format: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationByWizard'
          required: true
        responses:
          '200':
            description: Invitation submitted successfully.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /employees/{employeeId}/start-date:
      post:
        tags:
          - People
        summary: Set or update an employee's start date.
        parameters:
          - name: employeeId
            in: path
            description: employee ID
            required: true
            schema:
              type: string
              format: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartDateUpdate'
          required: true
        responses:
          '200':
            description: Start date was set successfully.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /company/reports:
      get:
        tags:
          - Reports
        summary: Read company reports
        description: >-
          Returns a list of all the defined company reports. The data is filtered
          based on the access level of the user. Only viewable categories are
          returned.<br />
        responses:
          '200':
            description: Company Reports
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Reports'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /company/reports/{reportId}/download:
      get:
        tags:
          - Reports
        summary: Download the report by ID
        description: >-
          Returns a report data file in the specified format.<br /><b>Supported
          user types:</b> Service.
        parameters:
          - name: reportId
            in: path
            description: Report ID
            required: true
            schema:
              type: number
              format: long
          - name: format
            in: query
            description: File format
            required: true
            schema:
              type: string
              enum:
                - csv
                - xlsx
                - json
          - name: includeInfo
            in: query
            description: Should include info.
            schema:
              type: boolean
              format: boolean
          - name: locale
            in: query
            description: >-
              Requested language for the report columns in the format of locale
              (e.g. fr-FR). If this is not provided, the user preferences locale
              is used.
            schema:
              type: string
              format: string
          - name: humanReadable
            in: query
            description: >-
              Optional field. Only enforced when <i><b>format</b></i> is
              <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values
              only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include
              the additional "humanReadable" JSON node in the response. <br>  <br>
              <b>REPLACE</b> - supply humanReadable values in JSON instead of
              machine-readable format. <br>
            required: false
            schema:
              type: string
        responses:
          '200':
            description: >-
              Includes the report name and execution date in the report file. By
              default this is set to True.
            content:
              application/json:
                schema:
                  type: string
                  format: binary
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /company/reports/{reportId}/download-async:
      get:
        tags:
          - Reports
        summary: Get the report download URL for polling
        description: >-
          Returns the polling URL report file of the specified format under
          "Location" in the response header.<br />
        parameters:
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: number
              format: long
          - name: format
            in: query
            description: File format
            required: true
            schema:
              type: string
              enum:
                - csv
                - xlsx
          - name: includeInfo
            in: query
            description: Should include info
            schema:
              type: boolean
              format: boolean
          - name: locale
            in: query
            description: >-
              Requested language for the report columns in the format of the
              locale (e.g. fr-FR). If this is not provided, the user preferences
              locale is used.
            schema:
              type: string
              format: string
          - name: humanReadable
            in: query
            description: >-
              Optional field. Only enforced when <i><b>format</b></i> is
              <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values
              only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include
              the additional "humanReadable" JSON node in the response. <br>  <br>
              <b>REPLACE</b> - supply humanReadable values in JSON instead of
              machine-readable format. <br>
            required: false
            schema:
              type: string
        responses:
          '200':
            description: Report URL under "Location" in the response header.
            content: {}
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /company/reports/download/{reportName}:
      get:
        tags:
          - Reports
        summary: Download report by file URL
        description: >-
          Returns the report data file when it is ready. If the file is not ready
          yet the response will be 204. It will then have to try again.<br />(This
          URL is the response of the previous API:
          https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
        parameters:
          - name: reportName
            in: path
            description: Report name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: >-
              Include the report name and execution date in the report file. This
              defaults to true.
            content:
              application/json:
                schema:
                  type: string
                  format: binary
          '204':
            description: The file is not yet ready, please try again.
            content: {}
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /profiles:
      get:
        tags:
          - People
        summary: Read the public profile section of all active employees.
        description: >-
          Returns the public section of all  active employees of the logged-in
          user company.<br /><br><b>Note</b>: The values of the list fields
          represent the list item ID and not the list item value. To obtain the
          corresponding list item value. Use the HiBob metadata API to determine
          the field list name. Then, use the list item ID to locate the list item
          value. For more information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: sortBy
            in: query
            description: Optional field name to sort by. This defaults to firstName.
            schema:
              type: string
              format: string
        responses:
          '200':
            description: Employee profiles
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmployeesProfiles'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /avatars:
      get:
        tags:
          - People
        summary: Read avatar for an employee email
        description: Returns the avatar image URL of the employee.
        parameters:
          - name: email
            in: query
            description: Employee email.
            schema:
              type: string
              format: string
        responses:
          '200':
            description: URL of the emloyee avatar.
            content: {}
        security:
          - Basic: []
    /avatars/{employeeId}:
      get:
        tags:
          - People
        summary: Read avatar for an employee ID.
        description: Returns the avatar image URL of the employee.
        parameters:
          - name: employeeId
            in: path
            description: employee id
            required: true
            schema:
              type: string
              format: string
        responses:
          '200':
            description: URL of the emloyee avatar.
            content: {}
        security:
          - Basic: []
      put:
        tags:
          - People
        summary: Upload employee's avatar by image url
        description: >-
          Upload an employee's Avatar by providing a URL to the image to
          upload.<br />
        parameters:
          - name: employeeId
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAvatar'
          required: true
        responses:
          '200':
            description: Avatar Uploaded successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /my/avatar:
      get:
        tags:
          - People
        summary: Read avatar for logged-in user
        deprecated: true
        description: >-
          Returns the avatar image URL of the logged-in user.<b>Supported user
          types:</b> Employee.
        responses:
          '200':
            description: URL of logged-in user avatar
            content: {}
        security:
          - Bearer: []
    /tasks:
      get:
        tags:
          - Tasks
        summary: Read all open tasks.
        responses:
          '200':
            description: All open tasks for this company.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tasks'
        security:
          - Basic: []
    /my/tasks:
      get:
        tags:
          - Tasks
        summary: Read my tasks
        deprecated: true
        description: <b>Supported user types:</b> Employee.
        responses:
          '200':
            description: The logged-in user's tasks.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tasks'
        security:
          - Bearer: []
    /tasks/people/{id}:
      get:
        tags:
          - Tasks
        summary: 'Read tasks of a specific employee '
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
              format: string
          - name: task_status
            in: query
            description: >-
              filter tasks by open / closed status. Not sending task_status will
              return all tasks.
            schema:
              type: string
              enum:
                - open
                - closed
        responses:
          '200':
            description: All of a specific employee's open tasks.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tasks'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /tasks/{taskId}/complete:
      post:
        tags:
          - Tasks
        summary: Mark a task as complete
        parameters:
          - name: taskId
            in: path
            description: task id
            required: true
            schema:
              type: string
              format: string
        responses:
          '200':
            description: Marks a task as complete.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tasks'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /people/{id}/email:
      put:
        tags:
          - People
        summary: Update an employee's email address.
        description: >-
          Change an employee's email address. If you cannot change the self email
          an invitation will be sent to the new address to verify the email if the
          employee is invited/active.<br />
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeEmail'
          required: true
        responses:
          '200':
            description: Invitation sent successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /company/named-lists:
      get:
        tags:
          - Metadata
        summary: Get all company lists
        parameters:
          - name: includeArchived
            in: query
            description: Whether to include archived items in the response.
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Lists'
        security:
          - Basic: []
    /company/named-lists/{listName}:
      get:
        tags:
          - Metadata
        summary: Get a specific company list by name.
        parameters:
          - name: listName
            in: path
            description: The internal name of the list.
            required: true
            schema:
              type: string
          - name: includeArchived
            in: query
            description: Whether to include archived items in the response.
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: >-
              Successful response. Please note that the item ID may be textual or
              numeric depending on the list type.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/List'
          '404':
            description: If the list was not found.
            content: {}
        security:
          - Basic: []
      post:
        tags:
          - Metadata
        summary: Add a new item to an existing list.
        parameters:
          - name: listName
            in: path
            description: The internal name of the list.
            required: true
            schema:
              type: string
        requestBody:
          description: >-
            The <b>parentId</b> attribute is optional and only applies to
            hierarchy lists. When <b>parentId</b> is specified, the newly created
            list item will be placed under the specific hierarchy parent node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewListItem'
          required: true
        responses:
          '200':
            description: >-
              A new item is created. Please note that the ID of the newly created
              item may be textual or numeric depending on the list type.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FlatListItemId'
          '404':
            description: If the list was not found.
            content: {}
          '409':
            description: If the added item already exists
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /company/named-lists/{listName}/{itemId}:
      put:
        tags:
          - Metadata
        summary: Update an existing item from a list.
        parameters:
          - name: listName
            in: path
            description: The internal name of the list.
            required: true
            schema:
              type: string
          - name: itemId
            in: path
            description: The ID of the list item.
            required: true
            schema:
              type: string
        requestBody:
          description: >-
            You need to provide at least one of: <b>name</b> or <b>parentId</b>.
            Providing a name will rename the list item value. Providing the parent
            ID will move the hierarchy list item (together with its children)
            under the indicated parent node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateListItemRequest'
          required: true
        responses:
          '200':
            description: List item was updated successfully.
            content: {}
          '404':
            description: If the list or item was not found.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
      delete:
        tags:
          - Metadata
        summary: Delete an item from an existing list.
        parameters:
          - name: listName
            in: path
            description: The internal name of the list.
            required: true
            schema:
              type: string
          - name: itemId
            in: path
            description: The ID of the list item.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: The list item was deleted successfully.
            content: {}
          '404':
            description: If the list or item was not found
            content: {}
        security:
          - Basic: []
    /company/people/fields:
      get:
        tags:
          - Metadata
        summary: Get all company fields.
        responses:
          '200':
            description: Successful response.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Fields'
        security:
          - Basic: []
      post:
        tags:
          - Metadata
        summary: Create a new field.
        requestBody:
          description: The field to be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFieldRequest'
          required: true
        responses:
          '200':
            description: >-
              The new field was successfully created. The ID of the field is
              returned.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FieldId'
          '400':
            description: >-
              If the category of the field is root, or historical is set to true,
              but the category doesn't allow it, or if the field type is not
              supported.
            content: {}
          '404':
            description: If the category of the field doesn't exist
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /company/people/fields/{fieldId}:
      put:
        tags:
          - Metadata
        summary: Update an existing field
        parameters:
          - name: fieldId
            in: path
            description: The ID of the field.
            required: true
            schema:
              type: string
        requestBody:
          description: The new name and/or description of the updated field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFieldRequest'
          required: true
        responses:
          '200':
            description: The field was updated successfully.
            content: {}
          '404':
            description: If the field doesn't exist.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
      delete:
        tags:
          - Metadata
        summary: Delete an existing field.
        parameters:
          - name: fieldId
            in: path
            description: The ID of the field.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: The field was deleted successfully.
            content: {}
          '400':
            description: If the field is a Bob default field.
            content: {}
          '404':
            description: If the field doesn't exist
            content: {}
        security:
          - Basic: []
    /timeoff/employees/{id}/requests:
      post:
        tags:
          - Time off
        summary: Submit a new time off request.
        description: Submits a new timeoff request.<br />
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTimeoffRequest'
          required: true
        responses:
          '200':
            description: Successfully submitted
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /timeoff/employees/{id}/diffHours/requests:
      post:
        tags:
          - Time off
        summary: Submit a new time off request of different hours per day.
        description: >-
          Submits a new timeoff request of different hours per day.<br
          /><b>Supported user types:</b> Employee, Service.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTimeoffRequestDiffHours'
          required: true
        responses:
          '200':
            description: Successfully submitted
            content: {}
        security:
          - Basic: []
          - Bearer: []
        x-codegen-request-body-name: body
    /timeoff/employees/{id}/requests/{requestId}:
      get:
        tags:
          - Time off
        summary: Get the details of an existing timeoff request.
        description: Supplies detailed info about an existing time off request.<br />
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
          - name: requestId
            in: path
            description: request id
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeoffRequest'
          '404':
            description: >-
              A request with the specified ID is not found for the specified
              employee.
            content: {}
        security:
          - Basic: []
      delete:
        tags:
          - Time off
        summary: Cancel an existing timeoff request
        description: Cancels an existing time off request.<br />
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: requestId
            in: path
            description: Request ID.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Successfully canceled
            content: {}
        security:
          - Basic: []
    /timeoff/requests/changes:
      get:
        tags:
          - Time off
        summary: Get all new/deleted time off requests since the specified date.
        description: >-
          Returns the list of time off requests that are pending, approved or
          canceled since the specified date.<br />
        parameters:
          - name: since
            in: query
            description: >-
              Timestamp starting from which to return the changes. Should be in
              ISO-8601 format, e.g. 2050-04-05T14:30:24.345Z or
              2050-04-05T12:30-02:00.
            required: true
            schema:
              type: string
              format: date
          - name: includePending
            in: query
            description: >-
              Optional parameter. Indicates whether to include pending requests in
              the results.
            required: false
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: List of changes
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeoffChanges'
        security:
          - Basic: []
    /timeoff/whosout:
      get:
        tags:
          - Time off
        summary: Read a list of who's out of the office.
        description: >-
          Returns time off information for a given date range.<br /><b>Supported
          user types:</b> Service.
        parameters:
          - name: from
            in: query
            description: Start period date
            required: true
            schema:
              type: string
              format: date
          - name: to
            in: query
            description: End period date
            required: true
            schema:
              type: string
              format: date
          - name: includeHourly
            in: query
            description: Include Hourly Requests
            schema:
              type: boolean
              default: false
          - name: includePrivate
            in: query
            description: >-
              Show the policy type's name instead of the policy's custom public
              name if the user has permission to view it, and the policy's custom
              public name exists.
            schema:
              type: boolean
              default: false
          - name: includePending
            in: query
            description: Include Pending Requests
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: >-
              Time off requests as seen by the logged in user for a given date
              range.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Requests'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /timeoff/outtoday:
      get:
        tags:
          - Time off
        summary: Read a list of who's out of the office today or on the specified date.
        description: >-
          Returns the list of people that have a time off request today or on the
          specified date.<br />
        parameters:
          - name: today
            in: query
            description: >-
              Date to report out of the office. If not specified, the date at UTC
              at the time of the request is used.
            schema:
              type: string
              format: date
          - name: includeHourly
            in: query
            description: Include Hourly Requests
            schema:
              type: boolean
              default: false
          - name: includePrivate
            in: query
            description: >-
              Show the policy type's name instead of the policy's custom public
              name if the user has permission to view it, and the policy's custom
              public name exists.
            schema:
              type: boolean
              default: false
          - name: siteId
            in: query
            description: The employee's site ID
            schema:
              type: integer
        responses:
          '200':
            description: >-
              The list of people who have taken time off, as seen by the logged in
              user.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OutTodays'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /timeoff/policy-types/{policyType}/reason-codes:
      get:
        tags:
          - Time off
        summary: Get Policy type reason codes
        description: Get list of reason codes for a given policy type.<br />
        parameters:
          - name: policyType
            in: path
            description: Policy Type name.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of reason codes.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReasonCodes'
          '404':
            description: A policy type with the specified name was not found.
            content: {}
        security:
          - Basic: []
      post:
        tags:
          - Time off
        summary: Add a list of reason codes for a given policy type.
        description: >-
          Add a list of reason codes for a given policy type.<br /><b>Supported
          user types:</b> Service.
        parameters:
          - name: policyType
            in: path
            description: Policy Type name
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasonCodesNames'
          required: true
        responses:
          '200':
            description: Submitted successfully.
            content: {}
          '404':
            description: A policy type with the specified name was not found.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /timeoff/policy-types/{policyType}:
      get:
        tags:
          - Time off
        summary: Get Policy type details
        description: Get details about a given policy type.<br />
        parameters:
          - name: policyType
            in: path
            description: Policy Type name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Policy type
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PolicyType'
          '404':
            description: A policy type with the specified name was not found.
            content: {}
        security:
          - Basic: []
    /timeoff/policy-types:
      get:
        tags:
          - Time off
        summary: Get all policy types names.
        description: Get a list of all policy type names.<br />
        responses:
          '200':
            description: List of policy types names.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PolicyTypes'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /timeoff/policies:
      get:
        tags:
          - Time off
        summary: Get Policy details.
        description: Get details about a given policy.<br />
        parameters:
          - name: policyName
            in: query
            description: Policy name.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Policy
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Policy'
          '404':
            description: A policy with the specified name was not found.
            content: {}
        security:
          - Basic: []
    /timeoff/policies/names:
      get:
        tags:
          - Time off
        summary: Get a list of policy names for a given policy type.
        description: Get a list of policy names for the user's defined policy type.<br />
        parameters:
          - name: policyTypeName
            in: query
            description: Policy type name.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: A list of policy names.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PolicyNames'
        security:
          - Basic: []
    /timeoff/employees/{id}/balance:
      get:
        tags:
          - Time off
        summary: Get the balance for a given employee
        description: >-
          Retrieve the balance for a given employee, for a given policy type, as
          of a given date.<br />
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: policyType
            in: query
            description: Policy type name.
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Point in time.
            required: true
            schema:
              type: string
              format: date
        responses:
          '200':
            description: Balance result.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BalanceResult'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /timeoff/employees/{id}/adjustments:
      post:
        tags:
          - Time off
        summary: Create a balance adjustment.
        description: >-
          Create a balance adjustment for a given employee for a given effective
          date.<br />
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustmentRequest'
          required: true
        responses:
          '200':
            description: Success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /attendance/import/{importMethod}:
      post:
        tags:
          - Attendance
        summary: Import attendance data
        parameters:
          - name: importMethod
            in: path
            description: >-
              Indicates if the provided data should be processed via an
              aggregation engine or immediately. <ul>Aggregate - will add the logs
              to a temporary location, and an aggregation job will process the
              data asynchronously.</ul><ul>Immediate - will insert the records
              as-is.</ul>
            required: true
            schema:
              type: string
              enum:
                - aggregate
                - immediate
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportAttendanceData'
          required: true
        responses:
          '200':
            description: Records imported
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ImportAttendanceResponse'
          '400':
            description: Bad request, see error description.
            content: {}
          '403':
            description: >-
              Forbidden. Authorization is implemented using a service user with
              attendance management permissions.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
    /payroll/history:
      get:
        tags:
          - Payroll
        summary: Read payroll history.
        parameters:
          - name: department
            in: query
            description: filter payroll for specific department.
            schema:
              type: string
          - name: showInactive
            in: query
            description: Whether to include inactive employees in the response.
            schema:
              type: boolean
              format: boolean
        responses:
          '200':
            description: Payroll data.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Employees'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/folders/metadata:
      get:
        tags:
          - Documents
        summary: Get folders metadata
        responses:
          '200':
            description: success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: document
    /docs/people/{id}/shared:
      post:
        tags:
          - Documents
        summary: File Upload via URL to an Employee Shared Folder
        description: >-
          With this endpoint, you can upload a file from a specified URL directly
          into the employee's shared folder in Bob. The request must specify the
          Employee ID. The file is uploaded using its URL in the request. Don't
          forget to make sure the Service User you're using has the right
          permissions.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Document to upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocument'
          required: true
        responses:
          '200':
            description: Upload success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: document
    /docs/people/{id}/confidential:
      post:
        tags:
          - Documents
        summary: File Upload via URL to an Employee Confidential Folder
        description: >-
          With this endpoint, you can upload a file from a specified URL directly
          into the employee's confidential folder in Bob. The request must specify
          the Employee ID. The file is uploaded using its URL in the request.
          Don't forget to make sure the Service User you're using has the right
          permissions.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Document to upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocument'
          required: true
        responses:
          '200':
            description: Upload success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: document
    /docs/people/{id}/custom/{folderId}:
      post:
        tags:
          - Documents
        summary: File Upload via URL to an Employee Custom Folder
        description: >-
          With this endpoint, you can upload a file from a specified URL directly
          into a specific employee's custom folder in Bob. The request must
          specify the Employee ID and Folder ID where the file will be stored. The
          file is uploaded using its URL in the request. Don't forget to make sure
          the Service User you're using has the right permissions.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: folderId
            in: path
            description: Folder ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Document to upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocument'
          required: true
        responses:
          '200':
            description: Upload success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: document
    /docs/people/{id}/shared/upload:
      post:
        tags:
          - Documents
        summary: Direct File Upload to an Employee Shared Folder
        description: >-
          This endpoint is designed to upload a file to the employee's shared
          folder in Bob. The request must specify the Employee ID and the file to
          be uploaded is included in the request. Don't forget to make sure the
          Service User you're using has the right permissions.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                required:
                  - file
                properties:
                  file:
                    type: string
                    description: The file to upload.
                    format: binary
          required: true
        responses:
          '200':
            description: Uploaded document ID.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}/confidential/upload:
      post:
        tags:
          - Documents
        summary: Direct File Upload to an Employee Confidential Folder
        description: >-
          This endpoint is designed to upload a file to the employee's
          confidential folder in Bob. The request must specify the Employee ID and
          the file to be uploaded is included in the request. Don't forget to make
          sure the Service User you're using has the right permissions.
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                required:
                  - file
                properties:
                  file:
                    type: string
                    description: The file to upload.
                    format: binary
          required: true
        responses:
          '200':
            description: Uploaded document ID.
            content: {}
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}/folders/{folderId}/upload:
      post:
        tags:
          - Documents
        summary: Direct File Upload to an Employee Custom Folder
        description: >-
          This endpoint is designed to upload a file to a specific employee's
          custom folder in Bob. The request must specify the Employee ID and
          Folder ID where the file will be stored, and the file to be uploaded is
          included in the request. Don't forget to make sure the Service User
          you're using has the right permissions.
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
          - name: folderId
            in: path
            description: folder id
            required: true
            schema:
              type: string
        requestBody:
          content:
            multipart/form-data:
              schema:
                required:
                  - file
                properties:
                  file:
                    type: string
                    description: The file to upload.
                    format: binary
          required: true
        responses:
          '200':
            description: Uploaded document ID.
            content: {}
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}/shared/{docId}:
      delete:
        tags:
          - Documents
        summary: Delete a File from an Employee Shared Folder
        description: >-
          This endpoint lets you delete a file from an employee's shared folder in
          Bob. You need the Employee ID and the Document ID to remove a file.
          Don't forget to make sure the Service User you're using has the right
          permissions to delete folders.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: docId
            in: path
            description: Document ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Delete success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}/confidential/{docId}:
      delete:
        tags:
          - Documents
        summary: Delete a File from an Employee Confidential Folder
        description: >-
          This endpoint lets you delete a file from an employee's confidential
          folder in Bob. You need the Employee ID and the Document ID to remove a
          file. Don't forget to make sure the Service User you're using has the
          right permissions to delete folders.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: docId
            in: path
            description: Document ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Delete success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}/folders/{folderId}/{docId}:
      delete:
        tags:
          - Documents
        summary: Delete a File from an Employee Custom Folder
        description: >-
          This endpoint lets you delete a file from an employee's custom folder in
          Bob. You need the Employee ID, the Folder ID, and the Document ID to
          remove a file. Don't forget to make sure the Service User you're using
          has the right permissions to delete folders.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: docId
            in: path
            description: Document ID.
            required: true
            schema:
              type: string
          - name: folderId
            in: path
            description: Folder ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Delete success.
            content: {}
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /docs/people/{id}:
      get:
        tags:
          - Documents
        summary: Download employee's documents
        description: Returns a list of documents and download links.<br />
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: A list of the documents' names and download links.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmployeeDocumentResponse'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /hiring/job-ads/search:
      post:
        tags:
          - Hiring
        summary: >-
          Beta | Get a list of all active job ads created by promoting a job
          opening via a Career page.
        description: >-
          Returns the list of all active job ads. ** This endpoint is currently in
          beta and may undergo changes. ** <br />
        parameters:
          - name: preferredLanguage
            in: query
            description: >-
              Preferred language code for the language results will be returned in
              if available, otherwise language specified on the job ad will be
              used.
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAdRequest'
          required: true
        responses:
          '200':
            description: The list of job ads.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobAds'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /hiring/job-ads/{id}:
      get:
        tags:
          - Hiring
        summary: Beta | Get the details of the job ad.
        description: >-
          Returns the details of the job ad. ** This endpoint is currently in beta
          and may undergo changes. ** <br />
        parameters:
          - name: id
            in: path
            description: Job Ad ID.
            schema:
              type: string
            required: true
          - name: preferredLanguage
            in: query
            description: >-
              Preferred language code for the language results will be returned in
              if available, otherwise language specified on the job ad will be
              used.
            schema:
              type: string
        responses:
          '200':
            description: The details of job ad.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobAd'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /people/{id}/work:
      get:
        tags:
          - People
          - Tables
        summary: List employee's work history
        description: >-
          Returns a list of work history entries for a given employee.<br
          /><br><b>Note</b>: The values of the list fields represent the list item
          ID and not the list item value. To obtain the corresponding list item
          value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of work history entries.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WorkEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
        summary: Creates a new work entry for a given employee.
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: >-
            Work entry to add. This must not conflict with another entry on the
            same effective date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkEntry'
          required: true
        responses:
          '200':
            description: Entry created successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/work/{entry_id}:
      put:
        tags:
          - People
          - Tables
        summary: Updates a work entry from employee's work history
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to update.
            required: true
            schema:
              type: integer
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkEntry'
          required: true
        responses:
          '200':
            description: Entry updated successfully.
            content: {}
          '404':
            description: Requested entry not found. Nothing was changed
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
      delete:
        tags:
          - People
          - Tables
        summary: Deletes a work entry from a given employee's work history.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully
            content: {}
        security:
          - Basic: []
    /people/{id}/employment:
      get:
        tags:
          - People
          - Tables
        summary: List employee's employment history.
        description: >-
          <b>Note:</b> Changes to this API are planned to take effect on May 31,
          2024.  Make sure to review all of the details in the <a
          href='https://help.hibob.com/hc/en-us/articles/19726260483601'>Working
          pattern API Changes</a>  article in the help center.<br> <br>Returns a
          list of employment history entries for a given employee.<br
          /><br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of employment history entries.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmploymentEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
        summary: Creates a new employment entry for a given employee.
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: employee id
            required: true
            schema:
              type: string
        requestBody:
          description: >-
            Employment entry to add. This must not conflict with another entry on
            the same effective date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentEntry'
          required: true
        responses:
          '200':
            description: Entry created successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/employment/{entry_id}:
      put:
        tags:
          - People
          - Tables
        summary: Updates an employment entry from a given employee's employment history.
        description: >-
          <br><b>Note</b>: The values of the list fields represent the list item
          ID and not the list item value. To obtain the corresponding list item
          value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to update.
            required: true
            schema:
              type: integer
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentEntry'
          required: true
        responses:
          '200':
            description: Entry updated successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
      delete:
        tags:
          - People
          - Tables
        summary: Deletes an employment entry from a given employee's employment history.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to delete.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully.
            content: {}
        security:
          - Basic: []
    /people/{id}/lifecycle:
      get:
        tags:
          - People
          - Tables
        summary: List employee's life-cycle status history.
        description: >-
          Returns a list of life-cycle history entries for a given employee.<br
          /><br><br><b>Note</b>: TThe values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of life-cycle history entries.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LifeCycleEntries'
        security:
          - Basic: []
    /people/{id}/salaries:
      get:
        tags:
          - People
          - Tables
          - Payroll
        summary: List employee's salary history.
        description: >-
          Returns a list of salary history entries for a given employee.<br
          /><br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of salary entries.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SalaryEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
          - Payroll
        summary: Creates a new salary entry for a given employee.
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: >-
            Salary entry to add. This must not conflict with another entry on the
            same effective date.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalaryEntry'
          required: true
        responses:
          '200':
            description: Entry added successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/salaries/{entry_id}:
      delete:
        tags:
          - People
          - Tables
          - Payroll
        summary: Deletes a salary entry from the employee's list.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to delete.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully.
            content: {}
        security:
          - Basic: []
    /people/{id}/equities:
      get:
        tags:
          - People
          - Tables
          - Payroll
        summary: List the employee's equity grants.
        description: >-
          Returns a list of equity grants for a given employee.<br /><b>Supported
          user types:</b> Service<br><br><b>Note</b>: The values of the list
          fields represent the list item ID and not the list item value. To obtain
          the corresponding list item value, use the HiBob metadata API to
          determine the field list name. Then, use the list item ID to locate the
          list item value. For more information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of salary equity grants.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EquityEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
          - Payroll
        summary: Creates a new equity grant for a given employee.
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Equity grant to add.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquityEntry'
          required: true
        responses:
          '200':
            description: Entry added successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/equities/{entry_id}:
      put:
        tags:
          - People
          - Tables
          - Payroll
        summary: Updates an equity grant for an employee
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>. - Basic: [] - Bearer: []
        parameters:
          - name: id
            in: path
            description: Employee ID
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The entry ID to update.
            required: true
            schema:
              type: integer
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EquityEntry'
          required: true
        responses:
          '200':
            description: Entry updated successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: body
      delete:
        tags:
          - People
          - Tables
          - Payroll
        summary: Deletes an equity grant for an employee.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The Entry ID to delete.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully.
            content: {}
        security:
          - Basic: []
    /people/{id}/variable:
      get:
        tags:
          - People
          - Tables
          - Payroll
        summary: List employee's variable payments
        description: >-
          Returns a list of variable payments for a given employee.<br
          /><br><b>Note</b>: The values of the list fields represent the list item
          ID and not the list item value. To obtain the corresponding list item
          value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of variable payments.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/VariableEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
          - Payroll
        summary: Creates a new variable payment for a given employee.
        description: >-
          <br><br><b>Note</b>:The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Variable payment to add.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableEntry'
          required: true
        responses:
          '200':
            description: Entry added successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/variable/{entry_id}:
      delete:
        tags:
          - People
          - Tables
          - Payroll
        summary: Deletes a training record for an employee.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The Entry ID to delete.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully.
            content: {}
        security:
          - Basic: []
    /people/{id}/training:
      get:
        tags:
          - People
          - Tables
          - Payroll
        summary: List the employee's training records.
        description: >-
          Returns a list of training records for a given employee<br
          /><br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of training records.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrainingEntries'
        security:
          - Basic: []
      post:
        tags:
          - People
          - Tables
          - Payroll
        summary: Creates a new training records for a given employee
        description: >-
          <br><br><b>Note</b>: The values of the list fields represent the list
          item ID and not the list item value. To obtain the corresponding list
          item value, use the HiBob metadata API to determine the field list name.
          Then, use the list item ID to locate the list item value. For more
          information, see <a
          href='https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api'>How
          to work with lists Public API</a>.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
        requestBody:
          description: Training entry to add.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingEntry'
          required: true
        responses:
          '200':
            description: Entry added successfully.
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
    /people/{id}/training/{entry_id}:
      delete:
        tags:
          - People
          - Tables
          - Payroll
        summary: Deletes any training records for an employee.
        parameters:
          - name: id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The Entry ID to delete.
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Entry deleted successfully.
            content: {}
        security:
          - Basic: []
    /people/custom-tables/metadata:
      get:
        tags:
          - Metadata
        summary: Read metadata of custom tables defined
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomTableMetadataList'
        security:
          - Basic: []
    /people/custom-tables/metadata/{custom_table_id}:
      get:
        tags:
          - Metadata
        summary: Read metadata for specific custom table
        parameters:
          - name: custom_table_id
            in: path
            description: The ID of custom table.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomTableMetadata'
        security:
          - Basic: []
    /people/custom-tables/{employee_id}/{custom_table_id}:
      get:
        tags:
          - Custom Tables
        summary: Read all entries of the given custom table
        parameters:
          - name: employee_id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: custom_table_id
            in: path
            description: The ID of custom table.
            required: true
            schema:
              type: string
          - name: includeHumanReadable
            in: query
            description: >-
              Whether to include the additional "humanReadable" JSON node in the
              response.
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomTableEntriesList'
        security:
          - Basic: []
      post:
        tags:
          - Custom Tables
        summary: Create new custom table entry
        parameters:
          - name: employee_id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: custom_table_id
            in: path
            description: The ID of custom table.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  RAW_BODY:
                    type: string
              example:
                values:
                  - column_1663598152485: 5185395
                    column_1663598024920: '2022-09-30'
                    column_1663598120787: '2871255975417872769'
                    column_1663598037763: 123456
                    column_1663598145154: 371223
                    column_1663597977169: text text
                    column_1663597992534: text area text area text area
                    column_1663598108167:
                      value: 240
                      currency: USD
                    column_1663598062584: '252614471'
                    column_1663598090762:
                      - '252614475'
                      - '252614476'
          required: true
        responses:
          '200':
            description: Entry created successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: values
    /people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}:
      put:
        tags:
          - Custom Tables
        summary: Update custom table entry
        parameters:
          - name: employee_id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: custom_table_id
            in: path
            description: The ID of custom table.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The ID of custom table entry.
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  RAW_BODY:
                    type: string
                example:
                  column_1663598152485: 5185395
                  column_1663598024920: '2022-09-30'
                  column_1663598120787: '2871255975417872769'
                  column_1663598145154: 371223
                  column_1663597977169: text text
                  column_1663597992534: text area text area text area
                  column_1663598108167:
                    value: 240
                    currency: USD
                  column_1663598062584: '252614471'
                  column_1663598090762:
                    - '252614475'
                    - '252614476'
          required: false
        responses:
          '200':
            description: Entry updated successfully
            content: {}
        security:
          - Basic: []
        x-codegen-request-body-name: entry
      delete:
        tags:
          - Custom Tables
        summary: Delete custom table entry
        parameters:
          - name: employee_id
            in: path
            description: Employee ID.
            required: true
            schema:
              type: string
          - name: custom_table_id
            in: path
            description: The ID of custom table.
            required: true
            schema:
              type: string
          - name: entry_id
            in: path
            description: The ID of custom table entry.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Entry deleted successfully
            content: {}
        security:
          - Basic: []
    /metadata/objects/position:
      get:
        tags:
          - Metadata
        summary: Get all positions fields
        description: Returns a list of all fields of object type position.<br/>
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ObjectsMetadata'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
    /objects/position/search:
      post:
        tags:
          - Objects
        summary: Read company positions
        description: >-
          Returns a list of the company positions, filtered by the specified
          attributes.  <br /><br><b>Note</b>
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPositionsRequest'
          required: true
        responses:
          '200':
            description: Positions
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PositionEntries'
          default:
            description: Unexpected error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        security:
          - Basic: []
        x-codegen-request-body-name: body
  components:
    schemas:
      CurrencyValue:
        required:
          - currency
          - value
        type: object
        properties:
          value:
            type: number
            format: double
          currency:
            type: string
            description: Three-letter currency code.
      TableEntry:
        required:
          - effectiveDate
        type: object
        properties:
          id:
            type: integer
            description: ID.
          reason:
            type: string
            description: The reason for this change.
          effectiveDate:
            type: string
            description: The date this entry becomes effective.
            format: date
      SalaryEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
            properties:
              base:
                $ref: '#/components/schemas/CurrencyValue'
              payPeriod:
                type: string
                description: >-
                  Represents the period for this salary entry. This can be one of:
                  Annual, Hourly, Daily, Weekly, Monthly.
              payFrequency:
                type: string
                description: >-
                  Represents the frequency the salary is paid. This can be one of:
                  Weekly, Monthly, Pro rata, Every two weeks, Twice a month, Every
                  four weeks.
        required:
          - base
          - payPeriod
      SalaryEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/SalaryEntry'
      EquityEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
            properties:
              quantity:
                type: number
                description: The number of equities granted.
                format: double
              equityType:
                type: string
                description: The type of the grant.
              vestingCommencementDate:
                type: string
                description: Vesting commencement date.
                format: date
              consentNumber:
                type: string
                description: Consent number.
              grantDate:
                type: string
                description: Date the equity was granted.
                format: date
              optionExpiration:
                type: string
                description: Date the options expire.
                format: date
              exercisePrice:
                $ref: '#/components/schemas/CurrencyValue'
              vestingTerm:
                type: string
                description: Terms for exercising this grant.
              grantType:
                type: string
                description: 'Grant type. One of: Initial Grant, Merit Grant'
              vestingSchedule:
                type: number
                description: The vesting schedule ID assigned to this grant.
                format: long
              grantNumber:
                type: number
                description: The Grant number for employee.
                format: double
              grantStatus:
                type: string
                description: 'Grant status. one of: Granted, Pending Approval'
        required:
          - quantity
          - equityType
      EquityEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/EquityEntry'
      VariableEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
            properties:
              amount:
                $ref: '#/components/schemas/CurrencyValue'
              variableType:
                type: string
                description: The type of variable pay.
              paymentPeriod:
                type: string
                description: >-
                  This represents the period for this variable entry. It can be
                  one of: Annual, Half-Yearly, Quarterly, Monthly.
              companyPercent:
                type: number
                description: The employee's company on-target weight, in percent.
              departmentPercent:
                type: number
                description: The employee's department on-target weight, in percent.
              individualPercent:
                type: number
                description: The employee's individual on-target weight, in percent.
        required:
          - amount
          - type
          - paymentPeriod
      VariableEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/VariableEntry'
      TrainingEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
            properties:
              name:
                type: string
                description: >-
                  The name of the training entry. The name must be an item in the
                  training list field.
              description:
                type: string
                description: Further description about the training entry.
              cost:
                $ref: '#/components/schemas/CurrencyValue'
              status:
                type: string
                description: The status of the training entry
              frequency:
                type: string
                description: >-
                  The frequency of the training entry. The name must be of an item
                  in the frequency list field.
              startDate:
                type: string
                description: The date this entry becomes effective.
                format: date
              endDate:
                type: string
                description: The date of training completion.
                format: date
              documentId:
                type: number
                description: ID of the document attached to this training entry.
                format: long
        required:
          - amount
          - type
          - paymentPeriod
      TrainingEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/TrainingEntry'
      EmploymentEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
            properties:
              contract:
                type: string
                description: Contract.
              type:
                type: string
                description: Type.
              salaryPayType:
                type: string
                description: Salary pay type.
              effectiveDate:
                type: string
                description: The date this entry becomes effective.
                format: date
        required:
          - effectiveDate
      EmploymentEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/EmploymentEntry'
      WorkEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
          - type: object
            properties:
              title:
                type: string
                description: The employee's job title.
              department:
                type: string
                description: The employee's department.
              site:
                type: string
                description: The employee's site.
              siteId:
                type: integer
                description: The employee's site ID.
              reportsTo:
                required:
                  - id
                type: object
                properties:
                  id:
                    type: string
                    description: The manager's employee ID.
                  firstName:
                    type: string
                    description: The manager's first name.
                  surname:
                    type: string
                    description: The manager's surname.
                  email:
                    type: string
                    description: The manager's email.
                  displayName:
                    type: string
                    description: The manager's display name.
                description: The manager's details.
              effectiveDate:
                type: string
                description: The date this entry becomes effective.
                format: date
              customColumns:
                type: object
                properties: {}
          - type: object
      WorkEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/WorkEntry'
      LifeCycleEntry:
        allOf:
          - $ref: '#/components/schemas/TableEntry'
          - type: object
          - type: object
            properties:
              status:
                type: string
              reasonType:
                type: string
              effectiveDate:
                type: string
                description: The date this entry becomes effective.
                format: date
          - type: object
      LifeCycleEntries:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/LifeCycleEntry'
      EmployeeReference:
        type: object
        properties:
          id:
            type: string
          firstName:
            type: string
          surname:
            type: string
          email:
            type: string
      ReadEmployeesRequestReference:
        type: object
        properties:
          fields:
            type: array
            description: >-
              Optional array of employee field paths that's are required in
              response. If you don't specify fields - only basic fields and
              categories are returned: <br/><b>Basic fields:</b>  <ul>
                                    <li>ID</li>
                                    <li>Company ID</li>
                                    <li>Email</li>
                                    <li>First name</li>
                                    <li>Last name</li>
                                    <li>Display name</li>
                                    <li>Middle name</li>
                                    <li>Creation timestamp</li>
                                    <li>Avatar URL</li>
              </ul> <br/><b>Basic Categories:</b> <ul>
                                    <li>About</li>
                                    <li>Employment</li>
                                    <li>Work</li>
              </ul>
            items:
              type: string
            example:
              - root.id
              - root.firstName
              - root.surname
              - root.email
              - work.site
              - work.department
          filters:
            type: array
            description: >-
              Optional list of filters for filtering employees. We currently
              support up to one filter.
            items:
              $ref: '#/components/schemas/EmployeeFilter'
          showInactive:
            type: boolean
            description: >-
              <br>Optional field. <br>Default value = false. <br>Defines whether
              response should include inactive employees.
          humanReadable:
            type: string
            description: >-
              Optional field.  <br> <b>If not sent:</b> supply machine-readable
              values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> -
              include the additional "humanReadable" JSON node in the response.
              <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON
              instead of machine-readable format. <br>
      ReadSingleEmployeeRequestReference:
        type: object
        properties:
          fields:
            type: array
            description: >-
              Optional array of employee field paths that's are required in
              response. If you don't specify fields - only basic fields and
              categories are returned: <br/><b>Basic fields:</b>  <ul>
                                    <li>ID</li>
                                    <li>Company ID</li>
                                    <li>Email</li>
                                    <li>First name</li>
                                    <li>Last name</li>
                                    <li>Display name</li>
                                    <li>Middle name</li>
                                    <li>Creation timestamp</li>
                                    <li>Avatar URL</li>
              </ul> <br/><b>Basic Categories:</b> <ul>
                                    <li>About</li>
                                    <li>Employment</li>
                                    <li>Work</li>
              </ul>
            items:
              type: string
            example:
              - root.id
              - root.firstName
              - root.surname
              - root.email
              - work.site
              - work.department
          humanReadable:
            type: string
            description: >-
              Optional field.  <br> <b>If not sent:</b> supply machine-readable
              values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> -
              include the additional "humanReadable" JSON node in the response.
              <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON
              instead of machine-readable format. <br>
      EmployeeFilter:
        type: object
        properties:
          fieldPath:
            type: string
            example: root.id
            description: >-
              The field id (path) to filter by.<br /> Supported fields: “root.id”,
              "root.email".<br />Any other path will get a response of 400 HTTP
              error.
          operator:
            type: string
            example: equals
            description: >-
              Supported operators: “equals” <br /> Any other operator will get a
              response of 400 HTTP error.
          values:
            type: array
            description: >-
              List of values to compare. <br /> Empty list will result in 400 HTTP
              error.
            items:
              type: string
            example:
              - employeeId1
              - employeeId2
              - employeeId3
      WorkPart:
        type: object
        properties:
          reportsTo:
            $ref: '#/components/schemas/EmployeeReference'
          title:
            type: string
            description: The employee's title.
          department:
            type: string
            description: The employee's description.
          site:
            type: string
            description: The employee's site.
          startDate:
            type: string
            description: The employee's employment start date
            format: date
      AboutPart:
        type: object
        properties:
          avatar:
            type: string
            description: Image URL of the employee's avatar.
          hobbies:
            type: array
            description: An array of the employee's hobbies.
            items:
              type: string
      PersonalPart:
        type: object
        properties:
          honorific:
            type: string
            description: The employee's title, This can be Mr, Mrs. Ms. etc.
          shortBirthDate:
            type: string
          gender:
            type: string
            description: One of Male / Female.
      CreateEmployeeRequest:
        required:
          - email
          - firstName
          - surname
        type: object
        properties:
          firstName:
            type: string
            description: Employee's first name.
          surname:
            type: string
            description: Employee's surname.
          email:
            type: string
            description: Employee's email address.
            format: email
          work:
            required:
              - site
              - startDate
            type: object
            properties:
              site:
                type: string
                description: The employee's site.
              startDate:
                type: string
                description: The employee's employment start date
                format: date
      EmployeeTermination:
        required:
          - terminationDate
        type: object
        properties:
          terminationDate:
            type: string
            description: The employee's termination date
            format: date
          terminationReason:
            type: string
            description: The ID of the 'terminationReason' list entry
          reasonType:
            type: string
            description: The ID of the 'lifecycleReasonType' list entry
          noticePeriod:
            type: object
            properties:
              unit:
                type: string
                enum:
                  - days
                  - weeks
                  - month
                  - years
              length:
                type: integer
            description: Notice period length
          lastDayOfWork:
            type: string
            format: date
        example:
          terminationDate: '2025-09-23'
          noticePeriod:
            unit: days
            length: 30
          lastDayOfWork: '2025-09-22'
          terminationReason: Redundant
          reasonType: End of Contract
      Employee:
        type: object
        properties:
          id:
            type: string
            description: A unique identifier representing a specific employee.
          firstName:
            type: string
            description: Employee's first name.
          surname:
            type: string
            description: Employee's surname.
          email:
            type: string
            description: Employee's email address.
            format: email
          displayName:
            type: string
            description: >-
              Employee's display name. This defaults to first name & last name but
              can be customized.
          personal:
            $ref: '#/components/schemas/PersonalPart'
          about:
            $ref: '#/components/schemas/AboutPart'
          work:
            $ref: '#/components/schemas/WorkPart'
      Employees:
        type: object
        properties:
          employees:
            type: array
            items:
              $ref: '#/components/schemas/Employee'
      EmployeeProfile:
        type: object
        properties:
          id:
            type: string
            description: A unique identifier representing a specific employee.
          firstName:
            type: string
            description: Employee's first name.
          surname:
            type: string
            description: Employee's surname.
          email:
            type: string
            description: Employee's email address.
            format: email
          displayName:
            type: string
            description: >-
              The employee's display name. This defaults to first name & last name
              but can be customized.
          personal:
            $ref: '#/components/schemas/PersonalPart'
          about:
            $ref: '#/components/schemas/AboutPart'
          work:
            $ref: '#/components/schemas/WorkPart'
      EmployeesProfiles:
        type: object
        properties:
          employees:
            type: array
            items:
              $ref: '#/components/schemas/EmployeeProfile'
      Fields:
        type: array
        items:
          $ref: '#/components/schemas/Field'
      Field:
        type: object
        properties:
          id:
            type: string
            description: ID of the field.
          category:
            type: string
            description: Category of the field.
          name:
            type: string
            description: Name of the field.
          description:
            type: string
            description: Description of the field.
          jsonPath:
            type: string
            description: >-
              A dot-separated path of this field value in the employee JSON
              returned by the /v1/profiles endpoint.
          type:
            type: string
            description: >-
              The type of the field. Supported field types: text, text-area,
              number, date, list, multi-list, hierarchy-list, currency,
              employee-reference, document.
          typeData:
            type: object
            properties:
              listId:
                type: string
                description: The ID of the list in the /v1/company/named-lists endpoint.
          historical:
            type: boolean
            description: >-
              When true, this field keeps the history of its values, each being
              active starting from a certain date. The default value is false.
      CreateFieldRequest:
        required:
          - category
          - name
          - type
        type: object
        properties:
          name:
            type: string
            description: The name of the field.
          category:
            type: string
            description: The category of the field.
          type:
            type: string
            description: >-
              The type of field. Supported field types: text, text-area, number,
              date, list, multi-list, hierarchy-list, currency,
              employee-reference, document.
          description:
            type: string
            description: The description of the field.
          historical:
            type: string
            description: >-
              When true, this field keeps the history of its values, each being
              active starting from a certain date. The default value is false.
      UpdateFieldRequest:
        type: object
        properties:
          name:
            type: string
            description: The name of the field.
          description:
            type: string
            description: The description of the field.
      Lists:
        type: array
        items:
          $ref: '#/components/schemas/List'
      List:
        type: object
        properties:
          name:
            type: string
            description: The name of the list
          items:
            type: array
            description: The elements in the list.
            items:
              $ref: '#/components/schemas/ListItem'
      FlatListItemId:
        type: object
        properties:
          id:
            type: string
            description: The ID of the list item.
      FieldId:
        type: object
        properties:
          id:
            type: string
            description: The ID of the field.
      ListItem:
        type: object
        properties:
          id:
            type: integer
            description: Internal ID of the item.
          name:
            type: string
            description: Name of the item.
          archived:
            type: boolean
            description: Whether the item is archived (not available for selection).
          children:
            type: array
            description: Nested items - if the list is nested.
            items:
              $ref: '#/components/schemas/ListItem'
      NewListItem:
        required:
          - name
        type: object
        properties:
          name:
            type: string
            description: Name of the item.
          parentId:
            type: integer
            description: ID of the new hierarchy parent node.
      UpdateListItemRequest:
        type: object
        properties:
          name:
            type: string
            description: Name of the item.
          parentId:
            type: integer
            description: ID of the new hierarchy parent node.
      OutToday:
        type: object
        properties:
          employeeId:
            type: string
            description: Employee ID.
            format: uuid
          employeeDisplayName:
            type: string
            description: Employee display name.
          employeeEmail:
            type: string
            description: Employee email address.
          policyTypeDisplayName:
            type: string
            description: Display name of the policy type.
          startDate:
            type: string
            description: >-
              Date of the first day of the time off (not relevant for requests
              using the hours type).
            format: date
          startDatePortion:
            type: string
            description: >-
              What portion of the first day is included - all_day, morning or
              afternoon (relevant for request using the days type).
          endDate:
            type: string
            description: >-
              Date of the last day of the time off (not relevant for requests
              using the hours type).
            format: date
          endDatePortion:
            type: string
            description: >-
              What portion of the last day is included - all_day, morning or
              afternoon (relevant for request using the days type).
          requestRangeType:
            type: string
            description: >-
              The type of request duration.<br> <b>portionOnRange</b> is when the
              request is for every morning or every afternoon during the days
              requested.<br> <b>hoursOnRange</b> is when the request is for X
              hours every day during the days requested.
            enum:
              - days
              - hours
              - portionOnRange
              - hoursOnRange
          dayPortion:
            type: string
            description: >-
              What portion of the request's days is included - morning or
              afternoon (relevant for request using the portionOnRange type).
          dailyHours:
            type: number
            description: >-
              The time off duration in hours for every request's days (relevant
              for requests with hoursOnRange type).
          date:
            type: string
            description: Date of the time off (relevant for requests using the hours type).
            format: date
          hours:
            type: integer
            description: >-
              The time off duration in hours for the date (relevant for requests
              with hours type).
          minutes:
            type: integer
            description: Relevant for requests using the hours type.
      OutTodays:
        type: object
        properties:
          outs:
            type: array
            items:
              $ref: '#/components/schemas/OutToday'
      Request:
        type: object
        properties:
          requestId:
            type: integer
            format: int64
          employeeId:
            type: string
            description: Employee ID.
            format: uuid
          policyType:
            type: string
            description: Request policy type, e.g. Holiday, Sick or any defined custom type.
          policyTypeDisplayName:
            type: string
            description: >-
              Display name for the policy type. This will be translated based on
              the locale.
          type:
            type: string
            description: >-
              The type of request duration.<br> <b>portionOnRange</b> is when the
              request is for every morning or every afternoon during the days
              requested.<br> <b>hoursOnRange</b> is when the request is for X
              hours every day during the days requested.
            enum:
              - days
              - hours
              - portionOnRange
              - hoursOnRange
          startDate:
            type: string
            description: >-
              Date of the first day of the time off (not relevant for requests
              using the hours type).
            format: date
          startPortion:
            type: string
            description: >-
              What portion of the first day is included - all_day, morning or
              afternoon (relevant for request using the days type).
          endDate:
            type: string
            description: >-
              Date of the last day of the time off (not relevant for requests
              using the hours type).
            format: date
          endPortion:
            type: string
            description: >-
              What portion of the last day is included - all_day, morning or
              afternoon (relevant for requests using the days type).
          dayPortion:
            type: string
            description: >-
              What portion of the request's days is included - morning or
              afternoon (relevant for requests using the portionOnRange type).
          date:
            type: string
            description: Date of the time off (relevant for request using the hours type)
            format: date
          hoursOnDate:
            type: integer
            description: >-
              The time off duration in hours for the date (relevant for request
              using the hours type).
          minutes:
            type: integer
            description: Relevant for request using the hours type.
          dailyHours:
            type: number
            description: >-
              The time off duration in hours for every day in the request
              (relevant for requests using the hoursOnRange type).
          status:
            type: string
            description: Request status. This can be either Approved or Pending.
          employeeDisplayName:
            type: string
            description: Employee display name.
      Requests:
        type: object
        properties:
          outs:
            type: array
            items:
              $ref: '#/components/schemas/Request'
      ReasonCode:
        type: object
        properties:
          id:
            type: integer
          displayName:
            type: string
      ReasonCodes:
        type: object
        properties:
          reasonCodes:
            type: array
            items:
              $ref: '#/components/schemas/ReasonCode'
      ReasonCodesNames:
        type: object
        properties:
          reasonCodes:
            type: array
            items:
              type: string
              description: A list of reason codes.
      PolicyType:
        type: object
        properties:
          name:
            type: string
          activity:
            type: string
            description: Activity type.
            enum:
              - paidTimeoff
              - unpaidTimeoff
              - workTime
          bookingWorkDaysOnly:
            type: boolean
            description: Requests will be deducted from the balance only for working days.
          unit:
            type: string
            enum:
              - days
              - hours
      PolicyTypes:
        type: object
        properties:
          policyTypes:
            type: array
            items:
              type: string
      PolicyNames:
        type: object
        properties:
          policyNames:
            type: array
            items:
              type: string
              description: A list of policy names.
      Policy:
        type: object
        properties:
          name:
            type: string
          allowance:
            type: number
            description: Base annual allowance.
          maxBalance:
            type: number
            description: Maximum balance at the end of the cycle.
          minBalance:
            type: number
            description: Minimum balance cap.
          yosIncrease:
            type: array
            items:
              $ref: '#/components/schemas/YearsOfServiceIncrements'
          minTimeOffRequestDuration:
            type: string
            description: The shortest amount of time employees can request.
            enum:
              - fullDay
              - halfDay
              - fullHour
              - halfHour
              - quarterHour
          approvalRequired:
            type: boolean
            description: Requests require approval.
          description:
            type: string
            description: Policy description.
          unit:
            type: string
            enum:
              - days
              - hours
      YearsOfServiceIncrements:
        type: object
        properties:
          yearsOfService:
            type: number
            description: Start after this number of years.
          extraDays:
            type: number
            description: Additional days to add.
      BalanceResult:
        type: object
        properties:
          employeeId:
            type: string
            description: Employee ID.
          totalBalanceAsOfDate:
            type: number
            description: The retrieved balance as of this date.
          totalRoundedBalanceAsOfDate:
            type: number
            description: The retrieved rounded balance as of this date.
          pointInTime:
            type: string
            description: The balance date.
            format: date
          startingBalance:
            type: number
            description: The balance as of the cycle start date.
          startingBalanceAsOf:
            type: string
            description: The cycle start date.
            format: date
          totalTaken:
            type: number
            description: Total number of days/hours taken.
          totalAdminAdjustments:
            type: number
            description: Total number of days/hours manually adjusted.
          totalSystemAdjustments:
            type: number
            description: Total number of days/hours adjusted.
          annualAllowance:
            type: number
            description: Annual allowance.
          policy:
            type: string
            description: Policy name.
      AdjustmentRequest:
        type: object
        properties:
          adjustmentType:
            type: string
            description: Adjustment type - balance or time used.
            enum:
              - balance
              - daysUsed
          policyType:
            type: string
            description: Policy type name.
          effectiveDate:
            type: string
            description: The date this adjustment becomes effective.
            format: date
          amount:
            type: number
            description: The amount of days/hours to add/subtract.
          reason:
            type: string
            description: A reason for this adjustment.
      EmployeeDocumentResponse:
        type: object
        properties:
          documents:
            type: array
            items:
              $ref: '#/components/schemas/EmployeeDocumentWithDownloadLink'
      EmployeeDocumentWithDownloadLink:
        type: object
        properties:
          documentName:
            type: string
            description: The name of the document.
          downloadLink:
            type: string
            description: The name of the document.
      TimeoffChange:
        type: object
        properties:
          changeType:
            type: string
            description: Change type - created, canceled or deleted.
            enum:
              - Created
              - Canceled
              - Deleted
          employeeId:
            type: string
            description: Employee ID
            format: uuid
          employeeDisplayName:
            type: string
            description: Employee display name.
          employeeEmail:
            type: string
            description: Employee email address.
          requestId:
            type: integer
            description: TimeOff Request ID.
          policyTypeDisplayName:
            type: string
            description: Display name of the policy type.
          type:
            type: string
            description: >-
              The type of request duration.<br> <b>portionOnRange</b> is when the
              request is for every morning or every afternoon during the days
              requested.<br> <b>hoursOnRange</b> is when the request is for X
              hours every day during the days requested.
            enum:
              - days
              - hours
              - portionOnRange
              - hoursOnRange
          startDate:
            type: string
            description: >-
              Date of the first day of the time off (not relevant for requests
              using the hours type).
            format: date
          startPortion:
            type: string
            description: >-
              What portion of the first day is included - all_day, morning or
              afternoon (relevant for requests using the Days type).
          endDate:
            type: string
            description: >-
              Date of the last day of the time off (not relevant for requests
              using the hours type).
            format: date
          endPortion:
            type: string
            description: >-
              What portion of the last day is included - all_day, morning or
              afternoon (relevant for requests using the Days type).
          dayPortion:
            type: string
            description: >-
              What portion of the request's days is included - morning or
              afternoon (relevant for requests using the portionOnRange type).
          date:
            type: string
            description: Date of the time off (relevant for requests using the Hours type)
            format: date
          hoursOnDate:
            type: integer
            description: >-
              The time off duration in hours for the date (relevant for requests
              using the Hours type).
          dailyHours:
            type: number
            description: >-
              The time off duration in hours for every day in the request
              (relevant for requests using the hoursOnRange type)
          durationUnit:
            type: string
            description: >-
              The unit used for the totalDuration and totalCost - either 'days' or
              'hours'
            enum:
              - days
              - hours
          totalDuration:
            type: number
            description: >-
              The total amount of time the request covers, including regular days
              off such as weekends
          totalCost:
            type: number
            description: The amount that will be deducted from the balance
          changeReason:
            type: string
            description: Request change reason
      TimeoffChanges:
        type: object
        properties:
          changes:
            type: array
            items:
              $ref: '#/components/schemas/TimeoffChange'
      SubmitTimeoffRequest:
        required:
          - policyType
          - startDate
        type: object
        properties:
          policyType:
            type: string
            description: Request policy type, e.g. Holiday, Sick or any custom type defined.
          requestRangeType:
            type: string
            description: >-
              The type of request duration.<br> Select <b>hours</b> when the
              request is for X hours during the day requested (This is supported
              only for policy types measured in hours).<br> Select
              <b>portionOnRange</b> when the  request is for every morning or
              every afternoon during the days requested.<br> Select
              <b>hoursOnRange</b> when the request is for X hours every day during
              the days requested (This is supported only for policy types measured
              in hours)
            default: days
            enum:
              - days
              - hours
              - portionOnRange
              - hoursOnRange
          startDate:
            type: string
            description: >-
              Date of the first day of the time off (not relevant for requests
              using the hours type).
            format: date
          startDatePortion:
            type: string
            description: Portion of the first day - relevant for requests in days.
            default: all_day
            enum:
              - all_day
              - morning
              - afternoon
          endDate:
            type: string
            description: >-
              Date of the last day of the time off (not relevant for requests
              using
                                                             the hours type).
            format: date
          hours:
            type: integer
            description: This field is mandatory if the requestRangeType is set to 'hours'.
          minutes:
            type: integer
            description: Relevant if requestRangeType is set to 'hours'.
          endDatePortion:
            type: string
            description: Portion of the last day - relevant for requests in days.
            default: all_day
            enum:
              - all_day
              - morning
              - afternoon
          dayPortion:
            type: string
            description: >-
              Select <b>morning</b> when the request is for mornings on the days
              requested. Select <b>afternoon</b> when the request is for
              afternoons on the days requested.<br> This is mandatory if the
              <b>requestRangeType</b> is <b>portionOnRange</b>.
            enum:
              - morning
              - afternoon
          dailyHours:
            type: integer
            description: >-
              Enter the number of hours when the request is for X hours on the
              days requested.<br> This is mandatory if the <b>requestRangeType</b>
              is <b>hoursOnRange</b>.
          dailyMinutes:
            type: integer
            description: >-
              Enter the number of minutes when the request is for X hours and X
              minutes on the days requested.<br> This is relevant if the
              <b>requestRangeType</b> is <b>hoursOnRange</b> and the amount
              requested is not a full hour or hours.
          skipManagerApproval:
            type: boolean
            description: >-
              Admins only can skip the approval policy. Setting this field to true
              will create an approved request.
            default: false
          approver:
            type: string
            description: >-
              The employee ID of the user to be set as the approver for this
              request. This is relevant if 'skipManagerApproval' is set to
              true.<br>Please note that the user calling the API with this param
              must have permission to import time off requests.
          description:
            type: string
            description: Request reason.
          reasonCode:
            type: integer
            description: >-
              The reason code ID taken from the policy type's reason codes list.
              The list is available in GET
              /timeoff/policy-types/{policyType}/reason-codes
      SubmitTimeoffRequestDiffHours:
        required:
          - policyType
          - startDate
          - endDate
          - durations
        type: object
        properties:
          policyType:
            type: string
            example: Holiday
            description: Request policy type, e.g. Holiday, Sick or any custom type defined.
          startDate:
            type: string
            example: '2024-01-03'
            description: Date of the first day of the time off
            format: date
          endDate:
            type: string
            example: '2024-01-05'
            description: Date of the last day of the time off.
            format: date
          durations:
            type: array
            description: Array of durations for each day in the request.
            items:
              required:
                - date
                - hours
                - minutes
              type: object
              properties:
                date:
                  type: string
                  description: Date of the duration.
                  format: date
                hours:
                  type: integer
                  description: The number of hours in the duration.
                minutes:
                  type: integer
                  description: The number of minutes in the duration.
            example:
              - date: '2024-01-03'
                hours: 0
                minutes: 15
              - date: '2024-01-04'
                hours: 0
                minutes: 0
              - date: '2024-01-05'
                hours: 2
                minutes: 45
          skipManagerApproval:
            type: boolean
            example: false
            description: >-
              Admins only can skip the approval policy. Setting this field to true
              will create an approved request.
            default: false
          approver:
            type: string
            example: '3452152476387906847'
            description: >-
              The employee ID of the user to be set as the approver for this
              request. This is relevant if 'skipManagerApproval' is set to
              true.<br>Please note that the user calling the API with this param
              must have permission to import time off requests.
          description:
            type: string
            example: Vacation
            description: Request reason.
          reasonCode:
            type: integer
            example: 3000
            description: >-
              The reason code ID taken from the policy type's reason codes list.
              The list is available in GET
              /timeoff/policy-types/{policyType}/reason-codes
      TimeoffRequest:
        type: object
        properties:
          employeeId:
            type: string
            description: Employee ID.
            format: uuid
          requestId:
            type: integer
            description: Time Off Request ID.
          policyTypeDisplayName:
            type: string
            description: Display name of the policy type.
          type:
            type: string
            description: >-
              The type of request duration.<br> <b>portionOnRange</b> is when the
              request is for every morning or every afternoon during the days
              requested.<br> <b>hoursOnRange</b> is when the request is for X
              hours every day during the days requested.
            enum:
              - days
              - hours
              - portionOnRange
              - hoursOnRange
          startDate:
            type: string
            description: >-
              Date of the first day of the time off  (not relevant for requests
              using the hours type).
            format: date
          startDatePortion:
            type: string
            description: >-
              What portion of the first day is included - all_day, morning or
              afternoon (relevant for requests using the Days type).
          endDate:
            type: string
            description: >-
              Date of the last day of the time off (not relevant for requests
              using
                                                             the hours type).
            format: date
          endDatePortion:
            type: string
            description: >-
              What portion of the last day is included - all_day, morning or
              afternoon (relevant for requests using the Days type).
          dayPortion:
            type: string
            description: >-
              What portion of the request's days is included - morning or
              afternoon (relevant for requests using the portionOnRange type).
          approved:
            type: boolean
            description: Whether the request is approved (and hence publicly visible).
          date:
            type: string
            description: Date of the time off (relevant for requests using the Hours type).
            format: date
          hoursOnDate:
            type: integer
            description: >-
              The time off duration in hours for the date (relevant for requests
              using the Hours type)
          dailyHours:
            type: number
            description: >-
              The time off duration in hours for every day in the request
              (relevant for requests using the hoursOnRange type).
          description:
            type: string
            description: The request description.
          durationUnit:
            type: string
            description: >-
              The unit used for the totalDuration and totalCost - either 'days' or
              'hours'
            enum:
              - days
              - hours
          totalDuration:
            type: number
            description: >-
              The total amount of time the request covers, including regular days
              off such as weekends
          totalCost:
            type: number
            description: The amount that will be deducted from the balance
          status:
            type: string
            description: Request status. This can be approved, pending, canceled, etc.
          hasAttachment:
            type: boolean
            description: Whether the request has attachments
          reasonCode:
            type: string
            description: >-
              The reason code taken from the policy type's reason codes list. The
              list is available in GET
              /timeoff/policy-types/{policyType}/reason-codes
          attachmentLinks:
            type: array
            description: Attachments with download links
            items:
              type: object
              properties:
                filename:
                  type: string
                url:
                  type: string
                mimeType:
                  type: string
          previousRequestId:
            type: integer
            description: >-
              The previous request ID before modification (relevant if a request's
              dates or duration were modified).
          approvedBy:
            type: string
            description: Who approved the request
          approvedAt:
            type: string
            description: When the request was approved
          declinedBy:
            type: string
            description: Who declined the request
          declinedAt:
            type: string
            description: When the request was declined
          declineReason:
            type: string
            description: Why the request was declined
      OnboardingWizards:
        type: object
        properties:
          wizards:
            type: array
            items:
              $ref: '#/components/schemas/OnboardingWizard'
      OnboardingWizard:
        type: object
        properties:
          id:
            type: number
            format: long
          name:
            type: string
      InvitationByWizard:
        required:
          - welcomeWizardId
        type: object
        properties:
          welcomeWizardId:
            type: integer
            description: The Welcome wizard ID.
      UploadAvatar:
        required:
          - url
        type: object
        properties:
          url:
            type: string
            description: The URL of the source of the avatar image.
      StartDateUpdate:
        required:
          - startDate
        type: object
        properties:
          startDate:
            type: string
            description: The date this entry becomes effective.
            format: date
          reason:
            type: string
            description: Additional info for the start date update.
      Task:
        type: object
        properties:
          id:
            type: number
            format: long
          title:
            type: string
          set:
            type: string
          description:
            type: string
      Tasks:
        type: object
        properties:
          tasks:
            type: array
            items:
              $ref: '#/components/schemas/Task'
      Report:
        type: object
        properties:
          id:
            type: number
            format: long
          name:
            type: string
      Reports:
        type: object
        properties:
          views:
            type: array
            items:
              $ref: '#/components/schemas/Report'
      ChangeEmail:
        type: object
        properties:
          email:
            type: string
            description: new email
      AddDocument:
        type: object
        properties:
          documentName:
            type: string
            description: Document name.
          documentUrl:
            type: string
            description: URL of the document to upload.
          tags:
            type: array
            description: Tags to.
            items:
              type: string
      Error:
        type: object
        properties:
          key:
            type: string
            description: The unique identifier of the error.
          error:
            type: string
            description: A human readable error message.
      ImportAttendanceData:
        required:
          - idType
          - requests
        type: object
        properties:
          idType:
            type: string
            description: >-
              The ID type used to identify the employee. Can be one of: "bobId",
              "email", "idInCompany", or a custom field.<br/>For <b>custom
              fields</b> a forward slash separator should be used.<br/>In order to
              use a specific custom field to identify an employee, for example a
              custom field called "Payroll integration ID":<ul><li>Query the field
              name via the <a
              href='https://apidocs.hibob.com/reference/get_company-people-fields'>"Get
              all company fields"</a></li><li>In the response the name will look
              like <b>"identification.custom.Payroll Integration
              ID_1RNhIIf"</b></li><li>The value to use should be:
              <b>"/identification/custom/Payroll Integration
              ID_1RNhI"</b></li></ul>
          requests:
            type: array
            description: List of attendance events
            items:
              $ref: '#/components/schemas/ImportAttendanceEvent'
          dateTimeFormat:
            type: string
            description: >-
              Allows to set custom date format for the date-time values sent in
              the requests
            example: yyyy-MM-dd hh:mm a
      ImportAttendanceEvent:
        required:
          - id
        type: object
        properties:
          id:
            type: string
            description: >-
              The id value to identify the customer by. Will fetch the employee
              based on the field (type) selected in <i>idType</i>.
            example: '12356733644'
          clockIn:
            type: string
            description: The timestamp to log as a clock-in date-time in local time
            example: 2022-06-12T08:00
          clockOut:
            type: string
            description: The timestamp to log as a clock-out date-time in local time.
            example: 2022-06-12T17:00
        description: An event indicating clock-in, clock-out or both
      ImportAttendanceResponse:
        type: object
        properties:
          status:
            type: string
            description: Import status
            enum:
              - success
              - failed
              - partial_success
          total:
            type: number
            description: Total number of clock-in and clock-out events received
            example: 140
          imported:
            type: number
            description: Number of clock-in/clock-out events imported
            example: 137
          notImported:
            type: number
            description: Number of clock-in/clock-out events which were not imported
            example: 3
          errors:
            type: array
            description: List of all errors received in the process
            example:
              - >-
                Clock-In at 2022-04-07T07:00 for employee ID 2686495591877312534
                is invalid
              - 'Invalid employee Id: ABCD12345567'
              - Cannot find employee for id 5986745
            items:
              type: string
      CustomTableColumn:
        type: object
        properties:
          id:
            type: string
            description: The ID of the column
          name:
            type: string
            description: The name of the column
          description:
            type: string
            description: The description of the column
          mandatory:
            type: boolean
            description: >-
              Flag which means that column must be present during creation and its
              value can't be null during update
          type:
            type: string
            description: >-
              The type of the column. Supported column types: text, text-area,
              number, date, list, multi-list, hierarchy-list, currency,
              employee-reference, document.
          typeData:
            type: object
            properties:
              listId:
                type: string
                description: The ID of the list in the /v1/company/named-lists endpoint.
      CustomTableMetadata:
        type: object
        properties:
          id:
            type: string
            description: The identifier of custom table
          category:
            type: string
            description: The ID of the category to which the custom table belongs
          name:
            type: string
            description: The name of custom table
          description:
            type: string
            description: The description of custom table
          columns:
            type: array
            items:
              $ref: '#/components/schemas/CustomTableColumn'
      CustomTableMetadataList:
        type: object
        properties:
          tables:
            type: array
            items:
              $ref: '#/components/schemas/CustomTableMetadata'
      CustomTableEntriesList:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/CustomTableEntry'
      CustomTableEntry:
        type: object
        properties:
          id:
            type: number
            description: The ID of the row
        description: >-
          The row data depends on what is defined in the table's schema, use HiBob
          Custom Table Metadata API to get list of defined columns. The only
          property that's always present is ID.
        example:
          values:
            - column_1663598152485: 5185395
              column_1663598024920: '2022-09-30'
              column_1663598120787: '2871255975417872769'
              column_1663598037763: 123456
              column_1663598145154: 371223
              column_1663597977169: text text
              column_1663597992534: text area text area text area
              column_1663598108167:
                value: 240
                currency: USD
              id: 1021262
              column_1663598062584: '252614471'
              column_1663598090762:
                - '252614475'
                - '252614476'
              humanReadable:
                column_1663597992534: text area text area text area
                column_1663598090762: B,A
                column_1663598108167: $240.00
                column_1663598145154: B \ 3
                column_1663598062584: C
                column_1663598152485: '5185395'
                column_1663597977169: text text
                column_1663598037763: '123456'
                column_1663598024920: 30/09/2022
                column_1663598120787: Austin Legge
      ObjectsMetadata:
        type: object
        properties:
          id:
            type: string
            description: ID of the field.
          name:
            type: string
            description: Name of the field.
          description:
            type: string
            description: Description of the field.
          fieldType:
            type: object
            properties:
              type:
                type: string
                description: The type of the field.
              typeData:
                type: object
                properties:
                  listId:
                    type: string
                    description: The ID of the list in the /v1/company/named-lists endpoint.
          jsonPath:
            type: object
            properties:
              root:
                type: string
                description: >-
                  The path to the field json object. The field value and other
                  properties, such as humanReadable value, will be placed inside.
              rawData:
                type: string
                description: The path to the actual field value.
      GetPositionsRequest:
        required:
          - fields
          - filters
        type: object
        properties:
          fields:
            type: array
            description: >-
              Array of field ids (paths) to fetch for the positions.<br /> Minimum
              1 up to 50 fields. Any invalid number of fields will get a response
              of 400 HTTP error.<br /> You can include only the field ids listed
              in the [Positions Fields Metadata
              API](https://apidocs.hibob.com/reference/get_metadata-objects-position).
            items:
              type: string
          filters:
            type: array
            items:
              type: object
              $ref: '#/components/schemas/FilterInstruction'
          includeHumanReadable:
            type: boolean
            description: >-
              Whether to include the additional "humanReadable" entry in the
              response.
            default: false
      FilterInstruction:
        required:
          - fieldId
          - operator
          - values
        properties:
          fieldId:
            type: string
            description: >-
              The field id (path) to filter by.<br /> Supported fields:
              “/position/status”, "/position/name".<br />Any other path will get a
              response of 400 HTTP error.
          operator:
            type: string
            description: >-
              Supported operators: “equals”, "notEqual".<br />Any other operator
              will get a response of 400 HTTP error.
          values:
            type: array
            description: >-
              List of values to compare.<br />Empty list will result in 400 HTTP
              error.
            items:
              type: string
      PositionEntries:
        type: array
        items:
          type: object
          properties:
            /position/fte:
              description: The position's full time equivalent (FTE%).
            /position/effectiveDate:
              description: The date this position becomes effective.
            /position/employmentType:
              description: The position's employment type.
            /position/status:
              description: The position's status.
            /position/actualStartDate:
              description: The employee's assignment date for this position.
            /position/reason:
              description: Reason for changing or creating this position.
            /position/positionType:
              description: The position's type.
            /position/filledBy:
              description: The current assigned employee for this position.
            /position/job:
              description: The position's job.
            /position/recruitmentStatus:
              description: The position's recruitment status.
            /position/name:
              description: The unique ID of this position.
            /position/department:
              description: The position's department.
            /position/site:
              description: The position's site.
            /position/expectedStartDate:
              description: The expected date this position should be filled.
            /position/managerPositionId:
              description: The manager's position ID.
            /position/managerPositionFilledBy:
              description: The current assigned manager for this position.
      JobAdRequest:
        required:
          - fields
          - filters
        type: object
        properties:
          fields:
            type: array
            description: >-
              Array of field ids (paths) to fetch for job ads.<br /> Minimum 1 up
              to 50 fields. Any invalid number of fields will get a response of
              400 HTTP error.
            items:
              type: string
          filters:
            type: array
            description: >-
              Array of filters to narrow down the searh results. Can be an empty
              array.
            items:
              type: object
              $ref: '#/components/schemas/JobAdFilterInstruction'
      JobAdFilterInstruction:
        required:
          - fieldId
          - operator
          - values
        properties:
          fieldId:
            type: string
            description: >-
              The field id (path) to filter by.<br /> Supported fields:<br
              />“/jobAd/id”,<br />"/jobAd/title",<br />"/jobAd/departmentId",<br
              />"/jobAd/employmentTypeId",<br />"/jobAd/siteId",<br
              />"/jobAd/languageCode".<br />Any other path will get a response of
              400 HTTP error.
          operator:
            type: string
            description: >-
              Supported operators:<br />“equals”,<br />"notEqual".<br />Any other
              operator will get a response of 400 HTTP error.
          values:
            type: array
            description: >-
              List of values to compare.<br />Empty list will result in 400 HTTP
              error.
            items:
              type: string
      JobAd:
        type: object
        properties:
          /jobAd/id:
            type: object
            properties:
              value:
                type: string
                format: uuid
            description: The ID of the job ad.
          /jobAd/applyUrl:
            type: object
            properties:
              value:
                type: string
            description: The URL to the application form page for the job ad.
          /jobAd/title:
            type: object
            properties:
              value:
                type: string
            description: >-
              The title of the job ad as defined on the job description used to
              promote the job opening.
          /jobAd/departmentId:
            type: object
            properties:
              value:
                type: string
            description: >-
              The ID of the department defined on the job opening that the job ad
              was created from. List of all values is available via [Company List
              - Department
              API](https://api.hibob.com/v1/company/named-lists/department)
          /jobAd/department:
            type: object
            properties:
              value:
                type: string
            description: >-
              The name of the department defined on the job opening that the job
              ad was created from.
          /jobAd/employmentTypeId:
            type: object
            properties:
              value:
                type: string
            description: >-
              The ID of the employment type defined on the job opening that the
              job ad was created from. List of all values is available via
              [Company List - PayrollEmploymentType
              API](https://api.hibob.com/v1/company/named-lists/payrollEmploymentType)
            format: string
          /jobAd/employmentType:
            type: object
            properties:
              value:
                type: string
            description: >-
              The name of the employment type defined on the job opening that the
              job ad was created from.
          /jobAd/siteId:
            type: object
            properties:
              value:
                type: integer
                format: long
            description: >-
              The ID of the site defined on the job opening that the job ad was
              created from. List of all values is available via [Company List -
              Site API](https://api.hibob.com/v1/company/named-lists/site)
          /jobAd/site:
            type: object
            properties:
              value:
                type: string
            description: >-
              The name of the site defined on the job opening that the job ad was
              created from.
          /jobAd/country:
            type: object
            properties:
              value:
                type: string
            description: >-
              The county name of the site defined on the job opening that the job
              ad was created from.
          /jobAd/languageCode:
            type: object
            properties:
              value:
                type: string
            description: >-
              The language code of the selected language on job description used
              to promote the job opening. List of all values is available via
              [Company List - Languages
              API](https://api.hibob.com/v1/company/named-lists/languages)
          /jobAd/description:
            type: object
            properties:
              value:
                type: string
            description: >-
              The description as defined on the job description used to promote
              the job opening.
          /jobAd/requirements:
            type: object
            properties:
              value:
                type: string
            description: >-
              The requirements as defined on the job description used to promote
              the job opening.
          /jobAd/responsibilities:
            type: object
            properties:
              value:
                type: string
            description: >-
              The responsibilities as defined on the job description used to
              promote the job opening.
          /jobAd/benefits:
            type: object
            properties:
              value:
                type: string
            description: >-
              The benefits as defined on the job description used to promote the
              job opening.
      JobAds:
        type: array
        items:
          $ref: '#/components/schemas/JobAd'
    securitySchemes:
      Bearer:
        type: apiKey
        name: Authorization
        in: header
      Basic:
        type: http
        scheme: basic
  x-readme:
    explorer-enabled: true
    proxy-enabled: true
  _id: 63cfae3d02656e0063a1cf02
konfigCliVersion: 1.38.61
