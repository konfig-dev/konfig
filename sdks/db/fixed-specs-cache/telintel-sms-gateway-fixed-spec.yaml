publishJson:
  company: Telintel
  serviceName: SMS Gateway
  sdkName: telintel-sms-gateway-{language}-sdk
  clientName: TelintelSmsGateway
  metaDescription: >-
    With +20 years of experience in the market, Telintel makes the experience of
    communicating with your clients easier. We are leaders on technological
    solutions that makes the interaction with any user simpler no matter neither
    the business size nor the industrial sector at hand. Our products based on
    SMS and VoIP (SMS 2-Way, Landing Pages, RoboCall, Text2Speech, IVR, SMS2Call
    & Click2Call) allow us to offer a vast service spectrum for any need
    including reminders, alerts, promotions and client loyalty, along with
    commercial presence on any the continents around the world.


    Our Go4Clients and TestMySMS platforms will allow you to enhance your user
    experience, centralize operational processes and improve your response times
    with the best service quality and 24/7 technical support, 365 days a year.
    These are smart solutions that will allow you to have infinite possibilities
    at your hands reach.


    We count on our strategic allies and important customers satisfied with our
    services. Be one of them today and contact us at social@telintel.net or give
    us a call at +1 786-871-6540.


    Con más de 20 años de experiencia en el mercado, Telintel hace más sencilla
    la manera de comunicarse con sus clientes. Somos líderes en soluciones
    tecnológicas que hacen más simple la interacción con cualquier usuario sin
    importar el tamaño de su organización o la industria a la que se dedique.
    Nuestros productos basados en SMS y VoIP (SMS 2way, Landing Page, Robocall,
    Text2Speech, IVR, SMS2Call y Click2Call) nos permiten ofrecer una amplia
    gama de servicios para cualquier necesidad incluyendo recordatorios,
    alertas, promociones y fidelización de clientes en todo el mundo, con
    presencia comercial en los 5 continentes.


    Nuestras plataformas Go4Clients y TestmySMS le permitirán mejorar la
    experiencia de sus usuarios con el mejor servicio y soporte 24/7 los 365
    días del año, centralizar procesos operativos y mejorar sus tiempo de
    respuesta.
  apiStatusUrls: inherit
  homepage: telintel.com
  developerDocumentation: smsapi.telintel.com
  categories:
    - communications
    - messaging
    - sms
rawSpecString: |
  openapi: 3.0.0
  info:
    version: 1.0.0
    title: Telintel SMS Gateway HTTP API
    description: >-
      This service is intended for live traffic, it is scoped for notification
      systems. It works synchronously (the answer of each message will contain the
      termination answer, and the message ID), but it may receive several requests
      simultaneously. Telintel LTD provides an HTTP API to send and receive SMS.
      It requires an application capable of reading JSON objects, GET/POST
      request, Authentication credentials (login and password that can be obtained
      through your Telintel sales manager) and enough credit to complete the
      procedure.

      Please note: the IP address where the requests will be sent must be
      reported, as the account will bind with that IP address. If a delivery
      receipt (DLR) is required for each SMS submission (where applicable) or a
      short code or long number has been purchased and the receipt of each inbound
      mobile originated (MO) message is desired, then a CallBack URL must be setup
      with the Telintel Support team.
    contact:
      name: Telintel
      url: https://telintel.com/
  servers:
    - description: HTTP (non-SSL)
      url: http://smsapi.telintel.net:8080/SmppUtilsWeb
    - description: HTTPS (SSL) *recommended*
      url: https://smsapi.telintel.net:8443/SmppUtilsWeb
  tags:
    - name: Send Single SMS
      description: >-
        The Send Single SMS API is designed to send a single SMS, the answer is
        synchronously.
    - name: Send Mass SMS
      description: >-
        The Send Mass SMS API is designed to be used when sending simultaneous
        transactions is not an option and a large quantity of messages needs to be
        sent in a short period of time.
    - name: Delivery Receipt
      description: >-
        Telintel will send a delivery receipt (where applicable) for each SMS
        submission. In order for Telintel to return this result a Callback URL
        must be registered in our platform. Ask a Telintel Support Team associate
        to register your callback URL.
    - name: Receive message
      description: >-
        If a short code or a long number have been purchased and inbound messages
        are required then a CallBack URL for inbound messages must be setup in
        order for Telintel to send a request for each mobile originated (MO)
        message. Please consult the Telintel Support Team to add URL information
        to the Telintel system.
  paths:
    /HttpSmppServiceTypeV2/HttpServiceType:
      post:
        tags:
          - Send Single SMS
        description: The request will contain a JSON object in the body of the request.
        requestBody:
          description: body
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: testhttp
                  password:
                    type: string
                    example: passthttp
                  destinationNumber:
                    type: string
                    example: '573005555555'
                  message:
                    type: string
                    example: testMessage
                  from:
                    type: string
                    example: '573121112222'
                  serviceType:
                    type: string
                    example: serviceTypeTest
                  datacoding:
                    type: integer
                    example: 1
        responses:
          '200':
            description: Succesfull request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    succeded:
                      type: boolean
                      example: true
                    transactionDetails:
                      type: string
                      example: transaction ok
                    errorCodeId:
                      type: integer
                      example: 0
                    messageId:
                      type: string
                      example: '123456'
    /HttpMassSmppGatewayV2/HttpMassService:
      post:
        tags:
          - Send Mass SMS
        description: The request will contain a JSON object in the body of the request.
        requestBody:
          description: body
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: testhttp
                  password:
                    type: string
                    example: passthttp
                  serviceType:
                    type: string
                    example: testhttp
                  smppUtilsMassInformationRequestItemList:
                    type: array
                    items:
                      type: object
                      properties:
                        datacoding:
                          type: integer
                          example: 1
                        destinationNumber:
                          type: string
                          example: '573005555555'
                        message:
                          type: string
                          example: testMessage
                        from:
                          type: string
                          example: '573121112222'
        responses:
          '200':
            description: Succesfull request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    succeded:
                      type: boolean
                      example: true
                    transactionDetails:
                      type: string
                      example: transaction ok
                    errorCodeId:
                      type: integer
                      example: 0
    /Delivery:
      post:
        tags:
          - Delivery Receipt
        description: >-
          The request parameters are sent via a GET (default) to your CallBack
          URL. Telintel will be expecting a response 200 OK response, or it will
          keep retrying until the Delivery Receipt expires (up to 24 hours).
        requestBody:
          description: body
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: smsId
                  submitted:
                    type: integer
                    example: 1
                  delivered:
                    type: integer
                    example: 1
                  submitDate:
                    type: string
                    example: '2015-08-04 14:26:57'
                  doneDate:
                    type: string
                    example: '2015-08-04 14:26:57'
                  finalStatus:
                    type: string
                    example: DELIVRD
                  error:
                    type: integer
                    example: 0
                  text:
                    type: string
                    example: text message
                  mcc:
                    type: integer
                    example: '123'
                  mnc:
                    type: string
                    example: '321'
        responses:
          '200':
            description: Succesfull request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    succeded:
                      type: boolean
                      example: true
    /MO:
      post:
        tags:
          - Receive message
        description: >-
          The request parameters are sent via a GET (default) to your Callback URL
          and Telintel will be expecting a response 200 OK response, or it will
          keep retrying for 24 hours.
        requestBody:
          description: body
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceType:
                    type: string
                    example: ''
                  originTypeOfNumber:
                    type: string
                    example: NATIONAL
                  originNumberingPlanIndicator:
                    type: string
                    example: ISDN
                  sourceAddress:
                    type: string
                    example: '573005555555'
                  destinationTypeOfNumber:
                    type: string
                    example: INTERNATIONAL
                  destinationNumberingPlanIndicator:
                    type: string
                    example: ISDN
                  destinationAddress:
                    type: string
                    example: '86865'
                  esmeClass:
                    type: string
                    example: '0'
                  protocolId:
                    type: integer
                    example: '0'
                  PriorityFlag:
                    type: string
                    example: '0'
                  shortMessage:
                    type: string
                    example: Sae 1234 456
        responses:
          '200':
            description: Succesfull request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    succeded:
                      type: boolean
                      example: true
  components:
    schemas:
      SendSingleSMSRequest:
        type: object
        properties:
          username:
            type: string
            description: >-
              The API username. This can be obtained from your sales account
              manager. 
          password:
            type: string
            description: >-
              The API password. This can be obtained from your sales account
              manager
          destinationNumber:
            type: integer
            description: >-
              The recipient MSISDN. The destination number must be in
              international format and contain only digit values (ex:17858716500
              when sending to the USA).
          message:
            type: string
            description: >-
              The body of the SMS message. The system support concatenated
              messages, and will split it automatically, this happens when the
              maximum length of the datacoding is reached, please reference the
              datacoding parameter below.
          from:
            type: string
            description: >-
              The Sender ID to use in the SMS. The Sender ID may be a telephone
              number (including country code) or it may be alphanumeric (ex:
              Telintel). If an alphanumeric string is used the maximum length is
              11 characters. Destination restrictions may apply.
          datacoding:
            type: integer
            description: >-
              The alphabet to send the message, use as follows: 1= ASCII (160
              character max) 2= ASCII Latin (160 character max) 8= UTF-16 (70
              character max) Default = GSM 7 Bits codification (160 characters
              max) If message length is larger than the proposed per  datacoding,
              concatenated messages will be sent, and each part will be billed
              individually.
          serviceType:
            type: string
            description: >-
              A string that can be used to indicate different accounts for
              separate billing purposes. Please consult your Telintel sales
              manager for more details on how to set up.
      SendSingleSMSResponse:
        type: object
        properties:
          succeded:
            type: boolean
            description: If the send message command succeeded
          transactionDetails:
            type: string
            description: A human readable description of the transaction.
          errorCodeId:
            type: integer
            description: An integer representing the return code of the response / error.
          messageId:
            type: string
            description: A unique ID of the message that was submitted
      SendMassSMSRequest:
        type: object
        properties:
          username:
            type: string
            description: >-
              The API username. This can be obtained from your sales account
              manager. 
          password:
            type: string
            description: >-
              The API password. This can be obtained from your sales account
              manager
          smppUtilsMassInformationRequestItemList:
            type: string
            description: >-
              An object for destinationNumber (numeric), message (string), from
              (string), and datacoding (numeric, integer). Example:
              {"smppUtilsMassInformationRequestItemList":[{"datacoding":1,"destinationNumber":"17865555555","
              from":"17865555550","message":"Test Message 1"}
      SendMassSMSResponse:
        type: object
        properties:
          succeded:
            type: boolean
            description: If the send message command succeeded
          transactionDetails:
            type: string
            description: A human readable description of the transaction.
          errorCodeId:
            type: integer
            description: An integer representing the return code of the response / error.
      DeliveryReceiptRequest:
        type: object
        properties:
          id:
            type: string
            description: The unique message ID reference assigned to eachsubmitted SMS.
          submitted:
            type: integer
            description: 1 = Message was submitted 0 = Message was not submitted
          delivered:
            type: integer
            description: 1 = Message was delivered 0 = Message was not delivered
          submitDate:
            type: string
            description: >-
              Submit date, used in the following format: YYYY-MM-DD HH:MM:SS 
              Example: 2015-08-04 14:26:57
          doneDate:
            type: string
            description: >-
              Message processed end date, used in the following format: YYYY-MM-DD
              HH:MM:SS Example:2015-08-04 14:26:57
          finalStatus:
            type: string
            description: DELIVRD, EXPIRED, DELETED, UNDELIV, ACCEPTD, UNKNOWN, REJECTD
          error:
            type: string
            description: >-
              Where appropriate, this holds a network error code defining the
              reason for the failure of message delivery.
          text:
            type: string
            description: The first 20 characters of the sent message.
          mcc:
            type: string
            description: The MCC value for the network
          mnc:
            type: string
            description: The MCC value for the network
      ReceiveMessageRequest:
        type: object
        properties:
          serviceType:
            type: string
            description: >-
              The service type parameter is optional. It is used to indicate the
              SMS Application service associated with the message. Set to NULL for
              default settings. Please consult your Telintel sales manager for
              more details on how to set up.
          originTypeOfNumber:
            type: integer
            description: >-
              Type of Number for the origin / source address. This setting is used
              to tell your application the format of the address. If specified,
              the available options for TON are: 0 = Unknown 1 = International, 2=
              National, 3= Network Specific, 4= Subscriber Number, 5= Alphanumeric
              6=Abbreviated
          originNumberingPlanIndicator:
            type: integer
            description: >-
              The Numbering Plan Identification setting to tell your application
              the numbering plan associated to the origin / source address. f
              specified, the available options for NPI are: 0 = Unknown 1 =
              ISDN/telephone numbering plan (E163/E164) 3 = Data numbering plan
              (X.121) 4 = Telex numbering plan (F.69) 6 = Land Mobile (E.212) 8 =
              National numbering plan 9 = Private numbering plan 10 = ERMES
              numbering plan (ETSI DE/PS 3 01-3) 13 = Internet (IP) 18 = WAP
              Client Id (to be defined by WAP Forum)
          sourceAddress:
            type: string
            description: >-
              The mobile handset number where the request was made / where the
              message originated. The Source address may be numeric or
              alphanumeric (ex: Telintel). Maximum variables = 21
          destinationTypeOfNumber:
            type: integer
            description: >-
              Type of Number for the destination number / address. This setting is
              used to tell your application the format of the address. If
              specified, the available options for TON are: 0 = Unknown 1 =
              International 2= National 3= Network Specific 4= Subscriber Number
              5= Alphanumeric 6= Abbreviated
          destinationNumberingPlanIndicator:
            type: integer
            description: >-
              Numbering Plan Identification setting to tell your application the
              numbering plan associated to the destination number / address. If
              specified, the available options for NPI are: 0 = Unknown 1 =
              ISDN/telephone numbering plan (E163/E164) 3 = Data numbering plan
              (X.121) 4 = Telex numbering plan (F.69) 6 = Land Mobile (E.212) 8 =
              National numbering plan 9 = Private numbering plan 10 = ERMES
              numbering plan (ETSI DE/PS 3 01-3) 13 = Internet (IP) 18 = WAP
              Client Id (to be defined by WAP Forum)
          destinationAddress:
            type: string
            description: >-
              The destination number entered into the mobile handset / address for
              the SMS.
          esmeClass:
            type: string
            description: >-
              ESM Class parameter is used to indicate special message attributes
              associated with the SMS.
          protocolId:
            type: integer
            description: >-
              Protocol Identifier, network specific field. GSM, set according to
              GSM 03.40 [GSM 03.40]. ANSI-136 (TDMA) for Mobile Terminated
              messages, this field is not used and is ig- nored. ANSI-136 (TDMA)
              for Mobile Originated messages, this value should be set to NULL.
              IS-95 (CDMA) for Mobile Terminated messages, this field is not used
              and is ig- nored. IS-95 (CDMA) for Mobile Originated messages, this
              value should be set to NULL.
          PriorityFlag:
            type: integer
            description: >-
              The priority flag parameter allows the application to assign a
              priority level to the SMS. Priority Levels supported: 0 = Level 0
              (lowest) priority 1 = Level 1 priority 2 = Level 2 priority 3 =
              Level 3 (highest) priority
          shortMessage:
            type: string
            description: The short message parameter contains the message data.
konfigCliVersion: 1.38.61
