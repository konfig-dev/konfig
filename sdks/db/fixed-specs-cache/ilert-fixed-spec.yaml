publishJson:
  company: ilert
  serviceName: false
  sdkName: ilert-{language}-sdk
  clientName: Ilert
  metaDescription: >-
    ilert is a SaaS company for alerting, on-call management and incident
    communication and helps companies to increase their digital uptime. B2C and
    B2B companies from across the globe, including well-known brands such as
    Bertelsmann, TeamViewer and REWE, trust ilert to empower their operations
    teams and ensure everything is running smoothly.
  apiStatusUrls: inherit
  homepage: ilert.com
  developerDocumentation: api.ilert.com/api-docs
  categories:
    - alerting
    - on_call_management
    - incident_communication
rawSpecString: |
  openapi: 3.0.0
  info:
    version: ''
    title: ilert REST API
    description: >-

      The ilert API is a
      [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) API
      and provides programmatic access to entities in ilert and lets you easily
      integrate ilert with 3rd party tools. If you are looking to develop an
      inbound integration (e.g. for a monitoring tool), please use our [Events
      API](https://api.ilert.com). 


      The API supports the JSON content type for requests and responses. The
      response content type is requested via the HTTP Accept header
      (`application/json`). All resources are accessible via https and are located
      at `api.ilert.com/api`. 

      ## Authentication

      The REST API accepts bearer API tokens. Each user may create API keys using
      the ilert web application. Note: Make sure to send the `Bearer ` prefix e.g.
      `Bearer APIKEY` when sending api key requests. By default, access to all
      resources (using any method) requires the client to be authenticated.


      ## Team Context
       When using API tokens, the currently selected team context of the user will not be taken into account, i.e. list results will always return all entities to which the user has a view permission. When using basic auth credentials the currently selected team context of the user will be used to filter resource results. The context may be overwritten for API key calls using the `team-context` HTTP header. Specifying `0` for ALL teams, `-1` for MY teams or a specific team id e.g. `team-context=901` to fetch results for a certain team.  

      ## Errors

      ilert uses HTTP response codes to indicate success or failure of an API
      request. Codes in the 2xx range indicate success, codes in the 4xx range
      indicate a client error (e.g. a missing required parameter) and codes in the
      5xx range indicate an error with ilert's servers. In case of an error, the
      response body contains the following information:

       Attribute     | Description 
       ------------- | ------------- 
       status  | the corresponsing HTTP status code  
       message  | a human readable description of the error 
       code  | error code, used to identify error type  

      ## API Versioning

      Changes to our API are always backwards-compatible. To get more information
      about our API versioning and historical changes, please <a
      href='https://docs.ilert.com/rest-api/api-version-history'
      target='_blank'>take a look here</a>.
    x-logo:
      url: ./ilert-logo-spaced.png
      backgroundColor: '#fafafa'
      altText: ilert documentation logo
  security:
    - apiKey: []
  tags:
    - name: Numbers
    - name: Integrations
    - name: Events
    - name: Heartbeats
    - name: Series
    - name: Users
    - name: Contacts
    - name: Notification Preferences
    - name: Escalation Policies
    - name: Schedules
    - name: Alert Sources
    - name: Alerts
    - name: Alert Actions
    - name: Support Hours
    - name: Log-Entries
    - name: Notifications
    - name: Connectors
    - name: Teams
    - name: On-Calls
    - name: Maintenance Windows
    - name: Incident Templates
    - name: Services
    - name: Service Outages
    - name: Automation Rules
    - name: Incidents
    - name: Metrics
    - name: Metric Data Sources
    - name: Status Pages
    - name: Reports
  paths:
    /users/{user-id}:
      get:
        tags:
          - Users
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get the specified user.
        responses:
          '200':
            description: the user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
      put:
        tags:
          - Users
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: the user object
        summary: Update an existing user.
        responses:
          '200':
            description: the updated user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
      delete:
        tags:
          - Users
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Delete the specified user.
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/contacts/emails:
      get:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get a user's emails
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactEmail'
      post:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactEmailPost'
          required: true
        summary: Create a new email
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactEmail'
    /users/{user-id}/contacts/emails/{id}:
      get:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get a specific email
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactEmail'
      put:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactEmailPost'
        summary: Update a user's email
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactEmail'
      delete:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified email
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/contacts/phone-numbers:
      get:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get a user's phone numbers
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ContactPhoneNumber'
      post:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactPhoneNumberPost'
          required: true
        summary: Create a phone number
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactPhoneNumber'
    /users/{user-id}/contacts/phone-numbers/{id}:
      get:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get specific phone number
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactPhoneNumber'
      put:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactPhoneNumberPost'
        summary: Update a user's phone number
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContactPhoneNumber'
      delete:
        tags:
          - Contacts
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified phone number
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/notification-preferences/alerts:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get alert notification preferences of a user
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/NotificationPreferencesAlert'
      post:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesAlertPost'
          required: true
        summary: Create an alert notification preference
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesAlert'
    /users/{user-id}/notification-preferences/alerts/{id}:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get specific notification preferences alert
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesAlert'
      put:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesAlertPost'
        summary: Update a user's alert notification preference
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesAlert'
      delete:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified notification preferences alert
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/notification-preferences/duties:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get duty notification preferences of a user
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/NotificationPreferencesDuty'
      post:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDutyPost'
          required: true
        summary: Create a duty notification preference
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesDuty'
    /users/{user-id}/notification-preferences/duties/{id}:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get specific notification preferences duty
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesDuty'
      put:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesDutyPost'
        summary: Update a user's duty notification preference
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesDuty'
      delete:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified notification preferences duty
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/notification-preferences/updates:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get update notification preferences of a user
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/NotificationPreferencesUpdate'
      post:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesUpdatePost'
          required: true
        summary: Create an update notification preference
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesUpdate'
    /users/{user-id}/notification-preferences/updates/{id}:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get specific notification preferences update
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesUpdate'
      put:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesUpdatePost'
        summary: Update a user's update notification preference
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesUpdate'
      delete:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified notification preferences update
        responses:
          '204':
            description: if deletion was successful
    /users/{user-id}/notification-preferences/subscriptions:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Get subscription notification preferences of a user
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/NotificationPreferencesSubscription'
      post:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesSubscriptionPost'
          required: true
        summary: Create a subscription notification preference
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesSubscription'
    /users/{user-id}/notification-preferences/subscriptions/{id}:
      get:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Get specific notification preferences subscription
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesSubscription'
      put:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferencesSubscriptionPost'
        summary: Update a user's subscription notification preference
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationPreferencesSubscription'
      delete:
        tags:
          - Notification Preferences
        parameters:
          - $ref: '#/components/parameters/user-id-in-path'
          - $ref: '#/components/parameters/id'
        summary: Delete the user's specified notification preferences subscription
        responses:
          '204':
            description: if deletion was successful
    /numbers:
      get:
        tags:
          - Numbers
        security: []
        summary: >-
          List available phone numbers that ilert uses to send voice and SMS
          notifications
        responses:
          '200':
            description: List of phone numbers
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/OutboundNumber'
    /integrations:
      get:
        tags:
          - Integrations
        security: []
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: >-
          List available inbound and outbound integrations. Note: this resource is
          paginated.
        responses:
          '200':
            description: list of integrations
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Integration'
    /users:
      get:
        tags:
          - Users
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: List existing users.
        responses:
          '200':
            description: list of users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      post:
        tags:
          - Users
        summary: Create a new user. Requires ADMIN privileges.
        description: |
          **Sample request**

          ```json
          Request URL: https://api.ilert.com/api/users

          {
            "firstName": "John",
            "lastName": "Doe",
            "email": "john@acme.com",
            "position": "Software Engineer",
          }
          ```

          **Response**

          ````json
          {
            "id": 2188373,
            "firstName": "John",
            "lastName": "Doe",
            "email": "john@acme.com",
            "position": "Software Engineer",
            "timezone": "Europe/Berlin",
            "language": "de",
            "role": "RESPONDER",
           }
          ````
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
          description: the user object
        responses:
          '201':
            description: >-
              Created. The URI of the created user entity is included in the
              Location header and the user object is included in the body.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
    /users/current:
      get:
        tags:
          - Users
        summary: Get the currently authenticated user.
        responses:
          '200':
            description: user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
      put:
        summary: Update the current user.
        tags:
          - Users
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
          description: user object
        responses:
          '200':
            description: the updated user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
    /alerts:
      post:
        tags:
          - Alerts
        summary: >-
          Create alerts with customised parameters without requiring events from
          monitoring tools that use our Events API.
        description: >-
          Escalation of the alert will be based on the alert source's escalation
          policy or may be overridden by providing a specific escalation policy or
          lastly specific set of responders (users), latter will only notify the
          user(s) and will not escalate any further.
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualAlert'
          description: the alert
          required: true
        responses:
          '201':
            description: the created and freshly escalated alert
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Alert'
      get:
        tags:
          - Alerts
        summary: >-
          List alerts (optionally matching certain criteria that are specified by
          query parameters).
        description: >-
          **Sample URLs**

          * List only alerts that are either in state `PENDING` or `ACCEPTED`: <br
          /> https://api.ilert.com/api/alerts?states=PENDING&states=ACCEPTED

          * List only alerts that belong to the alert source with ID `1243` or
          `1743` and where user `jd` is a responder: <br />
            https://api.ilert.com/api/alerts?sources=1243&sources=1743&responders=jd
          * Paginate first batch for a range of alerts (note: query parameters
          should be url encoded): <br />
           https://api.ilert.com/api/alerts?start-index=0&max-results=100&from=2021-03-01T21:24:56.771Z&until=2021-04-01T21:24:56.771Z
          * Fetch next page, assuming equal to max-results were returned: <br/>
           https://api.ilert.com/api/alerts?start-index=100&max-results=100&from=2021-03-01T21:24:56.771Z&until=2021-04-01T21:24:56.771Z
          * Pagination should be done based on the `reportTime` field using the
          parameters `from` and `until` as well as `start-index`. When building a
          local alert state store the `id` field should be used as identifier. The
          `alertKey` field is not suitable for this, as it is used to group
          related alerts to each other.
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (nextEscalationUser)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - nextEscalationUser
          - in: query
            name: states
            description: state of the alert
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - PENDING
                  - ACCEPTED
                  - RESOLVED
          - in: query
            name: sources
            description: alert source IDs of the alert's alert source
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
          - in: query
            name: policies
            description: escalation policy IDs of the alert's escalation policy
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
          - in: query
            name: responders
            description: user ids of the user that is a responder of the alert
            explode: true
            schema:
              type: array
              items:
                type: string
          - in: query
            name: from
            description: >-
              from date, ISO-UTC e.g. 2021-05-25T21:24:56.771Z, based on
              reportTime
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: >-
              until date, ISO-UTC e.g. 2021-05-26T21:24:56.771Z, based on
              reportTime
            schema:
              type: string
              format: date-time
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Alert'
    /alerts/count:
      get:
        tags:
          - Alerts
        summary: Get the alert count matching the specified criteria.
        parameters:
          - in: query
            name: states
            description: state of the alert
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - PENDING
                  - ACCEPTED
                  - RESOLVED
          - in: query
            name: sources
            description: alert source IDs of the alert's alert source
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
          - in: query
            name: responders
            description: user ids of the user that is a responder of the alert
            explode: true
            schema:
              type: array
              items:
                type: string
          - in: query
            name: from
            description: from date
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: until date
            schema:
              type: string
              format: date-time
        responses:
          '200':
            description: the number of alerts matching the specified criteria
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CountResponse'
    /alerts/{id}:
      get:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (escalationRules,
              nextEscalationUser)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - escalationRules
                  - nextEscalationUser
        summary: Get the alert with the specified id.
        responses:
          '200':
            description: alert object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Alert'
    /alerts/{id}/suggested-responders:
      get:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
          - name: lang
            in: query
            description: locale for response text eg. 'en' or 'de'
            schema:
              type: string
        summary: >-
          Get available (assignable) responders for the alert with the specified
          id.
        responses:
          '200':
            description: the list of alert responders
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SuggestedResponder'
    /alerts/{id}/responders:
      post:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Add an additional responder to the alert.
        responses:
          '201':
            description: the created alert responder object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertResponder'
          '404':
            description: Responder did not exist
          '405':
            description: Responder is already present on the alert
    /alerts/{id}/responders/{user-id}:
      delete:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
          - $ref: '#/components/parameters/user-id-in-path'
        summary: Remove a responder from the alert.
        responses:
          '204':
            description: Responder has been removed
          '404':
            description: Responder did not exist
    /alerts/{id}/assign:
      put:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
          - $ref: '#/components/parameters/user-id-in-query'
          - name: policy
            in: query
            description: numeric policy id
            schema:
              type: string
          - name: schedule
            in: query
            description: numeric schedule id
            schema:
              type: string
        summary: Assign the alert.
        description: >-
          Either provide a user-id, policy-id (escalation policy) or schedule-id
          (on-call schedule) that the specific alert should be assigned to.
        responses:
          '200':
            description: the updated alert object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Alert'
    /alerts/{id}/accept:
      put:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Accept the Alert.
        responses:
          '200':
            description: the updated alert object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Alert'
    /alerts/{id}/resolve:
      put:
        tags:
          - Alerts
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Resolve the alert.
        responses:
          '200':
            description: the updated alert object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Alert'
    /alerts/{id}/notifications:
      get:
        tags:
          - Alerts
          - Notifications
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get notifications for the specified alert.
        responses:
          '200':
            description: a list of notification objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Notification'
    /alerts/{id}/log-entries:
      get:
        tags:
          - Alerts
          - Log-Entries
        parameters:
          - $ref: '#/components/parameters/id'
          - name: lang
            in: query
            description: log entry language
            schema:
              type: string
              enum:
                - en
                - de
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (vars)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - vars
          - in: query
            name: filter-types
            description: filter-type (group) of the log
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - NOTIFICATIONS
                  - ALERT_SOURCE_EVENTS
                  - CALL_ROUTING_EVENTS
                  - ALERT_UPDATES
                  - CONNECTOR_EVENTS
                  - INCIDENT_COMMUNICATIONS
        summary: Get log entries for the specified alert.
        responses:
          '200':
            description: list of log entries
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/LogEntry'
    /alerts/{id}/actions:
      get:
        tags:
          - Alert Actions
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get available actions for specified alert.
        responses:
          '200':
            description: list of alert actions
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertActionTrigger'
      post:
        tags:
          - Alert Actions
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertActionTrigger'
          description: the alert action, you might skip the 'history' field
          required: true
        summary: Invoke a specific alert action.
        responses:
          '201':
            description: the alert action result, validate the 'success' field
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertActionResult'
    /schedules:
      get:
        tags:
          - Schedules
        summary: List on-call schedules.
        parameters:
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (currentShift, nextShift,
              scheduleLayers [only available for RECURRING schedules], shifts
              [only available for STATIC schedules], past [show shifts in the
              past, only for STATIC])
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - scheduleLayers
                  - shifts
                  - currentShift
                  - nextShift
                  - past
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of
              schedules.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 20
              default: 20
        responses:
          '200':
            description: a list of on-call schedules
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Schedule'
      post:
        tags:
          - Schedules
        parameters:
          - name: abort-on-gaps
            in: query
            required: false
            description: Used for static schedules to prevent creating schedules with gaps
            schema:
              type: boolean
        requestBody:
          $ref: '#/components/requestBodies/Schedule'
        summary: Create a new on-call schedule.
        responses:
          '201':
            description: The created on-call schedule
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Schedule'
    /schedules/{id}:
      get:
        tags:
          - Schedules
        summary: Get the on-call schedule with the specified id.
        parameters:
          - $ref: '#/components/parameters/id'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (currentShift, nextShift,
              scheduleLayers [only available for RECURRING schedules], shifts
              [only available for STATIC schedules], past [show shifts in the
              past, only for STATIC])
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - scheduleLayers
                  - shifts
                  - currentShift
                  - nextShift
                  - past
        responses:
          '200':
            description: >-
              The schedule object. (scheduleLayers [only available for RECURRING
              schedules], shifts [only available for STATIC schedules])
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Schedule'
      put:
        tags:
          - Schedules
        parameters:
          - $ref: '#/components/parameters/id'
          - name: abort-on-gaps
            in: query
            required: false
            description: Used for static schedules to prevent updating schedules with gaps
            schema:
              type: boolean
        requestBody:
          $ref: '#/components/requestBodies/Schedule'
        summary: Update an on-call schedule.
        responses:
          '200':
            description: The updated on-call schedule
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Schedule'
      delete:
        tags:
          - Schedules
        summary: Delete the on-call schedule with the specified id.
        parameters:
          - $ref: '#/components/parameters/id'
        responses:
          '204':
            description: empty response
    /schedules/{id}/shifts:
      get:
        tags:
          - Schedules
        summary: Get shifts for the specified schedule and date range.
        parameters:
          - $ref: '#/components/parameters/id'
          - in: query
            name: from
            description: from date, default is start of last month
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: until date, default is from date plus 3 months
            schema:
              type: string
          - in: query
            name: exclude-overrides
            description: if true, shifts won't include overrides
            schema:
              type: boolean
              default: false
        responses:
          '200':
            description: the shift objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Shift'
    /schedules/{id}/overrides:
      get:
        tags:
          - Schedules
        summary: Get overrides for the specified schedule.
        parameters:
          - $ref: '#/components/parameters/id'
        responses:
          '200':
            description: the shift objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Shift'
      put:
        tags:
          - Schedules
        summary: Add an override shift to a schedule.
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
          description: >-
            the shift which should overwrite the schedule (must not be in the
            past)
          required: true
        responses:
          '200':
            description: the overwritten schedule object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ScheduleRel'
    /schedules/{id}/user-on-call:
      get:
        tags:
          - Schedules
        summary: >-
          Get the user (wrapped in a shift object) on-call for the specified
          schedule.
        parameters:
          - $ref: '#/components/parameters/id'
        responses:
          '200':
            description: the current shift
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Shift'
          '204':
            description: if no user is on-call
    /on-calls:
      get:
        tags:
          - On-Calls
        parameters:
          - name: policies
            in: query
            required: false
            description: escalation policy ids to filter on call duties for
            schema:
              type: number
          - name: policy-levels
            in: query
            required: false
            description: >-
              can be provided instead of 'policies', must be a serialised and
              urlencoded JSON object e.g. ?policy-levels="{ "id": 12, "level": 1
              }" where id is the policy id and level is the escalation level that
              should be included
            schema:
              type: string
          - name: schedules
            in: query
            required: false
            description: on call schedule ids to filter on call duties for
            schema:
              type: number
          - name: users
            in: query
            required: false
            description: user ids to filter on call duties for
            schema:
              type: number
          - name: expand
            in: query
            required: false
            description: 'include full entities for: policy, escalationPolicy or user'
            schema:
              type: string
          - name: from
            in: query
            required: false
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, start of the time
              range, may not exceed 3 months in total span, defaults to current
              time
            schema:
              type: string
          - name: until
            in: query
            required: false
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, end of the time
              range, must be after 'from', defaults to current time
            schema:
              type: string
          - name: timezone
            in: query
            required: false
            description: Time zone in which the results will be rendered, defaults to UTC
            schema:
              type: string
          - name: start-index
            in: query
            required: false
            description: offset for the search results, defaults to 0
            schema:
              type: number
          - name: max-results
            in: query
            required: false
            description: limit for the search results, defaults to 50, may not exceed 250
            schema:
              type: number
        summary: List on-calls with flexible filters
        responses:
          '200':
            description: returns a list of on-call objects for the searched window
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/OnCall'
    /alert-sources:
      get:
        tags:
          - Alert Sources
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of alert
              sources.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 50
              default: 50
        summary: List alert sources.
        responses:
          '200':
            description: the alert source object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AlertSourceNoIncludes'
      post:
        tags:
          - Alert Sources
        requestBody:
          $ref: '#/components/requestBodies/AlertSourceRel'
        summary: Create a new alert source.
        responses:
          '201':
            description: >-
              The URI of the alert source will be included in the location header
              and the alert source will be included in the body.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertSource'
    /alert-sources/{id}:
      get:
        tags:
          - Alert Sources
        parameters:
          - $ref: '#/components/parameters/source-id-or-key'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (detailsTemplate,
              summaryTemplate, routingTemplate, linkTemplates, priorityTemplate,
              textTemplate)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - detailsTemplate
                  - summaryTemplate
                  - routingTemplate
                  - linkTemplates
                  - priorityTemplate
                  - textTemplate
        summary: Get the alert source with specified id or alternatively api key.
        responses:
          '200':
            description: the alert source object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertSource'
      put:
        tags:
          - Alert Sources
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/AlertSourceRel'
        summary: Update an existing alert source.
        responses:
          '200':
            description: the updated alert source object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertSource'
      delete:
        tags:
          - Alert Sources
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Delete the specified alert source.
        responses:
          '204':
            description: if deletion was successful
    /support-hours:
      get:
        tags:
          - Support Hours
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of support
              hours.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 50
              default: 50
        summary: List support hours.
        responses:
          '200':
            description: list of support hours
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/SupportHour'
      post:
        tags:
          - Support Hours
        requestBody:
          $ref: '#/components/requestBodies/SupportHour'
        summary: Create a new support hour.
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SupportHour'
    /support-hours/{id}:
      get:
        tags:
          - Support Hours
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the support hour with specified id.
        responses:
          '200':
            description: the support hour object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SupportHour'
      put:
        tags:
          - Support Hours
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/SupportHour'
        summary: Update an existing support hour.
        responses:
          '200':
            description: the updated support hour object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SupportHour'
      delete:
        tags:
          - Support Hours
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Delete the specified support hour.
        responses:
          '204':
            description: if deletion was successful
    /maintenance-windows:
      get:
        tags:
          - Maintenance Windows
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: List maintenance windows.
        responses:
          '200':
            description: the maintenance window object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/MaintenanceWindow'
      post:
        tags:
          - Maintenance Windows
        requestBody:
          $ref: '#/components/requestBodies/MaintenanceWindow'
        summary: Create a new maintenance window.
        responses:
          '200':
            description: >-
              The URI of the maintenance window will be included in the location
              header and the maintenance window will be included in the body.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MaintenanceWindow'
    /maintenance-windows/{id}:
      get:
        tags:
          - Maintenance Windows
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the maintenance window with specified id.
        responses:
          '200':
            description: the maintenance window object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MaintenanceWindow'
      put:
        tags:
          - Maintenance Windows
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/MaintenanceWindow'
        summary: Update an existing maintenance window.
        responses:
          '200':
            description: the updated maintenance window object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MaintenanceWindow'
      delete:
        tags:
          - Maintenance Windows
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Delete the specified maintenance window.
        responses:
          '204':
            description: if deletion was successful
    /escalation-policies:
      get:
        tags:
          - Escalation Policies
        summary: List escalation policies.
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of
              escalation policies.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 50
              default: 50
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/EscalationPolicy'
      post:
        tags:
          - Escalation Policies
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationPolicy'
          description: the escalation polocy
          required: true
        summary: Create a new escalation policy.
        responses:
          '201':
            description: >-
              Created. The URI of the escalation policy is included in the
              Location header and the entity in the body
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EscalationPolicy'
    /escalation-policies/{id}:
      get:
        tags:
          - Escalation Policies
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get escalation policy with the specified id.
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EscalationPolicy'
      put:
        tags:
          - Escalation Policies
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationPolicy'
          description: the escalation policy
          required: true
        summary: Update an existing escalation policy.
        responses:
          '200':
            description: The updated escalation policy
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EscalationPolicy'
      delete:
        tags:
          - Escalation Policies
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Delete the specified escalation policy.
        responses:
          '204':
            description: if deletion was successful
    /series/{key}:
      post:
        tags:
          - Series
        security: []
        summary: Ingest a series for a metric
        description: >-
          Post a time point or multiple time points (series) to a metric. User
          authorization is not required instead provide the integration key of
          your metric.
        parameters:
          - $ref: '#/components/parameters/key'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesOption'
          description: the time point or series of time points
          required: true
        responses:
          '202':
            description: The time points have been accepted
    /events:
      post:
        tags:
          - Events
        security: []
        summary: Post an event to ilert.
        description: >
          Use the Event API to integrate your monitoring or ticketing tools with
          ilert. It provides a single API endpoint that allows you to create,
          accept and resolve alerts in ilert. It is designed around the notion
          that monitoring tools  send events when 

          * a problem occurs (an `ALERT` event in ilert terminology)

          * a problem is acknowledged, indicating that someone is working on the
          resolution of the problem (an `ACCEPT`event)

          * a problem is resolved (a `RESOLVED`event)


          The API accepts these events, routes them to the alert source to which
          the api key belongs, and takes appropriate action.


          An event object contains the following attributes:


          Attribute     | Desription 

          ------------- | ------------- 

          apiKey  | **Required**. The API key of the alert source. 

          eventType  | **Required**. Must be either `ALERT`, `ACCEPT`, or
          `RESOLVE`

          summary | **Required**. The event summary. Will be used as the alert
          summary if a new alert is created.

          details | Optional. The event details. Will be used as the alert details
          if a new alert is created.

          alertKey | Optional. For `ALERT` events, the alertKey can be used to
          deduplicate or group events. If an open alert with the key already
          exists, the event will be appended to the alert's event log. Otherwise a
          new alert will be created. For `ACCEPT` and `RESOLVE` events, the
          alertKey is used to reference the open alert which is to be accepted or
          resolved by this event.

          priority | Optional. Must be either HIGH or LOW. Will overwrite the
          evaluated priority of the alert source.

          images | Optional. A list of images containing src, href and alt.

          links | Optional. A list of links, containing href and text.

          customDetails | Optional. Additional custom details for the event.

          routingKey | Optional. Overwrite escalation policy for ALERT events.



          ### Getting started

          Before you can start making API requests, you need to create an API
          alert source in the ilert web interface:

          1. Go to "Alert sources"

          2. Click on "Add a new alert source"

          3. Fill out the form chosing "API" as the integration type and save.


          An API key will be generated for the alert source after creation. You
          can obtain the key on the alert sources' details page. You can only use
          the key to post events to this alert source and you don't need to
          provide any other credentials when using the Event API.


          ### Example: create, accept and  resolve an alert

          The following example will guide you through a basic workflow where an
          alert is created, accepted, and resolved.


          #### Create alert

          An alert can be created by posting an `ALERT` event:


          **Request**

          ```json

          https://api.ilert.com/api/events


          {
            "apiKey": "edf0235f-a720-458e-a7fd-6b001042a4f4",
            "eventType": "ALERT",
            "alertKey": "srv/mail01",
            "summary": "Host srv/mail01 is CRITICAL"
          }

          ```


          Let's say we want to post an update saying that the host is down. To do
          that, we will post another `ALERT` event using the same alertKey:


          **Request**

          ```json

          https://api.ilert.com/api/events


          {
            "apiKey": "edf0235f-a720-458e-a7fd-6b001042a4f4",
            "eventType": "ALERT",
            "alertKey": "srv/mail01",
            "summary": "Host srv/mail01 is DOWN"
          }

          ```


          #### Accept an 

          Continuing our example from above, we want to accept the alert that we
          created. In order to that, we post an `ACCEPT`event using the same
          alertKey that we used when we posted the `ALERT` event.


          **Request**

          ```json

          https://api.ilert.com/api/events


          {
            "apiKey": "edf0235f-a720-458e-a7fd-6b001042a4f4",
            "eventType": "ACCEPT",
            "alertKey": "srv/mail01"
          }

          ```


          The alert is now in ACCEPTED state stopping any further notifications.


          #### Resolve an alert

          To resolve the alert, we simply post a `RESOLVE` event using the alert
          key from above.


          **Request**

          ```json

          https://api.ilert.com/api/events


          {
            "apiKey": "edf0235f-a720-458e-a7fd-6b001042a4f4",
            "eventType": "RESOLVE",
            "alertKey": "srv/mail01"
          }

          ```


          The alert is now resolved.




          ### Dealing with errors and retries

          We strongly recommend to implement a retry logic on the client side if
          an error occurs (ideally using an [exponential
          backoff](https://en.wikipedia.org/wiki/Exponential_backoff)). 


          Retry a failed request for the following errors:

          * any network errors

          * 5xx errors: this indicates an error in ilert

          * 429 Too Many Requests: you have reached your rate limit



          Do NOT retry a request for the following HTTP response codes:

          * 202 Accepted: the request was successful

          * 400 Bad Request: (check the error message for details)
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: the event
          required: true
        responses:
          '202':
            description: The event has been accepted
    /heartbeats/{key}:
      head:
        tags:
          - Heartbeats
        security: []
        parameters:
          - $ref: '#/components/parameters/key'
        summary: Ping heartbeat alert source.
        responses:
          '202':
            description: Arbitrary accept response
      get:
        tags:
          - Heartbeats
        security: []
        parameters:
          - $ref: '#/components/parameters/key'
        summary: Ping heartbeat alert source.
        responses:
          '202':
            description: Arbitrary accept response
      post:
        tags:
          - Heartbeats
        security: []
        parameters:
          - $ref: '#/components/parameters/key'
        summary: Ping heartbeat alert source.
        responses:
          '202':
            description: Arbitrary accept response
    /alert-actions:
      get:
        tags:
          - Alert Actions
        parameters:
          - name: source
            in: query
            description: alert source id
            schema:
              type: number
          - name: connector
            in: query
            description: connector id
            schema:
              type: string
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of alert
              actions.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 100
              default: 100
        summary: Get alert actions.
        responses:
          '200':
            description: The filtered alert actions
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AlertAction'
      post:
        tags:
          - Alert Actions
        requestBody:
          $ref: '#/components/requestBodies/AlertAction'
        summary: Create a new alert action.
        responses:
          '200':
            description: The newly created alert action
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertAction'
    /alert-actions/{id}:
      get:
        tags:
          - Alert Actions
        parameters:
          - $ref: '#/components/parameters/string-id'
        summary: Get a specific alert action.
        responses:
          '200':
            description: The requested alert action
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertAction'
      put:
        tags:
          - Alert Actions
        parameters:
          - $ref: '#/components/parameters/string-id'
        requestBody:
          $ref: '#/components/requestBodies/AlertAction'
        summary: 'Update the specific alert action. (note: type cannot be changed)'
        responses:
          '200':
            description: The updated alert action
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AlertAction'
      delete:
        tags:
          - Alert Actions
        parameters:
          - $ref: '#/components/parameters/string-id'
        summary: Remove a specific alert action.
        responses:
          '204':
            description: Empty body delete response
    /connectors:
      get:
        tags:
          - Connectors
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: Get connectors.
        responses:
          '200':
            description: The connectors
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Connector'
      post:
        tags:
          - Connectors
        requestBody:
          $ref: '#/components/requestBodies/Connector'
        summary: Create a new connector.
        responses:
          '200':
            description: The newly created connector
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Connector'
    /connectors/{id}:
      get:
        tags:
          - Connectors
        parameters:
          - $ref: '#/components/parameters/string-id'
        summary: Get a specific connector.
        responses:
          '200':
            description: The requested connector
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Connector'
      put:
        tags:
          - Connectors
        parameters:
          - $ref: '#/components/parameters/string-id'
        requestBody:
          $ref: '#/components/requestBodies/Connector'
        summary: 'Update the specific connector. (note: type cannot be changed)'
        responses:
          '200':
            description: The updated connector
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Connector'
      delete:
        tags:
          - Connectors
        parameters:
          - $ref: '#/components/parameters/string-id'
        summary: Remove a specific connector.
        responses:
          '204':
            description: Empty body delete response
    /teams:
      get:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
          - name: members
            in: query
            required: false
            description: >-
              optional, filter teams for specific members (currently only a single
              occurrence of this param is allowed)
            schema:
              type: number
        summary: Get teams.
        responses:
          '200':
            description: The teams
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Team'
      post:
        tags:
          - Teams
        requestBody:
          $ref: '#/components/requestBodies/Team'
        summary: Create a new team.
        responses:
          '200':
            description: The newly created team
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
    /teams/{id}:
      get:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get a specific team.
        responses:
          '200':
            description: The requested team
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
      put:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/Team'
        summary: Update the specific team
        responses:
          '200':
            description: The updated team
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Team'
      delete:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific team.
        responses:
          '204':
            description: Empty body delete response
    /teams/{id}/members:
      post:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamMember'
          description: the team member
          required: true
        summary: Add a new team member to specific team
        responses:
          '200':
            description: The added team member
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TeamMember'
    /teams/{id}/members/{id}:
      delete:
        tags:
          - Teams
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific member of a specific team.
        responses:
          '204':
            description: Empty body delete response
    /reports/alerts:
      get:
        tags:
          - Reports
        parameters:
          - name: sources
            in: query
            required: false
            description: alert source ids to filter metrics for
            schema:
              type: number
          - name: policies
            in: query
            required: false
            description: escalation policy ids to filter metrics for
            schema:
              type: number
          - name: numbers
            in: query
            required: false
            description: phone numbers of call routing numbers to filter metrics for
            schema:
              type: string
          - name: from
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, start of the time
              range, may not exceed 1 year in total span
            schema:
              type: string
          - name: until
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, end of the time
              range, must be after 'from', must not be in the future
            schema:
              type: string
          - name: timezone
            in: query
            required: false
            description: >-
              Time zone in which the results will be rendered, defaults to
              tenant's configured default timezone
            schema:
              type: string
          - name: metric
            in: query
            required: false
            description: >-
              Describes the metric that should be fetched choose one of: COUNT,
              MTTA or MTTR - defaults to COUNT
            schema:
              type: string
          - name: group-by
            in: query
            required: false
            description: >-
              Defines the grouping of metrics, choose one of: DAY, WEEK or MONTH -
              defaults to WEEK
            schema:
              type: string
          - name: priority
            in: query
            required: false
            description: >-
              Sets the priority filter that should be applied, choose one of: LOW,
              HIGH or ALL - defaults to ALL
            schema:
              type: string
        summary: List alert metrics for the requested resources
        responses:
          '200':
            description: >-
              an array of alert report metrics, each metric is another array
              containing data in the following order: 


              [long:alertSourceId, long:escalationPolicyId,
              string:callRoutingNumberPhoneNumber, string:ISO-8601, long:value]


              e.g. [ [202541, 13541, "", "2021-08", 15] ]


              Please note: the ISO-8601 (4th column) in this case depends on the
              chosen 'group-by' parameter. DAY=2021-08-01, WEEK=2021-W12,
              MONTH=2021-08
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    items:
                      oneOf:
                        - type: number
                        - type: string
              metric sample:
                examples:
                  response:
                    value:
                      summary: metric sample
                      value:
                        - - 202541
                          - 13541
                          - ''
                          - 2021-08
                          - 15
    /reports/alerts/summary:
      get:
        tags:
          - Reports
        parameters:
          - name: sources
            in: query
            required: false
            description: alert source ids to filter metrics for
            schema:
              type: number
          - name: policies
            in: query
            required: false
            description: escalation policy ids to filter metrics for
            schema:
              type: number
          - name: numbers
            in: query
            required: false
            description: phone numbers of call routing numbers to filter metrics for
            schema:
              type: string
          - name: from
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, start of the time
              range, may not exceed 1 year in total span
            schema:
              type: string
          - name: until
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, end of the time
              range, must be after 'from', must not be in the future
            schema:
              type: string
          - name: timezone
            in: query
            required: false
            description: >-
              Time zone in which the results will be rendered, defaults to
              tenant's configured default timezone
            schema:
              type: string
          - name: metric
            in: query
            required: false
            description: >-
              Describes the metric that should be fetched choose one of: COUNT,
              MTTA or MTTR - defaults to COUNT
            schema:
              type: string
          - name: group-by
            in: query
            required: false
            description: >-
              Defines the grouping of metrics, choose one of: DAY, WEEK or MONTH -
              defaults to WEEK
            schema:
              type: string
          - name: priority
            in: query
            required: false
            description: >-
              Sets the priority filter that should be applied, choose one of: LOW,
              HIGH or ALL - defaults to ALL
            schema:
              type: string
        summary: Summarize a list of alert metrics
        responses:
          '200':
            description: >-
              an array containing summarized alert report metrics for the
              requested resource
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      alertSourceId:
                        type: number
                      escalationPolicyId:
                        type: number
                      callRoutingNumberPhoneNumber:
                        type: string
                      count:
                        type: number
                      mtta:
                        type: number
                      mttr:
                        type: number
    /reports/api-keys/usage:
      get:
        tags:
          - Reports
        parameters:
          - name: scopes
            in: query
            required: false
            description: >-
              scopes of our API resources e.g. alert see
              https://docs.ilert.com/rest-api/developing-ilert-apps/token-lifetimes-error-codes-app-verification-etc.#ilert-oauth2-scopes
            schema:
              type: string
          - name: from
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, start of the time
              range, may not exceed 1 month (31 days) in total span (use this to
              paginate)
            schema:
              type: string
          - name: until
            in: query
            required: true
            description: >-
              date-time ISO-UTC e.g. 2021-05-25T21:24:56.771Z, end of the time
              range, must be after 'from', must not be in the future (use this to
              paginate)
            schema:
              type: string
          - name: timezone
            in: query
            required: false
            description: >-
              Time zone in which the results will be rendered, defaults to
              tenant's configured default timezone
            schema:
              type: string
        summary: List API key usage metrics for the requested resources
        description: This endpoint requires 'ADMIN' permissions
        responses:
          '200':
            description: >-
              an array of usage metrics, each metric is another array containing
              data in the following order: 


              [long:userId, string:scope, string:ISO-8601, long:value]


              e.g. [ [202541, "source", "2023-04-21", 15] ]


              Please note: the ISO-8601 (3th column) in this case is always DAY
              (2021-08-01) usually 24 hours apart, but there is a slight chance
              that the same userId and scope have multiple entries for the same
              DAY
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    items:
                      oneOf:
                        - type: number
                        - type: string
              metric sample:
                examples:
                  response:
                    value:
                      summary: metric sample
                      value:
                        - - 202541
                          - alert
                          - 2023-04
                          - 15
    /incident-templates:
      get:
        tags:
          - Incident Templates
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: Get incident templates.
        responses:
          '200':
            description: The incident templates
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/IncidentTemplate'
      post:
        tags:
          - Incident Templates
        requestBody:
          $ref: '#/components/requestBodies/IncidentTemplate'
        summary: Create a new incident template.
        responses:
          '200':
            description: The newly created incident template
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentTemplate'
    /incident-templates/{id}:
      get:
        tags:
          - Incident Templates
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get a specific incident template.
        responses:
          '200':
            description: The requested incident template
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentTemplate'
      put:
        tags:
          - Incident Templates
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/IncidentTemplate'
        summary: Update the specific incident template
        responses:
          '200':
            description: The updated incident template
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentTemplate'
      delete:
        tags:
          - Incident Templates
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific incident template.
        responses:
          '204':
            description: Empty body delete response
    /services:
      get:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of
              services. (Note: when using ?include maximum is reduced to 25)
            required: false
            schema:
              type: integer
              format: int32
              maximum: 100
              default: 10
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed, uptime, incidents)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
                  - uptime
                  - incidents
        summary: Get services.
        responses:
          '200':
            description: The services
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Service'
      post:
        tags:
          - Services
        requestBody:
          $ref: '#/components/requestBodies/ServiceNoIncludes'
        summary: Create a new service.
        responses:
          '200':
            description: The newly created service
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceNoIncludes'
    /services/{id}:
      get:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/id'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed, uptime, incidents)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
                  - uptime
                  - incidents
        summary: Get a specific service.
        responses:
          '200':
            description: The requested service
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Service'
      put:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/ServiceNoIncludes'
        summary: Update the specific service
        responses:
          '200':
            description: The updated service
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceNoIncludes'
      delete:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific service.
        responses:
          '204':
            description: Empty body delete response
    /automation-rules:
      get:
        description: >-
          This API has been deprecated, use /alert-actions of type
          'automation_rule' instead.
        tags:
          - Automation Rules
        parameters:
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
          - name: service
            in: query
            description: >-
              The service id for which automation rules are filtered for, this
              param is required
            required: true
            schema:
              type: number
          - name: source
            in: query
            description: >-
              The alert source id for which automation rules are filtered for,
              this param is an alternative to service
            required: false
            schema:
              type: number
          - name: status-page
            in: query
            description: >-
              The status page id for which automation rules are filtered for, this
              param is an alternative to service
            required: false
            schema:
              type: number
        summary: Get automation rules.
        responses:
          '200':
            description: The automation rules
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AutomationRule'
      post:
        description: >-
          This API has been deprecated, use /alert-actions of type
          'automation_rule' instead.
        tags:
          - Automation Rules
        requestBody:
          $ref: '#/components/requestBodies/AutomationRule'
        summary: Create a new automation rule.
        responses:
          '200':
            description: The newly created automation rule
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AutomationRule'
    /automation-rules/{id}:
      get:
        description: >-
          This API has been deprecated, use /alert-actions of type
          'automation_rule' instead.
        tags:
          - Automation Rules
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get a specific automation rule.
        responses:
          '200':
            description: The requested automation rule
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AutomationRule'
      put:
        description: >-
          This API has been deprecated, use /alert-actions of type
          'automation_rule' instead.
        tags:
          - Automation Rules
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/AutomationRule'
        summary: Update the specific automation rule
        responses:
          '200':
            description: The updated automation rule
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AutomationRule'
      delete:
        description: >-
          This API has been deprecated, use /alert-actions of type
          'automation_rule' instead.
        tags:
          - Automation Rules
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific automation rule.
        responses:
          '204':
            description: Empty body delete response
    /incidents:
      get:
        tags:
          - Incidents
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of
              incidents. (Note: when using ?include maximum is reduced to 25)
            required: false
            schema:
              type: integer
              format: int32
              maximum: 100
              default: 10
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
          - in: query
            name: states
            description: state of the alert
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - INVESTIGATING
                  - IDENTIFIED
                  - MONITORING
                  - RESOLVED
          - in: query
            name: services
            description: service IDs of the incident's affected services
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
          - in: query
            name: from
            description: >-
              from date, ISO-UTC e.g. 2021-05-25T21:24:56.771Z, based on
              reportTime
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: >-
              until date, ISO-UTC e.g. 2021-05-26T21:24:56.771Z, based on
              reportTime
            schema:
              type: string
              format: date-time
        summary: Get incidents.
        responses:
          '200':
            description: The incidents
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Incident'
      post:
        tags:
          - Incidents
        requestBody:
          $ref: '#/components/requestBodies/IncidentNoIncludes'
        summary: Create a new incident.
        description: >-
          Note: depending on affected services this will publish notifications to
          subscribers. Use /publish-info to forecast notifications.
        responses:
          '200':
            description: The newly created incident
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentNoIncludes'
    /incidents/publish-info:
      post:
        tags:
          - Incidents
        requestBody:
          $ref: '#/components/requestBodies/IncidentNoIncludes'
        summary: Forecast the affected subscribers and status pages
        description: >-
          Forecast the affected subscribers and status pages as well as
          notifications that would be send out due to created or update incident.
        responses:
          '200':
            description: The forecast for the provided incident
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    statusPagesInfo:
                      $ref: '#/components/schemas/UIMenuItem'
                    privateStatusPages:
                      type: number
                      readOnly: true
                    publicStatusPages:
                      type: number
                      readOnly: true
                    privateSubscribers:
                      type: number
                      readOnly: true
                    publicSubscribers:
                      type: number
                      readOnly: true
    /incidents/{id}:
      get:
        tags:
          - Incidents
        parameters:
          - $ref: '#/components/parameters/id'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed, affectedTeams,
              history)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
                  - affectedTeams
                  - history
        summary: Get a specific incident.
        description: >-
          Note: returns an ETag header that can be send to the PUT /incidents/{id}
          resource as If-Match header to return a 412 Error in case any related
          resources e.g. Services or Incident have been updated in the mean time.
        responses:
          '200':
            description: The requested incident
            headers:
              ETag:
                description: >-
                  Send to the PUT /incidents/{id} resource as If-Match header to
                  return a 412 Error in case any related resources e.g. Services
                  or Incident have been updated in the mean time.
                schema:
                  type: string
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentWithHistory'
      put:
        tags:
          - Incidents
        parameters:
          - $ref: '#/components/parameters/id'
          - name: If-Match
            in: header
            required: false
            description: >-
              Should be the ETag response header retrieved from GET
              /incidents/{id} to prevent updating the incident based on outdated
              information. Will return 412 status code in case of conflict.
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/IncidentNoIncludes'
        summary: Update the specific incident.
        description: >-
          Note: the update will be automatically appended to the incident's update
          history and publish notifications to subscribers.
        responses:
          '200':
            description: The updated incident
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncidentNoIncludes'
    /incidents/{id}/private-subscribers:
      get:
        tags:
          - Incidents
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the subscribers (users and teams) of an incident
        responses:
          '200':
            description: The subscribers of the incident
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/TeamUserOption'
      post:
        tags:
          - Incidents
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamUserOption'
          description: subscribers that should be added
          required: true
        summary: Add subscribers (users and teams) to an incident
        responses:
          '204':
            description: ''
    /services/{id}/private-subscribers:
      get:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the subscribers (users and teams) of a service
        responses:
          '200':
            description: The subscribers of the service
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/TeamUserOption'
      put:
        tags:
          - Services
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/TeamUserOptionArray'
        summary: Set subscribers (users and teams) of a service
        description: 'Note: this is an in place update'
        responses:
          '204':
            description: ''
    /status-pages:
      get:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of status
              pages.
            required: false
            schema:
              type: integer
              format: int32
              maximum: 50
              default: 25
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
        summary: Get status pages.
        responses:
          '200':
            description: The status pages
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/StatusPageList'
      post:
        tags:
          - Status Pages
        requestBody:
          $ref: '#/components/requestBodies/StatusPageNoIncludes'
        summary: Create a new status page.
        responses:
          '200':
            description: The newly created status page
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPageNoIncludes'
    /status-pages/{id}:
      get:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (subscribed, uptime, groups,
              structure). Note: structure is always included by default.
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - subscribed
                  - uptime
                  - groups
                  - structure
        summary: Get a specific status page.
        responses:
          '200':
            description: The requested status page
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPage'
      put:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/StatusPageNoIncludes'
        summary: Update the specific status page
        responses:
          '200':
            description: The updated status page
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPageNoIncludes'
      delete:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a specific status page.
        responses:
          '204':
            description: Empty body delete response
    /status-pages/{id}/groups:
      get:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
          - $ref: '#/components/parameters/start-index'
          - $ref: '#/components/parameters/max-results'
        summary: Get the groups of a status page
        responses:
          '200':
            description: The groups of the status page
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/StatusPageGroup'
      post:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusPageGroup'
          description: Group that should be added
          required: true
        summary: Add a group to a status page
        responses:
          '201':
            description: The created group
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPageGroup'
    /status-pages/{id}/groups/{group-id}:
      get:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
          - name: group-id
            in: path
            description: entity ID
            required: true
            schema:
              type: number
        summary: Get a specific group of a status page
        responses:
          '200':
            description: The group of the status page
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPageGroup'
          '404':
            description: ''
      put:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
          - name: group-id
            in: path
            description: entity ID
            required: true
            schema:
              type: number
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusPageGroup'
          description: Group that should be updated
          required: true
        summary: Update a group of a status page
        responses:
          '200':
            description: The updated group of the status page
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusPageGroup'
      delete:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
          - name: group-id
            in: path
            description: entity ID
            required: true
            schema:
              type: number
        summary: Remove group from a status page
        responses:
          '204':
            description: ''
    /status-pages/{id}/private-subscribers:
      get:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the subscribers (users and teams) of a status page
        responses:
          '200':
            description: The subscribers of the status page
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/TeamUserOption'
      put:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/TeamUserOptionArray'
        summary: Set subscribers (users and teams) of a status page
        description: 'Note: this is an in place update'
        responses:
          '204':
            description: ''
      post:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamUserOption'
          description: subscriber that should be added
          required: true
        summary: Add subscriber (user and team) to a status page
        responses:
          '204':
            description: ''
      delete:
        tags:
          - Status Pages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamUserOption'
          description: subscriber that should be removed
          required: true
        summary: Remove subscriber (user and team) from a status page
        responses:
          '204':
            description: ''
    /service-outages:
      get:
        tags:
          - Service Outages
        parameters:
          - in: query
            name: service
            description: the id of the service for which the outages should be fetched
            schema:
              type: number
          - in: query
            name: from
            description: from date, ISO-UTC e.g. 2021-05-25T21:24:56.771Z
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: until date, ISO-UTC e.g. 2021-05-26T21:24:56.771Z
            schema:
              type: string
              format: date-time
          - in: query
            name: ignore-overrides
            description: >-
              if the outages should not take overrides into account, default is
              false
            schema:
              type: boolean
        summary: Get the outages (including applied overrides) of a specific service
        responses:
          '200':
            description: The outages of the service
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceOutage'
    /service-outages/overrides:
      get:
        tags:
          - Service Outages
        parameters:
          - in: query
            name: service
            description: the id of the service for which the overrides should be fetched
            schema:
              type: number
          - in: query
            name: from
            description: from date, ISO-UTC e.g. 2021-05-25T21:24:56.771Z
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            description: until date, ISO-UTC e.g. 2021-05-26T21:24:56.771Z
            schema:
              type: string
              format: date-time
        summary: Get the overrides of a specific service
        responses:
          '200':
            description: The overrides of the service
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ServiceOutageOverride'
      post:
        tags:
          - Service Outages
        requestBody:
          $ref: '#/components/requestBodies/ServiceOutageOverride'
        summary: Override a part of a service's outage history
        responses:
          '201':
            description: The added override
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceOutageOverride'
    /service-outages/overrides/{id}:
      get:
        tags:
          - Service Outages
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Get the specific service outage override
        responses:
          '200':
            description: The override
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceOutageOverride'
      put:
        tags:
          - Service Outages
        parameters:
          - $ref: '#/components/parameters/id'
        requestBody:
          $ref: '#/components/requestBodies/ServiceOutageOverride'
        summary: Update an existing service outage override
        responses:
          '200':
            description: The updated override
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceOutageOverride'
      delete:
        tags:
          - Service Outages
        parameters:
          - $ref: '#/components/parameters/id'
        summary: Remove a service outage override
        responses:
          '204':
            description: ''
    /metric-data-sources:
      get:
        tags:
          - Metric Data Sources
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of metric
              data sources
            required: false
            schema:
              type: integer
              format: int32
              maximum: 100
              default: 10
        summary: Get Metric Data Sources
        responses:
          '200':
            description: The Metric Data Sources
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/MetricDataSourceNoIncludes'
      post:
        tags:
          - Metric Data Sources
        requestBody:
          $ref: '#/components/requestBodies/MetricDataSourcePost'
        summary: Create a new Metric Data Source.
        responses:
          '200':
            description: The newly created Metric Data Source
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MetricDataSource'
    /metric-data-sources/{id}:
      get:
        tags:
          - Metric Data Sources
        summary: Get a specific Metric Data Source
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        responses:
          '200':
            description: The requested Metric Data Source
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MetricDataSource'
      put:
        tags:
          - Metric Data Sources
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        requestBody:
          $ref: '#/components/requestBodies/MetricDataSourcePost'
        summary: Update the specific Metric Data Source
        responses:
          '200':
            description: The updated Metric Data Source
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MetricDataSource'
      delete:
        tags:
          - Metric Data Sources
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        summary: Delete a specific Metric Data Source
        responses:
          '204':
            description: Empty body delete response
    /metrics:
      get:
        tags:
          - Metrics
        parameters:
          - $ref: '#/components/parameters/start-index'
          - in: query
            name: max-results
            description: >-
              the maximum number of results when paging through a list of metrics.
              (Note: when using ?include maximum is reduced to 25)
            required: false
            schema:
              type: integer
              format: int32
              maximum: 100
              default: 10
          - name: include
            in: query
            description: >-
              Describes optional properties that should be included in the
              response. You may declare multiple. (dataSource, integrationKey)
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                enum:
                  - dataSource
                  - integrationKey
        summary: Get metrics.
        responses:
          '200':
            description: The metrics
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/MetricList'
      post:
        tags:
          - Metrics
        requestBody:
          $ref: '#/components/requestBodies/MetricPost'
        summary: Create a new metric.
        responses:
          '200':
            description: The newly created metric
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Metric'
    /metric/{id}:
      get:
        tags:
          - Metrics
        summary: Get a specific Metric
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        responses:
          '200':
            description: The requested metric
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Metric'
      put:
        tags:
          - Metrics
        summary: Update the specific Metric
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        requestBody:
          $ref: '#/components/requestBodies/MetricPost'
        responses:
          '200':
            description: The updated metric
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Metric'
      delete:
        tags:
          - Metrics
        summary: Delete the specific Metric
        parameters:
          - name: id
            in: path
            required: true
            description: entity ID
            schema:
              type: number
        responses:
          '204':
            description: Empty body delete response
  servers:
    - url: /api
  components:
    parameters:
      id:
        name: id
        in: path
        description: entity ID
        required: true
        schema:
          type: number
      string-id:
        name: id
        in: path
        description: entity ID
        required: true
        schema:
          type: string
      user-id-in-path:
        name: user-id
        in: path
        description: numeric user id
        required: true
        schema:
          type: string
      include:
        name: include
        in: query
        description: Describes optional properties that should be included in the response.
        required: false
        schema:
          type: string
      user-id-in-query:
        name: user
        in: query
        description: numeric user id
        schema:
          type: string
      source-id-or-key:
        name: source-id
        in: path
        description: numeric source id or api key
        required: true
        schema:
          type: string
      requester-id:
        in: query
        name: requester-id
        description: id of the user who requested this operation
        schema:
          type: string
      start-index:
        in: query
        name: start-index
        description: >-
          an integer specifying the starting point (beginning with 0) when paging
          through a list of entities
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      max-results:
        in: query
        name: max-results
        description: the maximum number of results when paging through a list of entities.
        required: false
        schema:
          type: integer
          format: int32
          maximum: 100
          default: 50
      key:
        name: key
        in: path
        description: api key of resource
        required: true
        schema:
          type: string
    requestBodies:
      Connector:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        description: the connector
        required: true
      AlertSourceRel:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertSourceRel'
        description: the alert source
        required: true
      ServiceOutageOverride:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceOutageOverride'
        description: override that should be made
        required: true
      TeamUserOptionArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TeamUserOption'
        description: subscribers that should be adjusted
        required: true
      MaintenanceWindow:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceWindow'
        description: the maintenance window
        required: true
      MetricPost:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricPost'
        description: The metric
        required: true
      Schedule:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
        description: >-
          The on-call schedule. (scheduleLayers [only available for RECURRING
          schedules], shifts [only available for STATIC schedules])
        required: true
      SupportHour:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportHour'
        description: the support hour
        required: true
      AlertAction:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertAction'
        description: the alert action
        required: true
      Team:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: the team
        required: true
      IncidentTemplate:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentTemplate'
        description: the incident template
        required: true
      ServiceNoIncludes:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceNoIncludes'
        description: the service
        required: true
      AutomationRule:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationRule'
        description: the automation rule
        required: true
      IncidentNoIncludes:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentNoIncludes'
        description: the incident
        required: true
      StatusPageNoIncludes:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusPageNoIncludes'
        description: the status page
        required: true
      MetricDataSourcePost:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricDataSourcePost'
        description: The metric data source
        required: true
    securitySchemes:
      apiKey:
        type: apiKey
        in: header
        name: Authorization
        description: >-
          The Bearer API key of your user <a
          href='/api-docs/#section/Authentication'>more info</a>.
    schemas:
      ContactStatus:
        type: string
        enum:
          - OK
          - LOCKED
          - BLACKLISTED
      ContactPhoneNumber:
        type: object
        properties:
          id:
            type: integer
            format: int64
          regionCode:
            type: string
          target:
            type: string
          primary:
            type: boolean
            description: May only be enabled for a single phone number contact at a time
          status:
            $ref: '#/components/schemas/ContactStatus'
      ContactPhoneNumberPost:
        type: object
        properties:
          regionCode:
            type: string
          target:
            type: string
          primary:
            type: boolean
            description: May only be enabled for a single phone number contact at a time
      TimeZone:
        type: string
        enum:
          - Europe/Berlin
          - America/New_York
          - America/Los_Angeles
          - Asia/Istanbul
      OutboundNumber:
        type: object
        properties:
          countryCode:
            type: string
          phoneNumber:
            type: string
          supportsInboundSms:
            type: boolean
          types:
            type: array
            items:
              type: string
              enum:
                - SMS
                - VOICE
      Integration:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          type:
            type: string
            enum:
              - INBOUND
              - NATIVE
              - OUTBOUND
          iconUrl:
            type: string
          documentationUrl:
            type: string
          integrationPath:
            type: string
      Role:
        type: string
        enum:
          - STAKEHOLDER
          - GUEST
          - RESPONDER
          - USER
          - ADMIN
      TeamRole:
        type: string
        enum:
          - STAKEHOLDER
          - RESPONDER
          - USER
          - ADMIN
      UserRel:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
          firstName:
            type: string
          lastName:
            type: string
      User:
        type: object
        required:
          - firstName
          - lastName
          - email
        properties:
          id:
            type: integer
            format: int64
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          position:
            type: string
          department:
            type: string
          avatarUrl:
            type: string
            readOnly: true
          language:
            type: string
            enum:
              - DE
              - EN
          role:
            $ref: '#/components/schemas/Role'
          shiftColor:
            type: string
            description: Optional hex-color code for the user's shifts in schedules calendars
          mutedUntil:
            type: string
            format: date-time
            description: Date in ISO-8601
          createdAt:
            type: string
            format: date-time
            description: Date in ISO-8601
          updatedAt:
            type: string
            format: date-time
            description: Date in ISO-8601
      UserPost:
        type: object
        required:
          - firstName
          - lastName
          - email
        properties:
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          position:
            type: string
          department:
            type: string
          avatarUrl:
            type: string
            readOnly: true
          language:
            type: string
            enum:
              - DE
              - EN
          role:
            $ref: '#/components/schemas/Role'
          shiftColor:
            type: string
            description: Optional hex-color code for the user's shifts in schedules calendars
      ContactEmail:
        type: object
        properties:
          id:
            type: integer
            format: int64
          target:
            type: string
          status:
            $ref: '#/components/schemas/ContactStatus'
      ContactEmailPost:
        type: object
        properties:
          target:
            type: string
      NotificationPreferenceAlertMethod:
        type: string
        enum:
          - EMAIL
          - SMS
          - PUSH
          - VOICE
          - WHATSAPP
          - TELEGRAM
      NotificationPreferenceAlertType:
        type: string
        enum:
          - LOW_PRIORITY
          - HIGH_PRIORITY
      NotificationPreferencesAlertDelayMin:
        type: integer
        minimum: '0'
        maximum: '120'
      NotificationPreferencesAlert:
        type: object
        properties:
          id:
            type: integer
            format: int64
          method:
            $ref: '#/components/schemas/NotificationPreferenceAlertMethod'
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          delayMin:
            $ref: '#/components/schemas/NotificationPreferencesAlertDelayMin'
          type:
            $ref: '#/components/schemas/NotificationPreferenceAlertType'
      NotificationPreferencesAlertPost:
        type: object
        properties:
          method:
            $ref: '#/components/schemas/NotificationPreferenceAlertMethod'
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          delayMin:
            $ref: '#/components/schemas/NotificationPreferencesAlertDelayMin'
          type:
            $ref: '#/components/schemas/NotificationPreferenceAlertType'
      NotificationPreferencesDutyTypes:
        type: string
        enum:
          - ON_CALL
      NotificationPreferencesDutyBeforeMin:
        type: integer
        enum:
          - 0
          - 15
          - 30
          - 60
          - 180
          - 360
          - 720
          - 1440
      NotificationPreferenceDutyMethod:
        type: string
        enum:
          - EMAIL
          - SMS
          - PUSH
          - WHATSAPP
          - TELEGRAM
      NotificationPreferencesDuty:
        type: object
        properties:
          id:
            type: integer
            format: int64
          beforeMin:
            $ref: '#/components/schemas/NotificationPreferencesDutyBeforeMin'
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceDutyMethod'
          type:
            $ref: '#/components/schemas/NotificationPreferencesDutyTypes'
      NotificationPreferencesDutyPost:
        type: object
        properties:
          beforeMin:
            $ref: '#/components/schemas/NotificationPreferencesDutyBeforeMin'
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceDutyMethod'
          type:
            $ref: '#/components/schemas/NotificationPreferencesDutyTypes'
      NotificationPreferenceUpdateMethod:
        type: string
        enum:
          - EMAIL
          - SMS
          - PUSH
          - WHATSAPP
          - TELEGRAM
      NotificationPreferencesUpdateType:
        type: string
        enum:
          - ALERT_ACCEPTED
          - ALERT_RESOLVED
          - ALERT_ESCALATED
      NotificationPreferencesUpdate:
        type: object
        properties:
          id:
            type: integer
            format: int64
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceUpdateMethod'
          type:
            $ref: '#/components/schemas/NotificationPreferencesUpdateType'
      NotificationPreferencesUpdatePost:
        type: object
        properties:
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceUpdateMethod'
          type:
            $ref: '#/components/schemas/NotificationPreferencesUpdateType'
      NotificationPreferenceSubscriptionMethod:
        type: string
        enum:
          - EMAIL
          - SMS
          - PUSH
      NotificationPreferencesSubscription:
        type: object
        properties:
          id:
            type: integer
            format: int64
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceSubscriptionMethod'
      NotificationPreferencesSubscriptionPost:
        type: object
        properties:
          contact:
            oneOf:
              - $ref: '#/components/schemas/ContactPhoneNumber'
              - $ref: '#/components/schemas/ContactEmail'
          method:
            $ref: '#/components/schemas/NotificationPreferenceSubscriptionMethod'
      EscalationRule:
        type: object
        required:
          - escalationTimeout
        properties:
          escalationTimeout:
            type: integer
          user:
            description: 'This field (type: User) is deprecated, please use ''users'' instead'
            type: object
            properties:
              id:
                type: number
          schedule:
            description: >-
              This field (type: Schedule) is deprecated, please use 'schedules'
              instead
            type: object
            properties:
              id:
                type: number
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserRel'
          schedules:
            type: array
            items:
              $ref: '#/components/schemas/ScheduleRel'
      EscalationPolicy:
        type: object
        required:
          - name
          - escalationRules
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          escalationRules:
            type: array
            items:
              $ref: '#/components/schemas/EscalationRule'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          repeating:
            type: boolean
            default: false
          frequency:
            type: integer
            format: int32
            minimum: 1
            maximum: 9
            default: 1
          delayMin:
            type: integer
            format: int32
            minimum: 0
            maximum: 15
            default: 0
          routingKey:
            type: string
            description: optional
      AlertPriority:
        type: string
        enum:
          - HIGH
          - LOW
      AlertPriorityRule:
        type: string
        enum:
          - HIGH
          - LOW
          - HIGH_DURING_SUPPORT_HOURS
          - LOW_DURING_SUPPORT_HOURS
      SupportHour:
        type: object
        required:
          - name
          - timezone
          - supportDays
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          timezone:
            $ref: '#/components/schemas/TimeZone'
          supportDays:
            type: object
            properties:
              MONDAY:
                $ref: '#/components/schemas/SupportDay'
              TUESDAY:
                $ref: '#/components/schemas/SupportDay'
              WEDNESDAY:
                $ref: '#/components/schemas/SupportDay'
              THURSDAY:
                $ref: '#/components/schemas/SupportDay'
              FRIDAY:
                $ref: '#/components/schemas/SupportDay'
              SATURDAY:
                $ref: '#/components/schemas/SupportDay'
              SUNDAY:
                $ref: '#/components/schemas/SupportDay'
      SupportDay:
        type: object
        required:
          - start
          - end
        properties:
          start:
            type: string
            format: time
          end:
            type: string
            format: time
      IntegrationType:
        type: string
        enum:
          - NAGIOS
          - ICINGA
          - EMAIL
          - SMS
          - API
          - CRN
          - HEARTBEAT
          - PRTG
          - PINGDOM
          - CLOUDWATCH
          - AWSPHD
          - STACKDRIVER
          - INSTANA
          - ZABBIX
          - SOLARWINDS
          - PROMETHEUS
          - NEWRELIC
          - GRAFANA
          - GITHUB
          - DATADOG
          - UPTIMEROBOT
          - APPDYNAMICS
          - DYNATRACE
          - TOPDESK
          - STATUSCAKE
          - MONITOR
          - TOOL
          - CHECKMK
          - AUTOTASK
          - AWSBUDGET
          - SEARCHGUARD
          - SERVERDENSITY
          - ZAPIER
          - KENTIXAM
          - CONSUL
          - ZAMMAD
          - SIGNALFX
          - SPLUNK
          - KUBERNETES
          - SEMATEXT
          - SENTRY
          - SUMOLOGIC
          - RAYGUN
          - MXTOOLBOX
          - ESWATCHER
          - AMAZONSNS
          - KAPACITOR
          - CORTEXXSOAR
          - SENSU
          - JUMPCLOUD
          - SALESFORCE
          - GUARDDUTY
          - STATUSHUB
          - IXON
          - APIFORTRESS
          - FRESHSERVICE
          - APPSIGNAL
          - LIGHTSTEP
          - IBMCLOUDFUNCTIONS
          - CROWDSTRIKE
          - HUMIO
          - OHDEAR
          - MONGODBATLAS
          - GITLAB
          - HYPERPING
          - PAPRISMACLOUD
          - SAMSARA
          - PANDORAFMS
          - MSSCOM
          - TWILIO
          - CISCOMERAKI
          - CHECKLY
          - POSTHOG
          - GOOGLESCC
          - SLACK
          - MSTEAMS
          - UPTIMEKUMA
          - TWILIOERRORS
          - PARTICLE
          - CLOUDFLARE
          - TULIP
          - GRAYLOG
          - CATCHPOINT
          - LOKI
          - CORTEX
          - MIMIR
      AlertActionType:
        type: string
        enum:
          - datadog
          - autotask
          - jira
          - microsoft_teams
          - servicenow
          - slack
          - webhook
          - zendesk
          - discord
          - github
          - topdesk
          - aws_lambda
          - azure_faas
          - google_faas
          - email
          - sysdig
          - zapier
          - zammad
          - mattermost
          - zoom_chat
          - zoom_meeting
          - status_page_io
          - webex
          - dingtalk
          - dingtalk_action
          - aws_event_bridge
          - auvik
          - dynamic
          - zabbix
          - automation_rule
          - telegram
      ConnectorType:
        type: string
        enum:
          - datadog
          - jira
          - microsoft_teams
          - servicenow
          - slack
          - zendesk
          - discord
          - github
          - topdesk
          - aws_lambda
          - azure_faas
          - google_faas
          - sysdig
          - zammad
          - mattermost
          - zoom_chat
          - zoom_meeting
          - status_page_io
          - webex
          - dingtalk
          - auvik
          - dynamic
          - zabbix
      ScheduleRel:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          type:
            type: string
            enum:
              - STATIC
              - RECURRING
      Schedule:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          type:
            type: string
            enum:
              - STATIC
              - RECURRING
          scheduleLayers:
            type: array
            items:
              $ref: '#/components/schemas/ScheduleLayerConfig'
          shifts:
            type: array
            items:
              $ref: '#/components/schemas/ShiftRel'
          showGaps:
            type: boolean
          defaultShiftDuration:
            type: string
            format: P7D
          currentShift:
            $ref: '#/components/schemas/ShiftRel'
          nextShift:
            $ref: '#/components/schemas/ShiftRel'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      ShiftRel:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/UserRel'
          end:
            type: string
            format: date-time
          start:
            type: string
            format: date-time
      Shift:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/User'
          end:
            type: string
            format: date-time
          start:
            type: string
            format: date-time
      ScheduleLayerConfig:
        type: object
        required:
          - startsOn
          - users
          - rotation
        properties:
          name:
            type: string
          startsOn:
            type: string
            format: date-time
          endsOn:
            type: string
            format: date-time
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserRel'
          rotation:
            type: string
            format: P7D
          restrictionType:
            type: string
            description: >-
              Note: 'TIMES_OF_DAY' is just a UI state representation, the API
              always uses 'TIMES_OF_WEEK'
            enum:
              - TIMES_OF_WEEK
          restrictions:
            type: array
            items:
              $ref: '#/components/schemas/ScheduleLayerRestriction'
      ScheduleLayerRestriction:
        type: object
        required:
          - from
          - to
        properties:
          from:
            $ref: '#/components/schemas/TimeOfWeek'
          to:
            $ref: '#/components/schemas/TimeOfWeek'
      TimeOfWeek:
        type: object
        required:
          - dayOfWeek
          - time
        properties:
          dayOfWeek:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          time:
            type: string
            format: '15:00'
      Connector:
        type: object
        required:
          - type
          - name
        properties:
          id:
            type: string
          type:
            $ref: '#/components/schemas/ConnectorType'
          name:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          params:
            type: object
            oneOf:
              - $ref: '#/components/schemas/EParamsDatadog'
              - $ref: '#/components/schemas/EParamsJira'
              - $ref: '#/components/schemas/EParamsMicrosoftTeams'
              - $ref: '#/components/schemas/EParamsServiceNow'
              - $ref: '#/components/schemas/EParamsSlack'
              - $ref: '#/components/schemas/EParamsZendesk'
              - $ref: '#/components/schemas/EParamsDiscord'
              - $ref: '#/components/schemas/EParamsGithub'
              - $ref: '#/components/schemas/EParamsTopdesk'
              - $ref: '#/components/schemas/EParamsAWSLambda'
              - $ref: '#/components/schemas/EParamsAzureFunction'
              - $ref: '#/components/schemas/EParamsGoogleFunction'
              - $ref: '#/components/schemas/EParamsSysdig'
              - $ref: '#/components/schemas/EParamsStatusPageIO'
              - $ref: '#/components/schemas/EParamsDingTalk'
              - $ref: '#/components/schemas/EParamsZabbix'
      EParamsZabbix:
        type: object
        properties:
          url:
            type: string
          apiKey:
            type: string
      EParamsDingTalk:
        type: object
        properties:
          url:
            type: string
          secret:
            type: string
      EParamsDatadog:
        type: object
        properties:
          apiKey:
            type: string
      EParamsJira:
        type: object
        properties:
          url:
            type: string
          email:
            type: string
          password:
            type: string
      EParamsMicrosoftTeams:
        type: object
        properties:
          url:
            type: string
      EParamsServiceNow:
        type: object
        properties:
          url:
            type: string
          username:
            type: string
          password:
            type: string
      EParamsSlack:
        type: object
        properties: {}
      EParamsZendesk:
        type: object
        properties:
          url:
            type: string
          email:
            type: string
          apiKey:
            type: string
      EParamsDiscord:
        type: object
        properties:
          url:
            type: string
      EParamsGithub:
        type: object
        properties:
          apiKey:
            type: string
      EParamsTopdesk:
        type: object
        properties:
          url:
            type: string
          username:
            type: string
          password:
            type: string
      EParamsAWSLambda:
        type: object
        properties:
          authorization:
            type: string
      EParamsAzureFunction:
        type: object
        properties:
          authorization:
            type: string
      EParamsGoogleFunction:
        type: object
        properties:
          authorization:
            type: string
      EParamsSysdig:
        type: object
        properties:
          apiKey:
            type: string
      EParamsStatusPageIO:
        type: object
        properties:
          apiKey:
            type: string
      AlertAction:
        type: object
        required:
          - connectorType
          - name
        properties:
          id:
            type: string
          alertSources:
            type: array
            items:
              $ref: '#/components/schemas/AlertSource'
          connectorId:
            type: string
          connectorType:
            $ref: '#/components/schemas/AlertActionType'
          name:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          triggerMode:
            type: string
            enum:
              - AUTOMATIC
              - MANUAL
          bidirectional:
            type: boolean
            readOnly: true
          delaySec:
            description: May only be used with triggerType 'alert-escalation-ended' selected
            type: number
            minimum: 0
            maximum: 7200
          triggerTypes:
            type: array
            items:
              type: string
              enum:
                - alert-created
                - alert-assigned
                - alert-auto-escalated
                - alert-acknowledged
                - alert-raised
                - alert-comment-added
                - alert-escalation-ended
                - alert-resolved
                - alert-responder-added
                - alert-responder-removed
                - alert-channel-attached
                - alert-channel-detached
          alertFilter:
            type: object
            properties:
              operator:
                type: string
                enum:
                  - AND
                  - OR
              predicates:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      enum:
                        - ALERT_SUMMARY
                        - ALERT_DETAILS
                        - ESCALATION_POLICY
                        - ALERT_PRIORITY
                    criteria:
                      type: string
                      enum:
                        - CONTAINS_ANY_WORDS
                        - CONTAINS_NOT_WORDS
                        - CONTAINS_STRING
                        - CONTAINS_NOT_STRING
                        - IS_STRING
                        - IS_NOT_STRING
                        - MATCHES_REGEX
                        - MATCHES_NOT_REGEX
                    value:
                      type: string
          params:
            type: object
            oneOf:
              - $ref: '#/components/schemas/CParamsDatadog'
              - $ref: '#/components/schemas/CParamsJira'
              - $ref: '#/components/schemas/CParamsMicrosoftTeams'
              - $ref: '#/components/schemas/CParamsMicrosoftTeamsWebhookOnly'
              - $ref: '#/components/schemas/CParamsServiceNow'
              - $ref: '#/components/schemas/CParamsAutotask'
              - $ref: '#/components/schemas/CParamsSlack'
              - $ref: '#/components/schemas/CParamsWebhook'
              - $ref: '#/components/schemas/CParamsZendesk'
              - $ref: '#/components/schemas/CParamsDiscord'
              - $ref: '#/components/schemas/CParamsGithub'
              - $ref: '#/components/schemas/CParamsTopdesk'
              - $ref: '#/components/schemas/CParamsAWSLambda'
              - $ref: '#/components/schemas/CParamsAzureFunction'
              - $ref: '#/components/schemas/CParamsGoogleFunction'
              - $ref: '#/components/schemas/CParamsEmail'
              - $ref: '#/components/schemas/CParamsSysdig'
              - $ref: '#/components/schemas/CParamsZapier'
              - $ref: '#/components/schemas/CParamsZoomChat'
              - $ref: '#/components/schemas/CParamsZoomMeeting'
              - $ref: '#/components/schemas/CParamsStatusPageIO'
              - $ref: '#/components/schemas/CParamsDingTalk'
              - $ref: '#/components/schemas/CParamsDingTalkAction'
              - $ref: '#/components/schemas/CParamsAutomationRule'
              - $ref: '#/components/schemas/CParamsAutomationRule'
              - $ref: '#/components/schemas/CParamsTelegram'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      CParamsAutomationRule:
        type: object
        required:
          - alertType
          - serviceStatus
          - serviceIds
        properties:
          alertType:
            type: string
            enum:
              - CREATED
              - ACCEPTED
          resolveIncident:
            type: boolean
            default: false
          serviceStatus:
            $ref: '#/components/schemas/ServiceStatus'
          templateId:
            type: integer
            format: int64
          sendNotification:
            type: boolean
            default: false
          serviceIds:
            type: array
            items:
              type: integer
              format: int64
      CParamsTelegram:
        type: object
        required:
          - channelId
        properties:
          channelId:
            type: string
            description: The telegram group id, usually i64, as string
      CParamsDingTalk:
        type: object
        properties:
          isAtAll:
            type: boolean
          atMobiles:
            type: array
            items:
              type: string
      CParamsDingTalkAction:
        type: object
        properties:
          url:
            type: string
          secret:
            type: string
          isAtAll:
            type: boolean
          atMobiles:
            type: array
            items:
              type: string
      CParamsDatadog:
        type: object
        properties:
          tags:
            type: array
            items:
              type: string
          priority:
            type: string
          site:
            type: string
      CParamsJira:
        type: object
        properties:
          project:
            type: string
          issueType:
            type: string
          bodyTemplate:
            type: string
      CParamsServiceNow:
        type: object
        properties:
          callerId:
            type: string
          impact:
            type: string
          urgency:
            type: string
          closeCode:
            type: string
          assignmentGroup:
            type: string
          ownerGroup:
            type: string
          service:
            type: string
          serviceOffering:
            type: string
          contactType:
            type: string
      CParamsAutotask:
        type: object
        required:
          - queueId
        properties:
          companyId:
            type: string
          queueId:
            type: string
          ticketCategory:
            type: string
          ticketType:
            type: string
          noteType:
            type: string
          notePublish:
            type: string
          status:
            type: string
      CParamsMicrosoftTeamsWebhookOnly:
        type: object
        properties: {}
      CParamsMicrosoftTeams:
        type: object
        required:
          - channelId
          - teamId
        properties:
          channelId:
            type: string
          channelName:
            type: string
          teamId:
            type: string
          teamName:
            type: string
          type:
            type: string
            enum:
              - chat
              - meeting
      CParamsSlack:
        type: object
        required:
          - channelId
        properties:
          channelId:
            type: string
          channelName:
            type: string
          teamDomain:
            type: string
          teamId:
            type: string
      CParamsWebhook:
        type: object
        properties:
          webhookUrl:
            type: string
          bodyTemplate:
            type: string
      CParamsZendesk:
        type: object
        properties:
          priority:
            type: string
      CParamsDiscord:
        type: object
        properties: {}
      CParamsGithub:
        type: object
        properties:
          owner:
            type: string
          repository:
            type: string
          labels:
            type: array
            items:
              type: string
      CParamsTopdesk:
        type: object
        properties:
          status:
            type: string
      CParamsAWSLambda:
        type: object
        properties:
          webhookUrl:
            type: string
          bodyTemplate:
            type: string
      CParamsAzureFunction:
        type: object
        properties:
          webhookUrl:
            type: string
          bodyTemplate:
            type: string
      CParamsGoogleFunction:
        type: object
        properties:
          webhookUrl:
            type: string
          bodyTemplate:
            type: string
      CParamsEmail:
        type: object
        properties:
          recipients:
            type: array
            items:
              type: string
          subject:
            type: string
          bodyTemplate:
            type: string
      CParamsSysdig:
        type: object
        properties:
          tags:
            type: array
            items:
              type: string
          eventFilter:
            type: string
      CParamsZapier:
        type: object
        properties:
          webhookUrl:
            type: string
      CParamsZoomChat:
        type: object
        properties:
          channelId:
            type: string
      CParamsZoomMeeting:
        type: object
        properties:
          password:
            type: string
      CParamsStatusPageIO:
        type: object
        properties:
          pageId:
            type: string
      MaintenanceWindow:
        type: object
        properties:
          timezone:
            $ref: '#/components/schemas/TimeZone'
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
          summary:
            type: string
          description:
            type: string
          alertSources:
            type: array
            items:
              $ref: '#/components/schemas/AlertSource'
            maxItems: 50
          services:
            type: array
            items:
              $ref: '#/components/schemas/ServiceNoIncludes'
            maxItems: 50
          createdBy:
            type: string
            readOnly: true
          notifications:
            type: object
            properties:
              atCreation:
                type: boolean
              atStart:
                type: boolean
              atEnd:
                type: boolean
      TeamRel:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      Team:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          visibility:
            $ref: '#/components/schemas/TeamVisibilityType'
          members:
            type: array
            items:
              $ref: '#/components/schemas/TeamMember'
          createdAt:
            type: string
            format: date-time
            description: Date in ISO-8601
          updatedAt:
            type: string
            format: date-time
            description: Date in ISO-8601
      TeamVisibilityType:
        type: string
        enum:
          - PUBLIC
          - PRIVATE
      TeamMember:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/User'
          role:
            $ref: '#/components/schemas/TeamRole'
      OnCall:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/User'
          escalationPolicy:
            $ref: '#/components/schemas/EscalationPolicy'
          schedule:
            $ref: '#/components/schemas/ScheduleRel'
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
          escalationLevel:
            type: number
      AlertSource:
        type: object
        required:
          - name
          - escalationPolicy
          - integrationType
        properties:
          id:
            type: integer
            format: int64
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          name:
            type: string
          iconUrl:
            type: string
          lightIconUrl:
            type: string
          darkIconUrl:
            type: string
          escalationPolicy:
            $ref: '#/components/schemas/EscalationPolicy'
          integrationType:
            $ref: '#/components/schemas/IntegrationType'
          integrationKey:
            type: string
          integrationUrl:
            type: string
            readOnly: true
          autoResolutionTimeout:
            type: string
            format: ISO-8601
          alertGroupingWindow:
            type: string
            format: ISO-8601
          alertCreation:
            type: string
            default: ONE_ALERT_PER_EMAIL
            enum:
              - ONE_ALERT_PER_EMAIL
              - ONE_ALERT_PER_EMAIL_SUBJECT
              - ONE_PENDING_ALERT_ALLOWED
              - ONE_OPEN_ALERT_ALLOWED
              - OPEN_RESOLVE_ON_EXTRACTION
              - ONE_ALERT_GROUPED_PER_WINDOW
          status:
            type: string
            readOnly: true
            enum:
              - PENDING
              - ALL_ACCEPTED
              - ALL_RESOLVED
              - IN_MAINTENANCE
              - DISABLED
          emailFiltered:
            type: boolean
            default: false
          emailResolveFiltered:
            type: boolean
            default: false
          active:
            type: boolean
            default: true
          emailPredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          emailResolvePredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          resolveKeyExtractor:
            type: object
            properties:
              field:
                type: string
                enum:
                  - EMAIL_SUBJECT
                  - EMAIL_BODY
              criteria:
                type: string
                enum:
                  - ALL_TEXT_BEFORE
                  - MATCHES_REGEX
                  - ALL_TEXT_AFTER
              value:
                type: string
          filterOperator:
            type: string
            enum:
              - AND
              - OR
          resolveFilterOperator:
            type: string
            enum:
              - AND
              - OR
          alertPriorityRule:
            $ref: '#/components/schemas/AlertPriorityRule'
          supportHours:
            $ref: '#/components/schemas/SupportHour'
          heartbeat:
            type: object
            properties:
              summary:
                type: string
              intervalSec:
                type: integer
              status:
                type: string
                readOnly: true
                enum:
                  - OVERDUE
                  - ON_TIME
                  - NEVER_RECEIVED
              lastPingReceivedAt:
                type: string
                format: date-time
                readOnly: true
          bidirectional:
            type: boolean
            readOnly: true
          summaryTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          detailsTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          routingTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          linkTemplates:
            type: array
            items:
              $ref: '#/components/schemas/AlertSourceLinkTemplate'
          priorityTemplate:
            $ref: '#/components/schemas/AlertSourcePriorityTemplate'
      AlertSourceTemplate:
        type: object
        properties:
          textTemplate:
            type: string
            description: >-
              For more information on alert source templating, please visit:
              https://docs.ilert.com/alerting/alert-sources#alert-template.

               Example: <br />`Hi {{ users[0].name }} there!` 

              You can use the text template instead of elements by adding the
              include `textTemplate` to your request. Any version can be used for
              POST or PUT requests.
          elements:
            type: array
            items:
              $ref: '#/components/schemas/AlertSourceTemplateElement'
      AlertSourceTemplateElement:
        type: object
        required:
          - type, val
        properties:
          type:
            type: string
            enum:
              - TEXT
              - VAR
              - RAW
          val:
            type: string
          func:
            type: string
          args:
            type: array
            items:
              $ref: '#/components/schemas/AlertSourceTemplateElementArg'
      AlertSourceTemplateElementArg:
        type: object
        properties:
          S:
            type: string
          'N':
            type: integer
      AlertSourceLinkTemplate:
        type: object
        required:
          - text
          - hrefTemplate
        properties:
          text:
            type: string
          hrefTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
      AlertSourcePriorityTemplate:
        type: object
        required:
          - valueTemplate
          - mappings
        properties:
          valueTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          mappings:
            type: array
            items:
              $ref: '#/components/schemas/AlertSourcePriorityTemplateMapping'
      AlertSourcePriorityTemplateMapping:
        type: object
        required:
          - value
          - priority
        properties:
          value:
            type: string
          priority:
            type: string
            enum:
              - LOW
              - HIGH
      AlertSourceNoIncludes:
        type: object
        required:
          - name
          - escalationPolicy
          - integrationType
        properties:
          id:
            type: integer
            format: int64
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          name:
            type: string
          iconUrl:
            type: string
          lightIconUrl:
            type: string
          darkIconUrl:
            type: string
          escalationPolicy:
            $ref: '#/components/schemas/EscalationPolicy'
          integrationType:
            $ref: '#/components/schemas/IntegrationType'
          integrationKey:
            type: string
          integrationUrl:
            type: string
            readOnly: true
          autoResolutionTimeout:
            type: string
            format: ISO-8601
          alertGroupingWindow:
            type: string
            format: ISO-8601
          alertCreation:
            type: string
            default: ONE_ALERT_PER_EMAIL
            enum:
              - ONE_ALERT_PER_EMAIL
              - ONE_ALERT_PER_EMAIL_SUBJECT
              - ONE_PENDING_ALERT_ALLOWED
              - ONE_OPEN_ALERT_ALLOWED
              - OPEN_RESOLVE_ON_EXTRACTION
              - ONE_ALERT_GROUPED_PER_WINDOW
          status:
            type: string
            readOnly: true
            enum:
              - PENDING
              - ALL_ACCEPTED
              - ALL_RESOLVED
              - IN_MAINTENANCE
              - DISABLED
          emailFiltered:
            type: boolean
            default: false
          emailResolveFiltered:
            type: boolean
            default: false
          active:
            type: boolean
            default: true
          emailPredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          emailResolvePredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          resolveKeyExtractor:
            type: object
            properties:
              field:
                type: string
                enum:
                  - EMAIL_SUBJECT
                  - EMAIL_BODY
              criteria:
                type: string
                enum:
                  - ALL_TEXT_BEFORE
                  - MATCHES_REGEX
                  - ALL_TEXT_AFTER
              value:
                type: string
          filterOperator:
            type: string
            enum:
              - AND
              - OR
          resolveFilterOperator:
            type: string
            enum:
              - AND
              - OR
          alertPriorityRule:
            $ref: '#/components/schemas/AlertPriorityRule'
          supportHours:
            $ref: '#/components/schemas/SupportHour'
          heartbeat:
            type: object
            properties:
              summary:
                type: string
              intervalSec:
                type: integer
              status:
                type: string
                readOnly: true
                enum:
                  - OVERDUE
                  - ON_TIME
                  - NEVER_RECEIVED
              lastPingReceivedAt:
                type: string
                format: date-time
                readOnly: true
          bidirectional:
            type: boolean
            readOnly: true
      AlertSourceRel:
        type: object
        required:
          - name
          - escalationPolicy
          - integrationType
        properties:
          id:
            type: integer
            format: int64
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          name:
            type: string
          iconUrl:
            type: string
          lightIconUrl:
            type: string
          darkIconUrl:
            type: string
          escalationPolicy:
            $ref: '#/components/schemas/EscalationPolicy'
          integrationType:
            $ref: '#/components/schemas/IntegrationType'
          integrationKey:
            type: string
          integrationUrl:
            type: string
            readOnly: true
          autoResolutionTimeout:
            type: string
            format: ISO-8601
          alertGroupingWindow:
            type: string
            format: ISO-8601
          alertCreation:
            type: string
            default: ONE_ALERT_PER_EMAIL
            enum:
              - ONE_ALERT_PER_EMAIL
              - ONE_ALERT_PER_EMAIL_SUBJECT
              - ONE_PENDING_ALERT_ALLOWED
              - ONE_OPEN_ALERT_ALLOWED
              - OPEN_RESOLVE_ON_EXTRACTION
              - ONE_ALERT_GROUPED_PER_WINDOW
          status:
            type: string
            readOnly: true
            enum:
              - PENDING
              - ALL_ACCEPTED
              - ALL_RESOLVED
              - IN_MAINTENANCE
              - DISABLED
          emailFiltered:
            type: boolean
            default: false
          emailResolveFiltered:
            type: boolean
            default: false
          active:
            type: boolean
            default: true
          emailPredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          emailResolvePredicates:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - EMAIL_FROM
                    - EMAIL_SUBJECT
                    - EMAIL_BODY
                criteria:
                  type: string
                  enum:
                    - CONTAINS_ANY_WORDS
                    - CONTAINS_NOT_WORDS
                    - CONTAINS_STRING
                    - CONTAINS_NOT_STRING
                    - IS_STRING
                    - IS_NOT_STRING
                    - MATCHES_REGEX
                    - MATCHES_NOT_REGEX
                value:
                  type: string
          resolveKeyExtractor:
            type: object
            properties:
              field:
                type: string
                enum:
                  - EMAIL_SUBJECT
                  - EMAIL_BODY
              criteria:
                type: string
                enum:
                  - ALL_TEXT_BEFORE
                  - MATCHES_REGEX
                  - ALL_TEXT_AFTER
              value:
                type: string
          filterOperator:
            type: string
            enum:
              - AND
              - OR
          resolveFilterOperator:
            type: string
            enum:
              - AND
              - OR
          alertPriorityRule:
            $ref: '#/components/schemas/AlertPriorityRule'
          supportHours:
            $ref: '#/components/schemas/SimpleIdField64'
          heartbeat:
            type: object
            properties:
              summary:
                type: string
              intervalSec:
                type: integer
              status:
                type: string
                readOnly: true
                enum:
                  - OVERDUE
                  - ON_TIME
                  - NEVER_RECEIVED
              lastPingReceivedAt:
                type: string
                format: date-time
                readOnly: true
          bidirectional:
            type: boolean
            readOnly: true
          summaryTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          detailsTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          routingTemplate:
            $ref: '#/components/schemas/AlertSourceTemplate'
          linkTemplates:
            type: array
            items:
              $ref: '#/components/schemas/AlertSourceLinkTemplate'
          priorityTemplate:
            $ref: '#/components/schemas/AlertSourcePriorityTemplate'
      SimpleIdField64:
        type: object
        description: >-
          For POST and PUT requests only the id field is required for sub
          entities, e.g. status page -> service, alert source -> support hour
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
      SimpleIdFieldStr:
        type: object
        required:
          - id
        properties:
          id:
            type: string
      ManualAlert:
        type: object
        required:
          - summary
          - alertSource
        properties:
          summary:
            type: string
          details:
            type: string
          alertSource:
            $ref: '#/components/schemas/SimpleIdField64'
          escalationPolicy:
            $ref: '#/components/schemas/SimpleIdField64'
          priority:
            $ref: '#/components/schemas/AlertPriority'
          assignedTo:
            description: >-
              This field (type: User) is deprecated, please use 'responders'
              instead
            type: object
            properties:
              id:
                type: number
          images:
            type: array
            items:
              $ref: '#/components/schemas/EventImage'
          links:
            type: array
            items:
              $ref: '#/components/schemas/EventLink'
          responders:
            description: List of responders (users), only user.id is required.
            type: array
            items:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/UserRel'
      AlertResponder:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/UserRel'
          status:
            type: string
            enum:
              - PENDING
              - ACCEPTED
          acceptedAt:
            type: string
            format: date-time
      Alert:
        type: object
        properties:
          id:
            type: integer
            format: int64
          summary:
            type: string
          details:
            type: string
          reportTime:
            type: string
            format: date-time
          resolvedOn:
            type: string
            format: date-time
          status:
            type: string
            enum:
              - PENDING
              - ACCEPTED
              - RESOLVED
          alertSource:
            $ref: '#/components/schemas/AlertSource'
          escalationPolicy:
            $ref: '#/components/schemas/EscalationPolicy'
          priority:
            $ref: '#/components/schemas/AlertPriority'
          alertKey:
            type: string
          assignedTo:
            description: >-
              This field (type: User) is deprecated, please use 'responders'
              instead
            type: object
            properties:
              id:
                type: number
          nextEscalation:
            type: string
            format: date-time
            readOnly: true
          escalationRules:
            type: array
            items:
              $ref: '#/components/schemas/EscalationRule'
            readOnly: true
          nextEscalationUser:
            $ref: '#/components/schemas/User'
          nextEscalationRuleIndex:
            type: number
            readOnly: true
          images:
            type: array
            items:
              $ref: '#/components/schemas/EventImage'
          links:
            type: array
            items:
              $ref: '#/components/schemas/EventLink'
          responders:
            readOnly: true
            type: array
            items:
              $ref: '#/components/schemas/AlertResponder'
      EventImage:
        type: object
        properties:
          src:
            type: string
          href:
            type: string
          alt:
            type: string
      EventLink:
        type: object
        properties:
          href:
            type: string
          text:
            type: string
      EventComment:
        type: object
        properties:
          creator:
            type: string
          content:
            type: string
      SuggestedResponder:
        type: object
        properties:
          group:
            type: string
            enum:
              - SUGGESTED
              - USER
              - ESCALATION_POLICY
              - ON_CALL_SCHEDULE
          id:
            type: number
          name:
            type: string
          disabled:
            type: boolean
      Notification:
        type: object
        properties:
          id:
            type: integer
            format: int64
          method:
            type: string
            enum:
              - PUSH
              - VOICE
              - SMS
              - EMAIL
              - WHATSAPP
          target:
            type: string
          subject:
            type: string
          alertId:
            type: integer
            format: int64
          user:
            type: object
            properties:
              id:
                type: integer
                format: int64
              firstname:
                type: string
              lastname:
                type: string
          notificationTime:
            type: string
            format: date-time
          status:
            type: string
            enum:
              - SCHEDULED
              - SUCCESS
              - ERROR
          errorMessage:
            type: string
            description: An error message in case the notification status is ERROR.
      LogEntry:
        type: object
        properties:
          id:
            type: integer
            format: int64
          timestamp:
            type: string
            format: date-time
          logEntryType:
            type: string
            enum:
              - ConnectorAutomaticResultErrorLogEntry
              - ConnectorAutomaticResultLogEntry
              - AlertActionErrorLogEntry
              - AlertActionFailLogEntry
              - AlertActionSuccessLogEntry
              - AlertNotRoutedLogEntry
              - AlertReceivedLogEntry
              - AlertRoutedSuccessfulLogEntry
              - AlertSourceResponseLogEntry
              - CallLogEntry
              - EmailReceivedLogEntry
              - EmailResolvedLogEntry
              - FilterableLogEntryType
              - HeartbeatOverdueLogEntry
              - HeartbeatResolvedLogEntry
              - AlertAssignedBySystemLogEntry
              - AlertAssignedByUserLogEntry
              - AlertAssignedToPolicyLogEntry
              - AlertAssignedToScheduleLogEntry
              - AlertAutoResolvedLogEntry
              - AlertCommentAddedBySystemLogEntry
              - AlertCommentAddedLogEntry
              - AlertCommentPublishedLogEntry
              - AlertCreatedByUserLogEntry
              - AlertRaisedBySystemLogEntry
              - AlertRaisedByUserLogEntry
              - AlertSummaryChangedLogEntry
              - IncomingCallLogEntry
              - LowPriorityCallLog
              - MailboxCallLogEntry
              - MailboxRecordReceivedLog
              - MailboxTranscribedReceivedLog
              - NobodyOnCallLogEntry
              - NotificationLogEntry
              - ParallelCallLogEntry
              - PhoneNumberNotSetLogEntry
              - PhoneNumberBlockedLogEntry
              - QueueResultLogEntry
              - StakeholderAddedBySystemLogEntry
              - StakeholderAddedLogEntry
              - StakeholderRemovedLogEntry
              - StakeholderResubscribedLogEntry
              - StakeholderUnsubscribedLogEntry
              - UserResponseLogEntry
              - InComIncidentCreatedLogEntry
              - InComIncidentResolvedLogEntry
              - InComServiceTransitionLogEntry
              - InComLinkedLogEntry
              - InComUnlinkedLogEntry
              - AlertChannelAttachedByUserLogEntry
              - AlertChannelDetachedByUserLogEntry
              - AlertEscalatedToLevelLogEntry
          text:
            type: string
          alertId:
            type: integer
            format: int64
          filterTypes:
            type: array
            items:
              $ref: '#/components/schemas/LogFilterType'
          vars:
            type: object
            properties: {}
            additionalProperties:
              type: string
      LogFilterType:
        type: string
        enum:
          - NOTIFICATIONS
          - ALERT_SOURCE_EVENTS
          - CALL_ROUTING_EVENTS
          - ALERT_UPDATES
          - CONNECTOR_EVENTS
      SingleTimePoint:
        type: object
        required:
          - value
        properties:
          timestamp:
            type: number
            format: int64
            description: The unix epoch second of your time point
          value:
            type: number
            format: double
            description: Value of your time point
      MultipleTimePoint:
        type: object
        required:
          - value
        properties:
          series:
            type: array
            items:
              $ref: '#/components/schemas/SingleTimePoint'
      SeriesOption:
        type: object
        description: >-
          Can either be a single time point, omitting timestamp field is allowed
          as it will be replaced with now() - or a series of multiple time points
        oneOf:
          - $ref: '#/components/schemas/SingleTimePoint'
          - $ref: '#/components/schemas/MultipleTimePoint'
      MetricAggregationType:
        type: string
        enum:
          - AVG
          - SUM
          - MIN
          - MAX
          - LAST
      MetricDisplayType:
        type: string
        enum:
          - GRAPH
          - SINGLE
      MetricDataSourceType:
        type: string
        enum:
          - DATADOG
          - PROMETHEUS
      Event:
        type: object
        required:
          - apiKey
          - eventType
          - summary
        properties:
          apiKey:
            type: string
          eventType:
            type: string
            description: the event type
            enum:
              - ALERT
              - ACCEPT
              - RESOLVE
              - COMMENT
          summary:
            type: string
            description: >-
              The event summary. Will be used as the alert summary if a new alert
              will be created.
          details:
            type: string
            description: >-
              The event details. Will be used as the alert details if a new alert
              will be created.
          alertKey:
            type: string
            description: >-
              Used to deduplicate events. If an open alert with the key already
              exists, the event will be appended to the alert's event log.
              Otherwise a new alert will be created
          priority:
            $ref: '#/components/schemas/AlertPriority'
          images:
            type: array
            items:
              $ref: '#/components/schemas/EventImage'
          links:
            type: array
            items:
              $ref: '#/components/schemas/EventLink'
          comments:
            type: array
            items:
              $ref: '#/components/schemas/EventComment'
          customDetails:
            type: object
            properties: {}
            additionalProperties: true
          routingKey:
            type: string
            description: >-
              Optional routing key that overwrites the escalation policy of the
              alert source for ALERT events. Must map to routingKey of escalation
              policy
      EventResponse:
        type: object
        properties: {}
      CountResponse:
        type: object
        properties:
          count:
            type: integer
            format: int64
      RestError:
        type: object
        properties:
          status:
            type: integer
          message:
            type: string
      AlertActionTrigger:
        type: object
        properties:
          alertActionId:
            type: string
          connectorId:
            type: string
          type:
            type: string
          name:
            type: string
          iconUrl:
            type: string
          history:
            type: array
            items:
              $ref: '#/components/schemas/AlertActionResult'
      AlertActionResult:
        type: object
        properties:
          id:
            type: string
          alertActionId:
            type: string
          connectorId:
            type: string
          alertId:
            type: number
          success:
            type: boolean
          actor:
            $ref: '#/components/schemas/User'
      IncidentStatus:
        type: string
        description: the incident status
        enum:
          - INVESTIGATING
          - IDENTIFIED
          - MONITORING
          - RESOLVED
      IncidentTemplate:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          summary:
            type: string
          status:
            $ref: '#/components/schemas/IncidentStatus'
          message:
            type: string
          sendNotification:
            type: boolean
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      ServiceStatus:
        type: string
        description: the service status
        enum:
          - OPERATIONAL
          - UNDER_MAINTENANCE
          - DEGRADED
          - PARTIAL_OUTAGE
          - MAJOR_OUTAGE
      ServiceOutage:
        type: object
        properties:
          status:
            $ref: '#/components/schemas/ServiceStatus'
          from:
            type: string
            format: date-time
          until:
            type: string
            format: date-time
      ServiceOutageOverride:
        type: object
        properties:
          id:
            type: string
          service:
            $ref: '#/components/schemas/ServiceNoIncludes'
          status:
            $ref: '#/components/schemas/ServiceStatus'
          from:
            type: string
            format: date-time
          until:
            type: string
            format: date-time
      ServiceUptimePercentage:
        type: object
        properties:
          uptimePercentage:
            type: object
            properties:
              p90:
                type: number
                format: float
                minimum: 0
                maximum: 100
                readOnly: true
              p60:
                type: number
                format: float
                minimum: 0
                maximum: 100
                readOnly: true
              p30:
                type: number
                format: float
                minimum: 0
                maximum: 100
                readOnly: true
      ServiceUptime:
        type: object
        properties:
          rangeStart:
            type: string
            format: date-time
          rangeEnd:
            type: string
            format: date-time
          outages:
            type: array
            items:
              $ref: '#/components/schemas/ServiceOutage'
          uptimePercentage:
            $ref: '#/components/schemas/ServiceUptimePercentage'
        readOnly: true
      Service:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          status:
            $ref: '#/components/schemas/ServiceStatus'
          description:
            type: string
          oneOpenIncidentOnly:
            type: boolean
          showUptimeHistory:
            type: boolean
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          subscribed:
            type: boolean
            readOnly: true
          uptime:
            $ref: '#/components/schemas/ServiceUptime'
          incidents:
            type: array
            items:
              $ref: '#/components/schemas/IncidentNoIncludes'
            readOnly: true
            description: >-
              Note that this only contains the latest 10 unresolved incidents, use
              /api/incidents?service=x if more or specific results are needed
      ServiceUptimeOnly:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          status:
            $ref: '#/components/schemas/ServiceStatus'
          description:
            type: string
          oneOpenIncidentOnly:
            type: boolean
          showUptimeHistory:
            type: boolean
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          uptime:
            $ref: '#/components/schemas/ServiceUptime'
      ServiceNoIncludes:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          status:
            $ref: '#/components/schemas/ServiceStatus'
          description:
            type: string
          oneOpenIncidentOnly:
            type: boolean
          showUptimeHistory:
            type: boolean
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      Incident:
        type: object
        properties:
          id:
            type: number
          summary:
            type: string
          status:
            $ref: '#/components/schemas/IncidentStatus'
          message:
            type: string
          sendNotification:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          affectedServices:
            type: array
            items:
              type: object
              properties:
                impact:
                  $ref: '#/components/schemas/ServiceStatus'
                service:
                  $ref: '#/components/schemas/ServiceNoIncludes'
          resolvedOn:
            type: string
            format: date-time
            readOnly: true
          subscribed:
            type: boolean
            readOnly: true
          affectedTeams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
            readOnly: true
      IncidentUpdate:
        type: object
        properties:
          id:
            type: string
          content:
            type: string
          creator:
            $ref: '#/components/schemas/UserRel'
          incidentStatus:
            $ref: '#/components/schemas/IncidentStatus'
          sendNotification:
            type: boolean
          createdAt:
            type: string
            format: date-time
      IncidentWithHistory:
        type: object
        properties:
          id:
            type: number
          summary:
            type: string
          status:
            $ref: '#/components/schemas/IncidentStatus'
          message:
            type: string
          sendNotification:
            type: boolean
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          history:
            type: array
            items:
              $ref: '#/components/schemas/IncidentUpdate'
          affectedServices:
            type: array
            items:
              type: object
              properties:
                impact:
                  $ref: '#/components/schemas/ServiceStatus'
                service:
                  $ref: '#/components/schemas/ServiceNoIncludes'
          resolvedOn:
            type: string
            format: date-time
            readOnly: true
          subscribed:
            type: boolean
            readOnly: true
          affectedTeams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
            readOnly: true
      IncidentNoIncludes:
        type: object
        properties:
          id:
            type: number
          summary:
            type: string
          status:
            $ref: '#/components/schemas/IncidentStatus'
          message:
            type: string
          sendNotification:
            type: boolean
          createdAt:
            description: >-
              May be overwritten during the creation of the incident, otherwise
              read-only
            type: string
            format: date-time
          updatedAt:
            description: >-
              May be overwritten during the creation of the incident, otherwise
              read-only
            type: string
            format: date-time
          affectedServices:
            type: array
            items:
              type: object
              properties:
                impact:
                  $ref: '#/components/schemas/ServiceStatus'
                service:
                  $ref: '#/components/schemas/ServiceNoIncludes'
          resolvedOn:
            type: string
            format: date-time
            readOnly: true
      AutomationRule:
        type: object
        properties:
          id:
            type: string
          alertType:
            type: string
            enum:
              - CREATED
              - ACCEPTED
          resolveIncident:
            type: boolean
          resolveService:
            type: boolean
          serviceStatus:
            $ref: '#/components/schemas/ServiceStatus'
          template:
            $ref: '#/components/schemas/IncidentTemplate'
          service:
            $ref: '#/components/schemas/ServiceNoIncludes'
          alertSource:
            $ref: '#/components/schemas/AlertSource'
          sendNotification:
            type: boolean
      UIMenuItem:
        type: object
        properties:
          id:
            type: number
          label:
            type: string
      TeamUserOption:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          type:
            type: string
            enum:
              - USER
              - TEAM
      StatusPageGroup:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
      StatusPageNoIncludes:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          domain:
            type: string
          subdomain:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          faviconUrl:
            type: string
          logoUrl:
            type: string
          visibility:
            type: string
            enum:
              - PRIVATE
              - PUBLIC
          hiddenFromSearch:
            type: boolean
          showSubscribeAction:
            type: boolean
          showIncidentHistoryOption:
            type: boolean
          pageTitle:
            type: string
          pageDescription:
            type: string
          pageLayout:
            type: string
            enum:
              - SINGLE_COLUMN
              - RESPONSIVE
          logoRedirectUrl:
            type: string
          activated:
            type: boolean
          status:
            $ref: '#/components/schemas/ServiceStatus'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          services:
            type: array
            items:
              $ref: '#/components/schemas/ServiceNoIncludes'
          metrics:
            type: array
            items:
              $ref: '#/components/schemas/MetricNoIncludes'
          ipWhitelist:
            type: array
            description: >-
              ipv4 or ipv6 addresses to give access to. Can only be set on
              'PRIVATE' status pages
            items:
              type: string
          structure:
            $ref: '#/components/schemas/StatusPageStructure'
          appearance:
            type: string
            enum:
              - LIGHT
              - DARK
      StatusPageElement:
        type: object
        required:
          - id
          - type
        properties:
          id:
            type: integer
            format: int64
            description: The id of the service or group that this element references
          type:
            type: string
            enum:
              - SERVICE
              - GROUP
          options:
            type: string
            enum:
              - expand
              - no-graph
            description: >-
              Note: 'expand' can only be set when type is 'SERVICE', 'no-graph'
              can only be set when type is 'GROUP'
          children:
            type: array
            items:
              $ref: '#/components/schemas/StatusPageElement'
            description: >-
              Optional children of this element. Note: children may only be added
              to elements of type 'GROUP'
      StatusPageStructure:
        type: object
        properties:
          elements:
            type: array
            items:
              $ref: '#/components/schemas/StatusPageElement'
        description: >-
          This field is not available in the list resource. Describes the
          structure of a status page. Allows for nesting children. It is not
          required unless groups are used.
      StatusPage:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          domain:
            type: string
          subdomain:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          faviconUrl:
            type: string
          logoUrl:
            type: string
          visibility:
            type: string
            enum:
              - PRIVATE
              - PUBLIC
          hiddenFromSearch:
            type: boolean
          showSubscribeAction:
            type: boolean
          showIncidentHistoryOption:
            type: boolean
          pageTitle:
            type: string
          pageDescription:
            type: string
          pageLayout:
            type: string
            enum:
              - SINGLE_COLUMN
              - RESPONSIVE
          logoRedirectUrl:
            type: string
          activated:
            type: boolean
          status:
            $ref: '#/components/schemas/ServiceStatus'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          services:
            type: array
            items:
              $ref: '#/components/schemas/ServiceUptimeOnly'
          metrics:
            type: array
            items:
              $ref: '#/components/schemas/MetricNoIncludes'
          ipWhitelist:
            type: array
            description: >-
              ipv4 or ipv6 addresses to give access to. Can only be set on
              'PRIVATE' status pages
            items:
              type: string
          structure:
            $ref: '#/components/schemas/StatusPageStructure'
          subscribed:
            type: boolean
            readOnly: true
            description: This is an include field, it is not available in the list resource
          groups:
            type: array
            items:
              $ref: '#/components/schemas/StatusPageGroup'
            readOnly: true
            description: >-
              This is an include field, it is not available in the list resource.
              Read-only, use the sub resource to manipulate groups.
          appearance:
            type: string
            enum:
              - LIGHT
              - DARK
      StatusPageList:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          domain:
            type: string
          subdomain:
            type: string
          timezone:
            $ref: '#/components/schemas/TimeZone'
          faviconUrl:
            type: string
          logoUrl:
            type: string
          visibility:
            type: string
            enum:
              - PRIVATE
              - PUBLIC
          hiddenFromSearch:
            type: boolean
          showSubscribeAction:
            type: boolean
          showIncidentHistoryOption:
            type: boolean
          pageTitle:
            type: string
          pageDescription:
            type: string
          logoRedirectUrl:
            type: string
          activated:
            type: boolean
          status:
            $ref: '#/components/schemas/ServiceStatus'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          services:
            type: array
            items:
              $ref: '#/components/schemas/ServiceUptimeOnly'
          metrics:
            type: array
            items:
              $ref: '#/components/schemas/MetricNoIncludes'
          ipWhitelist:
            type: array
            description: >-
              ipv4 or ipv6 addresses to give access to. Can only be set on
              'PRIVATE' status pages
            items:
              type: string
          subscribed:
            type: boolean
            readOnly: true
            description: This is an include field, it is not available in the list resource
      MParamsDatadog:
        type: object
        required:
          - region
          - apiKey
          - applicationKey
        properties:
          region:
            type: string
          apiKey:
            type: string
          applicationKey:
            type: string
      MParamsPrometheus:
        type: object
        required:
          - url
          - authType
        properties:
          url:
            type: string
          authType:
            type: string
            enum:
              - NONE
              - BASIC
              - HEADER
          basicUser:
            type: string
            description: Optional, required for 'BASIC'
          basicPass:
            type: string
            description: Optional, required for 'BASIC'
          headerKey:
            type: string
            description: Optional, required for 'HEADER'
          headerValue:
            type: string
            description: Optional, required for 'HEADER'
      MetricDataSourceMetadata:
        oneOf:
          - $ref: '#/components/schemas/MParamsDatadog'
          - $ref: '#/components/schemas/MParamsPrometheus'
      MetricDataSource:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          type:
            $ref: '#/components/schemas/MetricDataSourceType'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          metadata:
            $ref: '#/components/schemas/MetricDataSourceMetadata'
      MetricDataSourcePost:
        type: object
        required:
          - name
          - type
          - metadata
        properties:
          name:
            type: string
          type:
            $ref: '#/components/schemas/MetricDataSourceType'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          metadata:
            $ref: '#/components/schemas/MetricDataSourceMetadata'
      MetricDataSourceNoIncludes:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          type:
            $ref: '#/components/schemas/MetricDataSourceType'
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      MDataDogMetadata:
        type: object
        required:
          - query
        properties:
          query:
            type: string
      MPrometheusMetadata:
        type: object
        required:
          - query
        properties:
          query:
            type: string
      MetricMetadata:
        oneOf:
          - $ref: '#/components/schemas/MDataDogMetadata'
          - $ref: '#/components/schemas/MPrometheusMetadata'
        description: >-
          Only required if the metric has a dataSource. You may not change this
          after creation.
        default: null
      MetricList:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          description:
            type: string
          aggregationType:
            $ref: '#/components/schemas/MetricAggregationType'
          displayType:
            $ref: '#/components/schemas/MetricDisplayType'
          interpolateGaps:
            type: boolean
            default: false
          lockYAxisMax:
            type: number
            format: double
            default: null
          lockYAxisMin:
            type: number
            format: double
            default: null
          mouseOverDecimal:
            type: number
            format: int32
            default: 0
            minimum: 0
            maximum: 6
          showValuesOnMouseOver:
            type: boolean
            default: false
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          unitLabel:
            type: string
          integrationKey:
            type: string
          dataSource:
            $ref: '#/components/schemas/MetricDataSourceNoIncludes'
      Metric:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          description:
            type: string
          aggregationType:
            $ref: '#/components/schemas/MetricAggregationType'
          displayType:
            $ref: '#/components/schemas/MetricDisplayType'
          interpolateGaps:
            type: boolean
            default: false
          lockYAxisMax:
            type: number
            format: double
            default: null
          lockYAxisMin:
            type: number
            format: double
            default: null
          mouseOverDecimal:
            type: number
            format: int32
            default: 0
            minimum: 0
            maximum: 6
          showValuesOnMouseOver:
            type: boolean
            default: false
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          unitLabel:
            type: string
          integrationKey:
            type: string
          metadata:
            $ref: '#/components/schemas/MetricMetadata'
          dataSource:
            $ref: '#/components/schemas/MetricDataSource'
      MetricNoIncludes:
        type: object
        properties:
          id:
            type: number
          name:
            type: string
          description:
            type: string
          aggregationType:
            $ref: '#/components/schemas/MetricAggregationType'
          displayType:
            $ref: '#/components/schemas/MetricDisplayType'
          interpolateGaps:
            type: boolean
            default: false
          lockYAxisMax:
            type: number
            format: double
            default: null
          lockYAxisMin:
            type: number
            format: double
            default: null
          mouseOverDecimal:
            type: number
            format: int32
            default: 0
            minimum: 0
            maximum: 6
          showValuesOnMouseOver:
            type: boolean
            default: false
          unitLabel:
            type: string
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
      MetricPost:
        type: object
        required:
          - name
          - displayType
          - aggregationType
        properties:
          name:
            type: string
          description:
            type: string
          aggregationType:
            $ref: '#/components/schemas/MetricAggregationType'
          displayType:
            $ref: '#/components/schemas/MetricDisplayType'
          interpolateGaps:
            type: boolean
            default: 'false'
          lockYAxisMax:
            type: number
            format: double
            default: null
          lockYAxisMin:
            type: number
            format: double
            default: null
          mouseOverDecimal:
            type: number
            format: int32
            default: 0
            minimum: 0
            maximum: 6
          showValuesOnMouseOver:
            type: boolean
            default: false
          teams:
            type: array
            items:
              $ref: '#/components/schemas/TeamRel'
          unitLabel:
            type: string
          metadata:
            $ref: '#/components/schemas/MetricMetadata'
          dataSource:
            type: object
            properties:
              id:
                type: number
                description: dataSource is required when providing metadata
konfigCliVersion: 1.38.61
