publishJson:
  company: Beamable
  serviceName: false
  sdkName: beamable-{language}-sdk
  clientName: Beamable
  metaDescription: >-
    var Beamable = BeamContext.Default; - That one line of code is a gateway to
    everything you need to build custom server logic via microservices along
    with a world of LiveOps tools and live services to build games that players
    love.
  apiStatusUrls: inherit
  homepage: beamable.com
  developerDocumentation: docs.beamable.com/reference/overview
  categories:
    - developer_tools
    - gaming
rawSpecString: |
  info:
    title: history basic
    version: '1.0'
    contact:
      name: Beamable Support
      url: https://api.beamable.com
      email: support@beamable.com
  servers:
    - url: https://api.beamable.com
  paths:
    /basic/trials/admin/data:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetS3DataResponse'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
            user: []
    /basic/trials/data:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SaveGameDataResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadTrialDataRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTrialDataRequest'
        security:
          - scope: []
            user: []
    /basic/trials/pause:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PauseTrialRequest'
        security:
          - scope: []
            user: []
    /basic/trials/schedule:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleTrialRequest'
        security:
          - scope: []
            user: []
    /basic/trials/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListTrialsResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTrialRestRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTrialRequest'
        security:
          - scope: []
            user: []
    /basic/trials/admin:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetPlayerTrialsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: dbid
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
            user: []
    /basic/trials/start:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TrialSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartTrialRequest'
        security:
          - scope: []
            user: []
    /basic/accounts/me/device:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPlayerView'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDevicesRequest'
        security:
          - scope: []
            user: []
    /basic/accounts/me:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPlayerView'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPlayerView'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUpdate'
        security:
          - scope: []
            user: []
    /basic/accounts/me/third-party:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPlayerView'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThirdPartyAvailableRequest'
        security:
          - scope: []
            user: []
    /basic/accounts/get-personally-identifiable-information:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: >-
                    #/components/schemas/AccountPersonallyIdentifiableInformationResponse
          '400':
            description: Bad Request
        parameters:
          - name: query
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/accounts/search:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountSearchResponse'
          '400':
            description: Bad Request
        parameters:
          - name: query
            in: query
            schema:
              type: string
            required: true
          - name: page
            in: query
            schema:
              type: integer
              format: int32
            required: true
          - name: pagesize
            in: query
            schema:
              type: integer
              format: int32
            required: true
        security:
          - scope: []
            user: []
    /basic/accounts/email-update/init:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailUpdateRequest'
        security:
          - scope: []
            user: []
    /basic/accounts/email-update/confirm:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailUpdateConfirmation'
        security:
          - scope: []
            user: []
    /basic/accounts/available/third-party:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountAvailableResponse'
          '400':
            description: Bad Request
        parameters:
          - name: thirdParty
            in: query
            schema:
              type: string
            required: true
          - name: token
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/accounts/admin/admin-user:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPortalView'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAccountRequest'
        security:
          - scope: []
            user: []
    /basic/accounts/register:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPlayerView'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRegistration'
        security:
          - scope: []
            user: []
    /basic/accounts/admin/me:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountPortalView'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/accounts/password-update/init:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordUpdateRequest'
        security:
          - scope: []
    /basic/accounts/admin/admin-users:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetAdminsResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/accounts/find:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Account'
          '400':
            description: Bad Request
        parameters:
          - name: query
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /basic/accounts/available/device-id:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountAvailableResponse'
          '400':
            description: Bad Request
        parameters:
          - name: deviceId
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/accounts/available:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccountAvailableResponse'
          '400':
            description: Bad Request
        parameters:
          - name: email
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/accounts/password-update/confirm:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordUpdateConfirmation'
        security:
          - scope: []
    /object/accounts/{objectId}/admin/email:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Account'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailUpdateRequest'
        security:
          - scope: []
            user: []
    /object/accounts/{objectId}/available-roles:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AvailableRolesResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/accounts/{objectId}/role:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRole'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/accounts/{objectId}/admin/scope:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRole'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/accounts/{objectId}/admin/third-party:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferThirdPartyAssociation'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThirdPartyAssociation'
        security:
          - scope: []
            user: []
    /object/accounts/{objectId}/admin/forget:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Account'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /basic/announcements/search:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnnouncementContentResponse'
          '400':
            description: Bad Request
        parameters:
          - name: date
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/announcements/content:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnnouncementContentResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/announcements/list:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnnouncementContentResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/announcements/:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAnnouncementRequest'
        security:
          - scope: []
            user: []
    /object/announcements/{objectId}/read:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementRequest'
        security:
          - scope: []
    /object/announcements/{objectId}/claim:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementRequest'
        security:
          - scope: []
    /object/announcements/{objectId}/raw:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnnouncementRawResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/announcements/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnnouncementQueryResponse'
          '400':
            description: Bad Request
        parameters:
          - name: include_deleted
            in: query
            schema:
              type: boolean
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementRequest'
        security:
          - scope: []
    /basic/auth/token:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Token'
          '400':
            description: Bad Request
        parameters:
          - name: token
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TokenResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRequestWrapper'
        security:
          - scope: []
    /object/calendars/{objectId}/claim:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarClaimRequest'
        security:
          - scope: []
    /object/calendars/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CalendarQueryResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/chatV2/{objectId}/rooms:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetRoomsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateRoomResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoomRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaveRoomResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRoomRequest'
        security:
          - scope: []
            user: []
    /object/chatV2/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetRoomsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: scope
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/chatV2/{objectId}/messages:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SendMessageResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageRequest'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/replace:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplaceObjectsRequest'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRequests'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/downloadURL:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/URLSResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRequests'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/metadata:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ObjectsMetadataResponse'
          '400':
            description: Bad Request
        parameters:
          - name: request
            in: query
            schema:
              type: array
            required: false
          - name: playerId
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/move:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerBasicCloudDataRequest'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/uploadURLFromPortal:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/URLSResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequestsFromPortal'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/commitManifest:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequests'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/data/uploadURL:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/URLSResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadRequests'
        security:
          - scope: []
            user: []
    /basic/cloudsaving/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        parameters:
          - name: playerId
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/commerce/catalog:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetCatalogResponse'
          '400':
            description: Bad Request
        parameters:
          - name: version
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/commerce/skus:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetSKUsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: version
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveSKUsRequest'
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetActiveOffersResponse'
          '400':
            description: Bad Request
        parameters:
          - name: scope
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/coupons/count:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetTotalCouponResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/commerce/{objectId}/offersAdmin:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetActiveOffersResponse'
          '400':
            description: Bad Request
        parameters:
          - name: language
            in: query
            schema:
              type: string
            required: false
          - name: time
            in: query
            schema:
              type: string
            required: false
          - name: stores
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/purchase:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportPurchaseRequest'
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/listings:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ActiveListingResponse'
          '400':
            description: Bad Request
        parameters:
          - name: listing
            in: query
            schema:
              type: string
            required: false
          - name: store
            in: query
            schema:
              type: string
            required: false
          - name: time
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/status:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClearStatusRequest'
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/coupons:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiveCouponReq'
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/stats/update:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatSubscriptionNotification'
        security:
          - scope: []
            user: []
    /object/commerce/{objectId}/offers:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetActiveOffersResponse'
          '400':
            description: Bad Request
        parameters:
          - name: language
            in: query
            schema:
              type: string
            required: false
          - name: time
            in: query
            schema:
              type: string
            required: false
          - name: stores
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /basic/content/manifest/pull:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PullManifestRequest'
        security:
          - scope: []
            user: []
    /basic/content/content:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContentOrText'
          '400':
            description: Bad Request
        parameters:
          - name: contentId
            in: query
            schema:
              type: string
            required: false
          - name: version
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/content/text:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SaveTextResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveTextRequest'
        security:
          - scope: []
            user: []
    /basic/content/manifest:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Manifest'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveManifestRequest'
        security:
          - scope: []
            user: []
    /basic/content/:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SaveContentResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaveContentRequest'
        security:
          - scope: []
            user: []
    /basic/content/manifest/public:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClientManifest'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/content/manifest/private:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ClientManifest'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/content/manifest/checksum:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ManifestChecksum'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/events/content:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventContentResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/events/calendar:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventsInDateRangeResponse'
          '400':
            description: Bad Request
        parameters:
          - name: from
            in: query
            schema:
              type: string
            required: false
          - name: to
            in: query
            schema:
              type: string
            required: false
          - name: query
            in: query
            schema:
              type: string
            required: false
          - name: limit
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/events/applyContent:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventApplyRequest'
        security:
          - scope: []
            user: []
    /basic/events/running:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventQueryResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
    /object/events/{objectId}/endPhase:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPhaseEndRequest'
        security:
          - scope: []
            user: []
    /object/events/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventObjectData'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/events/{objectId}/ping:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PingRsp'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/events/{objectId}/content:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetContentRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/events/{objectId}/refresh:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/event-players/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventPlayerView'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/event-players/{objectId}/claim:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EventClaimResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventClaimRequest'
        security:
          - scope: []
    /object/event-players/{objectId}/score:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventScoreRequest'
        security:
          - scope: []
    /object/gamerelay/{objectId}/sync:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SyncRsp'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncReq'
        security:
          - scope: []
            user: []
    /object/gamerelay/{objectId}/:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoomRequest'
        security:
          - scope: []
    /object/gamerelay/{objectId}/results:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GameResultsMessage'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultsRequest'
        security:
          - scope: []
    /object/inventory/{objectId}/preview:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PreviewVipBonusResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryUpdateRequest'
        security:
          - scope: []
    /object/inventory/{objectId}/multipliers:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MultipliersGetResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/inventory/{objectId}/transaction:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndTransactionRequest'
        security:
          - scope: []
            user: []
    /object/inventory/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InventoryView'
          '400':
            description: Bad Request
        parameters:
          - name: scope
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InventoryView'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryQueryRequest'
        security:
          - scope: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryUpdateRequest'
        security:
          - scope: []
    /object/inventory/{objectId}/transfer:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferRequest'
        security:
          - scope: []
            user: []
    /basic/inventory/items:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ItemContentResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
    /basic/inventory/currency:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CurrencyContentResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
    /basic/leaderboards/list:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardListResponse'
          '400':
            description: Bad Request
        parameters:
          - name: skip
            in: query
            schema:
              type: integer
              format: int32
            required: false
          - name: limit
            in: query
            schema:
              type: integer
              format: int32
            required: false
        security:
          - scope: []
            user: []
    /basic/leaderboards/player:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListLeaderBoardViewResponse'
          '400':
            description: Bad Request
        parameters:
          - name: dbid
            in: query
            schema:
              type: integer
              format: int64
            required: true
        security:
          - scope: []
            user: []
    /basic/leaderboards/assignment:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardAssignmentInfo'
          '400':
            description: Bad Request
        parameters:
          - name: boardId
            in: query
            schema:
              type: string
            required: true
          - name: joinBoard
            in: query
            schema:
              type: boolean
            required: false
        security:
          - scope: []
            user: []
    /basic/leaderboards/uid:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardUidResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/entries:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/membership:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardMembershipResponse'
          '400':
            description: Bad Request
        parameters:
          - name: playerId
            in: query
            schema:
              type: integer
            required: true
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/ranks:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderBoardViewResponse'
          '400':
            description: Bad Request
        parameters:
          - name: ids
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/leaderboards/{objectId}/partition:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardPartitionInfo'
          '400':
            description: Bad Request
        parameters:
          - name: playerId
            in: query
            schema:
              type: integer
            required: true
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardCreateRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/matches:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MatchMakingMatchesPvpResponse'
          '400':
            description: Bad Request
        parameters:
          - name: poolSize
            in: query
            schema:
              type: integer
            required: true
          - name: windows
            in: query
            schema:
              type: integer
            required: true
          - name: windowSize
            in: query
            schema:
              type: integer
            required: true
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/leaderboards/{objectId}/assignment:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardRemoveCacheEntryRequest'
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/entry:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardAddRequest'
        security:
          - scope: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardRemoveEntryRequest'
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/freeze:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/details:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderboardDetails'
          '400':
            description: Bad Request
        parameters:
          - name: from
            in: query
            schema:
              type: integer
            required: false
          - name: max
            in: query
            schema:
              type: integer
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/leaderboards/{objectId}/view:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LeaderBoardViewResponse'
          '400':
            description: Bad Request
        parameters:
          - name: max
            in: query
            schema:
              type: integer
            required: false
          - name: focus
            in: query
            schema:
              type: integer
            required: false
          - name: friends
            in: query
            schema:
              type: boolean
            required: false
          - name: from
            in: query
            schema:
              type: integer
            required: false
          - name: outlier
            in: query
            schema:
              type: integer
            required: false
          - name: guild
            in: query
            schema:
              type: boolean
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/leaderboards/{objectId}/swap:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardSwapRequest'
        security:
          - scope: []
            user: []
    /basic/groups/search:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupSearchResponse'
          '400':
            description: Bad Request
        parameters:
          - name: name
            in: query
            schema:
              type: string
            required: false
          - name: scoreMin
            in: query
            schema:
              type: integer
            required: false
          - name: sortField
            in: query
            schema:
              type: string
            required: false
          - name: userScore
            in: query
            schema:
              type: integer
            required: false
          - name: hasSlots
            in: query
            schema:
              type: boolean
            required: false
          - name: enrollmentTypes
            in: query
            schema:
              type: string
            required: false
          - name: offset
            in: query
            schema:
              type: integer
            required: false
          - name: scoreMax
            in: query
            schema:
              type: integer
            required: false
          - name: subGroup
            in: query
            schema:
              type: boolean
            required: false
          - name: sortValue
            in: query
            schema:
              type: integer
            required: false
          - name: type
            in: query
            schema:
              type: string
            required: false
          - name: limit
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
    /object/groups/{objectId}/role:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleChangeRequest'
        security:
          - scope: []
            user: []
    /object/groups/{objectId}/kick:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupMembershipResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KickRequest'
        security:
          - scope: []
    /object/groups/{objectId}/apply:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupApplication'
        security:
          - scope: []
            user: []
    /object/groups/{objectId}/donations:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDonationRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeDonationRequest'
        security:
          - scope: []
            user: []
    /object/groups/{objectId}/member:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupMembershipResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KickRequest'
        security:
          - scope: []
    /object/groups/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Group'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupUpdate'
        security:
          - scope: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisbandRequest'
        security:
          - scope: []
    /object/groups/{objectId}/invite:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInvite'
        security:
          - scope: []
            user: []
    /object/groups/{objectId}/petition:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupApplication'
        security:
          - scope: []
            user: []
    /object/group-users/{objectId}/availability:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AvailabilityResponse'
          '400':
            description: Bad Request
        parameters:
          - name: name
            in: query
            schema:
              type: string
            required: false
          - name: tag
            in: query
            schema:
              type: string
            required: false
          - name: type
            in: query
            schema:
              type: string
            required: false
          - name: subGroup
            in: query
            schema:
              type: boolean
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/group-users/{objectId}/recommended:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupSearchResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/group-users/{objectId}/join:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupMembershipResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipRequest'
        security:
          - scope: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupMembershipResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembershipRequest'
        security:
          - scope: []
    /object/group-users/{objectId}/group:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupCreateResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreate'
        security:
          - scope: []
    /object/group-users/{objectId}/search:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupSearchResponse'
          '400':
            description: Bad Request
        parameters:
          - name: name
            in: query
            schema:
              type: string
            required: false
          - name: scoreMin
            in: query
            schema:
              type: integer
            required: false
          - name: sortField
            in: query
            schema:
              type: string
            required: false
          - name: userScore
            in: query
            schema:
              type: integer
            required: false
          - name: hasSlots
            in: query
            schema:
              type: boolean
            required: false
          - name: enrollmentTypes
            in: query
            schema:
              type: string
            required: false
          - name: offset
            in: query
            schema:
              type: integer
            required: false
          - name: scoreMax
            in: query
            schema:
              type: integer
            required: false
          - name: subGroup
            in: query
            schema:
              type: boolean
            required: false
          - name: sortValue
            in: query
            schema:
              type: integer
            required: false
          - name: type
            in: query
            schema:
              type: string
            required: false
          - name: limit
            in: query
            schema:
              type: integer
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/group-users/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupUser'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/mail/attachments:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptMultipleAttachments'
        security:
          - scope: []
            user: []
    /basic/mail/template:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailTemplate'
          '400':
            description: Bad Request
        parameters:
          - name: templateName
            in: query
            schema:
              type: string
            required: false
          - name: gamerTag
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
    /basic/mail/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailResponse'
          '400':
            description: Bad Request
        parameters:
          - name: mid
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMailRequest'
        security:
          - scope: []
            user: []
    /basic/mail/bulk:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSendMailRequest'
        security:
          - scope: []
            user: []
    /object/mail/{objectId}/detail:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailResponse'
          '400':
            description: Bad Request
        parameters:
          - name: mid
            in: query
            schema:
              type: integer
            required: true
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/mail/{objectId}/categories:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListMailCategoriesResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /object/mail/{objectId}/search:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSearchResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailSearchRequest'
        security:
          - scope: []
    /object/mail/{objectId}/bulk:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSendMailRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateMailObjectRequest'
        security:
          - scope: []
    /object/mail/{objectId}/accept/many:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptMultipleAttachments'
        security:
          - scope: []
    /object/mail/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailQueryResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SendMailResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMailObjectRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MailSuccessResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMailRequest'
        security:
          - scope: []
    /object/matchmaking/{objectId}/tick:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/matchmaking/{objectId}/match:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MatchUpdate'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MatchUpdate'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
    /object/payments/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/payments/windows/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/audits:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListAuditResponse'
          '400':
            description: Bad Request
        parameters:
          - name: providerid
            in: query
            schema:
              type: string
            required: false
          - name: provider
            in: query
            schema:
              type: string
            required: false
          - name: state
            in: query
            schema:
              type: string
            required: false
          - name: txid
            in: query
            schema:
              type: integer
            required: false
          - name: player
            in: query
            schema:
              type: integer
            required: false
          - name: start
            in: query
            schema:
              type: integer
            required: false
          - name: limit
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
    /basic/payments/windows/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/test/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/facebook/update:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SubscriptionVerificationResponse'
          '400':
            description: Bad Request
        parameters:
          - name: hubMode
            in: query
            schema:
              type: string
            required: false
          - name: hubChallenge
            in: query
            schema:
              type: string
            required: false
          - name: hubVerifyToken
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FacebookPaymentUpdateResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacebookPaymentUpdateRequest'
        security:
          - scope: []
    /basic/payments/steam/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/facebook/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/facebook/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/test/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/itunes/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/googleplay/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/test/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/googleplay/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/itunes/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/facebook/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/coupon/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/steam/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/facebook/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/itunes/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/test/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/googleplay/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/steam/prices:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LocalizedPriceMap'
          '400':
            description: Bad Request
        parameters:
          - name: steamId
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
    /basic/payments/test/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/coupon/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/itunes/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/coupon/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/steam/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/payments/facebook/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/steam/order:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SteamOrderInfoResponse'
          '400':
            description: Bad Request
        parameters:
          - name: orderId
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/payments/windows/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/windows/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/googleplay/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/facebook/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/googleplay/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/coupon/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/coupon/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/steam/purchase/begin:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BeginPurchaseResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/steam/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/steam/auth:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SteamAuthRequest'
        security:
          - scope: []
    /basic/payments/steam/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/coupon/purchase/complete:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletePurchaseRequest'
        security:
          - scope: []
    /basic/payments/windows/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/googleplay/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/windows/purchase/fail:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/itunes/purchase/cancel:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPurchaseRequest'
        security:
          - scope: []
            user: []
    /basic/payments/test/product:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetProductResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sku
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/payments/itunes/purchase/track:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PaymentResultResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackPurchaseRequest'
        security:
          - scope: []
    /basic/push/register:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyRsp'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterReq'
        security:
          - scope: []
            user: []
    /basic/push/send:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyRsp'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendReq'
        security:
          - scope: []
            user: []
    /basic/realms/project/beamable:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectRequest'
        security:
          - scope: []
            user: []
    /basic/realms/customer/alias/available:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AliasAvailableResponse'
          '400':
            description: Bad Request
        parameters:
          - name: alias
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/realms/project:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProjectView'
          '400':
            description: Bad Request
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnarchiveProjectRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveProjectRequest'
        security:
          - scope: []
            user: []
    /basic/realms/games:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetGameResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/realms/config:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RealmConfigResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealmConfigSaveRequest'
        security:
          - scope: []
            user: []
    /basic/realms/project/rename:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenameProjectRequest'
        security:
          - scope: []
            user: []
    /basic/realms/plans:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServicePlansResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePlanRequest'
        security:
          - scope: []
            user: []
    /basic/realms/customer:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomerViewResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NewCustomerResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewCustomerRequest'
        security:
          - scope: []
    /basic/realms/launch-message:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LaunchMessageListResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLaunchMessageRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveLaunchMessageRequest'
        security:
          - scope: []
            user: []
    /basic/realms/is-customer:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
    /basic/realms/admin/customer:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomerResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/realms/game:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetGameResponse'
          '400':
            description: Bad Request
        parameters:
          - name: rootPID
            in: query
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewGameRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGameHierarchyRequest'
        security:
          - scope: []
            user: []
    /basic/realms/project/promote:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PromoteRealmResponseOld'
          '400':
            description: Bad Request
        parameters:
          - name: sourcePid
            in: query
            schema:
              type: string
            required: true
          - name: promotions
            in: query
            schema:
              type: array
              items:
                type: string
                format: blah
            required: false
          - name: contentManifestIds
            in: query
            schema:
              type: array
              items:
                type: string
                format: blah
            required: false
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PromoteRealmResponseOld'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmRequest'
        security:
          - scope: []
            user: []
    /basic/realms/customers:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CustomersResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
    /basic/realms/promotion:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PromoteRealmResponse'
          '400':
            description: Bad Request
        parameters:
          - name: sourcePid
            in: query
            schema:
              type: string
            required: true
          - name: promotions
            in: query
            schema:
              type: array
              items:
                type: string
                format: blah
            required: false
          - name: contentManifestIds
            in: query
            schema:
              type: array
              items:
                type: string
                format: blah
            required: false
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PromoteRealmResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromoteRealmRequest'
        security:
          - scope: []
            user: []
    /basic/notification/player:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        security:
          - scope: []
    /basic/notification/global:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        security:
          - scope: []
    /basic/notification/custom:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        security:
          - scope: []
    /basic/notification/server:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerEvent'
        security:
          - scope: []
            user: []
    /basic/notification/generic:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        security:
          - scope: []
    /basic/notification/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SubscriberDetailsResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/notification/game:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
        security:
          - scope: []
    /basic/session/history:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SessionHistoryResponse'
          '400':
            description: Bad Request
        parameters:
          - name: dbid
            in: query
            schema:
              type: integer
            required: true
          - name: month
            in: query
            schema:
              type: integer
            required: false
          - name: year
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/session/status:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OnlineStatusResponses'
          '400':
            description: Bad Request
        parameters:
          - name: playerIds
            in: query
            schema:
              type: string
            required: false
          - name: intervalSecs
            in: query
            schema:
              type: integer
            required: true
          - name: playerIdsSeq
            in: query
            schema:
              type: array
            required: false
        security:
          - scope: []
            user: []
    /basic/session/heartbeat:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SessionHeartbeat'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/session/:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StartSessionResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartSessionRequest'
        security:
          - scope: []
            user: []
    /basic/stats/client/batch:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BatchReadStatsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectIds
            in: query
            schema:
              type: string
            required: false
          - name: stats
            in: query
            schema:
              type: string
            required: false
          - name: format
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
    /basic/stats/batch:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSetStatsRequest'
        security:
          - scope: []
            user: []
    /basic/stats/search:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatsSearchResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSearchRequest'
        security:
          - scope: []
            user: []
    /basic/stats/subscribe:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommonResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSubscribeRequest'
        security:
          - scope: []
            user: []
    /object/stats/{objectId}/client/stringlist:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatUpdateRequestStringListFormat'
        security:
          - scope: []
    /object/stats/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: stats
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatUpdateRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatRequest'
        security:
          - scope: []
            user: []
    /object/stats/{objectId}/client:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: stats
            in: query
            schema:
              type: string
            required: false
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatUpdateRequest'
        security:
          - scope: []
    /basic/tournaments/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TournamentQueryResponse'
          '400':
            description: Bad Request
        parameters:
          - name: isRunning
            in: query
            schema:
              type: boolean
            required: false
        security:
          - scope: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PlayerStatus'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinRequest'
        security:
          - scope: []
            user: []
    /basic/tournaments/rewards:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RewardsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RewardsResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsRequest'
        security:
          - scope: []
            user: []
    /basic/tournaments/global:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetStandingsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
          - name: max
            in: query
            schema:
              type: integer
            required: false
          - name: focus
            in: query
            schema:
              type: integer
            required: false
          - name: cycle
            in: query
            schema:
              type: integer
            required: false
          - name: from
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/tournaments/standings:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetStandingsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
          - name: max
            in: query
            schema:
              type: integer
            required: false
          - name: focus
            in: query
            schema:
              type: integer
            required: false
          - name: cycle
            in: query
            schema:
              type: integer
            required: false
          - name: from
            in: query
            schema:
              type: integer
            required: false
        security:
          - scope: []
            user: []
    /basic/tournaments/admin/player:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminGetPlayerStatusResponse'
          '400':
            description: Bad Request
        parameters:
          - name: playerId
            in: query
            schema:
              type: integer
            required: true
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminPlayerStatus'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePlayerStatusRequest'
        security:
          - scope: []
            user: []
    /basic/tournaments/me:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetPlayerStatusResponse'
          '400':
            description: Bad Request
        parameters:
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/tournaments/champions:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetChampionsResponse'
          '400':
            description: Bad Request
        parameters:
          - name: tournamentId
            in: query
            schema:
              type: string
            required: false
          - name: cycles
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
            user: []
    /basic/tournaments/score:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreRequest'
        security:
          - scope: []
    /object/tournaments/{objectId}/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TournamentClientView'
          '400':
            description: Bad Request
        parameters:
          - name: objectId
            in: path
            schema:
              type: string
            required: true
        security:
          - scope: []
    /basic/social/friends:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerIdRequest'
        security:
          - scope: []
            user: []
    /basic/social/my:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Social'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/social/friends/import:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportFriendsRequest'
        security:
          - scope: []
            user: []
    /basic/social/blocked:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FriendshipStatus'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerIdRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FriendshipStatus'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerIdRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-timers/defs:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ListTimersResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/legacy-timers/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CookedTimerResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Timer'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTimerRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTimerRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-promos/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetDefinitionsResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CodeRedemptionResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeCreateRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-promos/codes:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetAvailableCodesResponse'
          '400':
            description: Bad Request
        parameters:
          - name: id
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CodeRedemptionResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCodesRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-promos/claim:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CodeRedemptionResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeClaimRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntitlementDefinitions'
          '400':
            description: Bad Request
        parameters:
          - name: symbol
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntitlementDefinitionRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/grant:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementGrantMultiRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/revoke:
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntitlementResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeEntitlementRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/upload:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadEntitlementDefinitionRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/player:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntitlementListResponse'
          '400':
            description: Bad Request
        parameters:
          - name: state
            in: query
            schema:
              type: string
            required: false
          - name: skip
            in: query
            schema:
              type: integer
            required: false
          - name: symbol
            in: query
            schema:
              type: string
            required: false
          - name: icw
            in: query
            schema:
              type: boolean
            required: false
          - name: spec
            in: query
            schema:
              type: string
            required: false
          - name: limit
            in: query
            schema:
              type: integer
            required: false
          - name: gt
            in: query
            schema:
              type: integer
            required: true
        security:
          - scope: []
            user: []
    /basic/legacy-entitlement-defs/claim:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntitlementResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimEntitlementRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-cloud/campaigns/schedule:
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RescheduleMessageCampaignRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-cloud/templates:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetCloudStorageResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageTemplateRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-cloud/campaigns:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetCampaignsResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageCampaignRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EjectMessageCampaignRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-pvp-defs/file:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvpRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-pvp-defs/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PvpDefinitions'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvpRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvpRequest'
        security:
          - scope: []
            user: []
    /basic/legacy-shards/accepting:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardListResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/legacy-shards/preferred:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardResponse'
          '400':
            description: Bad Request
        parameters:
          - name: preference
            in: query
            schema:
              type: string
            required: false
        security:
          - scope: []
            user: []
    /basic/legacy-shards/:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardListResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardDef'
        security:
          - scope: []
            user: []
      put:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardUpdateRequest'
        security:
          - scope: []
            user: []
      delete:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ShardResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardDeleteRequest'
        security:
          - scope: []
            user: []
    /basic/history/apiaccess/url:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueryUrlResponse'
          '400':
            description: Bad Request
        parameters:
          - name: from
            in: query
            schema:
              type: integer
              format: int64
            required: true
          - name: to
            in: query
            schema:
              type: integer
              format: int64
            required: true
          - name: customerScoped
            in: query
            schema:
              type: boolean
            required: false
        security:
          - scope: []
            user: []
    /basic/history/query/url:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueryUrlResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRequest'
        security:
          - scope: []
            user: []
    /basic/history/query:
      post:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueryResponse'
          '400':
            description: Bad Request
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRequest'
        security:
          - scope: []
            user: []
    /basic/history/microservices:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetMicroservicesResponse'
          '400':
            description: Bad Request
        parameters:
          - name: from
            in: query
            schema:
              type: integer
              format: int64
            required: true
          - name: to
            in: query
            schema:
              type: integer
              format: int64
            required: true
        security:
          - scope: []
            user: []
    /basic/history/account/roles:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdminUserRolesView'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
    /basic/history/apiaccess:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetAccessLogResponse'
          '400':
            description: Bad Request
        parameters:
          - name: from
            in: query
            schema:
              type: integer
              format: int64
            required: true
          - name: to
            in: query
            schema:
              type: integer
              format: int64
            required: true
        security:
          - scope: []
            user: []
    /basic/history/events:
      get:
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetNamespacesResponse'
          '400':
            description: Bad Request
        security:
          - scope: []
            user: []
  components:
    schemas:
      ScheduleTrialRequest:
        properties:
          name:
            type: string
          time:
            type: integer
        additionalProperties: false
        title: Schedule Trial Request
        type: object
        required:
          - time
      Trial:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          activated:
            type: integer
          cohorts:
            type: array
            items:
              $ref: '#/components/schemas/Cohort'
          ctype:
            type: string
          scheduleStart:
            type: integer
          assigned:
            type: integer
          strategy:
            type: string
          ttype:
            type: string
          created:
            type: integer
          active:
            type: boolean
        required:
          - active
          - assigned
      CustomCohortRule:
        type: object
        additionalProperties: false
        properties:
          customAttr:
            type: string
          customOp:
            type: string
          customVal:
            type: array
            items:
              type: string
      Cohort:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          customRule:
            type: array
            items:
              $ref: '#/components/schemas/CustomCohortRule'
          populationCap:
            type: integer
          assigned:
            type: integer
          pct:
            type: integer
          cloudData:
            type: array
            items:
              $ref: '#/components/schemas/CloudStorage'
        required:
          - assigned
      DeleteTrialDataRequest:
        properties:
          id:
            type: integer
        additionalProperties: false
        title: Delete Trial Data Request
        type: object
        required:
          - id
      SaveGameDataResponse:
        properties:
          result:
            type: string
          sid:
            type: integer
          version:
            type: integer
        additionalProperties: false
        title: Save Game Data Response
        type: object
        required:
          - sid
          - version
      PauseTrialRequest:
        properties:
          name:
            type: string
        additionalProperties: false
        title: Pause Trial Request
        type: object
      StartTrialRequest:
        properties:
          name:
            type: string
        additionalProperties: false
        title: Start Trial Request
        type: object
      CloudStorage:
        type: object
        additionalProperties: false
        properties:
          retrieved:
            type: integer
          uniqueIdentifier:
            type: string
          data: {}
          ref:
            type: string
          version:
            type: integer
          added:
            type: integer
          stype:
            type: integer
          updated:
            type: integer
          expiration:
            type: integer
          gt:
            type: integer
          sid:
            type: integer
        required:
          - sid
          - stype
      ListTrialsResponse:
        properties:
          result:
            type: array
            items:
              $ref: '#/components/schemas/Trial'
        additionalProperties: false
        title: List Trials Response
        type: object
      CohortEntry:
        type: object
        additionalProperties: false
        properties:
          trial:
            type: string
          cohort:
            type: string
      GetPlayerTrialsResponse:
        properties:
          trials:
            type: array
            items:
              $ref: '#/components/schemas/CohortEntry'
          cohortData:
            type: array
            items:
              $ref: '#/components/schemas/CloudStorage'
        additionalProperties: false
        title: Get Player Trials Response
        type: object
      GetS3DataResponse:
        properties:
          data:
            type: array
            items:
              type: integer
        additionalProperties: false
        title: Get S 3 Data Response
        type: object
      CreateTrialRestRequest:
        properties:
          name:
            type: string
          strat:
            type: string
          cohortType:
            type: string
          cohorts:
            type: string
        additionalProperties: false
        title: Create Trial Rest Request
        type: object
      UploadTrialDataRequest:
        properties:
          trialName:
            type: string
          cohortName:
            type: string
          dataName:
            type: string
          filePayloadBase64:
            type: string
        additionalProperties: false
        title: Upload Trial Data Request
        type: object
      GetS3DataRequest:
        properties:
          id:
            type: integer
        additionalProperties: false
        title: Get S 3 Data Request
        type: object
        required:
          - id
      DeleteTrialRequest:
        properties:
          trialType:
            type: string
          name:
            type: string
        additionalProperties: false
        title: Delete Trial Request
        type: object
      GetPlayerTrialsRequest:
        properties:
          dbid:
            type: integer
        additionalProperties: false
        title: Get Player Trials Request
        type: object
        required:
          - dbid
      TrialSuccessResponse:
        properties:
          result:
            type: boolean
        additionalProperties: false
        title: Trial Success Response
        type: object
        required:
          - result
      PasswordUpdateConfirmation:
        properties:
          code:
            type: string
          newPassword:
            type: string
          email:
            type: string
        additionalProperties: false
        title: Password Update Confirmation
        type: object
        required:
          - code
          - newPassword
      DeviceIdAvailableRequest:
        properties:
          deviceId:
            type: string
        additionalProperties: false
        title: Device Id Available Request
        type: object
        required:
          - deviceId
      AccountUpdate:
        properties:
          thirdParty:
            type: string
          hasThirdPartyToken:
            type: boolean
          country:
            type: string
          language:
            type: string
          gamerTagAssoc:
            $ref: '#/components/schemas/GamerTagAssociation'
          token:
            type: string
          deviceId:
            type: string
          userName:
            type: string
        additionalProperties: false
        title: Account Update
        type: object
        required:
          - hasThirdPartyToken
      EmailUpdateRequest:
        properties:
          newEmail:
            type: string
          codeType:
            type: string
        additionalProperties: false
        title: Email Update Request
        type: object
        required:
          - newEmail
      ThirdPartyAssociation:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          email:
            type: string
          userBusinessId:
            type: string
          userAppId:
            type: string
          meta:
            type: object
            additionalProperties: true
          appId:
            type: string
        required:
          - name
          - appId
          - userAppId
          - meta
      DeleteDevicesRequest:
        properties:
          deviceIds:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Delete Devices Request
        type: object
      ItemCreateRequest:
        type: object
        additionalProperties: false
        properties:
          contentId:
            type: string
          properties:
            type: array
            items:
              $ref: '#/components/schemas/ItemProperty'
        required:
          - contentId
          - properties
      AccountPersonallyIdentifiableInformationResponse:
        properties:
          account:
            $ref: '#/components/schemas/Account'
          stats:
            type: array
            items:
              $ref: '#/components/schemas/StatsResponse'
          paymentAudits:
            $ref: '#/components/schemas/ListAuditResponse'
        additionalProperties: false
        title: Account Personally Identifiable Information Response
        type: object
        required:
          - account
          - stats
          - paymentAudits
      InFlightMessage:
        type: object
        additionalProperties: false
        properties:
          method:
            type: string
          body:
            type: string
          path:
            type: string
          gamerTag:
            type: integer
            format: int64
          shard:
            type: string
          service:
            type: string
          id:
            type: string
        required:
          - service
          - id
          - method
          - path
          - body
      AccountPortalView:
        type: object
        additionalProperties: false
        properties:
          email:
            type: string
          roleString:
            type: string
          scopes:
            type: array
            items:
              type: string
          id:
            type: integer
            format: int64
          language:
            type: string
          roles:
            type: array
            items:
              $ref: '#/components/schemas/RoleMapping'
          thirdPartyAppAssociations:
            type: array
            items:
              type: string
        required:
          - id
          - scopes
          - thirdPartyAppAssociations
      SearchAccountsRequest:
        properties:
          query:
            type: string
          page:
            type: integer
            format: int32
          pagesize:
            type: integer
            format: int32
        additionalProperties: false
        title: Search Accounts Request
        type: object
        required:
          - query
          - page
          - pagesize
      PasswordUpdateRequest:
        properties:
          email:
            type: string
          codeType:
            type: string
        additionalProperties: false
        title: Password Update Request
        type: object
        required:
          - email
      PaymentAuditEntryViewModel:
        type: object
        additionalProperties: false
        properties:
          providerid:
            type: string
          history:
            type: array
            items:
              $ref: '#/components/schemas/PaymentHistoryEntryViewModel'
          txid:
            type: integer
            format: int64
          providername:
            type: string
          version:
            type: string
          obtainItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          txstate:
            type: string
          updated:
            type: integer
            format: int64
          obtainCurrency:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          entitlements:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementGenerator'
          details:
            $ref: '#/components/schemas/PaymentDetailsEntryViewModel'
          replayGuardValue:
            type: string
          gt:
            type: integer
            format: int64
          created:
            type: integer
            format: int64
        required:
          - gt
          - txid
          - providername
          - details
          - providerid
          - txstate
          - history
          - entitlements
      AccountPlayerView:
        properties:
          email:
            type: string
          deviceIds:
            type: array
            items:
              type: string
          scopes:
            type: array
            items:
              type: string
          id:
            type: integer
            format: int64
          language:
            type: string
          thirdPartyAppAssociations:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Account Player View
        type: object
        required:
          - id
          - scopes
          - thirdPartyAppAssociations
          - deviceIds
      PaymentHistoryEntryViewModel:
        type: object
        additionalProperties: false
        properties:
          change:
            type: string
          data:
            type: string
          timestamp:
            type: string
        required:
          - change
      AccountAvailableResponse:
        properties:
          available:
            type: boolean
        additionalProperties: false
        title: Account Available Response
        type: object
        required:
          - available
      EntitlementGenerator:
        type: object
        additionalProperties: false
        properties:
          quantity:
            type: integer
            format: int32
          claimWindow:
            $ref: '#/components/schemas/EntitlementClaimWindow'
          params:
            type: object
            additionalProperties: true
          symbol:
            type: string
          specialization:
            type: string
          action:
            type: string
        required:
          - symbol
          - action
      StatsResponse:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
            format: int64
          stats:
            type: object
            additionalProperties: true
        required:
          - id
        title: Stats Response
      RoleMapping:
        type: object
        additionalProperties: false
        properties:
          projectId:
            type: string
          role:
            type: string
        required:
          - projectId
          - role
      AccountRegistration:
        properties:
          email:
            type: string
          password:
            type: string
        additionalProperties: false
        title: Account Registration
        type: object
        required:
          - email
          - password
      EmailUpdateConfirmation:
        properties:
          code:
            type: string
          password:
            type: string
        additionalProperties: false
        title: Email Update Confirmation
        type: object
        required:
          - code
          - password
      GetAdminsResponse:
        properties:
          accounts:
            type: array
            items:
              $ref: '#/components/schemas/AccountPortalView'
        additionalProperties: false
        title: Get Admins Response
        type: object
        required:
          - accounts
      PaymentDetailsEntryViewModel:
        type: object
        additionalProperties: false
        properties:
          reference:
            type: string
          name:
            type: string
          quantity:
            type: integer
            format: int32
          sku:
            type: string
          price:
            type: integer
            format: int32
          subcategory:
            type: string
          gameplace:
            type: string
          localPrice:
            type: string
          category:
            type: string
          localCurrency:
            type: string
          providerProductId:
            type: string
        required:
          - price
          - quantity
          - name
          - reference
          - gameplace
          - sku
          - providerProductId
      CurrencyChange:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          amount:
            type: integer
            format: int64
          originalAmount:
            type: integer
            format: int64
        required:
          - amount
      AddAccountRequest:
        properties:
          email:
            type: string
          role:
            type: string
        additionalProperties: false
        title: Add Account Request
        type: object
        required:
          - email
      EntitlementClaimWindow:
        type: object
        additionalProperties: false
        properties:
          open:
            type: integer
            format: int64
          close:
            type: integer
            format: int64
        required:
          - open
          - close
      GamerTagAssociation:
        type: object
        additionalProperties: false
        properties:
          projectId:
            type: string
          gamerTag:
            type: integer
            format: int64
        required:
          - gamerTag
      EmptyResponse:
        properties:
          result:
            type: string
        additionalProperties: false
        title: Empty Response
        type: object
        required:
          - result
      ItemProperty:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          value:
            type: string
        required:
          - name
          - value
      ThirdPartyAvailableRequest:
        properties:
          thirdParty:
            type: string
          token:
            type: string
        additionalProperties: false
        title: Third Party Available Request
        type: object
        required:
          - thirdParty
          - token
      AccountSearchResponse:
        properties:
          accounts:
            type: array
            items:
              $ref: '#/components/schemas/Account'
        additionalProperties: false
        title: Account Search Response
        type: object
        required:
          - accounts
      ListAuditResponse:
        type: object
        additionalProperties: false
        properties:
          audits:
            type: array
            items:
              $ref: '#/components/schemas/PaymentAuditEntry'
        required:
          - audits
        title: List Audit Response
      AccountAvailableRequest:
        properties:
          email:
            type: string
        additionalProperties: false
        title: Account Available Request
        type: object
        required:
          - email
      FindAccountRequest:
        properties:
          query:
            type: string
        additionalProperties: false
        title: Find Account Request
        type: object
        required:
          - query
      Account:
        type: object
        additionalProperties: false
        properties:
          inFlight:
            type: array
            items:
              $ref: '#/components/schemas/InFlightMessage'
          createdTimeMillis:
            type: integer
            format: int64
          realmId:
            type: string
          email:
            type: string
          roleString:
            type: string
          deviceIds:
            type: array
            items:
              type: string
          privilegedAccount:
            type: boolean
          country:
            type: string
          wasMigrated:
            type: boolean
          id:
            type: integer
            format: int64
          gamerTags:
            type: array
            items:
              $ref: '#/components/schemas/GamerTagAssociation'
          language:
            type: string
          roles:
            type: array
            items:
              $ref: '#/components/schemas/RoleMapping'
          updatedTimeMillis:
            type: integer
            format: int64
          thirdParties:
            type: array
            items:
              $ref: '#/components/schemas/ThirdPartyAssociation'
          deviceId:
            type: string
          userName:
            type: string
          heartbeat:
            type: integer
            format: int64
          password:
            type: string
          user:
            type: string
          projects:
            type: array
            items:
              type: string
          created:
            type: integer
            format: int64
        required:
          - user
          - password
          - projects
        title: Account
      GetAccountRequest:
        properties:
          gamerTag:
            type: integer
          email:
            type: string
          thirdPartyAssoc:
            $ref: '#/components/schemas/ThirdPartyAssociation'
          deviceId:
            type: string
        additionalProperties: false
        title: Get Account Request
        type: object
      DeleteThirdPartyAssociation:
        properties:
          thirdParty:
            type: string
          userAppId:
            type: string
        additionalProperties: false
        title: Delete Third Party Association
        type: object
      UpdateRole:
        properties:
          cid:
            type: string
          realm:
            type: string
          role:
            type: string
        additionalProperties: false
        title: Update Role
        type: object
      AvailableRolesResponse:
        properties:
          roles:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Available Roles Response
        type: object
      TransferThirdPartyAssociation:
        properties:
          fromAccountId:
            type: integer
          thirdParty:
            $ref: '#/components/schemas/ThirdPartyAssociation'
        additionalProperties: false
        title: Transfer Third Party Association
        type: object
        required:
          - fromAccountId
      WebhookComet:
        type: object
        additionalProperties: false
        properties:
          method:
            type: string
          description:
            type: string
          variables:
            $ref: '#/components/schemas/RouteVariables'
          symbol:
            type: string
          route:
            $ref: '#/components/schemas/ServiceRoute'
          parameters:
            $ref: '#/components/schemas/RouteParameters'
      AnnouncementContentResponse:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Announcement'
        additionalProperties: false
        title: Announcement Content Response
        type: object
      AnnouncementAttachment:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          count:
            type: integer
          type:
            type: string
          properties:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentProperty'
        required:
          - count
      RouteVariable:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          typeName:
            type: string
      WebhookInvocationStrategy:
        type: object
        additionalProperties: false
        properties:
          invocationType:
            type: string
          retryType:
            type: string
      Announcement:
        type: object
        additionalProperties: false
        properties:
          body:
            type: string
          channel:
            type: string
          start_date:
            type: string
          gift:
            $ref: '#/components/schemas/PlayerReward'
          mongo_start_date:
            type: integer
          stat_requirements:
            type: array
            items:
              $ref: '#/components/schemas/PlayerStatRequirement'
          mongo_end_date:
            type: integer
          symbol:
            type: string
          clientData:
            type: object
            additionalProperties: true
          validationErrors:
            type: array
            items:
              type: string
          end_date:
            type: string
          title:
            type: string
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AnnouncementAttachment'
          summary:
            type: string
      RouteParameter:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          body:
            type: string
          typeName:
            type: string
          variableRef:
            $ref: '#/components/schemas/VariableReference'
      RouteVariables:
        type: object
        additionalProperties: false
        properties:
          variables:
            type: array
            items:
              $ref: '#/components/schemas/RouteVariable'
      PlayerReward:
        type: object
        additionalProperties: false
        properties:
          description:
            type: string
          addItemRequests:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          changeCurrencies:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChangeReward'
          callWebhooks:
            type: array
            items:
              $ref: '#/components/schemas/WebhookReward'
          addItems:
            type: array
            items:
              $ref: '#/components/schemas/NewItemReward'
          applyVipBonus:
            type: boolean
          addCurrencyMap:
            type: object
            additionalProperties: true
      VariableReference:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
      AttachmentProperty:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          value:
            type: string
      PlayerStatRequirement:
        type: object
        additionalProperties: false
        properties:
          domain:
            type: string
          stat:
            type: string
          constraint:
            type: string
          value:
            type: string
          access:
            type: string
      RouteParameters:
        type: object
        additionalProperties: false
        properties:
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/RouteParameter'
          payload:
            type: string
          objectId:
            type: string
      ServiceRoute:
        type: object
        additionalProperties: false
        properties:
          service:
            type: string
          endpoint:
            type: string
          serviceTypeStr:
            type: string
      CurrencyChangeReward:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          amount:
            type: integer
        required:
          - amount
      DeleteAnnouncementRequest:
        properties:
          symbol:
            type: string
        additionalProperties: false
        title: Delete Announcement Request
        type: object
      WebhookReward:
        type: object
        additionalProperties: false
        properties:
          webhookSymbol:
            type: string
          strategy:
            $ref: '#/components/schemas/WebhookInvocationStrategy'
          webHookComet:
            $ref: '#/components/schemas/WebhookComet'
      NewItemReward:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          properties:
            type: object
            additionalProperties: true
      SearchAnnouncementsRequest:
        properties:
          date:
            type: string
        additionalProperties: false
        title: Search Announcements Request
        type: object
      AnnouncementRawResponse:
        properties:
          announcements:
            type: object
            additionalProperties: true
        additionalProperties: false
        title: Announcement Raw Response
        type: object
      CommonResponse:
        properties:
          result:
            type: string
          data:
            type: object
            additionalProperties: true
        additionalProperties: false
        title: Common Response
        type: object
        required:
          - result
          - data
      AnnouncementQuery:
        properties:
          include_deleted:
            type: boolean
        additionalProperties: false
        title: Announcement Query
        type: object
      AnnouncementRequest:
        properties:
          announcement:
            type: string
          announcements:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Announcement Request
        type: object
      AnnouncementQueryResponse:
        properties:
          announcements:
            type: array
            items:
              $ref: '#/components/schemas/AnnouncementView'
        additionalProperties: false
        title: Announcement Query Response
        type: object
      AnnouncementView:
        type: object
        additionalProperties: false
        properties:
          body:
            type: string
          isClaimed:
            type: boolean
          channel:
            type: string
          endDate:
            type: string
          clientDataList:
            type: array
            items:
              $ref: '#/components/schemas/ClientDataEntry'
          secondsRemaining:
            type: integer
          id:
            type: string
          isDeleted:
            type: boolean
          isRead:
            type: boolean
          title:
            type: string
          startDate:
            type: string
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AnnouncementAttachment'
          summary:
            type: string
        required:
          - isRead
          - isClaimed
          - isDeleted
      ClientDataEntry:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          value:
            type: string
      TokenRequestWrapper:
        properties:
          username:
            type: string
          scope:
            type: array
            items:
              type: string
          refresh_token:
            type: string
          third_party:
            type: string
          redirect_uri:
            type: string
          client_id:
            type: string
          code:
            type: string
          token:
            type: string
          customerScoped:
            type: boolean
          grant_type:
            type: string
          password:
            type: string
        additionalProperties: false
        title: Token Request Wrapper
        type: object
      GetTokenRequest:
        properties:
          token:
            type: string
        additionalProperties: false
        title: Get Token Request
        type: object
      TokenResponse:
        properties:
          access_token:
            type: string
          expires_in:
            type: integer
            format: int64
          refresh_token:
            type: string
          scopes:
            type: array
            items:
              type: string
          token_type:
            type: string
        additionalProperties: false
        title: Token Response
        type: object
        required:
          - access_token
          - expires_in
          - refresh_token
          - token_type
      Token:
        properties:
          gamerTag:
            type: integer
          scopes:
            type: array
            items:
              type: string
          accountId:
            type: integer
          cid:
            type: integer
          pid:
            type: string
          expiresMs:
            type: integer
          token:
            type: string
          type:
            type: string
          created:
            type: integer
        additionalProperties: false
        title: Token
        type: object
        required:
          - created
          - cid
      RewardCalendarDay:
        type: object
        additionalProperties: false
        properties:
          obtain:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementGenerator'
      CalendarView:
        type: object
        additionalProperties: false
        properties:
          nextIndex:
            type: integer
          nextClaimSeconds:
            type: integer
          id:
            type: string
          remainingSeconds:
            type: integer
          days:
            type: array
            items:
              $ref: '#/components/schemas/RewardCalendarDay'
        required:
          - nextIndex
          - remainingSeconds
          - nextClaimSeconds
      CalendarClaimRequest:
        properties:
          id:
            type: string
        additionalProperties: false
        title: Calendar Claim Request
        type: object
      CalendarQueryResponse:
        properties:
          calendars:
            type: array
            items:
              $ref: '#/components/schemas/CalendarView'
        additionalProperties: false
        title: Calendar Query Response
        type: object
      CreateRoomResponse:
        properties:
          room:
            $ref: '#/components/schemas/RoomInfo'
        additionalProperties: false
        title: Create Room Response
        type: object
      SendMessageResponse:
        properties:
          message:
            $ref: '#/components/schemas/Message'
        additionalProperties: false
        title: Send Message Response
        type: object
      LeaveRoomRequest:
        properties:
          roomId:
            type: string
        additionalProperties: false
        title: Leave Room Request
        type: object
      SendMessageRequest:
        properties:
          roomId:
            type: string
          content:
            type: string
        additionalProperties: false
        title: Send Message Request
        type: object
      CreateRoomRequest:
        properties:
          roomName:
            type: string
          keepSubscribed:
            type: boolean
          players:
            type: array
            items:
              type: integer
          gameType:
            type: string
          dbids:
            type: array
            items:
              type: integer
        additionalProperties: false
        title: Create Room Request
        type: object
        required:
          - keepSubscribed
      RoomInfo:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          name:
            type: string
          keepSubscribed:
            type: boolean
          players:
            type: array
            items:
              type: integer
        required:
          - keepSubscribed
      LeaveRoomResponse:
        properties:
          removed:
            type: string
        additionalProperties: false
        title: Leave Room Response
        type: object
      GetRoomsResponse:
        properties:
          rooms:
            type: array
            items:
              $ref: '#/components/schemas/RoomInfo'
        additionalProperties: false
        title: Get Rooms Response
        type: object
      Message:
        type: object
        additionalProperties: false
        properties:
          roomId:
            type: string
          gamerTag:
            type: integer
          reactions:
            type: object
            additionalProperties: true
          timestampMillis:
            type: integer
          censoredContent:
            type: string
          messageId:
            type: string
          content:
            type: string
          body:
            type: string
          expires:
            type: integer
            format: utc-millisec
          receiverGamerTag:
            type: integer
          subject:
            type: string
          state:
            type: string
          id:
            type: integer
          senderGamerTag:
            type: integer
          sent:
            type: integer
            format: utc-millisec
          category:
            type: string
          bodyRef:
            type: integer
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/Attachment'
          rewards:
            $ref: '#/components/schemas/MailRewards'
          claimedTimeMs:
            type: integer
        required:
          - id
          - receiverGamerTag
          - senderGamerTag
      ChatGetRequest:
        properties:
          scope:
            type: string
        additionalProperties: false
        title: Chat Get Request
        type: object
      ObjectRequest:
        type: object
        additionalProperties: false
        properties:
          objectKey:
            type: string
      ObjectRequests:
        properties:
          request:
            type: array
            items:
              $ref: '#/components/schemas/ObjectRequest'
          playerId:
            type: integer
        additionalProperties: false
        title: Object Requests
        type: object
      ObjectsMetadataResponse:
        properties:
          response:
            type: array
            items:
              $ref: '#/components/schemas/ObjectMetadataResponse'
        additionalProperties: false
        title: Objects Metadata Response
        type: object
      URLSResponse:
        properties:
          response:
            type: array
            items:
              $ref: '#/components/schemas/URLResponse'
        additionalProperties: false
        title: URLS Response
        type: object
      URLResponse:
        type: object
        additionalProperties: false
        properties:
          url:
            type: string
          objectKey:
            type: string
      Reference:
        type: object
        additionalProperties: false
        properties:
          contentPrefix:
            type: string
          visibility:
            type: string
            enum:
              - not-available
          type:
            type: string
            enum:
              - not-available
      ObjectMetadataResponse:
        type: object
        additionalProperties: false
        properties:
          objectKey:
            type: string
          metadata:
            type: object
            additionalProperties: true
      MetadataPair:
        type: object
        additionalProperties: false
        properties:
          key:
            type: string
          value:
            type: string
      Manifest:
        properties:
          id:
            type: string
          manifest:
            type: array
            items:
              $ref: '#/components/schemas/Reference'
          created:
            type: integer
          replacement:
            type: boolean
          references:
            type: array
            items:
              $ref: '#/components/schemas/Reference'
          checksum:
            type: string
        additionalProperties: false
        title: Manifest
        type: object
        required:
          - created
      PlayerBasicCloudDataRequest:
        properties:
          playerId:
            type: integer
        additionalProperties: false
        title: Player Basic Cloud Data Request
        type: object
      UploadRequestsFromPortal:
        properties:
          request:
            type: array
            items:
              $ref: '#/components/schemas/UploadRequestFromPortal'
          playerId:
            type: integer
        additionalProperties: false
        title: Upload Requests From Portal
        type: object
      UploadRequests:
        properties:
          request:
            type: array
            items:
              $ref: '#/components/schemas/UploadRequest'
          playerId:
            type: integer
        additionalProperties: false
        title: Upload Requests
        type: object
      ReplaceObjectsRequest:
        properties:
          sourcePlayerId:
            type: integer
          targetPlayerId:
            type: integer
        additionalProperties: false
        title: Replace Objects Request
        type: object
        required:
          - sourcePlayerId
          - targetPlayerId
      UploadRequest:
        type: object
        additionalProperties: false
        properties:
          objectKey:
            type: string
          lastModified:
            type: integer
          checksum:
            type: string
          sizeInBytes:
            type: integer
          metadata:
            type: array
            items:
              $ref: '#/components/schemas/MetadataPair'
        required:
          - sizeInBytes
      UploadRequestFromPortal:
        type: object
        additionalProperties: false
        properties:
          objectKey:
            type: string
          sizeInBytes:
            type: integer
          metadata:
            type: array
            items:
              $ref: '#/components/schemas/MetadataPair'
          lastModified:
            type: integer
        required:
          - sizeInBytes
      OfferDefinition:
        type: object
        additionalProperties: false
        properties:
          titles:
            type: array
            items:
              type: string
          symbol:
            type: string
          obtainItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          lootRoll:
            $ref: '#/components/schemas/CommerceLootRoll'
          obtainCurrency:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          metadata:
            type: string
          images:
            type: array
            items:
              type: string
          descriptions:
            type: array
            items:
              type: string
          obtain:
            type: array
            items:
              type: string
      EntitlementRequirement:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          constraint:
            type: string
          state:
            type: string
          specialization:
            type: string
      GetSkusReq:
        properties:
          version:
            type: integer
        additionalProperties: false
        title: Get Skus Req
        type: object
      Listing:
        type: object
        additionalProperties: false
        properties:
          cohortRequirements:
            type: array
            items:
              $ref: '#/components/schemas/CohortRequirement'
          offerSymbol:
            type: string
          purchaseLimit:
            type: integer
          price:
            $ref: '#/components/schemas/Price'
          playerStatRequirements:
            type: array
            items:
              $ref: '#/components/schemas/PlayerStatRequirement'
          buttonText:
            type: object
            additionalProperties: true
          entitlementRequirements:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementRequirement'
          symbol:
            type: string
          clientData:
            type: object
            additionalProperties: true
          activeDurationCoolDownSeconds:
            type: integer
          activeDurationSeconds:
            type: integer
          activeDurationPurchaseLimit:
            type: integer
          offerRequirements:
            type: array
            items:
              $ref: '#/components/schemas/OfferRequirement'
          activePeriod:
            $ref: '#/components/schemas/Period'
      Function1:
        type: object
        additionalProperties: false
        properties: {}
      ResultResponse:
        properties:
          result:
            type: boolean
        additionalProperties: false
        title: Result Response
        type: object
        required:
          - result
      SKU:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          description:
            type: string
          realPrice:
            type: integer
          productIds:
            type: object
            additionalProperties: true
        required:
          - realPrice
      GetCatalogResponse:
        properties:
          catalog:
            $ref: '#/components/schemas/Catalog'
        additionalProperties: false
        title: Get Catalog Response
        type: object
      SKUDefinitions:
        type: object
        additionalProperties: false
        properties:
          version:
            type: integer
          created:
            type: integer
            format: utc-millisec
          definitions:
            type: array
            items:
              $ref: '#/components/schemas/SKU'
        required:
          - version
      Price:
        type: object
        additionalProperties: false
        properties:
          type:
            type: string
          symbol:
            type: string
          amount:
            type: integer
          schedule:
            type: array
            items:
              type: integer
      CommerceLootRoll:
        type: object
        additionalProperties: false
        properties:
          preroll:
            type: boolean
          externalTables:
            type: array
            items:
              type: string
        required:
          - preroll
      DateTime:
        type: object
        additionalProperties: false
        properties:
          dayOfYear:
            type: integer
          minuteOfHour:
            type: integer
          chronology:
            $ref: '#/components/schemas/Chronology'
          dayOfWeek:
            type: integer
          hourOfDay:
            type: integer
          dayOfMonth:
            type: integer
          yearOfEra:
            type: integer
          year:
            type: integer
          secondOfDay:
            type: integer
          yearOfCentury:
            type: integer
          equalNow:
            type: boolean
          afterNow:
            type: boolean
          secondOfMinute:
            type: integer
          monthOfYear:
            type: integer
          millis:
            type: integer
          beforeNow:
            type: boolean
          centuryOfEra:
            type: integer
          minuteOfDay:
            type: integer
          era:
            type: integer
          millisOfDay:
            type: integer
          zone:
            $ref: '#/components/schemas/DateTimeZone'
          millisOfSecond:
            type: integer
          weekOfWeekyear:
            type: integer
          weekyear:
            type: integer
        required:
          - era
          - dayOfYear
          - dayOfWeek
          - dayOfMonth
          - year
          - millisOfDay
          - monthOfYear
          - hourOfDay
          - minuteOfHour
          - secondOfMinute
          - millisOfSecond
          - weekyear
          - weekOfWeekyear
          - yearOfEra
          - yearOfCentury
          - centuryOfEra
          - secondOfDay
          - minuteOfDay
          - millis
          - afterNow
          - beforeNow
          - equalNow
      Period:
        type: object
        additionalProperties: false
        properties:
          start:
            type: string
          end:
            type: string
      DateTimeZone:
        type: object
        additionalProperties: false
        properties:
          fixed:
            type: boolean
          id:
            type: string
        required:
          - fixed
      OfferConstraint:
        type: object
        additionalProperties: false
        properties:
          constraint:
            type: string
          value:
            type: integer
        required:
          - value
      GetSKUsResponse:
        properties:
          skus:
            $ref: '#/components/schemas/SKUDefinitions'
        additionalProperties: false
        title: Get SK Us Response
        type: object
      GetCatalogReq:
        properties:
          version:
            type: integer
        additionalProperties: false
        title: Get Catalog Req
        type: object
      Chronology:
        type: object
        additionalProperties: false
        properties:
          zone:
            $ref: '#/components/schemas/DateTimeZone'
      SaveSKUsRequest:
        properties:
          definitions:
            type: array
            items:
              $ref: '#/components/schemas/SKU'
        additionalProperties: false
        title: Save SK Us Request
        type: object
      OfferRequirement:
        type: object
        additionalProperties: false
        properties:
          offerSymbol:
            type: string
          purchases:
            $ref: '#/components/schemas/OfferConstraint'
      CohortRequirement:
        type: object
        additionalProperties: false
        properties:
          trial:
            type: string
          cohort:
            type: string
          constraint:
            type: string
      Catalog:
        type: object
        additionalProperties: false
        properties:
          listingInfo$default$2:
            $ref: '#/components/schemas/Function1'
          offerDefinitions:
            type: array
            items:
              $ref: '#/components/schemas/OfferDefinition'
          stores:
            type: array
            items:
              $ref: '#/components/schemas/Store'
          version:
            type: integer
          listingInfo$default$3:
            $ref: '#/components/schemas/SKUDefinitions'
          created:
            type: integer
            format: utc-millisec
        required:
          - version
      Store:
        type: object
        additionalProperties: false
        properties:
          activeListingLimit:
            type: integer
          choose:
            type: integer
          listings:
            type: array
            items:
              $ref: '#/components/schemas/Listing'
          showInactiveListings:
            type: boolean
          symbol:
            type: string
          refreshTime:
            type: integer
          title:
            type: string
          storeWithAnnotations$default$3:
            type: boolean
          storeWithAnnotations$default$2:
            $ref: '#/components/schemas/DateTime'
        required:
          - storeWithAnnotations$default$3
      ReportPurchaseRequest:
        properties:
          listingId:
            type: string
          free:
            type: boolean
        additionalProperties: false
        title: Report Purchase Request
        type: object
      GetActiveListingRequest:
        properties:
          listing:
            type: string
          store:
            type: string
          time:
            type: string
        additionalProperties: false
        title: Get Active Listing Request
        type: object
      GetOffersReq:
        properties:
          language:
            type: string
          time:
            type: string
          stores:
            type: string
        additionalProperties: false
        title: Get Offers Req
        type: object
      ClearStatusRequest:
        properties:
          store:
            type: string
        additionalProperties: false
        title: Clear Status Request
        type: object
      PlayerListingView:
        type: object
        additionalProperties: false
        properties:
          clientDataList:
            type: array
            items:
              $ref: '#/components/schemas/ClientDataEntry'
          symbol:
            type: string
          clientData:
            type: object
            additionalProperties: true
          cooldown:
            type: integer
          secondsActive:
            type: integer
          offer:
            $ref: '#/components/schemas/PlayerOfferView'
          queryAfterPurchase:
            type: boolean
          purchasesRemain:
            type: integer
          secondsRemain:
            type: integer
          active:
            type: boolean
        required:
          - secondsActive
          - active
          - queryAfterPurchase
      StatSubscriptionNotification:
        properties:
          statsBefore:
            type: object
            additionalProperties: true
          statsAfter:
            type: object
            additionalProperties: true
        additionalProperties: false
        title: Stat Subscription Notification
        type: object
      GetTotalCouponResponse:
        properties:
          count:
            type: integer
        additionalProperties: false
        title: Get Total Coupon Response
        type: object
        required:
          - count
      GiveCouponReq:
        properties:
          listing:
            type: string
        additionalProperties: false
        title: Give Coupon Req
        type: object
      GetStoresReq:
        properties:
          scope:
            type: string
        additionalProperties: false
        title: Get Stores Req
        type: object
      PlayerStoreView:
        type: object
        additionalProperties: false
        properties:
          listings:
            type: array
            items:
              $ref: '#/components/schemas/PlayerListingView'
          symbol:
            type: string
          nextDeltaSeconds:
            type: integer
          title:
            type: string
          secondsRemain:
            type: integer
      PurchaseRequest:
        properties:
          purchaseId:
            type: string
        additionalProperties: false
        title: Purchase Request
        type: object
      PlayerOfferView:
        type: object
        additionalProperties: false
        properties:
          coupons:
            type: integer
          price:
            $ref: '#/components/schemas/Price'
          buttonText:
            type: string
          titles:
            type: array
            items:
              type: string
          symbol:
            type: string
          obtainItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          obtainCurrency:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          images:
            type: array
            items:
              type: string
          descriptions:
            type: array
            items:
              type: string
          obtain:
            type: array
            items:
              type: string
        required:
          - coupons
      ActiveListingResponse:
        properties:
          storeSymbol:
            type: string
          listing:
            $ref: '#/components/schemas/PlayerListingView'
        additionalProperties: false
        title: Active Listing Response
        type: object
      GetActiveOffersResponse:
        properties:
          stores:
            type: array
            items:
              $ref: '#/components/schemas/PlayerStoreView'
        additionalProperties: false
        title: Get Active Offers Response
        type: object
      ReferenceSuperset:
        type: object
        additionalProperties: false
        properties:
          tags:
            type: array
            items:
              type: string
          uri:
            type: string
          version:
            type: string
          id:
            type: string
          checksum:
            type: string
          type:
            type: string
          visibility:
            type: string
      PullManifestRequest:
        properties:
          sourceRealmPid:
            type: string
          id:
            type: string
        additionalProperties: false
        title: Pull Manifest Request
        type: object
      TextReference:
        type: object
        additionalProperties: false
        properties:
          contentPrefix:
            type: string
          tags:
            type: array
            items:
              type: string
          uri:
            type: string
          version:
            type: string
          id:
            type: string
          checksum:
            type: string
          type:
            type: string
            enum:
              - not-available
          visibility:
            type: string
            enum:
              - not-available
      SaveTextRequest:
        properties:
          text:
            type: array
            items:
              $ref: '#/components/schemas/TextDefinition'
        additionalProperties: false
        title: Save Text Request
        type: object
      TextDefinition:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          checksum:
            type: string
          properties:
            type: object
            additionalProperties: true
          tags:
            type: array
            items:
              type: string
      ContentOrText:
        properties:
          id:
            type: string
          version:
            type: string
          properties:
            type: object
            additionalProperties: true
        additionalProperties: false
        title: Content Or Text
        type: object
      ClientManifest:
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/ClientContentInfo'
          contentType:
            type: string
        additionalProperties: false
        title: Client Manifest
        type: object
      GetManifestRequest:
        properties:
          id:
            type: string
        additionalProperties: false
        title: Get Manifest Request
        type: object
      ContentDefinition:
        type: object
        additionalProperties: false
        properties:
          prefix:
            type: string
          tags:
            type: array
            items:
              type: string
          id:
            type: string
          checksum:
            type: string
          properties:
            type: object
            additionalProperties: true
          variants:
            type: array
            items:
              type: object
              additionalProperties: true
      ManifestChecksum:
        properties:
          id:
            type: string
          checksum:
            type: string
          createdAt:
            type: integer
        additionalProperties: false
        title: Manifest Checksum
        type: object
        required:
          - createdAt
      SaveContentRequest:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/ContentDefinition'
        additionalProperties: false
        title: Save Content Request
        type: object
      SaveManifestRequest:
        properties:
          id:
            type: string
          references:
            type: array
            items:
              $ref: '#/components/schemas/ReferenceSuperset'
        additionalProperties: false
        title: Save Manifest Request
        type: object
      GetContentRequest:
        properties:
          contentId:
            type: string
          version:
            type: string
        additionalProperties: false
        title: Get Content Request
        type: object
      SaveTextResponse:
        properties:
          text:
            type: array
            items:
              $ref: '#/components/schemas/TextReference'
        additionalProperties: false
        title: Save Text Response
        type: object
      ClientContentInfo:
        type: object
        additionalProperties: false
        properties:
          tags:
            type: array
            items:
              type: string
          uri:
            type: string
          version:
            type: string
          contentId:
            type: string
          type:
            type: string
            enum:
              - not-available
      SaveContentResponse:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/ContentReference'
        additionalProperties: false
        title: Save Content Response
        type: object
      ContentReference:
        type: object
        additionalProperties: false
        properties:
          contentPrefix:
            type: string
          tag:
            type: string
          tags:
            type: array
            items:
              type: string
          uri:
            type: string
          version:
            type: string
          id:
            type: string
          checksum:
            type: string
          type:
            type: string
            enum:
              - not-available
          visibility:
            type: string
            enum:
              - not-available
      EventInventoryRewardItem:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          properties:
            type: object
            additionalProperties: true
      LeaderboardCohort:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          description:
            type: string
          statRequirements:
            type: array
            items:
              $ref: '#/components/schemas/PlayerStatRequirement'
      LeaderboardCohortSettings:
        type: object
        additionalProperties: false
        properties:
          cohorts:
            type: array
            items:
              $ref: '#/components/schemas/LeaderboardCohort'
      Event:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          start_date:
            type: string
          phases:
            type: array
            items:
              $ref: '#/components/schemas/EventPhase'
          partition_size:
            type: integer
          group_rewards:
            $ref: '#/components/schemas/EventGroupRewards'
          cohortSettings:
            $ref: '#/components/schemas/LeaderboardCohortSettings'
          permissions:
            $ref: '#/components/schemas/ClientPermission'
          stores:
            type: array
            items:
              type: string
          symbol:
            type: string
          score_rewards:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardItem'
          schedule:
            $ref: '#/components/schemas/Schedule'
          rank_rewards:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardItem'
      EventQueryResponse:
        properties:
          events:
            type: array
            items:
              $ref: '#/components/schemas/EventObjectData'
        additionalProperties: false
        title: Event Query Response
        type: object
      EventRewardObtain:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          count:
            type: integer
        required:
          - count
      EventGroupRewards:
        type: object
        additionalProperties: false
        properties:
          scoreRewards:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardContent'
      EventsWithinDateRangeRequest:
        properties:
          from:
            type: string
          to:
            type: string
          query:
            type: string
          limit:
            type: integer
        additionalProperties: false
        title: Events Within Date Range Request
        type: object
      ClientPermission:
        type: object
        additionalProperties: false
        properties:
          write_self:
            type: boolean
        required:
          - write_self
      EventRewardContent:
        type: object
        additionalProperties: false
        properties:
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardCurrency'
          items:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardItem'
          min:
            type: number
          max:
            type: number
          obtain:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardObtain'
        required:
          - min
      EventPhaseRuntime:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          startTime:
            type: integer
          endTime:
            type: integer
          rules:
            type: array
            items:
              $ref: '#/components/schemas/EventRule'
        required:
          - startTime
          - endTime
      EventDateRanges:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          name:
            type: string
          state:
            type: string
          dates:
            type: array
            items:
              $ref: '#/components/schemas/DateRange'
      EventObjectData:
        type: object
        additionalProperties: false
        properties:
          inFlight:
            type: array
            items:
              $ref: '#/components/schemas/InFlightMessage'
          startTime:
            type: integer
          rootEventId:
            type: string
          state:
            type: string
            enum:
              - not-available
          running:
            type: boolean
          phase:
            $ref: '#/components/schemas/EventPhaseRuntime'
          permissions:
            $ref: '#/components/schemas/ClientPermission'
          lastChildEventId:
            type: string
          id:
            type: string
          origin:
            type: string
          content:
            $ref: '#/components/schemas/Event'
          done:
            type: boolean
          leaderboardId:
            type: string
        required:
          - done
          - running
        title: Event Object Data
      EventInventoryRewardCurrency:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          amount:
            type: integer
        required:
          - amount
      DateRange:
        type: object
        additionalProperties: false
        properties:
          from:
            type: string
          to:
            type: string
      EventsInDateRangeResponse:
        properties:
          eventInDateRange:
            type: array
            items:
              $ref: '#/components/schemas/EventDateRanges'
        additionalProperties: false
        title: Events In Date Range Response
        type: object
      EventApplyRequest:
        properties:
          content:
            $ref: '#/components/schemas/Event'
        additionalProperties: false
        title: Event Apply Request
        type: object
      EventRule:
        type: object
        additionalProperties: false
        properties:
          rule:
            type: string
          value:
            type: string
      Schedule:
        type: object
        additionalProperties: false
        properties:
          description:
            type: string
          crons:
            type: array
            items:
              type: string
          activeTo:
            type: string
          activeFrom:
            type: string
          definitions:
            type: array
            items:
              $ref: '#/components/schemas/ScheduleDefinition'
      ScheduleDefinition:
        type: object
        additionalProperties: false
        properties:
          dayOfWeek:
            type: array
            items:
              type: string
          minute:
            type: array
            items:
              type: string
          dayOfMonth:
            type: array
            items:
              type: string
          year:
            type: array
            items:
              type: string
          hour:
            type: array
            items:
              type: string
          second:
            type: array
            items:
              type: string
          month:
            type: array
            items:
              type: string
      EventPhase:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          duration_minutes:
            type: integer
          durationMillis:
            type: integer
          rules:
            type: array
            items:
              $ref: '#/components/schemas/EventRule'
          durationSeconds:
            type: integer
        required:
          - duration_minutes
          - durationMillis
          - durationSeconds
      EventContentResponse:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/Event'
        additionalProperties: false
        title: Event Content Response
        type: object
      EventPhaseEndRequest:
        properties:
          time:
            type: string
        additionalProperties: false
        title: Event Phase End Request
        type: object
      PingRsp:
        properties:
          keepAlive:
            type: boolean
        additionalProperties: false
        title: Ping Rsp
        type: object
        required:
          - keepAlive
      EventRewardItem:
        type: object
        additionalProperties: false
        properties:
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardCurrency'
          items:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardItem'
          min:
            type: number
          max:
            type: number
          obtain:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardObtain'
        required:
          - min
      SetContentRequest:
        properties:
          event:
            $ref: '#/components/schemas/Event'
          origin:
            type: string
        additionalProperties: false
        title: Set Content Request
        type: object
      EventClaimResponse:
        properties:
          view:
            $ref: '#/components/schemas/EventPlayerStateView'
          gameRspJson:
            type: string
        additionalProperties: false
        title: Event Claim Response
        type: object
      EventPlayerView:
        properties:
          running:
            type: array
            items:
              $ref: '#/components/schemas/EventPlayerStateView'
          done:
            type: array
            items:
              $ref: '#/components/schemas/EventPlayerStateView'
        additionalProperties: false
        title: Event Player View
        type: object
      EventPlayerReward:
        type: object
        additionalProperties: false
        properties:
          pendingInventoryRewards:
            $ref: '#/components/schemas/EventInventoryPendingRewards'
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardCurrency'
          pendingCurrencyRewards:
            type: object
            additionalProperties: true
          pendingItemRewards:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          items:
            type: array
            items:
              $ref: '#/components/schemas/EventInventoryRewardItem'
          min:
            type: number
          max:
            type: number
          earned:
            type: boolean
          claimed:
            type: boolean
          pendingEntitlementRewards:
            type: object
            additionalProperties: true
          obtain:
            type: array
            items:
              $ref: '#/components/schemas/EventRewardObtain'
        required:
          - min
          - earned
          - claimed
      EventScoreRequest:
        properties:
          eventId:
            type: string
          score:
            type: number
          increment:
            type: boolean
          stats:
            type: object
            additionalProperties: true
        additionalProperties: false
        title: Event Score Request
        type: object
        required:
          - score
      EventClaimRequest:
        properties:
          eventId:
            type: string
        additionalProperties: false
        title: Event Claim Request
        type: object
      EventInventoryPendingRewards:
        type: object
        additionalProperties: false
        properties:
          currencies:
            type: object
            additionalProperties: true
          items:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          empty:
            type: boolean
        required:
          - empty
      EventPlayerStateView:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          running:
            type: boolean
          allPhases:
            type: array
            items:
              $ref: '#/components/schemas/EventPlayerPhaseView'
          rank:
            type: integer
          score:
            type: number
          currentPhase:
            $ref: '#/components/schemas/EventPlayerPhaseView'
          secondsRemaining:
            type: integer
          id:
            type: string
          leaderboardId:
            type: string
          rankRewards:
            type: array
            items:
              $ref: '#/components/schemas/EventPlayerReward'
          scoreRewards:
            type: array
            items:
              $ref: '#/components/schemas/EventPlayerReward'
        required:
          - score
          - rank
          - running
          - secondsRemaining
      EventPlayerPhaseView:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          durationSeconds:
            type: integer
          rules:
            type: array
            items:
              $ref: '#/components/schemas/EventRule'
        required:
          - durationSeconds
      SyncRsp:
        properties:
          t:
            type: integer
          events:
            type: array
            items:
              $ref: '#/components/schemas/SimEvent'
        additionalProperties: false
        title: Sync Rsp
        type: object
        required:
          - t
      GameResultsMessage:
        properties:
          cheatingDetected:
            type: boolean
          deltaScores:
            type: array
            items:
              $ref: '#/components/schemas/DeltaScoreByLeaderBoardId'
          currenciesGranted:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          itemsGranted:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
        additionalProperties: false
        title: Game Results Message
        type: object
        required:
          - cheatingDetected
      DeltaScoreByLeaderBoardId:
        type: object
        additionalProperties: false
        properties:
          leaderBoardId:
            type: string
          scoreDelta:
            type: number
        required:
          - scoreDelta
      ResultsRequest:
        properties:
          results:
            type: array
            items:
              $ref: '#/components/schemas/PlayerResult'
        additionalProperties: false
        title: Results Request
        type: object
      PlayerResult:
        type: object
        additionalProperties: false
        properties:
          playerId:
            type: integer
          rank:
            type: integer
          score:
            type: number
        required:
          - playerId
          - rank
          - score
      SyncReq:
        properties:
          t:
            type: integer
          events:
            type: array
            items:
              $ref: '#/components/schemas/SimEvent'
        additionalProperties: false
        title: Sync Req
        type: object
        required:
          - t
      SimEvent:
        type: object
        additionalProperties: false
        properties:
          t:
            type: integer
          type:
            type: string
          origin:
            type: integer
          body:
            type: string
        required:
          - t
          - origin
      ItemGroup:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          items:
            type: array
            items:
              $ref: '#/components/schemas/Item'
        required:
          - id
          - items
      ItemUpdateRequest:
        type: object
        additionalProperties: false
        properties:
          contentId:
            type: string
          id:
            type: integer
            format: int64
          properties:
            type: array
            items:
              $ref: '#/components/schemas/ItemProperty'
        required:
          - contentId
          - id
          - properties
      CurrencyPreview:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          amount:
            type: integer
            format: int64
          originalAmount:
            type: integer
            format: int64
        required:
          - id
          - amount
          - originalAmount
      CurrencyView:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          amount:
            type: integer
            format: int64
          properties:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyProperty'
        required:
          - id
          - amount
          - properties
      InventoryView:
        properties:
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyView'
          items:
            type: array
            items:
              $ref: '#/components/schemas/ItemGroup'
          scope:
            type: string
        additionalProperties: false
        title: Inventory View
        type: object
        required:
          - currencies
          - items
      InventoryGetRequest:
        properties:
          scope:
            type: string
        additionalProperties: false
        title: Inventory Get Request
        type: object
      MultipliersGetResponse:
        properties:
          multipliers:
            type: array
            items:
              $ref: '#/components/schemas/VipBonus'
        additionalProperties: false
        title: Multipliers Get Response
        type: object
        required:
          - multipliers
      CurrencyProperty:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          value:
            type: string
        required:
          - name
          - value
      EndTransactionRequest:
        properties:
          transaction:
            type: string
        additionalProperties: false
        title: End Transaction Request
        type: object
        required:
          - transaction
      InventoryUpdateRequest:
        properties:
          currencies:
            type: object
            additionalProperties:
              type: integer
              format: int64
          empty:
            type: boolean
          currencyProperties:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/CurrencyProperty'
          currencyContentIds:
            type: array
            items:
              type: string
          applyVipBonus:
            type: boolean
          itemContentIds:
            type: array
            items:
              type: string
          updateItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemUpdateRequest'
          newItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          transaction:
            type: string
          deleteItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemDeleteRequest'
        additionalProperties: false
        title: Inventory Update Request
        type: object
        required:
          - itemContentIds
          - currencyContentIds
          - empty
      Item:
        type: object
        additionalProperties: false
        properties:
          updatedAt:
            type: integer
            format: int64
          proxyId:
            type: string
          id:
            type: integer
            format: int64
          properties:
            type: array
            items:
              $ref: '#/components/schemas/ItemProperty'
          createdAt:
            type: integer
            format: int64
        required:
          - id
          - properties
      InventoryQueryRequest:
        properties:
          scopes:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Inventory Query Request
        type: object
      ItemDeleteRequest:
        type: object
        additionalProperties: false
        properties:
          contentId:
            type: string
          id:
            type: integer
            format: int64
        required:
          - contentId
          - id
      VipBonus:
        type: object
        additionalProperties: false
        properties:
          currency:
            type: string
          multiplier:
            type: number
            format: double
          roundToNearest:
            type: integer
            format: int32
        required:
          - currency
          - multiplier
          - roundToNearest
      PreviewVipBonusResponse:
        properties:
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyPreview'
        additionalProperties: false
        title: Preview Vip Bonus Response
        type: object
        required:
          - currencies
      TransferRequest:
        properties:
          transaction:
            type: string
          recipientPlayer:
            type: integer
            format: int64
          currencies:
            type: object
            additionalProperties:
              type: integer
              format: int64
        additionalProperties: false
        title: Transfer Request
        type: object
        required:
          - recipientPlayer
      CurrencyContentResponse:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyArchetype'
        additionalProperties: false
        title: Currency Content Response
        type: object
        required:
          - content
      CurrencyArchetype:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          proxy:
            $ref: '#/components/schemas/InventoryProxySettings'
          clientPermission:
            $ref: '#/components/schemas/ClientPermission'
          startingAmount:
            type: integer
            format: int64
        required:
          - symbol
      InventoryProxySettings:
        type: object
        additionalProperties: false
        properties:
          service:
            type: string
        required:
          - service
      ItemArchetype:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          proxy:
            $ref: '#/components/schemas/InventoryProxySettings'
          clientPermission:
            $ref: '#/components/schemas/ClientPermission'
        required:
          - symbol
      ItemContentResponse:
        properties:
          content:
            type: array
            items:
              $ref: '#/components/schemas/ItemArchetype'
        additionalProperties: false
        title: Item Content Response
        type: object
        required:
          - content
      RankEntryStat:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          value:
            type: string
        required:
          - name
          - value
      LeaderboardUidResponse:
        properties:
          id:
            type: integer
            format: int64
        additionalProperties: false
        title: Leaderboard Uid Response
        type: object
        required:
          - id
      ListLeaderBoardViewResponse:
        properties:
          result:
            type: string
          lbs:
            type: array
            items:
              $ref: '#/components/schemas/LeaderBoardView'
        additionalProperties: false
        title: List Leader Board View Response
        type: object
        required:
          - result
          - lbs
      RankEntry:
        type: object
        additionalProperties: false
        properties:
          stats:
            type: array
            items:
              $ref: '#/components/schemas/RankEntryStat'
          rank:
            type: integer
            format: int64
          score:
            type: number
            format: double
          columns:
            type: object
            additionalProperties: true
          gt:
            type: integer
            format: int64
        required:
          - gt
          - rank
      LeaderboardPlayerAssignmentRequest:
        properties:
          boardId:
            type: string
          joinBoard:
            type: boolean
        additionalProperties: false
        title: Leaderboard Player Assignment Request
        type: object
        required:
          - boardId
      LeaderboardPlayerRequest:
        properties:
          dbid:
            type: integer
            format: int64
        additionalProperties: false
        title: Leaderboard Player Request
        type: object
        required:
          - dbid
      LeaderboardListRequest:
        properties:
          skip:
            type: integer
            format: int32
          limit:
            type: integer
            format: int32
        additionalProperties: false
        title: Leaderboard List Request
        type: object
      LeaderboardAssignmentInfo:
        properties:
          playerId:
            type: integer
            format: int64
          leaderboardId:
            type: string
        additionalProperties: false
        title: Leaderboard Assignment Info
        type: object
        required:
          - playerId
          - leaderboardId
      LeaderboardListResponse:
        properties:
          total:
            type: integer
            format: int32
          offset:
            type: integer
            format: int32
          nameList:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Leaderboard List Response
        type: object
        required:
          - total
          - offset
          - nameList
      LeaderBoardView:
        type: object
        additionalProperties: false
        properties:
          lbId:
            type: string
          boardSize:
            type: integer
            format: int64
          rankgt:
            $ref: '#/components/schemas/RankEntry'
          rankings:
            type: array
            items:
              $ref: '#/components/schemas/RankEntry'
        required:
          - boardSize
      LeaderboardPartitionInfo:
        properties:
          playerId:
            type: integer
          leaderboardId:
            type: string
          partition: {}
        additionalProperties: false
        title: Leaderboard Partition Info
        type: object
        required:
          - playerId
      LeaderboardPartitionRequest:
        properties:
          playerId:
            type: integer
        additionalProperties: false
        title: Leaderboard Partition Request
        type: object
        required:
          - playerId
      OrderRule:
        type: object
        additionalProperties: false
        properties:
          v:
            type: string
          o:
            type: integer
        required:
          - o
      LeaderboardMembershipRequest:
        properties:
          playerId:
            type: integer
        additionalProperties: false
        title: Leaderboard Membership Request
        type: object
        required:
          - playerId
      LeaderboardRemoveCacheEntryRequest:
        properties:
          playerId:
            type: integer
        additionalProperties: false
        title: Leaderboard Remove Cache Entry Request
        type: object
        required:
          - playerId
      LeaderboardGetRanksRequest:
        properties:
          ids:
            type: string
        additionalProperties: false
        title: Leaderboard Get Ranks Request
        type: object
      LeaderboardApiViewRequest:
        properties:
          max:
            type: integer
          focus:
            type: integer
          friends:
            type: boolean
          from:
            type: integer
          outlier:
            type: integer
          guild:
            type: boolean
        additionalProperties: false
        title: Leaderboard Api View Request
        type: object
      MatchMakingRanking:
        type: object
        additionalProperties: false
        properties:
          gt:
            type: integer
          rank:
            type: integer
          isUnranked:
            type: boolean
          variables:
            type: object
            additionalProperties: true
        required:
          - gt
          - rank
          - isUnranked
      LeaderBoardViewResponse:
        properties:
          result:
            type: string
          lb:
            $ref: '#/components/schemas/LeaderBoardView'
        additionalProperties: false
        title: Leader Board View Response
        type: object
      LeaderboardDetails:
        properties:
          lbid:
            type: string
          orules:
            $ref: '#/components/schemas/OrderRules'
          numberOfEntries:
            type: integer
          fullName:
            type: string
          view:
            $ref: '#/components/schemas/LeaderBoardView'
        additionalProperties: false
        title: Leaderboard Details
        type: object
        required:
          - numberOfEntries
      OrderRules:
        type: object
        additionalProperties: false
        properties:
          orules:
            type: array
            items:
              $ref: '#/components/schemas/OrderRule'
      LeaderboardRemoveEntryRequest:
        properties:
          id:
            type: integer
        additionalProperties: false
        title: Leaderboard Remove Entry Request
        type: object
        required:
          - id
      MatchMakingMatchesPvpResponse:
        properties:
          result:
            type: string
          totalEntries:
            type: integer
          playerRank:
            $ref: '#/components/schemas/MatchMakingRanking'
          windows:
            type: array
            items:
              $ref: '#/components/schemas/MatchMakingWindowResp'
        additionalProperties: false
        title: Match Making Matches Pvp Response
        type: object
        required:
          - totalEntries
      LeaderboardGetMatchRequest:
        properties:
          poolSize:
            type: integer
          windows:
            type: integer
          windowSize:
            type: integer
        additionalProperties: false
        title: Leaderboard Get Match Request
        type: object
        required:
          - poolSize
          - windows
          - windowSize
      LeaderboardCreateRequest:
        properties:
          freezeTime:
            type: integer
          derivatives:
            type: array
            items:
              type: string
          scoreName:
            type: string
          permissions:
            $ref: '#/components/schemas/ClientPermission'
          maxEntries:
            type: integer
          partitioned:
            type: boolean
          sharded:
            type: boolean
          ttl:
            type: integer
        additionalProperties: false
        title: Leaderboard Create Request
        type: object
        required:
          - sharded
      LeaderboardDetailsRequest:
        properties:
          from:
            type: integer
          max:
            type: integer
        additionalProperties: false
        title: Leaderboard Details Request
        type: object
      MatchMakingWindowResp:
        type: object
        additionalProperties: false
        properties:
          difficulty:
            type: integer
          matches:
            type: array
            items:
              $ref: '#/components/schemas/MatchMakingRanking'
        required:
          - difficulty
      LeaderboardSwapRequest:
        properties:
          winnerId:
            type: integer
          loserId:
            type: integer
          swapBase:
            type: integer
          delta:
            type: integer
        additionalProperties: false
        title: Leaderboard Swap Request
        type: object
        required:
          - swapBase
          - delta
      LeaderboardAddRequest:
        properties:
          maxScore:
            type: number
          stats:
            type: object
            additionalProperties: true
          score:
            type: number
          minScore:
            type: number
          id:
            type: integer
          increment:
            type: boolean
        additionalProperties: false
        title: Leaderboard Add Request
        type: object
        required:
          - id
          - score
      LeaderboardMembershipResponse:
        properties:
          result:
            type: boolean
        additionalProperties: false
        title: Leaderboard Membership Response
        type: object
        required:
          - result
      DonationEntry:
        type: object
        additionalProperties: false
        properties:
          playerId:
            type: integer
          amount:
            type: integer
          time:
            type: integer
        required:
          - playerId
          - amount
          - time
      Member:
        type: object
        additionalProperties: false
        properties:
          canDemote:
            type: boolean
          canKick:
            type: boolean
          role:
            type: string
          gamerTag:
            type: integer
          canPromote:
            type: boolean
          scores:
            type: array
            items:
              $ref: '#/components/schemas/GroupScoreBinding'
        required:
          - gamerTag
      GroupRole:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          permissions:
            type: array
            items:
              type: string
      DonationRequest:
        type: object
        additionalProperties: false
        properties:
          timeRequested:
            type: integer
          progress:
            type: array
            items:
              $ref: '#/components/schemas/DonationEntry'
          satisfied:
            type: boolean
          playerId:
            type: integer
          currency:
            $ref: '#/components/schemas/Currency'
        required:
          - playerId
          - timeRequested
          - satisfied
      GroupSearchResponse:
        properties:
          groups:
            type: array
            items:
              $ref: '#/components/schemas/Group'
        additionalProperties: false
        title: Group Search Response
        type: object
      Group:
        type: object
        additionalProperties: false
        properties:
          inFlight:
            type: array
            items:
              $ref: '#/components/schemas/InFlightMessage'
          name:
            type: string
          enrollmentType:
            type: string
          donations:
            type: array
            items:
              $ref: '#/components/schemas/DonationRequest'
          freeSlots:
            type: integer
          maybeDonations:
            type: object
            additionalProperties: true
          tag:
            type: string
          canUpdateMOTD:
            type: boolean
          shard:
            type: string
          canUpdateSlogan:
            type: boolean
          leader:
            type: integer
          slogan:
            type: string
          requirement:
            type: integer
          motd:
            type: string
          version:
            type: integer
          id:
            type: integer
          clientData:
            type: string
          roles:
            type: array
            items:
              $ref: '#/components/schemas/GroupRole'
          scores:
            type: object
            additionalProperties: true
          canUpdateEnrollment:
            type: boolean
          members:
            type: array
            items:
              $ref: '#/components/schemas/Member'
          canDisband:
            type: boolean
          type:
            type: string
            enum:
              - not-available
          maxSize:
            type: integer
          subGroups:
            type: array
            items:
              $ref: '#/components/schemas/Group'
          created:
            type: integer
            format: utc-millisec
        required:
          - id
          - requirement
          - maxSize
          - freeSlots
          - leader
      Currency:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          amount:
            type: integer
        required:
          - amount
      GroupScoreBinding:
        type: object
        additionalProperties: false
        properties:
          board:
            type: string
          derivatives:
            type: array
            items:
              type: string
          score:
            type: integer
        required:
          - score
      GroupSearchRequest:
        properties:
          name:
            type: string
          scoreMin:
            type: integer
          sortField:
            type: string
          userScore:
            type: integer
          hasSlots:
            type: boolean
          enrollmentTypes:
            type: string
          offset:
            type: integer
          scoreMax:
            type: integer
          subGroup:
            type: boolean
          sortValue:
            type: integer
          type:
            type: string
            enum:
              - not-available
          limit:
            type: integer
        additionalProperties: false
        title: Group Search Request
        type: object
      GroupInvite:
        properties:
          gamerTag:
            type: integer
          subGroup:
            type: integer
        additionalProperties: false
        title: Group Invite
        type: object
        required:
          - gamerTag
      CreateDonationRequest:
        properties:
          currencyId:
            type: string
          amount:
            type: integer
          config:
            type: string
        additionalProperties: false
        title: Create Donation Request
        type: object
        required:
          - amount
      KickRequest:
        properties:
          gamerTag:
            type: integer
          subGroup:
            type: integer
        additionalProperties: false
        title: Kick Request
        type: object
        required:
          - gamerTag
      GroupMembershipResponse:
        properties:
          gamerTag:
            type: integer
          member:
            type: boolean
          type:
            type: string
            enum:
              - not-available
          subGroups:
            type: array
            items:
              type: integer
          group:
            $ref: '#/components/schemas/GroupMetaData'
        additionalProperties: false
        title: Group Membership Response
        type: object
        required:
          - member
      GroupUpdate:
        properties:
          name:
            type: string
          enrollmentType:
            type: string
          tag:
            type: string
          slogan:
            type: string
          requirement:
            type: integer
          motd:
            type: string
          clientData:
            type: string
          subGroup:
            type: integer
        additionalProperties: false
        title: Group Update
        type: object
      GroupApplication:
        properties:
          subGroup:
            type: integer
        additionalProperties: false
        title: Group Application
        type: object
      GroupMetaData:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
          name:
            type: string
          tag:
            type: string
        required:
          - id
      MakeDonationRequest:
        properties:
          recipientId:
            type: integer
          amount:
            type: integer
        additionalProperties: false
        title: Make Donation Request
        type: object
        required:
          - recipientId
          - amount
      RoleChangeRequest:
        properties:
          gamerTag:
            type: integer
          role:
            type: string
          subGroup:
            type: integer
        additionalProperties: false
        title: Role Change Request
        type: object
        required:
          - gamerTag
      DisbandRequest:
        properties:
          subGroup:
            type: integer
        additionalProperties: false
        title: Disband Request
        type: object
      GroupCreate:
        properties:
          name:
            type: string
          enrollmentType:
            type: string
          tag:
            type: string
          requirement:
            type: integer
          clientData:
            type: string
          scores:
            type: array
            items:
              $ref: '#/components/schemas/GroupScoreBinding'
          time:
            type: integer
            format: utc-millisec
          type:
            type: string
            enum:
              - not-available
          maxSize:
            type: integer
          group:
            type: integer
        additionalProperties: false
        title: Group Create
        type: object
        required:
          - requirement
          - maxSize
      AvailabilityResponse:
        properties:
          name:
            type: boolean
          tag:
            type: boolean
        additionalProperties: false
        title: Availability Response
        type: object
        required:
          - name
          - tag
      GroupCreateResponse:
        properties:
          group:
            $ref: '#/components/schemas/GroupMetaData'
        additionalProperties: false
        title: Group Create Response
        type: object
      GroupUserMember:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
          subGroups:
            type: array
            items:
              $ref: '#/components/schemas/GroupUserMember'
          joined:
            type: integer
        required:
          - id
      GroupMembershipRequest:
        properties:
          successor:
            type: integer
          score:
            type: integer
          subGroup:
            type: integer
          type:
            type: string
            enum:
              - not-available
          group:
            type: integer
        additionalProperties: false
        title: Group Membership Request
        type: object
        required:
          - group
      AvailabilityRequest:
        properties:
          name:
            type: string
          tag:
            type: string
          type:
            type: string
            enum:
              - not-available
          subGroup:
            type: boolean
        additionalProperties: false
        title: Availability Request
        type: object
      GroupUser:
        properties:
          inFlight:
            type: array
            items:
              $ref: '#/components/schemas/InFlightMessage'
          gamerTag:
            type: integer
          allGroups:
            type: array
            items:
              $ref: '#/components/schemas/GroupUserMember'
          updated:
            type: integer
            format: utc-millisec
          member:
            type: object
            additionalProperties: true
          scores:
            type: array
            items:
              $ref: '#/components/schemas/GroupScoreBinding'
        additionalProperties: false
        title: Group User
        type: object
        required:
          - gamerTag
      UpdateMailRequest:
        properties:
          body:
            type: string
          expires:
            type: string
          subject:
            type: string
          state:
            type: string
          mailId:
            type: integer
          category:
            type: string
          acceptAttachments:
            type: boolean
        additionalProperties: false
        title: Update Mail Request
        type: object
        required:
          - mailId
      GetTemplateRequest:
        properties:
          templateName:
            type: string
          gamerTag:
            type: integer
        additionalProperties: false
        title: Get Template Request
        type: object
        required:
          - gamerTag
      AttachmentRequest:
        type: object
        additionalProperties: false
        properties:
          quantity:
            type: integer
          symbol:
            type: string
          specialization:
            type: string
          target:
            type: integer
          action:
            type: string
      MailResponse:
        properties:
          result:
            $ref: '#/components/schemas/Message'
        additionalProperties: false
        title: Mail Response
        type: object
      MailTemplate:
        properties:
          subject:
            type: string
          body:
            type: string
        additionalProperties: false
        title: Mail Template
        type: object
      SendMailRequest:
        type: object
        additionalProperties: false
        properties:
          body:
            type: string
          expires:
            type: string
          receiverGamerTag:
            type: integer
          subject:
            type: string
          id:
            type: integer
          senderGamerTag:
            type: integer
          category:
            type: string
          bodyRef:
            type: integer
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentRequest'
          rewards:
            $ref: '#/components/schemas/MailRewards'
        required:
          - senderGamerTag
          - receiverGamerTag
      Attachment:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
          wrapped:
            $ref: '#/components/schemas/EntitlementGenerator'
          state:
            type: string
          target:
            type: integer
        required:
          - id
      AcceptMultipleAttachments:
        properties:
          mailIds:
            type: array
            items:
              type: integer
        additionalProperties: false
        title: Accept Multiple Attachments
        type: object
      GetMailDetailsRequest:
        properties:
          mid:
            type: integer
        additionalProperties: false
        title: Get Mail Details Request
        type: object
        required:
          - mid
      MailSuccessResponse:
        properties:
          result:
            type: boolean
        additionalProperties: false
        title: Mail Success Response
        type: object
        required:
          - result
      BulkSendMailRequest:
        properties:
          sendMailRequests:
            type: array
            items:
              $ref: '#/components/schemas/SendMailRequest'
        additionalProperties: false
        title: Bulk Send Mail Request
        type: object
      MailSearchClause:
        type: object
        additionalProperties: false
        properties:
          forSender:
            type: integer
          name:
            type: string
          onlyCount:
            type: boolean
          categories:
            type: array
            items:
              type: string
          start:
            type: integer
          limit:
            type: integer
          states:
            type: array
            items:
              type: string
        required:
          - onlyCount
      MailSearchRequest:
        properties:
          clauses:
            type: array
            items:
              $ref: '#/components/schemas/MailSearchClause'
        additionalProperties: false
        title: Mail Search Request
        type: object
      MailSearchResponse:
        properties:
          results:
            type: array
            items:
              $ref: '#/components/schemas/MailSearchResponseClause'
        additionalProperties: false
        title: Mail Search Response
        type: object
      SendMailObjectRequest:
        properties:
          body:
            type: string
          expires:
            type: string
          subject:
            type: string
          rewards:
            $ref: '#/components/schemas/MailRewards'
          id:
            type: integer
          senderGamerTag:
            type: integer
          category:
            type: string
          bodyRef:
            type: integer
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentRequest'
        additionalProperties: false
        title: Send Mail Object Request
        type: object
        required:
          - senderGamerTag
      SendMailResponse:
        properties:
          mailId:
            type: integer
        additionalProperties: false
        title: Send Mail Response
        type: object
      MyMailUpdate:
        type: object
        additionalProperties: false
        properties:
          id:
            type: integer
          update:
            $ref: '#/components/schemas/UpdateMailRequest'
        required:
          - id
      MailQueryResponse:
        properties:
          unreadCount:
            type: integer
        additionalProperties: false
        title: Mail Query Response
        type: object
        required:
          - unreadCount
      BulkUpdateMailObjectRequest:
        properties:
          updateMailRequests:
            type: array
            items:
              $ref: '#/components/schemas/MyMailUpdate'
        additionalProperties: false
        title: Bulk Update Mail Object Request
        type: object
      MailRewards:
        type: object
        additionalProperties: false
        properties:
          currencies:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          items:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
      ListMailCategoriesResponse:
        properties:
          result:
            type: array
            items:
              type: string
        additionalProperties: false
        title: List Mail Categories Response
        type: object
      MailSearchResponseClause:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          count:
            type: integer
          content:
            type: array
            items:
              $ref: '#/components/schemas/Message'
        required:
          - count
      MatchUpdate:
        properties:
          players:
            type: array
            items:
              type: integer
          secondsRemaining:
            type: integer
          minPlayersReached:
            type: boolean
          gameStarted:
            type: boolean
          game:
            type: string
        additionalProperties: false
        title: Match Update
        type: object
        required:
          - minPlayersReached
          - gameStarted
      CompletePurchaseRequest:
        properties:
          txid:
            type: integer
          receipt:
            type: string
          priceInLocalCurrency:
            type: string
          isoCurrencySymbol:
            type: string
        additionalProperties: false
        title: Complete Purchase Request
        type: object
        required:
          - txid
      TrackPurchaseRequest:
        properties:
          priceInLocalCurrency:
            type: number
          skuName:
            type: string
          skuProductId:
            type: string
          store:
            type: string
          obtainItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          obtainCurrency:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          purchaseId:
            type: string
          isoCurrencySymbol:
            type: string
        additionalProperties: false
        title: Track Purchase Request
        type: object
        required:
          - priceInLocalCurrency
      FacebookUpdatedEntry:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          time:
            type: integer
          changed_fields:
            type: array
            items:
              type: string
        required:
          - time
      GetPricesRequest:
        properties:
          steamId:
            type: integer
        additionalProperties: false
        title: Get Prices Request
        type: object
        required:
          - steamId
      PaymentAuditEntry:
        type: object
        additionalProperties: false
        properties:
          inFlight:
            type: array
            items:
              $ref: '#/components/schemas/InFlightMessage'
          providerid:
            type: string
          history:
            type: array
            items:
              $ref: '#/components/schemas/PaymentHistoryEntry'
          txid:
            type: integer
          providername:
            type: string
          version:
            type: string
          obtainItems:
            type: array
            items:
              $ref: '#/components/schemas/ItemCreateRequest'
          txstate:
            type: string
          updated:
            type: integer
          obtainCurrency:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyChange'
          entitlements:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementGenerator'
          details:
            $ref: '#/components/schemas/PaymentDetailsEntry'
          replayGuardValue:
            type: string
          gt:
            type: integer
          created:
            type: integer
        required:
          - gt
          - txid
      FacebookPaymentUpdateRequest:
        properties:
          object:
            type: string
          entry:
            type: array
            items:
              $ref: '#/components/schemas/FacebookUpdatedEntry'
        additionalProperties: false
        title: Facebook Payment Update Request
        type: object
      GetOrderInfoRequest:
        properties:
          orderId:
            type: string
        additionalProperties: false
        title: Get Order Info Request
        type: object
      ListAuditRequest:
        properties:
          providerid:
            type: string
          provider:
            type: string
          state:
            type: string
          txid:
            type: integer
          player:
            type: integer
          start:
            type: integer
          limit:
            type: integer
        additionalProperties: false
        title: List Audit Request
        type: object
      FailPurchaseRequest:
        properties:
          txid:
            type: integer
          reason:
            type: string
        additionalProperties: false
        title: Fail Purchase Request
        type: object
        required:
          - txid
      BeginPurchaseRequest:
        properties:
          purchaseId:
            type: string
          language:
            type: string
          time:
            type: string
        additionalProperties: false
        title: Begin Purchase Request
        type: object
      SteamOrderInfoItem:
        type: object
        additionalProperties: false
        properties:
          vat:
            type: integer
          amount:
            type: integer
          itemid:
            type: integer
          qty:
            type: integer
          itemstatus:
            type: string
        required:
          - itemid
          - qty
          - amount
          - vat
      SubscriptionVerificationRequest:
        properties:
          hubMode:
            type: string
          hubChallenge:
            type: string
          hubVerifyToken:
            type: string
        additionalProperties: false
        title: Subscription Verification Request
        type: object
      GetProductResponse:
        properties:
          id:
            type: string
          name:
            type: string
          description:
            type: string
          price:
            type: integer
        additionalProperties: false
        title: Get Product Response
        type: object
        required:
          - price
      LocalizedPriceMap:
        properties:
          currency:
            type: string
          prices:
            type: array
            items:
              $ref: '#/components/schemas/LocalizedPrice'
        additionalProperties: false
        title: Localized Price Map
        type: object
      LocalizedPrice:
        type: object
        additionalProperties: false
        properties:
          to:
            type: integer
          price:
            type: integer
        required:
          - to
          - price
      PaymentResultResponse:
        properties:
          result:
            type: string
        additionalProperties: false
        title: Payment Result Response
        type: object
      BeginPurchaseResponse:
        properties:
          txid:
            type: integer
          access_token:
            type: string
        additionalProperties: false
        title: Begin Purchase Response
        type: object
        required:
          - txid
      SteamOrderInfoResponse:
        properties:
          usstate:
            type: string
          items:
            type: array
            items:
              $ref: '#/components/schemas/SteamOrderInfoItem'
          country:
            type: string
          timecreated:
            type: string
          transid:
            type: integer
          status:
            type: string
          orderid:
            type: integer
          steamid:
            type: integer
          currency:
            type: string
          time:
            type: string
        additionalProperties: false
        title: Steam Order Info Response
        type: object
        required:
          - orderid
          - transid
          - steamid
      GetProductRequest:
        properties:
          sku:
            type: string
        additionalProperties: false
        title: Get Product Request
        type: object
      PaymentHistoryEntry:
        type: object
        additionalProperties: false
        properties:
          change:
            type: string
          data:
            type: string
          timestamp:
            type: string
          MAX_FIELD_SIZE:
            type: integer
        required:
          - MAX_FIELD_SIZE
      CancelPurchaseRequest:
        properties:
          txid:
            type: integer
        additionalProperties: false
        title: Cancel Purchase Request
        type: object
        required:
          - txid
      PaymentDetailsEntry:
        type: object
        additionalProperties: false
        properties:
          reference:
            type: string
          name:
            type: string
          quantity:
            type: integer
          sku:
            type: string
          price:
            type: integer
          subcategory:
            type: string
          gameplace:
            type: string
          localPrice:
            type: string
          category:
            type: string
          localCurrency:
            type: string
          providerProductId:
            type: string
        required:
          - price
          - quantity
      SteamAuthRequest:
        properties:
          ticket:
            type: string
        additionalProperties: false
        title: Steam Auth Request
        type: object
      FacebookPaymentUpdateResponse:
        properties:
          result:
            type: string
          contentType:
            type: string
        additionalProperties: false
        title: Facebook Payment Update Response
        type: object
      SubscriptionVerificationResponse:
        properties:
          hubChallenge:
            type: string
          contentType:
            type: string
        additionalProperties: false
        title: Subscription Verification Response
        type: object
      EmptyRsp:
        properties: {}
        additionalProperties: false
        title: Empty Rsp
        type: object
      SendNotification:
        type: object
        additionalProperties: false
        properties:
          title:
            type: string
          body:
            type: string
      RegisterReq:
        properties:
          provider:
            type: string
          token:
            type: string
        additionalProperties: false
        title: Register Req
        type: object
      SendReq:
        properties:
          msgs:
            type: array
            items:
              $ref: '#/components/schemas/SendMsg'
        additionalProperties: false
        title: Send Req
        type: object
      SendMsg:
        type: object
        additionalProperties: false
        properties:
          to:
            type: array
            items:
              type: integer
          notification:
            $ref: '#/components/schemas/SendNotification'
          data:
            type: object
            additionalProperties: true
      Promotable:
        type: object
        additionalProperties: false
        properties:
          checksum:
            type: string
          createdAt:
            type: integer
            format: int64
        required:
          - checksum
          - createdAt
      ArchiveProjectRequest:
        properties:
          pid:
            type: string
        additionalProperties: false
        title: Archive Project Request
        type: object
        required:
          - pid
      UpdateGameHierarchyRequest:
        properties:
          rootPID:
            type: string
          projects:
            type: array
            items:
              $ref: '#/components/schemas/ProjectView'
        additionalProperties: false
        title: Update Game Hierarchy Request
        type: object
        required:
          - rootPID
          - projects
      LaunchMessageListResponse:
        properties:
          files:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Launch Message List Response
        type: object
        required:
          - files
      CustomerResponse:
        properties:
          customer:
            $ref: '#/components/schemas/Customer'
        additionalProperties: false
        title: Customer Response
        type: object
        required:
          - customer
      CustomersResponse:
        properties:
          result:
            type: array
            items:
              $ref: '#/components/schemas/Customer'
        additionalProperties: false
        title: Customers Response
        type: object
        required:
          - result
      CreatePlanRequest:
        properties:
          name:
            type: string
          messageBusAnalytics:
            type: array
            items:
              type: string
          memcachedHosts:
            type: string
          mongoSSL:
            type: boolean
          platformJBDC:
            type: string
          sharded:
            type: boolean
          mongoHosts:
            type: string
          messageBusCommon:
            type: array
            items:
              type: string
          redisShards:
            type: array
            items:
              $ref: '#/components/schemas/RedisShardRequest'
        additionalProperties: false
        title: Create Plan Request
        type: object
        required:
          - name
          - mongoHosts
          - sharded
          - mongoSSL
          - platformJBDC
          - memcachedHosts
          - redisShards
      ContentLimits:
        type: object
        additionalProperties: false
        properties:
          maxDistinctContentIds:
            type: integer
            format: int32
      ServiceLimits:
        type: object
        additionalProperties: false
        properties:
          beamo:
            $ref: '#/components/schemas/BeamoLimits'
          content:
            $ref: '#/components/schemas/ContentLimits'
          gateway:
            $ref: '#/components/schemas/GatewayLimits'
      GatewayLimits:
        type: object
        additionalProperties: false
        properties:
          maxConcurrentRequests:
            type: integer
            format: int32
        required:
          - maxConcurrentRequests
      NewCustomerRequest:
        properties:
          projectName:
            type: string
          email:
            type: string
          customerName:
            type: string
          hierarchy:
            type: boolean
          alias:
            type: string
          password:
            type: string
        additionalProperties: false
        title: New Customer Request
        type: object
        required:
          - projectName
          - email
          - password
      PromoteRealmResponseOld:
        properties:
          sourcePid:
            type: string
          promotions:
            type: array
            items:
              $ref: '#/components/schemas/RealmPromotion'
        additionalProperties: false
        title: Promote Realm Response Old
        type: object
        required:
          - sourcePid
          - promotions
      CustomerView:
        type: object
        additionalProperties: false
        properties:
          cid:
            type: integer
            format: int64
          name:
            type: string
          alias:
            type: string
          projects:
            type: array
            items:
              $ref: '#/components/schemas/ProjectView'
        required:
          - cid
          - name
          - projects
      GetGameResponse:
        properties:
          projects:
            type: array
            items:
              $ref: '#/components/schemas/ProjectView'
        additionalProperties: false
        title: Get Game Response
        type: object
        required:
          - projects
      PromoteRealmRequest:
        properties:
          sourcePid:
            type: string
          promotions:
            type: array
            items:
              type: string
          contentManifestIds:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Promote Realm Request
        type: object
        required:
          - sourcePid
      CreateLaunchMessageRequest:
        properties:
          name:
            type: string
          body:
            type: string
        additionalProperties: false
        title: Create Launch Message Request
        type: object
        required:
          - name
          - body
      RealmConfigSaveRequest:
        properties:
          config:
            type: object
            additionalProperties:
              type: string
        additionalProperties: false
        title: Realm Config Save Request
        type: object
        required:
          - config
      PromotionScope:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          promotions:
            type: array
            items:
              $ref: '#/components/schemas/Promotion'
        required:
          - name
          - promotions
      ServicePlan:
        type: object
        additionalProperties: false
        properties:
          minCustomerStatusSaved:
            type: string
          name:
            type: string
          dataDomain:
            $ref: '#/components/schemas/DataDomain'
          limits:
            $ref: '#/components/schemas/ServiceLimits'
          created:
            type: integer
            format: int64
        required:
          - name
          - dataDomain
      CustomerViewResponse:
        properties:
          customer:
            $ref: '#/components/schemas/CustomerView'
        additionalProperties: false
        title: Customer View Response
        type: object
        required:
          - customer
      AliasAvailableResponse:
        properties:
          alias:
            type: string
          available:
            type: boolean
          cid:
            type: integer
            format: int64
        additionalProperties: false
        title: Alias Available Response
        type: object
        required:
          - alias
          - available
          - cid
      RealmPromotion:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          source:
            $ref: '#/components/schemas/Promotable'
          destination:
            $ref: '#/components/schemas/Promotable'
        required:
          - name
          - source
          - destination
      BeamoLimits:
        type: object
        additionalProperties: false
        properties:
          maxContainerSize:
            type: string
          maxRunningContainersPerService:
            type: integer
            format: int32
        required:
          - maxContainerSize
          - maxRunningContainersPerService
      Project:
        type: object
        additionalProperties: false
        properties:
          displayName:
            type: string
          secret:
            type: string
          parent:
            type: string
          children:
            type: array
            items:
              type: string
          name:
            type: string
          customCharts:
            type: object
            additionalProperties:
              type: string
          root:
            type: boolean
          archived:
            type: boolean
          config:
            type: object
            additionalProperties:
              type: string
          status:
            type: string
          sharded:
            type: boolean
          sigval:
            type: boolean
          plan:
            type: string
          created:
            type: integer
            format: int64
        required:
          - name
          - secret
          - plan
          - customCharts
          - archived
          - root
      RedisShardRequest:
        type: object
        additionalProperties: false
        properties:
          shardId:
            type: integer
            format: int32
          masterHost:
            type: string
          slaveHosts:
            type: string
        required:
          - shardId
          - masterHost
          - slaveHosts
      RealmConfigResponse:
        properties:
          config:
            type: object
            additionalProperties:
              type: string
        additionalProperties: false
        title: Realm Config Response
        type: object
        required:
          - config
      Customer:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          paymentStatus:
            type: string
          image:
            type: string
          contact:
            type: string
          alias:
            type: string
          cid:
            type: integer
            format: int64
          updated:
            type: integer
            format: int64
          crm_link:
            type: string
          projects:
            type: array
            items:
              $ref: '#/components/schemas/Project'
          accounts:
            type: array
            items:
              $ref: '#/components/schemas/Account'
          created:
            type: integer
            format: int64
        required:
          - cid
          - name
          - projects
          - accounts
      AliasAvailableRequest:
        properties:
          alias:
            type: string
        additionalProperties: false
        title: Alias Available Request
        type: object
        required:
          - alias
      Promotion:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          source:
            $ref: '#/components/schemas/Promotable'
          destination:
            $ref: '#/components/schemas/Promotable'
        required:
          - id
          - source
          - destination
      GetGameRequest:
        properties:
          rootPID:
            type: string
        additionalProperties: false
        title: Get Game Request
        type: object
        required:
          - rootPID
      NewCustomerResponse:
        properties:
          name:
            type: string
          projectName:
            type: string
          alias:
            type: string
          cid:
            type: integer
            format: int64
          pid:
            type: string
          token:
            $ref: '#/components/schemas/TokenResponse'
        additionalProperties: false
        title: New Customer Response
        type: object
        required:
          - token
          - cid
          - pid
          - name
          - projectName
      DataDomain:
        type: object
        additionalProperties: false
        properties:
          messageBusAnalytics:
            type: array
            items:
              type: string
          memcachedHosts:
            type: array
            items:
              type: string
          mongoSharded:
            type: boolean
          mongoSSL:
            type: boolean
          mongoHosts:
            type: array
            items:
              type: string
          mongoSSLEnabled:
            type: boolean
          messageBusCommon:
            type: array
            items:
              type: string
          redisShards:
            type: array
            items:
              $ref: '#/components/schemas/RedisShard'
        required:
          - mongoHosts
          - mongoSharded
          - memcachedHosts
          - mongoSSLEnabled
      ServicePlansResponse:
        properties:
          result:
            type: array
            items:
              $ref: '#/components/schemas/ServicePlan'
        additionalProperties: false
        title: Service Plans Response
        type: object
        required:
          - result
      RenameProjectRequest:
        properties:
          projectId:
            type: string
          newName:
            type: string
        additionalProperties: false
        title: Rename Project Request
        type: object
        required:
          - projectId
          - newName
      NewGameRequest:
        properties:
          gameName:
            type: string
        additionalProperties: false
        title: New Game Request
        type: object
        required:
          - gameName
      CreateProjectRequest:
        properties:
          name:
            type: string
          plan:
            type: string
          sharded:
            type: boolean
          parent:
            type: string
        additionalProperties: false
        title: Create Project Request
        type: object
        required:
          - name
      UnarchiveProjectRequest:
        properties:
          projectId:
            type: string
        additionalProperties: false
        title: Unarchive Project Request
        type: object
        required:
          - projectId
      RedisShard:
        type: object
        additionalProperties: false
        properties:
          shardId:
            type: integer
            format: int32
          masterHost:
            type: string
          slaveHosts:
            type: array
            items:
              type: string
        required:
          - shardId
          - masterHost
          - slaveHosts
      PromoteRealmResponse:
        properties:
          sourcePid:
            type: string
          scopes:
            type: array
            items:
              $ref: '#/components/schemas/PromotionScope'
        additionalProperties: false
        title: Promote Realm Response
        type: object
        required:
          - sourcePid
          - scopes
      RemoveLaunchMessageRequest:
        properties:
          file:
            type: string
        additionalProperties: false
        title: Remove Launch Message Request
        type: object
        required:
          - file
      ProjectView:
        type: object
        additionalProperties: false
        properties:
          secret:
            type: string
          parent:
            type: string
          children:
            type: array
            items:
              type: string
          projectName:
            type: string
          archived:
            type: boolean
          cid:
            type: integer
            format: int64
          pid:
            type: string
          sharded:
            type: boolean
        required:
          - projectName
          - pid
      NotificationRequestData:
        type: object
        additionalProperties: false
        properties:
          messageParams:
            type: array
            items:
              type: string
          channel:
            type: string
          messageKey:
            type: string
          context:
            type: string
          shard:
            type: string
          meta:
            type: object
            additionalProperties: true
          messageFull:
            type: string
      ServerEvent:
        properties:
          event:
            type: string
          payload: {}
          toAll:
            type: boolean
        additionalProperties: false
        title: Server Event
        type: object
        required:
          - toAll
      NotificationRequest:
        properties:
          payload:
            $ref: '#/components/schemas/NotificationRequestData'
          dbid:
            type: integer
          customChannelSuffix:
            type: string
          dbids:
            type: array
            items:
              type: integer
        additionalProperties: false
        title: Notification Request
        type: object
      SubscriberDetailsResponse:
        properties:
          customChannelPrefix:
            type: string
          playerForRealmChannel:
            type: string
          authenticationKey:
            type: string
          gameGlobalNotificationChannel:
            type: string
          gameNotificationChannel:
            type: string
          subscribeKey:
            type: string
          playerChannel:
            type: string
        additionalProperties: false
        title: Subscriber Details Response
        type: object
      SessionHistoryRequest:
        properties:
          dbid:
            type: integer
          month:
            type: integer
          year:
            type: integer
        additionalProperties: false
        title: Session History Request
        type: object
        required:
          - dbid
      SessionHeartbeat:
        properties:
          gt:
            type: integer
          heartbeat:
            type: integer
        additionalProperties: false
        title: Session Heartbeat
        type: object
        required:
          - gt
      Era:
        type: object
        additionalProperties: false
        properties:
          value:
            type: integer
        required:
          - value
      OnlineStatusResponses:
        properties:
          players:
            type: array
            items:
              $ref: '#/components/schemas/PlayerOnlineStatusResponse'
        additionalProperties: false
        title: Online Status Responses
        type: object
      SessionHistoryResponse:
        properties:
          payments:
            type: array
            items:
              type: string
          totalPaid:
            type: array
            items:
              $ref: '#/components/schemas/PaymentTotal'
          sessions:
            type: array
            items:
              type: string
          date:
            $ref: '#/components/schemas/LocalDate'
          installDate:
            type: string
          daysPlayed:
            type: integer
        additionalProperties: false
        title: Session History Response
        type: object
        required:
          - daysPlayed
      LocalDate:
        type: object
        additionalProperties: false
        properties:
          dayOfYear:
            type: integer
          leapYear:
            type: boolean
          chronology:
            $ref: '#/components/schemas/IsoChronology'
          dayOfWeek:
            type: string
            enum:
              - SATURDAY
              - MONDAY
              - THURSDAY
              - TUESDAY
              - FRIDAY
              - WEDNESDAY
              - SUNDAY
          monthValue:
            type: integer
          dayOfMonth:
            type: integer
          year:
            type: integer
          era:
            $ref: '#/components/schemas/Era'
          month:
            type: string
            enum:
              - DECEMBER
              - APRIL
              - JULY
              - SEPTEMBER
              - JUNE
              - FEBRUARY
              - OCTOBER
              - AUGUST
              - NOVEMBER
              - MARCH
              - MAY
              - JANUARY
        required:
          - year
          - dayOfYear
          - leapYear
          - dayOfMonth
          - monthValue
      StartSessionRequest:
        properties:
          source:
            type: string
          customParams:
            type: object
            additionalProperties: true
          shard:
            type: string
          locale:
            type: string
          deviceParams:
            type: object
            additionalProperties: true
          language:
            $ref: '#/components/schemas/SessionLanguageContext'
          time:
            type: integer
          platform:
            type: string
          gamer:
            type: integer
          device:
            type: string
        additionalProperties: false
        title: Start Session Request
        type: object
      OnlineStatusRequest:
        properties:
          playerIds:
            type: string
          intervalSecs:
            type: integer
          playerIdsSeq:
            type: array
            items: {}
        additionalProperties: false
        title: Online Status Request
        type: object
        required:
          - intervalSecs
      PlayerOnlineStatusResponse:
        type: object
        additionalProperties: false
        properties:
          playerId:
            type: integer
          online:
            type: boolean
          lastSeen:
            type: integer
        required:
          - playerId
          - online
          - lastSeen
      GamerTag:
        type: object
        additionalProperties: false
        properties:
          tag:
            type: integer
          alias:
            type: string
          added:
            type: integer
          trials:
            type: array
            items:
              $ref: '#/components/schemas/CohortEntry'
          platform:
            type: string
          user:
            $ref: '#/components/schemas/User'
        required:
          - tag
      User:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          email:
            type: string
          gamerTag:
            type: integer
          username:
            type: string
          lastName:
            type: string
          firstName:
            type: string
          id:
            type: integer
          cid:
            type: string
          lang:
            type: string
          heartbeat:
            type: integer
          password:
            type: string
        required:
          - id
          - gamerTag
      SessionLanguageContext:
        type: object
        additionalProperties: false
        properties:
          code:
            type: string
          ctx:
            type: string
      IsoChronology:
        type: object
        additionalProperties: false
        properties:
          calendarType:
            type: string
          id:
            type: string
      PaymentTotal:
        type: object
        additionalProperties: false
        properties:
          currencyCode:
            type: string
          totalRevenue:
            type: integer
        required:
          - totalRevenue
      StartSessionResponse:
        properties:
          result:
            type: string
          gamer:
            $ref: '#/components/schemas/GamerTag'
        additionalProperties: false
        title: Start Session Response
        type: object
      StatUpdateRequest:
        type: object
        additionalProperties: false
        properties:
          objectId:
            type: string
          set:
            type: object
            additionalProperties: true
          add:
            type: object
            additionalProperties: true
          emitAnalytics:
            type: boolean
        title: Stat Update Request
      StatsSubscribeRequest:
        properties:
          service:
            type: string
          subscriptions:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Stats Subscribe Request
        type: object
      StatsSearchResponse:
        properties:
          ids:
            type: array
            items:
              type: integer
        additionalProperties: false
        title: Stats Search Response
        type: object
      NetworkSerializable:
        type: object
        additionalProperties: false
        properties: {}
      BatchReadStatsRequest:
        properties:
          objectIds:
            type: string
          stats:
            type: string
          format:
            type: string
        additionalProperties: false
        title: Batch Read Stats Request
        type: object
      BatchSetStatsRequest:
        properties:
          updates:
            type: array
            items:
              $ref: '#/components/schemas/StatUpdateRequest'
        additionalProperties: false
        title: Batch Set Stats Request
        type: object
      StatsSearchRequest:
        properties:
          domain:
            type: string
          access:
            type: string
          objectType:
            type: string
          criteria:
            type: array
            items:
              $ref: '#/components/schemas/StatsSearchCriteria'
        additionalProperties: false
        title: Stats Search Request
        type: object
      StatsSearchCriteria:
        type: object
        additionalProperties: false
        properties:
          stat:
            type: string
          rel:
            type: string
          value: {}
      BatchReadStatsResponse:
        properties:
          results:
            type: array
            items:
              $ref: '#/components/schemas/NetworkSerializable'
        additionalProperties: false
        title: Batch Read Stats Response
        type: object
      StatUpdateRequestStringListFormat:
        properties:
          set:
            type: array
            items:
              $ref: '#/components/schemas/StatStringListEntry'
        additionalProperties: false
        title: Stat Update Request String List Format
        type: object
      StatRequest:
        properties:
          stats:
            type: string
        additionalProperties: false
        title: Stat Request
        type: object
      StatStringListEntry:
        type: object
        additionalProperties: false
        properties:
          k:
            type: string
          v:
            type: string
      RewardsResponse:
        properties:
          rewardCurrencies:
            type: array
            items:
              $ref: '#/components/schemas/TournamentReward'
        additionalProperties: false
        title: Rewards Response
        type: object
      GetPlayerStatusRequest:
        properties:
          tournamentId:
            type: string
        additionalProperties: false
        title: Get Player Status Request
        type: object
      GetPlayerStatusResponse:
        properties:
          statuses:
            type: array
            items:
              $ref: '#/components/schemas/PlayerStatus'
        additionalProperties: false
        title: Get Player Status Response
        type: object
      RewardsRequest:
        properties:
          tournamentId:
            type: string
        additionalProperties: false
        title: Rewards Request
        type: object
      ScoreRequest:
        properties:
          tournamentId:
            type: string
          stats:
            type: object
            additionalProperties: true
          score:
            type: number
          playerId:
            type: integer
          increment:
            type: boolean
        additionalProperties: false
        title: Score Request
        type: object
        required:
          - playerId
          - score
      AdminGetPlayerStatusRequest:
        properties:
          playerId:
            type: integer
          tournamentId:
            type: string
        additionalProperties: false
        title: Admin Get Player Status Request
        type: object
        required:
          - playerId
      TournamentReward:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          amount:
            type: integer
        required:
          - amount
      GetChampionsResponse:
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/ChampionScore'
        additionalProperties: false
        title: Get Champions Response
        type: object
      TournamentClientView:
        type: object
        additionalProperties: false
        properties:
          tournamentId:
            type: string
          secondsRemaining:
            type: integer
          contentId:
            type: string
        required:
          - secondsRemaining
        title: Tournament Client View
      GetStandingsRequest:
        properties:
          tournamentId:
            type: string
          max:
            type: integer
          focus:
            type: integer
          cycle:
            type: integer
          from:
            type: integer
        additionalProperties: false
        title: Get Standings Request
        type: object
      TournamentEntry:
        type: object
        additionalProperties: false
        properties:
          rank:
            type: integer
          score:
            type: number
          currencyRewards:
            type: array
            items:
              $ref: '#/components/schemas/TournamentReward'
          playerId:
            type: integer
          stageChange:
            type: integer
        required:
          - playerId
          - rank
          - score
          - stageChange
      PlayerStatusUpdate:
        type: object
        additionalProperties: false
        properties:
          tier:
            type: integer
          stage:
            type: integer
          score:
            type: number
      TournamentQueryResponse:
        properties:
          tournaments:
            type: array
            items:
              $ref: '#/components/schemas/TournamentClientView'
        additionalProperties: false
        title: Tournament Query Response
        type: object
      PlayerStatus:
        type: object
        additionalProperties: false
        properties:
          lastUpdateCycle:
            type: integer
          tournamentId:
            type: string
          stage:
            type: integer
          unclaimedRewards:
            type: array
            items:
              $ref: '#/components/schemas/TournamentReward'
          tier:
            type: integer
          playerId:
            type: integer
          contentId:
            type: string
        required:
          - playerId
          - tier
          - stage
          - lastUpdateCycle
      GetStandingsResponse:
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/TournamentEntry'
          me:
            $ref: '#/components/schemas/TournamentEntry'
        additionalProperties: false
        title: Get Standings Response
        type: object
      TournamentQueryRequest:
        properties:
          isRunning:
            type: boolean
        additionalProperties: false
        title: Tournament Query Request
        type: object
      JoinRequest:
        properties:
          tournamentId:
            type: string
        additionalProperties: false
        title: Join Request
        type: object
      AdminPlayerStatus:
        type: object
        additionalProperties: false
        properties:
          tournamentId:
            type: string
          stage:
            type: integer
          unclaimedRewards:
            type: array
            items:
              $ref: '#/components/schemas/TournamentReward'
          tier:
            type: integer
          rank:
            type: integer
          score:
            type: number
          playerId:
            type: integer
          contentId:
            type: string
          nextCycleStartMs:
            type: integer
        required:
          - playerId
          - tier
          - stage
          - rank
          - score
          - nextCycleStartMs
      UpdatePlayerStatusRequest:
        properties:
          playerId:
            type: integer
          tournamentId:
            type: string
          update:
            $ref: '#/components/schemas/PlayerStatusUpdate'
        additionalProperties: false
        title: Update Player Status Request
        type: object
        required:
          - playerId
      ChampionScore:
        type: object
        additionalProperties: false
        properties:
          endTimeMs:
            type: integer
          startTimeMs:
            type: integer
          score:
            type: number
          cycle:
            type: integer
          playerId:
            type: integer
        required:
          - playerId
          - score
          - cycle
          - startTimeMs
          - endTimeMs
      GetChampionsRequest:
        properties:
          tournamentId:
            type: string
          cycles:
            type: integer
        additionalProperties: false
        title: Get Champions Request
        type: object
        required:
          - cycles
      AdminGetPlayerStatusResponse:
        properties:
          statuses:
            type: array
            items:
              $ref: '#/components/schemas/AdminPlayerStatus'
        additionalProperties: false
        title: Admin Get Player Status Response
        type: object
      Player:
        type: object
        additionalProperties: false
        properties:
          playerId:
            type: string
      Friend:
        type: object
        additionalProperties: false
        properties:
          playerId:
            type: string
          source:
            type: string
            enum:
              - not-available
      Social:
        properties:
          playerId:
            type: string
          friends:
            type: array
            items:
              $ref: '#/components/schemas/Friend'
          blocked:
            type: array
            items:
              $ref: '#/components/schemas/Player'
        additionalProperties: false
        title: Social
        type: object
      PlayerIdRequest:
        properties:
          playerId:
            type: string
        additionalProperties: false
        title: Player Id Request
        type: object
      FriendshipStatus:
        properties:
          playerId:
            type: string
          friendId:
            type: string
          isBlocked:
            type: boolean
        additionalProperties: false
        title: Friendship Status
        type: object
        required:
          - isBlocked
      ImportFriendsRequest:
        properties:
          source:
            type: string
          token:
            type: string
        additionalProperties: false
        title: Import Friends Request
        type: object
      CreateTimerRequest:
        properties:
          name:
            type: string
          cronish:
            type: string
        additionalProperties: false
        title: Create Timer Request
        type: object
      Timer:
        properties:
          name:
            type: string
          cronish:
            type: string
        additionalProperties: false
        title: Timer
        type: object
      ListTimersResponse:
        properties:
          result:
            type: string
          timers:
            type: array
            items:
              $ref: '#/components/schemas/CookedTimerDef'
        additionalProperties: false
        title: List Timers Response
        type: object
      CookedTimerResponse:
        properties:
          result:
            type: string
          timers:
            type: array
            items:
              $ref: '#/components/schemas/CookedTimer'
        additionalProperties: false
        title: Cooked Timer Response
        type: object
      CookedTimer:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          nextFire:
            type: integer
          secsTillFire:
            type: integer
          secsInPeriod:
            type: integer
        required:
          - nextFire
          - secsTillFire
          - secsInPeriod
      CookedTimerDef:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          secsTillFire:
            type: integer
          nextFire:
            type: integer
          cronish:
            type: string
          secsInPeriod:
            type: integer
        required:
          - nextFire
          - secsTillFire
          - secsInPeriod
      DeleteTimerRequest:
        properties:
          name:
            type: string
        additionalProperties: false
        title: Delete Timer Request
        type: object
      GetCodesRequest:
        properties:
          id:
            type: integer
        additionalProperties: false
        title: Get Codes Request
        type: object
        required:
          - id
      CodeClaimRequest:
        properties:
          code:
            type: string
        additionalProperties: false
        title: Code Claim Request
        type: object
      CreateRedemptionDef:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          timeExpires:
            type: integer
          description:
            type: string
          reward:
            $ref: '#/components/schemas/EntitlementGenerator'
          gift:
            $ref: '#/components/schemas/PlayerReward'
          maxPerUser:
            type: integer
          whitelist:
            type: array
            items:
              type: integer
          classification:
            type: string
        required:
          - maxPerUser
      CodeRedemptionSummary:
        type: object
        additionalProperties: false
        properties:
          definition:
            $ref: '#/components/schemas/RedemptionDef'
          capacity:
            type: integer
          redeemed:
            type: integer
        required:
          - capacity
          - redeemed
      CodeRedemptionResponse:
        properties:
          result:
            type: string
        additionalProperties: false
        title: Code Redemption Response
        type: object
      CodeCreateRequest:
        properties:
          definition:
            $ref: '#/components/schemas/CreateRedemptionDef'
          codes:
            type: integer
          claimsPerCode:
            type: integer
        additionalProperties: false
        title: Code Create Request
        type: object
        required:
          - codes
          - claimsPerCode
      RedemptionDef:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          creatorGt:
            type: integer
          timeExpires:
            type: integer
          description:
            type: string
          reward:
            $ref: '#/components/schemas/EntitlementGenerator'
          gift:
            $ref: '#/components/schemas/PlayerReward'
          timeCreated:
            type: integer
          maxPerUser:
            type: integer
          id:
            type: integer
          whitelist:
            type: array
            items:
              type: integer
          classification:
            type: string
        required:
          - maxPerUser
          - creatorGt
          - timeCreated
          - id
      GetDefinitionsResponse:
        properties:
          summaries:
            type: array
            items:
              $ref: '#/components/schemas/CodeRedemptionSummary'
        additionalProperties: false
        title: Get Definitions Response
        type: object
      ImportCodesRequest:
        properties:
          definitionId:
            type: integer
          codes:
            type: array
            items:
              type: string
          claimsPerCode:
            type: integer
        additionalProperties: false
        title: Import Codes Request
        type: object
        required:
          - definitionId
          - claimsPerCode
      GetAvailableCodesResponse:
        properties:
          codes:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Get Available Codes Response
        type: object
      DeleteEntitlementDefinitionRequest:
        properties:
          symbol:
            type: string
        additionalProperties: false
        title: Delete Entitlement Definition Request
        type: object
      GetPlayerEntitlementsRequest:
        properties:
          state:
            type: string
          skip:
            type: integer
          symbol:
            type: string
          icw:
            type: boolean
          spec:
            type: string
          limit:
            type: integer
          gt:
            type: integer
        additionalProperties: false
        title: Get Player Entitlements Request
        type: object
        required:
          - gt
      RevokeEntitlementRequest:
        properties:
          uuid:
            type: string
        additionalProperties: false
        title: Revoke Entitlement Request
        type: object
      ModifyEntitlementDefinitionRequest:
        type: object
        additionalProperties: false
        properties:
          symbol:
            type: string
          request:
            $ref: '#/components/schemas/EntitlementDefRequest'
      EntitlementGrantMultiRequest:
        properties:
          gamerTags:
            type: array
            items:
              type: integer
          generators:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementGenerator'
        additionalProperties: false
        title: Entitlement Grant Multi Request
        type: object
      EntitlementDefinition:
        type: object
        additionalProperties: false
        properties:
          maxGrants:
            type: integer
          groupSymbols:
            type: array
            items:
              type: string
          transferable:
            type: boolean
          name:
            type: string
          claimTrigger:
            $ref: '#/components/schemas/StateChangeTrigger'
          image:
            type: string
          description:
            type: string
          grantTrigger:
            $ref: '#/components/schemas/StateChangeTrigger'
          terminalExpirationSecs:
            type: integer
          symbol:
            type: string
          revokeMode:
            type: integer
          replaces:
            type: string
          created:
            type: integer
          parameterized:
            type: boolean
        required:
          - maxGrants
          - revokeMode
          - transferable
          - created
      EntitlementResponse:
        properties:
          status:
            type: string
          uuid:
            type: string
          state:
            type: string
        additionalProperties: false
        title: Entitlement Response
        type: object
      UploadEntitlementDefinitionRequest:
        properties:
          entitlements:
            type: array
            items:
              $ref: '#/components/schemas/ModifyEntitlementDefinitionRequest'
        additionalProperties: false
        title: Upload Entitlement Definition Request
        type: object
      StateChangeCondition:
        type: object
        additionalProperties: false
        properties:
          statvalue: {}
      EntitlementDefRequest:
        type: object
        additionalProperties: false
        properties:
          maxGrants:
            type: integer
          groupSymbols:
            type: array
            items:
              type: string
          transferable:
            type: boolean
          name:
            type: string
          claimTrigger:
            $ref: '#/components/schemas/StateChangeTriggerDef'
          image:
            type: string
          description:
            type: string
          grantTrigger:
            $ref: '#/components/schemas/StateChangeTriggerDef'
          terminalExpirationSecs:
            type: integer
          revokeMode:
            type: integer
          replaces:
            type: string
          parameterized:
            type: boolean
      EntitlementListResponse:
        properties:
          entitlements:
            type: array
            items:
              $ref: '#/components/schemas/Entitlement'
        additionalProperties: false
        title: Entitlement List Response
        type: object
      StateChangeTriggerDef:
        type: object
        additionalProperties: false
        properties:
          domain:
            type: string
          subject:
            type: string
          action:
            type: string
          conditions:
            type: array
            items:
              $ref: '#/components/schemas/StateChangeCondition'
      GetEntitlementDefinitionsRequest:
        properties:
          symbol:
            type: string
        additionalProperties: false
        title: Get Entitlement Definitions Request
        type: object
      StateChangeTrigger:
        type: object
        additionalProperties: false
        properties:
          domain:
            type: string
          subject:
            type: string
          action:
            type: string
          conditions:
            type: array
            items:
              $ref: '#/components/schemas/StateChangeCondition'
      EntitlementDefinitions:
        properties:
          definitions:
            type: array
            items:
              $ref: '#/components/schemas/EntitlementDefinition'
        additionalProperties: false
        title: Entitlement Definitions
        type: object
      Entitlement:
        type: object
        additionalProperties: false
        properties:
          cwinSecsTillOpen:
            type: integer
          history:
            type: array
            items:
              type: string
          state:
            type: string
          gamerTag:
            type: integer
          uuid:
            type: string
          cwin:
            $ref: '#/components/schemas/EntitlementClaimWindow'
          symbol:
            type: string
          specialized:
            type: string
          updated:
            type: integer
          cwinSecsTillClose:
            type: integer
          ttl:
            type: integer
            format: utc-millisec
        required:
          - gamerTag
          - updated
      ClaimEntitlementRequest:
        properties:
          gt:
            type: integer
          symbol:
            type: string
          spec:
            type: string
          uuid:
            type: string
        additionalProperties: false
        title: Claim Entitlement Request
        type: object
        required:
          - gt
      CreateMessageCampaignRequest:
        properties:
          mtype:
            type: string
          mb_store:
            type: string
          mb_expiration:
            type: string
          name:
            type: string
          subject:
            type: string
          mb_ent_spec:
            type: string
          mb_ent_quant:
            type: integer
          resend_to_past_recipients:
            type: boolean
          datepoint:
            type: string
          mb_attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentRequest'
          recur:
            type: string
          sent:
            type: integer
          msg:
            type: string
          rules:
            type: array
            items:
              type: string
          mb_ent:
            type: string
          start:
            type: string
          days:
            type: string
        additionalProperties: false
        title: Create Message Campaign Request
        type: object
        required:
          - sent
          - resend_to_past_recipients
      RescheduleMessageCampaignRequest:
        properties:
          sid:
            type: string
          startDate:
            type: string
        additionalProperties: false
        title: Reschedule Message Campaign Request
        type: object
      GetCloudStorageResponse:
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/CloudStorage'
        additionalProperties: false
        title: Get Cloud Storage Response
        type: object
      EjectMessageCampaignRequest:
        properties:
          sid:
            type: string
        additionalProperties: false
        title: Eject Message Campaign Request
        type: object
      GetCampaignsResponse:
        properties:
          campaigns:
            type: array
            items:
              $ref: '#/components/schemas/CloudStorage'
        additionalProperties: false
        title: Get Campaigns Response
        type: object
      DeleteRequest:
        properties:
          id:
            type: integer
        additionalProperties: false
        title: Delete Request
        type: object
        required:
          - id
      CreateMessageTemplateRequest:
        properties:
          name:
            type: string
          msg:
            type: string
        additionalProperties: false
        title: Create Message Template Request
        type: object
      PvpRewardDefinition:
        type: object
        additionalProperties: false
        properties:
          playerCap:
            type: integer
          tiers:
            type: array
            items:
              $ref: '#/components/schemas/PvpRewardTier'
          rewardExpHours:
            type: integer
      PvpRewardTier:
        type: object
        additionalProperties: false
        properties:
          percentage:
            type: integer
          bundleSymbol:
            type: string
        required:
          - percentage
      PvpRequest:
        properties:
          lbid:
            type: string
        additionalProperties: false
        title: Pvp Request
        type: object
      PvpDefinition:
        type: object
        additionalProperties: false
        properties:
          nextReward:
            type: integer
          lbid:
            type: string
          state:
            type: integer
          description:
            type: string
          idleDays:
            type: integer
          cron:
            type: string
          rewardDefinition:
            $ref: '#/components/schemas/PvpRewardDefinition'
          protectedRanks:
            type: integer
          minPlayers:
            type: integer
        required:
          - state
      PvpDefinitions:
        properties:
          definitions:
            type: array
            items:
              $ref: '#/components/schemas/PvpDefinition'
        additionalProperties: false
        title: Pvp Definitions
        type: object
      ShardDeleteRequest:
        properties:
          shardId:
            type: string
        additionalProperties: false
        title: Shard Delete Request
        type: object
      MetadataUpdate:
        type: object
        additionalProperties: false
        properties:
          set:
            type: object
            additionalProperties: true
          add:
            type: object
            additionalProperties: true
      ShardResponse:
        properties:
          result:
            type: string
          shard:
            $ref: '#/components/schemas/ShardDef'
        additionalProperties: false
        title: Shard Response
        type: object
      ShardDef:
        type: object
        additionalProperties: false
        properties:
          shardId:
            type: string
          uri:
            type: string
          metadata:
            type: object
            additionalProperties: true
      ShardListResponse:
        properties:
          result:
            type: string
          shards:
            type: array
            items:
              $ref: '#/components/schemas/ShardDef'
        additionalProperties: false
        title: Shard List Response
        type: object
      GetPreferredRequest:
        properties:
          preference:
            type: string
        additionalProperties: false
        title: Get Preferred Request
        type: object
      ShardUpdateRequest:
        properties:
          shardId:
            type: string
          uri:
            type: string
          metadata:
            $ref: '#/components/schemas/MetadataUpdate'
        additionalProperties: false
        title: Shard Update Request
        type: object
      GetNamespacesResponse:
        properties:
          namespaces:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Get Namespaces Response
        type: object
        required:
          - namespaces
      MicroserviceStateTotals:
        type: object
        additionalProperties: false
        properties:
          min:
            type: integer
            format: int32
          max:
            type: integer
            format: int32
          avg:
            type: number
            format: double
          last:
            type: integer
            format: int32
        required:
          - min
          - max
          - avg
          - last
      MicroserviceStateDetail:
        type: object
        additionalProperties: false
        properties:
          servicename:
            type: string
          runninginstances:
            type: integer
            format: int32
        required:
          - servicename
          - runninginstances
      AccessLogServices:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          requests:
            $ref: '#/components/schemas/AccessLogServiceDetails'
        required:
          - name
          - requests
      MicroserviceStatePoints:
        type: object
        additionalProperties: false
        properties:
          services:
            type: array
            items:
              $ref: '#/components/schemas/MicroserviceStateDetail'
          timestamp:
            type: integer
            format: int64
        required:
          - services
          - timestamp
      GetAccessLogRequest:
        properties:
          from:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
          to:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
        additionalProperties: false
        title: Get Access Log Request
        type: object
        required:
          - from
          - to
      AccessLogResultView:
        type: object
        additionalProperties: false
        properties:
          date:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
          count:
            type: integer
            format: int64
        required:
          - date
          - count
      AccessLogAggregates:
        type: object
        additionalProperties: false
        properties:
          sum:
            type: integer
            format: int64
          min:
            type: integer
            format: int64
          max:
            type: integer
            format: int64
          avg:
            type: number
            format: double
        required:
          - sum
          - min
          - max
          - avg
      QueryRequest:
        properties:
          query:
            type: string
        additionalProperties: false
        title: Query Request
        type: object
        required:
          - query
      AdminUserRolesView:
        properties:
          roles:
            type: array
            items:
              $ref: '#/components/schemas/RoleCountView'
        additionalProperties: false
        title: Admin User Roles View
        type: object
        required:
          - roles
      RoleCountView:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
          accounts:
            type: integer
            format: int32
        required:
          - name
          - accounts
      AccessLogServiceDetails:
        type: object
        additionalProperties: false
        properties:
          aggregates:
            $ref: '#/components/schemas/AccessLogAggregates'
          details:
            type: array
            items:
              $ref: '#/components/schemas/AccessLogResultView'
        required:
          - aggregates
          - details
      GetAccessLogUrlRequest:
        properties:
          from:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
          to:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
          customerScoped:
            type: boolean
        additionalProperties: false
        title: Get Access Log Url Request
        type: object
        required:
          - from
          - to
      GetAccessLogResponse:
        properties:
          aggregates:
            $ref: '#/components/schemas/AccessLogAggregates'
          services:
            type: array
            items:
              $ref: '#/components/schemas/AccessLogServices'
        additionalProperties: false
        title: Get Access Log Response
        type: object
        required:
          - aggregates
          - services
      GetMicroservicesResponse:
        properties:
          serviceAggregates:
            $ref: '#/components/schemas/MicroserviceStateTotals'
          runningInstanceAggregates:
            $ref: '#/components/schemas/MicroserviceStateTotals'
          dataPoints:
            type: array
            items:
              $ref: '#/components/schemas/MicroserviceStatePoints'
        additionalProperties: false
        title: Get Microservices Response
        type: object
      QueryResponse:
        properties:
          results:
            type: array
            items:
              type: string
        additionalProperties: false
        title: Query Response
        type: object
        required:
          - results
      QueryUrlResponse:
        properties:
          url:
            type: string
        additionalProperties: false
        title: Query Url Response
        type: object
        required:
          - url
      GetMicroservicesRequest:
        properties:
          from:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
          to:
            type: integer
            format: int64
            x-beamable-date-format: unix
            description: Milliseconds since midnight, January 1, 1970 UTC
        additionalProperties: false
        title: Get Microservices Request
        type: object
        required:
          - from
          - to
    securitySchemes:
      userRequired:
        type: apiKey
        name: X-DE-GAMERTAG
        in: header
        description: Gamer Tag of the player.
      scope:
        type: apiKey
        name: X-DE-SCOPE
        in: header
        description: >-
          Customer and project scope. This should contain the
          '<customer-id>.<project-id>'.
      api:
        type: apiKey
        name: X-DE-SIGNATURE
        in: header
        description: Signed Request authentication using project secret key.
      user:
        type: http
        description: >-
          Bearer authentication with an player access token in the Authorization
          header.
        scheme: bearer
        bearerFormat: Bearer <Access Token>
  security: []
  externalDocs:
    description: Beamable Documentation
    url: https://docs.beamable.com
  openapi: 3.0.2
  x-readme:
    explorer-enabled: true
    proxy-enabled: true
  _id: 6407b33aad681d006c66907c
konfigCliVersion: 1.38.37
