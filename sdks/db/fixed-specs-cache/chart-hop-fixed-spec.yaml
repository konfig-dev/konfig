publishJson:
  company: ChartHop
  serviceName: false
  sdkName: chart-hop-{language}-sdk
  clientName: ChartHop
  metaDescription: >-
    ChartHop is a dynamic People Operations Platform that connects and
    visualizes all your people data to empower your organization through
    insights, alignment, and action.
  apiStatusUrls: inherit
  homepage: charthop.com
  developerDocumentation: docs.charthop.com/developer-basics
  categories:
    - hr
    - analytics
    - hr_metrics
    - hr_analytics
    - hr_reporting
    - human_resources
    - workforce_planning
    - hr_dashboard
    - workforce_insights
    - people_analytics
    - workforce_intelligence
    - workforce_analytics
    - human_capital_management
    - workforce_solutions
    - hris
rawSpecString: |
  openapi: 3.0.0
  info:
    description: REST API for ChartHop
    version: V1.0.0
    title: ChartHop API
    contact:
      name: ChartHop
      url: https://www.charthop.com
      email: support@charthop.com
  tags:
    - name: access
    - name: action
    - name: ai
    - name: appConfig
    - name: app
    - name: approval-request
    - name: approval
    - name: assessment
    - name: billing
    - name: budget-pool
    - name: calendar
    - name: category
    - name: category-sort
    - name: change
    - name: comment
    - name: band
    - name: comp-review
    - name: content
    - name: customer
    - name: data-view
    - name: email-template
    - name: event
    - name: exchange-rate
    - name: export
    - name: expression
    - name: field
    - name: file
    - name: form
    - name: form-response
    - name: media
    - name: guideline
    - name: import
    - name: job-level
    - name: legalDoc
    - name: message
    - name: metric
    - name: multiplier
    - name: notification
    - name: oauth
    - name: onboard
    - name: org-config
    - name: org
    - name: policy
    - name: preload
    - name: process
    - name: product
    - name: profile-tab
    - name: query
    - name: question
    - name: reportChart
    - name: report
    - name: role
    - name: saml
    - name: scenario
    - name: search
    - name: status
    - name: stock
    - name: stripe
    - name: table
    - name: task-config
    - name: task
    - name: template
    - name: timeoff
    - name: usage
    - name: user
    - name: webauthn
    - name: group
    - name: job
    - name: person
    - name: position
  paths:
    /v1/org/{orgId}/access/entity/{type}:
      get:
        tags:
          - access
        summary: >-
          Return the appropriate actions that can be performed on an entity or set
          of entities
        description: ''
        operationId: getEntityAccess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Entity type
            required: true
            schema:
              type: string
          - name: id
            in: query
            description: Entity ids
            required: false
            schema:
              type: string
          - name: action
            in: query
            description: Actions, defaults to update,delete
            required: false
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to check, defaults to all fields
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date, defaults to today
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id, defaults to primary
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessResponse'
          '401':
            description: unauthorized
          '404':
            description: not found
    /v1/org/{orgId}/action/{actionId}:
      get:
        tags:
          - action
        summary: Return a particular action by id
        description: ''
        operationId: getAction
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: actionId
            in: path
            description: Action id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Action'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - action
        summary: Delete an action
        description: ''
        operationId: deleteAction
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: actionId
            in: path
            description: Action id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - action
        summary: Update an existing action
        description: ''
        operationId: updateAction
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: actionId
            in: path
            description: Action id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchActionBody'
          description: Action data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/action:
      get:
        tags:
          - action
        summary: Return all actions in the organization paginated
        description: ''
        operationId: findActions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Action id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsAction'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - action
        summary: Create an action
        description: ''
        operationId: createAction
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActionBody'
          description: Action data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Action'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/action/{actionId}/run:
      post:
        tags:
          - action
        summary: Run an action - for testing
        description: ''
        operationId: runAction
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: actionId
            in: path
            description: Action id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionRunRequest'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/ai/form-response/summary:
      post:
        tags:
          - ai
        summary: Use AI to generate a summary of text form responses
        description: ''
        operationId: summarizeFormResponses
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummarizeFormResponsesRequest'
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SummarizeResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app-config/{appId}:
      get:
        tags:
          - appConfig
        summary: Return default app configuration by app
        description: ''
        operationId: getAppConfig
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/app-config/{appId}/{userId}:
      get:
        tags:
          - appConfig
        summary: Return user app configuration by app and user
        description: ''
        operationId: getCombinedAppConfig
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - appConfig
        summary: Update an existing app
        description: ''
        operationId: updateAppConfig
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAppConfig'
          description: App data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app-config:
      post:
        tags:
          - appConfig
        summary: Create a new app config
        description: ''
        operationId: createAppConfig
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAppConfig'
          description: App config data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppConfig'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/app/notify:
      post:
        tags:
          - app
        summary: >-
          Send an email notification to the configured notify users, on behalf of
          an app
        description: ''
        operationId: sendNotification
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotifyRequest'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/{appId}:
      get:
        tags:
          - app
        summary: Return a particular app by id
        description: ''
        operationId: getApp
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/App'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - app
        summary: Delete an app
        description: ''
        operationId: deleteApp
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - app
        summary: Update an existing app
        description: ''
        operationId: updateApp
        parameters:
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApp'
          description: App data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/org/{orgId}/install/{appUserId}/code:
      post:
        tags:
          - app
        summary: >-
          Retrieve an Oauth2 authorization code for this app, which can be
          exchanged for an access token
        description: ''
        operationId: getAuthorizationCode
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
          - name: scope
            in: query
            description: Scopes
            required: false
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/org/{orgId}/install/{appUserId}/token:
      get:
        tags:
          - app
        summary: Retrieve the current token for this app
        description: ''
        operationId: getAccessToken
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      post:
        tags:
          - app
        summary: Generate or regenerate a long-lived access token for the app
        description: ''
        operationId: generateAccessToken
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeRequest'
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app:
      get:
        tags:
          - app
        summary: Return all publicly visible global apps
        description: ''
        operationId: findGlobalApps
        parameters:
          - name: tag
            in: query
            description: Tag to filter by
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: App id to start from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApp'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - app
        summary: Create a new app
        description: ''
        operationId: createApp
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApp'
          description: App data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/App'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/app/org/{orgId}:
      get:
        tags:
          - app
        summary: Return all active apps available for a particular org
        description: ''
        operationId: findApps
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Filter by type (app, bundle)
            required: false
            schema:
              type: string
          - name: tags
            in: query
            description: Filter by tags
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: App id to start from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApp'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/app/org/{orgId}/install/{appUserId}:
      get:
        tags:
          - app
        summary: Get an installed app
        description: ''
        operationId: getInstalledApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      delete:
        tags:
          - app
        summary: Uninstall an app
        description: ''
        operationId: uninstallApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
          - name: keepEntityIds
            in: query
            description: >-
              Comma-separated list of bundle-installed entities to delete -- if
              this parameter is omitted, all bundle-installed entities will be
              deleted
            required: false
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - app
        summary: Update the settings of an installed app
        description: ''
        operationId: updateInstalledApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
          - name: includeInactive
            in: query
            description: If the installed appUser is inactive, load inactive instead
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: App user data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/org/{orgId}/install/name/{appName}:
      get:
        tags:
          - app
        summary: Get an installed app by name
        description: ''
        operationId: getInstalledAppByName
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appName
            in: path
            description: App name
            required: true
            schema:
              type: string
          - name: includeInactive
            in: query
            description: If the installed appUser is inactive, load inactive instead
            required: false
            schema:
              type: boolean
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/org/{orgId}/install:
      get:
        tags:
          - app
        summary: Find installed app users
        description: ''
        operationId: findInstalledApps
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: Filter by type (app, bundle)
            required: false
            schema:
              type: string
          - name: tags
            in: query
            description: Filter by tag
            required: false
            schema:
              type: string
          - name: statuses
            in: query
            description: >-
              Filter by App User statuses, comma-separated. Accepted values:
              ['NORMAL', 'INACTIVE', 'UNINSTALLED']
            required: false
            schema:
              type: string
          - name: includeFormer
            in: query
            description: >-
              Whether to include app users with NONE access to orgs they pertain
              to.  Default is false
            required: false
            schema:
              type: boolean
          - name: from
            in: query
            description: App id to start from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsUser'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - app
        summary: Install an app for a particular org
        description: ''
        operationId: installApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateUser'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/app/org/{orgId}/install/validate:
      post:
        tags:
          - app
        summary: Validate the installation of an app for a particular org
        description: ''
        operationId: validateInstallApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateUser'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BundleInstallValidate'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/app/name/{appName}:
      get:
        tags:
          - app
        summary: Return a particular app by name
        description: ''
        operationId: getAppByName
        parameters:
          - name: appName
            in: path
            description: App name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/App'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/app/org/{orgId}/install/{appUserId}/run:
      post:
        tags:
          - app
        summary: Run an installed app
        description: ''
        operationId: runInstalledApp
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/app/org/{orgId}/install/{appUserId}/installdata/{installDataName}:
      get:
        tags:
          - app
        summary: Retrieve the current token for this app
        description: ''
        operationId: getAppInstallData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: App user id
            required: true
            schema:
              type: string
          - name: installDataName
            in: path
            description: Name
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-request/{approvalRequestId}/scenario-response:
      get:
        tags:
          - approval-request
        summary: Return a particular approval request scenario response by id
        description: ''
        operationId: getApprovalRequestScenarioResponseById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: Approval request id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalRequestScenarioResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/approval-request/scenario-job/{jobId}:
      get:
        tags:
          - approval-request
        summary: Return a particular approval request scenario response by jobId
        description: ''
        operationId: getApprovalRequestScenarioResponseByJobId
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalRequestScenarioResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/approval-request/entity/scenario:
      get:
        tags:
          - approval-request
        summary: Return all approval request scenario responses for an org
        description: ''
        operationId: findApprovalRequestResponsesByScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: entityIds
            in: query
            description: entity ids to filter on
            required: false
            schema:
              type: string
          - name: includeDeleted
            in: query
            description: Include deleted approval requests
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalRequestScenarioResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}:
      get:
        tags:
          - approval
        summary: Return an approval request
        description: ''
        operationId: getApprovalRequest
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: Approval request id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalRequest'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - approval
        summary: Delete an approval request
        description: ''
        operationId: deleteApprovalRequest
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: Approval request id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestDeleteBody'
          description: Body params for deletion
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - approval
        summary: Update an existing approval request
        description: ''
        operationId: updateApprovalRequest
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: approval request id
            required: true
            schema:
              type: string
          - name: previewJobId
            in: query
            description: preview-as job id
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestPatchBody'
          description: approval request data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}:
      get:
        tags:
          - approval
        summary: Return a particular approval chain by id
        description: ''
        operationId: getApprovalChainById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalChain'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - approval
        summary: Delete a approval chain
        description: ''
        operationId: deleteApprovalChain
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - approval
        summary: Update a approval chain
        description: ''
        operationId: updateApprovalChain
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: approval chain id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalChain'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain:
      get:
        tags:
          - approval
        summary: Return approval chains
        description: ''
        operationId: getApprovalChains
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: entityType
            in: query
            description: The type of entity
            required: false
            schema:
              type: string
              enum:
                - COMP_REVIEW
                - SCENARIO
                - TIMEOFF
          - name: entityId
            in: query
            description: the id of the entity
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalChain'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - approval
        summary: Create an approval chain
        description: ''
        operationId: createApprovalChain
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: createDefaultStages
            in: query
            description: Create default stages
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApprovalChain'
          description: ApprovalChain data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalChain'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/stage:
      get:
        tags:
          - approval
        summary: Return all approval chain stages for an approval chain
        description: ''
        operationId: getApprovalChainStages
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalChainStage'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - approval
        summary: Create an approval chain stage
        description: ''
        operationId: createApprovalChainStage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApprovalChainStage'
          description: Approval chain stage data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalChainStage'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request/entity/comp-review:
      get:
        tags:
          - approval
        summary: Return all approval request comp review responses for an approval chain
        description: ''
        operationId: getApprovalRequestResponsesByCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: entityIds
            in: query
            description: entity ids to filter on
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
                example: 588f7ee98f138b19220041a7
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalRequestCompReviewResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/stage/{approvalChainStageId}:
      get:
        tags:
          - approval
        summary: Return all approval chain stages for an approval chain
        description: ''
        operationId: getApprovalChainStage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalChainStageId
            in: path
            description: Approval chain stage id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalChainStage'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - approval
        summary: Delete an approval chain stage
        description: ''
        operationId: deleteApprovalChainStage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalChainStageId
            in: path
            description: Approval chain stage id
            required: true
            schema:
              type: string
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - approval
        summary: Update an existing approval chain stage
        description: ''
        operationId: updateApprovalChainStage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalChainStageId
            in: path
            description: approval chain stage id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApprovalChainStage'
          description: approval chain stage data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/create-default-chain:
      post:
        tags:
          - approval
        summary: Build a default approval chain based on entity type
        description: ''
        operationId: createDefaultApprovalChainStages
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultChainCreateBody'
          description: Approval request data to create
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalChainStage'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request:
      get:
        tags:
          - approval
        summary: Return all approval requests for an approval chain
        description: ''
        operationId: getApprovalRequests
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: entityType
            in: query
            description: entity type to filter on
            required: false
            schema:
              type: string
              enum:
                - COMP_REVIEW
                - SCENARIO
                - TIMEOFF
          - name: entityIds
            in: query
            description: entity ids to filter on
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalRequest'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - approval
        summary: Create an approval request
        description: ''
        operationId: createApprovalRequest
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: dryRun
            in: query
            description: Dry run without creating real request
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestCreateBody'
          description: Approval request data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApprovalRequest'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request/entity/scenario:
      get:
        tags:
          - approval
        summary: Return all approval request scenario responses for an approval chain
        description: ''
        operationId: getApprovalRequestResponsesByScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: entityIds
            in: query
            description: entity ids to filter on
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsApprovalRequestScenarioResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}/reassign-approver:
      post:
        tags:
          - approval
        summary: Reassigning an approver at a stage
        description: ''
        operationId: reassignApproverAtStage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: approval request id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReassignApproverPatchBody'
          description: approval request data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}/send-reminder:
      post:
        tags:
          - approval
        summary: Send a reminder for a stage reviewer in an existing approval request
        description: ''
        operationId: sendReminder
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: approvalChainId
            in: path
            description: Approval chain id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: approval request id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendReminderBody'
          description: reminder body
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/assessment/bulk/delete:
      post:
        tags:
          - assessment
        summary: Delete a set of assessments
        description: ''
        operationId: bulkDeleteAssessments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of assessment ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/assessment/bulk/duplicate:
      post:
        tags:
          - assessment
        summary: Duplicate a set of assessments
        description: ''
        operationId: bulkDuplicateAssessments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of assessment ids to duplicate
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/assessment/bulk/move:
      post:
        tags:
          - assessment
        summary: Update the types of a set of assessments
        description: ''
        operationId: bulkChangeAssessmentTypes
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkChangeAssessmentTypesBody'
          description: List of assessment ids to update and the new type
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/assessment:
      get:
        tags:
          - assessment
        summary: Return all assessments in the organization paginated
        description: ''
        operationId: findAssessments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: Type of assessment to filter by
            required: false
            schema:
              type: string
              enum:
                - REVIEW
                - COMP_REVIEW
                - SURVEY
          - name: from
            in: query
            description: Assessment id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: ids
            in: query
            description: List of ids to filter by
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsAssessment'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - assessment
        summary: Create a assessment
        description: ''
        operationId: createAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAssessment'
          description: Assessment data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Assessment'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/assessment/{assessmentId}:
      get:
        tags:
          - assessment
        summary: Return a particular assessment by id
        description: ''
        operationId: getAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Assessment'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - assessment
        summary: Delete a assessment
        description: ''
        operationId: deleteAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - assessment
        summary: Update an existing assessment
        description: ''
        operationId: updateAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
          - name: silent
            in: query
            description: Suppress notification emails
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAssessment'
          description: Assessment data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/assessment/{assessmentId}/forms-questions:
      get:
        tags:
          - assessment
        summary: >-
          Return an overview of the forms and questions used in the assessment. If
          the user has read access to the assessment, then the forms and questions
          are visible, even if they would not otherwise be visible on their own
        description: ''
        operationId: getAssessmentFormsAndQuestions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AssessmentFormsAndQuestions'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/assessment/{assessmentId}/complete:
      post:
        tags:
          - assessment
        summary: Complete a assessment
        description: ''
        operationId: completeAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Assessment'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/assessment/{assessmentId}/reactivate:
      post:
        tags:
          - assessment
        summary: Reactivate a assessment
        description: ''
        operationId: reactivateAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Assessment'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/assessment/{assessmentId}/form/{formId}/expire:
      post:
        tags:
          - assessment
        summary: Expire all pending tasks for a form of an assessment
        description: ''
        operationId: expireAssessmentFormTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/customer/{customerId}/billing:
      get:
        tags:
          - billing
        summary: Return billing information for a customer
        description: ''
        operationId: getBilling
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Billing'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/customer/{customerId}/billing/checkout:
      post:
        tags:
          - billing
        summary: Checks out customer to upgrade to pay for their subscription
        description: ''
        operationId: checkout
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSubscription'
          description: Subscription data to create
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/customer/{customerId}/billing/cancel:
      post:
        tags:
          - billing
        summary: Cancel a subscription for a customer
        description: ''
        operationId: cancelSubscription
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelSubscriptionSurveyAnswers'
          description: Survey response
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/budget-pool:
      get:
        tags:
          - budget-pool
        summary: Get all budget pools for an org
        description: ''
        operationId: findBudgetPools
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: query
            description: Comp Review Id to filter on
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - budget-pool
        summary: Create a new budget pool
        description: ''
        operationId: createBudgetPool
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBudgetPool'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/budget-pool/{id}:
      get:
        tags:
          - budget-pool
        summary: Get a specific budget pool
        description: ''
        operationId: findBudgetPool
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BudgetPool'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - budget-pool
        summary: Delete a budget pool
        description: ''
        operationId: deleteBudgetPool
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - budget-pool
        summary: Update a budget pool
        description: ''
        operationId: updateBudgetPool
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBudgetPool'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/budget-pool/{id}/guidelines:
      get:
        tags:
          - budget-pool
        summary: Get the guidelines associated with a budget pool
        description: ''
        operationId: getGuidelinesForBudgetPool
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsGuideline'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/budget-pool/{id}/calculate:
      get:
        tags:
          - budget-pool
        operationId: calculateBudget
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: ID of the scenario the budget will be calculated against
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/budget-pool/{id}/preview:
      get:
        tags:
          - budget-pool
        summary: >-
          Generate tiering & preview with the given budget calculated for the
          compensation review
        description: ''
        operationId: previewBudget
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired budget pool
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BudgetTiersResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/calendar:
      get:
        tags:
          - calendar
        summary: Return calendar entries in a given time period
        description: ''
        operationId: findCalendarEntries
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: start
            in: query
            description: Start date
            required: false
            schema:
              type: string
          - name: end
            in: query
            description: End date
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: >-
              Type of calendar entries to retrieve (timeoff, anniversary,
              birthday)
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Query filter to filter for part of the organization
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: Format to return data in
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/category/{categoryId}:
      get:
        tags:
          - category
        summary: Return a particular category by id
        description: ''
        operationId: getCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: categoryId
            in: path
            description: Category id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Category'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      delete:
        tags:
          - category
        summary: Delete a category
        description: ''
        operationId: deleteCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: categoryId
            in: path
            description: Category id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      patch:
        tags:
          - category
        summary: Update an existing category
        description: ''
        operationId: updateCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: categoryId
            in: path
            description: Category id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCategory'
          description: Category data to update
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/category:
      get:
        tags:
          - category
        summary: Return categories that are available to the organization
        description: ''
        operationId: getCategories
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: (Optional) Return only built-in or custom categories
            required: false
            schema:
              type: string
          - name: unsorted
            in: query
            description: (Optional) Return categories array unsorted
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsCategory'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      post:
        tags:
          - category
        summary: Create a category
        description: ''
        operationId: createCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCategory'
          description: Category data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Category'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/category-sort:
      get:
        tags:
          - category-sort
        summary: Return category sort order
        description: ''
        operationId: getCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CategorySort'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      post:
        tags:
          - category-sort
        summary: Create a category sort order if it doesn't exist
        description: ''
        operationId: createCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCategorySort'
          description: Sort data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CategorySort'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      put:
        tags:
          - category-sort
        summary: >-
          Create or update category sort order for a given org and return the sort
          data
        description: ''
        operationId: updateOrCreateCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateCategorySort'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CategorySort'
          '400':
            description: categoryIds cannot be empty
          '403':
            description: Permission denied
      delete:
        tags:
          - category-sort
        summary: Delete a category sort order
        description: ''
        operationId: deleteCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '500':
            description: Not Implemented
      patch:
        tags:
          - category-sort
        summary: Update an existing category sort order
        description: ''
        operationId: updateCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCategorySort'
          description: Sort data to update
        responses:
          '500':
            description: Not Implemented
    /v1/org/{orgId}/category-sort/upsert:
      post:
        tags:
          - category-sort
        summary: >-
          Create or update category sort order for a given org and return the sort
          data
        description: ''
        operationId: upsertCategorySort
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateCategorySort'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CategorySort'
          '400':
            description: categoryIds cannot be empty
          '403':
            description: Permission denied
    /v1/org/{orgId}/change/{changeId}:
      get:
        tags:
          - change
        summary: Return a particular change by id
        description: ''
        operationId: getChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Change'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - change
        summary: Delete a previous change
        description: ''
        operationId: deleteChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: processId
            in: query
            description: Process id of person creation
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - change
        summary: Make a change to a change
        description: ''
        operationId: updateChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: processId
            in: query
            description: Process id of person creation
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateChange'
          description: Change data
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/bulkupdate:
      post:
        tags:
          - change
        summary: Perform a bulk update on a number of jobs
        description: ''
        operationId: bulkUpdate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateRequest'
          description: Bulk update data
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/{type}/validate:
      post:
        tags:
          - change
        summary: Validate a change
        description: ''
        operationId: validateChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Change type
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateChange'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Change'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/{type}:
      post:
        tags:
          - change
        summary: Create a new change
        description: ''
        operationId: createChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Change type
            required: true
            schema:
              type: string
          - name: source
            in: query
            description: Source of change
            required: false
            schema:
              type: string
          - name: processId
            in: query
            description: Process id of change creation
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateChange'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Change'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change:
      get:
        tags:
          - change
        summary: Return recent changes across an org, or for a particular person or job
        description: ''
        operationId: findChanges
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to start from
            required: false
            schema:
              type: string
              format: date
          - name: endDate
            in: query
            description: Date to get changes through (inclusive)
            required: false
            schema:
              type: string
              format: date
          - name: type
            in: query
            description: Types of change to filter by
            required: false
            schema:
              type: string
          - name: fields
            in: query
            description: Return changes that modify these fields
            required: false
            schema:
              type: string
          - name: personId
            in: query
            description: Person id to filter by
            required: false
            schema:
              type: string
          - name: jobId
            in: query
            description: Job id to filter by
            required: false
            schema:
              type: string
          - name: includeBackfill
            in: query
            description: Find and include first backfill if it exists
            required: false
            schema:
              type: boolean
          - name: refs
            in: query
            description: References to filter by
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Query to filter against
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Change id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: open
            in: query
            description: Whether the role is open or not
            required: false
            schema:
              type: string
              enum:
                - FILLED
                - OPEN
          - name: desc
            in: query
            description: Descending (default false)
            required: false
            schema:
              type: boolean
          - name: scenarioOnly
            in: query
            description: Scenario only (exclude primary changes)
            required: false
            schema:
              type: boolean
          - name: parentOnly
            in: query
            description: Parent changes only (exclude child changes)
            required: false
            schema:
              type: boolean
          - name: includeGrantSchedule
            in: query
            description: Whether to include full grant schedule when returning equity updates
            required: false
            schema:
              type: boolean
          - name: excludeAtsRecruitingFields
            in: query
            description: >-
              Whether to exclude ats recruiting fields. Only applies when
              fieldEntityTypeString is passed
            required: false
            schema:
              type: boolean
          - name: includeStruck
            in: query
            description: >-
              Deprecated parameter for backwards-compatibility (use statuses) -
              whether to include STRUCK and PROPOSED changes, or just ACTIVE
              changes
            required: false
            schema:
              type: boolean
          - name: status
            in: query
            description: Statuses to filter by
            required: false
            schema:
              type: string
          - name: stripUpdates
            in: query
            description: >-
              Whether to strip returned update changes of update types that were
              not explicitly requested
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: fieldEntityTypes
            in: query
            description: Only return changes which set fields with these entity types
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsChange'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/change/{changeId}/approver:
      get:
        tags:
          - change
        summary: Given a of change id, see if the person can approve/reject
        description: ''
        operationId: changeApprover
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change Id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to check the approval on
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: boolean
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/change/scenario/{scenarioId}:
      get:
        tags:
          - change
        summary: Return all changes for a particular scenario, with before job
        description: ''
        operationId: findScenarioChanges
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ScenarioChangesWithBudgetRollup'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/change/sync/{type}:
      post:
        tags:
          - change
        summary: Sync a change (create the change only if it does not already exist)
        description: ''
        operationId: syncChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Change type
            required: true
            schema:
              type: string
          - name: processId
            in: query
            description: Process id of person creation
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateChange'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Change'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/depart-rehire:
      post:
        tags:
          - change
        summary: Create a depart-rehire pair of changes, for filling in historical data
        description: ''
        operationId: departRehire
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: startDate
            in: query
            description: Rehire start date
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChange'
          description: Depart data
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Change'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/bulkchange:
      post:
        tags:
          - change
        summary: Perform a series of changes at once
        description: ''
        operationId: bulkChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkChangeRequest'
          description: Bulk change data
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change/{changeId}/approve:
      post:
        tags:
          - change
        summary: Approve or reject a change
        description: ''
        operationId: approveChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproveChange'
          description: Change approval details
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/change/{changeId}/status/{processId}:
      get:
        tags:
          - change
        summary: Get the status of a running change within a scenario
        description: ''
        operationId: getChangeStatus
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: Process id
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ChangeStatusResponse'
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/change/{changeId}:
      patch:
        tags:
          - change
        summary: >-
          Amend a change within a scenario, and potentially return the updated
          data
        description: ''
        operationId: updateScenarioChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve
            required: false
            schema:
              type: string
          - name: includeUpdatedFields
            in: query
            description: >-
              Include all updated fields in the response, including
              change.after.fieldName for each updated field
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to return; default is json, can also use json-extended
              or json-readable
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: Column and data to update (must contain only one entry)
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UpdateScenarioChangeResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/comment:
      post:
        tags:
          - comment
        summary: Post a comment
        description: ''
        operationId: createComment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateComment'
          description: Comment data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/comment/{commentId}:
      get:
        tags:
          - comment
        summary: Return a particular comment by id
        description: ''
        operationId: getComment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: commentId
            in: path
            description: Comment id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - comment
        summary: Delete a comment
        description: ''
        operationId: deleteComment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: commentId
            in: path
            description: Comment id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comment/entity/{entityId}:
      get:
        tags:
          - comment
        summary: Return comments on a particular entity paginated
        description: ''
        operationId: findComments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: entityId
            in: path
            description: Entity id
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Comment id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: desc
            in: query
            description: Descending (default false)
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsComment'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comment/comp-review/{compReviewId}:
      get:
        tags:
          - comment
        summary: Return comments on changes within a comp review, paginated
        description: ''
        operationId: findCompReviewComments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: query
            description: Approval request id
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Comment id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: desc
            in: query
            description: Descending (default false)
            required: false
            schema:
              type: boolean
          - name: isPreview
            in: query
            description: Whether comments are viewed in preview mode, defaults false
            required: false
            schema:
              type: boolean
          - name: jobId
            in: query
            description: Optional preview user jobId
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsComment'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comment/scenario/{scenarioId}:
      get:
        tags:
          - comment
        summary: Return comments on a scenario and the changes within, paginated
        description: ''
        operationId: findScenarioComments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Comment id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: desc
            in: query
            description: Descending (default false)
            required: false
            schema:
              type: boolean
          - name: includeChangeComments
            in: query
            description: >-
              Whether to also include comments on changes within the scenario
              (default false)
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsComment'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/band:
      get:
        tags:
          - band
        summary: Find comp bands in the organization
        description: ''
        operationId: findCompBands
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Table id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: includeDeleted
            in: query
            description: Include deleted bands
            required: false
            schema:
              type: boolean
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - band
        summary: Create a comp band
        description: ''
        operationId: createCompBand
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of band creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompBand'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - band
        summary: Delete all comp bands on a date
        description: ''
        operationId: deleteAllCompBands
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
    /v1/org/{orgId}/band/{bandId}:
      get:
        tags:
          - band
        summary: Return a particular comp band by id on an effective date
        description: ''
        operationId: getCompBandById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: bandId
            in: path
            description: Comp band id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - band
        summary: Delete a comp band
        description: ''
        operationId: deleteCompBand
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: bandId
            in: path
            description: Comp band id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - band
        summary: Update a comp band
        description: ''
        operationId: updateCompBand
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: bandId
            in: path
            description: Band id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of band update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCompBand'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/band/reset:
      delete:
        tags:
          - band
        summary: Delete all comp band data on a date
        description: ''
        operationId: resetCompBands
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
    /v1/org/{orgId}/comp-review/bulk/delete:
      post:
        tags:
          - comp-review
        summary: Delete a set of comp reviews
        description: ''
        operationId: bulkDelete
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of comp review ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/bulk/duplicate:
      post:
        tags:
          - comp-review
        summary: Duplicate a set of comp reviews
        description: ''
        operationId: bulkDuplicate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of comp review ids to duplicate
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comp-review:
      get:
        tags:
          - comp-review
        summary: Find comp reviews in the organization
        description: ''
        operationId: findCompReviews
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Comp review ID to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsCompReview'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - comp-review
        summary: Create a comp review
        description: ''
        operationId: createCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompReview'
          description: Comp review data to create
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}:
      get:
        tags:
          - comp-review
        summary: Return a particular comp review by ID
        description: ''
        operationId: getCompReviewById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CompReview'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - comp-review
        summary: Delete a comp review
        description: ''
        operationId: deleteCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - comp-review
        summary: Update a comp review
        description: ''
        operationId: updateCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Review id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCompReview'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CompReview'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/metadata:
      get:
        tags:
          - comp-review
        summary: Return metadata for a particular comp review by ID
        description: ''
        operationId: getCompReviewMetadata
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CompReviewMetadata'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/generate:
      post:
        tags:
          - comp-review
        summary: Generate a compensation review
        description: ''
        operationId: generateCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateCompReviewOptions'
          description: Whether this should be generated as a preview
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/pause:
      post:
        tags:
          - comp-review
        summary: Pauses the compensation review to allow for editing by an admin
        description: ''
        operationId: pauseReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/conclude:
      post:
        tags:
          - comp-review
        summary: Concludes (or closes) the compensation review
        description: ''
        operationId: concludeReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: isFullyApproved
            in: query
            description: Whether is review fully approved on conclude (default false)
            required: false
            schema:
              type: boolean
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/preview:
      post:
        tags:
          - comp-review
        summary: Generate tiering & preview for a compensation review
        description: ''
        operationId: previewCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TiersResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/in-cycle:
      get:
        tags:
          - comp-review
        summary: Get an overview for a given user in an in-cycle comp-review
        description: ''
        operationId: getInCycleView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: scenariosOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: proposalOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: reviewsOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: columnsOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: isPreview
            in: query
            required: false
            schema:
              type: boolean
          - name: jobId
            in: query
            required: false
            schema:
              type: string
          - name: includeAllRequests
            in: query
            description: >-
              Allows users with multiple roles to request full access for owner or
              final approver roles
            required: false
            schema:
              type: boolean
          - name: includeFeatures
            in: query
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InCycleViewResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/changes:
      get:
        tags:
          - comp-review
        summary: Get the changes for a set of scenarios in an in-cycle comp-review
        description: ''
        operationId: getInCycleChanges
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: query
            description: Approval request id
            required: false
            schema:
              type: string
          - name: isPreview
            in: query
            required: false
            schema:
              type: boolean
          - name: jobId
            in: query
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InCycleViewChanges'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/changes/{changeId}:
      get:
        tags:
          - comp-review
        summary: >-
          Get the change data and guideline flags associated with an in-cycle
          change
        description: ''
        operationId: getInCycleChange
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InCycleChange'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/collabicient:
      get:
        tags:
          - comp-review
        summary: Get a collaborator participant reviewer in-cycle comp-review
        description: ''
        operationId: getInCycleCollabicientView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: scenariosOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: proposalOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: reviewsOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: columnsOnly
            in: query
            required: false
            schema:
              type: boolean
          - name: isPreview
            in: query
            required: false
            schema:
              type: boolean
          - name: collabicientJobId
            in: query
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InCycleViewResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/eligible-employees:
      get:
        tags:
          - comp-review
        summary: Get a list of employees eligible for a given comp review
        description: ''
        operationId: getEligibleEmployees
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: filterScenarioIds
            in: query
            description: Find ineligible employees under specific comp scenario managers
            required: false
            schema:
              type: string
          - name: ineligible
            in: query
            description: >-
              Whether to get eligible or ineligible employees (defaults to
              eligible)
            required: false
            schema:
              type: boolean
          - name: from
            in: query
            description: Job id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Table fields
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: filter
            in: query
            description: Optional CQL filter to apply to employees
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/associated-entities:
      get:
        tags:
          - comp-review
        summary: Get the necessary caches on a specific date for a compensation review
        description: ''
        operationId: getAssociatedEntities
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartialAppEntities'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/send-reminder-email:
      post:
        tags:
          - comp-review
        summary: 'Send a reminder email to someone participating in a comp review '
        description: ''
        operationId: sendCompReviewReminderEmail
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendReminderEmailOptions'
          description: Approval request ID
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/approval-requests:
      get:
        tags:
          - comp-review
        summary: Get a list of approval request responses for a given comp review
        description: ''
        operationId: getApprovalRequestsForCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: isPreview
            in: query
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ApprovalRequestCompReviewResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/approval-requests/{approvalRequestId}:
      patch:
        tags:
          - comp-review
        summary: Update approval request status, including any rollups
        description: ''
        operationId: updateApprovalRequestStatus
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: approvalRequestId
            in: path
            description: Approval request id
            required: true
            schema:
              type: string
          - name: previewJobId
            in: query
            description: Preview-as job id
            required: false
            schema:
              type: string
          - name: isFinalApproval
            in: query
            description: Updating the final stage status
            required: false
            schema:
              type: boolean
          - name: collaboratorSelectedReviewerJobId
            in: query
            description: Reviewer job id a collaborator is working on
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestPatchBody'
          description: Approval request data to update
        responses:
          default:
            description: successful operation
    /v1/org/{orgId}/comp-review/{compReviewId}/export:
      post:
        tags:
          - comp-review
        summary: Export a comp review's changes
        description: ''
        operationId: exportChanges
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportChangesBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/export/audit:
      post:
        tags:
          - comp-review
        summary: Export a comp review's audit log
        description: ''
        operationId: exportAuditLog
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportChangesBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/export/comments:
      post:
        tags:
          - comp-review
        summary: Export a comp review's comments
        description: ''
        operationId: exportComments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/visualizations:
      post:
        tags:
          - comp-review
        summary: Get data for visualizations for a comp review
        description: ''
        operationId: getVisualizations
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
          - name: viewJobId
            in: query
            description: The job you would like to view as
            required: false
            schema:
              type: string
          - name: preview
            in: query
            description: Are the visualizations for a preview
            required: false
            schema:
              type: boolean
          - name: includeAllRequests
            in: query
            description: >-
              Allows users with multiple roles to request full access for owner or
              final approver roles
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVisualizationsOptions'
          description: Options for visualizations
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CompReviewVisualizations'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/comp-review/{compReviewId}/duplicate:
      post:
        tags:
          - comp-review
        summary: Duplicate a comp review
        description: ''
        operationId: duplicate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: path
            description: Comp review id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CompReview'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/content/homepage/render:
      get:
        tags:
          - content
        summary: Render the contents of the homepage
        description: ''
        operationId: renderHomepage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/HomepageContentRender'
    /v1/org/{orgId}/content/homepage:
      patch:
        tags:
          - content
        summary: Update the homepage content
        description: ''
        operationId: updateHomepage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContent'
        responses:
          default:
            description: successful operation
    /v1/org/{orgId}/content:
      get:
        tags:
          - content
        summary: Return all content in the organization paginated
        description: ''
        operationId: findContent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Content id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
          - name: includeBlocks
            in: query
            description: Include content blocks in results
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsContent'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - content
        summary: Create a new piece of content
        description: ''
        operationId: createContent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContent'
          description: Content data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Content'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/content/path/{path}:
      get:
        tags:
          - content
        summary: Return a particular content by path
        description: ''
        operationId: getContentByPath
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: path
            in: path
            description: Path
            required: true
            schema:
              type: string
              pattern: .*
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Content'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/content/path/{path}/render:
      get:
        tags:
          - content
        summary: Return a particular content by path, and render its contents
        description: ''
        operationId: renderContentByPath
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: path
            in: path
            description: Path
            required: true
            schema:
              type: string
              pattern: .*
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContentRender'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/content/{contentId}:
      get:
        tags:
          - content
        summary: Return a particular content by id
        description: ''
        operationId: getContent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: contentId
            in: path
            description: Content id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Content'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - content
        summary: Delete a content
        description: ''
        operationId: deleteContent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: contentId
            in: path
            description: Content id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - content
        summary: Update an existing piece of content
        description: ''
        operationId: updateContent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: contentId
            in: path
            description: Content id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContent'
          description: Content data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/customer/{customerId}/subscription:
      get:
        tags:
          - customer
        summary: >-
          Returns information about the Charthop subscription for the given
          customer
        description: ''
        operationId: getCharthopSubscription
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Subscription'
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - customer
        operationId: updateSubscription
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSubscription'
          description: Subscription data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/customer/{customerId}:
      get:
        tags:
          - customer
        summary: Return a particular customer by id
        description: ''
        operationId: getCustomer
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Customer'
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - customer
        summary: Update an existing customer
        description: ''
        operationId: updateCustomer
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomer'
          description: Customer data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/customer:
      get:
        tags:
          - customer
        summary: Return all visible customers, paginated by name
        description: ''
        operationId: findCustomers
        parameters:
          - name: from
            in: query
            description: Customer id to start from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: status
            in: query
            description: Customer.Status. (ACTIVE/INACTIVE/TRAIL)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsCustomer'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - customer
        summary: Create a new customer
        description: ''
        operationId: createCustomer
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomer'
          description: Customer data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Customer'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/customer/{customerId}/invoices:
      get:
        tags:
          - customer
        summary: Returns a list of all the invoices for the given customer
        description: ''
        operationId: getCustomerInvoices
        parameters:
          - name: customerId
            in: path
            description: Customer id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InvoiceResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/data-view:
      get:
        tags:
          - data-view
        summary: Return all data views in the organization paginated
        description: ''
        operationId: findDataViews
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Data view id to start paginating from
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Data view type to filter by
            required: false
            schema:
              type: string
              enum:
                - ANY
                - DATA_SHEET
                - ORG_CHART
                - MAP
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: ids
            in: query
            description: Comma delimited of ids to return
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsDataView'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - data-view
        summary: Create a data view
        description: ''
        operationId: createDataView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataView'
          description: Data view data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DataView'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/data-view/{dataViewId}:
      get:
        tags:
          - data-view
        summary: Return a particular data view by id
        description: ''
        operationId: getDataView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: dataViewId
            in: path
            description: Data view id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DataView'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - data-view
        summary: Delete a data  view
        description: ''
        operationId: deleteDataView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: dataViewId
            in: path
            description: Data view id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - data-view
        summary: Update an existing data view
        description: ''
        operationId: updateDataView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: dataViewId
            in: path
            description: Data view id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDataView'
          description: Data view data to update
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DataView'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/email-template:
      post:
        tags:
          - email-template
        summary: Create a new email template
        description: ''
        operationId: createEmailTemplate
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmailTemplate'
          description: Email template to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailTemplate'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/email-template/{emailTemplateId}:
      patch:
        tags:
          - email-template
        summary: Update an existing email template
        description: ''
        operationId: updateEmailTemplate
        parameters:
          - name: emailTemplateId
            in: path
            description: Email template id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEmailTemplate'
          description: Email template data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/email-template/name/{name}:
      get:
        tags:
          - email-template
        summary: Return the email template by name
        description: ''
        operationId: getEmailTemplateByName
        parameters:
          - name: name
            in: path
            description: Email template name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailTemplate'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/email-template/essential:
      get:
        tags:
          - email-template
        summary: Return all essential email templates
        description: ''
        operationId: getEssentialEmailTemplates
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsEmailTemplate'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/email-template/non-essential:
      get:
        tags:
          - email-template
        summary: Return all non-essential email templates
        description: ''
        operationId: getNonEssentialEmailTemplates
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsEmailTemplate'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/event/{eventId}:
      get:
        tags:
          - event
        summary: Return individual event, including payload
        description: ''
        operationId: getEvent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: eventId
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Event'
    /v1/org/{orgId}/event:
      get:
        tags:
          - event
        summary: Return past events, paginated, without payloads present
        description: ''
        operationId: findEvents
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: userId
            in: query
            description: User id
            required: false
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity id
            required: false
            schema:
              type: string
          - name: entityType
            in: query
            description: Entity type
            required: false
            schema:
              type: string
              enum:
                - ACTION
                - AGREEMENT
                - APP
                - APP_CONFIG
                - APPROVAL_CHAIN
                - APPROVAL_CHAIN_STAGE
                - APPROVAL_REQUEST
                - ASSESSMENT
                - BUDGET_POOL
                - BUNDLE
                - CATEGORY
                - CATEGORY_SORT
                - CHANGE
                - COMMENT
                - COMP_BAND
                - COMP_REVIEW
                - CONTENT
                - CUSTOMER
                - DATA_VIEW
                - EXCHANGE_RATE
                - EMAIL_TEMPLATE
                - FIELD
                - FILE
                - FORM
                - FORM_DRAFT
                - FORM_RESPONSE
                - GEOCODE
                - GROUP
                - GUIDELINE
                - JOB
                - JOB_LEVEL
                - MEDIA
                - MESSAGE
                - MULTIPLIER
                - ORG
                - ORG_CONFIG
                - PERSON
                - PROFILE_TAB
                - POLICY
                - POSITION
                - PROCESS
                - PRODUCT
                - QUERY_TOKEN
                - QUESTION
                - REPORT
                - REPORT_CHART
                - ROLE
                - SCENARIO
                - STOCK_PRICE
                - TABLE
                - TABLE_ROW
                - TASK_CONFIG
                - TEMPLATE
                - TASK
                - TOKEN
                - TIMEOFF
                - TRACKED_GROUP
                - USER
          - name: parentEntityId
            in: query
            description: Parent entity id
            required: false
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: processId
            in: query
            description: Process id
            required: false
            schema:
              type: string
          - name: fields
            in: query
            description: Fields that were modified
            required: false
            schema:
              type: string
          - name: code
            in: query
            description: Event code to search for
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Timestamp to start search at
            required: false
            schema:
              type: integer
              format: int64
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsEvent'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/event/{eventId}/notify:
      post:
        tags:
          - event
        summary: >-
          Resend all associated notifications for a previous event (superusers
          only)
        description: ''
        operationId: replayEvent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: eventId
            in: path
            description: Event id
            required: true
            schema:
              type: string
          - name: app
            in: query
            description: App name to restrict notifications to
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/event/notify/inbound/{appId}/{inboundId}:
      post:
        tags:
          - event
        summary: Create an inbound event
        description: ''
        operationId: createAppInboundEvent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
          - name: inboundId
            in: path
            description: Inbound id
            required: true
            schema:
              type: string
          - name: processId
            in: query
            description: Process id
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: Inbound body to create event
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
                  example: 588f7ee98f138b19220041a7
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/event/notify/outbound/app/{appId}:
      post:
        tags:
          - event
        summary: Create an outbound event
        description: ''
        operationId: createAppOutboundEvent
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appId
            in: path
            description: App id
            required: true
            schema:
              type: string
          - name: processId
            in: query
            description: Process id
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: Outbound body to create event
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
                  example: 588f7ee98f138b19220041a7
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/exchange-rate/{date}/history:
      get:
        tags:
          - exchange-rate
        summary: Return org custom exchange rates
        description: ''
        operationId: getCurrencyRateHistory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
          - name: currency
            in: query
            description: Currency to search for
            required: false
            schema:
              type: string
          - name: fromDate
            in: query
            description: Start date for search
            required: false
            schema:
              type: string
              format: date
          - name: toDate
            in: query
            description: End date for search
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExchangeRate'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/exchange-rate/{date}/custom/bulkupdate:
      post:
        tags:
          - exchange-rate
        summary: Bulk update custom currency rates in org custom exchange rates
        description: ''
        operationId: bulkUpdateCustomExchangeRates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
          - name: addRates
            in: query
            description: Boolean to determine whether to add or remove rates from update
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateExchangeRate'
          description: Update data
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/exchange-rate/{date}:
      get:
        tags:
          - exchange-rate
        summary: Return the exchange rates on a particular date
        description: ''
        operationId: getExchangeRates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeRate'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - exchange-rate
        summary: Delete a custom exchange rate on a particular date
        description: ''
        operationId: deleteExchangeRate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
          - name: currencyCode
            in: query
            description: Currency code
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - exchange-rate
        summary: >-
          Update the USD-based exchange rates for a particular date. Must be the
          first of a month.
        description: ''
        operationId: setExchangeRates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExchangeRate'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/exchange-rate/{date}/global:
      get:
        tags:
          - exchange-rate
        summary: Return the global exchange rates based on USD for a particular date
        description: ''
        operationId: getGlobalExchangeRates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeRate'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/exchange-rate/{date}/custom:
      get:
        tags:
          - exchange-rate
        summary: Return org custom exchange rates
        description: ''
        operationId: getCustomExchangeRates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to use
            required: true
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeRate'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/export/powerpoint/org:
      post:
        tags:
          - export
        summary: Export org chart to Powerpoint
        description: ''
        operationId: exportOrgToPowerpoint
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: date to export the data from
            required: false
            example: '2016-12-25'
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/exportOrgToPowerpointBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/powerpoint/report/{reportId}:
      post:
        tags:
          - export
        summary: Export report to Powerpoint
        description: ''
        operationId: exportReportToPowerpoint
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: report id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportOrgToPowerpointBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/pdf/review/{assessmentId}:
      post:
        tags:
          - export
        summary: Export reviews in PDF format
        description: ''
        operationId: exportPdfReviews
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/zip/file:
      post:
        tags:
          - export
        summary: Export a zipfile of files downloaded from some field
        description: ''
        operationId: exportFiles
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: field
            in: query
            description: Field
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Query for jobs or people to match against
            required: false
            schema:
              type: string
          - name: size
            in: query
            description: >-
              Size of images to export, if image file (250x250, 50x50, defaults to
              original)
            required: false
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/export/csv/fields:
      post:
        tags:
          - export
        summary: Export a CSV of custom fields
        description: ''
        operationId: exportCsvFields
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: Ids of fields to export (if null, all fields are returned)
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/snapshot:
      post:
        tags:
          - export
        summary: Export a snapshot of a current roster to CSV format
        description: ''
        operationId: exportCsvSnapshot
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/change:
      post:
        tags:
          - export
        summary: Export a changelog to CSV format
        description: ''
        operationId: exportCsvChanges
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/users:
      post:
        tags:
          - export
        summary: Export users for a review to CSV format
        description: ''
        operationId: exportToCsvUsers
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/task/{reviewId}:
      post:
        tags:
          - export
        summary: Export tasks for a review to CSV format
        description: ''
        operationId: exportToCsvTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reviewId
            in: path
            description: review id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/scenario/{scenarioId}:
      post:
        tags:
          - export
        summary: Export a CSV changelog of a scenario
        description: ''
        operationId: exportCsvScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/export/csv/scenario/{scenarioId}/comments:
      post:
        tags:
          - export
        summary: Export a csv log of a scenario comments
        description: ''
        operationId: exportCsvScenarioComments
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid parameters
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/cql/validate:
      post:
        tags:
          - expression
        summary: Validate carrot expression(s)
        description: ''
        operationId: validateExpressions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateExpressionRequest'
          description: Expression to be validated
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ValidateExpressionResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
    /v1/org/{orgId}/cql/evaluate:
      post:
        tags:
          - expression
        summary: Evaluate carrot expression
        description: ''
        operationId: evaluateExpression
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateExpressionRequest'
          description: Expression to be evaluated
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EvaluateExpressionResponse'
          '400':
            description: bad request
          '401':
            description: not authorized
    /v1/org/{orgId}/field:
      get:
        tags:
          - field
        summary: Return all fields in the organization paginated
        description: ''
        operationId: findFields
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Field id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: ids
            in: query
            description: Comma separated Field Ids to find
            required: false
            schema:
              type: string
          - name: table
            in: query
            description: >-
              Retrieve fields from a particular table (id or name); if not passed,
              returns non-table fields
            required: false
            schema:
              type: string
          - name: tableType
            in: query
            description: >-
              Retrieve fields from a particular table type; ignored if table not
              passed
            required: false
            schema:
              type: string
          - name: form
            in: query
            description: Retrieve fields relating to a particular form
            required: false
            schema:
              type: string
          - name: builtin
            in: query
            description: >-
              Include built-in (builtin), custom (custom) or all fields - defaults
              to custom
            required: false
            schema:
              type: string
          - name: includeTtst
            in: query
            description: Include custom ttst fields - defaults to false
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsField'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - field
        summary: Create a field
        description: ''
        operationId: createField
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableType
            in: query
            description: table type to add the field to
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateField'
          description: Field data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Field'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/field/category/{categoryId}:
      get:
        tags:
          - field
        summary: Return fields in a particular category
        description: ''
        operationId: getFieldsInCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: categoryId
            in: path
            description: Category id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsField'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/field/category:
      get:
        tags:
          - field
        summary: Return uncategorized fields
        description: ''
        operationId: getUncategorizedFields
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsField'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/field/{fieldId}:
      get:
        tags:
          - field
        summary: Return a particular field by id
        description: ''
        operationId: getField
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fieldId
            in: path
            description: Field id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Field'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - field
        summary: Delete a field
        description: ''
        operationId: deleteField
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fieldId
            in: path
            description: Field id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - field
        summary: Update an existing field
        description: ''
        operationId: updateField
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fieldId
            in: path
            description: Field id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateField'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/status:
      post:
        tags:
          - field
        summary: Update status for existing fields
        description: ''
        operationId: updateFieldStatus
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldStatusUpdateRequest'
          description: Field data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/remove-overrides:
      post:
        tags:
          - field
        summary: Remove overrides from fields
        description: ''
        operationId: removeFieldOverrides
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldRemoveOverrideRequest'
          description: Fields for which to remove overrides
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/remove-category:
      post:
        tags:
          - field
        summary: Remove field from all associated categories
        description: ''
        operationId: removeFieldCategory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldRemoveCategoryRequest'
          description: Fields to set as uncategorized
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/{fieldId}/dryrun:
      patch:
        tags:
          - field
        summary: >-
          Perform a dry-run of an update to an existing field that will require
          migrations
        description: ''
        operationId: updateFieldDryRun
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fieldId
            in: path
            description: Field id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateField'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/delete:
      delete:
        tags:
          - field
        summary: Delete fields
        description: ''
        operationId: deleteFields
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: Field ids
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/field/built-in:
      get:
        tags:
          - field
        summary: Get built-in fields
        description: ''
        operationId: getBuiltinFields
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsPartialField'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/file:
      get:
        tags:
          - file
        summary: Returns metadata about a file
        description: ''
        operationId: findFiles
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity id
            required: false
            schema:
              type: string
          - name: entityType
            in: query
            description: Entity type
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: from
            in: query
            description: From result id
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsFileEntity'
          '401':
            description: Not authorized
          '403':
            description: Permission denied
          '404':
            description: File not found
      post:
        tags:
          - file
        summary: Upload a new file
        description: ''
        operationId: uploadFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: entityId
            in: query
            description: entity id (if not passed, defaults to user id)
            required: false
            schema:
              type: string
          - name: entityType
            in: query
            description: entity type (if not passed, defaults to user)
            required: false
            schema:
              type: string
          - name: field
            in: query
            description: field name - can leave blank for a general upload
            required: false
            schema:
              type: string
          - name: sensitive
            in: query
            description: file sensitivity level - defaults to PERSONAL
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileEntity'
          '400':
            description: Invalid type or bad request
          '401':
            description: Not authorized
    /v1/org/{orgId}/file/{fileId}:
      get:
        tags:
          - file
        summary: Returns metadata about a file
        description: ''
        operationId: getFileMetadata
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fileId
            in: path
            description: File id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileEntity'
          '401':
            description: Not authorized
          '403':
            description: Permission denied
          '404':
            description: File not found
      delete:
        tags:
          - file
        summary: Delete a file
        description: ''
        operationId: deleteFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fileId
            in: path
            description: File id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/file/{fileId}/download:
      get:
        tags:
          - file
        summary: Download a file
        description: ''
        operationId: downloadFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fileId
            in: path
            description: File id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: Not authorized
          '403':
            description: Permission denied
          '404':
            description: File not found
    /v1/org/{orgId}/form/{formId}/remind:
      post:
        tags:
          - form
        summary: >-
          Sends reminder for a form with existing tasks, sending emails/chat
          notifications to people being requested
        description: ''
        operationId: remindFormData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormCollectRequest'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Form'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form/status:
      post:
        tags:
          - form
        summary: Update status for existing forms
        description: ''
        operationId: updateFormStatus
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormStatusUpdateRequest'
          description: Form data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/form/{formId}:
      get:
        tags:
          - form
        summary: Return a particular form by id
        description: ''
        operationId: getForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: evalJobId
            in: query
            description: >-
              Evaluate any expressions inside the form relative to a particular
              job
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Form'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - form
        summary: Submit data from a form
        description: ''
        operationId: legacySubmitForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Org id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormSubmitRequest'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
      delete:
        tags:
          - form
        summary: Delete a form
        description: ''
        operationId: deleteForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - form
        summary: Update an existing form
        description: ''
        operationId: updateForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateForm'
          description: Form data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/form/delete:
      delete:
        tags:
          - form
        summary: Delete forms
        description: ''
        operationId: deleteForms
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: Form ids
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/form/{formId}/draft:
      get:
        tags:
          - form
        summary: Get the current state of form draft data
        description: ''
        operationId: getFormDraft
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: personId
            in: query
            description: Person id
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormDraft'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
      post:
        tags:
          - form
        summary: Submit draft data from a form
        description: ''
        operationId: legacySubmitFormDraft
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Org id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormSubmitRequest'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormDraft'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form/{formId}/submit/draft:
      post:
        tags:
          - form
        summary: Submit data from a form draft
        description: ''
        operationId: submitFormDraft
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id
            required: false
            schema:
              type: string
          - name: targetType
            in: query
            description: Target type
            required: false
            schema:
              type: string
              enum:
                - NONE
                - PERSON
        requestBody:
          $ref: '#/components/requestBodies/submitFormDraftBody'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormDraft'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form/{formId}/submit:
      post:
        tags:
          - form
        summary: Submit data from a form
        description: ''
        operationId: submitForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id
            required: false
            schema:
              type: string
          - name: targetType
            in: query
            description: Target type
            required: false
            schema:
              type: string
              enum:
                - NONE
                - PERSON
        requestBody:
          $ref: '#/components/requestBodies/submitFormDraftBody'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form/available:
      get:
        tags:
          - form
        summary: Return all active forms applicable to a particular entity
        description: ''
        operationId: getAvailableForms
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id
            required: false
            schema:
              type: string
          - name: targetType
            in: query
            description: Target type
            required: false
            schema:
              type: string
              enum:
                - NONE
                - PERSON
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsFormSummary'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form/{formId}/render:
      get:
        tags:
          - form
        summary: Render a form for display
        description: ''
        operationId: renderForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id
            required: false
            schema:
              type: string
          - name: targetType
            in: query
            description: Target type
            required: false
            schema:
              type: string
              enum:
                - NONE
                - PERSON
          - name: formResponseId
            in: query
            description: Form response id, if editing a prior form response
            required: false
            schema:
              type: string
          - name: formResponseChangeId
            in: query
            description: >-
              Form response change id, if editing a prior form response
              (deprecated)
            required: false
            schema:
              type: string
          - name: formVersionId
            in: query
            description: Form version id, if rendering a previous version of the form
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormRender'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form/{formId}/rerender/question/{updateQuestionId}:
      post:
        tags:
          - form
        summary: Re-render form blocks based on changes to the form values
        description: ''
        operationId: rerenderForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
          - name: updateQuestionId
            in: path
            description: The question id that is being updated to trigger the re-render
            required: true
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id
            required: false
            schema:
              type: string
          - name: targetType
            in: query
            description: Target type
            required: false
            schema:
              type: string
              enum:
                - NONE
                - PERSON
          - name: formVersionId
            in: query
            description: Form version id, if rendering a previous version of the form
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/submitFormDraftBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormRerender'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form/draft/{draftId}:
      delete:
        tags:
          - form
        summary: Delete the given form draft
        description: ''
        operationId: deleteFormDraft
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: draftId
            in: path
            description: Form Draft id
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormDraft'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form:
      get:
        tags:
          - form
        summary: Return all forms in the organization paginated
        description: ''
        operationId: findForms
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: status
            in: query
            description: Status to filter by
            required: false
            schema:
              type: string
              enum:
                - ACTIVE
                - INACTIVE
                - ARCHIVED
          - name: from
            in: query
            description: Form id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsForm'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - form
        summary: Create a form
        description: ''
        operationId: createForm
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateForm'
          description: Form data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Form'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form/person/{personId}:
      get:
        tags:
          - form
        summary: Return all active forms applicable to a particular person
        description: ''
        operationId: findFormsForPerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsForm'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form/{formId}/collect:
      post:
        tags:
          - form
        summary: >-
          Collect data for an existing form, sending emails and chat notifications
          to people being requested
        description: ''
        operationId: collectFormData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormCollectRequest'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Form'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/form-response/{formResponseId}:
      get:
        tags:
          - form-response
        summary: Return a particular form response by id
        description: ''
        operationId: getFormResponse
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: FormResponse id
            required: true
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use for answers; default is json, can also use
              json-extended or json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormResponse'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - form-response
        summary: Re-submit (update) an existing form response's answers
        description: ''
        operationId: updateFormResponseAnswers
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: FormResponse id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: FormResponse data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      delete:
        tags:
          - form-response
        summary: Delete a form response
        description: ''
        operationId: deleteFormResponse
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: FormResponse id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - form-response
        summary: >-
          Update an existing form response's metadata, such as shareAccess
          information
        description: ''
        operationId: updateFormResponse
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: FormResponse id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFormResponse'
          description: FormResponse data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/form-response:
      get:
        tags:
          - form-response
        summary: Return form responses by form
        description: ''
        operationId: findFormResponses
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: query
            description: Form id to filter by
            required: false
            schema:
              type: string
          - name: assessmentId
            in: query
            description: Assessment id to filter by
            required: false
            schema:
              type: string
          - name: submitPersonId
            in: query
            description: Person id to filter by (person who submitted the form)
            required: false
            schema:
              type: string
          - name: targetId
            in: query
            description: Target id to filter by
            required: false
            schema:
              type: string
          - name: submitPersonFilter
            in: query
            description: Filter to apply on the submitter
            required: false
            schema:
              type: string
          - name: targetFilter
            in: query
            description: Filter to apply on the target
            required: false
            schema:
              type: string
          - name: fromId
            in: query
            description: FormResponse id to start paginating from
            required: false
            schema:
              type: string
          - name: fromSubmitAt
            in: query
            description: Submit timestamp to start from (inclusive)
            required: false
            schema:
              type: string
          - name: untilSubmitAt
            in: query
            description: Submit timestamp to go until (exclusive)
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - form-response
        summary: Export form responses
        description: ''
        operationId: exportFormResponses
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormResponsesExportOptions'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form-response/count:
      get:
        tags:
          - form-response
        summary: Return the total count of form responses
        description: ''
        operationId: getFormResponseCount
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formId
            in: query
            description: Form id to filter by
            required: false
            schema:
              type: string
          - name: assessmentId
            in: query
            description: Assessment id to filter by
            required: false
            schema:
              type: string
          - name: submitPersonFilter
            in: query
            description: Filter to apply on the submitter
            required: false
            schema:
              type: string
          - name: targetFilter
            in: query
            description: Filter to apply on the target
            required: false
            schema:
              type: string
          - name: fromSubmitAt
            in: query
            description: Submit timestamp to start from (inclusive)
            required: false
            schema:
              type: string
          - name: untilSubmitAt
            in: query
            description: Submit timestamp to go until (exclusive)
            required: false
            schema:
              type: string
          - name: questionId
            in: query
            description: Question id to filter by
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FormResponseCount'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/form-response/{formResponseId}/approve:
      post:
        tags:
          - form-response
        summary: Approve a form response
        description: ''
        operationId: approveFormResponse
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: Form response id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormResponseApproval'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/form-response/{formResponseId}/reject:
      post:
        tags:
          - form-response
        summary: Reject a form response
        description: ''
        operationId: rejectFormResponse
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: formResponseId
            in: path
            description: Form response id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/FormResponseApproval'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/media/{mediaId}:
      get:
        tags:
          - media
        summary: Returns metadata about a piece of media
        description: ''
        operationId: getGlobalMedia
        parameters:
          - name: mediaId
            in: path
            description: Media id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Media'
          '401':
            description: Not authorized
          '403':
            description: Permission denied
          '404':
            description: Media not found
    /v1/media:
      post:
        tags:
          - media
        summary: Upload a new piece of media
        description: ''
        operationId: uploadGlobalMedia
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Media'
          '400':
            description: Invalid type or bad request
          '401':
            description: Not authorized
    /v1/org/{orgId}/guideline:
      get:
        tags:
          - guideline
        summary: Get all guidelines for a given comp review
        description: ''
        operationId: findGuidelinesForCompReview
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: compReviewId
            in: query
            description: comp review id
            required: false
            schema:
              type: string
          - name: includeDeleted
            in: query
            description: include deleted guidelines
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsGuideline'
      post:
        tags:
          - guideline
        summary: Create a new guideline
        description: ''
        operationId: createGuideline
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGuideline'
        responses:
          default:
            description: successful operation
    /v1/org/{orgId}/guideline/{id}:
      get:
        tags:
          - guideline
        summary: Get a specific guideline
        description: ''
        operationId: findGuideline
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired guideline
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Guideline'
      delete:
        tags:
          - guideline
        summary: Delete a guideline
        description: ''
        operationId: deleteGuideline
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: string
          - name: id
            in: path
            required: true
            schema:
              type: string
        responses:
          default:
            description: successful operation
      patch:
        tags:
          - guideline
        summary: Update a guideline
        description: ''
        operationId: updateGuideline
        parameters:
          - name: orgId
            in: path
            required: true
            schema:
              type: string
          - name: id
            in: path
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGuideline'
        responses:
          default:
            description: successful operation
    /v1/org/{orgId}/guideline/{id}/calculate:
      get:
        tags:
          - guideline
        summary: >-
          Calculate the matrix values for a specific guideline (which may apply to
          multiple scenarios in the comp review)
        description: ''
        operationId: calculateGuideline
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired guideline
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsGuidelineCalculation'
    /v1/org/{orgId}/import/csv/data:
      post:
        tags:
          - import
        summary: Import data from CSV file
        description: ''
        operationId: importDataCsv
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: scenario id to import into
            required: false
            schema:
              type: string
          - name: skipErrors
            in: query
            description: >-
              whether to skip erroneous rows, or reject the entire upload if any
              are invalid (default)
            required: false
            schema:
              type: boolean
          - name: upsert
            in: query
            description: whether to create persons/jobs that are not matched
            required: false
            schema:
              type: boolean
          - name: createGroups
            in: query
            description: whether to create groups that are not matched
            required: false
            schema:
              type: boolean
          - name: disableSyncHireDate
            in: query
            description: >-
              whether to disable adjusting dates of hires in cases where the start
              dates differ
            required: false
            schema:
              type: boolean
          - name: updateTypes
            in: query
            description: >-
              types of updates to apply (default all:
              title,comp,group,relationship,data,other)
            required: false
            schema:
              type: string
          - name: notifyUserIds
            in: query
            description: >-
              comma-separated list of user ids who should be notified when the
              import is complete
            required: false
            schema:
              type: string
          - name: notifyAppName
            in: query
            description: name of the app that should be listed in the notify
            required: false
            schema:
              type: string
          - name: defaultChangeDate
            in: query
            description: date of the changes - if not presented on the csv file
            required: false
            schema:
              type: string
              format: date
          - name: disableOverwritePerson
            in: query
            description: >-
              disable overwriting changes to persons' data -- only update data if
              the person field is null
            required: false
            schema:
              type: boolean
          - name: importDryRun
            in: query
            description: import dry run
            required: false
            schema:
              type: boolean
          - name: importAfterDryRun
            in: query
            description: whether to automatically import if dry run succeeds
            required: false
            schema:
              type: boolean
          - name: parentProcessId
            in: query
            description: process id of parent process
            required: false
            schema:
              type: string
          - name: importSource
            in: query
            description: self identified source caller into this method
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/import/csv/columnMatch:
      post:
        tags:
          - import
        summary: Import data from CSV file
        description: ''
        operationId: importDataCsvWithColumnMatch
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: scenario id to import into
            required: false
            schema:
              type: string
          - name: skipErrors
            in: query
            description: >-
              whether to skip erroneous rows, or reject the entire upload if any
              are invalid (default)
            required: false
            schema:
              type: boolean
          - name: upsert
            in: query
            description: whether to create persons/jobs that are not matched
            required: false
            schema:
              type: boolean
          - name: createGroups
            in: query
            description: whether to create groups that are not matched
            required: false
            schema:
              type: boolean
          - name: disableSyncHireDate
            in: query
            description: >-
              whether to disable adjusting dates of hires in cases where the start
              dates differ
            required: false
            schema:
              type: boolean
          - name: updateTypes
            in: query
            description: >-
              types of updates to apply (default all:
              title,comp,group,relationship,data,other)
            required: false
            schema:
              type: string
          - name: notifyUserIds
            in: query
            description: >-
              comma-separated list of user ids who should be notified when the
              import is complete
            required: false
            schema:
              type: string
          - name: notifyAppName
            in: query
            description: name of the app that should be listed in the notify
            required: false
            schema:
              type: string
          - name: defaultChangeDate
            in: query
            description: date of the changes - if not presented on the csv file
            required: false
            schema:
              type: string
              format: date
          - name: disableOverwritePerson
            in: query
            description: >-
              disable overwriting changes to persons' data -- only update data if
              the person field is null
            required: false
            schema:
              type: boolean
          - name: importDryRun
            in: query
            description: import dry run
            required: false
            schema:
              type: boolean
          - name: importAfterDryRun
            in: query
            description: whether to automatically import if dry run succeeds
            required: false
            schema:
              type: boolean
          - name: parentProcessId
            in: query
            description: process id of parent process
            required: false
            schema:
              type: string
          - name: importSource
            in: query
            description: self identified source caller into this method
            required: false
            schema:
              type: string
          - name: syncImages
            in: query
            description: import images from csv
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                  userDefinedFieldAliases:
                    description: user defined field aliases for column matching
                    type: object
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/import/csv/filepath:
      post:
        tags:
          - import
        summary: Import data from CSV file
        description: ''
        operationId: importDataCsvWithFilePath
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: filePath
            in: query
            description: filePath
            required: false
            schema:
              type: string
          - name: scenarioId
            in: query
            description: scenario id to import into
            required: false
            schema:
              type: string
          - name: skipErrors
            in: query
            description: >-
              whether to skip erroneous rows, or reject the entire upload if any
              are invalid (default)
            required: false
            schema:
              type: boolean
          - name: upsert
            in: query
            description: whether to create persons/jobs that are not matched
            required: false
            schema:
              type: boolean
          - name: createGroups
            in: query
            description: whether to create groups that are not matched
            required: false
            schema:
              type: boolean
          - name: disableSyncHireDate
            in: query
            description: >-
              whether to disable adjusting dates of hires in cases where the start
              dates differ
            required: false
            schema:
              type: boolean
          - name: updateTypes
            in: query
            description: >-
              types of updates to apply (default all:
              title,comp,group,relationship,data,other)
            required: false
            schema:
              type: string
          - name: notifyUserIds
            in: query
            description: >-
              comma-separated list of user ids who should be notified when the
              import is complete
            required: false
            schema:
              type: string
          - name: notifyAppName
            in: query
            description: name of the app that should be listed in the notify
            required: false
            schema:
              type: string
          - name: defaultChangeDate
            in: query
            description: date of the changes - if not presented on the csv file
            required: false
            schema:
              type: string
              format: date
          - name: disableOverwritePerson
            in: query
            description: >-
              disable overwriting changes to persons' data -- only update data if
              the person field is null
            required: false
            schema:
              type: boolean
          - name: importDryRun
            in: query
            description: import dry run
            required: false
            schema:
              type: boolean
          - name: importAfterDryRun
            in: query
            description: whether to automatically import if dry run succeeds
            required: false
            schema:
              type: boolean
          - name: parentProcessId
            in: query
            description: process id of parent process
            required: false
            schema:
              type: string
          - name: importSource
            in: query
            description: self identified source caller into this method
            required: false
            schema:
              type: string
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/import/spreadsheet/validateFormat:
      post:
        tags:
          - import
        summary: Check if a spreadsheet file is valid to be imported
        description: ''
        operationId: validateSpreadsheetFormat
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: maxRows
            in: query
            description: Max rows allowed in an imported spreadsheet file
            required: false
            schema:
              type: integer
              format: int32
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/import/csv/initialColumnMatch:
      post:
        tags:
          - import
        summary: >-
          Parse a CSV file in preparation for column matching as part of
          spreadsheet import process
        description: ''
        operationId: initialColumnMatch
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/job-level:
      get:
        tags:
          - job-level
        summary: Find job levels in the organization
        description: ''
        operationId: findJobLevels
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Job level id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: includeDeleted
            in: query
            description: Include deleted job levels
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - job-level
        summary: Create a job level
        description: ''
        operationId: createJobLevel
        parameters:
          - name: orgId
            in: path
            description: org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of job level creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobLevel'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/job-level/{jobLevelId}:
      get:
        tags:
          - job-level
        summary: Return a particular job level by id on an effective date
        description: ''
        operationId: getJobLevelById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobLevelId
            in: path
            description: Job level id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - job-level
        summary: Delete a job level
        description: ''
        operationId: deleteJobLevel
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobLevelId
            in: path
            description: Job level id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - job-level
        summary: Update a job level
        description: ''
        operationId: updateJobLevel
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobLevelId
            in: path
            description: Job level id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of jobLevel update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateJobLevel'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/legaldoc/{name}:
      get:
        tags:
          - legalDoc
        summary: Retrieve the legal doc by name
        description: ''
        operationId: getLegalDoc
        parameters:
          - name: name
            in: path
            description: name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LegalDoc'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/legaldoc:
      post:
        tags:
          - legalDoc
        summary: Create a legal doc
        description: ''
        operationId: createLegalDoc
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLegalDoc'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/media/{mediaId}:
      get:
        tags:
          - media
        summary: Returns metadata about a piece of media
        description: ''
        operationId: getMedia
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: mediaId
            in: path
            description: Media id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Media'
          '401':
            description: Not authorized
          '403':
            description: Permission denied
          '404':
            description: Media not found
    /v1/org/{orgId}/media:
      post:
        tags:
          - media
        summary: Upload a new piece of media
        description: ''
        operationId: uploadMedia
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Media'
          '400':
            description: Invalid type or bad request
          '401':
            description: Not authorized
    /v1/org/{orgId}/message:
      post:
        tags:
          - message
        summary: Create a new message
        description: ''
        operationId: createMessage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialMessage'
          description: Message data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/message/me/{messageKey}:
      get:
        tags:
          - message
        summary: Return a particular message by key
        description: ''
        operationId: getMessageByKey
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: messageKey
            in: path
            description: Message key
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
          '401':
            description: unauthorized
    /v1/org/{orgId}/message/{messageId}/read:
      post:
        tags:
          - message
        summary: Sets the designated message's `readAt` property
        description: ''
        operationId: markAsRead
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: messageId
            in: path
            description: Message id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/message/bulk/read:
      post:
        tags:
          - message
        summary: Sets each of the designated message's `readAt` property
        description: ''
        operationId: bulkMarkAsRead
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/PartialMessageArray'
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/message/bulk/seen:
      post:
        tags:
          - message
        summary: Marks each message as `seen`
        description: ''
        operationId: bulkMarkAsSeen
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/PartialMessageArray'
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/message/{messageId}:
      get:
        tags:
          - message
        summary: Return a particular message by id
        description: ''
        operationId: getMessage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: messageId
            in: path
            description: Message id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
          '401':
            description: unauthorized
    /v1/org/{orgId}/message/me:
      get:
        tags:
          - message
        summary: Return all messages for a particular user
        description: ''
        operationId: me
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: Message "type" (WEB, CHAT, or EMAIL)
            required: false
            schema:
              type: string
          - name: unreadOnly
            in: query
            description: Message "status" (read or unread)
            required: false
            schema:
              type: boolean
          - name: from
            in: query
            description: MessageId to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Limit
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsMessage'
          '401':
            description: unauthorized
    /v1/org/{orgId}/metric:
      post:
        tags:
          - metric
        summary: Record a daily metric
        description: ''
        operationId: recordMetric
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordMetricRequest'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/multiplier:
      get:
        tags:
          - multiplier
        summary: Find comp band multipliers in the organization
        description: ''
        operationId: findMultipliers
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Multiplier id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: includeDeleted
            in: query
            description: Include deleted multipliers
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - multiplier
        summary: Create a multiplier
        description: ''
        operationId: createMultiplier
        parameters:
          - name: orgId
            in: path
            description: org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of multiplier creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMultiplier'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/multiplier/{multiplierId}:
      get:
        tags:
          - multiplier
        summary: Return a particular comp band multiplier by id on an effective date
        description: ''
        operationId: getMultiplierById
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: multiplierId
            in: path
            description: Comp band multiplier id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - multiplier
        summary: Delete a multiplier
        description: ''
        operationId: deleteMultiplier
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: multiplierId
            in: path
            description: Multiplier id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - multiplier
        summary: Update a multiplier
        description: ''
        operationId: updateMultiplier
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: multiplierId
            in: path
            description: Multiplier id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of multiplier update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMultiplier'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/notification:
      post:
        tags:
          - notification
        summary: Send a email or in-app notification
        description: ''
        operationId: sendNotifications
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationRequest'
          description: Notification request
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /oauth/token:
      post:
        tags:
          - oauth
        summary: >-
          Return an Oauth2 Authorization bearer token, given a username and
          password
        description: ''
        operationId: issueAccessToken
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  grant_type:
                    description: >-
                      Type of grant; 'password', 'refresh_token',
                      'authorization_code' supported
                    type: string
                  username:
                    description: Username to authenticate
                    type: string
                  password:
                    description: Password to authenticate
                    type: string
                  scope:
                    description: Requested access scope or scopes (space separated)
                    type: string
                  code:
                    description: Authorization code
                    type: string
                  redirect_uri:
                    description: Redirect URI
                    type: string
                    format: uri
                  client_id:
                    description: Client id
                    type: string
                  refresh_token:
                    description: Refresh token
                    type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid credentials
      delete:
        tags:
          - oauth
        summary: Delete the current Oauth2 bearer token (for signout)
        description: ''
        operationId: deleteToken
        responses:
          '401':
            description: not authorized
    /oauth/token/sso/{type}:
      post:
        tags:
          - oauth
        summary: Return an Oauth2 Authorization bearer token, given a SSO id token
        description: ''
        operationId: issueSsoToken
        parameters:
          - name: type
            in: path
            description: type of SSO request (google or microsoft)
            required: true
            schema:
              type: string
          - name: createOrg
            in: query
            description: automatically create org if possible to do so
            required: false
            schema:
              type: boolean
          - name: signupSource
            in: query
            description: sign up source (self-serve, connect, or sequoia)
            required: false
            schema:
              type: string
              enum:
                - ADP_MARKETPLACE
                - SELF_SERVE
                - SELF_SERVE_TEST
                - SEQUOIA_ONE
                - CONNECT
          - name: utmParams
            in: query
            description: utm params (used in salesforce for lead tracking)
            required: false
            schema:
              type: string
          - name: email
            in: query
            description: sign up email address
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenRequest'
          description: access token request
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid credentials
    /oauth/token/view:
      post:
        tags:
          - oauth
        summary: Return a view-as token
        description: ''
        operationId: issueViewToken
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewAsRequest'
          description: request on whom to view as
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid credentials
    /oauth/app/{appName}:
      get:
        tags:
          - oauth
        summary: >-
          Process an Oauth2 redirect request from an access request for an app
          installation, storing the accessToken and refreshToken as secrets for
          the app
        description: ''
        operationId: handleRedirect
        parameters:
          - name: token
            in: cookie
            required: false
            schema:
              type: string
          - name: appName
            in: path
            description: App name
            required: true
            schema:
              type: string
          - name: state
            in: query
            description: State, containing orgId and appUserId
            required: false
            schema:
              type: string
          - name: code
            in: query
            description: Temporary authorization code
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /oauth/sso/{idp}/login:
      get:
        tags:
          - oauth
        summary: Login via the auth endpoint
        description: ''
        operationId: ssoAuthLogin
        parameters:
          - name: idp
            in: path
            description: Identity provider of SSO login (e.g. adp)
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /oauth/sso/{idp}/access-token:
      get:
        tags:
          - oauth
        summary: Exchange a one-time use Auth Code for the IDP access token response
        description: ''
        operationId: getIdpAccessTokenResponse
        parameters:
          - name: idp
            in: path
            description: Identity provider of SSO login (e.g. adp)
            required: true
            schema:
              type: string
          - name: authCode
            in: query
            description: A one-time use Auth Code
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IdpAccessTokenResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/onboard:
      get:
        tags:
          - onboard
        summary: Returns all the onboarding steps the organization has not completed
        description: ''
        operationId: getSteps
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: getUncomplete
            in: query
            description: Return only uncompleted steps, or all steps?
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsOnboardStep'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/onboard/{stepName}/skip:
      post:
        tags:
          - onboard
        summary: Marks the given onboard step as 'skipped' for the given customer
        description: ''
        operationId: skipStep
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: stepName
            in: path
            description: Step name
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/config:
      get:
        tags:
          - org-config
        summary: Return config for a given org
        description: ''
        operationId: getOrgConfig
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: internal server error
      post:
        tags:
          - org-config
        summary: Create an org config if it doesn't exist
        description: ''
        operationId: createOrgConfig
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrgConfig'
          description: Org config to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: internal server error
      patch:
        tags:
          - org-config
        summary: Update an existing org config
        description: ''
        operationId: updateOrgConfig
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrgConfig'
          description: Sort data to update
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: internal server error
    /v1/org/{orgId}:
      get:
        tags:
          - org
        summary: Return a particular org by id
        description: ''
        operationId: getOrg
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Org'
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - org
        summary: Update an existing org
        description: ''
        operationId: updateOrg
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrg'
          description: Org data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /org/{slug}:
      get:
        tags:
          - org
        summary: Return validation for a org by slug
        description: ''
        operationId: getOrgBySlugNoAuth
        parameters:
          - name: slug
            in: path
            description: Org slug
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/slug/{slug}:
      get:
        tags:
          - org
        summary: Return a particular org by slug
        description: ''
        operationId: getOrgBySlug
        parameters:
          - name: slug
            in: path
            description: Org slug
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Org'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org:
      get:
        tags:
          - org
        summary: Return all visible orgs, paginated by name
        description: ''
        operationId: findOrgs
        parameters:
          - name: from
            in: query
            description: Org id to start from
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: customerId
            in: query
            description: Find orgs belonging to a particular customer id
            required: false
            schema:
              type: string
          - name: realOnly
            in: query
            description: Include only orgs where type is REAL?
            required: false
            schema:
              type: boolean
          - name: lastCreateAt
            in: query
            description: Only include orgs whose last createAt occurred after the date
            required: false
            schema:
              type: integer
              format: int64
          - name: lastActiveAt
            in: query
            description: Only include orgs whose last activeAt occurred after the date
            required: false
            schema:
              type: integer
              format: int64
          - name: internalOptions
            in: query
            description: Filter orgs by internal option key-value pair
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsOrg'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - org
        summary: Create a new org
        description: ''
        operationId: createOrg
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrg'
          description: Org data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Org'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{org}/app-install-code:
      post:
        tags:
          - org
        summary: Retrieve an Oauth2 authorization code to install an app at this org
        description: ''
        operationId: getAppInstallAuthorizationCode
        parameters:
          - name: org
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AccessTokenResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/app-install-code/validate:
      post:
        tags:
          - org
        summary: Validate authorization code
        description: ''
        operationId: validateAppInstallAuthorizationCode
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInstallCodeValidateRequest'
          description: Authorization code to validate
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppInstallCodeValidateResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/data-user-person-count:
      get:
        tags:
          - org
        summary: >-
          Gets the count of joined users, invited users, and org members who are
          not yet invited
        description: ''
        operationId: getOrgUserPersonCount
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgUsersPersonsCountResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/data-user-person:
      get:
        tags:
          - org
        summary: >-
          Gets a user or person by id. If both are provided, userId takes
          precedence
        description: ''
        operationId: getOrgUserPerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: userId
            in: query
            description: userId
            required: false
            schema:
              type: string
          - name: personId
            in: query
            description: personId
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgUsersPersonsResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/data-users-persons:
      get:
        tags:
          - org
        summary: >-
          Gets a list of org users (joined or invited) and org members (not yet
          invited)
        description: ''
        operationId: getOrgUsersAndPeople
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: limit
            in: query
            description: limit
            required: false
            schema:
              type: integer
              format: int32
          - name: offset
            in: query
            description: offset
            required: false
            schema:
              type: integer
              format: int32
          - name: sort
            in: query
            description: Sort by
            required: false
            example: name, email, role, expr, invite, active
            schema:
              type: string
          - name: role
            in: query
            description: Filter by user role label
            required: false
            example: Owner, Technical Owner, Employee, etc...
            schema:
              type: string
          - name: status
            in: query
            description: Filter by status
            required: false
            example: joined, invited, not-invited
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgUsersPersonsResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/change-head:
      post:
        tags:
          - org
        summary: >-
          Create a new org head in the history, by creating an empty job
          placeholder above the current head
        description: ''
        operationId: changeOrgHead
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/welcome-email:
      get:
        tags:
          - org
        summary: >-
          Gets the custom setting or default for the welcome email's subject,
          body, cta button label
        description: ''
        operationId: getWelcomeEmailSettings
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WelcomeEmailSettings'
          '403':
            description: Permission denied
          '500':
            description: Service error
    /v1/org/{orgId}/test-email:
      post:
        tags:
          - org
        summary: Send a test welcome email to oneself
        description: ''
        operationId: sendTestEmail
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestEmailRequest'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/agreement:
      post:
        tags:
          - org
        summary: Consent on Terms of Service agreement
        description: ''
        operationId: consentServiceAgreement
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementRequest'
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/access:
      get:
        tags:
          - org
        summary: Return information on current user's access
        description: ''
        operationId: getUserAccess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          default:
            description: successful operation
    /v1/org/{orgId}/policy/{policyId}:
      get:
        tags:
          - policy
        summary: Return a particular policy by id
        description: ''
        operationId: getPolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: policyId
            in: path
            description: Policy id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Policy'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - policy
        summary: Delete a policy
        description: ''
        operationId: deletePolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: policyId
            in: path
            description: Policy id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      patch:
        tags:
          - policy
        summary: Update an existing policy
        description: ''
        operationId: updatePolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: policyId
            in: path
            description: Policy id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePolicy'
          description: Policy data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/policy:
      get:
        tags:
          - policy
        summary: Return all or a set of policies in the organization
        description: ''
        operationId: findPolicies
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: ids
            in: query
            description: (Optional) Comma separated Policy Ids to find
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: (Optional) Return only default or custom policies
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsPolicy'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - policy
        summary: Create a policy
        description: ''
        operationId: createPolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePolicy'
          description: Policy data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Policy'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/policy/{policyId}/copy:
      post:
        tags:
          - policy
        summary: Copy an existing policy
        description: ''
        operationId: copyPolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: policyId
            in: path
            description: Policy id
            required: true
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Policy'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/policy/validate:
      post:
        tags:
          - policy
        summary: Return if a policy is valid
        description: ''
        operationId: validatePolicy
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialPolicy'
          description: Policy data to verify
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/policy/action:
      get:
        tags:
          - policy
        summary: Return all entity:action maps allowed on a policy rule
        description: ''
        operationId: getPolicyActions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntityAction'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/preload:
      get:
        tags:
          - preload
        summary: Return a set of pre-loaded data required by the web app
        description: ''
        operationId: getPreloadData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PreloadResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/process/{processId}/decrement:
      put:
        tags:
          - process
        summary: Decrement the step of an asynchronous process
        description: ''
        operationId: decrement
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process:
      get:
        tags:
          - process
        summary: Retrieve a number of previously run processes
        description: ''
        operationId: findProcesses
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: isAppProcess
            in: query
            description: Boolean if an app process
            required: false
            schema:
              type: boolean
          - name: appId
            in: query
            description: App ID to filter by
            required: false
            schema:
              type: string
          - name: parentProcessId
            in: query
            description: Parent process ID to search for children
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: 'Type to filter by. Accepted values: [''auto'', ''manual'']'
            required: false
            schema:
              type: string
          - name: completedAtStart
            in: query
            description: completed at start
            required: false
            schema:
              type: integer
              format: int64
          - name: completedAtEnd
            in: query
            description: completed at end
            required: false
            schema:
              type: integer
              format: int64
          - name: statuses
            in: query
            description: >-
              Statuses to filter by, comma-separated. Accepted values: ['DONE',
              'ERROR', 'PENDING', 'RUNNING', 'DONE_WITH_ERRORS']
            required: false
            schema:
              type: string
          - name: isParentProcess
            in: query
            description: Boolean if a parent process
            required: false
            schema:
              type: boolean
          - name: processTypes
            in: query
            description: Process types to filter by, comma-separated.
            required: false
            schema:
              type: string
          - name: searchValue
            in: query
            description: Search term for general filtering
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: from id
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: limit
            required: false
            schema:
              type: integer
              format: int32
          - name: syncDirections
            in: query
            description: direction
            required: false
            schema:
              type: string
          - name: syncCauses
            in: query
            description: >-
              V2 Causes to filter by, comma-separated. Accepted values: ['MANUAL',
              'AUTO', 'EVENT_BASED]
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProcess'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
      post:
        tags:
          - process
        summary: Creates a new process in the pending state
        description: ''
        operationId: createProcess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateProcess'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/file:
      get:
        tags:
          - process
        summary: Download the file associated with a particular process
        description: ''
        operationId: getProcessFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
      post:
        tags:
          - process
        summary: >-
          Upload a file to be attached to a process, and mark the process as
          complete
        description: ''
        operationId: completeWithFileExport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/log:
      get:
        tags:
          - process
        summary: >-
          Download the newline-delimited JSON log associated with a particular
          process
        description: ''
        operationId: getProcessLogFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}:
      get:
        tags:
          - process
        summary: Check the status of a particular process
        description: ''
        operationId: getProcess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
          - name: showState
            in: query
            description: showState
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
      patch:
        tags:
          - process
        summary: >-
          Update the status of a process, marking its progress or setting status
          to DONE or ERROR
        description: ''
        operationId: updateProcess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProcess'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/last-sync/{appUserId}:
      get:
        tags:
          - process
        summary: Get last success sync and last sync for given appUserId
        description: ''
        operationId: getAppProcessStatus
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: appUserId
            in: path
            description: app user id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppProcessStatus'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{createIdOverride}:
      post:
        tags:
          - process
        summary: Creates a new process with a specified createId in the pending state
        description: ''
        operationId: createProcessWithUserId
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: createIdOverride
            in: path
            description: created user id override
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateProcess'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/self-serve:
      post:
        tags:
          - process
        summary: Creates a new process in the pending state
        description: ''
        operationId: createSelfServeProcess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: Process type
            required: false
            schema:
              type: string
          - name: maxRows
            in: query
            description: Max rows allowed in an imported spreadsheet file
            required: false
            schema:
              type: integer
              format: int32
          - name: minColumns
            in: query
            description: Min columns required in an imported spreadsheet file
            required: false
            schema:
              type: integer
              format: int32
          - name: isSync
            in: query
            description: Whether the created process is sync flow or manual flow
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                  state:
                    type: object
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/state:
      put:
        tags:
          - process
        summary: Update process state
        description: ''
        operationId: updateStatefulProcess
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: state
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/resumeWithFile:
      put:
        tags:
          - process
        summary: Resume an asynchronous process
        description: ''
        operationId: resumeWithFile
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/events:
      get:
        tags:
          - process
        summary: Get events associated to a particular process
        description: ''
        operationId: getProcessEvents
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProcessEventResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/increment:
      put:
        tags:
          - process
        summary: Increment the step of an asynchronous process
        description: ''
        operationId: increment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/process/{processId}/resume:
      put:
        tags:
          - process
        summary: Resume an asynchronous process
        description: ''
        operationId: resume
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: processId
            in: path
            description: process id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
          description: data to process
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/product:
      get:
        tags:
          - product
        summary: Return all products
        description: ''
        operationId: findProducts
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProduct'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - product
        summary: Create a new product
        description: ''
        operationId: createProduct
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProduct'
          description: Product data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/product/{productId}:
      get:
        tags:
          - product
        summary: Return a particular product by id
        description: ''
        operationId: getProduct
        parameters:
          - name: productId
            in: path
            description: Product id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - product
        summary: Update an existing product
        description: ''
        operationId: updateProduct
        parameters:
          - name: productId
            in: path
            description: Product id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProduct'
          description: Product data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab/person/{personId}:
      get:
        tags:
          - profile-tab
        summary: Return all profile tabs applicable to a particular person
        description: ''
        operationId: findProfileTabsForPerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Return profile tabs that contain particular fields (comma-separated)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProfileTabSummary'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab/job/{jobId}:
      get:
        tags:
          - profile-tab
        summary: Return all profile tabs applicable to a particular job
        description: ''
        operationId: findProfileTabsForJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Return profile tabs that contain particular fields (comma-separated)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProfileTabSummary'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab/job/{jobId}/profile-tab/{tabId}:
      get:
        tags:
          - profile-tab
        summary: >-
          Fetch and evaluate the content of a particular profile tab id, relative
          to a particular job
        description: ''
        operationId: evaluateProfileTabForJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: tabId
            in: path
            description: Profile tab id
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProfileTabSummary'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab/person/{personId}/profile-tab/{tabId}/history:
      get:
        tags:
          - profile-tab
        summary: >-
          Evaluate the history (in the form of various cards) on a particular
          profile tab id, relative to a particular person
        description: ''
        operationId: findProfileTabHistory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
          - name: tabId
            in: path
            description: Profile tab id
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Search backwards in time from timestamp
            required: false
            schema:
              type: string
              format: int64
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProfileTabResponseCard'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab/{profileTabId}:
      get:
        tags:
          - profile-tab
        summary: Return a particular profile tab by id
        description: ''
        operationId: getProfileTab
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: profileTabId
            in: path
            description: Content id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProfileTab'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - profile-tab
        summary: Delete a profile tab
        description: ''
        operationId: deleteProfileTab
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: profileTabId
            in: path
            description: Profile tab id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - profile-tab
        summary: Update an existing profile tab
        description: ''
        operationId: updateProfileTab
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: profileTabId
            in: path
            description: Profile tab id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileTab'
          description: Profile tab data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/profile-tab:
      get:
        tags:
          - profile-tab
        summary: Return all profile tabs in the organization paginated
        description: ''
        operationId: findProfileTabs
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: status
            in: query
            description: Status to filter by
            required: false
            schema:
              type: string
              enum:
                - ACTIVE
                - INACTIVE
          - name: from
            in: query
            description: Content id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsProfileTab'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - profile-tab
        summary: Create a profile tab
        description: ''
        operationId: createProfileTab
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileTab'
          description: Profile tab data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProfileTab'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/query:
      get:
        tags:
          - query
        summary: Get a list of query tokens
        description: ''
        operationId: listQueryTokens
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/QueryToken'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - query
        summary: Create a live query token
        description: ''
        operationId: createQuery
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQueryToken'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueryToken'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/query/{queryToken}:
      get:
        tags:
          - query
        summary: Return the results of a previously created live query
        description: ''
        operationId: query
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: queryToken
            in: path
            description: Query token
            required: true
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: mapper
            in: query
            description: Deprecated parameter for backwards-compatibility
            required: false
            schema:
              type: string
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - query
        summary: Expire a previously created live query immediately
        description: ''
        operationId: expire
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: queryToken
            in: path
            description: Query token (either id or token string)
            required: true
            schema:
              type: string
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/question/{questionId}:
      get:
        tags:
          - question
        summary: Return a particular question by id
        description: ''
        operationId: getQuestion
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: questionId
            in: path
            description: Question id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Question'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - question
        summary: Delete a question
        description: ''
        operationId: deleteQuestion
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: questionId
            in: path
            description: Question id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - question
        summary: Update an existing question
        description: ''
        operationId: updateQuestion
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: questionId
            in: path
            description: Question id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateQuestion'
          description: Question data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/question:
      get:
        tags:
          - question
        summary: Return all questions in the organization paginated
        description: ''
        operationId: findQuestions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Question id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: ids
            in: query
            description: Comma separated Question Ids to find
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsQuestion'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - question
        summary: Create a question
        description: ''
        operationId: createQuestion
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateQuestion'
          description: Question data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Question'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/report/{reportId}/chart:
      get:
        tags:
          - reportChart
        summary: Return all of the charts for a particular report
        description: ''
        operationId: findCharts
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsReportChart'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - reportChart
        summary: Create a new chart in a report
        description: ''
        operationId: createChart
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReportChart'
          description: Report chart data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportChart'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/report/chart/{chartId}:
      get:
        tags:
          - reportChart
        summary: Return a particular report chart by id
        description: ''
        operationId: getChart
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportChart'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - reportChart
        summary: Delete a chart from a report
        description: ''
        operationId: deleteChart
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - reportChart
        summary: Update an existing report chart
        description: ''
        operationId: updateChart
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateReportChart'
          description: Chart data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/chart/{chartId}/data:
      get:
        tags:
          - reportChart
        summary: Export a particular chart's data
        description: ''
        operationId: exportChartData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
          - name: startDate
            in: query
            description: Start date, inclusive
            required: false
            schema:
              type: string
          - name: endDate
            in: query
            description: End date, exclusive
            required: false
            schema:
              type: string
          - name: interval
            in: query
            description: Interval
            required: false
            schema:
              type: string
              enum:
                - DAY
                - WEEK
                - MONTH
                - QUARTER
                - FISCAL_QUARTER
                - YEAR
                - FISCAL_YEAR
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: projectHires
            in: query
            description: Project future hires
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: Data format to use; default is json, can also use html
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/chart/{chartId}/query:
      get:
        tags:
          - reportChart
        summary: Query for the underlying data in a chart
        description: ''
        operationId: getUnderlyingChartData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
          - name: providedQuery
            in: query
            description: Query to run
            required: false
            schema:
              type: string
          - name: startDate
            in: query
            description: Start date, inclusive
            required: false
            schema:
              type: string
          - name: endDate
            in: query
            description: End date, exclusive
            required: false
            schema:
              type: string
          - name: interval
            in: query
            description: Interval
            required: false
            schema:
              type: string
              enum:
                - DAY
                - WEEK
                - MONTH
                - QUARTER
                - FISCAL_QUARTER
                - YEAR
                - FISCAL_YEAR
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: projectHires
            in: query
            description: Project future hires
            required: false
            schema:
              type: boolean
          - name: changeGroupingType
            in: query
            description: Type of change grouping
            required: false
            schema:
              type: string
              enum:
                - PRIMARY
                - SCENARIO
                - COMP_REVIEW
          - name: changeGroupingId
            in: query
            description: Change grouping id to query (null for primary)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportMetricsReturnType'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/chart/{chartId}/clone:
      post:
        tags:
          - reportChart
        summary: Clone a chart in a report
        description: ''
        operationId: cloneChart
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
          - name: chartLabel
            in: query
            description: New label
            required: false
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportChart'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/report:
      get:
        tags:
          - report
        summary: Return all reports in the organization paginated
        description: ''
        operationId: findReports
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fromId
            in: query
            description: Offset
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Limit
            required: false
            schema:
              type: integer
              format: int32
          - name: sort
            in: query
            description: Sort
            required: false
            schema:
              type: string
          - name: filter
            in: query
            description: Filter
            required: false
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportDataStreamResults'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - report
        summary: Create a report
        description: ''
        operationId: createReport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateReport'
          description: Report data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Report'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/report/count:
      get:
        tags:
          - report
        summary: Return count of reports in an organization
        description: ''
        operationId: getReportCount
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportCount'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}:
      get:
        tags:
          - report
        summary: Return a particular report by id
        description: ''
        operationId: getReport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Report'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - report
        summary: Delete a report
        description: ''
        operationId: deleteReport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - report
        summary: Update an existing report
        description: ''
        operationId: updateReport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: referencedReportUrl
            in: query
            description: Displayed report url
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateReport'
          description: Report data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/report/query:
      post:
        tags:
          - report
        summary: Return timeseries data from arbitrary queries
        description: ''
        operationId: getReportFromQuery
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportQuery'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ReportResult'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/query:
      get:
        tags:
          - report
        summary: Query all the charts in a report
        description: ''
        operationId: getAllReportResults
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: startDate
            in: query
            description: Start date, inclusive
            required: false
            schema:
              type: string
          - name: endDate
            in: query
            description: End date, exclusive
            required: false
            schema:
              type: string
          - name: interval
            in: query
            description: Interval
            required: false
            schema:
              type: string
              enum:
                - DAY
                - WEEK
                - MONTH
                - QUARTER
                - FISCAL_QUARTER
                - YEAR
                - FISCAL_YEAR
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: projectHires
            in: query
            description: Project future hires
            required: false
            schema:
              type: boolean
          - name: filter
            in: query
            description: Filter to apply to all results
            required: false
            schema:
              type: string
          - name: changeGroupingType
            in: query
            description: Type of change grouping
            required: false
            schema:
              type: string
              enum:
                - PRIMARY
                - SCENARIO
                - COMP_REVIEW
          - name: changeGroupingId
            in: query
            description: Change grouping id to query (null for primary)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/ReportResult'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/chart/{chartId}/export/csv:
      post:
        tags:
          - report
        summary: Export a particular chart in a report
        description: ''
        operationId: exportChartCsv
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
          - name: chartId
            in: path
            description: Chart id
            required: true
            schema:
              type: string
          - name: startDate
            in: query
            description: Start date, inclusive
            required: false
            schema:
              type: string
          - name: endDate
            in: query
            description: End date, exclusive
            required: false
            schema:
              type: string
          - name: interval
            in: query
            description: Interval
            required: false
            schema:
              type: string
              enum:
                - DAY
                - WEEK
                - MONTH
                - QUARTER
                - FISCAL_QUARTER
                - YEAR
                - FISCAL_YEAR
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: projectHires
            in: query
            description: Project future hires
            required: false
            schema:
              type: boolean
          - name: filter
            in: query
            description: Additional filter to apply
            required: false
            schema:
              type: string
          - name: changeGroupingType
            in: query
            description: Type of change grouping
            required: false
            schema:
              type: string
              enum:
                - PRIMARY
                - SCENARIO
                - COMP_REVIEW
          - name: changeGroupingId
            in: query
            description: Change grouping id to query (null for primary)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/report/{reportId}/clone:
      post:
        tags:
          - report
        summary: Create an exact copy of an existing report
        description: ''
        operationId: cloneReport
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: reportId
            in: path
            description: Report id
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Report'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/report/bulk-delete:
      post:
        tags:
          - report
        summary: Delete a set of reports
        description: ''
        operationId: bulkDelete_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of report ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/report/bulk-duplicate:
      post:
        tags:
          - report
        summary: Duplicate a set of reports
        description: ''
        operationId: bulkDuplicate_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of report ids to duplicate
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/role:
      get:
        tags:
          - role
        summary: Return all or a set of roles in the organization
        description: ''
        operationId: findRoles
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: ids
            in: query
            description: (Optional) Comma separated Role Ids to find
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: (Optional) Return only default or custom roles
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsRole'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - role
        summary: Create a role
        description: ''
        operationId: createRole
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRole'
          description: Role data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Role'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/role/{roleId}:
      get:
        tags:
          - role
        summary: Return a particular role by id
        description: ''
        operationId: getRole
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: roleId
            in: path
            description: Role id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Role'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - role
        summary: Delete a role
        description: ''
        operationId: deleteRole
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: roleId
            in: path
            description: Role id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      patch:
        tags:
          - role
        summary: Update an existing role
        description: ''
        operationId: updateRole
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: roleId
            in: path
            description: Role id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRole'
          description: Role data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/role/{roleId}/copy:
      post:
        tags:
          - role
        summary: Copy an existing role
        description: ''
        operationId: copyRole
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: roleId
            in: path
            description: Role id
            required: true
            schema:
              type: string
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Role'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /saml/{org}/login:
      post:
        tags:
          - saml
        summary: Return an redirect to the designated Idp, given an identity provider
        description: ''
        operationId: redirectToIdp
        parameters:
          - name: org
            in: path
            description: Org slug
            required: true
            schema:
              type: string
          - name: idp
            in: query
            description: Identifier Provider
            required: false
            schema:
              type: string
        responses:
          '400':
            description: invalid data
    /saml/sso/{org}:
      post:
        tags:
          - saml
        summary: Single sign on URL, where SAML assertion is perform
        description: ''
        operationId: sso
        parameters:
          - name: token
            in: cookie
            required: false
            schema:
              type: string
          - name: org
            in: path
            description: Org slug
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  SAMLResponse:
                    description: SAML Response
                    type: string
                  RelayState:
                    description: Relay State
                    type: string
        responses:
          '400':
            description: invalid data
    /saml/org/{orgId}/xml-cert:
      get:
        tags:
          - saml
        summary: Save per org Xml Cert from IDP
        description: ''
        operationId: getXmlCertificate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: idp
            in: query
            description: Identifier Provider
            required: false
            schema:
              type: string
        responses:
          '400':
            description: invalid data
      post:
        tags:
          - saml
        summary: Save per org Xml Cert from IDP
        description: ''
        operationId: uploadXmlCertificate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: idp
            in: query
            description: Identifier Provider
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '400':
            description: invalid data
    /v1/org/{orgId}/scenario/bulk/archive:
      post:
        tags:
          - scenario
        summary: Archive a set of scenarios
        description: ''
        operationId: bulkArchiveScenarios
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of scenario ids to archive
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/bulk/delete:
      post:
        tags:
          - scenario
        summary: Delete a set of scenarios
        description: ''
        operationId: bulkDeleteScenarios
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of scenario ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/bulk/unarchive:
      post:
        tags:
          - scenario
        summary: Unarchive a set of scenarios
        description: ''
        operationId: bulkUnarchiveScenarios
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of scenario ids to unarchive
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario:
      get:
        tags:
          - scenario
        summary: Return all scenarios in the organization paginated
        description: ''
        operationId: findScenarios
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Scenario id to start paginating from
            required: false
            schema:
              type: string
          - name: status
            in: query
            description: Scenario status to filter by
            required: false
            schema:
              type: string
              enum:
                - OPEN
                - INACTIVE
                - MERGED
                - DRAFT
                - ARCHIVED
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsScenario'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - scenario
        summary: Create a scenario
        description: ''
        operationId: createScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: silent
            in: query
            description: Suppress notification emails
            required: false
            schema:
              type: boolean
          - name: skipChangeCreation
            in: query
            description: Skip over change creation for PROMOTION scenarios
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateScenario'
          description: Scenario data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Scenario'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/scenario/{scenarioId}:
      get:
        tags:
          - scenario
        summary: Return a particular scenario by id
        description: ''
        operationId: getScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Scenario'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - scenario
        summary: Delete a scenario
        description: ''
        operationId: deleteScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - scenario
        summary: Update an existing scenario
        description: ''
        operationId: updateScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
          - name: silent
            in: query
            description: Suppress notification emails
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateScenario'
          description: Scenario data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/dates:
      post:
        tags:
          - scenario
        summary: Adjust the dates of the changes in a scenario
        description: ''
        operationId: adjustDatesScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustScenarioDateRequest'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/merge:
      post:
        tags:
          - scenario
        summary: Merge a scenario into the primary timeline
        description: ''
        operationId: mergeScenario
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id to merge
            required: true
            schema:
              type: string
          - name: skipErrors
            in: query
            description: If passed, will skip any changes that fail validation
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/combine:
      post:
        tags:
          - scenario
        summary: Combine multiple scenarios into another scenario
        description: ''
        operationId: combineScenarios
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id to combine the other scenarios into
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombineScenarioRequest'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/recalculate-metadata:
      post:
        tags:
          - scenario
        summary: Manually recalculate a scenario's metadata
        description: ''
        operationId: recalculateScenarioMetadata
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ScenarioMetadata'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/scenario/{scenarioId}/update-shared-view:
      post:
        tags:
          - scenario
        summary: Update a scenario view config
        description: ''
        operationId: updateScenarioSharedView
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: path
            description: Scenario id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioSharedViewConfig'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/search:
      get:
        tags:
          - search
        summary: >-
          Return people, job, group, and field data for a particular org that
          match a provided search string
        description: ''
        operationId: searchOrgData
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: Query search term
            required: false
            schema:
              type: string
          - name: entityTypes
            in: query
            description: Entity types
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Limit
            required: false
            schema:
              type: integer
              format: int32
          - name: includeFormer
            in: query
            description: Include former users or persons
            required: false
            schema:
              type: boolean
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario Id
            required: false
            schema:
              type: string
          - name: canAccess
            in: query
            description: entity action pairs that can be accessed
            required: false
            schema:
              type: string
          - name: includeExternalRecruiter
            in: query
            description: Include External Recruiter
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SearchResultResponse'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/status:
      get:
        tags:
          - status
        summary: Returns true if the API is up and available
        description: ''
        operationId: isOk
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OkResponse'
    /v1/stock:
      get:
        tags:
          - stock
        summary: Return the history of stock prices
        description: ''
        operationId: findStockPrices
        parameters:
          - name: symbol
            in: query
            description: Symbol to query
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Types of valuations to retrieve
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Date to start from
            required: false
            schema:
              type: string
              format: date
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsStockPrice'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/stock/{symbol}/{date}/{type}:
      get:
        tags:
          - stock
        summary: Get a stock price as of a particular date
        description: ''
        operationId: getStockPrice
        parameters:
          - name: symbol
            in: path
            description: Stock symbol
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to update information for
            required: true
            schema:
              type: string
              format: date
          - name: type
            in: path
            description: Type of stock price to retrieve (for example 'public')
            required: true
            schema:
              type: string
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StockPrice'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
      put:
        tags:
          - stock
        summary: Upsert a stock price
        description: ''
        operationId: upsertStock
        parameters:
          - name: symbol
            in: path
            description: Stock symbol
            required: true
            schema:
              type: string
          - name: date
            in: path
            description: Date to update information for
            required: true
            schema:
              type: string
              format: date
          - name: type
            in: path
            description: Type of stock price to upsert
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStockPrice'
          description: Stock price data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StockPrice'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/stock/{id}:
      delete:
        tags:
          - stock
        summary: Delete a stock price
        description: ''
        operationId: deleteStockPrice
        parameters:
          - name: id
            in: path
            description: Stock entry id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/stripe/product:
      get:
        tags:
          - stripe
        summary: Return all products directly from Stripe (staff only)
        description: ''
        operationId: findStripeProducts
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsStripeProduct'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/stripe/plan:
      get:
        tags:
          - stripe
        summary: Return all billing plans directly from Stripe (staff only)
        description: ''
        operationId: findStripePlans
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsPlan'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/stripe/webhook:
      post:
        tags:
          - stripe
        summary: Process webhook events from Stripe
        description: ''
        operationId: processStripeWebhook
        parameters:
          - name: Stripe-Signature
            in: header
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: string
        responses:
          '400':
            description: bad request
    /v1/stripe/setup-intent:
      post:
        tags:
          - stripe
        summary: >-
          Creates a Stripe setupIntent object and returns the secret for that
          object
        description: ''
        operationId: getSetupIntent
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SetupIntent'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/stripe/product/{productId}:
      get:
        tags:
          - stripe
        summary: Return a particular product by its Stripe id
        description: ''
        operationId: getStripeProduct
        parameters:
          - name: productId
            in: query
            description: Stripe product id
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StripeProduct'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/org/{orgId}/table/{tableId}:
      get:
        tags:
          - table
        summary: Return a particular table by id or name
        description: ''
        operationId: getTable
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Table'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - table
        summary: Delete a table
        description: ''
        operationId: deleteTable
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or name
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - table
        summary: Update an existing table
        description: ''
        operationId: updateTable
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or name
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTable'
          description: Table data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/table/{tableId}/import:
      post:
        tags:
          - table
        summary: Import data from CSV file
        description: ''
        operationId: importCsv
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to update as of
            required: false
            schema:
              type: string
              format: date
          - name: importFromProcessId
            in: query
            description: Import a file from another process, instead of directly uploading it
            required: false
            schema:
              type: string
          - name: parentProcessId
            in: query
            description: Parent process id to attach to
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/table:
      get:
        tags:
          - table
        summary: Return all tables in the organization paginated
        description: ''
        operationId: findTables
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: Table id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: includeBuiltIns
            in: query
            description: Whether to include built-in tables
            required: false
            schema:
              type: boolean
          - name: names
            in: query
            description: Table names to filter to
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsTable'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - table
        summary: Create a table
        description: ''
        operationId: createTable
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTable'
          description: Table data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Table'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/table/{tableId}/data:
      get:
        tags:
          - table
        summary: Retrieve all rows from the table
        description: ''
        operationId: getAllRows
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to retrieve
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to retrieve from
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Filter to query by
            required: false
            schema:
              type: string
          - name: columns
            in: query
            description: Columns to retrieve, comma-separated (defaults to all columns)
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended,
              json-readable, or csv
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - table
        summary: Upsert row data
        description: ''
        operationId: upsertRow
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to update as of
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to update
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}:
      get:
        tags:
          - table
        summary: Retrieve a particular row
        description: ''
        operationId: getRow
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to retrieve
            required: true
            schema:
              type: string
          - name: keyColumn
            in: path
            description: 'Column name to look up the row by (for example: id)'
            required: true
            schema:
              type: string
          - name: keyValue
            in: path
            description: Value of the column
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to retrieve from
            required: false
            schema:
              type: string
          - name: columns
            in: query
            description: Columns to retrieve, comma-separated (defaults to all columns)
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended,
              json-readable, or csv
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - table
        summary: Delete an existing row
        description: ''
        operationId: deleteRow
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
          - name: keyColumn
            in: path
            description: 'Column name to look up the row by (for example: id)'
            required: true
            schema:
              type: string
          - name: keyValue
            in: path
            description: Value of the key column
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to delete as of
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to delete from
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - table
        summary: Update an existing row
        description: ''
        operationId: updateRow
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
          - name: keyColumn
            in: path
            description: 'Column name to look up the row by (for example: id)'
            required: true
            schema:
              type: string
          - name: keyValue
            in: path
            description: Value of the key column
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to update as of
            required: false
            schema:
              type: string
              format: date
          - name: scenarioId
            in: query
            description: Scenario id to update
            required: false
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}/purge:
      delete:
        tags:
          - table
        summary: Delete an existing row, purging from history entirely
        description: ''
        operationId: purgeRowFromHistory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
          - name: keyColumn
            in: path
            description: 'Column name to look up the row by (for example: id)'
            required: true
            schema:
              type: string
          - name: keyValue
            in: path
            description: Value of the key column
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to look up as of
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/table/{tableId}/export:
      post:
        tags:
          - table
        summary: Export table data to CSV file
        description: ''
        operationId: exportCsv
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: tableId
            in: path
            description: Table id or unique name to update
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/exportPdfReviewsBody'
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/org/{orgId}/task-config:
      get:
        tags:
          - task-config
        summary: Get all task configs for an org
        description: ''
        operationId: findTaskConfigs
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: from
            in: query
            description: TaskConfig id to start paginating from
            required: false
            schema:
              type: string
          - name: parentEntityId
            in: query
            description: ParentEntityId to query for
            required: false
            schema:
              type: string
          - name: assessmentId
            in: query
            description: AssessmentId to query for
            required: false
            schema:
              type: string
          - name: entityId
            in: query
            description: EntityId to query for
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - task-config
        summary: Create a new task config
        description: ''
        operationId: createTaskConfig
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskConfig'
          description: Task config to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TaskConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/task-config/{id}:
      get:
        tags:
          - task-config
        summary: Get a specific task config
        description: ''
        operationId: getTaskConfig
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: id
            in: path
            description: ID of the desired task config
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TaskConfig'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/task/{taskId}/mark-done:
      patch:
        tags:
          - task
        summary: Mark task done
        description: ''
        operationId: markTaskDone
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: taskId
            in: path
            description: Task id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/{taskId}/skip:
      patch:
        tags:
          - task
        summary: Skip task
        description: ''
        operationId: skipTask
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: taskId
            in: path
            description: Task id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/task:
      get:
        tags:
          - task
        summary: Return all existing tasks
        description: ''
        operationId: findTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: userId
            in: query
            description: Task User id
            required: false
            schema:
              type: string
          - name: assessmentId
            in: query
            description: Assessment id
            required: false
            schema:
              type: string
          - name: status
            in: query
            description: Task.Status. (PENDING/DONE)
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Task.Type of task (form)
            required: false
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity Id
            required: false
            schema:
              type: string
          - name: targetId
            in: query
            description: Target Id
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsTask'
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/task:
      get:
        tags:
          - task
        summary: Query tasks for assessments in the organization
        description: ''
        operationId: queryTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: userId
            in: query
            description: Task User id
            required: false
            schema:
              type: string
          - name: assessmentId
            in: query
            description: Assessment id
            required: false
            schema:
              type: string
          - name: status
            in: query
            description: Task.Status. (PENDING/DONE)
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Task.Type. (FORM_SUBMIT/CHANGE_APPROVE)
            required: false
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity Id
            required: false
            schema:
              type: string
          - name: targetId
            in: query
            description: Target Id
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Job id to start paginating from
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
          - name: returnFormCompletionLinks
            in: query
            description: >-
              Return links that employees would use to complete a task if true
              else return links that direct to the form settings
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v1/org/{orgId}/task/me:
      get:
        tags:
          - task
        summary: Return the tasks for the current user
        description: ''
        operationId: getMyTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: query
            description: Assessment id
            required: false
            schema:
              type: string
          - name: status
            in: query
            description: Task.Status. (PENDING/ACTIVE)
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Task.Type of task (form)
            required: false
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity Id
            required: false
            schema:
              type: string
          - name: targetId
            in: query
            description: Target Id
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsTask'
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/remind:
      post:
        tags:
          - task
        summary: Send a reminder notification for a particular task
        description: ''
        operationId: remindTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskRemindRequest'
          description: Request body
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/{taskId}:
      delete:
        tags:
          - task
        summary: Delete task
        description: ''
        operationId: deleteTask
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: taskId
            in: path
            description: Task id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/bulk-delete:
      delete:
        tags:
          - task
        summary: Bulk delete tasks
        description: ''
        operationId: bulkDeleteTasks
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of task ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/{assessmentId}/{formId}:
      delete:
        tags:
          - task
        summary: Delete task
        description: ''
        operationId: removeFormFromAssessment
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
          - name: formId
            in: path
            description: Form id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/task/summary/{assessmentId}:
      get:
        tags:
          - task
        summary: Return the tasks for a given assessment
        description: ''
        operationId: findTasksSummary
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: assessmentId
            in: path
            description: Assessment id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/org/{orgId}/template/bulk/delete:
      post:
        tags:
          - template
        summary: Delete a set of templates
        description: ''
        operationId: bulkDeleteTemplates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of template ids to delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/bulk/duplicate:
      post:
        tags:
          - template
        summary: Duplicate a set of templates
        description: ''
        operationId: bulkDuplicateTemplates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: List of template ids to duplicate
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/{templateId}:
      get:
        tags:
          - template
        summary: Return a particular template by id
        description: ''
        operationId: getTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: templateId
            in: path
            description: Template id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Template'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - template
        summary: Delete a template
        description: ''
        operationId: deleteTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: templateId
            in: path
            description: Template id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - template
        summary: Update an existing template
        description: ''
        operationId: updateTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: templateId
            in: path
            description: Template id
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateTemplate'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template:
      get:
        tags:
          - template
        summary: Return all templates in the organization paginated
        description: ''
        operationId: findTemplates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: query
            description: Type of template to filter by
            required: false
            schema:
              type: string
              enum:
                - DOCUMENT
                - EMAIL
          - name: from
            in: query
            description: Template id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsTemplate'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - template
        summary: Create a template
        description: ''
        operationId: createTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/CreateTemplate'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Template'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/template/{templateId}/render:
      post:
        tags:
          - template
        summary: Render a template by evaluating it against an existing job
        description: ''
        operationId: renderTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: templateId
            in: path
            description: Template id
            required: true
            schema:
              type: string
          - name: jobId
            in: query
            description: Job id
            required: false
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: format
            in: query
            description: Format
            required: false
            schema:
              type: string
              enum:
                - TEXT
                - PDF
              default: TEXT
          - name: changeGroupingType
            in: query
            description: Type of change grouping
            required: false
            schema:
              type: string
              enum:
                - PRIMARY
                - SCENARIO
                - COMP_REVIEW
          - name: changeGroupingId
            in: query
            description: Change grouping id to query (null for primary)
            required: false
            schema:
              type: string
          - name: useScenarioChanges
            in: query
            description: >-
              Generate documents for only the changes that are in the scenario.
              This option also allows you to reference the change within the
              template, which is otherwise not allowed
            required: false
            schema:
              type: boolean
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TemplateRenderResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/{templateId}/preview:
      post:
        tags:
          - template
        summary: Preview template content without saving it
        description: ''
        operationId: previewTemplate
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: query
            description: Job id
            required: false
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: format
            in: query
            description: Format
            required: false
            schema:
              type: string
              enum:
                - TEXT
                - PDF
              default: TEXT
          - name: changeGroupingType
            in: query
            description: Type of change grouping
            required: false
            schema:
              type: string
              enum:
                - PRIMARY
                - SCENARIO
                - COMP_REVIEW
          - name: changeGroupingId
            in: query
            description: Change grouping id to query (null for primary)
            required: false
            schema:
              type: string
          - name: useScenarioChanges
            in: query
            description: >-
              Generate documents for only the changes that are in the scenario.
              This option also allows you to reference the change within the
              template, which is otherwise not allowed
            required: false
            schema:
              type: boolean
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatePreviewRequest'
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TemplateRenderResponse'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/{templateId}/generate:
      post:
        tags:
          - template
        summary: >-
          Automatically generate PDFs of the templates, and distribute emails to
          managers and people to download
        description: ''
        operationId: generateTemplates
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: templateId
            in: path
            description: Template id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTemplateRequest'
        responses:
          '204':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/email/{templateName}:
      get:
        tags:
          - template
        summary: Return a particular email template by name
        description: ''
        operationId: getEmailTemplate
        parameters:
          - name: templateName
            in: path
            description: Template name
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Template'
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - template
        summary: Delete a template
        description: ''
        operationId: deleteEmailTemplate
        parameters:
          - name: templateName
            in: path
            description: Template name
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
      patch:
        tags:
          - template
        summary: Update an existing template
        description: ''
        operationId: updateEmailTemplate_1
        parameters:
          - name: templateName
            in: path
            description: Template name
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/UpdateTemplate'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/org/{orgId}/template/email:
      post:
        tags:
          - template
        summary: Create a template
        description: ''
        operationId: createEmailTemplate_1
        requestBody:
          $ref: '#/components/requestBodies/CreateTemplate'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Template'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: org not found
    /v1/org/{orgId}/timeoff/request/validate:
      post:
        tags:
          - timeoff
        summary: Validate a time off request
        description: ''
        operationId: validateRequest
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/TimeOffRequest'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeOff'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/timeoff:
      get:
        tags:
          - timeoff
        summary: Retrieve time off
        description: ''
        operationId: findTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: query
            description: Person id to filter by
            required: false
            schema:
              type: string
          - name: fromDate
            in: query
            description: From date, inclusive
            required: false
            schema:
              type: string
              format: date
          - name: untilDate
            in: query
            description: Until date, exclusive
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Time off id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsTimeOffEntity'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      post:
        tags:
          - timeoff
        summary: Create a timeOff
        description: ''
        operationId: createTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTimeOffEntity'
          description: TimeOff data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeOff'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/timeoff/{timeOffId}:
      get:
        tags:
          - timeoff
        summary: Return a particular timeOff by id
        description: ''
        operationId: getTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: timeOffId
            in: path
            description: TimeOff id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeOffEntity'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      delete:
        tags:
          - timeoff
        summary: Delete a timeOff
        description: ''
        operationId: deleteTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: timeOffId
            in: path
            description: TimeOff id
            required: true
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
      patch:
        tags:
          - timeoff
        summary: Update an existing timeOff
        description: ''
        operationId: updateTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: timeOffId
            in: path
            description: TimeOff id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTimeOffEntity'
          description: TimeOff data to update
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/timeoff/request:
      post:
        tags:
          - timeoff
        summary: Request time off
        description: ''
        operationId: requestTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          $ref: '#/components/requestBodies/TimeOffRequest'
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeOff'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/timeoff/{timeOffId}/approve:
      post:
        tags:
          - timeoff
        summary: Approve a pending time off request
        description: ''
        operationId: approveTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: timeOffId
            in: path
            description: TimeOff id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeOffApproval'
          description: Approval information
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/timeoff/{timeOffId}/reject:
      post:
        tags:
          - timeoff
        summary: Reject a pending time off request
        description: ''
        operationId: rejectTimeOff
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: timeOffId
            in: path
            description: TimeOff id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeOffApproval'
          description: Rejection information
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '500':
            description: Not Implemented
    /v1/org/{orgId}/usage/{type}:
      post:
        tags:
          - usage
        summary: Record usage of a product feature
        description: ''
        operationId: recordUsage
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Type of usage
            required: true
            schema:
              type: string
          - name: entityId
            in: query
            description: Entity id, if applicable
            required: false
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
    /v1/user/{userId}:
      get:
        tags:
          - user
        summary: Return a particular user by id
        description: ''
        operationId: getUser
        parameters:
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: bad request
          '404':
            description: not found
      patch:
        tags:
          - user
        summary: Update an existing user
        description: ''
        operationId: updateUser
        parameters:
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: User data to update
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/user/{userId}/token:
      delete:
        tags:
          - user
        summary: Revoke a user's access token
        description: ''
        operationId: revokeUserToken
        parameters:
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        responses:
          '401':
            description: unauthorized
          '404':
            description: not found
    /v1/user/token:
      delete:
        tags:
          - user
        summary: Revoke multiple user's access tokens
        description: ''
        operationId: revokeUsersTokens
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: User ids
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/user/assign:
      patch:
        tags:
          - user
        summary: Assign or remove multiple users a role within an org
        description: ''
        operationId: assignUsers
        requestBody:
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/UpdateUser'
          description: User data
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/user/me:
      get:
        tags:
          - user
        summary: Return the currently logged in user
        description: ''
        operationId: getMe
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: unauthorized
    /v1/user/me/view:
      get:
        tags:
          - user
        summary: Return the user the user is currently viewing as
        description: ''
        operationId: getMeView
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: unauthorized
    /v1/user/email/{email}:
      get:
        tags:
          - user
        summary: Return a particular user by email
        description: ''
        operationId: getUserByEmail
        parameters:
          - name: email
            in: path
            description: Email
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/user/person/{personId}:
      get:
        tags:
          - user
        summary: Return a particular user by its corresponding person id
        description: ''
        operationId: getUserByPersonId
        parameters:
          - name: personId
            in: path
            description: Person id to fetch user for
            required: true
            schema:
              type: string
          - name: orgId
            in: query
            description: Org id to search within
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: bad request
          '404':
            description: not found
    /v1/user:
      get:
        tags:
          - user
        summary: Return all users within an org or across orgs
        description: ''
        operationId: findUsers
        parameters:
          - name: orgId
            in: query
            description: Org id to search within
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: User id to start from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: sort
            in: query
            description: Sort by
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsUser'
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - user
        summary: Create a new user
        description: ''
        operationId: createUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
          description: User data to create
        responses:
          '201':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/user/invite:
      post:
        tags:
          - user
        summary: Create/invite multiple new users
        description: ''
        operationId: createUsers
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateUser'
          description: User data to create
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/user/{userId}/password:
      post:
        tags:
          - user
        summary: Change a user's password, or switch a user to SSO
        description: ''
        operationId: changePassword
        parameters:
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordRequest'
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/user/sendreset:
      post:
        tags:
          - user
        summary: Send a password reset email
        description: ''
        operationId: sendResetEmail
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailRequest'
          description: User email address
        responses:
          '400':
            description: email not found
    /v1/webauthn/register:
      get:
        tags:
          - webauthn
        summary: Check for an existing physical key for this user
        description: ''
        operationId: startRegisterWebAuthn
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
      post:
        tags:
          - webauthn
        summary: Check for an existing WebAuthn key for this user
        description: ''
        operationId: completeRegisterWebAuthn
        requestBody:
          $ref: '#/components/requestBodies/WebAuthnRequest'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v1/webauthn/register/{emailBase64}:
      delete:
        tags:
          - webauthn
        summary: Delete registered credentials by the given email
        description: ''
        operationId: deleteRegisteredCredentials
        parameters:
          - name: emailBase64
            in: path
            description: Email
            required: true
            schema:
              type: string
        responses:
          '400':
            description: invalid data
          '401':
            description: not authorized
          '403':
            description: permission denied
          '404':
            description: not found
    /v1/webauthn/verify:
      get:
        tags:
          - webauthn
        summary: Check for an existing physical key for this user
        description: ''
        operationId: startVerifyWebAuthn
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
      post:
        tags:
          - webauthn
        summary: Check for an existing physical key for this user
        description: ''
        operationId: completeVerifyWebAuthn
        requestBody:
          $ref: '#/components/requestBodies/WebAuthnRequest'
        responses:
          '400':
            description: bad request
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v2/org/{orgId}/change/{changeId}:
      get:
        tags:
          - change
        summary: Return a particular change by id
        description: ''
        operationId: getChange_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: changeId
            in: path
            description: Change id
            required: true
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '400':
            description: bad request
          '404':
            description: not found
    /v2/org/{orgId}/change:
      get:
        tags:
          - change
        summary: Return recent changes across an org, or for a particular person or job
        description: ''
        operationId: findChanges_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: query
            description: Job id to filter by
            required: false
            schema:
              type: string
          - name: personId
            in: query
            description: Person id to filter by
            required: false
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id
            required: false
            schema:
              type: string
          - name: type
            in: query
            description: Types of change to filter by, comma-separated
            required: false
            schema:
              type: string
          - name: status
            in: query
            description: Statuses to filter by, comma-separated
            required: false
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: fieldsChanged
            in: query
            description: Changed fields to filter by, comma-separated
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Query to filter against
            required: false
            schema:
              type: string
          - name: open
            in: query
            description: Whether the role is open or not
            required: false
            schema:
              type: string
              enum:
                - FILLED
                - OPEN
          - name: includeGrantSchedule
            in: query
            description: Whether to include full grant schedule when returning equity updates
            required: false
            schema:
              type: boolean
          - name: fromDate
            in: query
            description: Date to start from
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Change id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: desc
            in: query
            description: Descending (default false)
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/group/{type}:
      get:
        tags:
          - group
        summary: Find groups in the organization of a certain type
        description: ''
        operationId: findGroups
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Group id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: jobFields
            in: query
            description: job fields to return, comma-separated
            required: false
            schema:
              type: string
          - name: positionFields
            in: query
            description: position fields to return, comma-separated
            required: false
            schema:
              type: string
          - name: includeAll
            in: query
            description: Include all groups, including deleted groups
            required: false
            schema:
              type: boolean
          - name: search
            in: query
            description: Search string to filter on code & name
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - group
        summary: Create a group
        description: ''
        operationId: createGroup
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to create the group in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
    /v2/org/{orgId}/group/{type}/{groupId}:
      get:
        tags:
          - group
        summary: Return a particular group by id
        description: ''
        operationId: getGroup
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: groupId
            in: path
            description: Group identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: jobFields
            in: query
            description: job fields to return, comma-separated
            required: false
            schema:
              type: string
          - name: positionFields
            in: query
            description: position fields to return, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: object
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - group
        summary: Delete a group
        description: ''
        operationId: deleteGroup
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: groupId
            in: path
            description: Group id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the group in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to update as of
            required: false
            schema:
              type: string
              format: date
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
      patch:
        tags:
          - group
        summary: Update a group
        description: ''
        operationId: updateGroup
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: groupId
            in: path
            description: Group id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the group in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of group update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
    /v2/org/{orgId}/group/graph:
      get:
        tags:
          - group
        summary: Find groups in the organization of a certain type
        description: ''
        operationId: findGroupGraph
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: start
            in: query
            description: group id to use as the starting point
            required: false
            schema:
              type: string
          - name: depth
            in: query
            description: number of levels down
            required: false
            schema:
              type: integer
              format: int32
          - name: groupApproxLimit
            in: query
            description: limit number of groups
            required: false
            schema:
              type: integer
              format: int32
          - name: jobLimit
            in: query
            description: limit number of jobs
            required: false
            schema:
              type: integer
              format: int32
          - name: scenarioId
            in: query
            description: scenario id to query
            required: false
            schema:
              type: string
          - name: jobFilter
            in: query
            description: query string to filter jobs by
            required: false
            schema:
              type: string
          - name: groupFilter
            in: query
            description: query string to filter group by
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: groupFields
            in: query
            description: group fields to return
            required: false
            schema:
              type: string
          - name: jobFields
            in: query
            description: job/person fields to return
            required: false
            schema:
              type: string
          - name: positionFields
            in: query
            description: position fields to return
            required: false
            schema:
              type: string
          - name: kind
            in: query
            description: kind of group to query (legacy/tracked)
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupGraphResults'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
    /v2/org/{orgId}/group/orphaned:
      get:
        tags:
          - group
        summary: Find groups in the organization that have no child groups
        description: ''
        operationId: findOrphanedGroups
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: start
            in: query
            description: group id to use as the starting point
            required: false
            schema:
              type: string
          - name: groupLimit
            in: query
            description: limit number of groups
            required: false
            schema:
              type: integer
              format: int32
          - name: jobLimit
            in: query
            description: limit number of jobs
            required: false
            schema:
              type: integer
              format: int32
          - name: scenarioId
            in: query
            description: scenario id to query
            required: false
            schema:
              type: string
          - name: jobFilter
            in: query
            description: query string to filter jobs by
            required: false
            schema:
              type: string
          - name: groupFilter
            in: query
            description: query string to filter group by
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: groupFields
            in: query
            description: group fields to return
            required: false
            schema:
              type: string
          - name: jobFields
            in: query
            description: job/person fields to return
            required: false
            schema:
              type: string
          - name: positionFields
            in: query
            description: position fields to return
            required: false
            schema:
              type: string
          - name: kind
            in: query
            description: kind of group to query (legacy/tracked)
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupGraphResults'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
    /v2/org/{orgId}/group/count:
      get:
        tags:
          - group
        summary: Get organized group counts
        description: ''
        operationId: countGroups
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: scenario id to query
            required: false
            schema:
              type: string
          - name: groupFilter
            in: query
            description: query string to filter group by
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: kind
            in: query
            description: kind of group to query (legacy/tracked)
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupCount'
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
          '501':
            description: not implemented
    /v2/org/{orgId}/group/{type}/bulk-delete:
      post:
        tags:
          - group
        summary: Mark multiple groups as deleted
        description: ''
        operationId: deleteGroups
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the group in
            required: false
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 588f7ee98f138b19220041a7
          description: Group ids of groups to bulk delete
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/group/{type}/import:
      post:
        tags:
          - group
        summary: Import data from CSV file
        description: ''
        operationId: importCsv_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: type
            in: path
            description: Group type
            required: true
            schema:
              type: string
          - name: date
            in: query
            description: Date to update as of
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/uploadFile'
        responses:
          '202':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: invalid manifest data
          '401':
            description: not authorized
          '403':
            description: permission denied
    /v2/org/{orgId}/job/count:
      get:
        tags:
          - job
        summary: Count jobs or people in the organization
        description: ''
        operationId: countJobs
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OrgCount'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/job/{jobId}:
      get:
        tags:
          - job
        summary: Return a particular job by id
        description: ''
        operationId: getJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - job
        summary: Delete a job
        description: ''
        operationId: deleteJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of job update
            required: false
            schema:
              type: string
              format: date
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - job
        summary: Update a job
        description: ''
        operationId: updateJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of job update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/job/bulkupdate:
      post:
        tags:
          - job
        summary: Perform a bulk update on a number of jobs
        description: ''
        operationId: bulkUpdate_1
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkJobUpdateRequest'
          description: Bulk update data
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '400':
            description: bad request
          '404':
            description: not found
    /v2/org/{orgId}/job:
      get:
        tags:
          - job
        summary: Find jobs in the organization
        description: ''
        operationId: findJobs
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: compReviewId
            in: query
            description: Comp review id to query
            required: false
            schema:
              type: string
          - name: approvalChainId
            in: query
            description: >-
              Approval chain id to query; only relevant when there is a comp
              review id
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Job id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: fieldsList
            in: query
            description: Fields to retrieve, list syntax
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: useScenarioChanges
            in: query
            description: >-
              Find jobs only based on the changes that are in the scenario. This
              option also allows you to reference the change within the filter,
              which is otherwise not allowed
            required: false
            schema:
              type: boolean
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - job
        summary: Create a job
        description: ''
        operationId: createJob
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to create the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of job creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/job/graph:
      get:
        tags:
          - job
        summary: Retrieve jobs from a region of the job graph
        description: ''
        operationId: findJobsGraph
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: start
            in: query
            description: Job id to use as the starting point for the search
            required: false
            schema:
              type: string
          - name: depth
            in: query
            description: Number of levels down to search
            required: false
            schema:
              type: integer
              format: int32
          - name: approxLimit
            in: query
            description: Number of results to return, approximately
            required: false
            schema:
              type: integer
              format: int32
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: q
            in: query
            description: Query string to filter by
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/job/graph-counts:
      get:
        tags:
          - job
        summary: >-
          Returns a map of jobId to their sibling and direct counts and the
          corresponding ids
        description: ''
        operationId: getSiblingsAndDirectsMap
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: q
            in: query
            description: Query string to filter by
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GraphCountsResponse'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/job/{jobId}/position:
      get:
        tags:
          - job
        summary: Get a list of positions occupied by a job on specific date
        description: ''
        operationId: findJobPositions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of un-assignment
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Position id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: positionFields
            in: query
            description: Position fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/person/{personId}:
      get:
        tags:
          - person
        summary: Return a particular person by id
        description: ''
        operationId: getPerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - person
        summary: Delete a person
        description: ''
        operationId: deletePerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - person
        summary: Update a person
        description: ''
        operationId: updatePerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: personId
            in: path
            description: Person id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the person in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of person update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/person:
      get:
        tags:
          - person
        summary: Find persons in the organization
        description: ''
        operationId: findPersons
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date to search as of
            required: false
            schema:
              type: string
              format: date
          - name: startDate
            in: query
            description: >-
              Start date, if retrieving persons employed between two dates
              (inclusive)
            required: false
            schema:
              type: string
              format: date
          - name: endDate
            in: query
            description: >-
              End date, if retrieving persons employed between two dates
              (inclusive)
            required: false
            schema:
              type: string
              format: date
          - name: q
            in: query
            description: Search query
            required: false
            schema:
              type: string
          - name: from
            in: query
            description: Person id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: fieldsList
            in: query
            description: Fields to retrieve, list syntax
            required: false
            explode: true
            schema:
              type: array
              items:
                type: string
          - name: includeAll
            in: query
            description: >-
              Include all persons in the system, including ex-employees or persons
              who were never in jobs
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
          - name: returnAccess
            in: query
            description: >-
              Return access information -- pass a list of actions to check, for
              example: create,update,delete
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResultsData'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      post:
        tags:
          - person
        summary: Create a person
        description: ''
        operationId: createPerson
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to create the person in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of person creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/person/geocodes:
      get:
        tags:
          - person
        summary: Return all geocodes for persons in the organization
        description: ''
        operationId: findGeocodesForPersonsInOrg
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Geocode'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/position/{positionId}:
      get:
        tags:
          - position
        summary: Return a particular position by id
        description: ''
        operationId: getPosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position identifier
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: includeDeleted
            in: query
            description: Include deleted positions in the result
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: object
          '400':
            description: bad request
          '404':
            description: not found
      delete:
        tags:
          - position
        summary: Delete a position
        description: ''
        operationId: deletePosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to delete the position in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of position deletion
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - position
        summary: Update a position
        description: ''
        operationId: updatePosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to update the position in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of position update
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/position:
      get:
        tags:
          - position
        summary: Return a list of positions
        description: ''
        operationId: findPositions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: groupId
            in: query
            description: Group id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: from
            in: query
            description: Position id to start paginating from
            required: false
            schema:
              type: string
          - name: limit
            in: query
            description: Number of results to return
            required: false
            schema:
              type: integer
              format: int32
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: includeDeleted
            in: query
            description: Include deleted positions in the result
            required: false
            schema:
              type: boolean
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: object
          '400':
            description: bad request
          '404':
            description: not found
      post:
        tags:
          - position
        summary: Create a position
        description: ''
        operationId: createPosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to create the position in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of position creation
            required: false
            schema:
              type: string
              format: date
        requestBody:
          $ref: '#/components/requestBodies/runInstalledAppBody'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/position/{positionId}/history:
      get:
        tags:
          - position
        summary: Return the history of a particular position by id
        description: ''
        operationId: getPositionHistory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position identifier
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to query
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Date
            required: false
            schema:
              type: string
              format: date
          - name: fields
            in: query
            description: Fields to retrieve, comma-separated
            required: false
            schema:
              type: string
          - name: format
            in: query
            description: >-
              Data format to use; default is json, can also use json-extended or
              json-readable
            required: false
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: object
          '400':
            description: bad request
          '404':
            description: not found
    /v2/org/{orgId}/position/{positionId}/purge:
      delete:
        tags:
          - position
        summary: Delete a position and purge it from all history
        description: ''
        operationId: purgePositionFromHistory
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/position/{positionId}/job/{jobId}:
      post:
        tags:
          - position
        summary: Assign a job to a position
        description: ''
        operationId: assignJobToPosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to assign the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of assignment
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      delete:
        tags:
          - position
        summary: Remove a job from a position
        description: ''
        operationId: removeJobFromPosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to remove the job in
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: Effective date of removal
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
      patch:
        tags:
          - position
        summary: Update assign or remove date of a job for a position
        description: ''
        operationId: updateJobDatesOnPosition
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: positionId
            in: path
            description: Position id
            required: true
            schema:
              type: string
          - name: jobId
            in: path
            description: Job id
            required: true
            schema:
              type: string
          - name: scenarioId
            in: query
            description: Scenario id to remove the job in
            required: false
            schema:
              type: string
          - name: removeDate
            in: query
            description: Effective date of removal
            required: false
            schema:
              type: string
              format: date
          - name: assigndate
            in: query
            description: Effective date of assignment
            required: false
            schema:
              type: string
              format: date
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: object
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
    /v2/org/{orgId}/position/import:
      post:
        tags:
          - position
        summary: Import positions as a CSV
        description: ''
        operationId: importPositions
        parameters:
          - name: orgId
            in: path
            description: Org identifier (either id or slug)
            required: true
            schema:
              type: string
          - name: importFromProcessId
            in: query
            description: Import a file from another process, instead of directly uploading it
            required: false
            schema:
              type: string
          - name: parentProcessId
            in: query
            description: Parent process id to attach to
            required: false
            schema:
              type: string
          - name: date
            in: query
            description: >-
              Effective date to import positions as of, if date column not
              provided
            required: false
            schema:
              type: string
              format: date
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Process'
          '202':
            description: snapshot currently building
          '400':
            description: bad request
          '401':
            description: not authorized
          '404':
            description: not found
  components:
    requestBodies:
      submitFormDraftBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: Form data to submit
      CreateTemplate:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplate'
        description: Template data to create
      FormResponseApproval:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormResponseApproval'
        description: Approval details
      CreateProcess:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProcess'
        description: Process data to create
      FormSubmitRequest:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormSubmitRequest'
        description: Form data to submit
      exportChangesBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: Export options
      CreateChange:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChange'
        description: Change data
      FormCollectRequest:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormCollectRequest'
        description: Details on the data collection
      CreateUser:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        description: App user data to create
      runInstalledAppBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
      UpdateCategorySort:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategorySort'
        description: Category Ids in sort order
      exportOrgToPowerpointBody:
        content:
          application/json:
            schema:
              type: object
        description: export options
      exportPdfReviewsBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: export options
      UpdateField:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateField'
        description: Field data to update
      uploadFile:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      PartialMessageArray:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PartialMessage'
        description: Messages to update
      UpdateTemplate:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplate'
        description: Template data to update
      TimeOffRequest:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeOffRequest'
        description: Time off request
      WebAuthnRequest:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebAuthnRequest'
    schemas:
      ChangeData:
        type: object
        required:
          - change
          - cost
          - data
        properties:
          change:
            $ref: '#/components/schemas/Change'
          data:
            type: object
            description: the returned data fields requested
            additionalProperties:
              type: object
          cost:
            type: number
            description: >-
              the annualized impact of this change, denoted in organization's
              currency
          lockedFields:
            type: array
            description: set of locked fields for this change
            uniqueItems: true
            items:
              type: string
      OnboardStep:
        type: object
        required:
          - actionText
          - actionUrl
          - description
          - docsUrl
          - eventType
          - id
          - label
          - name
          - pictureFileName
          - sort
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: unique id
          name:
            type: string
            example: sync-grant
            description: unique string that briefly describes the onboard step
          label:
            type: string
            example: Sync Stock Grants
            description: customer facing identifier
          description:
            type: string
            example: Sync employee stock grants from your cap table
            description: customer facing description
          docsUrl:
            type: string
            example: https://docs.charthop.com/import-stock-grants
            description: url for charthop docs that describe how to accomplish this step
          actionUrl:
            type: string
            example: /settings/apps/slack-import
            description: url for charthop page that where this step can be completed
          actionText:
            type: string
            example: Sync Grants
            description: text that shows up on the 'action button' of the card for this step
          pictureFileName:
            type: string
            example: hiring-plan.svg
            description: file name of the picture for the step (does not include path)
          sort:
            type: integer
            format: int32
            example: 3
            description: >-
              numerical position for which the step appears in relationship to
              other onboard steps
          eventType:
            type: string
            example: group.create
            description: >-
              event type (in the format of <COLLECTION NAME>.<CHANGE TYPE>) that
              triggers the completion of this onboard step
      TaskFormSummary:
        type: object
        required:
          - approveCount
          - expiredCount
          - pendingCount
          - peopleIncludedCount
          - skippedCount
          - submitCount
          - taskList
        properties:
          submitCount:
            type: integer
            format: int32
            description: Number of FORM_SUBMIT tasks that are marked as DONE
          approveCount:
            type: integer
            format: int32
            description: Number CHANGE_APPROVE tasks that are done.
          pendingCount:
            type: integer
            format: int32
            description: Number FORM_SUBMIT tasks that are PENDING
          skippedCount:
            type: integer
            format: int32
            description: Number FORM_SUBMIT tasks that are SKIPPED
          expiredCount:
            type: integer
            format: int32
            description: Number FORM_SUBMIT tasks that are EXPIRED
          peopleIncludedCount:
            type: integer
            format: int32
            description: Number of unique people included in the form
          taskList:
            type: array
            description: List of Dto Tasks
            items:
              $ref: '#/components/schemas/Task'
      FormSummary:
        type: object
        required:
          - id
          - label
        properties:
          id:
            type: string
          label:
            type: string
      ProfileTabResponseCard:
        type: object
        required:
          - date
          - id
        properties:
          id:
            type: string
          date:
            type: string
            format: date
          change:
            $ref: '#/components/schemas/Change'
          formResponse:
            $ref: '#/components/schemas/FormResponse'
          formVersion:
            $ref: '#/components/schemas/ProfileTabResponseCardFormVersion'
      ProfileTabResponseCardFormVersion:
        type: object
        required:
          - id
          - label
          - questions
        properties:
          id:
            type: string
          label:
            type: string
          questions:
            type: array
            items:
              $ref: '#/components/schemas/ProfileTabResponseCardQuestion'
      ProfileTabResponseCardQuestion:
        type: object
        required:
          - id
          - question
        properties:
          id:
            type: string
          question:
            type: string
      ApprovalChainStageOverride:
        type: object
        required:
          - approvalChainStageId
          - order
          - stageOverrideId
          - status
        properties:
          stageOverrideId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: unique id for stage
          approvalChainStageId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent approval chain stage id
          groups:
            type: array
            description: approval group override
            items:
              $ref: '#/components/schemas/ApprovalGroup'
          status:
            type: string
            description: status of the stage
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          order:
            type: integer
            format: int32
            description: order of the stage
      ApprovalGroup:
        type: object
        required:
          - approvers
          - type
        properties:
          groupId:
            type: string
            description: globally unique id
          type:
            type: string
            description: What type of group this is
            enum:
              - REVIEWER
              - COLLABORATOR
              - FINAL_APPROVER
          approvers:
            type: array
            description: approvers that make up the group
            items:
              $ref: '#/components/schemas/ApprovalGroupApprover'
          expandExpression:
            type: string
            description: optional custom expression to determine approval request tree
      ApprovalGroupApprover:
        type: object
        required:
          - jobId
          - status
        properties:
          jobId:
            type: string
            description: A job ID that is part of the group
          status:
            type: string
            description: The status of the approver
            enum:
              - PENDING
              - APPROVED
              - REJECTED
          commentId:
            type: string
            description: Last comment of the approver
          reassignCommentId:
            type: string
            description: Last comment associated with a reassignment
          isFallback:
            type: boolean
            description: Whether approver is a fallback
          fallbackFor:
            type: string
            description: What jobId approver is a fallback for
          updateAt:
            type: integer
            format: int64
            description: The date the status was updated last
      ApprovalRequestCompReviewResponse:
        type: object
        required:
          - approvalChainId
          - entityId
          - entityType
          - id
          - stageOverrides
          - status
        properties:
          id:
            type: string
          status:
            type: string
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          parentStatus:
            type: string
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          isFullySubmitted:
            type: boolean
          entityType:
            type: string
            enum:
              - COMP_REVIEW
              - SCENARIO
              - TIMEOFF
          entityId:
            type: string
          approvalChainId:
            type: string
          stageOverrides:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalChainStageOverride'
          createId:
            type: string
          createAt:
            type: integer
            format: int64
          updateId:
            type: string
          updateAt:
            type: integer
            format: int64
      ApprovalRequestResponse:
        type: object
      ApprovalRequestScenarioResponse:
        type: object
        required:
          - approvalChainId
          - createAt
          - createId
          - id
          - isApprovalCommentRequiredForActiveStage
          - isComplete
          - isRejectionCommentRequiredForActiveStage
          - scenarioId
          - stageOverrides
          - updateAt
          - updateId
        properties:
          id:
            type: string
          activeStage:
            $ref: '#/components/schemas/ApprovalChainStageOverride'
          proposerStage:
            $ref: '#/components/schemas/ApprovalChainStageOverride'
          nextReviewerStage:
            $ref: '#/components/schemas/ApprovalChainStageOverride'
          isComplete:
            type: boolean
          rejectedStage:
            $ref: '#/components/schemas/ApprovalChainStageOverride'
          stageOverrides:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalChainStageOverride'
          isApprovalCommentRequiredForActiveStage:
            type: boolean
          isRejectionCommentRequiredForActiveStage:
            type: boolean
          approvalChainId:
            type: string
          scenarioId:
            type: string
          createId:
            type: string
          createAt:
            type: integer
            format: int64
          updateId:
            type: string
          updateAt:
            type: integer
            format: int64
          deleteId:
            type: string
          deleteAt:
            type: integer
            format: int64
      BudgetAllocation:
        type: object
        properties:
          allocated:
            type: object
          used:
            type: object
      BudgetCalculation:
        type: object
        required:
          - allocated
          - pools
        properties:
          allocated:
            type: object
            example: '500'
            description: the total budget amount
          used:
            type: object
            example: '500'
            description: the amount of the budget that has been used
          pools:
            type: array
            description: a list of budget pools that make up the total amount
            items:
              $ref: '#/components/schemas/PoolCalculation'
          jobBudgetMap:
            type: object
            description: >-
              the amount allotted and allocated for the comp review broken down by
              job
            additionalProperties:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/BudgetAllocation'
      PoolCalculation:
        type: object
        required:
          - allocated
          - budgetPoolId
          - label
          - scenarios
        properties:
          budgetPoolId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: budget pool id
          label:
            type: string
            example: Merit
            description: budget pool label
          allocated:
            type: object
            example: '500'
            description: budget pool total amount
          used:
            type: object
            example: '500'
            description: the amount of the budget pool that has been used
          scenarios:
            type: array
            description: >-
              a list of reviewer/scenario specific calculations that create the
              total
            items:
              $ref: '#/components/schemas/ScenarioCalculation'
      ScenarioCalculation:
        type: object
        required:
          - allocated
          - scenarioId
        properties:
          scenarioId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: scenario id
          allocated:
            type: object
            example: '500'
            description: budget pool total allocation for scenario
          used:
            type: object
            example: '500'
            description: budget pool total use for scenario
      BasisCondition:
        type: object
        required:
          - conditionExpr
        properties:
          conditionExpr:
            type: string
          amountRange:
            $ref: '#/components/schemas/MoneyRange'
          valueRange:
            $ref: '#/components/schemas/ValueRange'
      BasisFieldMatrix:
        type: object
        required:
          - conditions
          - includedFields
        properties:
          includedFields:
            type: array
            items:
              type: string
          conditions:
            type: array
            items:
              $ref: '#/components/schemas/BasisCondition'
      BudgetPool:
        type: object
        required:
          - appliedField
          - basisType
          - compReviewId
          - createAt
          - createId
          - id
          - label
          - orgId
          - sourceField
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the ID of the comp review this budget is for
          label:
            type: string
            example: Merit
            description: unique label
          participantsExpr:
            type: string
            description: >-
              expression that determines if a particular job is included in this
              budget pool
          appliedField:
            type: string
            example: base
            description: the field this budget pool applies to
          sourceField:
            type: string
            example: base
            description: the field this budget pool is calculated from
          basisType:
            type: string
            description: the method for calculating the amount in the budget
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          fixedAmount:
            $ref: '#/components/schemas/Money'
          fixedValue:
            type: number
            description: >-
              a fixed amount for the budget (used with basisType=FIXED ||
              basisType=PERCENTAGE)
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedBudgetMap:
            type: object
            description: a map of reviewer job IDs to fixed budget money amounts
            additionalProperties:
              $ref: '#/components/schemas/Money'
          basisExpr:
            type: string
            description: >-
              expression that calculates how much each job contributes to the
              budget (used with basisType=CUSTOM)
          defaultCurrency:
            type: string
            description: >-
              Default currency used when calculating budget pool, falls back to
              org primary currency if not set
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Money:
        type: object
        required:
          - amount
          - currency
        properties:
          amount:
            type: number
          currency:
            type: string
          places:
            type: number
      MoneyRange:
        type: object
        properties:
          max:
            $ref: '#/components/schemas/Money'
          min:
            $ref: '#/components/schemas/Money'
          target:
            $ref: '#/components/schemas/Money'
      ValueRange:
        type: object
        properties:
          max:
            type: number
            description: the maximum value in the range (type = BigDecimal)
          min:
            type: number
            description: the minimum value in the range (type = BigDecimal)
          target:
            type: number
            description: the target value for the range (type = BigDecimal)
      UpdateBudgetPool:
        type: object
        properties:
          label:
            type: string
            example: Merit
            description: unique label
          participantsExpr:
            type: string
            description: >-
              expression that determines if a particular job is included in this
              budget pool
          appliedField:
            type: string
            example: base
            description: the field this budget pool applies to
          sourceField:
            type: string
            example: base
            description: the field this budget pool is calculated from
          basisType:
            type: string
            description: the method for calculating the amount in the budget
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          fixedAmount:
            $ref: '#/components/schemas/Money'
          fixedValue:
            type: number
            description: >-
              a fixed amount for the budget (used with basisType=FIXED ||
              basisType=PERCENTAGE)
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedBudgetMap:
            type: object
            description: a map of reviewer job IDs to fixed budget money amounts
            additionalProperties:
              $ref: '#/components/schemas/Money'
          basisExpr:
            type: string
            description: >-
              expression that calculates how much each job contributes to the
              budget (used with basisType=CUSTOM)
          defaultCurrency:
            type: string
            description: >-
              Default currency used when calculating budget pool, falls back to
              org primary currency if not set
      Comp:
        type: object
        properties:
          baseComp:
            $ref: '#/components/schemas/PayInterval'
          variableTargets:
            type: array
            description: variable compensation (money or percent)
            items:
              $ref: '#/components/schemas/VariableComp'
          grantShares:
            type: integer
            format: int32
            example: 5000
            description: planned stock grant, in shares
          grantValue:
            type: integer
            format: int32
            example: 5000
            description: >-
              planned stock grant, in value (based on the stock's currency, not
              the comp)
          grantType:
            type: string
            description: planned stock grant type
            enum:
              - ISO
              - NSO
              - RSU
              - SAR
              - PERFORMANCE_SHARES
              - PHANTOM_STOCK
              - RSA
      Change:
        type: object
        required:
          - date
          - id
          - jobId
          - orgId
          - status
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: unique id
          jobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: job id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          scenarioId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: scenario that this change belongs to
          mergeScenarioId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              scenario that this change was merged in from, if the change
              originally came from a scenario
          parentChangeId:
            type: string
            description: change that this change emanates from
          priorStateChangeId:
            type: string
            description: >-
              connects this change to a previous version if itself that you might
              want to roll back to because of bad edits
          type:
            type: string
            description: type of change
            enum:
              - HIRE
              - DEPART
              - MOVE
              - UPCOMING
              - CREATE
              - UPDATE
              - DATA
              - DELETE
              - RELATE
              - BACKFILL
          date:
            type: string
            format: date
            description: date of change
          sort:
            type: integer
            format: int64
            description: sort order of change
          announceDate:
            type: string
            format: date
            description: >-
              for HIRE and DEPART changes, the announce date, if the announce date
              is different from the date of change
          status:
            type: string
            description: whether the change is active or not
            enum:
              - ACTIVE
              - STRUCK
              - CONFLICT
              - INACTIVE
              - PROPOSED
          personId:
            type: string
            description: the id of the person involved, or empty if no person attached to job
          otherJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              for MOVE changes, the id of the job moving from; for RELATE changes,
              the id of the other job
          otherPersonId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: for MOVE changes, the id of the other person involved in the move
          departType:
            type: string
            description: for DEPART changes, the type of departure
            enum:
              - VOLUNTARY
              - INVOLUNTARY
          departRegret:
            type: string
            description: for DEPART changes, whether the departure was regrettable
            enum:
              - REGRET
              - NONREGRET
          promotionType:
            type: string
            description: if it's a promotion or a demotion
            enum:
              - PROMOTION
              - DEMOTION
              - NONE
          reason:
            type: string
            description: the reason for the change
          relateType:
            type: string
            description: for RELATE changes, the type of the relationship
            enum:
              - MANAGER
              - DIRECT
              - INDIRECT_MANAGER
              - INDIRECT
              - NONE
          refs:
            type: array
            description: >-
              list of ids referenced in text field body, for indexing purposes
              only
            items:
              type: object
          job:
            $ref: '#/components/schemas/PartialJob'
          otherJob:
            $ref: '#/components/schemas/PartialJob'
          formId:
            type: string
            description: if this change was data submitted by a form, the id of that form
          assessmentId:
            type: string
            description: >-
              if this change is associated with a assessment, the id of that
              assessment
          update:
            $ref: '#/components/schemas/JobUpdate'
          upcoming:
            $ref: '#/components/schemas/UpcomingChange'
          conflict:
            type: string
            description: >-
              for changes that have been struck due to a merge conflict, the
              description of the conflict
          note:
            type: string
            description: note on the change
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          mergeId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: merged by user id, if this change was merged
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: updated timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: updated by user id
          statusAt:
            type: string
            example: 588f7ee98f138b19220041a7
            description: timestamp of status change
          approvalAt:
            type: string
            example: 588f7ee98f138b19220041a7
            description: timestamp of approval
          approvalId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: approved by user id
          approvalNote:
            type: string
            example: Not acceptable
            description: approval/rejection note
          approval:
            type: string
            description: if approval is required, who is allowed to approve
            enum:
              - MANAGER
              - GRAND_MANAGER
          authorSensitive:
            type: string
            description: >-
              view sensitivity for the author author of this form - the level of
              view access required to view the createId and updateId fields
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          canEdit:
            type: boolean
            description: >-
              flag indicating whether authorized user can modify this change (will
              vary depending on user)
      GroupAssignment:
        type: object
        required:
          - assignmentType
          - group
        properties:
          group:
            $ref: '#/components/schemas/TrackedGroupRef'
          assignmentType:
            type: string
            description: the type of the assignment of the job to the group
            enum:
              - LEAD
              - MEMBER
      JobRelationship:
        type: object
        required:
          - jobId
          - type
        properties:
          jobId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: destination job id
          type:
            type: string
            description: type of relationship
            enum:
              - MANAGER
              - DIRECT
              - INDIRECT_MANAGER
              - INDIRECT
              - NONE
      JobUpdate:
        type: object
        properties:
          addRelationships:
            type: array
            description: relationships to add
            uniqueItems: true
            items:
              $ref: '#/components/schemas/JobRelationship'
          removeRelationships:
            type: array
            description: relationships to remove
            uniqueItems: true
            items:
              $ref: '#/components/schemas/JobRelationship'
          addGroupIds:
            type: array
            description: groups to add
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          removeGroupIds:
            type: array
            description: groups to remove
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          setGroupIds:
            type: object
            description: groups to set
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
          addGroupAssignments:
            type: array
            description: group assignments to add
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GroupAssignment'
          removeGroupAssignments:
            type: array
            description: group assignments to remove
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GroupAssignment'
          grant:
            $ref: '#/components/schemas/StockGrant'
          timeOff:
            $ref: '#/components/schemas/TimeOff'
          title:
            type: string
            description: new title
          comp:
            $ref: '#/components/schemas/Comp'
          placement:
            type: string
            description: new placement
            enum:
              - NORMAL
              - ASSISTANT
          employment:
            type: string
            description: new employment status
            enum:
              - FULL
              - PART
              - TEMP
              - CONTRACT
              - INTERN
              - EXPAT
          sensitive:
            type: string
            description: new view sensitivity
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          startDatePlanned:
            type: string
            format: date
            description: planned start date
          startDatePlannedRemove:
            type: boolean
            description: >-
              remove planned start date. if both startDatePlanned and
              startDatePlannedRemove are set, startDatePlanned takes precedence
          startDate:
            type: string
            format: date
            description: new expected start date - will update to person start date in future
          backfillPersonId:
            description: set who this job is backfilling
          hasUnsetFields:
            type: boolean
            description: set who this job is backfilling
          fields:
            type: object
            description: custom fields values to set
            additionalProperties:
              type: object
          orderedFields:
            type: array
            description: custom ordered fields values to set
            items:
              $ref: '#/components/schemas/PairStringObject'
      Pair:
        type: object
        required:
          - first
          - second
        properties:
          first:
            type: object
          second:
            type: object
      PairStringObject:
        type: object
        required:
          - first
          - second
        properties:
          first:
            type: string
          second:
            type: object
      PartialJob:
        type: object
        properties:
          jobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique job id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          snapshotId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: snapshot that this job belongs to
          title:
            type: string
            example: Senior Engineer
            description: job title
          comp:
            $ref: '#/components/schemas/Comp'
          sensitive:
            type: string
            description: view sensitive of the job while open
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          relationships:
            type: array
            description: relationship to other jobs
            uniqueItems: true
            items:
              $ref: '#/components/schemas/JobRelationship'
          groupIds:
            type: array
            description: groups that this job is a member of
            items:
              type: string
          groupAssignments:
            type: array
            description: tracked group assignments that this job is a member or lead of
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GroupAssignment'
          placement:
            type: string
            description: guidance on placement
            enum:
              - NORMAL
              - ASSISTANT
          employment:
            type: string
            description: employment status
            enum:
              - FULL
              - PART
              - TEMP
              - CONTRACT
              - INTERN
              - EXPAT
          state:
            type: string
            description: >-
              current state - whether the job is open, filled, or has someone
              departed or hired
            enum:
              - OPEN
              - FILLED
              - DEPART
              - START
          fields:
            type: object
            description: fields containing custom data
            additionalProperties:
              type: object
          fieldDates:
            type: object
            description: dates of the field data
            additionalProperties:
              type: string
              format: date
          fieldsProposed:
            type: object
            description: proposed values for fields
            additionalProperties:
              type: object
          createDate:
            type: string
            format: date
            description: job creation date
          startDate:
            type: string
            format: date
            description: >-
              for empty jobs, expected start date - for filled jobs, confirmed
              start date
          startDatePlanned:
            type: string
            format: date
            description: >-
              expected start date whether job is open or has been filled - doesn't
              change when job is filled
          personStartDate:
            type: string
            format: date
            description: >-
              if personId is present, the first day of that person in the org
              after the latest departure (if any)
          personEndDate:
            type: string
            format: date
            description: >-
              if personId is present and the person is departing, the last day of
              that person in the org
          personJobStartDate:
            type: string
            format: date
            description: if personId is present, the first day of that person in the job
          personIdDate:
            type: string
            format: date
            description: >-
              if personId is present, the first day that the personId actually
              filled the job
          personJobEndDate:
            type: string
            format: date
            description: >-
              if personId is present and the person is departing or moving out,
              the last day of that person in the job
          personId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the person holding this job -- either currently in the job, or
              upcoming announced hire
          backfillPersonId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the person who most recently held the job, who this represents a
              backfill for
          backfillByJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: another job which is planned to be a backfill for this job
          upcoming:
            type: array
            description: >-
              if a HIRE, MOVE, or DEPART are upcoming, the details on those
              changes - should only include id, type, date, announceDate, personId
            items:
              $ref: '#/components/schemas/UpcomingChange'
          scenarioId:
            type: string
            description: >-
              scenario that the job was created in (null if job is on primary
              timeline)
          scenarioChangedId:
            type: string
            description: >-
              scenario that the job was changed in (null if job is on primary
              timeline)
          fetchState:
            type: string
            description: >-
              scenario that the job was changed in (null if job is on primary
              timeline)
            enum:
              - PERSON
              - STRUCTURE
              - ALL
      PayInterval:
        type: object
        required:
          - interval
          - pay
        properties:
          interval:
            type: string
            description: Interval (annual or hourly)
            enum:
              - YEARLY
              - HOURLY
          pay:
            $ref: '#/components/schemas/Money'
          hoursPerWeek:
            type: integer
            format: int32
            example: 40
            description: working hours per week if interval=hourly
          weeksPerYear:
            type: integer
            format: int32
            example: 52
            description: working weeks per year if interval=hourly
      StockGrant:
        type: object
        required:
          - date
          - id
          - price
          - shares
          - stock
          - type
          - vestSchedule
        properties:
          id:
            type: string
            description: unique identifier of grant
          stock:
            type: string
            example: GOOG
            description: ticker symbol of this stock
          date:
            type: string
            format: date
            description: date of grant
          vestStartDate:
            type: string
            format: date
            description: vesting start date of grant
          expireDate:
            type: string
            format: date
            description: expiration date of grant
          shares:
            type: number
            description: number of shares granted
          price:
            type: number
            description: per share strike price
          type:
            type: string
            description: type of grant
            enum:
              - ISO
              - NSO
              - RSU
              - SAR
              - PERFORMANCE_SHARES
              - PHANTOM_STOCK
              - RSA
          vestSchedule:
            type: string
            description: vesting schedule
          originalPrice:
            type: number
            description: original per share value of stock (grant price at time of issue)
          currentPrice:
            type: number
            description: current per share value of stock
          vestedShares:
            type: number
            description: current number of shares vested
          vestedSharesNextYear:
            type: number
            description: number of shares vested one year from today
          vestedSharesByDate:
            type: object
            description: number of shares vested, by future date
            additionalProperties:
              type: number
          vestEndDate:
            type: string
            format: date
            description: vesting end date
          cancelDate:
            type: string
            format: date
            description: cancellation date
          details:
            type: string
            description: details of the grant (arbitrary text)
          description:
            type: string
            description: human-readable description of vesting schedule
      TimeOff:
        type: object
        required:
          - endDate
          - id
          - startDate
        properties:
          id:
            type: string
            description: unique id of a time off request
          startDate:
            type: string
            format: date
            description: start date of time off, inclusive
          endDate:
            type: string
            format: date
            description: end date of time off, inclusive
          days:
            type: number
            description: number of days used
          hours:
            type: number
            description: number of hours used
          type:
            type: string
            description: type of time off
          note:
            type: string
            description: notes on the time off
          approval:
            type: string
            description: approval status of the time off
            enum:
              - APPROVED
              - PENDING
              - CANCELLED
              - REJECTED
              - SUPERSEDED
      TrackedGroupRef:
        type: object
        required:
          - id
        properties:
          id:
            type: string
          name:
            type: string
      UpcomingChange:
        type: object
        required:
          - date
        properties:
          id:
            type: string
          type:
            type: string
            enum:
              - HIRE
              - DEPART
              - MOVE
              - UPCOMING
              - CREATE
              - UPDATE
              - DATA
              - DELETE
              - RELATE
              - BACKFILL
          date:
            type: string
            format: date
          announceDate:
            type: string
            format: date
          personId:
            type: string
          otherPersonId:
            type: string
      VariableComp:
        type: object
        required:
          - interval
          - type
        discriminator:
          propertyName: compType
        properties:
          type:
            type: string
            description: compensation type
            enum:
              - BONUS
              - COMMISSION
          interval:
            type: string
            description: compensation interval
            enum:
              - YEARLY
        description: |-
          variable compensation
          Implementations: VariableCompPercent, VariableCompPercent
      VariableCompAmount:
        allOf:
          - $ref: '#/components/schemas/VariableComp'
          - type: object
            required:
              - pay
            properties:
              pay:
                $ref: '#/components/schemas/Money'
            description: variable compensation defined by an pay (amount and currency)
      VariableCompPercent:
        allOf:
          - $ref: '#/components/schemas/VariableComp'
          - type: object
            required:
              - percent
            properties:
              percent:
                type: number
                example: 0.25
                description: >-
                  variable compensation as a percentage of base annual; specified
                  as a multiplier, not a percent (a value of 0.25 means 25%)
            description: variable compensation defined by a percent of the base compensation
      UpdateChange:
        type: object
        properties:
          date:
            type: string
            format: date
            description: date of change
          announceDate:
            type: string
            format: date
            description: >-
              for HIRE and DEPART changes, the announce date, if the announce date
              is different from the date of change
          status:
            type: string
            description: whether the change is active or not
            enum:
              - ACTIVE
              - STRUCK
              - CONFLICT
              - INACTIVE
              - PROPOSED
          departType:
            type: string
            description: for DEPART changes, the type of departure
            enum:
              - VOLUNTARY
              - INVOLUNTARY
          departRegret:
            type: string
            description: for DEPART changes, whether the departure is regrettable
            enum:
              - REGRET
              - NONREGRET
          reason:
            type: string
            description: the reason of the change
          promotionType:
            type: string
            description: if it's a promotion or a demotion
            enum:
              - PROMOTION
              - DEMOTION
              - NONE
          job:
            $ref: '#/components/schemas/PartialJob'
          update:
            $ref: '#/components/schemas/JobUpdate'
          note:
            type: string
            description: note on the change
          approvalNote:
            type: string
            example: Not acceptable
            description: approval/rejection note
      EnumValue:
        type: object
        required:
          - label
          - name
        properties:
          name:
            type: string
            description: enum value name
          label:
            type: string
            description: enum value label
          color:
            type: string
            description: color of property
            pattern: ^#[a-f0-9]{6}$
          expr:
            type: string
            description: computed expression, for ENUM_EXPR type
          num:
            type: number
            description: numeric value, for ENUM_SCALE type
          id:
            type: string
            description: unique identifier for enum
      JobTierField:
        type: object
        required:
          - value
        properties:
          code:
            type: string
          value:
            type: string
      UpdateCompBand:
        type: object
        properties:
          label:
            type: string
            example: L15
            description: human-readable name of content
          color:
            type: string
            example: '#ffee4a'
            description: hex color associated with the band level
          baseCompMax:
            $ref: '#/components/schemas/Money'
          baseCompMid:
            $ref: '#/components/schemas/Money'
          baseCompMin:
            $ref: '#/components/schemas/Money'
          baseSpread:
            type: number
            description: spread percent used to calculate base comp from the midpoint
          baseInterval:
            $ref: '#/components/schemas/EnumValue'
          baseTargetPay:
            $ref: '#/components/schemas/Money'
          baseTargetPayPercentile:
            type: number
            description: >-
              base target pay associated with open jobs at this band level, as a
              percentile
          equityTargetShares:
            type: number
            description: target equity for the band, in shares
          equityTargetPercentOfBase:
            type: number
            description: target equity for the band, as a percentage of base
          equityTargetValue:
            type: number
            description: >-
              target equity for the band, as a monetary value, in the same
              currency as the base
          variableValue:
            $ref: '#/components/schemas/Money'
          variablePercentOfBase:
            type: number
            description: >-
              variable compensation for the band, specified as a percentage of
              base
          jobTierOneField:
            $ref: '#/components/schemas/JobTierField'
          jobTierTwoField:
            $ref: '#/components/schemas/JobTierField'
          jobTierThreeField:
            $ref: '#/components/schemas/JobTierField'
          jobLevel:
            type: string
            description: job level associated with the comp band
      CollaboratorMatrix:
        type: object
        required:
          - conditions
          - includedFields
        properties:
          includedFields:
            type: array
            items:
              type: string
          conditions:
            type: array
            items:
              $ref: '#/components/schemas/CollaboratorMatrixCondition'
      CollaboratorMatrixCondition:
        type: object
        required:
          - collaboratorJobIds
          - expression
        properties:
          expression:
            type: string
          collaboratorJobIds:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      CompReviewBudgets:
        type: object
        required:
          - allocationType
          - visualizationType
        properties:
          allocationType:
            type: string
            description: How budgets are allocated
            enum:
              - PROPORTIONAL
              - SEQUENTIAL
          visualizationType:
            type: string
            description: >-
              Whether all budget visualizations are visible or only those that
              apply to eligible employees in the reviewer's pod
            enum:
              - ALL
              - ONLY_APPLICABLE
      CompReviewCollaborators:
        type: object
        required:
          - collaborationType
          - collaboratorAccess
          - jobToCollaboratorsMap
        properties:
          collaborationType:
            type: string
            description: What type of HRBP collaboration the comp review uses
            enum:
              - NONE
              - STATIC
              - DYNAMIC
          collaboratorAccess:
            type: string
            description: What level of access collaborators should have
            enum:
              - READ
              - EDIT
              - SUBMIT
          collaboratorJobIds:
            type: array
            description: >-
              A list of collaborators for all reviewers, used when
              collaborationType is STATIC
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          collaboratorMatrix:
            $ref: '#/components/schemas/CollaboratorMatrix'
          jobToCollaboratorsMap:
            type: object
            description: >-
              A map of reviewer job ID to a set of collaborator job IDs indicating
              which collaborators are collaborating with a given reviewer
            additionalProperties:
              type: array
              uniqueItems: true
              items:
                type: string
                example: 588f7ee98f138b19220041a7
      CompReviewConfig:
        type: object
        required:
          - collaborators
          - eligibleEmployees
          - keyDates
          - reviewerWorkbook
          - reviewersAndApprovers
        properties:
          keyDates:
            $ref: '#/components/schemas/CompReviewKeyDates'
          eligibleEmployees:
            $ref: '#/components/schemas/CompReviewEligibleEmployees'
          reviewersAndApprovers:
            $ref: '#/components/schemas/CompReviewReviewersApprovers'
          collaborators:
            $ref: '#/components/schemas/CompReviewCollaborators'
          reviewerWorkbook:
            $ref: '#/components/schemas/CompReviewReviewerWorkbook'
          budgets:
            $ref: '#/components/schemas/CompReviewBudgets'
          notifications:
            $ref: '#/components/schemas/CompReviewNotifications'
          reassignments:
            type: object
            description: >-
              Employees that have been reassigned for this cycle (manager to
              employee set)
            additionalProperties:
              type: array
              uniqueItems: true
              items:
                type: string
                example: 588f7ee98f138b19220041a7
      CompReviewEligibleEmployees:
        type: object
        required:
          - ineligibilityType
        properties:
          ineligibilityType:
            type: string
            description: Defines who is ineligible for this cycle
            enum:
              - NONE
              - DEPARTMENT
              - DIVISION
              - LOCATION
              - CUSTOM
          excludedEmploymentStatuses:
            type: array
            description: Exclude these employment types if specified
            uniqueItems: true
            items:
              type: string
              enum:
                - FULL
                - PART
                - TEMP
                - CONTRACT
                - INTERN
                - EXPAT
          excludeGroupIds:
            type: array
            description: Exclude these groups from the cycle
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          filter:
            type: string
            description: The filter to apply when custom ineligibility rules is selected
          lastRaiseDate:
            type: string
            format: date
            description: The cutoff date of last raise if specified
          startDate:
            type: string
            format: date
            description: The cutoff start date if specified
          individualExclusions:
            type: array
            description: List of individuals by personId to exclude from the review
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          individualInclusions:
            type: array
            description: List of individuals by personId to include in the review
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      CompReviewKeyDates:
        type: object
        required:
          - cycleBeginDate
          - finalApprovalDate
          - levelsSubmitByDate
        properties:
          cycleBeginDate:
            type: string
            format: date
            description: Date on which the comp review cycle begins
          levelsSubmitByDate:
            type: string
            format: date
            description: Date by which all levels should be submitted for approval
          finalApprovalDate:
            type: string
            format: date
            description: >-
              Date by which final approval/sign-off will be completed, this is the
              baseline primary effective date for the comp review
          payrollEffectiveDate:
            type: string
            format: date
            description: Date on which payroll updates become effective
          customEffectiveDate:
            type: string
            format: date
            description: A custom date to use for the primary data structure
          isSkipAfterSubmitOverdue:
            type: boolean
            description: Whether to skip approval stages forward after the submit date
          skippedAt:
            type: integer
            format: int64
            description: Whether to skip approval stages forward after the submit date
          isEdited:
            type: boolean
            description: whether the default config has been modified
      CompReviewNotifications:
        type: object
        required:
          - announcementDate
        properties:
          announcementDate:
            type: string
            format: date
            description: Announcement date
      CompReviewReviewerWorkbook:
        type: object
        required:
          - columns
        properties:
          columns:
            type: array
            description: ordering and settings of columns in workbook
            items:
              $ref: '#/components/schemas/CompReviewWorkbookColumn'
          numFrozenColumns:
            type: integer
            format: int32
            description: number of frozen columns at start of workbook
          moreInfoUrl:
            type: string
            description: optional link to see additional customer documentation
          moreInfoLabel:
            type: string
            description: optional label for additional customer documentation
          isEdited:
            type: boolean
            description: whether the default config has been modified
      CompReviewReviewersApprovers:
        type: object
        required:
          - reviewers
        properties:
          reviewers:
            type: string
            description: Which individuals are included as reviewers
            enum:
              - ALL_MANAGERS
              - ONLY_SPECIFIC_LEVEL
              - ONLY_SPECIFIC_TITLES
              - CUSTOM
          reviewerLevels:
            type: array
            description: Levels to be included if reviewers is only specific levels
            items:
              type: integer
              format: int32
          reviewerTitles:
            type: array
            description: Titles to be included if reviewers is only specific titles
            items:
              type: string
          reviewerFilter:
            type: string
            description: Filter to be applied if reviewers is custom
          excludedReviewerIds:
            type: array
            description: Job ids of individuals to exclude from the review
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          approverIds:
            type: array
            description: Person ids of employees who will final approve
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      CompReviewWorkbookColumn:
        type: object
        required:
          - editableFor
          - label
          - name
          - visibleTo
          - visibleToGroups
          - visibleToType
        properties:
          name:
            type: string
            description: field name
          label:
            type: string
            description: display name in workbook
          color:
            type: string
            description: color used in the column header
          editableFor:
            type: string
            description: >-
              cql evaluated on the reviewee job specifying whether field is
              editable
          visibleTo:
            type: string
            description: cql specifying who can view
          visibleToGroups:
            type: array
            description: list of groupIds with viewing permissions
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          visibleToType:
            type: string
            description: type of cql filter used in the visible to
            enum:
              - EVERYONE
              - DEPARTMENT
              - TEAM
              - LOCATION
              - CUSTOM
          visibleToRoles:
            $ref: '#/components/schemas/InCycleViewFeatures'
      CompReview:
        type: object
        required:
          - config
          - id
          - label
          - orgId
          - shareAccess
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Comp review H2 2022
            description: human-readable label of goal
          config:
            $ref: '#/components/schemas/CompReviewConfig'
          status:
            type: string
            description: >-
              Whether the compensation review has been approved by the final
              approvers
            enum:
              - PENDING
              - PAUSED
              - ACTIVE
              - REJECTED
              - COMPLETE
              - COMPLETE_APPROVED
          shareAccess:
            type: array
            description: users who have been granted access to this comp review
            items:
              $ref: '#/components/schemas/ShareAccess'
          reviewerCount:
            type: integer
            format: int32
            description: count of reviewers in the comp review
          submittedCount:
            type: integer
            format: int32
            description: count of reviews that have been submitted and approved
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      InCycleViewFeatures:
        type: object
        required:
          - isApprover
          - isCollaborator
          - isFinalApprover
          - isOwner
          - isProposer
        properties:
          isFinalApprover:
            type: boolean
          isProposer:
            type: boolean
          isApprover:
            type: boolean
          isOwner:
            type: boolean
          isCollaborator:
            type: boolean
          isRoot:
            type: boolean
      ShareAccess:
        type: object
        required:
          - access
        properties:
          access:
            type: string
            description: access permission level
            enum:
              - NONE
              - LIMITED_READ
              - LIMITED_WRITE
              - STANDARD_READ
              - STANDARD_WRITE
              - COMPENSATION_READ
              - FULL_READ
              - COMP_PLANNING_PARTICIPANT
              - COMPENSATION_WRITE
              - WRITE
              - COMPENSATION_OWNER
              - OWNER
          userId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: user id
          groupId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: group id
          fields:
            type: string
            example: name,image,title
            description: fields
      UpdateCompReview:
        type: object
        properties:
          label:
            type: string
            example: Comp review H2 2022
            description: human-readable label of goal
          config:
            $ref: '#/components/schemas/CompReviewConfig'
          status:
            type: string
            description: >-
              Whether the compensation review has been approved by the final
              approvers
            enum:
              - PENDING
              - PAUSED
              - ACTIVE
              - REJECTED
              - COMPLETE
              - COMPLETE_APPROVED
          shareAccess:
            type: array
            description: users who have been granted access to this comp review
            items:
              $ref: '#/components/schemas/ShareAccess'
          reviewerCount:
            type: integer
            format: int32
            description: count of reviewers in the comp review
          submittedCount:
            type: integer
            format: int32
            description: count of reviews that have been submitted and approved
      ActionStep:
        type: object
        required:
          - type
        properties:
          stepId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: unique id for action step
          type:
            type: string
            description: The type of action to run
            enum:
              - FORM
              - MESSAGE
              - HTTP
              - TASK
          formId:
            type: string
            description: If the action is FORM, the id of the form to fill out
          target:
            type: string
            description: >-
              If the action is MESSAGE, the target to send the message to. If the
              action is FORM/TASK, the person who should have the form filled out
              on/complete the task
          assignee:
            type: string
            description: >-
              If the action is FORM/TASK, the user who should fill out the
              form/complete the task (default is, same as target)
          message:
            type: string
            description: The message that will be sent -- supports CQLT templates
          messageChannel:
            $ref: '#/components/schemas/MessageChannelConfig'
          emailSubject:
            type: string
            description: >-
              The email subject line that will be used -- supports CQLT templates.
              If not provided, will use 'Notification'
          sensitive:
            type: boolean
            description: >-
              whether to run with access to sensitive events or not - if this is
              left blank, will default to the sensitive setting of the Action
          httpUrl:
            type: string
            format: uri
            description: If the action is HTTP, the url that will receive the HTTP request
          httpMethod:
            type: string
            description: >-
              If the action is HTTP, the method used by the HTTP request (defaults
              to POST)
          httpHeaders:
            type: object
            description: If the action is HTTP, the headers to add to the HTTP request
            additionalProperties:
              type: string
          httpContent:
            type: object
            description: If the action is HTTP, the payload contained in the HTTP request
      Action:
        type: object
        required:
          - id
          - orgId
          - runUserId
          - sensitive
          - status
          - steps
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          event:
            type: string
            description: event pattern to match on, such as change.create.*
          cronSchedule:
            type: string
            example: 5 4 * * *
            description: cron schedule to run on, in crontab format
          filter:
            type: string
            description: only run when matching a particular filter
          steps:
            type: array
            description: list of steps to run when matching the event, schedule, and filter
            items:
              $ref: '#/components/schemas/ActionStep'
          description:
            type: string
            description: description of the action
          tags:
            type: array
            description: tags to organize the purpose of the action
            items:
              type: string
          status:
            type: string
            description: status of the action
            enum:
              - ACTIVE
              - INACTIVE
          runUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the user to run the action as - normally the same as the user who
              created the action
          sensitive:
            type: boolean
            description: whether to run with access to sensitive events or not
          category:
            type: string
            description: organizational category for HRIS-themed actions
            enum:
              - ONBOARDING
              - OFFBOARDING
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      MessageChannelConfig:
        type: object
        required:
          - channels
        properties:
          channels:
            type: array
            items:
              type: string
              enum:
                - EMAIL
                - CHAT
      Agreement:
        type: object
        required:
          - action
          - createAt
          - createId
          - id
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          action:
            type: string
            description: action taken
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp that the agreement was accepted/cancelled
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id who accepted/cancelled the agreement
          legalDocId:
            type: string
            description: legal document entity id
      Address:
        type: object
        required:
          - country
        properties:
          street1:
            type: string
            example: 123 Anywhere Street
            description: street address, line 1
          street2:
            type: string
            example: Apt 6L
            description: street address, line 2
          street3:
            type: string
            example: Sixth Floor
            description: street address, line 3
          city:
            type: string
            example: New York
            description: city
          state:
            type: string
            example: NY
            description: state
          country:
            type: string
            example: NY
            description: country (two-digit ISO code)
            pattern: ^[A-Z]{2}$
          postal:
            type: string
            example: '10001'
            description: postal code
          geo:
            $ref: '#/components/schemas/Geopoint'
          approxGeo:
            $ref: '#/components/schemas/Geopoint'
      AppConfigField:
        type: object
        required:
          - label
          - name
          - type
        properties:
          name:
            type: string
          label:
            type: string
          type:
            type: string
            enum:
              - STRING
              - SUBDOMAIN
              - URL
              - SECRET
              - XML
              - OAUTH
              - INSTRUCTION
          details:
            type: string
          subdomain:
            type: string
          optional:
            type: boolean
          configSection:
            type: string
          oauthUrl:
            type: string
            format: uri
          requiredFields:
            type: array
            items:
              type: string
      Block:
        type: object
        properties:
          label:
            type: string
            description: human readable label for this block
          targetFilter:
            type: string
            description: >-
              filter condition expression applied to this block, used to determine
              whether the content appears on the target or not
          readFilter:
            type: string
            description: >-
              filter condition expression applied to this block, relative to the
              viewer
          formIds:
            type: array
            description: form ids to surface responses in this block
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          fields:
            type: array
            description: fields retrieved in this block
            items:
              type: string
          content:
            type: string
            description: template content returned in this block
      Bundle:
        type: object
        properties:
          categories:
            type: array
            description: list of categories included in this bundle
            items:
              $ref: '#/components/schemas/Category'
          fields:
            type: array
            description: list of fields included in this bundle
            items:
              $ref: '#/components/schemas/PartialField'
          forms:
            type: array
            description: list of forms included in this bundle
            items:
              $ref: '#/components/schemas/PartialForm'
          questions:
            type: array
            description: list of questions included in this bundle
            items:
              $ref: '#/components/schemas/Question'
          profileTabs:
            type: array
            description: list of profile tabs included in this bundle
            items:
              $ref: '#/components/schemas/PartialProfileTab'
          groups:
            type: array
            description: list of content groups included in this bundle
            items:
              $ref: '#/components/schemas/PartialGroup'
          reports:
            type: array
            description: list of reports included in this bundle
            items:
              $ref: '#/components/schemas/BundleReport'
          actions:
            type: array
            description: list of actions included in this bundle
            items:
              $ref: '#/components/schemas/PartialAction'
          templates:
            type: array
            description: list of templates included in this bundle
            items:
              $ref: '#/components/schemas/Template'
          contents:
            type: array
            description: list of resource content included in this bundle
            items:
              $ref: '#/components/schemas/Content'
          taskConfigs:
            type: array
            description: list of task configs included in this bundle
            items:
              $ref: '#/components/schemas/PartialTaskConfig'
      BundleReport:
        type: object
        required:
          - report
        properties:
          report:
            $ref: '#/components/schemas/PartialReport'
          charts:
            type: array
            description: list of charts used in the report
            items:
              $ref: '#/components/schemas/PartialReportChart'
      Category:
        type: object
        required:
          - id
          - label
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          label:
            type: string
            example: Performance
            description: human-readable label of category
          fieldIds:
            type: array
            description: set of field ids included in this category
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          nativeFields:
            type: array
            description: set of native field names included in this category
            uniqueItems: true
            items:
              type: string
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Content:
        type: object
        required:
          - createAt
          - createId
          - id
          - orgId
          - sensitive
          - title
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          parentContentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent content id in the hierarchy
          title:
            type: string
            example: Benefits Policies
            description: title of the content page
          path:
            type: string
            example: employee-info/benefits-policies
            description: >-
              full path to the content, if not set, defaults to an id/slug
              generated URL
          blocks:
            type: array
            description: content blocks
            items:
              $ref: '#/components/schemas/ContentBlock'
          imagePath:
            type: string
            example: path/to/image.jpg
            description: path to the image for the page
            pattern: ^[a-zA-Z0-9._/-]+$
          emoji:
            type: string
            example: 💥
            description: emoji, if an emoji is used to represent the page
          coverImagePath:
            type: string
            example: path/to/image.jpg
            description: path to the cover image for the content page
            pattern: ^[a-zA-Z0-9._/-]+$
          sensitive:
            type: string
            description: sensitivity level (ORG public, HIGHly sensitive, or PRIVATE)
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: list of users and groups who have the content shared with them
            items:
              $ref: '#/components/schemas/ShareAccess'
          status:
            type: string
            description: current status of the content page
            enum:
              - DRAFT
              - ACTIVE
              - ARCHIVED
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ContentBlock:
        type: object
        required:
          - content
        properties:
          content:
            type: string
      App:
        type: object
        required:
          - id
          - minAccess
          - name
          - orgId
          - status
          - summary
          - title
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: organization id
          name:
            type: string
            example: slack-import
            description: short unique name
            pattern: ^[a-z0-9-]+$
          redirectUris:
            type: array
            description: >-
              list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for
              this app
            items:
              type: string
              format: uri
          allowedIps:
            type: array
            description: >-
              allowlist of IPs or IP ranges that are allowed to make API calls on
              behalf of this app
            items:
              type: string
          configFields:
            type: array
            description: list of configuration fields
            items:
              $ref: '#/components/schemas/AppConfigField'
          title:
            type: string
            example: Slack
            description: human-readable name of app
          summary:
            type: string
            example: The Slack app does X Y and Z
            description: short summary of app
          description:
            type: string
            example: The Slack app does X Y and Z
            description: full description of app, in Markdown
          setupInstructions:
            type: string
            example: To install the Slack, use your API key from X and Y
            description: setup instructions, in Markdown
          cronOrder:
            type: integer
            format: int32
            description: execution order of the cron (lower numbers execute earlier)
          cronSchedule:
            type: string
            description: cron schedule
            enum:
              - DAILY
              - WEEKLY
          cronDayOfWeek:
            type: string
            description: Day of week if cronSchedule is WEEKLY
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          imagePath:
            type: string
            description: >-
              path to avatar profile image, should be approximately square
              dimensions and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          wordmarkImagePath:
            type: string
            description: >-
              path to larger profile logo image containing brand wordmark, does
              not need to be square dimensions
            pattern: ^[a-zA-Z0-9._/-]+$
          poweredByImagePath:
            type: string
            description: >-
              path to powered by image, should be approximately square dimensions
              and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of app
            enum:
              - GLOBAL
              - ACTIVE
              - INACTIVE
              - DEVELOPMENT
          minAccess:
            type: string
            description: minimum access level requested by app
            enum:
              - NONE
              - VIEW
              - LIMITED
              - MEMBER_LIMITED_COMP
              - MEMBER
              - CUSTOM
              - TECH_OWNER
              - TIMEOFF
              - CONTACT
              - COMP_CASH
              - COMP_EQUITY
              - COMP_ALL
              - RECRUIT_SENSITIVE
              - RECRUIT_PRIMARY
              - SENSITIVE_LIMITED_COMP
              - SENSITIVE
              - PRIMARY
              - PEOPLE_OPS_ADMIN
              - PEOPLE_OPS_ADMIN_NO_COMP_DATA
              - PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA
              - OWNER
          roleId:
            type: string
            description: roleId requested by app
          eventNotifyUrl:
            type: string
            format: uri
            description: URL that should be notified on events
          payload:
            type: object
            description: custom payload to send in lieu of regular payload
            additionalProperties:
              type: string
          events:
            type: array
            description: set of events to notify on
            uniqueItems: true
            items:
              type: string
          type:
            type: string
            description: APP, BUNDLE, or INTERNAL
            enum:
              - APP
              - BUNDLE
              - INTERNAL
          bundle:
            $ref: '#/components/schemas/Bundle'
          scopes:
            type: array
            description: access scopes that the app is requesting
            items:
              type: string
          tags:
            type: array
            description: tags/categories the app belongs to
            items:
              type: string
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      DueDate:
        type: object
        required:
          - dueDay
          - dueTime
          - type
        properties:
          type:
            type: string
            enum:
              - EXACT
              - RELATIVE
          dueDay:
            type: string
            description: due day, in either relative (-7d) or exact (YYYY-MM-DD) format
          dueTime:
            type: string
            description: due time, which is a LocalTime
      FormBlock:
        type: object
        required:
          - type
        properties:
          id:
            type: string
            description: unique id for the block
          fieldName:
            type: string
            description: field code name
          type:
            type: string
            description: Type of Form Block
            enum:
              - QUESTION
              - CONTENT
          content:
            type: string
            description: Content of Content Block
          required:
            type: boolean
            description: whether field is required or not
          questionId:
            type: string
            description: question id, for questions
      FormField:
        type: object
        required:
          - fieldId
          - label
          - longLabel
          - required
        properties:
          fieldId:
            type: string
            description: field id
          label:
            type: string
            description: human readable label for this field in this form
          required:
            type: boolean
            description: whether field is required or not
          longLabel:
            type: boolean
            description: whether label is long-format
      Geopoint:
        type: object
        properties:
          type:
            type: string
            readOnly: true
          coordinates:
            type: array
            readOnly: true
            items:
              type: number
              format: double
      GroupByConfig:
        type: object
        properties:
          overrides:
            type: array
            description: Overrides by label of label, color, or sort order
            items:
              $ref: '#/components/schemas/LabelOverride'
          limit:
            type: integer
            format: int32
            description: Maximum number of results to display
          includeOther:
            type: boolean
            description: When combined with limit, whether to include an 'Other' group
          includeNone:
            type: boolean
            description: Whether to include a 'None' group (null values aggregated)
          includeAllValues:
            type: boolean
            description: >-
              When combined with fieldId or questionId, will include all values
              from that fieldId or questionId, even if none of them were used
          fieldId:
            type: string
            description: The field to use to retrieve values, when includeAllValues is in use
          questionId:
            type: string
            description: >-
              The question to use to retrieve values, when includeAllValues is in
              use
          sortBy:
            type: string
            description: >-
              Whether to sort the results -- by default, will sort by label if
              there is no limit, will sort by value descending if there is a limit
            enum:
              - LABEL
              - KEY
              - VALUE
              - COUNT
          sortDirection:
            type: string
            description: The direction to sort the results
            enum:
              - ASC
              - DESC
      LabelOverride:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            description: >-
              The unique identifier to use to locate the key to override. For
              entities and enum values, this will be an id. For numbers, this will
              be the normalized numeric representation. For others, this will be
              the string
          label:
            type: string
            description: If set, overrides this label
          color:
            type: string
            description: If set, overrides the default color
          sort:
            type: integer
            format: int32
            description: If set, overrides the sorting order
      PartialAction:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          event:
            type: string
            description: event pattern to match on, such as change.create.*
          cronSchedule:
            type: string
            example: 5 4 * * *
            description: cron schedule to run on, in crontab format
          filter:
            type: string
            description: only run when matching a particular filter
          steps:
            type: array
            description: list of steps to run when matching the event, schedule, and filter
            items:
              $ref: '#/components/schemas/ActionStep'
          description:
            type: string
            description: description of the action
          tags:
            type: array
            description: tags to organize the purpose of the action
            items:
              type: string
          status:
            type: string
            description: status of the action
            enum:
              - ACTIVE
              - INACTIVE
          runUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the user to run the action as - normally the same as the user who
              created the action
          sensitive:
            type: boolean
            description: whether to run with access to sensitive events or not
          category:
            type: string
            description: organizational category for HRIS-themed actions
            enum:
              - ONBOARDING
              - OFFBOARDING
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialField:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          name:
            type: string
            example: summary
            description: short field name
            pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
          label:
            type: string
            example: Job Summary
            description: human-readable full name of field
          description:
            type: string
            example: >-
              This field tracks the most recent performance rating for an
              individual.
            description: description of field
          question:
            type: string
            example: What do you think of this placeholder question?
            description: human-readable question associated with field
          inUse:
            type: boolean
            description: >-
              disallow any updates to this Field (except for field.question
              string)
          expr:
            type: string
            example: (base + variable) / 12
            description: calculated expression
          exprType:
            type: string
            description: the expected type of the evaluated expression
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          type:
            type: string
            description: type of field
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the field (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          defaultValue:
            type: object
            description: default value if field is not set
          options:
            type: object
            description: validation options
          entityType:
            type: string
            description: entity type of field
            enum:
              - JOB
              - JOB_OPEN
              - JOB_FILLED
              - PERSON
              - CHANGE
              - TABLE
              - ORG
              - USER
              - NONE
          sensitive:
            type: string
            description: sensitivity level of data
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          hideExpr:
            type: boolean
            description: hide expression-derived values from non-sensitive users
          expireDays:
            type: integer
            format: int32
            description: number of days after which the data becomes invalid
            minimum: 1
          status:
            type: string
            description: the status of the field
            enum:
              - ACTIVE
              - HIDDEN
          tableId:
            type: string
            description: >-
              the table id this field applies to, only applicable when EntityType
              equals TABLE
          tableRef:
            $ref: '#/components/schemas/TableRef'
          isUnique:
            type: boolean
            description: >-
              indicates that this field value is unique in conjunction with
              entityType PERSON or JOB
          isRequired:
            type: boolean
            description: indicates that this field value is required
          isEffectiveDated:
            type: boolean
            description: indicates that this field value is effective-dated
          dataFetchTypes:
            type: array
            description: set of data fetch types
            uniqueItems: true
            items:
              type: string
              enum:
                - BASIC
                - UPDATE
                - CHANGE
                - RELATIONSHIP_MANAGER
                - RELATIONSHIP_ALL
                - TITLE
                - PROMOTION
                - GROUP
                - COMP
                - COMP_HISTORY
                - GRANT
                - TIMEOFF
                - PERSON_JOIN
                - ALL_DATA
          aliases:
            type: array
            description: set of aliases for this field
            uniqueItems: true
            items:
              type: string
          calc:
            type: string
            description: >-
              unique ID for the function that runs to calculate the value of this
              field. For native fields only
            enum:
              - ADDRESS
              - AGE
              - ANNIVERSARY
              - ANNUAL_BASE_MONEY
              - BACKFILL
              - BAND
              - BAND_RANGE
              - BASE
              - BASE_CAL_YEAR_PRORATED
              - BASE_CAL_YTD
              - BASE_COMP
              - BASE_COMP_AMOUNT
              - BASE_COMP_ANNUALIZED
              - BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY
              - BASE_COMP_AS_ORG_CURRENCY
              - BASE_COMP_CHANGES
              - BASE_COMP_CURRENCY
              - BASE_COMP_HOURS_PER_WEEK
              - BASE_COMP_INTERVAL
              - BASE_COMP_LAST_RAISE_DATE
              - BASE_COMP_LAST_RAISE_MONTHS_SINCE
              - BASE_COMP_LAST_RAISE_PAY
              - BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY
              - BASE_COMP_LAST_RAISE_PERCENT
              - BASE_COMP_LAST_RAISE_TYPE
              - BASE_COMP_PAY
              - BASE_COMP_PAY_AS_ORG_CURRENCY
              - BASE_COMP_WEEKS_PER_YEAR
              - BASE_FISCAL_YEAR_PRORATED
              - BASE_FISCAL_YTD
              - BASE_PRIMARY
              - BASE_RAISE_AMOUNT
              - BASE_RAISE_DATE
              - BASE_RAISE_PERCENT
              - BIRTH_DATE
              - BIRTHDAY
              - BONUS_TARGET
              - BUDGET_COST
              - BUSINESS_UNITS
              - CAL_YEAR_VEST_SHARES
              - CAL_YEAR_VEST_VALUE
              - CAN_APPROVE_CHANGE
              - CAN_EDIT_JOB
              - CASH_COMP
              - CASH_COMP_LOCAL
              - CHANGE
              - CHANGE_ID
              - COMMISSION_TARGET
              - COMP
              - COMP_CHANGE_PERCENT
              - COMPA_RATIO_MID
              - COMPA_RATIO_TARGET
              - CONTACT
              - COST
              - CREATE_DATE
              - CURRENCY
              - DATA
              - DATE
              - DATE_OF
              - DAYS_ACTIVE
              - DAYS_OFF
              - DAYS_OFF_TAKEN
              - DAYS_OFF_UPCOMING
              - DAYS_OPEN
              - DB
              - DEPART
              - DEPARTMENT
              - DEPARTMENT_FUNC
              - DIRECT_JOBS
              - DIRECT_JOB_COUNT
              - DIRECT_PERSON_COUNT
              - EMPLOYMENT
              - END_DATE_JOB
              - END_DATE_ORG
              - ETHNICITY
              - FISCAL_YEAR_COST
              - GENDER
              - GEOIP
              - GEOIP_ADDRESS
              - GRAND_MANAGER
              - GRANT_SHARES
              - GRANT_TYPE
              - GRANT_VALUE
              - GRANTS
              - GROUP_IDS
              - HEADCOUNT
              - HISTORIC_BACKFILL
              - HOUR
              - HOURLY
              - HOURLY_PRIMARY
              - HOURS_PER_WEEK
              - IMAGE
              - INDIRECT
              - INDIRECT_JOBS
              - JOB
              - JOB_ID
              - JOB_CODE
              - JOBCOUNT
              - LAST_GRANT
              - LAST_GRANT_DATE
              - LAST_GRANT_ORIGINAL_VALUE
              - LOCATION
              - MANAGE_JOBS
              - MANAGE_PERSONS
              - MANAGER
              - MANAGER_COUNT
              - MANAGER_FILLED
              - MANAGER_ID
              - MANAGERS
              - MANAGER_PERSON
              - MANAGER_PERSONS
              - ME
              - MERGE_SCENARIO_ID
              - NAME
              - NAME_AUDIO
              - NAME_TITLE
              - NEXT_DAY_OFF
              - NEXT_TIME_OFF
              - NEXT_YEAR_VEST_SHARES
              - NEXT_YEAR_VEST_VALUE
              - NOTE
              - NOOP
              - OPEN
              - ORG
              - PERSON
              - PERSON_ID
              - PLACEMENT
              - PREV_DAY_OFF
              - PREV_TIME_OFF
              - PROMOTION
              - PROMOTION_DATE
              - PROPOSED
              - Q
              - RAISE_AMOUNT
              - RAISE_DATE
              - RAISE_PERCENT
              - RAISE_PROMOTION_DATE
              - REASON
              - REGRET
              - RELATIONSHIPS
              - REMOTE_WORK_ADDRESS
              - SCENARIO
              - SCENARIO_CHANGED
              - SENSITIVE
              - SENSITIVE_FIELDS
              - START_DATE
              - START_DATE_JOB
              - START_DATE_ORG
              - START_DATE_PLANNED
              - STATE
              - STRIKE_PRICE
              - TARGET_HOURS_PER_WEEK
              - TARGET_WEEKS_PER_YEAR
              - TEAM
              - TENURE_JOB
              - TENURE_ORG
              - TIMEZONE_OFFSET
              - TITLE
              - TITLE_DATE
              - TODAY
              - TOTAL_COMP
              - TOTAL_COMP_LOCAL
              - TOTAL_ORG_SHARES
              - TOTAL_SHARES
              - TOTAL_SHARES_VALUE
              - UNDER
              - UNDER_INCLUDING
              - UNDER_JOBS
              - UNVESTED_SHARES
              - UNVESTED_VALUE
              - UPDATE
              - USER_ACTIVE_DAYS
              - USER_CAN_EDIT_COMP_FOR_JOB
              - USER
              - VARIABLE
              - VARIABLE_AMOUNT
              - VARIABLE_INTERVAL
              - VARIABLE_PERCENT
              - VARIABLE_PRIMARY
              - VARIABLE_TARGET
              - VARIABLE_TARGET_AMOUNT
              - VARIABLE_TARGET_ANNUALIZED
              - VARIABLE_TARGET_CURRENCY
              - VARIABLE_TARGET_PERCENT
              - VARIABLE_TARGET_TYPE
              - VARIABLE_TARGETS
              - VARIABLE_TARGETS_LAST_RAISE_DATE
              - VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE
              - VARIABLE_TARGETS_LAST_RAISE_PAY
              - VARIABLE_TARGETS_LAST_RAISE_PERCENT
              - VARIABLE_TYPE
              - VESTED_DATE
              - VESTED_SHARES
              - VESTED_VALUE
              - WEEKS_PER_YEAR
              - WORK_ADDRESS
          categoryId:
            type: string
            description: ID of the category to which this field belongs, if any
          classification:
            type: string
            description: >-
              indicates how this field is calculated (whether it's stored in the
              DB, evaluated through the expression service, or compound)
            enum:
              - COMPOUND
          places:
            type: integer
            format: int32
            description: number of decimal places for money values
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialForm:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: 'Health Index: Q2'
            description: human-readable full name of form
          description:
            type: string
            example: >-
              The Engineering department, where engineers develop new technology
              and products.
            description: description of form
          fields:
            type: array
            description: ordered list of fields being collected in this form
            items:
              $ref: '#/components/schemas/FormField'
          blocks:
            type: array
            description: ordered list of blocks being collected in this form
            items:
              $ref: '#/components/schemas/FormBlock'
          status:
            type: string
            description: status of the form
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          type:
            type: string
            description: type of the form
            enum:
              - BUILT_IN
              - CUSTOM
          sensitive:
            type: string
            description: >-
              view sensitivity of the form - only people with view access to the
              form can collect the data
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          targetType:
            type: string
            description: >-
              target type that the form can be filled out about (null defaults to
              PERSON for backwards compatibility)
            enum:
              - NONE
              - PERSON
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          submitFilter:
            type: string
            description: >-
              filter that controls which respondents can submit this form. The
              form:submit permission, if present, overrides this filter
          responseReadFilter:
            type: string
            description: >-
              filter that controls who can read the form responses. The
              formResponse:read permission, if present, overrides this filter
          useFieldAccess:
            type: boolean
            description: >-
              if this option is on, then form response answers will use field
              permissions to determine access to those responses
          approval:
            type: string
            description: approval needed, if any approval is required
            enum:
              - MANAGER
              - GRAND_MANAGER
          authorSensitive:
            type: string
            description: >-
              view sensitivity for the author of this form - the level of view
              access required to view the createId and updateId fields. If null,
              the author's identity is always visible as long as the viewer can
              read the form response. If set to PRIVATE, the author's identity is
              stored in ChartHop, but protected such that even users with
              sensitive access cannot access the data. If set to ANONYMOUS, the
              author's identity is not stored in ChartHop at all.
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
          options:
            type: object
            description: options, such as notification settings
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: 2017-01-24T13:52Z
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialGroup:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            example: Engineering
            description: unique name of group
          slug:
            type: string
            example: engineering
            description: unique slug of group
          code:
            type: string
            example: D123
            description: external code identifier of the group
          aliases:
            type: array
            description: aliases for group
            uniqueItems: true
            items:
              type: string
          type:
            type: string
            description: type of group
            enum:
              - LOCATION
              - DEPARTMENT
              - TEAM
              - BAND
              - JOBCODE
          leadJobIds:
            type: array
            description: >-
              a list of group leaders, or null if the leader of the group should
              be automatically derived from the org chart
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          fields:
            type: object
            description: group fields (currently only description)
          address:
            $ref: '#/components/schemas/Address'
          level:
            type: integer
            format: int32
            description: level of the group, for BAND type only
          func:
            type: string
            description: Job function category of the group, for DEPARTMENT type only
            enum:
              - BD
              - CS
              - DESIGN
              - ENGINEERING
              - EXECUTIVE
              - FINANCE
              - GENERAL
              - IT
              - LEGAL
              - MARKETING
              - OPERATIONS
              - PEOPLE
              - PRODUCT
              - RECRUITING
              - SALES
              - SECURITY
              - SUPPORT
          locationType:
            type: string
            description: Type of the location, for LOCATION type only
            enum:
              - OFFICE
              - REMOTE
          parentGroupId:
            type: string
            description: parent group id
          timezone:
            type: string
            example: America/New_York
            description: timezone of the group, for LOCATION type only
          compMin:
            $ref: '#/components/schemas/Money'
          compMax:
            $ref: '#/components/schemas/Money'
          imagePath:
            type: string
            description: path to profile image
            pattern: ^[a-zA-Z0-9._/-]*$
          color:
            type: string
            description: color of group
            pattern: ^#[a-f0-9]{6}$
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialProfileTab:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Performance
            description: human-readable name of profile tab
          blocks:
            type: array
            description: ordered list of blocks contained by profile tab
            items:
              $ref: '#/components/schemas/Block'
          status:
            type: string
            description: status of the profile tab
            enum:
              - ACTIVE
              - INACTIVE
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          readFilter:
            type: string
            description: >-
              filter that controls which viewers can read this profile tab. The
              profileTab:read permission, if present, overrides this filter
          sort:
            type: integer
            format: int32
            description: sort order
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialReport:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Headcount Report
            description: report label
          description:
            type: string
            example: This is a report on headcount etd
            description: report description
          filter:
            type: string
            example: department:engineering
            description: filter automatically applied to every chart in this report
          share:
            type: string
            description: sharing settings of report
            enum:
              - NORMAL
              - FULL
          sensitive:
            type: string
            description: sensitivity level of report
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              report
            items:
              $ref: '#/components/schemas/ShareAccess'
          chartIds:
            type: array
            description: list of charts in this report
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialReportChart:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          reportId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent report id
          label:
            type: string
            example: Headcount Report
            description: chart label
          type:
            type: string
            description: chart type
            enum:
              - LINE
              - AREA
              - STACKED
              - BAR
              - VERTICAL_BAR
              - HORIZONTAL_BAR
              - PIE
              - TABLE
              - TABLE_CROSSTAB
              - SINGLE_METRIC
              - HEADER
              - TEXT
          filter:
            type: string
            example: department='Engineering'
            description: filter that applies to this chart
          filterOverride:
            type: boolean
            description: whether the chart filter overrides the global filter
          query:
            $ref: '#/components/schemas/ReportQuery'
          sort:
            type: integer
            format: int32
            description: sort order
          isAdvancedQueryMode:
            type: boolean
            description: whether the chart configuration is using advanced mode
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      PartialTaskConfig:
        type: object
        properties:
          id:
            type: string
            description: unique id of task config
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          assessmentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent assessment id that this task config belongs to
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this task config belongs to, should be used
              with entityId
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the primary entity being referenced by the task config
          slug:
            type: string
            description: >-
              System generated identifying name so that actions can be triggered
              as a result of task completion
          type:
            type: string
            description: type of task generated by the task config
            enum:
              - FORM_SUBMIT
              - CHANGE_APPROVE
              - TIMEOFF_APPROVE
              - SCENARIO_CHANGES_APPROVE
              - SCENARIO_CHANGES_CREATE
              - ORG_IMPORT
              - COMP_REVIEW_APPROVAL_SUBMIT
              - SCENARIO_APPROVAL_SUBMIT
              - APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER
              - ACTION
          dueDate:
            $ref: '#/components/schemas/DueDate'
          pastDueAction:
            type: string
            description: sets pastDueAction on the task when it's generated
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: sets isSkippable on the task
          label:
            type: string
            description: >-
              human-readable label that should be used for all tasks associated
              with the config as the task name
          description:
            type: string
            description: >-
              description for all tasks associated with the config that should be
              used in notifications
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Question:
        type: object
        required:
          - id
          - question
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          question:
            type: string
            example: What is your favorite color?
            description: text of the question
          fieldId:
            type: string
            description: >-
              if the question is linked to a field, the id of that field. Any
              question responses will be automatically saved to the field
          type:
            type: string
            description: datatype of the question
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the question datatype (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          options:
            type: object
            description: validation options
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ReportFilter:
        type: object
        required:
          - filter
          - label
        properties:
          label:
            type: string
            description: human-readable label for the filter
          filter:
            type: string
            description: filter expression
      ReportQuery:
        type: object
        required:
          - options
        properties:
          series:
            type: array
            description: series to evaluate
            items:
              $ref: '#/components/schemas/ReportSeriesQuery'
          filters:
            type: array
            description: >-
              filters to crosstab all results by (deprecated in reports V2, should
              use groupBy instead)
            items:
              $ref: '#/components/schemas/ReportFilter'
          content:
            type: string
            description: >-
              content block to evaluate as a Carrot Template, as an alternative to
              using series
          startDate:
            type: string
            description: start date, in either relative (-7d) or exact (YYYY-MM-DD) format
          endDate:
            type: string
            description: >-
              end date, in either relative (-7d) or exact (YYYY-MM-DD) format; if
              not present, defaults to today
          interval:
            type: string
            description: >-
              interval, if the query is a timeseries; if no interval, query is
              crosstabbed
            enum:
              - DAY
              - WEEK
              - MONTH
              - QUARTER
              - FISCAL_QUARTER
              - YEAR
              - FISCAL_YEAR
          intervalDates:
            type: array
            description: >-
              interval dates, if a specific set of irregular dates are being
              queried in a timeseries
            items:
              type: string
              format: date
          options:
            type: object
            description: options, including format, scenarioId, projectHires
      ReportSeriesQuery:
        type: object
        required:
          - color
          - label
          - options
          - 'y'
        properties:
          label:
            type: string
            description: label to use
          color:
            type: string
            description: color to use
          'y':
            type: string
            example: sum{headcount, gender:f} / sum{headcount}
            description: y-value to calculate
          x:
            type: string
            example: sum{headcount, gender:f} / sum{headcount}
            description: x-value to calculate (only needed for future scatterplot feature)
          options:
            type: object
            description: special options, such as scenarioId, format, projectHires
          groupByConfigs:
            type: array
            description: Configuration for aggregations performed by the groupBy operator
            items:
              $ref: '#/components/schemas/GroupByConfig'
      TableRef:
        type: object
        required:
          - tableId
          - tableName
        properties:
          tableId:
            type: string
            description: the table id this field references
          tableName:
            type: string
            description: the table name this field references
      Template:
        type: object
        required:
          - content
          - createAt
          - createId
          - format
          - id
          - name
          - orgId
          - tags
          - type
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            description: template name, must be unique to organization
          description:
            type: string
            description: description of template
          content:
            type: string
            description: template content
          stylesheet:
            type: string
            description: template inline stylesheet
          format:
            type: string
            description: template content format - must be MARKDOWN
            enum:
              - HTML
              - MARKDOWN
              - TEXT
          type:
            type: string
            description: type of template
            enum:
              - DOCUMENT
              - EMAIL
          tags:
            type: array
            description: tags to organize the purpose of the template
            items:
              type: string
          filename:
            type: string
            description: document filename CQL
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      AppConfig:
        type: object
        required:
          - appId
          - createAt
          - createId
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          appId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: app id
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id, if this person corresponds with a user
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org id, if this app config corresponds with an org
          fieldMappers:
            type: array
            description: list of default field mappers
            items:
              $ref: '#/components/schemas/FieldMapper'
          customFieldMappers:
            type: array
            description: list of custom field mappers by a user
            items:
              $ref: '#/components/schemas/FieldMapper'
          defaultOutboundFieldMappers:
            type: array
            description: list of default outbound field mappers
            items:
              $ref: '#/components/schemas/OutboundFieldMapper'
          customOutboundFieldMappers:
            type: array
            description: list of custom outbound field mappers
            items:
              $ref: '#/components/schemas/OutboundFieldMapper'
          disabledFieldMappers:
            type: array
            description: list of disabled inbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          enabledOutboundFieldMappers:
            type: array
            description: list of enabled outbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          templateMatchers:
            type: array
            description: template field matchers defined by a user
            items:
              type: object
              additionalProperties:
                type: string
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          options:
            type: object
            description: app specific options
      FieldMapper:
        type: object
        required:
          - charthopFields
          - remoteFields
          - type
        properties:
          id:
            type: string
            description: unique id
          charthopFields:
            type: array
            description: list of ChartHop fields
            items:
              type: string
          remoteFields:
            type: array
            description: list of remote fields
            items:
              type: string
          type:
            type: string
            description: >-
              type of field mapper to apply for mapping remote fields to ChartHop
              fields
          defaultCharthopValue:
            type: string
            description: default charthop value
          defaultRemoteValue:
            type: string
            description: default remote value
          defaultAmount:
            type: number
            description: default amount
          defaultCurrency:
            type: string
            description: default currency
          transformFunction:
            type: string
            description: transform function
          charthopToRemoteTransformFunction:
            type: string
            description: charthop to remote transform function
          map:
            type: object
            description: map
            additionalProperties:
              type: string
          charthopToRemoteMap:
            type: object
            description: charthop to remote map
            additionalProperties:
              type: string
          idField:
            type: string
            description: id field
          nameField:
            type: string
            description: name field
          remoteToCharthopMultiplier:
            type: number
            description: remote to Charthop Multiplier
      OutboundFieldMapper:
        type: object
        required:
          - description
          - namespace
          - valueMappers
        properties:
          description:
            type: string
          id:
            type: string
          namespace:
            type: string
          options:
            type: object
          valueMappers:
            type: array
            items:
              $ref: '#/components/schemas/OutboundValueMapper'
      OutboundValueMapper:
        type: object
        required:
          - charthopSide
          - externalSide
        properties:
          charthopSide:
            type: object
          externalSide:
            type: string
          id:
            type: string
          options:
            type: object
      ApprovalChain:
        type: object
        required:
          - approvalNotifierUserIds
          - id
          - name
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity id
          entityType:
            type: string
            example: SCENARIO
            description: entity type
            enum:
              - COMP_REVIEW
              - SCENARIO
              - TIMEOFF
          name:
            type: string
            example: Comp Review 06/15/2022
            description: human-readable name of approval chain
          isPreview:
            type: boolean
            example: true
            description: >-
              isPreview specifies that this is a preview for implementations that
              use it (e.g. Compensation Reviews)
          fallbackApproverJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the jobId of the fallback approver
          fallbackApproverJobError:
            type: string
            description: most recent error for fallback approver
          approvalNotifierUserIds:
            type: array
            description: ids of any users who should be notified when approval is complete
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ApprovalChainStage:
        type: object
        required:
          - approvalChainId
          - approvalCommentRequired
          - groups
          - id
          - order
          - orgId
          - rejectBehavior
          - rejectionCommentRequired
          - status
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          approvalChainId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent approval chain id
          inclusionExpression:
            type: string
            description: optional custom expression to determine stage inclusion behavior
          inclusionBehavior:
            type: string
            description: determines whether stage is conditional based on an expression
            enum:
              - ONLY_INCLUDE_IF
              - EXCLUDE_IF
          expandExpression:
            type: string
            description: optional custom expression to determine approval request tree
          rejectBehavior:
            type: string
            description: determines which stage becomes active when a rejection event happens
            enum:
              - BACK_TO_BEGINNING
              - PREVIOUS_PHASE
          status:
            type: string
            description: status of the stage
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          approvalCommentRequired:
            type: boolean
            description: requires a comment on an approval event
          rejectionCommentRequired:
            type: boolean
            description: requires a comment on an rejection event
          order:
            type: integer
            format: int32
            description: order of stage in approval chain
          groups:
            type: array
            description: list of groups that are involved in this approval stage
            items:
              $ref: '#/components/schemas/ApprovalGroup'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ApprovalRequest:
        type: object
        required:
          - approvalChainId
          - entityId
          - entityType
          - id
          - orgId
          - stageOverrides
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity id
          entityType:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity type
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: comp review id
          approvalChainId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent approval chain id
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the user who requested the approval
          stageOverrides:
            type: array
            description: list of configuration fields
            items:
              $ref: '#/components/schemas/ApprovalChainStageOverride'
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Assessment:
        type: object
        required:
          - id
          - label
          - orgId
          - slug
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Engineering Budget Q2 2019
            description: human-readable label of assessment
          slug:
            type: string
            example: engineering-budget-q2-2019
            description: unique slug of assessment
          type:
            type: string
            description: type of assessment
            enum:
              - REVIEW
              - COMP_REVIEW
              - SURVEY
          fields:
            type: object
            description: assessment fields (description)
          shareAccess:
            type: array
            description: users who have been granted access to this assessment
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: view sensitivity of this assessment
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          color:
            type: string
            description: color of assessment
            pattern: ^#[a-f0-9]{6}$
          startDate:
            type: string
            format: date
            description: >-
              Date this assessment begins. In the context of REVIEW goals, the
              date the review cycle begins.
          endDate:
            type: string
            format: date
            description: >-
              Date this assessment ends, or is completed. In the context of REVIEW
              assessment, the date the review cycle ends.
          status:
            type: string
            description: status of this assessment - DRAFT, ACTIVE, DONE
            enum:
              - DRAFT
              - ACTIVE
              - DONE
          doneAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp when the status of this assessment was set to done
          taskCount:
            type: integer
            format: int32
            example: 12
            description: number of tasks associated with this assessment
          taskDoneCount:
            type: integer
            format: int32
            example: 3
            description: number of tasks associated with this assessment that are done
          peopleIncludedCount:
            type: integer
            format: int32
            example: 12
            description: number of people included in this assessment
          query:
            type: string
            description: Query for which people/jobs can be included in the review.
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      CategorySort:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          categoryIds:
            type: array
            description: ordered list of category ids of an org
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Comment:
        type: object
        required:
          - content
          - createAt
          - createId
          - entityId
          - entityType
          - id
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org id the comment belongs to
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this comment belongs to, should be used with
              entityId
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity the comment was posted on
          entityType:
            type: string
            description: type of entity the comment was posted on
            enum:
              - CHANGE
              - ASSESSMENT
              - SCENARIO
              - APPROVAL_APPROVE
              - APPROVAL_REJECT
              - APPROVAL_REASSIGN
              - APPROVAL_WITHDRAW
          content:
            $ref: '#/components/schemas/Markup'
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp that the comment was posted
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id who posted the comment
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
          deleteId:
            type: string
            description: user who deleted the comment
      Markup:
        type: object
        required:
          - type
          - value
        properties:
          type:
            type: string
            description: Type of markup
            enum:
              - HTML
              - MARKDOWN
              - TEXT
          value:
            type: string
            description: Markup content in its source format
      CompBand:
        type: object
        required:
          - baseInterval
          - color
          - id
          - label
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: L15
            description: human-readable name of content
          color:
            type: string
            example: '#ffee4a'
            description: hex color associated with the band level
          baseCompMax:
            $ref: '#/components/schemas/Money'
          baseCompMid:
            $ref: '#/components/schemas/Money'
          baseCompMin:
            $ref: '#/components/schemas/Money'
          baseSpread:
            type: number
            description: spread percent used to calculate base comp from the midpoint
          baseInterval:
            $ref: '#/components/schemas/EnumValue'
          baseTargetPay:
            $ref: '#/components/schemas/Money'
          baseTargetPayPercentile:
            type: number
            description: >-
              target pay associated with open jobs at this band level, specified
              as a percentile of [min,max]
          jobTierOneField:
            $ref: '#/components/schemas/JobTierField'
          jobTierTwoField:
            $ref: '#/components/schemas/JobTierField'
          jobTierThreeField:
            $ref: '#/components/schemas/JobTierField'
          jobLevel:
            $ref: '#/components/schemas/TableRowRef'
          equityTargetShares:
            type: number
            description: target equity for the band, in shares
          equityTargetPercentOfBase:
            type: number
            description: target equity for the band, as a percentage of base
          equityTargetValue:
            type: number
            description: >-
              target equity for the band, as a monetary value, in the same
              currency as the base
          variableValue:
            $ref: '#/components/schemas/Money'
          variablePercentOfBase:
            type: number
            description: >-
              variable compensation for the band, specified as a percentage of
              base
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      TableRowRef:
        type: object
        required:
          - id
          - tableId
          - tableName
        properties:
          tableId:
            type: string
          tableName:
            type: string
          id:
            type: string
          label:
            type: object
      Customer:
        type: object
        required:
          - id
          - name
          - status
        properties:
          id:
            type: string
            description: unique id of customer
          name:
            type: string
            description: name of customer
          email:
            type: string
            description: email address for billing purposes
          billAddress:
            $ref: '#/components/schemas/Address'
          industry:
            type: string
            description: industry that customer is in
          source:
            type: string
            description: source of customer signup
            enum:
              - ADP_MARKETPLACE
              - SELF_SERVE
              - SELF_SERVE_TEST
              - SEQUOIA_ONE
              - CONNECT
          status:
            type: string
            description: current status
            enum:
              - ACTIVE
              - INACTIVE
              - TRIAL
              - CHURN
              - PAYMENT_ERROR
          stripeCustomerId:
            type: string
            description: stripe customer id
          salesforceAccountId:
            type: string
            description: salesforce account id
            pattern: ^[a-zA-Z0-9]{15}|[a-zA-Z0-9]{18}$
          products:
            type: array
            description: products that this customer has purchased
            items:
              $ref: '#/components/schemas/ProductItem'
          startDate:
            type: string
            format: date
            description: initial date of billing
          endDate:
            type: string
            format: date
            description: >-
              end of service date for churning customers -- on or after this date,
              service should be disabled
          nextInvoiceDate:
            type: string
            format: date
            description: date of next invoice
          orgCount:
            type: integer
            format: int32
            description: number of orgs covered by this customer
          primaryHeadCount:
            type: integer
            format: int32
            description: number of total headcount across all orgs
          secondaryHeadCount:
            type: integer
            format: int32
            description: number of total headcount across all orgs
          primaryHeadCountFilter:
            type: string
            description: primary headcount filter - used for billing purposes
          secondaryHeadCountFilter:
            type: string
            description: secondary headcount filter - used for billing purposes
          arr:
            type: number
            description: current ARR of the customer based on most recent invoice
          projectedArr:
            type: number
            description: >-
              projected ARR of the customer for upcoming invoice, based on plan
              and headcount
          trialStartDate:
            type: string
            format: date
            description: date this customer begins their trial period
          trialEndDate:
            type: string
            format: date
            description: date this customer ends their trial period
          stripeSubscriptionSync:
            type: string
            description: Stripe subscription settings
            enum:
              - SYNC
              - DELETE
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          createId:
            type: string
            description: created by
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: updated timestamp
          updateId:
            type: string
            description: updated by
      ProductItem:
        type: object
        required:
          - productId
          - stripePriceId
        properties:
          productId:
            type: string
          stripePriceId:
            type: string
      DataView:
        type: object
        required:
          - id
          - name
          - orgId
          - slug
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            description: data view name
          slug:
            type: string
            description: slug for URL
            readOnly: true
          columns:
            type: string
            example: image,name,title
            description: comma delimited list of columns
          type:
            type: string
            description: type of data view
            enum:
              - ANY
              - DATA_SHEET
              - ORG_CHART
              - MAP
          entityType:
            type: string
            description: entity type being viewed
          columnWidths:
            type: object
            description: map of column names to widths in pixels
            additionalProperties:
              type: number
              format: double
          date:
            type: string
            description: >-
              date of view, in either relative (-7d) or exact (YYYY-MM-DD) format;
              if not present, defaults to today
          startDate:
            type: string
            description: >-
              start date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          endDate:
            type: string
            description: >-
              end date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          filter:
            type: string
            example: managerCount:1
            description: filter query
          sort:
            type: string
            example: name,title
            description: comma delimited list of columns by which to sort
          groupBy:
            type: string
            example: title
            description: column to group duplicates by
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              data view
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: sensitivity level of data view
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      EmailTemplate:
        type: object
        required:
          - category
          - id
          - name
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          name:
            type: string
            example: self_serve_welcome
            description: name of the email template
          category:
            type: string
            description: email category
            enum:
              - ADMINISTRATIVE
              - BILLING
              - DATA_IMPORT_AND_SYNC_STATUS
              - TRIAL_REMINDERS
      ExchangeRate:
        type: object
        required:
          - currency
          - date
          - id
          - rates
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            description: org id, if an org-specific exchange rate is in use
          date:
            type: string
            format: date
            description: date
          currency:
            type: string
            description: base currency
          rates:
            type: object
            description: >-
              exchange rates, per currency - the multiplier to convert the base
              currency into the foreign currency
            additionalProperties:
              type: number
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: updated timestamp
      FileEntity:
        type: object
        required:
          - bytes
          - ext
          - filename
          - id
          - originalFilename
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id of file
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity id that the file is attached to
          entityType:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity type (should only be PERSON or USER)
            enum:
              - ACTION
              - AGREEMENT
              - APP
              - APP_CONFIG
              - APPROVAL_CHAIN
              - APPROVAL_CHAIN_STAGE
              - APPROVAL_REQUEST
              - ASSESSMENT
              - BUDGET_POOL
              - BUNDLE
              - CATEGORY
              - CATEGORY_SORT
              - CHANGE
              - COMMENT
              - COMP_BAND
              - COMP_REVIEW
              - CONTENT
              - CUSTOMER
              - DATA_VIEW
              - EXCHANGE_RATE
              - EMAIL_TEMPLATE
              - FIELD
              - FILE
              - FORM
              - FORM_DRAFT
              - FORM_RESPONSE
              - GEOCODE
              - GROUP
              - GUIDELINE
              - JOB
              - JOB_LEVEL
              - MEDIA
              - MESSAGE
              - MULTIPLIER
              - ORG
              - ORG_CONFIG
              - PERSON
              - PROFILE_TAB
              - POLICY
              - POSITION
              - PROCESS
              - PRODUCT
              - QUERY_TOKEN
              - QUESTION
              - REPORT
              - REPORT_CHART
              - ROLE
              - SCENARIO
              - STOCK_PRICE
              - TABLE
              - TABLE_ROW
              - TASK_CONFIG
              - TEMPLATE
              - TASK
              - TOKEN
              - TIMEOFF
              - TRACKED_GROUP
              - USER
          field:
            type: string
            example: offerLetter
            description: field name that the file uses, if the file is tied to a field
          sensitive:
            type: string
            example: PERSONAL
            description: level of sensitivity of the file, if the file is not tied to a field
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          filename:
            type: string
            example: Offer Letter - Bob Smith.pdf
            description: customer facing filename of file
          originalFilename:
            type: string
            example: BOB-SMITH.pdf
            description: original filename of file
          type:
            type: string
            example: application/pdf
            description: mime type of file
          ext:
            type: string
            example: pdf
            description: extension of file
          bytes:
            type: integer
            format: int64
            example: 102342
            description: size of file in bytes
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Form:
        type: object
        required:
          - fields
          - id
          - label
          - options
          - orgId
          - status
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: 'Health Index: Q2'
            description: human-readable full name of form
          description:
            type: string
            example: >-
              The Engineering department, where engineers develop new technology
              and products.
            description: description of form
          fields:
            type: array
            description: ordered list of fields being collected in this form
            items:
              $ref: '#/components/schemas/FormField'
          blocks:
            type: array
            description: ordered list of blocks being collected in this form
            items:
              $ref: '#/components/schemas/FormBlock'
          status:
            type: string
            description: status of the form
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          type:
            type: string
            description: type of the form
            enum:
              - BUILT_IN
              - CUSTOM
          targetType:
            type: string
            description: >-
              target type that the form can be filled out about (null defaults to
              PERSON for backwards compatibility)
            enum:
              - NONE
              - PERSON
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          submitFilter:
            type: string
            description: >-
              filter that controls which respondents can submit this form. The
              form:submit permission, if present, overrides this filter
          responseReadFilter:
            type: string
            description: >-
              filter that controls who can read the form responses. The
              formResponse:read permission, if present, overrides this filter
          useFieldAccess:
            type: boolean
            description: >-
              if this option is on, then form response answers will use field
              permissions to determine access to those responses
          approval:
            type: string
            description: approval needed, if any approval is required
            enum:
              - MANAGER
              - GRAND_MANAGER
          authorSensitive:
            type: string
            description: >-
              view sensitivity for the author of this form - the level of view
              access required to view the createId and updateId fields. If null,
              the author's identity is always visible as long as the viewer can
              read the form response. If set to PRIVATE, the author's identity is
              stored in ChartHop, but protected such that even users with
              sensitive access cannot access the data. If set to ANONYMOUS, the
              author's identity is not stored in ChartHop at all.
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
          options:
            type: object
            description: options, such as notification settings
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: 2017-01-24T13:52Z
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      FormResponse:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          externalId:
            type: string
            example: google:1234567890
            description: >-
              if the response was imported from an external system, the unique
              identifier of the response from that system
          formId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: form id that the response is a response for
          formVersionId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: form version id that the response is a response for
          submitPersonId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: person id who filled out the form response (null if anonymous)
          submitUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              user id who filled out the form response (can be null if anonymous
              or imported data)
          changeId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: change id, if the form response is linked to a DATA change
          assessmentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: assessment id, if the form response is related to an assesment
          shareAccess:
            type: array
            description: >-
              list of share access, if the form response has been shared with
              anyone
            items:
              $ref: '#/components/schemas/ShareAccess'
          authorSensitive:
            type: string
            description: >-
              sensitivity level of the author of the form response, if it differs
              from the form response
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
          targetEntityId:
            type: string
            description: target entity id -- the entity that the form response is about
          targetEntityType:
            type: string
            description: target entity type -- the entity that the form response is about
            enum:
              - NONE
              - PERSON
          answers:
            type: array
            description: list of answers in the form response
            items:
              $ref: '#/components/schemas/FormResponseAnswer'
          submitAt:
            type: integer
            format: int64
            description: timestamp that the form response was submitted
          approvalAt:
            type: integer
            format: int64
            description: timestamp that the form response was approved
          approvalId:
            type: string
            description: user id who approved the form response
          approvalNote:
            type: string
            description: >-
              note left by the user who approved -- this is for backwards
              compatibility with the old approval system
          status:
            type: string
            description: status of form response
            enum:
              - ACTIVE
              - PROPOSED
              - REJECTED
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      FormResponseAnswer:
        type: object
        required:
          - id
          - questionId
        properties:
          id:
            type: string
          questionId:
            type: string
          value:
            type: object
          type:
            type: string
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            enum:
              - SINGLE
              - LIST
              - SET
      FormVersion:
        type: object
        required:
          - formId
          - id
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          formId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: form id
          form:
            $ref: '#/components/schemas/Form'
          questions:
            type: array
            description: questions contained in form, at the time of version creation
            items:
              $ref: '#/components/schemas/Question'
          createAt:
            type: string
            example: 2017-01-24T13:52Z
            description: created timestamp
      Group:
        type: object
        required:
          - aliases
          - fields
          - id
          - name
          - orgId
          - slug
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            example: Engineering
            description: unique name of group
          slug:
            type: string
            example: engineering
            description: unique slug of group
          code:
            type: string
            example: D123
            description: external code identifier of the group
          aliases:
            type: array
            description: aliases for group
            uniqueItems: true
            items:
              type: string
          type:
            type: string
            description: type of group
            enum:
              - LOCATION
              - DEPARTMENT
              - TEAM
              - BAND
              - JOBCODE
          leadJobIds:
            type: array
            description: >-
              a list of group leaders, or null if the leader of the group should
              be automatically derived from the org chart
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          fields:
            type: object
            description: group fields (currently only description)
          address:
            $ref: '#/components/schemas/Address'
          level:
            type: integer
            format: int32
            description: level of the group, for BAND type only
          func:
            type: string
            description: Job function category of the group, for DEPARTMENT type only
            enum:
              - BD
              - CS
              - DESIGN
              - ENGINEERING
              - EXECUTIVE
              - FINANCE
              - GENERAL
              - IT
              - LEGAL
              - MARKETING
              - OPERATIONS
              - PEOPLE
              - PRODUCT
              - RECRUITING
              - SALES
              - SECURITY
              - SUPPORT
          locationType:
            type: string
            description: Type of the location, for LOCATION type only
            enum:
              - OFFICE
              - REMOTE
          parentGroupId:
            type: string
            description: parent group id
          timezone:
            type: string
            example: America/New_York
            description: timezone of the group, for LOCATION type only
          compMin:
            $ref: '#/components/schemas/Money'
          compMax:
            $ref: '#/components/schemas/Money'
          imagePath:
            type: string
            description: path to profile image
            pattern: ^[a-zA-Z0-9._/-]*$
          color:
            type: string
            description: color of group
            pattern: ^#[a-f0-9]{6}$
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      GroupType:
        type: object
        required:
          - id
          - name
          - slug
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            example: Engineering
            description: unique name of group
          slug:
            type: string
            example: engineering
            description: unique slug of group
          requirePositions:
            type: boolean
            description: whether the group requires members to be positions
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Guideline:
        type: object
        required:
          - appliedField
          - basisType
          - calculationType
          - compReviewId
          - createAt
          - createId
          - enablePopulateValue
          - flagMode
          - id
          - label
          - orgId
          - sourceField
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: comp review id
          label:
            type: string
            example: Merit Guideline
            description: guideline name
          budgetPoolId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the budget pool the guideline is allocated from
          participantsExpr:
            type: string
            example: is:person and tenure>=12
            description: CQL filter to determine which employees the guideline applies to
          appliedField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline applies to
          sourceField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline is calculated from
          calculationType:
            type: string
            example: TARGET
            description: >-
              how does the guideline calculate the target value? e.g. is there a
              range (min/max) or only a target
            enum:
              - RANGE
              - TARGET
          flagMode:
            type: string
            example: NONE
            description: how does the guideline indicate deviations from the target amount
            enum:
              - DEVIATION_THRESHOLD
              - NONE
          flagDeviationThreshold:
            type: number
            example: 0.75
            description: >-
              the threshold (percent) against which deviations from the guideline
              are flagged
          enablePopulateValue:
            type: boolean
            example: false
            description: >-
              whether or not the target values from the guidelines are
              pre-populated in the given columns
          basisType:
            type: string
            example: CUSTOM
            description: >-
              how an individual guideline value itself is calculated, e.g.
              percentage of the appliedField, fixed amount, or custom CQL
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          basisExpr:
            type: string
            example: 'tenure>12 ? (base * 0.04) : (base * 0.02)'
            description: >-
              if basisType.CUSTOM, the custom CQL expression used to generate the
              guideline value
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedAmountRange:
            $ref: '#/components/schemas/MoneyRange'
          fixedValueRange:
            $ref: '#/components/schemas/ValueRange'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      JobLevel:
        type: object
        required:
          - id
          - label
          - orgId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Associate
            description: human-readable name of job level
          code:
            type: string
            example: BF01
            description: job level code
          benchmarkType:
            $ref: '#/components/schemas/EnumValue'
          benchmarkLevel:
            $ref: '#/components/schemas/EnumValue'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      LegalDoc:
        type: object
        required:
          - date
          - id
          - name
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          name:
            type: string
            example: ChartHop Service Agreement
            description: human-readable full name of form
          content:
            type: string
            description: legal doc content
          date:
            type: string
            format: date
            description: content by date
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: 2017-01-24T13:52Z
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
      Message:
        type: object
        required:
          - createAt
          - id
          - notificationType
          - orgId
          - type
          - userId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          type:
            type: string
            description: type of message
            enum:
              - CHAT
              - EMAIL
              - WEB
          notificationType:
            type: string
            description: type of notification (SUCCESS, ERR, ANNOUNCEMENT etc.)
            enum:
              - SUCCESS
              - WARN
              - ERROR
              - COMMENT
              - TASK_COMPLETED
              - TASK_ASSIGNED
              - REMINDER
              - ANNOUNCEMENT
              - PROCESS_ERROR
              - PROCESS_DONE
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user who receives the message
          content:
            type: string
            description: message content
          title:
            type: string
            description: message title
          messageUrl:
            type: string
            description: link to message content (if applicable)
          key:
            type: string
            description: >-
              key of message if applicable (e.g. product-tour,
              import-complete-{id})
          readAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: read timestamp
          seenAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: seen timestamp
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
      Multiplier:
        type: object
        required:
          - expr
          - id
          - label
          - orgId
          - value
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Non-technical
            description: human-readable name of multiplier
          code:
            type: string
          value:
            type: number
            example: 0.75
            description: amount to multiply the initial value by
          expr:
            type: string
            example: department!="Engineering"
            description: calculated expression to match against the job
          category:
            type: string
            example: Location
            description: tag to group multipliers together by
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Org:
        type: object
        required:
          - id
          - name
          - options
          - slug
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          customerId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: customer for billing processing
          name:
            type: string
            example: Acme Corp
            description: name of organization
          slug:
            type: string
            example: acme-corp
            description: unique slug of organization
          type:
            type: string
            example: PRIVATE
            description: type of organization
            enum:
              - PRIVATE
              - PUBLIC
              - EDU
              - GOV
              - NONPROFIT
              - DEMO
              - TEST
          industry:
            type: string
            example: Software and Internet
            description: industry
          estEmployees:
            type: integer
            format: int32
            description: approximate number of employees
          estRevenue:
            type: integer
            format: int32
            description: approximate amount of revenue
          foundedYear:
            type: integer
            format: int32
            example: 1998
            description: year of founding
          address:
            $ref: '#/components/schemas/Address'
          phone:
            type: string
            description: company phone number in E.164 format
            pattern: ^\+?[1-9]\d{1,14}$
          email:
            type: string
            example: bob@example.com
            description: primary contact email
          url:
            type: string
            format: uri
            description: website URL
          domains:
            type: array
            description: domains used by this org
            items:
              $ref: '#/components/schemas/OrgDomain'
          status:
            type: string
            description: current status of organization
            enum:
              - ACTIVE
              - INACTIVE
              - DISABLED
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          currencies:
            type: array
            description: >-
              types of currencies in use, with the first currency the primary
              currency
            items:
              type: string
            maxItems: 20
            minItems: 1
          stock:
            type: string
            example: GOOG
            description: stock symbol
          timezone:
            type: string
            example: America/New_York
            description: timezone in use
          appTime:
            type: string
            example: '09:00'
            description: >-
              approximate time of day for daily app syncs to run (defaults to 9am
              Eastern time)
          zone:
            type: integer
            format: int32
            example: 2
            description: infrastructure zone
          fiscalStart:
            type: integer
            format: int32
            description: >-
              number of months into the calendar year that the fiscal year starts
              (1 = February, 2 = March)
          headJobId:
            type: string
            description: head of the organization
          startDate:
            type: string
            description: start date of history
          sensitiveFields:
            type: object
            description: map of sensitive field defaults
          options:
            $ref: '#/components/schemas/OrgOptions'
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          onboardSteps:
            type: array
            description: list of onboard steps that this Org has completed (or skipped)
            items:
              $ref: '#/components/schemas/OnboardStepResult'
          onboarding:
            type: boolean
            description: >-
              current onboarding status of an organization, allowing clearing of
              org
          selfServeImporting:
            type: boolean
            description: >-
              completion status of initial import for orgs signed up via self
              serve
          headCount:
            type: integer
            format: int32
            description: number of total headcount currently in the org
          userCount:
            type: integer
            format: int32
            description: number of non-ChartHop, non-app users in the org
          activeUserCount:
            type: integer
            format: int32
            description: >-
              number of non-ChartHop, non-app users in the org active in the past
              month
          activeAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last timestamp that any user was active in the org
          changeAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp of most recent changes made to org
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          destroyAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp that the org is marked for data destruction
          destroyId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user who marked the org for data destruction
      OnboardStepResult:
        type: object
        required:
          - name
          - status
        properties:
          name:
            type: string
            description: name of the step completed or skipped
          status:
            type: string
            description: status of the step - either completed or skipped
            enum:
              - COMPLETE
              - SKIP
      OrgDomain:
        type: object
        required:
          - aliases
          - domain
        properties:
          domain:
            type: string
          aliases:
            type: array
            uniqueItems: true
            items:
              type: string
      OrgOptions:
        type: object
        properties:
          aboutEquityMessage:
            type: string
            description: >-
              Message to show in place of the default About equity compensation...
              message on profile tab
          allowedIpsPasswordLogin:
            type: array
            description: IP Allow-list for Password based logins
            items:
              type: string
          atsReqField:
            type: string
            description: >-
              If an org has an ats integration, use their atsReqField instead of
              greenhouseId
          atsReqId:
            type: string
            description: >-
              [sc-78701] the Recruiting builtin category includes (by default) the
              greenhouseId fieldId - this is then overridden in places like the
              column chooser by this option, i.e. leverReqId or jobviteReqId
          bannerHeader:
            type: string
          bannerMessage:
            type: string
          bannerMessageExpireDays:
            type: integer
            format: int32
          brandColor:
            type: string
            description: Changes nav color to use brand coloring
          brandLogo:
            type: string
            description: Show brand logo in header of home page
          costMultiplier:
            type: number
            description: >-
              Blanket multiplier to apply to all headcount costs, to account for
              blanket costs such as taxes and benefits
          country:
            type: string
          customSsoImage:
            type: string
            description: Customizes the SSO button image on the login screen
          customSsoLabel:
            type: string
            description: Customizes the SSO button label on the login screen
          customWelcomeMessage:
            type: string
          dashboardAnniversariesDaysAhead:
            type: integer
            format: int32
          dashboardAnniversariesDaysBack:
            type: integer
            format: int32
          dashboardAnnouncementMessage:
            type: string
          dashboardCalendarTypes:
            type: object
            description: What types of calendars to show in panel
          dashboardChangeDaysAhead:
            type: integer
            format: int32
            description: How many days ahead to look for changes on home screen
          dashboardChangeDaysAheadMembers:
            type: integer
            format: int32
            description: >-
              How many days ahead to look for changes, for members only — i.e. set
              this to 0 to disallow regular people seeing in the future
          dashboardChangeDaysBack:
            type: integer
            format: int32
            description: How many days back to look for changes on home screen
          dashboardChangeTypes:
            type: object
            description: >-
              Which change types to show on home screen and calendar, uses
              ChangeDao.ChangeType as enum
          dashboardGlobal:
            type: boolean
            description: >-
              If you want employees to see all jobs regardless of location set
              this to true
          dashboardHideAnniversaries:
            type: boolean
          dashboardHideOpenJobs:
            type: boolean
          dashboardHidePeopleMoves:
            type: boolean
          dashboardRestrictOpenJobs:
            type: boolean
          dateFormat:
            type: string
          defaultMessageChannel:
            $ref: '#/components/schemas/MessageChannelConfig'
          disableCompReviewV2Emails:
            type: boolean
          disableDataAggregation:
            type: boolean
          disableDataImportTypes:
            type: boolean
          disableDefaultDropdownFields:
            type: boolean
            description: >-
              Does not show any fields in the org chart visualize dropdown that
              they don't have control over visibility for (e.g. age,
              directJobCount, grandManager)
          disableLiveQuery:
            type: boolean
          disableOrgExportLimit:
            type: boolean
            description: Allows powerpoint exports of over 1000 jobs
          disableSiblingIndicators:
            type: boolean
            description: Disables the sibling indicators on the org chart
          disableWelcomeEmail:
            type: boolean
          easyAppInstallConfigManageEnabled:
            type: boolean
            description: >-
              Enables easy app install (on by default for self-serve & standard
              orgs)
          editJobFieldOrder:
            type: object
            description: Allows ordering of fields within tabs of the edit job dialog
            additionalProperties:
              type: array
              items:
                type: string
          enableAISummary:
            type: boolean
            description: Enables AI summaries in dashboards
          enableActions:
            type: boolean
          enableAdp:
            type: boolean
          enableAdvancedApprovals:
            type: boolean
            description: Enables department-based conditional approvals
          enableAdvancedDatePicker:
            type: boolean
            description: Enables the new date picker in the datasheet
          enableAiFormResponseSummary:
            type: boolean
          enableAnonymousForms:
            type: boolean
          enableAzure:
            type: boolean
          enableBackwardsCompatibleCompBandRead:
            type: boolean
            description: Backwards compatibility flags for bands UAC
          enableBasicAccountSettings:
            type: boolean
          enableCalendarExport:
            type: boolean
          enableCalendarScreen:
            type: boolean
          enableChangeExport:
            type: boolean
          enableColumnCache:
            type: boolean
          enableCompReviewV2LaunchFlag:
            type: boolean
          enableCompensationBands:
            type: boolean
            description: Enables Comp bands V2 (on by default for Premium customers)
          enableConditionalApprovalStages:
            type: boolean
          enableCsvImporterMatchFields:
            type: boolean
          enableDataSheetPersons:
            type: boolean
            description: Allows viewing persons on the data sheet
          enableDatasheetDepartedPeople:
            type: boolean
          enableDelightedSurvey:
            type: boolean
            description: Enables the delighted survey popup
          enableExperimentalScreenshotLayoutChanges:
            type: boolean
          enableFormBuilderV2:
            type: boolean
          enableFormResponsesSheet:
            type: boolean
          enableFullNamesTitlesLegacy:
            type: boolean
            description: Shows full names in powerpoint exports
          enableFullScreenForms:
            type: boolean
          enableGeoip:
            type: boolean
          enableGoogle:
            type: boolean
          enableGrantCustomization:
            type: boolean
            description: Enables grant aliases in the financial settings
          enableGroupsWithoutPositions:
            type: boolean
          enableHideEquityCalculator:
            type: boolean
            description: Hides the value calculator on the equity section of the profile
          enableHrisOnboarding:
            type: boolean
          enableLabsScreen:
            type: boolean
            description: Allows access to a UI to turn on certain alpha/beta features
          enableLongLivedCache:
            type: boolean
            description: >-
              Enables a managed service that, on API startup, primes those orgs'
              caches, for both column cache, as well as the primary org cache.
              These keys should also last for 24+ hours and therefore be always
              kept warm.
          enableMicrosoft:
            type: boolean
          enableMultipleVisualizeOrgChart:
            type: boolean
            description: Allows users to select multiple fields to visualize on the org chart
          enableNavRefresh:
            type: boolean
          enableNewHireManagement:
            type: boolean
          enableOkta:
            type: boolean
          enableOneLogin:
            type: boolean
          enableOrgChartIndicators:
            type: boolean
            description: Shows the +XX job sibling indicators on the org chart
          enableOutboundPayroll:
            type: boolean
          enablePassword:
            type: boolean
          enablePowerpointScreenshot:
            type: boolean
            description: Enables the powerpoint screenshot export feature, on by default
          enableRefreshedReportsV2:
            type: boolean
          enableReportBuildV2:
            type: boolean
          enableResources:
            type: boolean
            description: Enables resources feature
          enableRickrollLogin:
            type: boolean
          enableSaml:
            type: boolean
          enableStandardAccess:
            type: boolean
            description: Enables standard sharing access in scenarios
          enableTeamOrgChart:
            type: boolean
            description: Enables groups with positions feature
          enableTemplatesRichTextEditorV2:
            type: boolean
          enableTimeOffRequests:
            type: boolean
          enableTransformFieldMapper:
            type: boolean
            description: >-
              Enables the ability to configure the One to One field mapper with a
              Charthop Default Value
          freeTrialExperienceDec2023:
            type: boolean
            description: Lets users know that their basic trial will be ending
          grantValueDefault:
            type: boolean
            description: If enabled, then by default grants are in value, not shares
          greenhouseDomain:
            type: string
            description: Allows customization of greenhouse subdomain for XHOP app
          hiddenHead:
            type: boolean
            description: >-
              the top-level job in the org will be hidden on the org chart. Use
              this option to create multiple org heads
          hideCompensationTab:
            type: boolean
          hideEquityTab:
            type: boolean
          hideEquityValuation:
            type: boolean
            description: >-
              Hides the company valuation component of the calculation in the
              Equity profile tab (stock price will still be shown)
          hideProfileCompensationVesting:
            type: boolean
            description: Hides the vesting section of the compensation profile tab
          hideProfileCurrencyConversion:
            type: boolean
            description: Hides profile currency conversion on compensation tab
          hideScenarioTotalRows:
            type: boolean
            description: Hide total rows in scenario change summary tables
          hideTasksTab:
            type: boolean
          hideTimeOffTab:
            type: boolean
          highlightMenuPreferredFields:
            type: array
            items:
              type: string
          isLargeOrg:
            type: boolean
            description: Disables certain UI features for large orgs
          jobDetailPanelFields:
            type: array
            description: >-
              Customize which fields are displayed in the job details panel in the
              Org Chart and their order.
            items:
              type: string
          language:
            type: string
          loginRedirectUrl:
            type: string
          newHireOpenJobMatchingFieldName:
            type: string
            description: Custom field for fallback open job matching in org engine
          notifyUserIds:
            type: array
            description: Sends notification to org users when new Users are assigned
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          offboardingColNames:
            type: string
          offboardingFilter:
            type: string
          onboardingColNames:
            type: string
          onboardingFilter:
            type: string
          orgDefaultData:
            type: string
            description: >-
              Controls what data field will be shown in the Visualize option on
              the Org Chart by default (default is department)
          orgDefaultFilter:
            type: string
          orgEngineCustomIdCustomFieldNameList:
            type: array
            description: >-
              This is an array of fields that an org can use to indicate that one
              or more fields should be used as alternate id
            items:
              type: string
          orgEngineIncrementalBackDays:
            type: integer
            format: int32
            description: Org engine incremental back day option
          orgEngineOnlyLiveJobs:
            type: boolean
            description: Enable live jobs only mode for the org engine
          orgEnginePromoteCustomIdsAsTrueIds:
            type: boolean
            description: >-
              This field promotes the alternate id to the true id and allows HRIS
              to be updated
          pptThemes:
            type: array
            items:
              type: object
              additionalProperties:
                type: object
          preboardingColNames:
            type: string
          preboardingFilter:
            type: string
          preventAtsEmailNotifications:
            type: boolean
            description: Sync History V2 Option to prevent ATS notifications
          profileCompensationChartFields:
            type: array
            description: Controls comp fields show in profile tab
            items:
              type: string
          restrictApproxGeo:
            type: boolean
          restrictExportCsv:
            type: string
            description: Prevent non-sensitive users to export company data in CSV files
            enum:
              - '0'
              - '1'
          restrictExportOrgChart:
            type: string
            description: Prevent non-sensitive users to export company org chart
            enum:
              - '0'
              - '1'
          restrictPersonHistory:
            type: boolean
          restrictReports:
            type: boolean
          restrictScenarios:
            type: boolean
          restrictSelfEdit:
            type: boolean
          restrictSensitiveFilters:
            type: boolean
          restrictVariableView:
            type: boolean
          restrictVestingView:
            type: boolean
          scenarioCols:
            type: string
            description: >-
              The default set of comma separated columns to show in the scenario
              changes screen
          scenarioColsPromotion:
            type: string
          sheetDefaultFilter:
            type: string
          showErrorRows:
            type: boolean
          skipSyncNotify:
            type: boolean
          stockPriceRollingAverage:
            type: integer
            format: int32
          timeOffDaysAhead:
            type: integer
            format: int32
          userSessionDuration:
            type: string
          userSessionInactiveDuration:
            type: string
          welcomeEmailButtonLabel:
            type: string
          welcomeEmailSubject:
            type: string
      BuiltInCategoryMap:
        type: object
        required:
          - categoryId
          - fieldIds
        properties:
          categoryId:
            type: string
            description: id of the built-in category
          fieldIds:
            type: array
            description: set of custom field ids that belongs to the built-in category
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      BuiltInFieldConfig:
        type: object
        required:
          - hidden
          - name
        properties:
          name:
            type: string
            description: reserved codename for the native field
          hidden:
            type: boolean
            description: hidden state of the native field (specific to org)
          places:
            type: integer
            format: int32
            description: decimal places to round native Money fields
      CompensationBandsConfig:
        type: object
        required:
          - annualizedSalaries
          - currencyRounding
          - hasLocationMultiplier
          - hasTargetSalary
          - hourlySalaries
          - hoursPerWeek
          - weeksPerYear
        properties:
          annualizedSalaries:
            type: boolean
            description: whether annualized salaries are used
          annualizedSalariesType:
            type: string
            description: how annualized salaries are represented
          hourlySalaries:
            type: boolean
            description: whether hourly salaries are used
          hourlySalariesType:
            type: string
            description: how hourly salaries are represented
          hoursPerWeek:
            type: number
            description: how many hours per week to use when calculating comp bands
          weeksPerYear:
            type: number
            description: how many weeks per year to use when calculating comp bands
          hasTargetSalary:
            type: boolean
            description: target salary within a comp band
          targetSalaryType:
            type: string
            description: how target salaries are represented
          equityFormat:
            type: string
            description: equity format
          variableBonusFormat:
            type: string
            description: variable bonus format
          tiersNotMappedToCodes:
            type: boolean
            description: >-
              whether or not the tiers are mapped to fields. after we migrate all
              the tiers to be mapped, this flag can be removed
          firstTier:
            type: string
            description: the org's first tier for their comp bands
          secondTier:
            type: string
            description: the org's second tier for their comp bands
          thirdTier:
            type: string
            description: the org's third tier for their comp bands
          hasLocationMultiplier:
            type: boolean
            description: whether the org's location data is used as multipliers
          jobLevelSource:
            type: string
            description: the source for the band job levels
          marketJobLevelSystem:
            type: string
            description: comparable market job level system
          currencyRounding:
            type: array
            description: currency rounding settings in the UI
            uniqueItems: true
            items:
              $ref: '#/components/schemas/Money'
          hasMigratedBands:
            type: boolean
            description: has migrated V1 bands
      OrgConfig:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          hiddenFieldIds:
            type: array
            description: set of hidden field ids of an org
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          builtinCategoryMap:
            type: array
            description: set of maps of the custom fields that belongs to a built-in category
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInCategoryMap'
          builtinFieldConfig:
            type: array
            description: Org configuration for built-in fields
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInFieldConfig'
          compensationBandsConfig:
            $ref: '#/components/schemas/CompensationBandsConfig'
          smartCurrencyOptions:
            type: array
            example: PERSON_HOME_ADDRESS_COUNTRY
            description: >-
              Options for where to source a currency to use when currency is
              unknown. order specific
            items:
              $ref: '#/components/schemas/SmartCurrencyOption'
          smartCurrencyDefault:
            type: string
            example: USD
            description: >-
              The default currency to use when currency is unknown and there are
              no options set in smartCurrencyOptions
          requiredJobFields:
            type: array
            description: Org configuration for required job fields
            uniqueItems: true
            items:
              type: string
          scenarioApprovalChains:
            type: object
            description: Configures which approval chains to use with specific scenario types
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
          isOpenJobRoleApprovalEnabled:
            type: boolean
            description: Whether to show open job approval on Open Job Profile page
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
          grantConfiguration:
            type: array
            description: Org Grant Configuration
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GrantAlias'
      GrantAlias:
        type: object
        required:
          - enabled
          - grantType
        properties:
          alias:
            type: string
          grantType:
            type: string
            enum:
              - ISO
              - NSO
              - RSU
              - SAR
              - PERFORMANCE_SHARES
              - PHANTOM_STOCK
              - RSA
          enabled:
            type: boolean
      SmartCurrencyOption:
        type: object
        required:
          - enabled
          - name
        properties:
          name:
            type: string
            description: codename for the option
            enum:
              - PERSON_HOME_ADDRESS_COUNTRY
              - JOB_LOCATION_COUNTRY
              - JOB_CURRENCY
          enabled:
            type: boolean
            description: determines if this option should be used
      Contact:
        type: object
        required:
          - format
          - type
        properties:
          type:
            type: string
            example: HOME_PHONE
            description: type identifier for the contact
            enum:
              - ADP
              - BAMBOO
              - EMPLOYEE
              - GREENHOUSE
              - GOOGLE
              - GUSTO
              - HUMAANS
              - JOBVITE
              - JUSTWORKS
              - LEVER
              - NAMELY
              - OKTA
              - PAYLOCITY
              - SAPLING
              - PRISM
              - SUCCESSFACTORS
              - RIPPLING
              - TRINET
              - ULTIPRO
              - WORKDAY
              - ZENEFITS
              - LINKEDIN
              - TWITTER
              - GITHUB
              - SLACK
              - TIMETASTIC
              - HOME_EMAIL
              - MOBILE_PHONE
              - WORK_EMAIL
              - HOME_PHONE
              - WORK_PHONE
              - WORK_FAX
              - FINCH
              - ALPHASTAFF
              - LEVER_JOB_POSTING
              - DEEL
              - ADP_ASSOCIATE_ID
              - ADP_WORKER_ID
          value:
            type: string
            example: linkedin:name
            description: value for the contact
          format:
            type: string
            example: EMAIL
            description: format for the value
            enum:
              - PHONE
              - EMAIL
              - ID
      Person:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id, if this person corresponds with a user
          name:
            $ref: '#/components/schemas/Name'
          contacts:
            type: array
            description: contacts (emails, phones, external ids)
            items:
              $ref: '#/components/schemas/Contact'
          address:
            $ref: '#/components/schemas/Address'
          remoteWorkAddress:
            $ref: '#/components/schemas/Address'
          birthDate:
            type: string
            example: '1980-05-12'
            description: birthdate
          startDate:
            type: string
            example: '1980-05-12'
            description: start date of most recent hire
          endDate:
            type: string
            example: '1980-05-12'
            description: end date of most recent hire
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          nameAudioPath:
            type: string
            description: path to pronunciation of the person's name
            pattern: ^[a-zA-Z0-9._/-]+$
          gender:
            type: string
            description: self-reported gender
            enum:
              - MALE
              - FEMALE
              - NONBINARY
              - PREFER_NOT
          ethnicity:
            type: string
            description: self-reported ethnicity
            enum:
              - HISPANIC
              - WHITE
              - BLACK
              - PACIFIC
              - ASIAN
              - NATIVE
              - TWO
              - PREFER_NOT
          fields:
            type: object
            description: fields containing custom data
            additionalProperties:
              type: object
          sensitiveFields:
            type: object
            description: personal sensitivity preferences around specific fields
          sort:
            type: string
            description: sort order
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          inviteOptions:
            $ref: '#/components/schemas/OrgAccess'
          state:
            type: string
            description: current status within the organization
            enum:
              - PRIMARY
              - SCENARIO
              - PENDING
              - INACTIVE
      Name:
        type: object
        required:
          - last
        properties:
          first:
            type: string
            example: Jane
            description: first name
          middle:
            type: string
            example: Quidditch
            description: middle name
          last:
            type: string
            example: Public
            description: last name
          pref:
            type: string
            example: JQ
            description: preferred first name
          prefLast:
            type: string
            example: Smith
            description: preferred last name
      OrgAccess:
        type: object
        required:
          - access
          - orgId
        properties:
          orgId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: org id
          personId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: person id, if this user directly corresponds with a person
          access:
            type: string
            description: legacy access permission level
            enum:
              - NONE
              - VIEW
              - LIMITED
              - MEMBER_LIMITED_COMP
              - MEMBER
              - CUSTOM
              - TECH_OWNER
              - TIMEOFF
              - CONTACT
              - COMP_CASH
              - COMP_EQUITY
              - COMP_ALL
              - RECRUIT_SENSITIVE
              - RECRUIT_PRIMARY
              - SENSITIVE_LIMITED_COMP
              - SENSITIVE
              - PRIMARY
              - PEOPLE_OPS_ADMIN
              - PEOPLE_OPS_ADMIN_NO_COMP_DATA
              - PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA
              - OWNER
          groupIds:
            type: array
            description: group ids that the above access applies to
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          expr:
            type: string
            description: expression that the above access applies to
          expireAt:
            type: string
            description: timestamp that this org access will expire
          roleId:
            type: string
            example: 5887a7718f138b6a2a0041a7
            description: the role id that defines the users access
      Postal:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          postal:
            type: string
            description: postal code
          city:
            type: string
            description: city name
          state:
            type: string
            description: state code
          country:
            type: string
            description: country code
          geo:
            $ref: '#/components/schemas/Geopoint'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
      Process:
        type: object
        required:
          - createAt
          - createId
          - id
          - label
          - options
          - orgId
          - runUserId
          - status
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          label:
            type: string
            description: human-readable label that identifies this process
          type:
            type: string
            description: process type
          status:
            type: string
            description: current status of process
            enum:
              - PENDING
              - RUNNING
              - DONE
              - ERROR
          filePath:
            type: string
            description: data file path
          logPath:
            type: string
            description: data log path
          runUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id who is running the process
          parentProcessId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: process id of parent process
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id (user who requested the process run)
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          startAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: started at timestamp
          endAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: ended at timestamp
          message:
            type: string
            description: status or error message
          progress:
            type: number
            format: double
            description: percent progress so far
          internalError:
            type: string
            description: internal-only error message
          options:
            type: object
            description: options passed to the process
          results:
            type: object
            description: results summary for the process
            additionalProperties:
              type: object
          logDataList:
            type: array
            description: list of log data that occurred during running of this process
            items:
              $ref: '#/components/schemas/LogData'
          state:
            type: object
            description: process-specific state data
          appId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: app id of the process
          uuid:
            type: string
            example: 84db3c6e-0877-4436-8af1-768c06b29586
            description: unique ID of the process at queue time
      LogData:
        type: object
        required:
          - at
          - data
          - level
        properties:
          level:
            type: string
            enum:
              - INFO
              - WARN
              - ERROR
          at:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          message:
            type: string
          data:
            type: object
            additionalProperties:
              type: object
      Product:
        type: object
        required:
          - features
          - name
          - salesforceProductId
          - sku
          - stripeProductId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          name:
            type: string
            example: Compensation Reviews
            description: name of product
          sku:
            type: string
            example: compensation-reviews
            description: unique sku of product
          salesforceProductId:
            type: string
            example: 01t4T000000RpgKQAS
            description: corresponding product id in salesforce
          stripeProductId:
            type: string
            example: prod_12345ABC
            description: corresponding product id in stripe
          features:
            type: array
            description: set of features this product has access to
            uniqueItems: true
            items:
              type: string
              enum:
                - ATS_SYNC
                - COMPENSATION_REVIEW
                - CUSTOM_FIELD
                - CUSTOM_FIELD_READONLY
                - CUSTOM_FORM
                - CUSTOM_PROFILE_TAB
                - CUSTOM_ROLE
                - MULTI_PAYROLL
                - PERFORMANCE_REVIEW
                - REPORT
                - REPORT_READONLY
                - SCENARIO
                - SIMPLE_WORKFLOWS
                - SURVEY
                - TABLE
                - TEMPLATE
                - WORKDAY_ADAPTIVE
                - PAYROLL_OUTBOUND
                - APPROVAL_WORKFLOWS
                - CONTENT
                - IDENTITY_OUTBOUND
                - ONBOARDING_OFFBOARDING
                - TIMEOFF
          featureOptions:
            type: object
            description: map of options for the feature
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/FeatureAccessOption'
      FeatureAccessOption:
        type: object
        required:
          - name
          - type
        properties:
          name:
            type: string
            example: smart_fields
            description: The name of the feature option tied to the feature access
            enum:
              - CONFIGURED_ROLES
              - SMART_FIELDS
              - APP_FIELD_MAPPERS
              - MULTI_PAYROLL_INSTALLS
          description:
            type: string
            description: The description of the feature option
          type:
            type: string
            description: The feature option type
            enum:
              - LIMIT
              - FULL_ACCESS
          limit:
            type: integer
            format: int32
            description: The feature option limit
      ProfileTab:
        type: object
        required:
          - blocks
          - id
          - label
          - orgId
          - sort
          - status
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Performance
            description: human-readable name of profile tab
          blocks:
            type: array
            description: ordered list of blocks contained by profile tab
            items:
              $ref: '#/components/schemas/Block'
          status:
            type: string
            description: status of the profile tab
            enum:
              - ACTIVE
              - INACTIVE
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          readFilter:
            type: string
            description: >-
              filter that controls which viewers can read this profile tab. The
              profileTab:read permission, if present, overrides this filter
          sort:
            type: integer
            format: int32
            description: sort order
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      QueryToken:
        type: object
        required:
          - createAt
          - expireAt
          - id
          - orgId
          - params
          - token
          - type
          - userId
        properties:
          id:
            type: string
            description: globally unique id for query token
          token:
            type: string
            description: globally unique random token string
          orgId:
            type: string
            description: id of org
          userId:
            type: string
            description: id of user
          type:
            type: string
            description: query type
          path:
            type: string
            description: query path (deprecated)
          params:
            type: object
            description: query params
          accessCount:
            type: integer
            format: int64
            description: total number of uses
          createAt:
            type: string
            example: '2016-11-16T13:40:47Z'
            description: created timestamp
          expireAt:
            type: string
            example: '2016-11-16T13:40:47Z'
            description: expire timestamp
          activeAt:
            type: string
            example: '2016-11-16T13:40:47Z'
            description: last active timestamp
      Report:
        type: object
        required:
          - createAt
          - createId
          - id
          - label
          - orgId
          - sensitive
          - share
          - shareAccess
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          label:
            type: string
            example: Headcount Report
            description: report label
          description:
            type: string
            example: This is a report on headcount etd
            description: report description
          filter:
            type: string
            example: department:engineering
            description: filter automatically applied to every chart in this report
          share:
            type: string
            description: sharing settings of report
            enum:
              - NORMAL
              - FULL
          sensitive:
            type: string
            description: sensitivity level of report
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              report
            items:
              $ref: '#/components/schemas/ShareAccess'
          chartIds:
            type: array
            description: list of charts in this report
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ReportChart:
        type: object
        required:
          - createAt
          - createId
          - id
          - label
          - orgId
          - query
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          reportId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent report id
          label:
            type: string
            example: Headcount Report
            description: chart label
          type:
            type: string
            description: chart type
            enum:
              - LINE
              - AREA
              - STACKED
              - BAR
              - VERTICAL_BAR
              - HORIZONTAL_BAR
              - PIE
              - TABLE
              - TABLE_CROSSTAB
              - SINGLE_METRIC
              - HEADER
              - TEXT
          filter:
            type: string
            example: department='Engineering'
            description: filter that applies to this chart
          filterOverride:
            type: boolean
            description: whether the chart filter overrides the global filter
          query:
            $ref: '#/components/schemas/ReportQuery'
          sort:
            type: integer
            format: int32
            description: sort order
          isAdvancedQueryMode:
            type: boolean
            description: whether the chart configuration is using advanced mode
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      CostImpact:
        type: object
        required:
          - annual
          - firstMonth
          - months
        properties:
          annual:
            type: number
            description: total annual run-rate impact
          firstMonth:
            type: string
            description: first month to be affected
          months:
            type: array
            description: impact to each month, starting at firstMonth
            items:
              type: number
      Scenario:
        type: object
        required:
          - createAt
          - createId
          - id
          - name
          - orgId
          - shareAccess
          - startDate
          - status
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          name:
            type: string
            example: Q4 Conservative Plan
            description: scenario name
          description:
            type: string
            example: Q4 Conservative Plan
            description: scenario description
          startDate:
            type: string
            example: '2017-01-15'
            description: date that this scenario diverges from primary
          status:
            type: string
            description: status of scenario
            enum:
              - OPEN
              - INACTIVE
              - MERGED
              - DRAFT
              - ARCHIVED
          shareAccess:
            type: array
            description: users who are specifically granted permission to this scenario
            items:
              $ref: '#/components/schemas/ShareAccess'
          cost:
            $ref: '#/components/schemas/CostImpact'
          changeCount:
            type: integer
            format: int32
            description: number of changes contained in scenario
          changeCounts:
            type: object
            description: number of changes of each type contained in scenario
            additionalProperties:
              type: integer
              format: int32
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
          mergeId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: merged by user id
          mergeAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: merged timestamp
          calcStartAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: most recent summary calculation started at timestamp
          calcEndAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: most recent summary calculation ended at timestamp
          changeAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp of most recent changes made to scenario
          changeId:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: user who made the most recent change to scenario
          type:
            type: string
            description: Type of scenario to be created
            enum:
              - GENERAL
              - COMP
              - PROMOTION
              - TERMINATE
              - CREATE_JOB
              - UPDATE_JOB
              - BUDGET
          startDateFixed:
            type: string
            description: >-
              whether or not the start date should stay fixed in time, or update
              to today's date as time passes
            enum:
              - FIXED
              - TODAY
          query:
            type: string
            description: >-
              Query for selecting which people/jobs are initially included in the
              scenario (only applies to promotion scenarios)
          validJobIdSet:
            type: array
            description: This scenario changes are restricted to the following jobIds
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          approvalRequestId:
            type: string
            description: Approval request id, if the scenario has been submitted for approval
          entityId:
            type: string
            description: The entity this scenario is associated with
          entityType:
            type: string
            description: The type of entity associated with this scenario
            enum:
              - COMP_REVIEW
          sharedViewConfig:
            type: array
            description: View configurations associated with this scenario
            uniqueItems: true
            items:
              $ref: '#/components/schemas/ScenarioSharedViewConfig'
          budget:
            $ref: '#/components/schemas/Money'
          costCalc:
            type: string
            description: CQL used to calculate the budget allocation in the scenario
      ScenarioSharedViewConfig:
        type: object
        properties:
          customColumnNames:
            type: array
            description: list of column names to display
            items:
              type: string
          columnWidths:
            type: object
            description: map of column names to widths
            additionalProperties:
              type: integer
              format: int32
          type:
            type: string
            description: type of view
            enum:
              - ALL_CHANGES_GROUPED
          updateId:
            type: string
            description: update id
          updateAt:
            type: integer
            format: int64
            description: update at
      StockPrice:
        type: object
        required:
          - date
          - id
          - price
          - stock
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org id that this stock price derives from
          stock:
            type: string
            example: GOOG
            description: ticker symbol of this stock
          date:
            type: string
            format: date
            description: date
          price:
            type: number
            description: price per share
          type:
            type: string
            description: type of valuation
            enum:
              - COMMON_FMV
              - FUNDRAISE
              - GRANT
              - PUBLIC
          total:
            type: integer
            format: int64
            description: total shares outstanding
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: updated timestamp
          updateId:
            type: string
            description: updated by person
      Table:
        type: object
        required:
          - createAt
          - createId
          - effectiveDated
          - id
          - label
          - name
          - rowCount
          - sensitive
          - shareAccess
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          name:
            type: string
            example: budget-data
            description: name of table
          label:
            type: string
            example: Budget Data
            description: human readable label for the table
          labelColumnId:
            type: string
            description: if set, use this column id as the label when referencing rows
          effectiveDated:
            type: boolean
            description: >-
              whether or not the table is time tracked with effective dates
              (allows time travel or not). If false, then the values set in the
              table will be the same across all dates.
          sensitive:
            type: string
            description: >-
              base sensitivity of this table and entities in it -- should be
              either ORG or HIGH
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: users who are specifically granted permission to this table
            items:
              $ref: '#/components/schemas/ShareAccess'
          rowCount:
            type: integer
            format: int64
            description: number of rows in the table
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      Task:
        type: object
        required:
          - entityId
          - id
          - orgId
          - status
          - type
          - userId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user who is responsible for the task
          assessmentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent assessment id that this task belongs to
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this task belongs to, should be used with
              entityId
          type:
            type: string
            description: type of task
            enum:
              - FORM_SUBMIT
              - CHANGE_APPROVE
              - TIMEOFF_APPROVE
              - SCENARIO_CHANGES_APPROVE
              - SCENARIO_CHANGES_CREATE
              - ORG_IMPORT
              - COMP_REVIEW_APPROVAL_SUBMIT
              - SCENARIO_APPROVAL_SUBMIT
              - APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER
              - ACTION
          entityId:
            type: string
            description: >-
              the primary entity being referenced by the task - for example for a
              FORM_SUBMIT, this will be the form
          targetId:
            type: string
            description: >-
              the optional target entity being referenced by the task - for
              example for a FORM_SUBMIT, this will be the person
          status:
            type: string
            description: status of this task
            enum:
              - PENDING
              - DONE
              - EXPIRED
              - SKIPPED
          doneAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp that the task was done, if it was done
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          message:
            type: string
            example: this is the best task ever
            description: The message attached to this task
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              task
            items:
              $ref: '#/components/schemas/ShareAccess'
          path:
            type: string
            description: the optional path of this task (only applies to Type == ORG_IMPORT)
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
          taskConfigId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: id of the TaskConfig
          slug:
            type: string
            example: onboardingForm
            description: slug used to reference tasks in events
          dueAt:
            type: string
            description: due date for the task
          pastDueAction:
            type: string
            example: NONE
            description: what action to take when the task is past its due date
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: check for if the task can be skipped
      TaskConfig:
        type: object
        required:
          - entityId
          - id
          - orgId
          - pastDueAction
          - slug
          - type
        properties:
          id:
            type: string
            description: unique id of task config
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          assessmentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent assessment id that this task config belongs to
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this task config belongs to, should be used
              with entityId
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the primary entity being referenced by the task config
          slug:
            type: string
            description: >-
              System generated identifying name so that actions can be triggered
              as a result of task completion
          type:
            type: string
            description: type of task generated by the task config
            enum:
              - FORM_SUBMIT
              - CHANGE_APPROVE
              - TIMEOFF_APPROVE
              - SCENARIO_CHANGES_APPROVE
              - SCENARIO_CHANGES_CREATE
              - ORG_IMPORT
              - COMP_REVIEW_APPROVAL_SUBMIT
              - SCENARIO_APPROVAL_SUBMIT
              - APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER
              - ACTION
          dueDate:
            $ref: '#/components/schemas/DueDate'
          pastDueAction:
            type: string
            description: sets pastDueAction on the task when it's generated
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: sets isSkippable on the task
          label:
            type: string
            description: >-
              human-readable label that should be used for all tasks associated
              with the config as the task name
          description:
            type: string
            description: >-
              description for all tasks associated with the config that should be
              used in notifications
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      TimeOffEntity:
        type: object
        required:
          - endDate
          - id
          - orgId
          - personId
          - startDate
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id of time off
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org that the time off belongs to
          personId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: person taking the time off
          externalId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: external identifier, if time off synced from external system
          startDate:
            type: string
            format: date
            description: start date of time off, inclusive
          endDate:
            type: string
            format: date
            description: end date of time off, inclusive
          days:
            type: number
            description: number of days used
          hours:
            type: number
            description: number of hours used
          typeDescription:
            type: string
            description: type of time off
          note:
            type: string
            description: notes on the time off
          approval:
            type: string
            description: approval status of the time off
            enum:
              - APPROVED
              - PENDING
              - CANCELLED
              - REJECTED
              - SUPERSEDED
          approvalAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp of approval
          approvalUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              user who either is the next one requesting approval, or the user who
              did the final approval or rejection
          requestAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: requested at timestamp -- often the same as createAt
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: updated timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: updated by user id
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      BundleInstall:
        type: object
        required:
          - entities
        properties:
          entities:
            type: array
            items:
              $ref: '#/components/schemas/BundleInstallEntity'
      BundleInstallEntity:
        type: object
        required:
          - entityId
          - entityType
          - originalId
        properties:
          entityType:
            type: string
            enum:
              - ACTION
              - CATEGORY
              - FIELD
              - FORM
              - GROUP
              - PROFILE_TAB
              - QUESTION
              - REPORT
              - REPORT_CHART
              - TASK_CONFIG
              - TEMPLATE
              - CONTENT
          entityId:
            type: string
          originalId:
            type: string
      User:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          appId:
            type: string
            description: if the user is an app user, the id of the app
          name:
            $ref: '#/components/schemas/Name'
          email:
            type: string
            example: bob@example.com
            description: email address of user
          password:
            type: string
            description: password of user (encrypted)
          orgs:
            type: array
            description: list of member orgs with permission levels
            uniqueItems: true
            items:
              $ref: '#/components/schemas/OrgAccess'
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of user
            enum:
              - SUPERUSER
              - NORMAL
              - INACTIVE
              - UNINSTALLED
          type:
            type: string
            description: type of user
            enum:
              - USER
              - APP
          options:
            type: object
            description: >-
              for apps, options (specific options are specific to the particular
              app); for users, user-set preferences
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          bundleInstall:
            $ref: '#/components/schemas/BundleInstall'
          secrets:
            type: object
            description: >-
              write-only secrets; the content of these secrets are not retrievable
              via the external-facing API
          activeAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last activity timestamp
          loginAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last login timestamp
          loginFailCount:
            type: integer
            format: int32
            example: 3
            description: number of consecutive failed logins
          title:
            type: string
            example: CEO
            description: job title, if available
          remoteIp:
            type: string
            example: 127.0.0.1
            description: last IP address used
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          verifyAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: email verified timestamp, if the email has been verified
          mfas:
            type: array
            description: list of registered 2FA registered credentials
            items:
              $ref: '#/components/schemas/WebRegisteredCredential'
          emailSettings:
            type: array
            description: Email settings for the user
            items:
              $ref: '#/components/schemas/UserEmailSetting'
      UserEmailSetting:
        type: object
        required:
          - category
          - subscribed
        properties:
          category:
            type: string
            example: ADMINISTRATIVE
            description: Category of emails
            enum:
              - ADMINISTRATIVE
              - BILLING
              - DATA_IMPORT_AND_SYNC_STATUS
              - TRIAL_REMINDERS
          subscribed:
            type: boolean
            description: Is user subscribed to the category of emails
      WebRegisteredCredential:
        type: object
        required:
          - createdAt
          - credentialId
          - publicKeyBase64
          - signatureCount
          - userHandleBase64
        properties:
          credentialId:
            type: string
            description: Credential id
          publicKeyBase64:
            type: string
            description: The public key we're saving
          userHandleBase64:
            type: string
            description: The user handle - username
          signatureCount:
            type: integer
            format: int64
            description: This is used to protect against duplicated key attacks
          createdAt:
            type: integer
            format: int64
            description: When was this created
      Job:
        type: object
        required:
          - fields
          - groupAssignments
          - groupIds
          - jobId
          - orgId
          - title
        properties:
          jobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique job id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          title:
            type: string
            example: Senior Engineer
            description: job title
          comp:
            $ref: '#/components/schemas/Comp'
          sensitive:
            type: string
            description: view sensitive of the job while open
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          relationships:
            type: array
            description: relationship to other jobs
            uniqueItems: true
            items:
              $ref: '#/components/schemas/JobRelationship'
          managerIds:
            type: array
            description: list of managers, from immediate manager upwards
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          groupIds:
            type: array
            description: groups that this job is a member of
            items:
              type: string
          groupAssignments:
            type: array
            description: tracked group assignments that this job is a member or lead of
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GroupAssignment'
          placement:
            type: string
            description: guidance on placement
            enum:
              - NORMAL
              - ASSISTANT
          employment:
            type: string
            description: employment status
            enum:
              - FULL
              - PART
              - TEMP
              - CONTRACT
              - INTERN
              - EXPAT
          fields:
            type: object
            description: fields containing custom data
            additionalProperties:
              type: object
          startDate:
            type: string
            format: date
            description: >-
              for empty jobs, expected start date - for filled jobs, confirmed
              start date
          startDatePlanned:
            type: string
            format: date
            description: >-
              expected start date whether job is open or has been filled - doesn't
              change when job is filled
          personStartDate:
            type: string
            format: date
            description: >-
              if personId is present, the first day of that person in the org
              after the latest departure (if any)
          personEndDate:
            type: string
            format: date
            description: >-
              if personId is present and the person is departing, the last day of
              that person in the org
          personJobStartDate:
            type: string
            format: date
            description: if personId is present, the first day of that person in the job
          personJobEndDate:
            type: string
            format: date
            description: >-
              if personId is present and the person is departing or moving out,
              the last day of that person in the job
          personId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the person holding this job -- either currently in the job, or
              upcoming announced hire
          upcoming:
            type: array
            description: >-
              if a HIRE, MOVE, or DEPART are upcoming, the details on those
              changes - should only include id, type, date, announceDate, personId
            items:
              $ref: '#/components/schemas/UpcomingChange'
          scenarioId:
            type: string
            description: >-
              scenario that the job was created in (null if job is on primary
              timeline)
          backfillPersonId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              the person who most recently held the job, who this represents a
              backfill for
      Deviation:
        type: object
        properties:
          min:
            type: object
          max:
            type: object
      GuidelineCalculation:
        type: object
        required:
          - appliedField
          - compReviewId
          - deviation
          - fields
          - flagMode
          - guidelineId
          - guidelineLabel
          - isDeviated
          - jobId
        properties:
          guidelineId:
            type: string
          jobId:
            type: string
          compReviewId:
            type: string
          budgetPoolId:
            type: string
          guidelineLabel:
            type: string
          min:
            type: object
          max:
            type: object
          target:
            type: object
          appliedField:
            type: string
          flagMode:
            type: string
            enum:
              - DEVIATION_THRESHOLD
              - NONE
          flagDeviationThreshold:
            type: number
          isDeviated:
            type: boolean
          deviation:
            $ref: '#/components/schemas/Deviation'
          fields:
            type: object
            additionalProperties:
              type: object
      UpdateAction:
        type: object
        properties:
          event:
            type: string
            description: event pattern to match on, such as change.create.*
          cronSchedule:
            type: string
            example: 5 4 * * *
            description: cron schedule to run on, in crontab format
          filter:
            type: string
            description: only run when matching a particular filter
          steps:
            type: array
            description: list of steps to run when matching the event, schedule, and filter
            items:
              $ref: '#/components/schemas/ActionStep'
          description:
            type: string
            description: description of the action
          tags:
            type: array
            description: tags to organize the purpose of the action
            items:
              type: string
          status:
            type: string
            description: status of the action
            enum:
              - ACTIVE
              - INACTIVE
          sensitive:
            type: boolean
            description: whether to run with access to sensitive events or not
          category:
            type: string
            description: organizational category for HRIS-themed actions
            enum:
              - ONBOARDING
              - OFFBOARDING
      AiModelConfig:
        type: object
        required:
          - maxStringLength
          - maxTokens
          - modelId
          - promptAfter
          - promptBefore
          - temperature
          - topP
        properties:
          modelId:
            type: string
          promptBefore:
            type: string
          promptAfter:
            type: string
          maxTokens:
            type: integer
            format: int32
          temperature:
            type: number
            format: double
          topP:
            type: integer
            format: int32
          stopSequences:
            type: string
          maxStringLength:
            type: integer
            format: int32
      UpdateAiConfig:
        type: object
        properties:
          formResponseSummaryConfig:
            $ref: '#/components/schemas/AiModelConfig'
          formResponseCombineSummaryConfig:
            $ref: '#/components/schemas/AiModelConfig'
          reportResultSummaryConfig:
            $ref: '#/components/schemas/AiModelConfig'
      UpdateApp:
        type: object
        properties:
          name:
            type: string
            example: slack-import
            description: short unique name
            pattern: ^[a-z0-9-]+$
          redirectUris:
            type: array
            description: >-
              list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for
              this app
            items:
              type: string
              format: uri
          allowedIps:
            type: array
            description: >-
              allowlist of IPs or IP ranges that are allowed to make API calls on
              behalf of this app
            items:
              type: string
          configFields:
            type: array
            description: list of configuration fields
            items:
              $ref: '#/components/schemas/AppConfigField'
          title:
            type: string
            example: Slack
            description: human-readable name of app
          summary:
            type: string
            example: The Slack app does X Y and Z
            description: short summary of app
          description:
            type: string
            example: The Slack app does X Y and Z
            description: full description of app, in Markdown
          setupInstructions:
            type: string
            example: To install the Slack, use your API key from X and Y
            description: setup instructions, in Markdown
          cronOrder:
            type: integer
            format: int32
            description: execution order of the cron (lower numbers execute earlier)
          cronSchedule:
            type: string
            description: cron schedule
            enum:
              - DAILY
              - WEEKLY
          cronDayOfWeek:
            type: string
            description: Day of week if cronSchedule is WEEKLY
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          imagePath:
            type: string
            description: >-
              path to avatar profile image, should be approximately square
              dimensions and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          wordmarkImagePath:
            type: string
            description: >-
              path to larger profile logo image containing brand wordmark, does
              not need to be square dimensions
            pattern: ^[a-zA-Z0-9._/-]+$
          poweredByImagePath:
            type: string
            description: >-
              path to powered by image, should be approximately square dimensions
              and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of app
            enum:
              - GLOBAL
              - ACTIVE
              - INACTIVE
              - DEVELOPMENT
          minAccess:
            type: string
            description: minimum access level requested by app
            enum:
              - NONE
              - VIEW
              - LIMITED
              - MEMBER_LIMITED_COMP
              - MEMBER
              - CUSTOM
              - TECH_OWNER
              - TIMEOFF
              - CONTACT
              - COMP_CASH
              - COMP_EQUITY
              - COMP_ALL
              - RECRUIT_SENSITIVE
              - RECRUIT_PRIMARY
              - SENSITIVE_LIMITED_COMP
              - SENSITIVE
              - PRIMARY
              - PEOPLE_OPS_ADMIN
              - PEOPLE_OPS_ADMIN_NO_COMP_DATA
              - PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA
              - OWNER
          roleId:
            type: string
            description: roleId requested by app
          eventNotifyUrl:
            type: string
            format: uri
            description: URL that should be notified on events
          payload:
            type: object
            description: custom payload to send in lieu of regular payload
            additionalProperties:
              type: string
          events:
            type: array
            description: set of events to notify on
            uniqueItems: true
            items:
              type: string
          type:
            type: string
            description: APP, BUNDLE, or INTERNAL
            enum:
              - APP
              - BUNDLE
              - INTERNAL
          bundle:
            $ref: '#/components/schemas/Bundle'
          scopes:
            type: array
            description: access scopes that the app is requesting
            items:
              type: string
          tags:
            type: array
            description: tags/categories the app belongs to
            items:
              type: string
      UpdateAppConfig:
        type: object
        properties:
          fieldMappers:
            type: array
            description: list of default field mappers
            items:
              $ref: '#/components/schemas/FieldMapper'
          customFieldMappers:
            type: array
            description: list of custom field mappers by a user
            items:
              $ref: '#/components/schemas/FieldMapper'
          customOutboundFieldMappers:
            type: array
            description: list of custom outbound field mappers
            items:
              $ref: '#/components/schemas/OutboundFieldMapper'
          disabledFieldMappers:
            type: array
            description: list of disabled inbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          enabledOutboundFieldMappers:
            type: array
            description: list of enabled outbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          templateMatchers:
            type: array
            description: template field matchers defined by a user
            items:
              type: object
              additionalProperties:
                type: string
          options:
            type: object
            description: app specific options
      UpdateApprovalChain:
        type: object
        properties:
          name:
            type: string
            example: Comp Review 06/15/2022
            description: human-readable name of approval chain
          isPreview:
            type: boolean
            example: true
            description: >-
              isPreview specifies that this is a preview for implementations that
              use it (e.g. Compensation Reviews)
          fallbackApproverJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the jobId of the fallback approver
          fallbackApproverJobError:
            type: string
            description: most recent error for fallback approver
          approvalNotifierUserIds:
            type: array
            description: ids of any users who should be notified when approval is complete
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      UpdateApprovalChainStage:
        type: object
        properties:
          inclusionExpression:
            type: string
            description: optional custom expression to determine stage inclusion behavior
          inclusionBehavior:
            type: string
            description: determines whether stage is conditional based on an expression
            enum:
              - ONLY_INCLUDE_IF
              - EXCLUDE_IF
          expandExpression:
            type: string
            description: optional custom expression to determine approval request tree
          rejectBehavior:
            type: string
            description: determines which stage becomes active when a rejection event happens
            enum:
              - BACK_TO_BEGINNING
              - PREVIOUS_PHASE
          status:
            type: string
            description: status of the stage
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          approvalCommentRequired:
            type: boolean
            description: requires a comment on an approval event
          rejectionCommentRequired:
            type: boolean
            description: requires a comment on an rejection event
          order:
            type: integer
            format: int32
            description: order of stage in approval chain
          groups:
            type: array
            description: list of groups that are involved in this approval stage
            items:
              $ref: '#/components/schemas/ApprovalGroup'
      UpdateApprovalRequest:
        type: object
        properties:
          stageOverrides:
            type: array
            description: list of configuration fields
            items:
              $ref: '#/components/schemas/ApprovalChainStageOverride'
      UpdateAssessment:
        type: object
        properties:
          label:
            type: string
            example: Engineering Budget Q2 2019
            description: human-readable label of assessment
          slug:
            type: string
            example: engineering-budget-q2-2019
            description: unique slug of assessment
          type:
            type: string
            description: type of assessment
            enum:
              - REVIEW
              - COMP_REVIEW
              - SURVEY
          fields:
            type: object
            description: assessment fields (description)
          shareAccess:
            type: array
            description: users who have been granted access to this assessment
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: view sensitivity of this assessment
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          color:
            type: string
            description: color of assessment
            pattern: ^#[a-f0-9]{6}$
          startDate:
            type: string
            format: date
            description: >-
              Date this assessment begins. In the context of REVIEW goals, the
              date the review cycle begins.
          endDate:
            type: string
            format: date
            description: >-
              Date this assessment ends, or is completed. In the context of REVIEW
              assessment, the date the review cycle ends.
          status:
            type: string
            description: status of this assessment - DRAFT, ACTIVE, DONE
            enum:
              - DRAFT
              - ACTIVE
              - DONE
          doneAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp when the status of this assessment was set to done
          taskCount:
            type: integer
            format: int32
            example: 12
            description: number of tasks associated with this assessment
          taskDoneCount:
            type: integer
            format: int32
            example: 3
            description: number of tasks associated with this assessment that are done
          peopleIncludedCount:
            type: integer
            format: int32
            example: 12
            description: number of people included in this assessment
          query:
            type: string
            description: Query for which people/jobs can be included in the review.
      UpdateCategory:
        type: object
        properties:
          label:
            type: string
            example: Performance
            description: human-readable label of category
          fieldIds:
            type: array
            description: set of field ids included in this category
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          nativeFields:
            type: array
            description: set of native field names included in this category
            uniqueItems: true
            items:
              type: string
      UpdateCategorySort:
        type: object
        properties:
          categoryIds:
            type: array
            description: ordered list of category ids of an org
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      UpdateContent:
        type: object
        properties:
          parentContentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent content id in the hierarchy
          title:
            type: string
            example: Benefits Policies
            description: title of the content page
          path:
            type: string
            example: employee-info/benefits-policies
            description: >-
              full path to the content, if not set, defaults to an id/slug
              generated URL
          blocks:
            type: array
            description: content blocks
            items:
              $ref: '#/components/schemas/ContentBlock'
          imagePath:
            type: string
            example: path/to/image.jpg
            description: path to the image for the page
            pattern: ^[a-zA-Z0-9._/-]+$
          emoji:
            type: string
            example: 💥
            description: emoji, if an emoji is used to represent the page
          coverImagePath:
            type: string
            example: path/to/image.jpg
            description: path to the cover image for the content page
            pattern: ^[a-zA-Z0-9._/-]+$
          sensitive:
            type: string
            description: sensitivity level (ORG public, HIGHly sensitive, or PRIVATE)
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: list of users and groups who have the content shared with them
            items:
              $ref: '#/components/schemas/ShareAccess'
          status:
            type: string
            description: current status of the content page
            enum:
              - DRAFT
              - ACTIVE
              - ARCHIVED
      UpdateCustomer:
        type: object
        properties:
          name:
            type: string
            description: name of customer
          email:
            type: string
            description: email address for billing purposes
          billAddress:
            $ref: '#/components/schemas/Address'
          industry:
            type: string
            description: industry that customer is in
          source:
            type: string
            description: source of customer signup
            enum:
              - ADP_MARKETPLACE
              - SELF_SERVE
              - SELF_SERVE_TEST
              - SEQUOIA_ONE
              - CONNECT
          status:
            type: string
            description: current status
            enum:
              - ACTIVE
              - INACTIVE
              - TRIAL
              - CHURN
              - PAYMENT_ERROR
          salesforceAccountId:
            type: string
            description: salesforce account id
            pattern: ^[a-zA-Z0-9]{15}|[a-zA-Z0-9]{18}$
          products:
            type: array
            description: products that this customer has purchased
            items:
              $ref: '#/components/schemas/ProductItem'
          startDate:
            type: string
            format: date
            description: initial date of billing
          endDate:
            type: string
            format: date
            description: >-
              end of service date for churning customers -- on or after this date,
              service should be disabled
          nextInvoiceDate:
            type: string
            format: date
            description: date of next invoice
          primaryHeadCountFilter:
            type: string
            description: primary headcount filter - used for billing purposes
          secondaryHeadCountFilter:
            type: string
            description: secondary headcount filter - used for billing purposes
          arr:
            type: number
            description: current ARR of the customer based on most recent invoice
          projectedArr:
            type: number
            description: >-
              projected ARR of the customer for upcoming invoice, based on plan
              and headcount
          trialStartDate:
            type: string
            format: date
            description: date this customer begins their trial period
          trialEndDate:
            type: string
            format: date
            description: date this customer ends their trial period
          stripeSubscriptionSync:
            type: string
            description: Stripe subscription settings
            enum:
              - SYNC
              - DELETE
      UpdateDataView:
        type: object
        properties:
          name:
            type: string
            description: data view name
          columns:
            type: string
            example: image,name,title
            description: comma delimited list of columns
          type:
            type: string
            description: type of data view
            enum:
              - ANY
              - DATA_SHEET
              - ORG_CHART
              - MAP
          entityType:
            type: string
            description: entity type being viewed
          columnWidths:
            type: object
            description: map of column names to widths in pixels
            additionalProperties:
              type: number
              format: double
          date:
            type: string
            description: >-
              date of view, in either relative (-7d) or exact (YYYY-MM-DD) format;
              if not present, defaults to today
          startDate:
            type: string
            description: >-
              start date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          endDate:
            type: string
            description: >-
              end date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          filter:
            type: string
            example: managerCount:1
            description: filter query
          sort:
            type: string
            example: name,title
            description: comma delimited list of columns by which to sort
          groupBy:
            type: string
            example: title
            description: column to group duplicates by
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              data view
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: sensitivity level of data view
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
      UpdateEmailTemplate:
        type: object
        properties:
          name:
            type: string
            example: self_serve_welcome
            description: name of the email template
          category:
            type: string
            description: email category
            enum:
              - ADMINISTRATIVE
              - BILLING
              - DATA_IMPORT_AND_SYNC_STATUS
              - TRIAL_REMINDERS
      UpdateExchangeRate:
        type: object
        properties:
          date:
            type: string
            format: date
            description: date
          rates:
            type: object
            description: >-
              exchange rates, per currency - the multiplier to convert the base
              currency into the foreign currency
            additionalProperties:
              type: number
      UpdateField:
        type: object
        properties:
          name:
            type: string
            example: summary
            description: short field name
            pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
          label:
            type: string
            example: Job Summary
            description: human-readable full name of field
          description:
            type: string
            example: >-
              This field tracks the most recent performance rating for an
              individual.
            description: description of field
          question:
            type: string
            example: What do you think of this placeholder question?
            description: human-readable question associated with field
          inUse:
            type: boolean
            description: >-
              disallow any updates to this Field (except for field.question
              string)
          expr:
            type: string
            example: (base + variable) / 12
            description: calculated expression
          exprType:
            type: string
            description: the expected type of the evaluated expression
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          type:
            type: string
            description: type of field
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the field (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          defaultValue:
            type: object
            description: default value if field is not set
          options:
            type: object
            description: validation options
          sensitive:
            type: string
            description: sensitivity level of data
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          hideExpr:
            type: boolean
            description: hide expression-derived values from non-sensitive users
          expireDays:
            type: integer
            format: int32
            description: number of days after which the data becomes invalid
            minimum: 1
          status:
            type: string
            description: the status of the field
            enum:
              - ACTIVE
              - HIDDEN
          tableRef:
            $ref: '#/components/schemas/TableRef'
          isUnique:
            type: boolean
            description: >-
              indicates that this field value is unique in conjunction with
              entityType PERSON or JOB
          isRequired:
            type: boolean
            description: indicates that this field value is required
          isEffectiveDated:
            type: boolean
            description: indicates that this field value is effective-dated
          dataFetchTypes:
            type: array
            description: set of data fetch types
            uniqueItems: true
            items:
              type: string
              enum:
                - BASIC
                - UPDATE
                - CHANGE
                - RELATIONSHIP_MANAGER
                - RELATIONSHIP_ALL
                - TITLE
                - PROMOTION
                - GROUP
                - COMP
                - COMP_HISTORY
                - GRANT
                - TIMEOFF
                - PERSON_JOIN
                - ALL_DATA
          aliases:
            type: array
            description: set of aliases for this field
            uniqueItems: true
            items:
              type: string
          calc:
            type: string
            description: >-
              unique ID for the function that runs to calculate the value of this
              field. For native fields only
            enum:
              - ADDRESS
              - AGE
              - ANNIVERSARY
              - ANNUAL_BASE_MONEY
              - BACKFILL
              - BAND
              - BAND_RANGE
              - BASE
              - BASE_CAL_YEAR_PRORATED
              - BASE_CAL_YTD
              - BASE_COMP
              - BASE_COMP_AMOUNT
              - BASE_COMP_ANNUALIZED
              - BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY
              - BASE_COMP_AS_ORG_CURRENCY
              - BASE_COMP_CHANGES
              - BASE_COMP_CURRENCY
              - BASE_COMP_HOURS_PER_WEEK
              - BASE_COMP_INTERVAL
              - BASE_COMP_LAST_RAISE_DATE
              - BASE_COMP_LAST_RAISE_MONTHS_SINCE
              - BASE_COMP_LAST_RAISE_PAY
              - BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY
              - BASE_COMP_LAST_RAISE_PERCENT
              - BASE_COMP_LAST_RAISE_TYPE
              - BASE_COMP_PAY
              - BASE_COMP_PAY_AS_ORG_CURRENCY
              - BASE_COMP_WEEKS_PER_YEAR
              - BASE_FISCAL_YEAR_PRORATED
              - BASE_FISCAL_YTD
              - BASE_PRIMARY
              - BASE_RAISE_AMOUNT
              - BASE_RAISE_DATE
              - BASE_RAISE_PERCENT
              - BIRTH_DATE
              - BIRTHDAY
              - BONUS_TARGET
              - BUDGET_COST
              - BUSINESS_UNITS
              - CAL_YEAR_VEST_SHARES
              - CAL_YEAR_VEST_VALUE
              - CAN_APPROVE_CHANGE
              - CAN_EDIT_JOB
              - CASH_COMP
              - CASH_COMP_LOCAL
              - CHANGE
              - CHANGE_ID
              - COMMISSION_TARGET
              - COMP
              - COMP_CHANGE_PERCENT
              - COMPA_RATIO_MID
              - COMPA_RATIO_TARGET
              - CONTACT
              - COST
              - CREATE_DATE
              - CURRENCY
              - DATA
              - DATE
              - DATE_OF
              - DAYS_ACTIVE
              - DAYS_OFF
              - DAYS_OFF_TAKEN
              - DAYS_OFF_UPCOMING
              - DAYS_OPEN
              - DB
              - DEPART
              - DEPARTMENT
              - DEPARTMENT_FUNC
              - DIRECT_JOBS
              - DIRECT_JOB_COUNT
              - DIRECT_PERSON_COUNT
              - EMPLOYMENT
              - END_DATE_JOB
              - END_DATE_ORG
              - ETHNICITY
              - FISCAL_YEAR_COST
              - GENDER
              - GEOIP
              - GEOIP_ADDRESS
              - GRAND_MANAGER
              - GRANT_SHARES
              - GRANT_TYPE
              - GRANT_VALUE
              - GRANTS
              - GROUP_IDS
              - HEADCOUNT
              - HISTORIC_BACKFILL
              - HOUR
              - HOURLY
              - HOURLY_PRIMARY
              - HOURS_PER_WEEK
              - IMAGE
              - INDIRECT
              - INDIRECT_JOBS
              - JOB
              - JOB_ID
              - JOB_CODE
              - JOBCOUNT
              - LAST_GRANT
              - LAST_GRANT_DATE
              - LAST_GRANT_ORIGINAL_VALUE
              - LOCATION
              - MANAGE_JOBS
              - MANAGE_PERSONS
              - MANAGER
              - MANAGER_COUNT
              - MANAGER_FILLED
              - MANAGER_ID
              - MANAGERS
              - MANAGER_PERSON
              - MANAGER_PERSONS
              - ME
              - MERGE_SCENARIO_ID
              - NAME
              - NAME_AUDIO
              - NAME_TITLE
              - NEXT_DAY_OFF
              - NEXT_TIME_OFF
              - NEXT_YEAR_VEST_SHARES
              - NEXT_YEAR_VEST_VALUE
              - NOTE
              - NOOP
              - OPEN
              - ORG
              - PERSON
              - PERSON_ID
              - PLACEMENT
              - PREV_DAY_OFF
              - PREV_TIME_OFF
              - PROMOTION
              - PROMOTION_DATE
              - PROPOSED
              - Q
              - RAISE_AMOUNT
              - RAISE_DATE
              - RAISE_PERCENT
              - RAISE_PROMOTION_DATE
              - REASON
              - REGRET
              - RELATIONSHIPS
              - REMOTE_WORK_ADDRESS
              - SCENARIO
              - SCENARIO_CHANGED
              - SENSITIVE
              - SENSITIVE_FIELDS
              - START_DATE
              - START_DATE_JOB
              - START_DATE_ORG
              - START_DATE_PLANNED
              - STATE
              - STRIKE_PRICE
              - TARGET_HOURS_PER_WEEK
              - TARGET_WEEKS_PER_YEAR
              - TEAM
              - TENURE_JOB
              - TENURE_ORG
              - TIMEZONE_OFFSET
              - TITLE
              - TITLE_DATE
              - TODAY
              - TOTAL_COMP
              - TOTAL_COMP_LOCAL
              - TOTAL_ORG_SHARES
              - TOTAL_SHARES
              - TOTAL_SHARES_VALUE
              - UNDER
              - UNDER_INCLUDING
              - UNDER_JOBS
              - UNVESTED_SHARES
              - UNVESTED_VALUE
              - UPDATE
              - USER_ACTIVE_DAYS
              - USER_CAN_EDIT_COMP_FOR_JOB
              - USER
              - VARIABLE
              - VARIABLE_AMOUNT
              - VARIABLE_INTERVAL
              - VARIABLE_PERCENT
              - VARIABLE_PRIMARY
              - VARIABLE_TARGET
              - VARIABLE_TARGET_AMOUNT
              - VARIABLE_TARGET_ANNUALIZED
              - VARIABLE_TARGET_CURRENCY
              - VARIABLE_TARGET_PERCENT
              - VARIABLE_TARGET_TYPE
              - VARIABLE_TARGETS
              - VARIABLE_TARGETS_LAST_RAISE_DATE
              - VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE
              - VARIABLE_TARGETS_LAST_RAISE_PAY
              - VARIABLE_TARGETS_LAST_RAISE_PERCENT
              - VARIABLE_TYPE
              - VESTED_DATE
              - VESTED_SHARES
              - VESTED_VALUE
              - WEEKS_PER_YEAR
              - WORK_ADDRESS
          categoryId:
            type: string
            description: ID of the category to which this field belongs, if any
          classification:
            type: string
            description: >-
              indicates how this field is calculated (whether it's stored in the
              DB, evaluated through the expression service, or compound)
            enum:
              - COMPOUND
          places:
            type: integer
            format: int32
            description: number of decimal places for money values
      UpdateForm:
        type: object
        properties:
          label:
            type: string
            example: 'Health Index: Q2'
            description: human-readable full name of form
          description:
            type: string
            example: >-
              The Engineering department, where engineers develop new technology
              and products.
            description: description of form
          fields:
            type: array
            description: ordered list of fields being collected in this form
            items:
              $ref: '#/components/schemas/FormField'
          blocks:
            type: array
            description: ordered list of blocks being collected in this form
            items:
              $ref: '#/components/schemas/FormBlock'
          status:
            type: string
            description: status of the form
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          type:
            type: string
            description: type of the form
            enum:
              - BUILT_IN
              - CUSTOM
          targetType:
            type: string
            description: >-
              target type that the form can be filled out about (null defaults to
              PERSON for backwards compatibility)
            enum:
              - NONE
              - PERSON
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          submitFilter:
            type: string
            description: >-
              filter that controls which respondents can submit this form. The
              form:submit permission, if present, overrides this filter
          responseReadFilter:
            type: string
            description: >-
              filter that controls who can read the form responses. The
              formResponse:read permission, if present, overrides this filter
          useFieldAccess:
            type: boolean
            description: >-
              if this option is on, then form response answers will use field
              permissions to determine access to those responses
          approval:
            type: string
            description: approval needed, if any approval is required
            enum:
              - MANAGER
              - GRAND_MANAGER
          authorSensitive:
            type: string
            description: >-
              view sensitivity for the author of this form - the level of view
              access required to view the createId and updateId fields. If null,
              the author's identity is always visible as long as the viewer can
              read the form response. If set to PRIVATE, the author's identity is
              stored in ChartHop, but protected such that even users with
              sensitive access cannot access the data. If set to ANONYMOUS, the
              author's identity is not stored in ChartHop at all.
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
          options:
            type: object
            description: options, such as notification settings
      UpdateFormResponse:
        type: object
        properties:
          shareAccess:
            type: array
            description: >-
              list of share access, if the form response has been shared with
              anyone
            items:
              $ref: '#/components/schemas/ShareAccess'
      UpdateGroup:
        type: object
        properties:
          name:
            type: string
            example: Engineering
            description: unique name of group
          slug:
            type: string
            example: engineering
            description: unique slug of group
          code:
            type: string
            example: D123
            description: external code identifier of the group
          aliases:
            type: array
            description: aliases for group
            uniqueItems: true
            items:
              type: string
          leadJobIds:
            type: array
            description: >-
              a list of group leaders, or null if the leader of the group should
              be automatically derived from the org chart
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          fields:
            type: object
            description: group fields (currently only description)
          address:
            $ref: '#/components/schemas/Address'
          level:
            type: integer
            format: int32
            description: level of the group, for BAND type only
          func:
            type: string
            description: Job function category of the group, for DEPARTMENT type only
            enum:
              - BD
              - CS
              - DESIGN
              - ENGINEERING
              - EXECUTIVE
              - FINANCE
              - GENERAL
              - IT
              - LEGAL
              - MARKETING
              - OPERATIONS
              - PEOPLE
              - PRODUCT
              - RECRUITING
              - SALES
              - SECURITY
              - SUPPORT
          locationType:
            type: string
            description: Type of the location, for LOCATION type only
            enum:
              - OFFICE
              - REMOTE
          parentGroupId:
            type: string
            description: parent group id
          timezone:
            type: string
            example: America/New_York
            description: timezone of the group, for LOCATION type only
          compMin:
            $ref: '#/components/schemas/Money'
          compMax:
            $ref: '#/components/schemas/Money'
          imagePath:
            type: string
            description: path to profile image
            pattern: ^[a-zA-Z0-9._/-]*$
          color:
            type: string
            description: color of group
            pattern: ^#[a-f0-9]{6}$
      UpdateGroupType:
        type: object
        properties:
          name:
            type: string
            example: Engineering
            description: unique name of group
          slug:
            type: string
            example: engineering
            description: unique slug of group
          requirePositions:
            type: boolean
            description: whether the group requires members to be positions
      UpdateGroupTypeConfig:
        type: object
        properties:
          fieldIds:
            type: array
            description: list of fields to be entered on groups of this type
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      UpdateGuideline:
        type: object
        properties:
          label:
            type: string
            example: Merit Guideline
            description: guideline name
          budgetPoolId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the budget pool the guideline is allocated from
          participantsExpr:
            type: string
            example: is:person and tenure>=12
            description: CQL filter to determine which employees the guideline applies to
          appliedField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline applies to
          sourceField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline is calculated from
          calculationType:
            type: string
            example: TARGET
            description: >-
              how does the guideline calculate the target value? e.g. is there a
              range (min/max) or only a target
            enum:
              - RANGE
              - TARGET
          flagMode:
            type: string
            example: NONE
            description: how does the guideline indicate deviations from the target amount
            enum:
              - DEVIATION_THRESHOLD
              - NONE
          flagDeviationThreshold:
            type: number
            example: 0.75
            description: >-
              the threshold (percent) against which deviations from the guideline
              are flagged
          enablePopulateValue:
            type: boolean
            example: false
            description: >-
              whether or not the target values from the guidelines are
              pre-populated in the given columns
          basisType:
            type: string
            example: CUSTOM
            description: >-
              how an individual guideline value itself is calculated, e.g.
              percentage of the appliedField, fixed amount, or custom CQL
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          basisExpr:
            type: string
            example: 'tenure>12 ? (base * 0.04) : (base * 0.02)'
            description: >-
              if basisType.CUSTOM, the custom CQL expression used to generate the
              guideline value
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedAmountRange:
            $ref: '#/components/schemas/MoneyRange'
          fixedValueRange:
            $ref: '#/components/schemas/ValueRange'
      UpdateJobLevel:
        type: object
        properties:
          label:
            type: string
            example: Associate
            description: human-readable name of job level
          code:
            type: string
            example: BF01
            description: job level code
          benchmarkType:
            $ref: '#/components/schemas/EnumValue'
          benchmarkLevel:
            $ref: '#/components/schemas/EnumValue'
      UpdateLegalDoc:
        type: object
        properties:
          name:
            type: string
            example: ChartHop Service Agreement
            description: human-readable full name of form
          content:
            type: string
            description: legal doc content
          date:
            type: string
            format: date
            description: content by date
      UpdateMessage:
        type: object
        properties:
          readAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: read timestamp
          seenAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: seen timestamp
      UpdateMultiplier:
        type: object
        properties:
          label:
            type: string
            example: Non-technical
            description: human-readable name of multiplier
          code:
            type: string
          value:
            type: number
            example: 0.75
            description: amount to multiply the initial value by
          expr:
            type: string
            example: department!="Engineering"
            description: calculated expression to match against the job
          category:
            type: string
            example: Location
            description: tag to group multipliers together by
      UpdateOrg:
        type: object
        properties:
          customerId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: customer for billing processing
          name:
            type: string
            example: Acme Corp
            description: name of organization
          slug:
            type: string
            example: acme-corp
            description: unique slug of organization
          type:
            type: string
            example: PRIVATE
            description: type of organization
            enum:
              - PRIVATE
              - PUBLIC
              - EDU
              - GOV
              - NONPROFIT
              - DEMO
              - TEST
          industry:
            type: string
            example: Software and Internet
            description: industry
          estEmployees:
            type: integer
            format: int32
            description: approximate number of employees
          estRevenue:
            type: integer
            format: int32
            description: approximate amount of revenue
          foundedYear:
            type: integer
            format: int32
            example: 1998
            description: year of founding
          address:
            $ref: '#/components/schemas/Address'
          phone:
            type: string
            description: company phone number in E.164 format
            pattern: ^\+?[1-9]\d{1,14}$
          email:
            type: string
            example: bob@example.com
            description: primary contact email
          url:
            type: string
            format: uri
            description: website URL
          domains:
            type: array
            description: domains used by this org
            items:
              $ref: '#/components/schemas/OrgDomain'
          status:
            type: string
            description: current status of organization
            enum:
              - ACTIVE
              - INACTIVE
              - DISABLED
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          currencies:
            type: array
            description: >-
              types of currencies in use, with the first currency the primary
              currency
            items:
              type: string
            maxItems: 20
            minItems: 1
          stock:
            type: string
            example: GOOG
            description: stock symbol
          timezone:
            type: string
            example: America/New_York
            description: timezone in use
          appTime:
            type: string
            example: '09:00'
            description: >-
              approximate time of day for daily app syncs to run (defaults to 9am
              Eastern time)
          zone:
            type: integer
            format: int32
            example: 2
            description: infrastructure zone
          fiscalStart:
            type: integer
            format: int32
            description: >-
              number of months into the calendar year that the fiscal year starts
              (1 = February, 2 = March)
          startDate:
            type: string
            description: start date of history
          sensitiveFields:
            type: object
            description: map of sensitive field defaults
          options:
            $ref: '#/components/schemas/OrgOptions'
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          onboardSteps:
            type: array
            description: list of onboard steps that this Org has completed (or skipped)
            items:
              $ref: '#/components/schemas/OnboardStepResult'
          onboarding:
            type: boolean
            description: >-
              current onboarding status of an organization, allowing clearing of
              org
          selfServeImporting:
            type: boolean
            description: >-
              completion status of initial import for orgs signed up via self
              serve
          headCount:
            type: integer
            format: int32
            description: number of total headcount currently in the org
      UpdateOrgConfig:
        type: object
        properties:
          hiddenFieldIds:
            type: array
            description: set of hidden field ids of an org
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          builtinCategoryMap:
            type: array
            description: set of maps of the custom fields that belongs to a built-in category
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInCategoryMap'
          builtinFieldConfig:
            type: array
            description: Org configuration for built-in fields
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInFieldConfig'
          compensationBandsConfig:
            $ref: '#/components/schemas/CompensationBandsConfig'
          smartCurrencyOptions:
            type: array
            example: PERSON_HOME_ADDRESS_COUNTRY
            description: >-
              Options for where to source a currency to use when currency is
              unknown. order specific
            items:
              $ref: '#/components/schemas/SmartCurrencyOption'
          smartCurrencyDefault:
            type: string
            example: USD
            description: >-
              The default currency to use when currency is unknown and there are
              no options set in smartCurrencyOptions
          requiredJobFields:
            type: array
            description: Org configuration for required job fields
            uniqueItems: true
            items:
              type: string
          scenarioApprovalChains:
            type: object
            description: Configures which approval chains to use with specific scenario types
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
          isOpenJobRoleApprovalEnabled:
            type: boolean
            description: Whether to show open job approval on Open Job Profile page
          grantConfiguration:
            type: array
            description: Org Grant Configuration
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GrantAlias'
      UpdatePerson:
        type: object
        properties:
          name:
            $ref: '#/components/schemas/Name'
          contacts:
            type: array
            description: contacts (emails, phones, external ids)
            items:
              $ref: '#/components/schemas/Contact'
          address:
            $ref: '#/components/schemas/Address'
          remoteWorkAddress:
            $ref: '#/components/schemas/Address'
          birthDate:
            type: string
            example: '1980-05-12'
            description: birthdate
          startDate:
            type: string
            example: '1980-05-12'
            description: start date of most recent hire
          endDate:
            type: string
            example: '1980-05-12'
            description: end date of most recent hire
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          nameAudioPath:
            type: string
            description: path to pronunciation of the person's name
            pattern: ^[a-zA-Z0-9._/-]+$
          gender:
            type: string
            description: self-reported gender
            enum:
              - MALE
              - FEMALE
              - NONBINARY
              - PREFER_NOT
          ethnicity:
            type: string
            description: self-reported ethnicity
            enum:
              - HISPANIC
              - WHITE
              - BLACK
              - PACIFIC
              - ASIAN
              - NATIVE
              - TWO
              - PREFER_NOT
          fields:
            type: object
            description: fields containing custom data
            additionalProperties:
              type: object
          sensitiveFields:
            type: object
            description: personal sensitivity preferences around specific fields
          inviteOptions:
            $ref: '#/components/schemas/OrgAccess'
          state:
            type: string
            description: current status within the organization
            enum:
              - PRIMARY
              - SCENARIO
              - PENDING
              - INACTIVE
      PolicyRule:
        type: object
        properties:
          allow:
            type: array
            example: '[''job:read'', ''person.read'']'
            description: allow rules
            items:
              type: string
          deny:
            type: array
            example: '[''job:read'', ''person.read'']'
            description: deny rules
            items:
              type: string
          categories:
            type: array
            example: '[''Compensation'', ''Stock Grants'']'
            description: categories the rule is limited to
            items:
              type: string
          fields:
            type: array
            example: '[''base'']'
            description: fields the rule is limited to
            items:
              type: string
          departmentIds:
            type: array
            description: departments the rule is limited to
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          filter:
            type: string
            example: department:engineering and under:me
            description: custom filter the rule is limited to
          directions:
            type: array
            description: directions that the rule applies to -- either self or under
            items:
              type: string
          types:
            type: array
            description: types that the rule applies to
            items:
              type: string
          visibleSensitive:
            type: array
            description: >-
              if specified, controls visibility of sensitive entities -- for
              example, ['Manager Shared', 'Manager Only']
            items:
              type: string
          fieldsSensitive:
            type: array
            description: >-
              if specified, controls applicability of fields by sensitivity -- for
              example, ['Manager Shared', 'Manager Only']
            items:
              type: string
      UpdatePolicy:
        type: object
        properties:
          label:
            type: string
            example: View Compensation
            description: human-readable full name of policy
          description:
            type: string
            example: This policy allows compensation to be viewed.
            description: description of policy
          rules:
            type: array
            description: the rules that define the policy
            items:
              $ref: '#/components/schemas/PolicyRule'
      UpdateProcess:
        type: object
        properties:
          status:
            type: string
            description: current status of process
            enum:
              - PENDING
              - RUNNING
              - DONE
              - ERROR
          filePath:
            type: string
            description: data file path
          message:
            type: string
            description: status or error message
          progress:
            type: number
            format: double
            description: percent progress so far
          internalError:
            type: string
            description: internal-only error message
          options:
            type: object
            description: options passed to the process
          results:
            type: object
            description: results summary for the process
            additionalProperties:
              type: object
          logDataList:
            type: array
            description: list of log data that occurred during running of this process
            items:
              $ref: '#/components/schemas/LogData'
          state:
            type: object
            description: process-specific state data
          appId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: app id of the process
      UpdateProduct:
        type: object
        properties:
          name:
            type: string
            example: Compensation Reviews
            description: name of product
          sku:
            type: string
            example: compensation-reviews
            description: unique sku of product
          salesforceProductId:
            type: string
            example: 01t4T000000RpgKQAS
            description: corresponding product id in salesforce
          stripeProductId:
            type: string
            example: prod_12345ABC
            description: corresponding product id in stripe
          features:
            type: array
            description: set of features this product has access to
            uniqueItems: true
            items:
              type: string
              enum:
                - ATS_SYNC
                - COMPENSATION_REVIEW
                - CUSTOM_FIELD
                - CUSTOM_FIELD_READONLY
                - CUSTOM_FORM
                - CUSTOM_PROFILE_TAB
                - CUSTOM_ROLE
                - MULTI_PAYROLL
                - PERFORMANCE_REVIEW
                - REPORT
                - REPORT_READONLY
                - SCENARIO
                - SIMPLE_WORKFLOWS
                - SURVEY
                - TABLE
                - TEMPLATE
                - WORKDAY_ADAPTIVE
                - PAYROLL_OUTBOUND
                - APPROVAL_WORKFLOWS
                - CONTENT
                - IDENTITY_OUTBOUND
                - ONBOARDING_OFFBOARDING
                - TIMEOFF
          featureOptions:
            type: object
            description: map of options for the feature
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/FeatureAccessOption'
      UpdateProfileTab:
        type: object
        properties:
          label:
            type: string
            example: Performance
            description: human-readable name of profile tab
          blocks:
            type: array
            description: ordered list of blocks contained by profile tab
            items:
              $ref: '#/components/schemas/Block'
          status:
            type: string
            description: status of the profile tab
            enum:
              - ACTIVE
              - INACTIVE
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          readFilter:
            type: string
            description: >-
              filter that controls which viewers can read this profile tab. The
              profileTab:read permission, if present, overrides this filter
          sort:
            type: integer
            format: int32
            description: sort order
      UpdateQuestion:
        type: object
        properties:
          question:
            type: string
            example: What is your favorite color?
            description: text of the question
          fieldId:
            type: string
            description: >-
              if the question is linked to a field, the id of that field. Any
              question responses will be automatically saved to the field
          type:
            type: string
            description: datatype of the question
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the question datatype (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          options:
            type: object
            description: validation options
      UpdateReport:
        type: object
        properties:
          label:
            type: string
            example: Headcount Report
            description: report label
          description:
            type: string
            example: This is a report on headcount etd
            description: report description
          filter:
            type: string
            example: department:engineering
            description: filter automatically applied to every chart in this report
          share:
            type: string
            description: sharing settings of report
            enum:
              - NORMAL
              - FULL
          sensitive:
            type: string
            description: sensitivity level of report
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              report
            items:
              $ref: '#/components/schemas/ShareAccess'
          chartIds:
            type: array
            description: list of charts in this report
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      UpdateReportChart:
        type: object
        properties:
          label:
            type: string
            example: Headcount Report
            description: chart label
          type:
            type: string
            description: chart type
            enum:
              - LINE
              - AREA
              - STACKED
              - BAR
              - VERTICAL_BAR
              - HORIZONTAL_BAR
              - PIE
              - TABLE
              - TABLE_CROSSTAB
              - SINGLE_METRIC
              - HEADER
              - TEXT
          filter:
            type: string
            example: department='Engineering'
            description: filter that applies to this chart
          filterOverride:
            type: boolean
            description: whether the chart filter overrides the global filter
          query:
            $ref: '#/components/schemas/ReportQuery'
          sort:
            type: integer
            format: int32
            description: sort order
          isAdvancedQueryMode:
            type: boolean
            description: whether the chart configuration is using advanced mode
      UpdateRole:
        type: object
        properties:
          label:
            type: string
            example: Engineering People Manager
            description: human-readable full name of role
          description:
            type: string
            example: >-
              This role is able to create and update new job data for the
              engineering department.
            description: description of role
          policyIds:
            type: array
            description: the policies that define the role
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      UpdateScenario:
        type: object
        properties:
          name:
            type: string
            example: Q4 Conservative Plan
            description: scenario name
          description:
            type: string
            example: Q4 Conservative Plan
            description: scenario description
          startDate:
            type: string
            example: '2017-01-15'
            description: date that this scenario diverges from primary
          status:
            type: string
            description: status of scenario
            enum:
              - OPEN
              - INACTIVE
              - MERGED
              - DRAFT
              - ARCHIVED
          shareAccess:
            type: array
            description: users who are specifically granted permission to this scenario
            items:
              $ref: '#/components/schemas/ShareAccess'
          startDateFixed:
            type: string
            description: >-
              whether or not the start date should stay fixed in time, or update
              to today's date as time passes
            enum:
              - FIXED
              - TODAY
          validJobIdSet:
            type: array
            description: This scenario changes are restricted to the following jobIds
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          entityId:
            type: string
            description: The entity this scenario is associated with
          entityType:
            type: string
            description: The type of entity associated with this scenario
            enum:
              - COMP_REVIEW
          sharedViewConfig:
            type: array
            description: View configurations associated with this scenario
            uniqueItems: true
            items:
              $ref: '#/components/schemas/ScenarioSharedViewConfig'
          budget:
            $ref: '#/components/schemas/Money'
          costCalc:
            type: string
            description: CQL used to calculate the budget allocation in the scenario
      UpdateStockPrice:
        type: object
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org id that this stock price derives from
          price:
            type: number
            description: price per share
          total:
            type: integer
            format: int64
            description: total shares outstanding
      UpdateTable:
        type: object
        properties:
          name:
            type: string
            example: budget-data
            description: name of table
          label:
            type: string
            example: Budget Data
            description: human readable label for the table
          labelColumnId:
            type: string
            description: if set, use this column id as the label when referencing rows
          effectiveDated:
            type: boolean
            description: >-
              whether or not the table is time tracked with effective dates
              (allows time travel or not). If false, then the values set in the
              table will be the same across all dates.
          sensitive:
            type: string
            description: >-
              base sensitivity of this table and entities in it -- should be
              either ORG or HIGH
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: users who are specifically granted permission to this table
            items:
              $ref: '#/components/schemas/ShareAccess'
      UpdateTask:
        type: object
        properties:
          status:
            type: string
            description: status of this task
            enum:
              - PENDING
              - DONE
              - EXPIRED
              - SKIPPED
          message:
            type: string
            example: this is the best task ever
            description: The message attached to this task
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              task
            items:
              $ref: '#/components/schemas/ShareAccess'
          taskConfigId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: id of the TaskConfig
          slug:
            type: string
            example: onboardingForm
            description: slug used to reference tasks in events
          dueAt:
            type: string
            description: due date for the task
          pastDueAction:
            type: string
            example: NONE
            description: what action to take when the task is past its due date
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: check for if the task can be skipped
      UpdateTaskConfig:
        type: object
        properties:
          type:
            type: string
            description: type of task generated by the task config
            enum:
              - FORM_SUBMIT
              - CHANGE_APPROVE
              - TIMEOFF_APPROVE
              - SCENARIO_CHANGES_APPROVE
              - SCENARIO_CHANGES_CREATE
              - ORG_IMPORT
              - COMP_REVIEW_APPROVAL_SUBMIT
              - SCENARIO_APPROVAL_SUBMIT
              - APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER
              - ACTION
          dueDate:
            $ref: '#/components/schemas/DueDate'
          pastDueAction:
            type: string
            description: sets pastDueAction on the task when it's generated
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: sets isSkippable on the task
          label:
            type: string
            description: >-
              human-readable label that should be used for all tasks associated
              with the config as the task name
          description:
            type: string
            description: >-
              description for all tasks associated with the config that should be
              used in notifications
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      UpdateTemplate:
        type: object
        properties:
          name:
            type: string
            description: template name, must be unique to organization
          description:
            type: string
            description: description of template
          content:
            type: string
            description: template content
          stylesheet:
            type: string
            description: template inline stylesheet
          type:
            type: string
            description: type of template
            enum:
              - DOCUMENT
              - EMAIL
          tags:
            type: array
            description: tags to organize the purpose of the template
            items:
              type: string
          filename:
            type: string
            description: document filename CQL
      UpdateTimeOffEntity:
        type: object
        properties:
          externalId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: external identifier, if time off synced from external system
          startDate:
            type: string
            format: date
            description: start date of time off, inclusive
          endDate:
            type: string
            format: date
            description: end date of time off, inclusive
          days:
            type: number
            description: number of days used
          hours:
            type: number
            description: number of hours used
          typeDescription:
            type: string
            description: type of time off
          note:
            type: string
            description: notes on the time off
          approval:
            type: string
            description: approval status of the time off
            enum:
              - APPROVED
              - PENDING
              - CANCELLED
              - REJECTED
              - SUPERSEDED
      UpdateUser:
        type: object
        properties:
          appId:
            type: string
            description: if the user is an app user, the id of the app
          name:
            $ref: '#/components/schemas/Name'
          email:
            type: string
            example: bob@example.com
            description: email address of user
          orgs:
            type: array
            description: list of member orgs with permission levels
            uniqueItems: true
            items:
              $ref: '#/components/schemas/OrgAccess'
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of user
            enum:
              - SUPERUSER
              - NORMAL
              - INACTIVE
              - UNINSTALLED
          options:
            type: object
            description: >-
              for apps, options (specific options are specific to the particular
              app); for users, user-set preferences
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          secrets:
            type: object
            description: >-
              write-only secrets; the content of these secrets are not retrievable
              via the external-facing API
          emailSettings:
            type: array
            description: Email settings for the user
            items:
              $ref: '#/components/schemas/UserEmailSetting'
      AccessAction:
        type: object
        required:
          - action
        properties:
          action:
            type: string
          fields:
            type: array
            uniqueItems: true
            items:
              type: string
          types:
            type: array
            uniqueItems: true
            items:
              type: string
      AccessResponse:
        type: object
        properties:
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsAccess:
        type: object
        required:
          - allowed
        properties:
          ids:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          allowed:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/AccessAction'
      ResultsAction:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Action'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateAction:
        type: object
        required:
          - sensitive
          - steps
        properties:
          event:
            type: string
            description: event pattern to match on, such as change.create.*
          cronSchedule:
            type: string
            example: 5 4 * * *
            description: cron schedule to run on, in crontab format
          filter:
            type: string
            description: only run when matching a particular filter
          steps:
            type: array
            description: list of steps to run when matching the event, schedule, and filter
            items:
              $ref: '#/components/schemas/ActionStep'
          description:
            type: string
            description: description of the action
          tags:
            type: array
            description: tags to organize the purpose of the action
            items:
              type: string
          status:
            type: string
            description: status of the action
            enum:
              - ACTIVE
              - INACTIVE
          sensitive:
            type: boolean
            description: whether to run with access to sensitive events or not
          category:
            type: string
            description: organizational category for HRIS-themed actions
            enum:
              - ONBOARDING
              - OFFBOARDING
      CreateActionBody:
        type: object
        required:
          - action
        properties:
          action:
            $ref: '#/components/schemas/CreateAction'
          stepTaskConfigs:
            type: array
            items:
              $ref: '#/components/schemas/PartialTaskConfig'
      PatchActionBody:
        type: object
        required:
          - action
        properties:
          action:
            $ref: '#/components/schemas/UpdateAction'
          stepTaskConfigs:
            type: array
            items:
              $ref: '#/components/schemas/PartialTaskConfig'
      ActionRunRequest:
        type: object
        required:
          - eventCode
          - jobId
        properties:
          jobId:
            type: string
          eventCode:
            type: string
      SummarizeResponse:
        type: object
        required:
          - responseCount
          - summary
        properties:
          summary:
            type: string
          responseCount:
            type: integer
            format: int32
      SummarizeFormResponsesRequest:
        type: object
        required:
          - questionId
        properties:
          questionId:
            type: string
          formId:
            type: string
          assessmentId:
            type: string
          submitPersonFilter:
            type: string
          targetPersonFilter:
            type: string
      CreateAppConfig:
        type: object
        required:
          - appId
        properties:
          appId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: app id
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id, if this person corresponds with a user
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: org id, if this app config corresponds with an org
          fieldMappers:
            type: array
            description: list of default field mappers
            items:
              $ref: '#/components/schemas/FieldMapper'
          customFieldMappers:
            type: array
            description: list of custom field mappers by a user
            items:
              $ref: '#/components/schemas/FieldMapper'
          customOutboundFieldMappers:
            type: array
            description: list of custom outbound field mappers
            items:
              $ref: '#/components/schemas/OutboundFieldMapper'
          disabledFieldMappers:
            type: array
            description: list of disabled inbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          enabledOutboundFieldMappers:
            type: array
            description: list of enabled outbound field mappers by id
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          templateMatchers:
            type: array
            description: template field matchers defined by a user
            items:
              type: object
              additionalProperties:
                type: string
          options:
            type: object
            description: app specific options
      NotifyRequest:
        type: object
        properties:
          emailSubject:
            type: string
            description: email subject line
          emailContentHtml:
            type: string
            description: email HTML content
          emailMarkdown:
            type: string
            description: email Markdown content
          chatMarkdown:
            type: string
            description: >-
              chat Markdown content, if chat message should be
              different/abbreviated
          notifyType:
            type: string
            description: Type of notification
      AccessTokenResponse:
        type: object
        required:
          - access_token
          - expires_in
          - token_type
        properties:
          access_token:
            type: string
            example: 2YotnFZFEjr1zCsicMWsdv
            description: access token value
            readOnly: true
          token_type:
            type: string
            example: bearer
            description: access token type
            readOnly: true
          expires_in:
            type: integer
            format: int32
            example: 86400
            description: expiration time of token, in seconds
            readOnly: true
          refresh_token:
            type: string
            example: tGzv3JOkF0XG5Qx2TlKWIA
            description: refresh token value
            readOnly: true
          scope:
            type: string
            example: admin
            description: scope of the access token
            readOnly: true
      ResultsApp:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/App'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateApp:
        type: object
        required:
          - cronOrder
          - minAccess
          - name
          - orgId
          - summary
          - title
          - type
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: organization id
          name:
            type: string
            example: slack-import
            description: short unique name
            pattern: ^[a-z0-9-]+$
          redirectUris:
            type: array
            description: >-
              list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for
              this app
            items:
              type: string
              format: uri
          allowedIps:
            type: array
            description: >-
              allowlist of IPs or IP ranges that are allowed to make API calls on
              behalf of this app
            items:
              type: string
          configFields:
            type: array
            description: list of configuration fields
            items:
              $ref: '#/components/schemas/AppConfigField'
          title:
            type: string
            example: Slack
            description: human-readable name of app
          summary:
            type: string
            example: The Slack app does X Y and Z
            description: short summary of app
          description:
            type: string
            example: The Slack app does X Y and Z
            description: full description of app, in Markdown
          setupInstructions:
            type: string
            example: To install the Slack, use your API key from X and Y
            description: setup instructions, in Markdown
          cronOrder:
            type: integer
            format: int32
            description: execution order of the cron (lower numbers execute earlier)
          cronSchedule:
            type: string
            description: cron schedule
            enum:
              - DAILY
              - WEEKLY
          cronDayOfWeek:
            type: string
            description: Day of week if cronSchedule is WEEKLY
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          imagePath:
            type: string
            description: >-
              path to avatar profile image, should be approximately square
              dimensions and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          wordmarkImagePath:
            type: string
            description: >-
              path to larger profile logo image containing brand wordmark, does
              not need to be square dimensions
            pattern: ^[a-zA-Z0-9._/-]+$
          poweredByImagePath:
            type: string
            description: >-
              path to powered by image, should be approximately square dimensions
              and show logo
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of app
            enum:
              - GLOBAL
              - ACTIVE
              - INACTIVE
              - DEVELOPMENT
          minAccess:
            type: string
            description: minimum access level requested by app
            enum:
              - NONE
              - VIEW
              - LIMITED
              - MEMBER_LIMITED_COMP
              - MEMBER
              - CUSTOM
              - TECH_OWNER
              - TIMEOFF
              - CONTACT
              - COMP_CASH
              - COMP_EQUITY
              - COMP_ALL
              - RECRUIT_SENSITIVE
              - RECRUIT_PRIMARY
              - SENSITIVE_LIMITED_COMP
              - SENSITIVE
              - PRIMARY
              - PEOPLE_OPS_ADMIN
              - PEOPLE_OPS_ADMIN_NO_COMP_DATA
              - PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA
              - OWNER
          roleId:
            type: string
            description: roleId requested by app
          eventNotifyUrl:
            type: string
            format: uri
            description: URL that should be notified on events
          payload:
            type: object
            description: custom payload to send in lieu of regular payload
            additionalProperties:
              type: string
          events:
            type: array
            description: set of events to notify on
            uniqueItems: true
            items:
              type: string
          type:
            type: string
            description: APP, BUNDLE, or INTERNAL
            enum:
              - APP
              - BUNDLE
              - INTERNAL
          bundle:
            $ref: '#/components/schemas/Bundle'
          scopes:
            type: array
            description: access scopes that the app is requesting
            items:
              type: string
          tags:
            type: array
            description: tags/categories the app belongs to
            items:
              type: string
      ResultsUser:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/User'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      BundleInstallValidate:
        type: object
        required:
          - ok
        properties:
          ok:
            type: boolean
          duplicateEntities:
            type: array
            items:
              $ref: '#/components/schemas/BundleInstallEntity'
          errors:
            type: array
            items:
              type: string
      CreateUser:
        type: object
        required:
          - orgs
        properties:
          appId:
            type: string
            description: if the user is an app user, the id of the app
          name:
            $ref: '#/components/schemas/Name'
          email:
            type: string
            example: bob@example.com
            description: email address of user
          orgs:
            type: array
            description: list of member orgs with permission levels
            uniqueItems: true
            items:
              $ref: '#/components/schemas/OrgAccess'
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          status:
            type: string
            description: current status of user
            enum:
              - SUPERUSER
              - NORMAL
              - INACTIVE
              - UNINSTALLED
          options:
            type: object
            description: >-
              for apps, options (specific options are specific to the particular
              app); for users, user-set preferences
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          secrets:
            type: object
            description: >-
              write-only secrets; the content of these secrets are not retrievable
              via the external-facing API
          emailSettings:
            type: array
            description: Email settings for the user
            items:
              $ref: '#/components/schemas/UserEmailSetting'
      ScopeRequest:
        type: object
        required:
          - scope
        properties:
          scope:
            type: string
            description: scope being requested
      ResultsApprovalRequestScenarioResponse:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalRequestScenarioResponse'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsApprovalChain:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalChain'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateApprovalChain:
        type: object
        required:
          - approvalNotifierUserIds
          - isPreview
          - name
        properties:
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity id
          entityType:
            type: string
            example: SCENARIO
            description: entity type
            enum:
              - COMP_REVIEW
              - SCENARIO
              - TIMEOFF
          name:
            type: string
            example: Comp Review 06/15/2022
            description: human-readable name of approval chain
          isPreview:
            type: boolean
            example: true
            description: >-
              isPreview specifies that this is a preview for implementations that
              use it (e.g. Compensation Reviews)
          fallbackApproverJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the jobId of the fallback approver
          fallbackApproverJobError:
            type: string
            description: most recent error for fallback approver
          approvalNotifierUserIds:
            type: array
            description: ids of any users who should be notified when approval is complete
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ResultsApprovalChainStage:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalChainStage'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsApprovalRequestCompReviewResponse:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalRequestCompReviewResponse'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateApprovalChainStage:
        type: object
        required:
          - approvalCommentRequired
          - groups
          - order
          - rejectBehavior
          - rejectionCommentRequired
          - status
        properties:
          inclusionExpression:
            type: string
            description: optional custom expression to determine stage inclusion behavior
          inclusionBehavior:
            type: string
            description: determines whether stage is conditional based on an expression
            enum:
              - ONLY_INCLUDE_IF
              - EXCLUDE_IF
          expandExpression:
            type: string
            description: optional custom expression to determine approval request tree
          rejectBehavior:
            type: string
            description: determines which stage becomes active when a rejection event happens
            enum:
              - BACK_TO_BEGINNING
              - PREVIOUS_PHASE
          status:
            type: string
            description: status of the stage
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          approvalCommentRequired:
            type: boolean
            description: requires a comment on an approval event
          rejectionCommentRequired:
            type: boolean
            description: requires a comment on an rejection event
          order:
            type: integer
            format: int32
            description: order of stage in approval chain
          groups:
            type: array
            description: list of groups that are involved in this approval stage
            items:
              $ref: '#/components/schemas/ApprovalGroup'
      DefaultChainCreateBody:
        type: object
        required:
          - entityType
        properties:
          entityType:
            type: string
            enum:
              - COMP_REVIEW
              - SCENARIO
              - TIMEOFF
      ResultsApprovalRequest:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalRequest'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ApprovalRequestCreateBody:
        type: object
        required:
          - entityId
        properties:
          entityId:
            type: string
      ApprovalRequestPatchBody:
        type: object
        required:
          - status
        properties:
          status:
            type: string
            enum:
              - CANCELED
              - REJECTED
              - PENDING
              - ACTIVE
              - REVIEWED
              - APPROVED
              - SKIPPED
              - SUBMITTED
          message:
            type: string
      ReassignApproverPatchBody:
        type: object
        required:
          - initialJobId
          - message
          - reassignJobId
          - stageOrder
        properties:
          stageOrder:
            type: integer
            format: int32
          initialJobId:
            type: string
          reassignJobId:
            type: string
          message:
            type: string
      ApprovalRequestDeleteBody:
        type: object
        properties:
          message:
            type: string
      SendReminderBody:
        type: object
        required:
          - jobId
        properties:
          jobId:
            type: string
      BulkChangeAssessmentTypesBody:
        type: object
        required:
          - ids
          - type
        properties:
          ids:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          type:
            type: string
            enum:
              - REVIEW
              - COMP_REVIEW
              - SURVEY
      ResultsAssessment:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Assessment'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      AssessmentFormsAndQuestions:
        type: object
        required:
          - forms
          - questions
        properties:
          forms:
            type: array
            items:
              $ref: '#/components/schemas/Form'
          questions:
            type: array
            items:
              $ref: '#/components/schemas/Question'
      CreateAssessment:
        type: object
        required:
          - label
          - type
        properties:
          label:
            type: string
            example: Engineering Budget Q2 2019
            description: human-readable label of assessment
          slug:
            type: string
            example: engineering-budget-q2-2019
            description: unique slug of assessment
          type:
            type: string
            description: type of assessment
            enum:
              - REVIEW
              - COMP_REVIEW
              - SURVEY
          fields:
            type: object
            description: assessment fields (description)
          shareAccess:
            type: array
            description: users who have been granted access to this assessment
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: view sensitivity of this assessment
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          color:
            type: string
            description: color of assessment
            pattern: ^#[a-f0-9]{6}$
          startDate:
            type: string
            format: date
            description: >-
              Date this assessment begins. In the context of REVIEW goals, the
              date the review cycle begins.
          endDate:
            type: string
            format: date
            description: >-
              Date this assessment ends, or is completed. In the context of REVIEW
              assessment, the date the review cycle ends.
          status:
            type: string
            description: status of this assessment - DRAFT, ACTIVE, DONE
            enum:
              - DRAFT
              - ACTIVE
              - DONE
          doneAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: timestamp when the status of this assessment was set to done
          taskCount:
            type: integer
            format: int32
            example: 12
            description: number of tasks associated with this assessment
          taskDoneCount:
            type: integer
            format: int32
            example: 3
            description: number of tasks associated with this assessment that are done
          peopleIncludedCount:
            type: integer
            format: int32
            example: 12
            description: number of people included in this assessment
          query:
            type: string
            description: Query for which people/jobs can be included in the review.
      Billing:
        type: object
        required:
          - customer
          - invoices
          - org
        properties:
          checkout:
            $ref: '#/components/schemas/Checkout'
          customer:
            $ref: '#/components/schemas/Customer'
          invoices:
            type: array
            items:
              $ref: '#/components/schemas/Invoice'
          paymentInfo:
            $ref: '#/components/schemas/PaymentInfo'
          plan:
            $ref: '#/components/schemas/Plan'
          org:
            $ref: '#/components/schemas/Org'
      Checkout:
        type: object
        properties:
          nextPaymentDate:
            type: string
            format: date
          tax:
            type: integer
            format: int64
          total:
            type: integer
            format: int64
      Invoice:
        type: object
        required:
          - amount
          - createAt
          - number
          - status
        properties:
          number:
            type: string
            example: F38A6C8-0010
            description: a unique identifying string for invoices
          amount:
            type: number
            example: 1002.31
            description: current final amount due for the invoices
          hostedInvoiceUrl:
            type: string
            example: https://pay.stripe.com/invoice/invst_Nv8DFERQvTsBJqnZ4z19cGZBU1
            description: >-
              URL for the hosted invoice page, which allows customers to view and
              pay an invoice
          invoicePdf:
            type: string
            example: https://pay.stripe.com/invoice/invst_wNK0BvV4iUOWOn5mzLT1ybQ2LC/pdf
            description: the link to download the PDF for the invoice
          status:
            type: string
            example: PAID
            description: one of PAID, UNPAID, or VOID
            enum:
              - PAID
              - UNPAID
              - VOID
          createAt:
            type: string
            example: '2019-07-27T20:56:10Z'
            description: created timestamp
      PaymentInfo:
        type: object
        required:
          - paymentType
        properties:
          paymentType:
            type: string
            example: CREDIT_CARD
            description: >-
              indicates how the customer has decided to pay; one of CREDIT_CARD,
              INVOICE
            enum:
              - CREDIT_CARD
              - INVOICE
          creditCardEndDigits:
            type: string
            example: '4242'
            description: >-
              if the customer has indicated they wish to pay by credit card, the
              last four digits of the credit card they are paying with. Null if
              the customer is paying by invoice.
          brand:
            type: string
            example: Visa
            description: >-
              if the customer has indicated they wish to pay by credit card, the
              brand of the credit card they are paying with. Null if the customer
              is paying by invoice.
      Plan:
        type: object
        required:
          - id
          - interval
          - intervalCount
          - name
          - stripeProductId
          - tiers
        properties:
          id:
            type: string
            description: unique Stripe identifier for this plan
          name:
            type: string
            description: human-readable nickname for this plan
          interval:
            type: string
            description: interval for billing on this plan
            enum:
              - DAY
              - WEEK
              - MONTH
              - YEAR
          intervalCount:
            type: integer
            format: int32
            description: number of intervals, for example 3 for quarterly billing
          tiers:
            type: array
            description: pricing tiers, per employee per interval
            items:
              $ref: '#/components/schemas/PlanTier'
          stripeProductId:
            type: string
            description: stripe product id that this plan belongs to
      PlanTier:
        type: object
        required:
          - unitAmount
        properties:
          upTo:
            type: integer
            format: int64
            description: headcount up to this level is charged at the below rate
          unitAmount:
            type: number
            description: PEPM rate
      UpdateSubscription:
        type: object
        required:
          - paymentMethod
        properties:
          paymentMethod:
            type: string
            description: >-
              Payment method to create; 'INVOICE' to make subscription paid by
              invoice, or the ID of the payment method if to make the subscription
              automatically charge a card
      CancelSubscriptionSurveyAnswers:
        type: object
        required:
          - otherComments
          - reason
        properties:
          otherComments:
            type: string
            description: >-
              Any additional comments about ChartHop when cancelling their
              subscription
          reason:
            type: string
            description: >-
              Concatenated string of reasons why the customer unsubscribed from
              ChartHop
      ResultsData:
        type: object
        required:
          - data
        properties:
          data:
            type: array
            items:
              type: object
              additionalProperties:
                type: object
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsGuideline:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Guideline'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateBudgetPool:
        type: object
        required:
          - appliedField
          - basisType
          - compReviewId
          - label
          - sourceField
        properties:
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the ID of the comp review this budget is for
          label:
            type: string
            example: Merit
            description: unique label
          participantsExpr:
            type: string
            description: >-
              expression that determines if a particular job is included in this
              budget pool
          appliedField:
            type: string
            example: base
            description: the field this budget pool applies to
          sourceField:
            type: string
            example: base
            description: the field this budget pool is calculated from
          basisType:
            type: string
            description: the method for calculating the amount in the budget
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          fixedAmount:
            $ref: '#/components/schemas/Money'
          fixedValue:
            type: number
            description: >-
              a fixed amount for the budget (used with basisType=FIXED ||
              basisType=PERCENTAGE)
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedBudgetMap:
            type: object
            description: a map of reviewer job IDs to fixed budget money amounts
            additionalProperties:
              $ref: '#/components/schemas/Money'
          basisExpr:
            type: string
            description: >-
              expression that calculates how much each job contributes to the
              budget (used with basisType=CUSTOM)
          defaultCurrency:
            type: string
            description: >-
              Default currency used when calculating budget pool, falls back to
              org primary currency if not set
      BudgetTierRepresentationResponse:
        type: object
        required:
          - eligible
          - reviewees
          - reviewer
        properties:
          reviewer:
            $ref: '#/components/schemas/Job'
          reviewees:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          parentReviewerJobId:
            type: string
          eligible:
            type: boolean
          budget:
            type: object
      BudgetTiersResponse:
        type: object
        required:
          - finalApprovers
          - reviews
        properties:
          reviews:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/BudgetTierRepresentationResponse'
          finalApprovers:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ResultsCategory:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Category'
          next:
            type: string
      CreateCategory:
        type: object
        required:
          - label
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          label:
            type: string
            example: Performance
            description: human-readable label of category
          fieldIds:
            type: array
            description: set of field ids included in this category
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          nativeFields:
            type: array
            description: set of native field names included in this category
            uniqueItems: true
            items:
              type: string
      CreateCategorySort:
        type: object
        required:
          - categoryIds
          - orgId
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          categoryIds:
            type: array
            description: ordered list of category ids of an org
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      BulkUpdateRequest:
        type: object
        required:
          - date
          - jobIds
          - update
        properties:
          jobIds:
            type: array
            description: list of job ids to update
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          update:
            $ref: '#/components/schemas/JobUpdate'
          date:
            type: string
            format: date
            description: date of update
          scenarioId:
            type: string
            description: scenario id
          note:
            type: string
            description: note for update
      CreateChange:
        type: object
        properties:
          jobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: job id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          scenarioId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: scenario that this change belongs to
          personId:
            type: string
            description: the id of the person involved, or empty if no person attached to job
          otherJobId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              for MOVE changes, the id of the job moving from; for RELATE changes,
              the id of the other job
          type:
            type: string
            description: type of change
            enum:
              - HIRE
              - DEPART
              - MOVE
              - UPCOMING
              - CREATE
              - UPDATE
              - DATA
              - DELETE
              - RELATE
              - BACKFILL
          date:
            type: string
            format: date
            description: date of change
          announceDate:
            type: string
            format: date
            description: >-
              for HIRE and DEPART changes, the announce date, if the announce date
              is different from the date of change
          departType:
            type: string
            description: for DEPART changes, the type of departure
            enum:
              - VOLUNTARY
              - INVOLUNTARY
          departRegret:
            type: string
            description: for DEPART changes, whether the departure is regrettable
            enum:
              - REGRET
              - NONREGRET
          reason:
            type: string
            description: the reason of the change
          promotionType:
            type: string
            description: if it's a promotion or a demotion
            enum:
              - PROMOTION
              - DEMOTION
              - NONE
          job:
            $ref: '#/components/schemas/PartialJob'
          update:
            $ref: '#/components/schemas/JobUpdate'
          note:
            type: string
            description: note on the change
      ResultsChange:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Change'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsChangeData:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ChangeData'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ScenarioChangesWithBudgetRollup:
        type: object
        required:
          - budgetPoolSummaries
          - changes
        properties:
          changes:
            $ref: '#/components/schemas/ResultsChangeData'
          budgetPoolSummaries:
            type: object
            additionalProperties:
              type: object
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      BulkChangeRequest:
        type: object
        required:
          - changes
        properties:
          changes:
            type: array
            description: list of changes to create
            items:
              $ref: '#/components/schemas/CreateChange'
      ApproveChange:
        type: object
        required:
          - status
        properties:
          status:
            type: string
            enum:
              - ACTIVE
              - STRUCK
              - CONFLICT
              - INACTIVE
              - PROPOSED
          approvalNote:
            type: string
          changeId:
            type: string
      ChangeStatusResponse:
        type: object
        required:
          - processId
          - status
        properties:
          processId:
            type: integer
            format: int32
          status:
            type: boolean
      UpdateScenarioChangeResponse:
        type: object
        required:
          - data
          - processId
        properties:
          processId:
            type: integer
            format: int32
          data:
            type: array
            items:
              $ref: '#/components/schemas/ChangeData'
      CreateComment:
        type: object
        required:
          - content
          - entityId
          - entityType
        properties:
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this comment belongs to, should be used with
              entityId
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: entity the comment was posted on
          entityType:
            type: string
            description: type of entity the comment was posted on
            enum:
              - CHANGE
              - ASSESSMENT
              - SCENARIO
              - APPROVAL_APPROVE
              - APPROVAL_REJECT
              - APPROVAL_REASSIGN
              - APPROVAL_WITHDRAW
          content:
            $ref: '#/components/schemas/Markup'
      ResultsComment:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Comment'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateCompBand:
        type: object
        required:
          - baseInterval
          - color
          - jobLevel
          - label
        properties:
          label:
            type: string
            example: L15
            description: human-readable name of content
          color:
            type: string
            example: '#ffee4a'
            description: hex color associated with the band level
          baseCompMax:
            $ref: '#/components/schemas/Money'
          baseCompMid:
            $ref: '#/components/schemas/Money'
          baseCompMin:
            $ref: '#/components/schemas/Money'
          baseSpread:
            type: number
            description: spread percent used to calculate base comp from the midpoint
          baseInterval:
            $ref: '#/components/schemas/EnumValue'
          baseTargetPay:
            $ref: '#/components/schemas/Money'
          baseTargetPayPercentile:
            type: number
            description: >-
              base target pay associated with open jobs at this band level, as a
              percentile
          equityTargetShares:
            type: number
            description: target equity for the band, in shares
          equityTargetPercentOfBase:
            type: number
            description: target equity for the band, as a percentage of base
          equityTargetValue:
            type: number
            description: >-
              target equity for the band, as a monetary value, in the same
              currency as the base
          variableValue:
            $ref: '#/components/schemas/Money'
          variablePercentOfBase:
            type: number
            description: >-
              variable compensation for the band, specified as a percentage of
              base
          jobTierOneField:
            type: string
            description: first job tier associated with the comp band
          jobTierTwoField:
            type: string
            description: second job tier associated with the comp band
          jobTierThreeField:
            type: string
            description: third job tier associated with the comp band
          jobLevel:
            type: string
            description: job level associated with the comp band
      ResultsCompReview:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/CompReview'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CompReviewMetadata:
        type: object
        required:
          - approvers
          - collaborators
          - compReviewId
          - eligibleEmployees
          - eligibleEmployeesFilter
          - ineligibleEmployees
          - ineligibleEmployeesFilter
          - orgId
          - reviewers
        properties:
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: comp review id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if built-in)
          eligibleEmployees:
            type: integer
            format: int32
            description: count of employees eligible for the comp review
          eligibleEmployeesFilter:
            type: string
            description: filter to view eligible employees on the datasheet
          ineligibleEmployees:
            type: integer
            format: int32
            description: count of employees ineligible for the comp review
          ineligibleEmployeesFilter:
            type: string
            description: filter to view ineligible employees on the datasheet
          approvers:
            type: integer
            format: int32
            description: count of final approvers
          reviewers:
            type: integer
            format: int32
            description: count of reviewers in the comp review
          collaborators:
            type: integer
            format: int32
            description: count of collaborators in the comp review
      CreateCompReview:
        type: object
        required:
          - label
        properties:
          label:
            type: string
            example: Comp review H2 2022
            description: human-readable label of goal
          config:
            $ref: '#/components/schemas/CompReviewConfig'
          status:
            type: string
            description: >-
              Whether the compensation review has been approved by the final
              approvers
            enum:
              - PENDING
              - PAUSED
              - ACTIVE
              - REJECTED
              - COMPLETE
              - COMPLETE_APPROVED
          shareAccess:
            type: array
            description: users who have been granted access to this comp review
            items:
              $ref: '#/components/schemas/ShareAccess'
      GenerateCompReviewOptions:
        type: object
        required:
          - isPreview
        properties:
          isPreview:
            type: boolean
      TierRepresentationResponse:
        type: object
        required:
          - eligible
          - reviewees
          - reviewer
        properties:
          reviewer:
            $ref: '#/components/schemas/Job'
          reviewees:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          parentReviewerJobId:
            type: string
          eligible:
            type: boolean
      TiersResponse:
        type: object
        required:
          - finalApprovers
          - reviews
        properties:
          reviews:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/TierRepresentationResponse'
          finalApprovers:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      InCycleViewResponse:
        type: object
        properties:
          reviews:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalRequestCompReviewResponse'
          proposal:
            $ref: '#/components/schemas/ApprovalRequestCompReviewResponse'
          scenarioMap:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Scenario'
          parentReviewsMap:
            type: object
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
          collaboratingWithJobIds:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          visibleColumns:
            type: array
            items:
              $ref: '#/components/schemas/CompReviewWorkbookColumn'
          error:
            type: object
            additionalProperties:
              type: string
          features:
            $ref: '#/components/schemas/InCycleViewFeatures'
      InCycleViewChanges:
        type: object
        required:
          - changeMap
        properties:
          changeMap:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/ChangeData'
          guidelinesMap:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/GuidelineCalculation'
      InCycleChange:
        type: object
        required:
          - change
          - guidelines
        properties:
          change:
            $ref: '#/components/schemas/ChangeData'
          guidelines:
            type: array
            items:
              $ref: '#/components/schemas/GuidelineCalculation'
      PartialAppEntities:
        type: object
        required:
          - fields
          - jobs
          - personToJobMap
          - persons
        properties:
          jobs:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Job'
          persons:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Person'
          personToJobMap:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Job'
          fields:
            type: array
            items:
              $ref: '#/components/schemas/Field'
      SendReminderEmailOptions:
        type: object
        required:
          - approvalRequestId
        properties:
          approvalRequestId:
            type: string
      Bucket:
        type: object
        required:
          - approverMap
          - bucket
        properties:
          bucket:
            type: number
          approverMap:
            type: object
            additionalProperties:
              type: integer
              format: int32
      CompReviewVisualizations:
        type: object
        required:
          - jobToBaseSpendMap
          - raisePercentageHistogram
        properties:
          raisePercentageHistogram:
            $ref: '#/components/schemas/RaisePercentageHistogram'
          jobToBaseSpendMap:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/Money'
          budgetPoolCalculation:
            $ref: '#/components/schemas/BudgetCalculation'
      RaisePercentageHistogram:
        type: object
        required:
          - buckets
          - increment
          - max
          - min
        properties:
          min:
            type: number
          max:
            type: number
          increment:
            type: number
          buckets:
            type: array
            items:
              $ref: '#/components/schemas/Bucket'
      GetVisualizationsOptions:
        type: object
        required:
          - isCollabicientView
        properties:
          changeIds:
            type: array
            description: >-
              A set of Change ObjectIds used to filter the results of budget and
              raise calculations
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          viewInCurrency:
            type: string
            description: Currency to view budget visualizations
          includeCollaborators:
            type: boolean
            description: >-
              Whether or not to include approval requests on which a user is
              collaborating when calculating budget amounts for that user
          isCollabicientView:
            type: boolean
            description: Are the visualizations for a collaborating participant
      HomepageContentRender:
        type: object
        required:
          - content
        properties:
          content:
            type: string
      ResultsContent:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Content'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ContentRender:
        type: object
        required:
          - blocks
        properties:
          blocks:
            type: array
            items:
              $ref: '#/components/schemas/ContentBlock'
      CreateContent:
        type: object
        required:
          - title
        properties:
          parentContentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent content id in the hierarchy
          title:
            type: string
            example: Benefits Policies
            description: title of the content page
          path:
            type: string
            example: employee-info/benefits-policies
            description: >-
              full path to the content, if not set, defaults to an id/slug
              generated URL
          blocks:
            type: array
            description: content blocks
            items:
              $ref: '#/components/schemas/ContentBlock'
          imagePath:
            type: string
            example: path/to/image.jpg
            description: path to the image for the page
            pattern: ^[a-zA-Z0-9._/-]+$
          emoji:
            type: string
            example: 💥
            description: emoji, if an emoji is used to represent the page
          coverImagePath:
            type: string
            example: path/to/image.jpg
            description: path to the cover image for the content page
            pattern: ^[a-zA-Z0-9._/-]+$
          sensitive:
            type: string
            description: sensitivity level (ORG public, HIGHly sensitive, or PRIVATE)
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: list of users and groups who have the content shared with them
            items:
              $ref: '#/components/schemas/ShareAccess'
          status:
            type: string
            description: current status of the content page
            enum:
              - DRAFT
              - ACTIVE
              - ARCHIVED
      ResultsCustomer:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Customer'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      InvoiceResponse:
        type: object
        required:
          - invoices
        properties:
          invoices:
            type: array
            items:
              $ref: '#/components/schemas/Invoice'
      Subscription:
        type: object
        required:
          - nextInvoiceAt
          - paymentInfo
          - plan
        properties:
          nextInvoiceAt:
            type: string
            example: '2019-07-27T20:56:10Z'
            description: Timestamp when the next invoice will be generated
          plan:
            $ref: '#/components/schemas/Plan'
          paymentInfo:
            $ref: '#/components/schemas/PaymentInfo'
      CreateCustomer:
        type: object
        required:
          - email
          - name
          - startDate
        properties:
          name:
            type: string
            description: name of customer
          email:
            type: string
            description: email address for billing purposes
          billAddress:
            $ref: '#/components/schemas/Address'
          industry:
            type: string
            description: industry that customer is in
          source:
            type: string
            description: source of customer signup
            enum:
              - ADP_MARKETPLACE
              - SELF_SERVE
              - SELF_SERVE_TEST
              - SEQUOIA_ONE
              - CONNECT
          status:
            type: string
            description: current status
            enum:
              - ACTIVE
              - INACTIVE
              - TRIAL
              - CHURN
              - PAYMENT_ERROR
          salesforceAccountId:
            type: string
            description: salesforce account id
            pattern: ^[a-zA-Z0-9]{15}|[a-zA-Z0-9]{18}$
          products:
            type: array
            description: products that this customer has purchased
            items:
              $ref: '#/components/schemas/ProductItem'
          startDate:
            type: string
            format: date
            description: initial date of billing
          endDate:
            type: string
            format: date
            description: >-
              end of service date for churning customers -- on or after this date,
              service should be disabled
          nextInvoiceDate:
            type: string
            format: date
            description: date of next invoice
          primaryHeadCountFilter:
            type: string
            description: primary headcount filter - used for billing purposes
          secondaryHeadCountFilter:
            type: string
            description: secondary headcount filter - used for billing purposes
          arr:
            type: number
            description: current ARR of the customer based on most recent invoice
          projectedArr:
            type: number
            description: >-
              projected ARR of the customer for upcoming invoice, based on plan
              and headcount
          trialStartDate:
            type: string
            format: date
            description: date this customer begins their trial period
          trialEndDate:
            type: string
            format: date
            description: date this customer ends their trial period
          stripeSubscriptionSync:
            type: string
            description: Stripe subscription settings
            enum:
              - SYNC
              - DELETE
      ResultsDataView:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/DataView'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateDataView:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            description: data view name
          columns:
            type: string
            example: image,name,title
            description: comma delimited list of columns
          type:
            type: string
            description: type of data view
            enum:
              - ANY
              - DATA_SHEET
              - ORG_CHART
              - MAP
          entityType:
            type: string
            description: entity type being viewed
          columnWidths:
            type: object
            description: map of column names to widths in pixels
            additionalProperties:
              type: number
              format: double
          date:
            type: string
            description: >-
              date of view, in either relative (-7d) or exact (YYYY-MM-DD) format;
              if not present, defaults to today
          startDate:
            type: string
            description: >-
              start date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          endDate:
            type: string
            description: >-
              end date of view, if displaying a date range, in either relative
              (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to
              today
          filter:
            type: string
            example: managerCount:1
            description: filter query
          sort:
            type: string
            example: name,title
            description: comma delimited list of columns by which to sort
          groupBy:
            type: string
            example: title
            description: column to group duplicates by
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              data view
            items:
              $ref: '#/components/schemas/ShareAccess'
          sensitive:
            type: string
            description: sensitivity level of data view
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
      CreateEmailTemplate:
        type: object
        required:
          - category
          - name
        properties:
          name:
            type: string
            example: self_serve_welcome
            description: name of the email template
          category:
            type: string
            description: email category
            enum:
              - ADMINISTRATIVE
              - BILLING
              - DATA_IMPORT_AND_SYNC_STATUS
              - TRIAL_REMINDERS
      ResultsEmailTemplate:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/EmailTemplate'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      Event:
        type: object
        required:
          - at
          - entityId
          - entityType
          - id
          - type
          - userId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id who caused the event
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          type:
            type: string
            description: type of event
            enum:
              - APP
              - APPROVE
              - COMBINE
              - CREATE
              - DELETE
              - DONE
              - ERROR
              - EXPORT_CSV
              - EXPORT_ORG_CHART
              - GENERATE
              - GEOIP
              - INCOMING
              - INSTALL
              - INVITE
              - INBOUND
              - LOGIN
              - MERGE
              - OUTBOUND
              - PREVIEW_AS
              - READ
              - READ_SENSITIVE
              - READ_ATS
              - READ_ATS_WEBHOOK
              - READ_FULL_NAME
              - READ_FUTURE_DATE
              - READ_METADATA
              - READ_COMP
              - READ_BILLING
              - READ_PENDING
              - READ_PAYROLL
              - READ_SENSITIVE_FILTERS
              - REJECT
              - REMIND
              - REMOVE_PASSWORD
              - REQUEST
              - RESTORE
              - RESUME
              - REVOKE
              - RUN
              - RUN_ATS
              - SECURITY
              - SHOW_DASHBOARD_DAYS_AHEAD
              - SHOW_OPEN_JOBS
              - STEP
              - SUBMIT
              - SYNC
              - TEST
              - TOKEN
              - UNINSTALL
              - UPDATE
              - UPDATE_PASSWORD
              - UPLOAD_CSV
              - WRITE
              - VIEW_AS
          entityType:
            type: string
            description: type of target entity
            enum:
              - ACTION
              - AGREEMENT
              - APP
              - APP_CONFIG
              - APPROVAL_CHAIN
              - APPROVAL_CHAIN_STAGE
              - APPROVAL_REQUEST
              - ASSESSMENT
              - BUDGET_POOL
              - BUNDLE
              - CATEGORY
              - CATEGORY_SORT
              - CHANGE
              - COMMENT
              - COMP_BAND
              - COMP_REVIEW
              - CONTENT
              - CUSTOMER
              - DATA_VIEW
              - EXCHANGE_RATE
              - EMAIL_TEMPLATE
              - FIELD
              - FILE
              - FORM
              - FORM_DRAFT
              - FORM_RESPONSE
              - GEOCODE
              - GROUP
              - GUIDELINE
              - JOB
              - JOB_LEVEL
              - MEDIA
              - MESSAGE
              - MULTIPLIER
              - ORG
              - ORG_CONFIG
              - PERSON
              - PROFILE_TAB
              - POLICY
              - POSITION
              - PROCESS
              - PRODUCT
              - QUERY_TOKEN
              - QUESTION
              - REPORT
              - REPORT_CHART
              - ROLE
              - SCENARIO
              - STOCK_PRICE
              - TABLE
              - TABLE_ROW
              - TASK_CONFIG
              - TEMPLATE
              - TASK
              - TOKEN
              - TIMEOFF
              - TRACKED_GROUP
              - USER
          entityId:
            type: string
            description: id of target entity
          tableId:
            type: string
            description: id of table, if entity is a table row
          jobId:
            type: string
            description: >-
              jobId of the entity, if the entity is a job or closely connected to
              a single job
          personId:
            type: string
            description: >-
              personId of the entity, if the entity is a person or closely
              connected to a single person
          subtype:
            type: string
            description: subtype of entity
          payload:
            type: object
            description: >-
              event-specific payload containing information about the change that
              took place
          at:
            type: integer
            format: int64
            description: timestamp of event
          processId:
            type: string
            description: id of process
          date:
            type: string
            format: date
            description: effective date, if in use
          scenarioId:
            type: string
            description: id of scenario
          parentEntityId:
            type: string
            description: id of associated entity, such as comp cycle
          fields:
            type: array
            description: set of fields that were updated by the event
            uniqueItems: true
            items:
              type: string
          code:
            type: string
            description: event code, for example job.update
      ResultsEvent:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Event'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ValidateExpressionResponse:
        type: object
        required:
          - isValid
          - results
        properties:
          isValid:
            type: boolean
          results:
            type: array
            items:
              $ref: '#/components/schemas/ValidateExpressionResult'
      ValidateExpressionResult:
        type: object
        required:
          - expr
          - isValid
          - message
        properties:
          expr:
            type: string
          isValid:
            type: boolean
          message:
            type: string
      ValidateExpressionRequest:
        type: object
        required:
          - expressions
        properties:
          expressions:
            type: array
            items:
              type: string
      EvaluateExpressionResponse:
        type: object
        properties:
          result:
            type: object
          error:
            type: string
      EvaluateExpressionRequest:
        type: object
        required:
          - entityId
          - entityType
          - expr
        properties:
          expr:
            type: string
          entityType:
            type: string
            enum:
              - ACTION
              - AGREEMENT
              - APP
              - APP_CONFIG
              - APPROVAL_CHAIN
              - APPROVAL_CHAIN_STAGE
              - APPROVAL_REQUEST
              - ASSESSMENT
              - BUDGET_POOL
              - BUNDLE
              - CATEGORY
              - CATEGORY_SORT
              - CHANGE
              - COMMENT
              - COMP_BAND
              - COMP_REVIEW
              - CONTENT
              - CUSTOMER
              - DATA_VIEW
              - EXCHANGE_RATE
              - EMAIL_TEMPLATE
              - FIELD
              - FILE
              - FORM
              - FORM_DRAFT
              - FORM_RESPONSE
              - GEOCODE
              - GROUP
              - GUIDELINE
              - JOB
              - JOB_LEVEL
              - MEDIA
              - MESSAGE
              - MULTIPLIER
              - ORG
              - ORG_CONFIG
              - PERSON
              - PROFILE_TAB
              - POLICY
              - POSITION
              - PROCESS
              - PRODUCT
              - QUERY_TOKEN
              - QUESTION
              - REPORT
              - REPORT_CHART
              - ROLE
              - SCENARIO
              - STOCK_PRICE
              - TABLE
              - TABLE_ROW
              - TASK_CONFIG
              - TEMPLATE
              - TASK
              - TOKEN
              - TIMEOFF
              - TRACKED_GROUP
              - USER
          entityId:
            type: string
      ResultsField:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Field'
          next:
            type: string
      Field:
        type: object
        required:
          - id
          - isRequired
          - isUnique
          - label
          - name
          - plural
          - sensitive
          - type
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          name:
            type: string
            example: summary
            description: short field name
            pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
          label:
            type: string
            example: Job Summary
            description: human-readable full name of field
          description:
            type: string
            example: >-
              This field tracks the most recent performance rating for an
              individual.
            description: description of field
          question:
            type: string
            example: What do you think of this placeholder question?
            description: human-readable question associated with field
          inUse:
            type: boolean
            description: >-
              disallow any updates to this Field (except for field.question
              string)
          expr:
            type: string
            example: (base + variable) / 12
            description: calculated expression
          exprType:
            type: string
            description: the expected type of the evaluated expression
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          type:
            type: string
            description: type of field
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the field (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          defaultValue:
            type: object
            description: default value if field is not set
          options:
            type: object
            description: validation options
          entityType:
            type: string
            description: entity type of field
            enum:
              - JOB
              - JOB_OPEN
              - JOB_FILLED
              - PERSON
              - CHANGE
              - TABLE
              - ORG
              - USER
              - NONE
          isUnique:
            type: boolean
            description: >-
              indicates that this field value is unique in conjunction with
              entityType PERSON or JOB
          isRequired:
            type: boolean
            description: indicates that this field value is required
          isEffectiveDated:
            type: boolean
            description: indicates that this field value is effective-dated
          aliases:
            type: array
            description: set of aliases for this field
            uniqueItems: true
            items:
              type: string
          calc:
            type: string
            description: >-
              unique ID for the function that runs to calculate the value of this
              field. For native fields only
            enum:
              - ADDRESS
              - AGE
              - ANNIVERSARY
              - ANNUAL_BASE_MONEY
              - BACKFILL
              - BAND
              - BAND_RANGE
              - BASE
              - BASE_CAL_YEAR_PRORATED
              - BASE_CAL_YTD
              - BASE_COMP
              - BASE_COMP_AMOUNT
              - BASE_COMP_ANNUALIZED
              - BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY
              - BASE_COMP_AS_ORG_CURRENCY
              - BASE_COMP_CHANGES
              - BASE_COMP_CURRENCY
              - BASE_COMP_HOURS_PER_WEEK
              - BASE_COMP_INTERVAL
              - BASE_COMP_LAST_RAISE_DATE
              - BASE_COMP_LAST_RAISE_MONTHS_SINCE
              - BASE_COMP_LAST_RAISE_PAY
              - BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY
              - BASE_COMP_LAST_RAISE_PERCENT
              - BASE_COMP_LAST_RAISE_TYPE
              - BASE_COMP_PAY
              - BASE_COMP_PAY_AS_ORG_CURRENCY
              - BASE_COMP_WEEKS_PER_YEAR
              - BASE_FISCAL_YEAR_PRORATED
              - BASE_FISCAL_YTD
              - BASE_PRIMARY
              - BASE_RAISE_AMOUNT
              - BASE_RAISE_DATE
              - BASE_RAISE_PERCENT
              - BIRTH_DATE
              - BIRTHDAY
              - BONUS_TARGET
              - BUDGET_COST
              - BUSINESS_UNITS
              - CAL_YEAR_VEST_SHARES
              - CAL_YEAR_VEST_VALUE
              - CAN_APPROVE_CHANGE
              - CAN_EDIT_JOB
              - CASH_COMP
              - CASH_COMP_LOCAL
              - CHANGE
              - CHANGE_ID
              - COMMISSION_TARGET
              - COMP
              - COMP_CHANGE_PERCENT
              - COMPA_RATIO_MID
              - COMPA_RATIO_TARGET
              - CONTACT
              - COST
              - CREATE_DATE
              - CURRENCY
              - DATA
              - DATE
              - DATE_OF
              - DAYS_ACTIVE
              - DAYS_OFF
              - DAYS_OFF_TAKEN
              - DAYS_OFF_UPCOMING
              - DAYS_OPEN
              - DB
              - DEPART
              - DEPARTMENT
              - DEPARTMENT_FUNC
              - DIRECT_JOBS
              - DIRECT_JOB_COUNT
              - DIRECT_PERSON_COUNT
              - EMPLOYMENT
              - END_DATE_JOB
              - END_DATE_ORG
              - ETHNICITY
              - FISCAL_YEAR_COST
              - GENDER
              - GEOIP
              - GEOIP_ADDRESS
              - GRAND_MANAGER
              - GRANT_SHARES
              - GRANT_TYPE
              - GRANT_VALUE
              - GRANTS
              - GROUP_IDS
              - HEADCOUNT
              - HISTORIC_BACKFILL
              - HOUR
              - HOURLY
              - HOURLY_PRIMARY
              - HOURS_PER_WEEK
              - IMAGE
              - INDIRECT
              - INDIRECT_JOBS
              - JOB
              - JOB_ID
              - JOB_CODE
              - JOBCOUNT
              - LAST_GRANT
              - LAST_GRANT_DATE
              - LAST_GRANT_ORIGINAL_VALUE
              - LOCATION
              - MANAGE_JOBS
              - MANAGE_PERSONS
              - MANAGER
              - MANAGER_COUNT
              - MANAGER_FILLED
              - MANAGER_ID
              - MANAGERS
              - MANAGER_PERSON
              - MANAGER_PERSONS
              - ME
              - MERGE_SCENARIO_ID
              - NAME
              - NAME_AUDIO
              - NAME_TITLE
              - NEXT_DAY_OFF
              - NEXT_TIME_OFF
              - NEXT_YEAR_VEST_SHARES
              - NEXT_YEAR_VEST_VALUE
              - NOTE
              - NOOP
              - OPEN
              - ORG
              - PERSON
              - PERSON_ID
              - PLACEMENT
              - PREV_DAY_OFF
              - PREV_TIME_OFF
              - PROMOTION
              - PROMOTION_DATE
              - PROPOSED
              - Q
              - RAISE_AMOUNT
              - RAISE_DATE
              - RAISE_PERCENT
              - RAISE_PROMOTION_DATE
              - REASON
              - REGRET
              - RELATIONSHIPS
              - REMOTE_WORK_ADDRESS
              - SCENARIO
              - SCENARIO_CHANGED
              - SENSITIVE
              - SENSITIVE_FIELDS
              - START_DATE
              - START_DATE_JOB
              - START_DATE_ORG
              - START_DATE_PLANNED
              - STATE
              - STRIKE_PRICE
              - TARGET_HOURS_PER_WEEK
              - TARGET_WEEKS_PER_YEAR
              - TEAM
              - TENURE_JOB
              - TENURE_ORG
              - TIMEZONE_OFFSET
              - TITLE
              - TITLE_DATE
              - TODAY
              - TOTAL_COMP
              - TOTAL_COMP_LOCAL
              - TOTAL_ORG_SHARES
              - TOTAL_SHARES
              - TOTAL_SHARES_VALUE
              - UNDER
              - UNDER_INCLUDING
              - UNDER_JOBS
              - UNVESTED_SHARES
              - UNVESTED_VALUE
              - UPDATE
              - USER_ACTIVE_DAYS
              - USER_CAN_EDIT_COMP_FOR_JOB
              - USER
              - VARIABLE
              - VARIABLE_AMOUNT
              - VARIABLE_INTERVAL
              - VARIABLE_PERCENT
              - VARIABLE_PRIMARY
              - VARIABLE_TARGET
              - VARIABLE_TARGET_AMOUNT
              - VARIABLE_TARGET_ANNUALIZED
              - VARIABLE_TARGET_CURRENCY
              - VARIABLE_TARGET_PERCENT
              - VARIABLE_TARGET_TYPE
              - VARIABLE_TARGETS
              - VARIABLE_TARGETS_LAST_RAISE_DATE
              - VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE
              - VARIABLE_TARGETS_LAST_RAISE_PAY
              - VARIABLE_TARGETS_LAST_RAISE_PERCENT
              - VARIABLE_TYPE
              - VESTED_DATE
              - VESTED_SHARES
              - VESTED_VALUE
              - WEEKS_PER_YEAR
              - WORK_ADDRESS
          classification:
            type: string
            description: >-
              indicates how this field is calculated (whether it's stored in the
              DB, evaluated through the expression service, or compound)
            enum:
              - COMPOUND
          sensitive:
            type: string
            description: sensitivity level of data
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          hideExpr:
            type: boolean
            description: hide expression-derived values from non-sensitive users
          expireDays:
            type: integer
            format: int32
            description: number of days after which the data becomes invalid
            minimum: 1
          categoryId:
            type: string
            description: the category the field belongs to
          categoryIds:
            type: array
            description: the categories the field belongs to
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          status:
            type: string
            description: the status of the field
            enum:
              - ACTIVE
              - HIDDEN
          tableId:
            type: string
            description: >-
              the table id this field applies to, only applicable when EntityType
              equals TABLE
          tableName:
            type: string
          tableRef:
            $ref: '#/components/schemas/TableRef'
          readonly:
            type: boolean
          builtIn:
            type: boolean
          canOverrideSensitivity:
            type: boolean
          places:
            type: integer
            format: int32
            description: number of decimal places for money values
          overrideRevert:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/DtValue'
          overrideName:
            type: string
          hasSubfields:
            type: boolean
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      CreateField:
        type: object
        required:
          - entityType
          - isRequired
          - isUnique
          - label
          - name
          - sensitive
          - type
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          name:
            type: string
            example: summary
            description: short field name
            pattern: ^[a-zA-Z][a-zA-Z0-9_]+$
          label:
            type: string
            example: Job Summary
            description: human-readable full name of field
          description:
            type: string
            example: >-
              This field tracks the most recent performance rating for an
              individual.
            description: description of field
          question:
            type: string
            example: What do you think of this placeholder question?
            description: human-readable question associated with field
          inUse:
            type: boolean
            description: >-
              disallow any updates to this Field (except for field.question
              string)
          expr:
            type: string
            example: (base + variable) / 12
            description: calculated expression
          exprType:
            type: string
            description: the expected type of the evaluated expression
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          type:
            type: string
            description: type of field
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the field (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          defaultValue:
            type: object
            description: default value if field is not set
          options:
            type: object
            description: validation options
          entityType:
            type: string
            description: entity type of field
            enum:
              - JOB
              - JOB_OPEN
              - JOB_FILLED
              - PERSON
              - CHANGE
              - TABLE
              - ORG
              - USER
              - NONE
          sensitive:
            type: string
            description: sensitivity level of data
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          hideExpr:
            type: boolean
            description: hide expression-derived values from non-sensitive users
          expireDays:
            type: integer
            format: int32
            description: number of days after which the data becomes invalid
            minimum: 1
          status:
            type: string
            description: the status of the field
            enum:
              - ACTIVE
              - HIDDEN
          tableId:
            type: string
            description: >-
              the table id this field applies to, only applicable when EntityType
              equals TABLE
          tableRef:
            $ref: '#/components/schemas/TableRef'
          isUnique:
            type: boolean
            description: >-
              indicates that this field value is unique in conjunction with
              entityType PERSON or JOB
          isRequired:
            type: boolean
            description: indicates that this field value is required
          isEffectiveDated:
            type: boolean
            description: indicates that this field value is effective-dated
          dataFetchTypes:
            type: array
            description: set of data fetch types
            uniqueItems: true
            items:
              type: string
              enum:
                - BASIC
                - UPDATE
                - CHANGE
                - RELATIONSHIP_MANAGER
                - RELATIONSHIP_ALL
                - TITLE
                - PROMOTION
                - GROUP
                - COMP
                - COMP_HISTORY
                - GRANT
                - TIMEOFF
                - PERSON_JOIN
                - ALL_DATA
          aliases:
            type: array
            description: set of aliases for this field
            uniqueItems: true
            items:
              type: string
          calc:
            type: string
            description: >-
              unique ID for the function that runs to calculate the value of this
              field. For native fields only
            enum:
              - ADDRESS
              - AGE
              - ANNIVERSARY
              - ANNUAL_BASE_MONEY
              - BACKFILL
              - BAND
              - BAND_RANGE
              - BASE
              - BASE_CAL_YEAR_PRORATED
              - BASE_CAL_YTD
              - BASE_COMP
              - BASE_COMP_AMOUNT
              - BASE_COMP_ANNUALIZED
              - BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY
              - BASE_COMP_AS_ORG_CURRENCY
              - BASE_COMP_CHANGES
              - BASE_COMP_CURRENCY
              - BASE_COMP_HOURS_PER_WEEK
              - BASE_COMP_INTERVAL
              - BASE_COMP_LAST_RAISE_DATE
              - BASE_COMP_LAST_RAISE_MONTHS_SINCE
              - BASE_COMP_LAST_RAISE_PAY
              - BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY
              - BASE_COMP_LAST_RAISE_PERCENT
              - BASE_COMP_LAST_RAISE_TYPE
              - BASE_COMP_PAY
              - BASE_COMP_PAY_AS_ORG_CURRENCY
              - BASE_COMP_WEEKS_PER_YEAR
              - BASE_FISCAL_YEAR_PRORATED
              - BASE_FISCAL_YTD
              - BASE_PRIMARY
              - BASE_RAISE_AMOUNT
              - BASE_RAISE_DATE
              - BASE_RAISE_PERCENT
              - BIRTH_DATE
              - BIRTHDAY
              - BONUS_TARGET
              - BUDGET_COST
              - BUSINESS_UNITS
              - CAL_YEAR_VEST_SHARES
              - CAL_YEAR_VEST_VALUE
              - CAN_APPROVE_CHANGE
              - CAN_EDIT_JOB
              - CASH_COMP
              - CASH_COMP_LOCAL
              - CHANGE
              - CHANGE_ID
              - COMMISSION_TARGET
              - COMP
              - COMP_CHANGE_PERCENT
              - COMPA_RATIO_MID
              - COMPA_RATIO_TARGET
              - CONTACT
              - COST
              - CREATE_DATE
              - CURRENCY
              - DATA
              - DATE
              - DATE_OF
              - DAYS_ACTIVE
              - DAYS_OFF
              - DAYS_OFF_TAKEN
              - DAYS_OFF_UPCOMING
              - DAYS_OPEN
              - DB
              - DEPART
              - DEPARTMENT
              - DEPARTMENT_FUNC
              - DIRECT_JOBS
              - DIRECT_JOB_COUNT
              - DIRECT_PERSON_COUNT
              - EMPLOYMENT
              - END_DATE_JOB
              - END_DATE_ORG
              - ETHNICITY
              - FISCAL_YEAR_COST
              - GENDER
              - GEOIP
              - GEOIP_ADDRESS
              - GRAND_MANAGER
              - GRANT_SHARES
              - GRANT_TYPE
              - GRANT_VALUE
              - GRANTS
              - GROUP_IDS
              - HEADCOUNT
              - HISTORIC_BACKFILL
              - HOUR
              - HOURLY
              - HOURLY_PRIMARY
              - HOURS_PER_WEEK
              - IMAGE
              - INDIRECT
              - INDIRECT_JOBS
              - JOB
              - JOB_ID
              - JOB_CODE
              - JOBCOUNT
              - LAST_GRANT
              - LAST_GRANT_DATE
              - LAST_GRANT_ORIGINAL_VALUE
              - LOCATION
              - MANAGE_JOBS
              - MANAGE_PERSONS
              - MANAGER
              - MANAGER_COUNT
              - MANAGER_FILLED
              - MANAGER_ID
              - MANAGERS
              - MANAGER_PERSON
              - MANAGER_PERSONS
              - ME
              - MERGE_SCENARIO_ID
              - NAME
              - NAME_AUDIO
              - NAME_TITLE
              - NEXT_DAY_OFF
              - NEXT_TIME_OFF
              - NEXT_YEAR_VEST_SHARES
              - NEXT_YEAR_VEST_VALUE
              - NOTE
              - NOOP
              - OPEN
              - ORG
              - PERSON
              - PERSON_ID
              - PLACEMENT
              - PREV_DAY_OFF
              - PREV_TIME_OFF
              - PROMOTION
              - PROMOTION_DATE
              - PROPOSED
              - Q
              - RAISE_AMOUNT
              - RAISE_DATE
              - RAISE_PERCENT
              - RAISE_PROMOTION_DATE
              - REASON
              - REGRET
              - RELATIONSHIPS
              - REMOTE_WORK_ADDRESS
              - SCENARIO
              - SCENARIO_CHANGED
              - SENSITIVE
              - SENSITIVE_FIELDS
              - START_DATE
              - START_DATE_JOB
              - START_DATE_ORG
              - START_DATE_PLANNED
              - STATE
              - STRIKE_PRICE
              - TARGET_HOURS_PER_WEEK
              - TARGET_WEEKS_PER_YEAR
              - TEAM
              - TENURE_JOB
              - TENURE_ORG
              - TIMEZONE_OFFSET
              - TITLE
              - TITLE_DATE
              - TODAY
              - TOTAL_COMP
              - TOTAL_COMP_LOCAL
              - TOTAL_ORG_SHARES
              - TOTAL_SHARES
              - TOTAL_SHARES_VALUE
              - UNDER
              - UNDER_INCLUDING
              - UNDER_JOBS
              - UNVESTED_SHARES
              - UNVESTED_VALUE
              - UPDATE
              - USER_ACTIVE_DAYS
              - USER_CAN_EDIT_COMP_FOR_JOB
              - USER
              - VARIABLE
              - VARIABLE_AMOUNT
              - VARIABLE_INTERVAL
              - VARIABLE_PERCENT
              - VARIABLE_PRIMARY
              - VARIABLE_TARGET
              - VARIABLE_TARGET_AMOUNT
              - VARIABLE_TARGET_ANNUALIZED
              - VARIABLE_TARGET_CURRENCY
              - VARIABLE_TARGET_PERCENT
              - VARIABLE_TARGET_TYPE
              - VARIABLE_TARGETS
              - VARIABLE_TARGETS_LAST_RAISE_DATE
              - VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE
              - VARIABLE_TARGETS_LAST_RAISE_PAY
              - VARIABLE_TARGETS_LAST_RAISE_PERCENT
              - VARIABLE_TYPE
              - VESTED_DATE
              - VESTED_SHARES
              - VESTED_VALUE
              - WEEKS_PER_YEAR
              - WORK_ADDRESS
          categoryId:
            type: string
            description: ID of the category to which this field belongs, if any
          classification:
            type: string
            description: >-
              indicates how this field is calculated (whether it's stored in the
              DB, evaluated through the expression service, or compound)
            enum:
              - COMPOUND
          places:
            type: integer
            format: int32
            description: number of decimal places for money values
      FieldStatusUpdateRequest:
        type: object
        required:
          - fieldIds
          - reservedFieldNames
          - updateStatus
        properties:
          updateStatus:
            type: string
            description: New status to update
            enum:
              - ACTIVE
              - HIDDEN
          fieldIds:
            type: array
            description: Field ids to apply status to
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          reservedFieldNames:
            type: array
            description: Reserved field names to apply status to
            items:
              type: string
      FieldRemoveOverrideRequest:
        type: object
        required:
          - fieldIds
        properties:
          fieldIds:
            type: array
            description: Field ids
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      FieldRemoveCategoryRequest:
        type: object
        required:
          - fieldIds
        properties:
          fieldIds:
            type: array
            description: Field ids
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ResultsPartialField:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/PartialField'
          next:
            type: string
      DtValue:
        type: object
        properties:
          value:
            type: object
      ResultsFileEntity:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/FileEntity'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      FormCollectRequest:
        type: object
        required:
          - preview
        properties:
          assessmentId:
            type: string
            description: >-
              the assessment id that this form collection request aligns to (for
              example a performance review cycle)
          targetFilter:
            type: string
            description: >-
              filter query to apply on who should receive the form collection
              request
          submitFilter:
            type: string
            description: Filter to for jobs/person that match via relationship
          message:
            type: string
            description: message to include in notification
          preview:
            type: boolean
            description: Is this a preview?
      FormStatusUpdateRequest:
        type: object
        required:
          - formIds
          - updateStatus
        properties:
          updateStatus:
            type: string
            description: New status to update
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          formIds:
            type: array
            description: Form ids
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      FormDraft:
        type: object
        required:
          - createAt
          - createId
          - data
          - formId
          - id
          - orgId
          - updateAt
          - updateId
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          formId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: form being submitted
          personId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: person form is being filled out on
          data:
            type: object
            description: draft submission data - map of field names to data
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          pendingApprovalChangeId:
            type: string
      FormSubmitRequest:
        type: object
        required:
          - data
          - personId
        properties:
          personId:
            type: string
            description: person data is being filled out on behalf of
          data:
            type: object
            description: data being submitted
            additionalProperties:
              type: object
          blocksData:
            type: object
            description: data being submitted
            additionalProperties:
              type: object
      ResultsFormSummary:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/FormSummary'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      FormRender:
        type: object
        required:
          - blocks
          - id
          - label
          - options
          - rerenderQuestionIds
          - responseSensitive
        properties:
          id:
            type: string
          label:
            type: string
          options:
            type: object
            additionalProperties:
              type: object
          blocks:
            type: array
            items:
              $ref: '#/components/schemas/FormRenderBlock'
          rerenderQuestionIds:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          responseSensitive:
            type: string
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          authorSensitive:
            type: string
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
      FormRenderBlock:
        type: object
        required:
          - id
          - type
        properties:
          type:
            type: string
            enum:
              - QUESTION
              - CONTENT
          id:
            type: string
          name:
            type: string
          question:
            type: string
          dataType:
            type: string
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            items:
              $ref: '#/components/schemas/EnumValue'
          options:
            type: object
            additionalProperties:
              type: object
          value:
            type: object
          required:
            type: boolean
          content:
            type: string
          label:
            type: string
      FormRerender:
        type: object
        required:
          - blocks
        properties:
          blocks:
            type: array
            items:
              $ref: '#/components/schemas/FormRenderBlock'
      ResultsForm:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Form'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateForm:
        type: object
        required:
          - blocks
          - fields
          - label
          - status
        properties:
          label:
            type: string
            example: 'Health Index: Q2'
            description: human-readable full name of form
          description:
            type: string
            example: >-
              The Engineering department, where engineers develop new technology
              and products.
            description: description of form
          fields:
            type: array
            description: ordered list of fields being collected in this form
            items:
              $ref: '#/components/schemas/FormField'
          blocks:
            type: array
            description: ordered list of blocks being collected in this form
            items:
              $ref: '#/components/schemas/FormBlock'
          status:
            type: string
            description: status of the form
            enum:
              - ACTIVE
              - INACTIVE
              - ARCHIVED
          type:
            type: string
            description: type of the form
            enum:
              - BUILT_IN
              - CUSTOM
          targetType:
            type: string
            description: >-
              target type that the form can be filled out about (null defaults to
              PERSON for backwards compatibility)
            enum:
              - NONE
              - PERSON
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          submitFilter:
            type: string
            description: >-
              filter that controls which respondents can submit this form. The
              form:submit permission, if present, overrides this filter
          responseReadFilter:
            type: string
            description: >-
              filter that controls who can read the form responses. The
              formResponse:read permission, if present, overrides this filter
          useFieldAccess:
            type: boolean
            description: >-
              if this option is on, then form response answers will use field
              permissions to determine access to those responses
          approval:
            type: string
            description: approval needed, if any approval is required
            enum:
              - MANAGER
              - GRAND_MANAGER
          authorSensitive:
            type: string
            description: >-
              view sensitivity for the author of this form - the level of view
              access required to view the createId and updateId fields. If null,
              the author's identity is always visible as long as the viewer can
              read the form response. If set to PRIVATE, the author's identity is
              stored in ChartHop, but protected such that even users with
              sensitive access cannot access the data. If set to ANONYMOUS, the
              author's identity is not stored in ChartHop at all.
            enum:
              - ANONYMOUS
              - PRIVATE
              - HIGH
              - MANAGER
          options:
            type: object
            description: options, such as notification settings
      FormResponsesExportOptions:
        type: object
        properties:
          formId:
            type: string
          assessmentId:
            type: string
          submitPersonFilter:
            type: string
          targetPersonFilter:
            type: string
          fromSubmitAt:
            type: string
          untilSubmitAt:
            type: string
      FormResponseCount:
        type: object
        required:
          - filteredCount
          - totalCount
        properties:
          totalCount:
            type: integer
            format: int32
          filteredCount:
            type: integer
            format: int32
      FormResponseApproval:
        type: object
        properties:
          message:
            type: string
      Media:
        type: object
        required:
          - createAt
          - createId
          - id
          - path
          - type
          - versions
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id of media
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id, if the media belongs to an organization
          path:
            type: string
            example: >-
              588f7ee98f138b19220041a7/2017/02/21/588f7ee98f138b19220041a7/avatar.png
            description: path to the file in media S3 bucket
          type:
            type: string
            example: image/jpeg
            description: mime type of file
          bytes:
            type: integer
            format: int64
            example: 102342
            description: size of file in bytes
          width:
            type: integer
            format: int32
            example: 600
            description: width of image in pixels
          height:
            type: integer
            format: int32
            example: 300
            description: height of image in pixels
          versions:
            type: array
            description: versions/sizes available
            uniqueItems: true
            items:
              type: string
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
      ResultsGuidelineCalculation:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/GuidelineCalculation'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateGuideline:
        type: object
        required:
          - appliedField
          - basisType
          - calculationType
          - compReviewId
          - enablePopulateValue
          - flagMode
          - label
          - sourceField
        properties:
          compReviewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: comp review id
          label:
            type: string
            example: Merit Guideline
            description: guideline name
          budgetPoolId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the budget pool the guideline is allocated from
          participantsExpr:
            type: string
            example: is:person and tenure>=12
            description: CQL filter to determine which employees the guideline applies to
          appliedField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline applies to
          sourceField:
            type: string
            example: '''base'' or ''grantShares'''
            description: the field the guideline is calculated from
          calculationType:
            type: string
            example: TARGET
            description: >-
              how does the guideline calculate the target value? e.g. is there a
              range (min/max) or only a target
            enum:
              - RANGE
              - TARGET
          flagMode:
            type: string
            example: NONE
            description: how does the guideline indicate deviations from the target amount
            enum:
              - DEVIATION_THRESHOLD
              - NONE
          flagDeviationThreshold:
            type: number
            example: 0.75
            description: >-
              the threshold (percent) against which deviations from the guideline
              are flagged
          enablePopulateValue:
            type: boolean
            example: false
            description: >-
              whether or not the target values from the guidelines are
              pre-populated in the given columns
          basisType:
            type: string
            example: CUSTOM
            description: >-
              how an individual guideline value itself is calculated, e.g.
              percentage of the appliedField, fixed amount, or custom CQL
            enum:
              - CUSTOM
              - FIXED
              - CUSTOM_FIXED
              - PERCENTAGE
              - CUSTOM_PERCENTAGE
          basisExpr:
            type: string
            example: 'tenure>12 ? (base * 0.04) : (base * 0.02)'
            description: >-
              if basisType.CUSTOM, the custom CQL expression used to generate the
              guideline value
          basisFieldMatrix:
            $ref: '#/components/schemas/BasisFieldMatrix'
          fixedAmountRange:
            $ref: '#/components/schemas/MoneyRange'
          fixedValueRange:
            $ref: '#/components/schemas/ValueRange'
      CreateJobLevel:
        type: object
        required:
          - label
        properties:
          label:
            type: string
            example: Associate
            description: human-readable name of job level
          code:
            type: string
            example: BF01
            description: job level code
          benchmarkType:
            $ref: '#/components/schemas/EnumValue'
          benchmarkLevel:
            $ref: '#/components/schemas/EnumValue'
      CreateLegalDoc:
        type: object
        required:
          - content
          - date
          - name
        properties:
          name:
            type: string
            example: ChartHop Service Agreement
            description: human-readable full name of form
          content:
            type: string
            description: legal doc content
          date:
            type: string
            format: date
            description: content by date
      PartialMessage:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          type:
            type: string
            description: type of message
            enum:
              - CHAT
              - EMAIL
              - WEB
          notificationType:
            type: string
            description: type of notification (SUCCESS, ERR, ANNOUNCEMENT etc.)
            enum:
              - SUCCESS
              - WARN
              - ERROR
              - COMMENT
              - TASK_COMPLETED
              - TASK_ASSIGNED
              - REMINDER
              - ANNOUNCEMENT
              - PROCESS_ERROR
              - PROCESS_DONE
          userId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user who receives the message
          content:
            type: string
            description: message content
          title:
            type: string
            description: message title
          messageUrl:
            type: string
            description: link to message content (if applicable)
          key:
            type: string
            description: >-
              key of message if applicable (e.g. product-tour,
              import-complete-{id})
          readAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: read timestamp
          seenAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: seen timestamp
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
      ResultsMessage:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Message'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      RecordMetricRequest:
        type: object
        required:
          - metric
          - value
        properties:
          metric:
            type: string
            description: the name of the metric, for example kpi.revenue.arr
          value:
            type: number
            description: the numeric value of the metric
          date:
            type: string
            format: date
            description: >-
              the date that the metric applies to (if blank, will default to
              today)
      CreateMultiplier:
        type: object
        required:
          - expr
          - label
          - value
        properties:
          label:
            type: string
            example: Non-technical
            description: human-readable name of multiplier
          code:
            type: string
          value:
            type: number
            example: 0.75
            description: amount to multiply the initial value by
          expr:
            type: string
            example: department!="Engineering"
            description: calculated expression to match against the job
          category:
            type: string
            example: Location
            description: tag to group multipliers together by
      NotificationJobData:
        type: object
        properties:
          jobId:
            type: string
          title:
            type: string
          jobUrl:
            type: string
            format: uri
          jobProfileUrl:
            type: string
            format: uri
          atsJobUrl:
            type: string
            format: uri
          atsJobId:
            type: string
          atsJobReq:
            type: string
          atsJobReqField:
            type: string
          openJobsUrl:
            type: string
            format: uri
          department:
            type: string
          location:
            type: string
          manager:
            type: string
          backfill:
            type: string
          hireMgr:
            type: string
          recruiter:
            type: string
          recruitPriority:
            type: string
          recruit:
            type: string
          sensitive:
            type: string
          startDate:
            type: string
            format: date
          estStartDate:
            type: string
            format: date
          announceDate:
            type: string
            format: date
          hireName:
            type: string
      NotificationRequest:
        type: object
        required:
          - jobData
          - templateName
          - toUserIds
        properties:
          templateName:
            type: string
            description: name of message template
          toUserIds:
            type: array
            description: user ids for users to be notified
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          jobData:
            $ref: '#/components/schemas/NotificationJobData'
          atsName:
            type: string
            description: name of the ATS system
          orgName:
            type: string
            description: name of the organization
          userName:
            type: string
            description: preferred name of the user
          syncSummary:
            type: string
            description: summary of reason for email
          processId:
            type: string
            description: id of the sync history process
      AccessTokenRequest:
        type: object
        required:
          - idToken
          - scope
        properties:
          idToken:
            type: string
            description: id token
          scope:
            type: string
            description: scope being requested
          fromToken:
            type: string
            description: an existing token
      ViewAsRequest:
        type: object
        required:
          - orgId
          - scope
        properties:
          orgId:
            type: string
            description: org id
          personId:
            type: string
            description: person id
          userId:
            type: string
            description: user id
          roleId:
            type: string
            description: role id
          scope:
            type: string
            description: scope being requested
      IdpAccessTokenResponse:
        type: object
        required:
          - id_token
        properties:
          id_token:
            type: string
            example: header.payload.signature
            description: id token value (likely a JWT)
            readOnly: true
      ResultsOnboardStep:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/OnboardStep'
          next:
            type: string
      CreateOrgConfig:
        type: object
        required:
          - orgId
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id
          hiddenFieldIds:
            type: array
            description: set of hidden field ids of an org
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          builtinCategoryMap:
            type: array
            description: set of maps of the custom fields that belongs to a built-in category
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInCategoryMap'
          builtinFieldConfig:
            type: array
            description: Org configuration for built-in fields
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BuiltInFieldConfig'
          compensationBandsConfig:
            $ref: '#/components/schemas/CompensationBandsConfig'
          smartCurrencyOptions:
            type: array
            example: PERSON_HOME_ADDRESS_COUNTRY
            description: >-
              Options for where to source a currency to use when currency is
              unknown. order specific
            items:
              $ref: '#/components/schemas/SmartCurrencyOption'
          smartCurrencyDefault:
            type: string
            example: USD
            description: >-
              The default currency to use when currency is unknown and there are
              no options set in smartCurrencyOptions
          requiredJobFields:
            type: array
            description: Org configuration for required job fields
            uniqueItems: true
            items:
              type: string
          scenarioApprovalChains:
            type: object
            description: Configures which approval chains to use with specific scenario types
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
          isOpenJobRoleApprovalEnabled:
            type: boolean
            description: Whether to show open job approval on Open Job Profile page
          grantConfiguration:
            type: array
            description: Org Grant Configuration
            uniqueItems: true
            items:
              $ref: '#/components/schemas/GrantAlias'
      ResultsOrg:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Org'
          next:
            type: string
      AppInstallCodeValidateResponse:
        type: object
        required:
          - userId
        properties:
          userId:
            type: string
            example: 64b050ef762ef7deb38ac723
            description: userId that created the app install authorization code
          data:
            type: object
            example: '{ "orgId": "64b05135e1342073d3d45984" }'
            description: data associated with the app install authorization code
          accessToken:
            type: string
            description: access token issued from app install authorization code
      AppInstallCodeValidateRequest:
        type: object
        required:
          - authorizationCode
          - issueAccessToken
        properties:
          authorizationCode:
            type: string
            description: authorization code token value
          issueAccessToken:
            type: boolean
            description: >-
              flag indicating if authorization code should be exchanged for an
              access token
      CreateOrg:
        type: object
        required:
          - currencies
          - estEmployees
          - name
          - onboarding
          - options
          - status
          - timezone
          - type
        properties:
          customerId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: customer for billing processing
          name:
            type: string
            example: Acme Corp
            description: name of organization
          slug:
            type: string
            example: acme-corp
            description: unique slug of organization
          type:
            type: string
            example: PRIVATE
            description: type of organization
            enum:
              - PRIVATE
              - PUBLIC
              - EDU
              - GOV
              - NONPROFIT
              - DEMO
              - TEST
          industry:
            type: string
            example: Software and Internet
            description: industry
          estEmployees:
            type: integer
            format: int32
            description: approximate number of employees
          estRevenue:
            type: integer
            format: int32
            description: approximate amount of revenue
          foundedYear:
            type: integer
            format: int32
            example: 1998
            description: year of founding
          address:
            $ref: '#/components/schemas/Address'
          phone:
            type: string
            description: company phone number in E.164 format
            pattern: ^\+?[1-9]\d{1,14}$
          email:
            type: string
            example: bob@example.com
            description: primary contact email
          url:
            type: string
            format: uri
            description: website URL
          domains:
            type: array
            description: domains used by this org
            items:
              $ref: '#/components/schemas/OrgDomain'
          status:
            type: string
            description: current status of organization
            enum:
              - ACTIVE
              - INACTIVE
              - DISABLED
          imagePath:
            type: string
            description: path to full-sized profile image in storage
            pattern: ^[a-zA-Z0-9._/-]+$
          currencies:
            type: array
            description: >-
              types of currencies in use, with the first currency the primary
              currency
            items:
              type: string
            maxItems: 20
            minItems: 1
          stock:
            type: string
            example: GOOG
            description: stock symbol
          timezone:
            type: string
            example: America/New_York
            description: timezone in use
          appTime:
            type: string
            example: '09:00'
            description: >-
              approximate time of day for daily app syncs to run (defaults to 9am
              Eastern time)
          zone:
            type: integer
            format: int32
            example: 2
            description: infrastructure zone
          fiscalStart:
            type: integer
            format: int32
            description: >-
              number of months into the calendar year that the fiscal year starts
              (1 = February, 2 = March)
          startDate:
            type: string
            description: start date of history
          sensitiveFields:
            type: object
            description: map of sensitive field defaults
          options:
            $ref: '#/components/schemas/OrgOptions'
          internalOptions:
            type: object
            description: internal (ChartHop controlled) options
          onboardSteps:
            type: array
            description: list of onboard steps that this Org has completed (or skipped)
            items:
              $ref: '#/components/schemas/OnboardStepResult'
          onboarding:
            type: boolean
            description: >-
              current onboarding status of an organization, allowing clearing of
              org
          selfServeImporting:
            type: boolean
            description: >-
              completion status of initial import for orgs signed up via self
              serve
          headCount:
            type: integer
            format: int32
            description: number of total headcount currently in the org
      OrgUsersPersonsCountResponse:
        type: object
        required:
          - invitedCount
          - joinedCount
          - notInvitedCount
        properties:
          joinedCount:
            type: integer
            format: int32
          invitedCount:
            type: integer
            format: int32
          notInvitedCount:
            type: integer
            format: int32
      OrgUsersPersonsResponse:
        type: object
        required:
          - rows
        properties:
          rows:
            type: array
            items:
              $ref: '#/components/schemas/UserListRow'
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      UserListRow:
        type: object
        required:
          - inviteStatus
          - isOrgMember
          - name
        properties:
          name:
            $ref: '#/components/schemas/Name'
          inviteStatus:
            type: string
            enum:
              - INVITED
              - JOINED
              - NOT_INVITED
          isOrgMember:
            type: boolean
          userId:
            type: string
          personId:
            type: string
          imagePath:
            type: string
          email:
            type: string
          access:
            type: string
          roleLabel:
            type: string
          expr:
            type: string
          groupIds:
            type: array
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          loginAt:
            type: integer
            format: int64
          activeAt:
            type: integer
            format: int64
      WelcomeEmailSettings:
        type: object
        required:
          - welcomeEmailBody
          - welcomeEmailButtonLabel
          - welcomeEmailSubject
        properties:
          welcomeEmailSubject:
            type: string
            description: Subject
          welcomeEmailButtonLabel:
            type: string
            description: Button label
          welcomeEmailBody:
            type: string
            description: Body
      TestEmailRequest:
        type: object
        properties:
          welcomeEmailSubject:
            type: string
          welcomeEmailButtonLabel:
            type: string
          welcomeEmailBody:
            type: string
      AgreementRequest:
        type: object
        required:
          - action
          - legalDocId
        properties:
          action:
            type: string
            description: action taken
          legalDocId:
            type: string
            description: legal document entity id
      Policy:
        type: object
        required:
          - id
          - label
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          label:
            type: string
            example: View Compensation
            description: human-readable full name of policy
          description:
            type: string
            example: This policy allows compensation to be viewed.
            description: description of policy
          rules:
            type: array
            description: the rules that define the policy
            items:
              $ref: '#/components/schemas/PolicyRule'
          roles:
            type: array
            description: the roles the policy is attached to
            uniqueItems: true
            items:
              $ref: '#/components/schemas/Role'
          users:
            type: array
            description: the users the policy is attached to
            uniqueItems: true
            items:
              $ref: '#/components/schemas/User'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ResultsPolicy:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Policy'
          next:
            type: string
      CreatePolicy:
        type: object
        required:
          - label
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          label:
            type: string
            example: View Compensation
            description: human-readable full name of policy
          description:
            type: string
            example: This policy allows compensation to be viewed.
            description: description of policy
          rules:
            type: array
            description: the rules that define the policy
            items:
              $ref: '#/components/schemas/PolicyRule'
          copiedFromId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: policy id that was copied (empty if original)
      PartialPolicy:
        type: object
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          label:
            type: string
            example: View Compensation
            description: human-readable full name of policy
          description:
            type: string
            example: This policy allows compensation to be viewed.
            description: description of policy
          rules:
            type: array
            description: the rules that define the policy
            items:
              $ref: '#/components/schemas/PolicyRule'
          copiedFromId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: policy id that was copied (empty if original)
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      EntityAction:
        type: object
        required:
          - entityToAction
        properties:
          entityToAction:
            type: object
            additionalProperties:
              type: array
              uniqueItems: true
              items:
                type: string
      CustomerDetails:
        type: object
        required:
          - actionRequired
        properties:
          actionRequired:
            type: array
            description: Action required by the client
            items:
              type: string
          partnershipApp:
            type: string
            description: Partnership App
      OrgStockData:
        type: object
        properties:
          strikePrice:
            type: number
          grantPrice:
            type: number
          totalShares:
            type: integer
            format: int64
      PreloadResponse:
        type: object
        required:
          - categories
          - compBands
          - featureAccess
          - fields
          - forms
          - groups
          - jobs
          - org
          - orgs
          - persons
          - questions
          - scenarios
          - user
          - users
        properties:
          org:
            $ref: '#/components/schemas/Org'
          orgs:
            type: array
            items:
              $ref: '#/components/schemas/Org'
          user:
            $ref: '#/components/schemas/User'
          role:
            $ref: '#/components/schemas/Role'
          viewUser:
            $ref: '#/components/schemas/User'
          viewRole:
            $ref: '#/components/schemas/Role'
          groups:
            type: array
            items:
              type: object
              additionalProperties:
                type: object
          scenarios:
            type: array
            items:
              $ref: '#/components/schemas/Scenario'
          users:
            type: array
            items:
              $ref: '#/components/schemas/User'
          fields:
            type: array
            items:
              $ref: '#/components/schemas/Field'
          forms:
            type: array
            items:
              $ref: '#/components/schemas/Form'
          exchangeRate:
            $ref: '#/components/schemas/ExchangeRate'
          stock:
            $ref: '#/components/schemas/OrgStockData'
          job:
            $ref: '#/components/schemas/Job'
          customer:
            $ref: '#/components/schemas/Customer'
          customerDetails:
            $ref: '#/components/schemas/CustomerDetails'
          featureAccess:
            type: array
            items:
              type: string
              enum:
                - ATS_SYNC
                - COMPENSATION_REVIEW
                - CUSTOM_FIELD
                - CUSTOM_FIELD_READONLY
                - CUSTOM_FORM
                - CUSTOM_PROFILE_TAB
                - CUSTOM_ROLE
                - MULTI_PAYROLL
                - PERFORMANCE_REVIEW
                - REPORT
                - REPORT_READONLY
                - SCENARIO
                - SIMPLE_WORKFLOWS
                - SURVEY
                - TABLE
                - TEMPLATE
                - WORKDAY_ADAPTIVE
                - PAYROLL_OUTBOUND
                - APPROVAL_WORKFLOWS
                - CONTENT
                - IDENTITY_OUTBOUND
                - ONBOARDING_OFFBOARDING
                - TIMEOFF
          enabledFeatureOptions:
            type: array
            items:
              $ref: '#/components/schemas/FeatureAccessOption'
          categories:
            type: array
            items:
              $ref: '#/components/schemas/Category'
          categorySort:
            $ref: '#/components/schemas/CategorySort'
          orgConfig:
            $ref: '#/components/schemas/OrgConfig'
          jobs:
            type: array
            items:
              type: object
          persons:
            type: array
            items:
              $ref: '#/components/schemas/Person'
          compBands:
            type: array
            items:
              $ref: '#/components/schemas/CompBand'
          uiAccess:
            type: array
            uniqueItems: true
            items:
              type: string
          questions:
            type: array
            items:
              $ref: '#/components/schemas/Question'
      CreateProcess:
        type: object
        required:
          - label
          - options
          - orgId
          - runUserId
          - status
          - type
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          label:
            type: string
            description: human-readable label that identifies this process
          type:
            type: string
            description: process type
          status:
            type: string
            description: current status of process
            enum:
              - PENDING
              - RUNNING
              - DONE
              - ERROR
          filePath:
            type: string
            description: data file path
          runUserId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: user id who is running the process
          parentProcessId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: process id of parent process
          message:
            type: string
            description: status or error message
          progress:
            type: number
            format: double
            description: percent progress so far
          internalError:
            type: string
            description: internal-only error message
          options:
            type: object
            description: options passed to the process
          results:
            type: object
            description: results summary for the process
            additionalProperties:
              type: object
          logDataList:
            type: array
            description: list of log data that occurred during running of this process
            items:
              $ref: '#/components/schemas/LogData'
          state:
            type: object
            description: process-specific state data
          appId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: app id of the process
          uuid:
            type: string
            example: 84db3c6e-0877-4436-8af1-768c06b29586
            description: unique ID of the process at queue time
      AppProcessStatus:
        type: object
        properties:
          appLastSync:
            $ref: '#/components/schemas/Process'
          appLastSuccessSync:
            $ref: '#/components/schemas/Process'
      ProcessEvent:
        type: object
        required:
          - at
          - type
          - updates
        properties:
          id:
            type: string
          type:
            type: string
            enum:
              - HIRE
              - UPDATE
              - CREATE_PERSON
              - ERROR
              - INBOUND
              - CHANGE
              - OUTBOUND_CREATE
              - OUTBOUND_UPDATE
              - OUTBOUND_DELETE
              - INITIATING_CREATE
              - INITIATING_UPDATE
              - INITIATING_DELETE
          entityData:
            type: object
            additionalProperties:
              type: object
          updates:
            type: array
            items:
              $ref: '#/components/schemas/ProcessEventUpdate'
          at:
            type: integer
            format: int64
      ProcessEventResponse:
        type: object
        required:
          - events
        properties:
          events:
            type: array
            items:
              $ref: '#/components/schemas/ProcessEvent'
      ProcessEventUpdate:
        type: object
        required:
          - payload
          - type
        properties:
          type:
            type: string
            enum:
              - FIELD
              - CONTACT
              - COMP
              - ERROR
          payload:
            $ref: '#/components/schemas/ProcessEventUpdatePayload'
      ProcessEventUpdatePayload:
        type: object
        properties:
          key:
            type: string
          value:
            type: object
          currency:
            type: string
          contactFormat:
            type: string
            enum:
              - PHONE
              - EMAIL
              - ID
          errorMessage:
            type: string
      ResultsProcess:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Process'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsProduct:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Product'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateProduct:
        type: object
        required:
          - features
          - name
          - salesforceProductId
          - stripeProductId
        properties:
          name:
            type: string
            example: Compensation Reviews
            description: name of product
          sku:
            type: string
            example: compensation-reviews
            description: unique sku of product
          salesforceProductId:
            type: string
            example: 01t4T000000RpgKQAS
            description: corresponding product id in salesforce
          stripeProductId:
            type: string
            example: prod_12345ABC
            description: corresponding product id in stripe
          features:
            type: array
            description: set of features this product has access to
            uniqueItems: true
            items:
              type: string
              enum:
                - ATS_SYNC
                - COMPENSATION_REVIEW
                - CUSTOM_FIELD
                - CUSTOM_FIELD_READONLY
                - CUSTOM_FORM
                - CUSTOM_PROFILE_TAB
                - CUSTOM_ROLE
                - MULTI_PAYROLL
                - PERFORMANCE_REVIEW
                - REPORT
                - REPORT_READONLY
                - SCENARIO
                - SIMPLE_WORKFLOWS
                - SURVEY
                - TABLE
                - TEMPLATE
                - WORKDAY_ADAPTIVE
                - PAYROLL_OUTBOUND
                - APPROVAL_WORKFLOWS
                - CONTENT
                - IDENTITY_OUTBOUND
                - ONBOARDING_OFFBOARDING
                - TIMEOFF
          featureOptions:
            type: object
            description: map of options for the feature
            additionalProperties:
              type: array
              items:
                $ref: '#/components/schemas/FeatureAccessOption'
      ResultsProfileTabSummary:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ProfileTabSummary'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ProfileTabSummary:
        type: object
        required:
          - id
          - isBuiltin
          - label
        properties:
          id:
            type: string
          label:
            type: string
          isBuiltin:
            type: boolean
          isSensitive:
            type: boolean
          blocks:
            type: array
            items:
              $ref: '#/components/schemas/Block'
      ResultsProfileTabResponseCard:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ProfileTabResponseCard'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateProfileTab:
        type: object
        required:
          - blocks
          - label
          - sort
          - status
        properties:
          label:
            type: string
            example: Performance
            description: human-readable name of profile tab
          blocks:
            type: array
            description: ordered list of blocks contained by profile tab
            items:
              $ref: '#/components/schemas/Block'
          status:
            type: string
            description: status of the profile tab
            enum:
              - ACTIVE
              - INACTIVE
          targetFilter:
            type: string
            description: filter that controls on which profiles this tab will appear
          readFilter:
            type: string
            description: >-
              filter that controls which viewers can read this profile tab. The
              profileTab:read permission, if present, overrides this filter
          sort:
            type: integer
            format: int32
            description: sort order
      ResultsProfileTab:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ProfileTab'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateQueryToken:
        type: object
        required:
          - params
          - type
        properties:
          type:
            type: string
            description: query type
          params:
            type: object
            description: query params
      ResultsQuestion:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Question'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateQuestion:
        type: object
        required:
          - question
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          question:
            type: string
            example: What is your favorite color?
            description: text of the question
          fieldId:
            type: string
            description: >-
              if the question is linked to a field, the id of that field. Any
              question responses will be automatically saved to the field
          type:
            type: string
            description: datatype of the question
            enum:
              - ADDRESS
              - BOOLEAN
              - COMP
              - COMPOUND
              - COMP_BAND
              - CONTACTS
              - CURRENCY
              - DATE
              - DECIMAL
              - ELAPSED_DAYS
              - ELAPSED_MONTHS
              - ELAPSED_YEARS
              - EMAIL
              - ENUM
              - ENUM_EXPR
              - ENUM_MULTI
              - ENUM_SCALE
              - EXPR
              - FILE
              - GROUP
              - GROUPS
              - GROUP_ASSIGNMENTS
              - GROUP_TYPE
              - IMAGE
              - INTEGER
              - JOB
              - JOBS
              - JOB_TIER
              - LIST
              - MONEY
              - NAME
              - OBJECT
              - PAY_INTERVAL
              - PERCENT
              - PERSON
              - PERSONS
              - PHONE
              - STOCKGRANT
              - STRING
              - TABLE_REF
              - TEXT
              - TIMEOFF
              - TIMESTAMP
              - TRACKED_GROUP
              - URL
              - USER
              - VARIABLE_COMP
              - VARIABLE_COMPS
          plural:
            type: string
            description: plural type of the question datatype (either SINGLE, LIST, or SET)
            enum:
              - SINGLE
              - LIST
              - SET
          values:
            type: array
            description: possible values (enum type only)
            items:
              $ref: '#/components/schemas/EnumValue'
          options:
            type: object
            description: validation options
      ResultsReportChart:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ReportChart'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      LabelColor:
        type: object
        required:
          - color
          - label
        properties:
          label:
            type: string
            description: human-readable label for the value
          color:
            type: string
            description: suggested color for the value
      PairLocalDateLocalDate:
        type: object
        required:
          - first
          - second
        properties:
          first:
            type: string
            format: date
          second:
            type: string
            format: date
      ReportDateInterval:
        type: object
        required:
          - endDate
          - startDate
        properties:
          startDate:
            type: string
            format: date
          endDate:
            type: string
            format: date
          partialStartDate:
            type: string
            format: date
          partialEndDate:
            type: string
            format: date
      ReportGroupByDimension:
        type: object
        required:
          - keys
        properties:
          keys:
            type: array
            description: list of keys appearing in the groupBy
            items:
              $ref: '#/components/schemas/ReportGroupByKey'
      ReportGroupByKey:
        type: object
        required:
          - color
          - id
          - label
        properties:
          id:
            type: string
            description: unique string identifier for this key
          color:
            type: string
            description: color for this key, prior to any overrides
          label:
            type: string
            description: label for this key, prior to any overrides
      ReportMetricCollection:
        type: object
        required:
          - byQuery
          - changes
          - jobs
          - persons
          - relevantFields
        properties:
          collectedThrough:
            $ref: '#/components/schemas/PairLocalDateLocalDate'
          relevantFields:
            type: array
            uniqueItems: true
            items:
              type: string
          changes:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          jobs:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          persons:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          byQuery:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ReportMetricCollectionItem'
          date:
            type: string
            format: date
      ReportMetricCollectionItem:
        type: object
        required:
          - changes
          - jobs
          - persons
        properties:
          changes:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          jobs:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          persons:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ReportMetricsReturnType:
        type: object
        required:
          - metricCollection
          - result
        properties:
          result:
            $ref: '#/components/schemas/ReportResult'
          metricCollection:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/ReportMetricCollection'
      ReportQueryResult:
        type: object
        required:
          - series
        properties:
          series:
            type: array
            description: list of series results
            items:
              $ref: '#/components/schemas/ReportSeriesResult'
          content:
            type: string
            description: >-
              the results of rendering the content block, if a content template
              was used in the query
          groupBys:
            type: array
            description: list of group-by dimensions with default values
            items:
              $ref: '#/components/schemas/ReportGroupByDimension'
          dateIntervals:
            type: array
            description: list of group-by dimensions with default values
            items:
              $ref: '#/components/schemas/ReportDateInterval'
          version:
            type: integer
            format: int32
            description: version used to generate the results
      ReportResult:
        type: object
        required:
          - createAt
          - createId
          - endDate
          - id
          - key
          - options
          - orgId
          - queries
          - results
          - startDate
          - status
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent org id
          key:
            type: string
            example: 588f7ee98f138b19220041a7
            description: identifying key for this report result
          startDate:
            type: string
            format: date
            description: date that the report result interval begins, inclusive
          endDate:
            type: string
            format: date
            description: date that the report result interval ends, exclusive
          options:
            type: object
            description: date that the report result interval ends, exclusive
          queries:
            type: array
            description: list of queries that were requested
            items:
              $ref: '#/components/schemas/ReportQuery'
          results:
            type: array
            description: list of the results, one per query that was requested
            items:
              $ref: '#/components/schemas/ReportQueryResult'
          buildStartAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: start time of last build
          buildEndAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: end time of last build
          message:
            type: string
            description: status or error message
          progress:
            type: number
            format: double
            description: percent progress so far
          viewId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: viewer user id
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          status:
            type: string
            description: status of the report result
            enum:
              - OK
              - LOCKED
              - RETRY
              - ERROR
          reportId:
            type: string
            description: corresponding report id for the built query
          chartId:
            type: string
            description: corresponding chart id for the built query
      ReportSeriesResult:
        type: object
        required:
          - color
          - data
          - format
          - isIntervalMetric
          - label
        properties:
          label:
            type: string
            description: human-readable label for the series
          color:
            type: string
            description: suggested color for the series
          format:
            type: string
            description: number format (currently 'number', 'money', 'percent' allowed)
          data:
            type: array
            description: array of numbers in the series
            items:
              type: number
          xAxis:
            type: array
            readOnly: true
            items:
              $ref: '#/components/schemas/LabelColor'
          isIntervalMetric:
            type: boolean
            description: >-
              true if the metric being returned is reporting on the entire
              interval (includes the intervalFrom or intervalUntil metric), false
              if just the last date in the interval
      CreateReportChart:
        type: object
        required:
          - label
          - query
          - sort
          - type
        properties:
          label:
            type: string
            example: Headcount Report
            description: chart label
          type:
            type: string
            description: chart type
            enum:
              - LINE
              - AREA
              - STACKED
              - BAR
              - VERTICAL_BAR
              - HORIZONTAL_BAR
              - PIE
              - TABLE
              - TABLE_CROSSTAB
              - SINGLE_METRIC
              - HEADER
              - TEXT
          filter:
            type: string
            example: department='Engineering'
            description: filter that applies to this chart
          filterOverride:
            type: boolean
            description: whether the chart filter overrides the global filter
          query:
            $ref: '#/components/schemas/ReportQuery'
          sort:
            type: integer
            format: int32
            description: sort order
          isAdvancedQueryMode:
            type: boolean
            description: whether the chart configuration is using advanced mode
      ReportDataStreamResults:
        type: object
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Report'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ReportCount:
        type: object
        required:
          - count
        properties:
          count:
            type: integer
            format: int64
      CreateReport:
        type: object
        required:
          - label
        properties:
          label:
            type: string
            example: Headcount Report
            description: report label
          description:
            type: string
            example: This is a report on headcount etd
            description: report description
          filter:
            type: string
            example: department:engineering
            description: filter automatically applied to every chart in this report
          share:
            type: string
            description: sharing settings of report
            enum:
              - NORMAL
              - FULL
          sensitive:
            type: string
            description: sensitivity level of report
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: >-
              users who are specifically granted permission to view or edit this
              report
            items:
              $ref: '#/components/schemas/ShareAccess'
          chartIds:
            type: array
            description: list of charts in this report
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ResultsRole:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Role'
          next:
            type: string
      Role:
        type: object
        required:
          - id
          - label
        properties:
          id:
            type: string
            example: 588f7ee98f138b19220041a7
            description: globally unique id
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          label:
            type: string
            example: Engineering People Manager
            description: human-readable full name of role
          description:
            type: string
            example: >-
              This role is able to create and update new job data for the
              engineering department.
            description: description of role
          policyIds:
            type: array
            description: the policies that define the role
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          policies:
            type: array
            description: the policies attached to the role
            uniqueItems: true
            items:
              $ref: '#/components/schemas/Policy'
          users:
            type: array
            description: the users the role is attached to
            uniqueItems: true
            items:
              $ref: '#/components/schemas/User'
          createId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: created by user id
          createAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: created timestamp
          updateId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: last updated by user id
          updateAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: last updated timestamp
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      CreateRole:
        type: object
        required:
          - label
        properties:
          orgId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent organization id (empty if global)
          label:
            type: string
            example: Engineering People Manager
            description: human-readable full name of role
          description:
            type: string
            example: >-
              This role is able to create and update new job data for the
              engineering department.
            description: description of role
          policyIds:
            type: array
            description: the policies that define the role
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
      ResultsScenario:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Scenario'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateScenario:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Q4 Conservative Plan
            description: scenario name
          description:
            type: string
            example: Q4 Conservative Plan
            description: scenario description
          startDate:
            type: string
            example: '2017-01-15'
            description: date that this scenario diverges from primary
          status:
            type: string
            description: status of scenario
            enum:
              - OPEN
              - INACTIVE
              - MERGED
              - DRAFT
              - ARCHIVED
          shareAccess:
            type: array
            description: users who are specifically granted permission to this scenario
            items:
              $ref: '#/components/schemas/ShareAccess'
          type:
            type: string
            description: Type of scenario to be created
            enum:
              - GENERAL
              - COMP
              - PROMOTION
              - TERMINATE
              - CREATE_JOB
              - UPDATE_JOB
              - BUDGET
          startDateFixed:
            type: string
            description: >-
              whether or not the start date should stay fixed in time, or update
              to today's date as time passes
            enum:
              - FIXED
              - TODAY
          query:
            type: string
            description: >-
              Query for selecting which people/jobs are initially included in the
              scenario (only applies to promotion scenarios)
          validJobIdSet:
            type: array
            description: This scenario changes are restricted to the following jobIds
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          entityId:
            type: string
            description: The entity this scenario is associated with
          entityType:
            type: string
            description: The type of entity associated with this scenario
            enum:
              - COMP_REVIEW
          sharedViewConfig:
            type: array
            description: View configurations associated with this scenario
            uniqueItems: true
            items:
              $ref: '#/components/schemas/ScenarioSharedViewConfig'
          budget:
            $ref: '#/components/schemas/Money'
          costCalc:
            type: string
            description: CQL used to calculate the budget allocation in the scenario
      AdjustScenarioDateRequest:
        type: object
        properties:
          date:
            type: string
            format: date
            description: date to use as new start date
          days:
            type: integer
            format: int32
            description: number of days to adjust forward
      CombineScenarioRequest:
        type: object
        required:
          - scenarioIds
        properties:
          scenarioIds:
            type: array
            description: scenarios to combine
            uniqueItems: true
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          copyOnly:
            type: boolean
          useScenarioDateForChanges:
            type: boolean
      ScenarioMetadata:
        type: object
        required:
          - access
          - canChange
          - changeCount
          - cost
          - scenarioId
        properties:
          scenarioId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: scenario id
          changeCount:
            type: integer
            format: int32
            description: number of changes contained in scenario
          jobCount:
            type: integer
            format: int32
            description: number of job changes contained in scenario
          access:
            type: array
            description: access information on the user for the entity
            items:
              $ref: '#/components/schemas/ResultsAccess'
          canChange:
            type: boolean
            description: whether user can edit the scenario
          cost:
            $ref: '#/components/schemas/CostImpact'
          calcEndAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: most recent summary calculation ended at timestamp
      SearchResult:
        type: object
        required:
          - entity
          - entityId
          - entityType
          - score
          - searchFields
        properties:
          entity:
            type: object
          entityId:
            type: string
          entityType:
            type: string
          searchFields:
            type: array
            items:
              type: string
          score:
            type: integer
            format: int32
          name:
            type: string
          description:
            type: string
          imagePath:
            type: string
      SearchResultResponse:
        type: object
        properties:
          orgs:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          customers:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          jobs:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          persons:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          groups:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          fields:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          functions:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          reports:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          scenarios:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          users:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          appUsers:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          compBands:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          questions:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
          contents:
            type: array
            items:
              $ref: '#/components/schemas/SearchResult'
      OkResponse:
        type: object
        required:
          - ok
        properties:
          ok:
            type: boolean
            example: true
            description: whether the status is okay
      ResultsStockPrice:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/StockPrice'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      ResultsStripeProduct:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/StripeProduct'
          next:
            type: string
      ResultsPlan:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Plan'
          next:
            type: string
      SetupIntent:
        type: object
        required:
          - clientSecret
        properties:
          clientSecret:
            type: string
            example: st_ersasdfasdf
            description: Secret of setup_intent object created
      StripeProduct:
        type: object
        required:
          - label
          - stripeId
        properties:
          stripeId:
            type: string
            description: unique Stripe identifier for this product
          label:
            type: string
            description: human-readable nickname for this product
      ResultsTable:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Table'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateTable:
        type: object
        required:
          - effectiveDated
          - name
        properties:
          name:
            type: string
            example: budget-data
            description: name of table
          label:
            type: string
            example: Budget Data
            description: human readable label for the table
          effectiveDated:
            type: boolean
            description: >-
              whether or not the table is time tracked with effective dates
              (allows time travel or not). If false, then the values set in the
              table will be the same across all dates.
          sensitive:
            type: string
            description: >-
              base sensitivity of this table and entities in it -- should be
              either ORG or HIGH
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          shareAccess:
            type: array
            description: users who are specifically granted permission to this table
            items:
              $ref: '#/components/schemas/ShareAccess'
      CreateTaskConfig:
        type: object
        required:
          - entityId
          - pastDueAction
          - type
        properties:
          assessmentId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: parent assessment id that this task config belongs to
          parentEntityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: >-
              parent entity id that this task config belongs to, should be used
              with entityId
          entityId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: the primary entity being referenced by the task config
          type:
            type: string
            description: type of task generated by the task config
            enum:
              - FORM_SUBMIT
              - CHANGE_APPROVE
              - TIMEOFF_APPROVE
              - SCENARIO_CHANGES_APPROVE
              - SCENARIO_CHANGES_CREATE
              - ORG_IMPORT
              - COMP_REVIEW_APPROVAL_SUBMIT
              - SCENARIO_APPROVAL_SUBMIT
              - APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER
              - ACTION
          dueDate:
            $ref: '#/components/schemas/DueDate'
          pastDueAction:
            type: string
            description: sets pastDueAction on the task when it's generated
            enum:
              - NONE
              - SET_EXPIRED
          isSkippable:
            type: boolean
            description: sets isSkippable on the task
          label:
            type: string
            description: >-
              human-readable label that should be used for all tasks associated
              with the config as the task name
          description:
            type: string
            description: >-
              description for all tasks associated with the config that should be
              used in notifications
          deleteId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: deleted by user id
          deleteAt:
            type: string
            example: '2017-01-24T13:57:52Z'
            description: deleted timestamp
      ResultsTask:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Task'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      TaskRemindRequest:
        type: object
        required:
          - taskIds
        properties:
          taskIds:
            type: array
            items:
              type: string
              example: 588f7ee98f138b19220041a7
          message:
            type: string
          messageChannel:
            $ref: '#/components/schemas/MessageChannelConfig'
      ResultsTemplate:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Template'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateTemplate:
        type: object
        required:
          - content
          - name
        properties:
          name:
            type: string
            description: template name, must be unique to organization
          description:
            type: string
            description: description of template
          content:
            type: string
            description: template content
          stylesheet:
            type: string
            description: template inline stylesheet
          type:
            type: string
            description: type of template
            enum:
              - DOCUMENT
              - EMAIL
          tags:
            type: array
            description: tags to organize the purpose of the template
            items:
              type: string
          filename:
            type: string
            description: document filename CQL
      TemplateRenderResponse:
        type: object
        required:
          - content
        properties:
          content:
            type: string
      TemplatePreviewRequest:
        type: object
        required:
          - content
        properties:
          content:
            type: string
          stylesheet:
            type: string
      GenerateTemplateRequest:
        type: object
        required:
          - saveToFiles
          - sendToManagers
          - sendToPersons
          - useScenarioChanges
        properties:
          filter:
            type: string
          emailSubject:
            type: string
          emailMessage:
            type: string
          saveToFiles:
            type: boolean
          fileSensitive:
            type: string
            enum:
              - GLOBAL
              - ORG
              - ORG_OTHER
              - PERSONAL_DEMOG
              - PERSONAL_BIRTH
              - PERSONAL_CONTACT
              - PERSONAL_PRIVATE
              - SENSITIVE_BIRTH
              - SENSITIVE_CONTACT
              - TIMEOFF
              - COMP_CASH
              - COMP_EQUITY
              - SENSITIVE
              - PERSONAL
              - MANAGER
              - GRAND_MANAGER
              - DIRECT
              - PEERS
              - HIGH
              - PRIVATE
          fileField:
            type: string
          sendToManagers:
            type: boolean
          sendToPersons:
            type: boolean
          scenarioId:
            type: string
          date:
            type: string
            format: date
          useScenarioChanges:
            type: boolean
          changeGroupingType:
            type: string
            enum:
              - PRIMARY
              - SCENARIO
              - COMP_REVIEW
          changeGroupingId:
            type: string
      TimeOffRequest:
        type: object
        required:
          - endDate
          - startDate
        properties:
          startDate:
            type: string
            format: date
          endDate:
            type: string
            format: date
          personId:
            type: string
          typeDescription:
            type: string
          note:
            type: string
      ResultsTimeOffEntity:
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/TimeOffEntity'
          next:
            type: string
          access:
            type: array
            items:
              $ref: '#/components/schemas/ResultsAccess'
      CreateTimeOffEntity:
        type: object
        required:
          - endDate
          - personId
          - startDate
        properties:
          personId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: person taking the time off
          externalId:
            type: string
            example: 588f7ee98f138b19220041a7
            description: external identifier, if time off synced from external system
          startDate:
            type: string
            format: date
            description: start date of time off, inclusive
          endDate:
            type: string
            format: date
            description: end date of time off, inclusive
          days:
            type: number
            description: number of days used
          hours:
            type: number
            description: number of hours used
          typeDescription:
            type: string
            description: type of time off
          note:
            type: string
            description: notes on the time off
          approval:
            type: string
            description: approval status of the time off
            enum:
              - APPROVED
              - PENDING
              - CANCELLED
              - REJECTED
              - SUPERSEDED
      TimeOffApproval:
        type: object
        properties:
          message:
            type: string
      ChangePasswordRequest:
        type: object
        required:
          - newPassword
        properties:
          newPassword:
            type: string
            description: password to change to
          oldPassword:
            type: string
            description: password to change from
      EmailRequest:
        type: object
        required:
          - email
        properties:
          email:
            type: string
            example: example@example.com
            description: email address
      WebAuthnRequest:
        type: object
        required:
          - credentialResponse
          - requestId
        properties:
          requestId:
            type: string
          credentialResponse:
            type: string
      GroupGraphCount:
        type: object
        required:
          - groupCount
          - jobCount
          - personCount
        properties:
          jobCount:
            type: number
            description: number of jobs
          personCount:
            type: number
            description: number of persons
          groupCount:
            type: number
            description: number of groups
      GroupGraphResult:
        type: object
        required:
          - group
          - groupPositions
          - jobs
          - underCount
        properties:
          group:
            type: object
            description: group data
            additionalProperties:
              type: object
          jobs:
            type: array
            description: job data
            items:
              type: object
              additionalProperties:
                type: object
          groupPositions:
            type: array
            description: positions available within the group
            items:
              type: object
              additionalProperties:
                type: object
          parent:
            $ref: '#/components/schemas/GroupParent'
          underCount:
            $ref: '#/components/schemas/GroupGraphCount'
      GroupGraphResults:
        type: object
        required:
          - data
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/GroupGraphResult'
          nextId:
            type: string
      GroupParent:
        type: object
        required:
          - id
          - type
        properties:
          id:
            type: string
            description: globally unique id
          type:
            type: string
            example: GROUP
            description: type of the parent
            enum:
              - GROUP
              - JOB
      GroupCount:
        type: object
        required:
          - orphanedGroupCount
          - relationshipGroupCount
          - totalGroupCount
        properties:
          totalGroupCount:
            type: number
            description: total number of groups
          relationshipGroupCount:
            type: number
            description: number of groups that are part of a larger group tree
          orphanedGroupCount:
            type: number
            description: number of orphaned groups that do not belong to any group tree
      OrgCount:
        type: object
        required:
          - departingCount
          - jobCount
          - personCount
          - startingCount
        properties:
          jobCount:
            type: integer
            format: int64
          personCount:
            type: integer
            format: int64
          startingCount:
            type: integer
            format: int64
          departingCount:
            type: integer
            format: int64
          groupCount:
            type: integer
            format: int64
      BulkJobUpdateRequest:
        type: object
        required:
          - date
          - updates
        properties:
          updates:
            type: array
            description: list of update operations to perform
            items:
              $ref: '#/components/schemas/UpdateOperation'
          date:
            type: string
            format: date
            description: date of update
          scenarioId:
            type: string
            description: scenario id
          note:
            type: string
            description: note for update
      UpdateOperation:
        type: object
        required:
          - jobId
          - update
        properties:
          jobId:
            type: string
          update:
            type: object
            additionalProperties:
              type: object
      GraphCount:
        type: object
        required:
          - sibling
          - siblingUnfilled
          - under
          - underUnfilled
        properties:
          under:
            type: integer
            format: int32
          sibling:
            type: integer
            format: int32
          underUnfilled:
            type: integer
            format: int32
          siblingUnfilled:
            type: integer
            format: int32
      GraphCountsResponse:
        type: object
        required:
          - counts
          - jobToManagerMap
          - managerToJobMap
        properties:
          counts:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/GraphCount'
          managerToJobMap:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
                example: 588f7ee98f138b19220041a7
          jobToManagerMap:
            type: object
            additionalProperties:
              type: string
              example: 588f7ee98f138b19220041a7
      Geocode:
        type: object
        required:
          - address
          - id
          - line
          - updateAt
        properties:
          id:
            type: string
          line:
            type: string
          address:
            $ref: '#/components/schemas/Address'
          geo:
            $ref: '#/components/schemas/Geopoint'
          updateAt:
            type: integer
            format: int64
  servers:
    - url: https://api.charthop.com
konfigCliVersion: 1.38.61
