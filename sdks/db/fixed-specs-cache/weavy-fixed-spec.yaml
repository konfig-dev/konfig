publishJson:
  company: Weavy
  serviceName: false
  sdkName: weavy-{language}-sdk
  clientName: Weavy
  metaDescription: >-
    Weavy is a complete toolkit for developers to add collaboration,
    productivity, and community features to web and mobile apps at a fraction of
    the cost and time. Our API, SDKs and UI Kits for Chat, Files, and Feeds
    enable dev teams to increase functionality and connect users, while focusing
    on your core product.
  apiStatusUrls: false
  homepage: www.weavy.com/
  developerDocumentation: www.weavy.com/docs
  categories:
    - developer_tools
    - web_development
    - framework
    - web_apps
rawSpecString: |
  openapi: 3.0.1
  info:
    title: Weavy API
    version: 22.1.0
  paths:
    /api/apps:
      post:
        tags:
          - Apps
        summary: Create app
        description: Create app with specified `type` and `uid`.
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/AppIn'
            application/json:
              schema:
                $ref: '#/components/schemas/AppIn'
            text/json:
              schema:
                $ref: '#/components/schemas/AppIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/AppIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Create
        x-method: POST
        x-path: /api/apps
        x-curl: "curl https://{WEAVY-SERVER}/api/apps\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'type': 'chat', 'uid': 'acme-chat', 'access': 'write' }\""
        x-order: 106
      get:
        tags:
          - Apps
        summary: List apps
        description: Returns a list of apps.
        parameters:
          - name: contextual
            in: query
            description: "`true` to lists contextual apps, `false` to list non-contextual apps; when not specified both types are listed.\r\n            Default value is `true`."
            schema:
              type: boolean
          - name: type
            in: query
            description: >-
              Guids of app types to list. Can be used to return only conversations
              of a specified type. When not specied all types of apps are
              returned.
            schema:
              type: array
              items:
                type: string
                format: uuid
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: List
        x-method: GET
        x-path: /api/apps
        x-curl: "curl https://{WEAVY-SERVER}/api/apps?top=10\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/apps/init:
      post:
        tags:
          - Apps
        summary: Init app with user
        description: >-
          Initialize an app (get existing or create new) and ensure user is member
          (if specified).
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/AppInitWithUser'
            application/json:
              schema:
                $ref: '#/components/schemas/AppInitWithUser'
            text/json:
              schema:
                $ref: '#/components/schemas/AppInitWithUser'
            application/*+json:
              schema:
                $ref: '#/components/schemas/AppInitWithUser'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
        deprecated: true
        x-controller: Apps
        x-action: Init
        x-method: POST
        x-path: /api/apps/init
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/init\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{'app': { 'uid': 'acme-chat', 'type': 'chat', 'name': 'Chat for ACME project' }, 'user': { 'uid': 'user-1' } }\""
        x-order: 10004
    /api/apps/{app}:
      get:
        tags:
          - Apps
        summary: Get app
        description: Returns data for the specified app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
          - name: trashed
            in: query
            description: '`true` to return app even if trashed, otherwise `false`.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Get
        x-method: GET
        x-path: /api/apps/{app}
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Apps
        summary: Update app
        description: Update an existing app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/AppUp'
            application/json:
              schema:
                $ref: '#/components/schemas/AppUp'
            text/json:
              schema:
                $ref: '#/components/schemas/AppUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/AppUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Update
        x-method: PATCH
        x-path: /api/apps/{app}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'description': 'Chat for ACME project' }\""
        x-order: 306
      delete:
        tags:
          - Apps
        summary: Delete app
        description: Permanently deletes an app and all it's content.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Delete
        x-method: DELETE
        x-path: /api/apps/{app}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/apps/{uid}:
      put:
        tags:
          - Apps
        summary: Upsert app
        description: >-
          Update and return app with specified `uid`. If the app does not exist it
          is created.
        parameters:
          - name: uid
            in: path
            description: Unique app identifier.
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/AppUpsert'
            application/json:
              schema:
                $ref: '#/components/schemas/AppUpsert'
            text/json:
              schema:
                $ref: '#/components/schemas/AppUpsert'
            application/*+json:
              schema:
                $ref: '#/components/schemas/AppUpsert'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Upsert
        x-method: PUT
        x-path: /api/apps/{uid}
        x-curl: "curl -X PUT https://{WEAVY-SERVER}/api/apps/acme-chat\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'type': 'chat', 'access': 'write' }\""
        x-order: 406
    /api/apps/{app}/subscribe:
      post:
        tags:
          - Apps
        summary: Subscribe to app
        description: Subscribe authenticated user to notifications for activity in the app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Subscribe
        x-method: POST
        x-path: /api/apps/{app}/subscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 809
    /api/apps/{app}/unsubscribe:
      post:
        tags:
          - Apps
        summary: Unsubscribe from app
        description: >-
          Unsubscribe authenticated user from notifications for activity in the
          app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Unsubscribe
        x-method: POST
        x-path: /api/apps/{app}/unsubscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 911
    /api/apps/{app}/trash:
      post:
        tags:
          - Apps
        summary: Trash app
        description: Move an app to the trash.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Trash
        x-method: POST
        x-path: /api/apps/{app}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10105
    /api/apps/{app}/restore:
      post:
        tags:
          - Apps
        summary: Restore app
        description: Restore an app from the trash.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AppOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: Restore
        x-method: POST
        x-path: /api/apps/{app}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10207
    /api/apps/{app}/members:
      get:
        tags:
          - Apps
        summary: List members
        description: List members of the specified app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
          - name: suspended
            in: query
            description: >-
              Indicates whether to list suspended members or not, `null` returns
              all members.
            schema:
              type: boolean
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MemberOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: ListMembers
        x-method: GET
        x-path: /api/apps/{app}/members
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 699
      post:
        tags:
          - Apps
        summary: Add members
        description: >-
          Add multiple members to an app. Can also be used to update `access` of
          existing members.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: Members to add.
          content:
            application/json-patch+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberIn'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberIn'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberIn'
            application/*+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberIn'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: AddMembers
        x-method: POST
        x-path: /api/apps/{app}/members
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"[ { 'uid': 'acme-user' }, { 'uid': 'daffy-duck', 'access': 'read' } ]\""
        x-order: 610
      delete:
        tags:
          - Apps
        summary: Remove members
        description: Remove multiple app members.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: User identifiers (`id` or `uid`) of members to remove.
          content:
            application/json-patch+json:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/*+json:
              schema:
                type: array
                items:
                  type: string
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: RemoveMembers
        x-method: DELETE
        x-path: /api/apps/{app}/members
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"['bugs-bunny', 'daffy-duck']\""
        x-order: 713
    /api/apps/{app}/members/{user}:
      put:
        tags:
          - Apps
        summary: Add member
        description: Add (or update) an app member.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/MemberOptions'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberOptions'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberOptions'
            application/*+json:
              schema:
                $ref: '#/components/schemas/MemberOptions'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: AddMember
        x-method: PUT
        x-path: /api/apps/{app}/members/{user}
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/apps/acme-chat/members/acme-user\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'access': 'read' }\""
        x-order: 599
      delete:
        tags:
          - Apps
        summary: Remove member
        description: Remove an app member.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Apps
        x-action: RemoveMember
        x-method: DELETE
        x-path: /api/apps/{app}/members/{user}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/members/bugs-bunny\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 712
    /api/blobs/{id}:
      get:
        tags:
          - Blobs
        summary: Get blob
        description: Get the metadata of a blob.
        parameters:
          - name: id
            in: path
            description: Id of blob.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlobOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Blobs
        x-action: Get
        x-method: GET
        x-path: /api/blobs/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/blobs/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
    /api/blobs:
      post:
        tags:
          - Blobs
        summary: Upload blob
        description: Uploads a blob using `multipart/form-data`.
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlobOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Blobs
        x-action: Upload
        x-method: POST
        x-path: /api/blobs
        x-curl: "curl https://{WEAVY-SERVER}/api/blobs\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n-F blob=@/test/image.png"
        x-order: 106
    /api/blobs/external:
      post:
        tags:
          - Blobs
        summary: Create external blob
        description: "Creates a blob that links to an external blob provider.\r\nAfter creation the blob can be used as reference when creating attachments and/or files."
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/BlobIn'
            application/json:
              schema:
                $ref: '#/components/schemas/BlobIn'
            text/json:
              schema:
                $ref: '#/components/schemas/BlobIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/BlobIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlobOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Blobs
        x-action: Create
        x-method: POST
        x-path: /api/blobs/external
        x-order: 106
    /api/apps/{app}/comments:
      post:
        tags:
          - Comments
        summary: Create app comment
        description: Creates a new comment in the specified Comments app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: CreateAppComment
        x-method: POST
        x-path: /api/apps/{app}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-comments/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment' }\""
        x-order: 116
      get:
        tags:
          - Comments
        summary: List app comments
        description: List comments in the specified Comments app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: ListAppComments
        x-method: GET
        x-path: /api/apps/{app}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-comments/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 515
    /api/files/{id}/comments:
      post:
        tags:
          - Comments
        summary: Create file comment
        description: Creates a new comment on the specified file.
        parameters:
          - name: id
            in: path
            description: File id
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: CreateFileComment
        x-method: POST
        x-path: /api/files/{id}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/files/1/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment on a file' }\""
        x-order: 117
      get:
        tags:
          - Comments
        summary: List file comments
        description: List comments on the specified file.
        parameters:
          - name: id
            in: path
            description: File id.
            required: true
            schema:
              type: integer
              format: int32
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: ListFileComments
        x-method: GET
        x-path: /api/files/{id}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/files/1/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 516
    /api/posts/{id}/comments:
      post:
        tags:
          - Comments
        summary: Create post comment
        description: Creates a new comment on the specified post.
        parameters:
          - name: id
            in: path
            description: Post id
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/CommentIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: CreatePostComment
        x-method: POST
        x-path: /api/posts/{id}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a comment on a post' }\""
        x-order: 117
      get:
        tags:
          - Comments
        summary: List post comments
        description: List comments on the specified post.
        parameters:
          - name: id
            in: path
            description: Post id.
            required: true
            schema:
              type: integer
              format: int32
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: ListPostComments
        x-method: GET
        x-path: /api/posts/{id}/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/comments?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 516
    /api/comments/{id}:
      get:
        tags:
          - Comments
        summary: Get comment
        description: Gets a comment by id.
        parameters:
          - name: id
            in: path
            description: Id of the comment.
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return comment even if trashed, otherwise `false`.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: Get
        x-method: GET
        x-path: /api/comments/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Comments
        summary: Update comment
        description: Updates a comment.
        parameters:
          - name: id
            in: path
            description: Id of the comment.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/CommentUp'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentUp'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/CommentUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: Update
        x-method: PATCH
        x-path: /api/comments/{id}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{'text': 'Update comment text' }\""
        x-order: 306
      delete:
        tags:
          - Comments
        summary: Delete comment
        description: Delete a comment.
        parameters:
          - name: id
            in: path
            description: Id of the comment.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: Delete
        x-method: DELETE
        x-path: /api/comments/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/comments/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/comments/{id}/trash:
      post:
        tags:
          - Comments
        summary: Trash comment
        description: Move a comment to the trash.
        parameters:
          - name: id
            in: path
            description: Id of the comment to trash.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: Trash
        x-method: POST
        x-path: /api/comments/{id}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/comments/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10105
    /api/comments/{id}/restore:
      post:
        tags:
          - Comments
        summary: Restore comment
        description: Restore a comment from the trash.
        parameters:
          - name: id
            in: path
            description: Id of the comment to restore.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: Restore
        x-method: POST
        x-path: /api/comments/{id}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/comments/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10207
    /api/comments:
      get:
        tags:
          - Comments
        summary: List comments
        description: List comments.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CommentOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Comments
        x-action: List
        x-method: GET
        x-path: /api/comments
        x-curl: "curl https://{WEAVY-SERVER}/api/comments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/conversations:
      post:
        tags:
          - Conversations
        summary: Create conversation
        description: "Creates a new conversation with the specified members.\r\nWhen no type is specified the following logic is applied to decide the type of conversation to create.\r\n<ul><li>If a name is specified, or member count is more than one, a chat room is created.</li><li>If only one member is specified, a private chat is created. If there is an existing chat between the creator and member, that instance is returned instead of creating a new chat.</li></ul>"
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/ConversationIn'
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationIn'
            text/json:
              schema:
                $ref: '#/components/schemas/ConversationIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/ConversationIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Create
        x-method: POST
        x-path: /api/conversations
        x-curl: "curl https://{WEAVY-SERVER}/api/conversations\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'members': [ 'bugs-bunny' ] }\"\r\n\r\ncurl https://{WEAVY-SERVER}/api/conversations\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'members': ['bugs-bunny', 'daffy-duck', 14], 'name': 'Acme'  }\""
        x-order: 106
      get:
        tags:
          - Conversations
        summary: List conversations
        description: List conversations for the authenticated user.
        parameters:
          - name: member
            in: query
            description: >-
              User identifier (`id` or `uid`). Used to return conversations where
              specified user is member.
            schema:
              type: string
          - name: unread
            in: query
            description: "`true` lists unread conversations, `false` list read conversations and `null` lists all conversations;\r\n            default is `null`."
            schema:
              type: boolean
          - name: type
            in: query
            description: >-
              Guids of app types to list. Can be used to return only conversations
              of a specified type, e.g. chat rooms. When not specied all types of
              conversations are returned.
            schema:
              type: array
              items:
                type: string
                format: uuid
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: List
        x-method: GET
        x-path: /api/conversations
        x-curl: "curl https://{WEAVY-SERVER}/api/conversations?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 504
    /api/conversations/{id}:
      get:
        tags:
          - Conversations
        summary: Get conversation
        description: Get conversation.
        parameters:
          - name: id
            in: path
            description: Id of the conversation to return.
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return conversation even if trashed, otherwise `false`.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Get
        x-method: GET
        x-path: /api/conversations/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/conversations/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
    /api/conversations/badge:
      get:
        tags:
          - Conversations
        summary: Count unread conversations
        description: >-
          Get number of unread conversations for the authenticated user (grouped
          by conversation type).
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationBadge'
        x-controller: Conversations
        x-action: CountUnread
        x-method: GET
        x-path: /api/conversations/badge
        x-curl: "curl https://{WEAVY-SERVER}/api/conversations/badge\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10011
    /api/conversations/{id}/mark:
      put:
        tags:
          - Conversations
        summary: Mark as read
        description: Updates the conversation read marker for the authenticated user.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
          - name: message_id
            in: query
            description: >-
              Optional id of last seen message, when not specified the entire
              conversation is marked as read.
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Mark
        x-method: PUT
        x-path: /api/conversations/{id}/mark
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10090
      delete:
        tags:
          - Conversations
        summary: Mark as unread
        description: Mark a conversation as unread, i.e remove the conversation read marker.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Unmark
        x-method: DELETE
        x-path: /api/conversations/{id}/mark
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10091
    /api/conversations/{id}/pin:
      put:
        tags:
          - Conversations
        summary: Pin conversation
        description: Pin a conversation.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Pin
        x-method: PUT
        x-path: /api/conversations/{id}/pin
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/pin\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10092
      delete:
        tags:
          - Conversations
        summary: Unpin conversation
        description: Unpin a conversation.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Unpin
        x-method: DELETE
        x-path: /api/conversations/{id}/pin
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/conversations/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10093
    /api/conversations/{id}/delivered:
      put:
        tags:
          - Conversations
        summary: Set as delivered
        description: Updates the conversation delivery status for the authenticated user.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConversationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Conversations
        x-action: Delivered
        x-method: PUT
        x-path: /api/conversations/{id}/delivered
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/delivered\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10094
    /api/conversations/{id}/typing:
      put:
        tags:
          - Conversations
        summary: Indicate typing
        description: >-
          Indicate that the authenticated user is typing a message in a
          conversation.
        parameters:
          - name: id
            in: path
            description: Conversation (app) id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
        x-controller: Conversations
        x-action: Typing
        x-method: PUT
        x-path: /api/conversations/{id}/typing
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/conversations/1/typing\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10006
    /api/directories:
      post:
        tags:
          - Directories
        summary: Create directory
        description: Creates a user directory.
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/DirectoryIn'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryIn'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/DirectoryIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DirectoryOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '409':
            description: Conflict
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: Create
        x-method: POST
        x-path: /api/directories
        x-curl: "curl https://{WEAVY-SERVER}/api/directories\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'acme' }\""
        x-order: 106
      get:
        tags:
          - Directories
        summary: List directories
        description: List directories.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DirectoryOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: List
        x-method: GET
        x-path: /api/directories
        x-curl: "curl https://{WEAVY-SERVER}/api/directories?top=10&q=acme\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/directories/{dir}:
      get:
        tags:
          - Directories
        summary: Get directory
        description: Get a directory.
        parameters:
          - name: dir
            in: path
            description: Id or name of directory.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DirectoryOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: Get
        x-method: GET
        x-path: /api/directories/{dir}
        x-curl: "curl https://{WEAVY-SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Directories
        summary: Update directory
        description: Update (rename) a directory.
        parameters:
          - name: dir
            in: path
            description: Id or name of directory.
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/DirectoryUp'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryUp'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/DirectoryUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DirectoryOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: Update
        x-method: PATCH
        x-path: /api/directories/{dir}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'ACME_CORPORATION' }\""
        x-order: 306
      delete:
        tags:
          - Directories
        summary: Delete directory
        description: Delete a directory.
        parameters:
          - name: dir
            in: path
            description: Id or name of directory.
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: Delete
        x-method: DELETE
        x-path: /api/directories/{dir}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/directories/acme\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10306
    /api/directories/{dir}/members:
      get:
        tags:
          - Directories
        summary: List members
        description: List the members of a directory.
        parameters:
          - name: dir
            in: path
            description: Id or name of directory.
            required: true
            schema:
              type: string
          - name: suspended
            in: query
            description: >-
              Indicates whether to list suspended members or not, `null` returns
              all members.
            schema:
              type: boolean
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Directories
        x-action: ListMembers
        x-method: GET
        x-path: /api/directories/{dir}/members
        x-curl: "curl https://{WEAVY-SERVER}/api/directories/acme/members\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 511
    /api/embeds/{id}:
      get:
        tags:
          - Embeds
        summary: Get embed
        description: Get an embed by id.
        parameters:
          - name: id
            in: path
            description: Id of embed.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmbedOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Embeds
        x-action: Get
        x-method: GET
        x-path: /api/embeds/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/embeds/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
    /api/embeds:
      post:
        tags:
          - Embeds
        summary: Create embed
        description: Create an embed for the given url.
        requestBody:
          description: Contains the URL to retrieve embedding information for.
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/EmbedIn'
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedIn'
            text/json:
              schema:
                $ref: '#/components/schemas/EmbedIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/EmbedIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmbedOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Embeds
        x-action: Create
        x-method: POST
        x-path: /api/embeds
        x-curl: "curl https://{WEAVY-SERVER}/api/embeds\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'url': 'https://weavy.com' }\""
        x-order: 106
    /api/apps/{app}/files:
      post:
        tags:
          - Files
        summary: Create file
        description: Creates a new file in the specified Files app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/FileIn'
            application/json:
              schema:
                $ref: '#/components/schemas/FileIn'
            text/json:
              schema:
                $ref: '#/components/schemas/FileIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/FileIn'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '409':
            description: Conflict
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Create
        x-method: POST
        x-path: /api/apps/{app}/files
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-files/files\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'blob_id': 1 }\""
        x-order: 106
      get:
        tags:
          - Files
        summary: List files in app
        description: List files in the specified Files app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: ListAppFiles
        x-method: GET
        x-path: /api/apps/{app}/files
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-files/files?top=30\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 512
    /api/files/{id}:
      get:
        tags:
          - Files
        summary: Get file
        description: Get file metadata.
        parameters:
          - name: id
            in: path
            description: File id
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return file even if trashed.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Get
        x-method: GET
        x-path: /api/files/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Files
        summary: Update file
        description: Update a file.
        parameters:
          - name: id
            in: path
            description: Id of file.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/FileUp'
            application/json:
              schema:
                $ref: '#/components/schemas/FileUp'
            text/json:
              schema:
                $ref: '#/components/schemas/FileUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/FileUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Update
        x-method: PATCH
        x-path: /api/files/{id}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'name': 'filename.txt' }\""
        x-order: 306
      delete:
        tags:
          - Files
        summary: Delete file
        description: Delete a file.
        parameters:
          - name: id
            in: path
            description: Id of the file.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Delete
        x-method: DELETE
        x-path: /api/files/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/files/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/files/{id}/versions/{version}:
      get:
        tags:
          - Files
        summary: Get version
        description: Get specific version of a file.
        parameters:
          - name: id
            in: path
            description: File id.
            required: true
            schema:
              type: integer
              format: int32
          - name: version
            in: path
            description: Version number.
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: GetVersion
        x-method: GET
        x-path: /api/files/{id}/versions/{version}
        x-curl: "curl https://{WEAVY-SERVER}/api/files/1/versions/2\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 210
      delete:
        tags:
          - Files
        summary: Delete version
        description: Delete specific version of a file.
        parameters:
          - name: id
            in: path
            description: File id.
            required: true
            schema:
              type: integer
              format: int32
          - name: version
            in: path
            description: Version number.
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: DeleteVersion
        x-method: DELETE
        x-path: /api/files/{id}/versions/{version}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/files/1/versions/2\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10313
    /api/files/{id}/versions:
      get:
        tags:
          - Files
        summary: Get versions
        description: List version history for the specified file.
        parameters:
          - name: id
            in: path
            description: File id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/FileOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: GetVersions
        x-method: GET
        x-path: /api/files/{id}/versions
        x-curl: "curl https://{WEAVY-SERVER}/api/files/1/versions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 211
    /api/files/{id}/subscribe:
      post:
        tags:
          - Files
        summary: Subscribe to file
        description: Subscribe to notifications for activity on a file.
        parameters:
          - name: id
            in: path
            description: Id of the file.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Subscribe
        x-method: POST
        x-path: /api/files/{id}/subscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 809
    /api/files/{id}/unsubscribe:
      post:
        tags:
          - Files
        summary: Unsubscribe from file
        description: Unsubscribe to notifications for activity on a file.
        parameters:
          - name: id
            in: path
            description: Id of the file.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Unsubscribe
        x-method: POST
        x-path: /api/files/{id}/unsubscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 911
    /api/files/{id}/trash:
      post:
        tags:
          - Files
        summary: Trash file
        description: Move a file to the trash.
        parameters:
          - name: id
            in: path
            description: Id of the file to trash.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Trash
        x-method: POST
        x-path: /api/files/{id}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10105
    /api/files/{id}/restore:
      post:
        tags:
          - Files
        summary: Restore file
        description: Restore a file from the trash.
        parameters:
          - name: id
            in: path
            description: Id of the file to restore.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: Restore
        x-method: POST
        x-path: /api/files/{id}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10207
    /api/files/{id}/versions/{version}/restore:
      post:
        tags:
          - Files
        summary: Restore version
        description: "Restore a previous version of a file to be the current version.\r\nThis will create a new version with the contents of the previous version, but preserves all existing versions of the file."
        parameters:
          - name: id
            in: path
            description: File id.
            required: true
            schema:
              type: integer
              format: int32
          - name: version
            in: path
            description: Version number.
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: RestoreVersion
        x-method: POST
        x-path: /api/files/{id}/versions/{version}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/files/1/versions/2/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10214
    /api/files:
      get:
        tags:
          - Files
        summary: List files
        description: List files.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: List
        x-method: GET
        x-path: /api/files
        x-curl: "curl https://{WEAVY-SERVER}/api/files\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/comments/{id}/attachments:
      get:
        tags:
          - Files
        summary: List comment attachments
        description: List files attached to the specified comment.
        parameters:
          - name: id
            in: path
            description: Comment id.
            required: true
            schema:
              type: integer
              format: int32
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: ListCommentAttachments
        x-method: GET
        x-path: /api/comments/{id}/attachments
        x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 522
    /api/messages/{id}/attachments:
      get:
        tags:
          - Files
        summary: List message attachments
        description: List files attached to the specified message.
        parameters:
          - name: id
            in: path
            description: Message id.
            required: true
            schema:
              type: integer
              format: int32
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: ListMessageAttachments
        x-method: GET
        x-path: /api/messages/{id}/attachments
        x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 522
    /api/posts/{id}/attachments:
      get:
        tags:
          - Files
        summary: List post attachments
        description: List files attached to the specified post.
        parameters:
          - name: id
            in: path
            description: Post id.
            required: true
            schema:
              type: integer
              format: int32
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/FileOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Files
        x-action: ListPostAttachments
        x-method: GET
        x-path: /api/posts/{id}/attachments
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/attachments\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 519
    /api/meetings:
      post:
        tags:
          - Meetings
        summary: Create meeting
        description: Create a meeting. The provider can either be `zoom` or `teams`.
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/MeetingIn'
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingIn'
            text/json:
              schema:
                $ref: '#/components/schemas/MeetingIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/MeetingIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MeetingOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Meetings
        x-action: Create
        x-method: POST
        x-path: /api/meetings
        x-curl: "curl https://{WEAVY-SERVER}/api/meetings\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'provider': 'zoom' }\""
        x-order: 106
    /api/apps/{app}/messages:
      post:
        tags:
          - Messages
        summary: Create message
        description: Creates a new message in the specified app (chat or conversation).
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/MessageIn'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageIn'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/MessageIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Create
        x-method: POST
        x-path: /api/apps/{app}/messages
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/messages\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a message' }\""
        x-order: 106
      get:
        tags:
          - Messages
        summary: List app messages
        description: List messages in the specified app (chat or conversation).
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: ListMessages
        x-method: GET
        x-path: /api/apps/{app}/messages
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-chat/messages?top=50\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 512
    /api/messages/{id}:
      get:
        tags:
          - Messages
        summary: Get message
        description: Gets a message by id.
        parameters:
          - name: id
            in: path
            description: Id of the message.
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return message even if trashed.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Get
        x-method: GET
        x-path: /api/messages/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Messages
        summary: Update message
        description: Updates a message.
        parameters:
          - name: id
            in: path
            description: Id of the message.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/MessageUp'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageUp'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/MessageUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Update
        x-method: PATCH
        x-path: /api/messages/{id}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is an updated message' }\""
        x-order: 306
      delete:
        tags:
          - Messages
        summary: Delete message
        description: Permanently delete a message.
        parameters:
          - name: id
            in: path
            description: Id of the message.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Delete
        x-method: DELETE
        x-path: /api/messages/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/messages/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/messages/{id}/trash:
      post:
        tags:
          - Messages
        summary: Trash message
        description: Move a message to the trash.
        parameters:
          - name: id
            in: path
            description: Id of the message to trash.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Trash
        x-method: POST
        x-path: /api/messages/{id}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/messages/1/trash\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10105
    /api/messages/{id}/restore:
      post:
        tags:
          - Messages
        summary: Restore message
        description: Restore a message from the trash.
        parameters:
          - name: id
            in: path
            description: Id of the message to restore.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: Restore
        x-method: POST
        x-path: /api/messages/{id}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/messages/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10207
    /api/messages:
      get:
        tags:
          - Messages
        summary: List messages
        description: List messages.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MessageOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Messages
        x-action: List
        x-method: GET
        x-path: /api/messages
        x-curl: "curl https://{WEAVY-SERVER}/api/messages\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/notifications/{id}:
      get:
        tags:
          - Notifications
        summary: Get notification
        description: Get a notification by id.
        parameters:
          - name: id
            in: path
            description: Notification id.
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return notification even if trashed.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Notifications
        x-action: Get
        x-method: GET
        x-path: /api/notifications/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/notifications/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      delete:
        tags:
          - Notifications
        summary: Delete notification
        description: Delete a notification.
        parameters:
          - name: id
            in: path
            description: Notification id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Notifications
        x-action: Delete
        x-method: DELETE
        x-path: /api/notifications/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/notifications/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/notifications/{id}/mark:
      put:
        tags:
          - Notifications
        summary: Mark as read
        description: Mark a notification as read.
        parameters:
          - name: id
            in: path
            description: Notification id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Notifications
        x-action: Mark
        x-method: PUT
        x-path: /api/notifications/{id}/mark
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/notifications/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10004
      delete:
        tags:
          - Notifications
        summary: Mark as unread
        description: Mark a notification as unread.
        parameters:
          - name: id
            in: path
            description: Notification id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Notifications
        x-action: Unmark
        x-method: DELETE
        x-path: /api/notifications/{id}/mark
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/notifications/1/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10006
    /api/notifications/mark:
      put:
        tags:
          - Notifications
        summary: Mark (all) as read
        description: Mark (all) notifications as read.
        parameters:
          - name: id
            in: query
            description: >-
              Optional id of last seen notification. When specified, this and
              previous notifications are marked as read, otherwise all
              notifications (uncluding yet unseen) are marked as read.
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
        x-controller: Notifications
        x-action: SetMarker
        x-method: PUT
        x-path: /api/notifications/mark
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/notifications/mark\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n            \r\ncurl -X PUT https://{WEAVY_SERVER}/api/notifications/mark?id=3\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10009
    /api/notifications:
      get:
        tags:
          - Notifications
        summary: List notifications
        description: List notifications for the authenticated user.
        parameters:
          - name: action
            in: query
            description: >-
              List notifications that were triggered by actions of this type, e.g.
              `message_created` or `comment_updated` etc.
            schema:
              type: string
          - name: unread
            in: query
            description: >-
              `true` lists unread notifications, `false` lists read notifications
              and `null` (default) lists all notifications whether they are read
              or not.
            schema:
              type: boolean
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NotificationOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Notifications
        x-action: List
        x-method: GET
        x-path: /api/notifications
        x-curl: "curl https://{WEAVY-SERVER}/api/notifications?top=10&unread=true\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/options/{id}:
      get:
        tags:
          - Options
        summary: Get poll option
        description: Gets a poll option.
        parameters:
          - name: id
            in: path
            description: Id of the option.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PollOptionOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Options
        x-action: Get
        x-method: GET
        x-path: /api/options/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/options/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
    /api/options/{id}/vote:
      post:
        tags:
          - Options
        summary: Vote
        description: Add vote for the authenticated user to a poll option.
        parameters:
          - name: id
            in: path
            description: Id of the poll option.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PollOptionOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Options
        x-action: Vote
        x-method: POST
        x-path: /api/options/{id}/vote
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/options/1/vote\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10004
    /api/options/{id}/voters:
      get:
        tags:
          - Options
        summary: List voters
        description: List users that voted for the specified poll option.
        parameters:
          - name: id
            in: path
            description: Option id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Options
        x-action: GetVoters
        x-method: GET
        x-path: /api/options/{id}/voters
        x-curl: "curl https://{WEAVY-SERVER}/api/options/1/voters\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 209
    /api/apps/{app}/posts:
      post:
        tags:
          - Posts
        summary: Create post
        description: Creates a new post in the specified posts app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/PostIn'
            application/json:
              schema:
                $ref: '#/components/schemas/PostIn'
            text/json:
              schema:
                $ref: '#/components/schemas/PostIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/PostIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Create
        x-method: POST
        x-path: /api/apps/{app}/posts
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-posts/posts\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is a post' }\""
        x-order: 106
      get:
        tags:
          - Posts
        summary: List app posts
        description: List posts in the specified posts app.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: ListAppPosts
        x-method: GET
        x-path: /api/apps/{app}/posts
        x-curl: "curl https://{WEAVY-SERVER}/api/apps/acme-posts/posts?top=50\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 512
    /api/posts/{id}:
      get:
        tags:
          - Posts
        summary: Get post
        description: Gets a post by id.
        parameters:
          - name: id
            in: path
            description: Id of the post.
            required: true
            schema:
              type: integer
              format: int32
          - name: trashed
            in: query
            description: '`true` to return post even if trashed.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Get
        x-method: GET
        x-path: /api/posts/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Posts
        summary: Update post
        description: Updates a post.
        parameters:
          - name: id
            in: path
            description: Id of the post.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/PostUp'
            application/json:
              schema:
                $ref: '#/components/schemas/PostUp'
            text/json:
              schema:
                $ref: '#/components/schemas/PostUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/PostUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Update
        x-method: PATCH
        x-path: /api/posts/{id}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\"\r\n--json \"{ 'text': 'This is an updated post' }\""
        x-order: 306
      delete:
        tags:
          - Posts
        summary: Delete post
        description: Delete a post.
        parameters:
          - name: id
            in: path
            description: Id of the post.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Delete
        x-method: DELETE
        x-path: /api/posts/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/posts/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10306
    /api/posts/{id}/subscribe:
      post:
        tags:
          - Posts
        summary: Subscribe to post
        description: Subscribe to notifications for activity on a post.
        parameters:
          - name: id
            in: path
            description: Id of the post.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Subscribe
        x-method: POST
        x-path: /api/posts/{id}/subscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/subscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 809
    /api/posts/{id}/unsubscribe:
      post:
        tags:
          - Posts
        summary: Unsubscribe from post
        description: Unsubscribe to notifications for activity on a post.
        parameters:
          - name: id
            in: path
            description: Id of the post.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Unsubscribe
        x-method: POST
        x-path: /api/posts/{id}/unsubscribe
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/unsubscribe\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 911
    /api/posts/{id}/trash:
      post:
        tags:
          - Posts
        summary: Trash post
        description: Move a post to the trash.
        parameters:
          - name: id
            in: path
            description: Id of the post to trash.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Trash
        x-method: POST
        x-path: /api/posts/{id}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/trash\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10105
    /api/posts/{id}/restore:
      post:
        tags:
          - Posts
        summary: Restore post
        description: Restore a post from the trash.
        parameters:
          - name: id
            in: path
            description: Id of the post to restore.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: Restore
        x-method: POST
        x-path: /api/posts/{id}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/posts/1/restore\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 10207
    /api/posts:
      get:
        tags:
          - Posts
        summary: List posts
        description: List posts.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PostOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Posts
        x-action: List
        x-method: GET
        x-path: /api/posts
        x-curl: "curl https://{WEAVY-SERVER}/api/posts\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/comments/{id}/reactions:
      post:
        tags:
          - Reactions
        summary: React to comment
        description: Create reaction for a comment.
        parameters:
          - name: id
            in: path
            description: Comment id.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            text/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: CreateCommentReaction
        x-method: POST
        x-path: /api/comments/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
        x-order: 121
      delete:
        tags:
          - Reactions
        summary: Unreact to comment
        description: Delete authenticated user's reaction to a comment.
        parameters:
          - name: id
            in: path
            description: Comment id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: DeleteCommentReaction
        x-method: DELETE
        x-path: /api/comments/{id}/reactions
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10321
      get:
        tags:
          - Reactions
        summary: List comment reactions
        description: List reactions for a comment.
        parameters:
          - name: id
            in: path
            description: Comment id.
            required: true
            schema:
              type: integer
              format: int32
          - name: content
            in: query
            description: >-
              Lists reactions with the specified emoji character. Omit this
              parameter to list all reactions.
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReactionOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: ListCommentReactions
        x-method: GET
        x-path: /api/comments/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/comments/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 520
    /api/messages/{id}/reactions:
      post:
        tags:
          - Reactions
        summary: React to message
        description: Create reaction for a message.
        parameters:
          - name: id
            in: path
            description: Message id.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            text/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: CreateMessageReaction
        x-method: POST
        x-path: /api/messages/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
        x-order: 121
      delete:
        tags:
          - Reactions
        summary: Unreact to message
        description: Delete authenticated user's reaction to a message.
        parameters:
          - name: id
            in: path
            description: Message id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: DeleteMessageReaction
        x-method: DELETE
        x-path: /api/messages/{id}/reactions
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10321
      get:
        tags:
          - Reactions
        summary: List message reactions
        description: List reactions for a message.
        parameters:
          - name: id
            in: path
            description: Message id.
            required: true
            schema:
              type: integer
              format: int32
          - name: content
            in: query
            description: >-
              Lists reactions with the specified emoji character. Omit this
              parameter to list all reactions.
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReactionOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: ListMessageReactions
        x-method: GET
        x-path: /api/messages/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/messages/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 520
    /api/posts/{id}/reactions:
      post:
        tags:
          - Reactions
        summary: React to post
        description: Create reaction for a post.
        parameters:
          - name: id
            in: path
            description: Post id.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            text/json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/ReactionIn'
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: CreatePostReaction
        x-method: POST
        x-path: /api/posts/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\"\r\n--json \"{ 'content': '😍' }\""
        x-order: 118
      delete:
        tags:
          - Reactions
        summary: Unreact to post
        description: Delete authenticated user's reaction to a post.
        parameters:
          - name: id
            in: path
            description: Post id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: DeletePostReaction
        x-method: DELETE
        x-path: /api/posts/{id}/reactions
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 10318
      get:
        tags:
          - Reactions
        summary: List post reactions
        description: List reactions for a post.
        parameters:
          - name: id
            in: path
            description: Post id.
            required: true
            schema:
              type: integer
              format: int32
          - name: content
            in: query
            description: >-
              Lists reactions with the specified emoji character. Omit this
              parameter to list all reactions.
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReactionOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: ListPostReactions
        x-method: GET
        x-path: /api/posts/{id}/reactions
        x-curl: "curl https://{WEAVY-SERVER}/api/posts/1/reactions\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 517
    /api/reactions/{id}:
      get:
        tags:
          - Reactions
        summary: Get reaction
        description: Get a reaction by id.
        parameters:
          - name: id
            in: path
            description: Reaction id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReactionOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: Get
        x-method: GET
        x-path: /api/reactions/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/reactions/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 203
      delete:
        tags:
          - Reactions
        summary: Delete reaction
        description: Delete a reaction.
        parameters:
          - name: id
            in: path
            description: Reaction id.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Reactions
        x-action: Delete
        x-method: DELETE
        x-path: /api/reactions/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/reactions/1\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 15000
    /api/apps/{app}/stars:
      post:
        tags:
          - Stars
        summary: Add star
        description: Add a star to an app on behalf of the authenticated user.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Stars
        x-action: Add
        x-method: POST
        x-path: /api/apps/{app}/stars
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/apps/acme-chat/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 603
      delete:
        tags:
          - Stars
        summary: Remove star
        description: Remove a star from an app on behalf of the authenticated user.
        parameters:
          - name: app
            in: path
            description: App identifier (`id` or `uid`)
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Stars
        x-action: Remove
        x-method: DELETE
        x-path: /api/apps/{app}/stars
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/apps/acme-chat/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 706
    /api/stars:
      get:
        tags:
          - Stars
        summary: List stars
        description: List items starred by the authenticated user.
        parameters:
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EntityOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Stars
        x-action: List
        x-method: GET
        x-path: /api/stars
        x-curl: "curl https://{WEAVY-SERVER}/api/stars\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 504
    /api/users:
      post:
        tags:
          - Users
        summary: Create user
        description: Create a user account.
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/UserIn'
            application/json:
              schema:
                $ref: '#/components/schemas/UserIn'
            text/json:
              schema:
                $ref: '#/components/schemas/UserIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/UserIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Create
        x-method: POST
        x-path: /api/users
        x-curl: "curl https://{WEAVY-SERVER}/api/users\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'uid': 'bugs-bunny', 'name': 'Bugs Bunny', 'directory': 'acme' }\""
        x-order: 106
      get:
        tags:
          - Users
        summary: List users
        description: List users.
        parameters:
          - name: bot
            in: query
            description: Indicates whether to list bot users or not.
            schema:
              type: boolean
          - name: directory_id
            in: query
            description: >-
              List users in the specified directory, `null` lists users from all
              directories.
            schema:
              type: integer
              format: int32
          - name: suspended
            in: query
            description: Indicates whether to list suspended users or not.
            schema:
              type: boolean
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: List
        x-method: GET
        x-path: /api/users
        x-curl: "curl https://{WEAVY-SERVER}/api/users?top=20\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 504
    /api/users/{user}:
      get:
        tags:
          - Users
        summary: Get user
        description: Get user with specified identifier.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
          - name: trashed
            in: query
            description: '`true` to return user even if trashed.'
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Get
        x-method: GET
        x-path: /api/users/{user}
        x-curl: "curl https://{WEAVY-SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Users
        summary: Update user
        description: Update a user.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/UserUp'
            application/json:
              schema:
                $ref: '#/components/schemas/UserUp'
            text/json:
              schema:
                $ref: '#/components/schemas/UserUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/UserUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Update
        x-method: PATCH
        x-path: /api/users/{user}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'Bugs Bunny' }\""
        x-order: 306
    /api/user:
      get:
        tags:
          - Users
        summary: Get authenticated user
        description: Get the authenticated user.
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: GetAuthenticated
        x-method: GET
        x-path: /api/user
        x-curl: "curl https://{WEAVY-SERVER}/api/user\r\n-H \"Authorization: Bearer {ACCESS-TOKEN}\""
        x-order: 216
    /api/users/{uid}:
      put:
        tags:
          - Users
        summary: Upsert user
        description: >-
          Update and return user with specified `uid`. If the user does not exists
          it is created.
        parameters:
          - name: uid
            in: path
            description: Unique user identifier.
            required: true
            schema:
              type: string
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/UserUpsert'
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpsert'
            text/json:
              schema:
                $ref: '#/components/schemas/UserUpsert'
            application/*+json:
              schema:
                $ref: '#/components/schemas/UserUpsert'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Upsert
        x-method: PUT
        x-path: /api/users/{uid}
        x-curl: "curl -X PUT https://{WEAVY_SERVER}/api/users/bugs-bunny\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'name': 'Bugs Bunny', 'email': 'bugs@acme.corp\""
        x-order: 406
    /api/users/{user}/trash:
      post:
        tags:
          - Users
        summary: Trash user
        description: Move a user to the trash.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`) of the user to trash.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Trash
        x-method: POST
        x-path: /api/users/{user}/trash
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/users/bugs-bunny/trash\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10105
    /api/users/{user}/restore:
      post:
        tags:
          - Users
        summary: Restore user
        description: Restore a user from the trash.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`) of the user to restore.
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Restore
        x-method: POST
        x-path: /api/users/{user}/restore
        x-curl: "curl -X POST https://{WEAVY_SERVER}/api/users/bugs-bunny/restore\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10207
    /api/users/{user}/tokens:
      post:
        tags:
          - Users
        summary: Issue access token
        description: >-
          If a user with the with the specified `uid` does not exists, this
          endpoint first creates the user and then issues an `access_token`.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        requestBody:
          description: Optional token creation options.
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/TokenIn'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenIn'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/TokenIn'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TokenOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: IssueToken
        x-method: POST
        x-path: /api/users/{user}/tokens
        x-curl: "curl https://{WEAVY-SERVER}/api/users/bugs-bunny/tokens\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'expires_in': 7200 }\""
        x-order: 10010
      delete:
        tags:
          - Users
        summary: Revoke access token
        description: Revoke all access tokens for the specified user.
        parameters:
          - name: user
            in: path
            description: User identifier (`id` or `uid`).
            required: true
            schema:
              type: string
        responses:
          '204':
            description: No Content
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: RevokeTokens
        x-method: DELETE
        x-path: /api/users/{user}/tokens
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/users/bugs-bunny/tokens\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10012
    /api/users/autocomplete:
      get:
        tags:
          - Users
        summary: List users (autocomplete)
        description: List users based on autocomplete search.
        parameters:
          - name: q
            in: query
            description: The search phrase to use.
            schema:
              type: string
          - name: skip
            in: query
            description: >-
              Gets or sets the number of items to skip before returning, defaults
              to `0`.
            schema:
              type: integer
              format: int32
              default: 0
          - name: top
            in: query
            description: Max number of items to return, defaults to `5`.
            schema:
              type: integer
              format: int32
              default: 5
          - name: count
            in: query
            description: Count the total number of search results, defaults to `false`.
            schema:
              type: boolean
              default: false
          - name: id
            in: query
            description: >-
              Optional app id. When set, the result contains a property indicating
              whether the listed users are member of the specified app or not.
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AutocompleteUserOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Users
        x-action: Autocomplete
        x-method: GET
        x-path: /api/users/autocomplete
        x-curl: "curl https://{WEAVY-SERVER}/api/users/autocomplete?q=john\r\n-H \"Authorization: Bearer {ACCESS-TOKEN | API-KEY}\""
        x-order: 1100
    /api/webhooks:
      get:
        tags:
          - Webhooks
        summary: List webhooks
        description: List webhooks.
        parameters:
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WebhookOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: List
        x-method: GET
        x-path: /api/webhooks
        x-curl: "curl https://{WEAVY-SERVER}/api/webhooks\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 504
      post:
        tags:
          - Webhooks
        summary: Register webhook
        description: Registers a webhook.
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/WebhookIn'
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookIn'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookIn'
            application/*+json:
              schema:
                $ref: '#/components/schemas/WebhookIn'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WebhookOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: Create
        x-method: POST
        x-path: /api/webhooks
        x-curl: "curl https://{WEAVY-SERVER}/api/webhooks\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{'payload_url': 'https://www.example.com/webhooks/incoming', 'triggers': ['notifications']}\""
        x-order: 106
    /api/webhooks/{id}:
      get:
        tags:
          - Webhooks
        summary: Get webhook
        description: Get a webhook by id.
        parameters:
          - name: id
            in: path
            description: The unique identifier of the hook.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WebhookOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: Get
        x-method: GET
        x-path: /api/webhooks/{id}
        x-curl: "curl https://{WEAVY-SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 203
      patch:
        tags:
          - Webhooks
        summary: Update webhook
        description: Update a webhook registration.
        parameters:
          - name: id
            in: path
            description: The unique identifier of the hook.
            required: true
            schema:
              type: integer
              format: int32
        requestBody:
          description: ''
          content:
            application/json-patch+json:
              schema:
                $ref: '#/components/schemas/WebhookUp'
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookUp'
            text/json:
              schema:
                $ref: '#/components/schemas/WebhookUp'
            application/*+json:
              schema:
                $ref: '#/components/schemas/WebhookUp'
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/WebhookOut'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '422':
            description: Client Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: Update
        x-method: PATCH
        x-path: /api/webhooks/{id}
        x-curl: "curl -X PATCH https://{WEAVY_SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\"\r\n--json \"{ 'triggers': ['notifications', 'comments'] }\""
        x-order: 306
      delete:
        tags:
          - Webhooks
        summary: Delete webhook
        description: Delete a webhook
        parameters:
          - name: id
            in: path
            description: The unique identifier of the hook.
            required: true
            schema:
              type: integer
              format: int32
        responses:
          '204':
            description: No Content
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: Delete
        x-method: DELETE
        x-path: /api/webhooks/{id}
        x-curl: "curl -X DELETE https://{WEAVY_SERVER}/api/webhooks/1\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 10306
    /api/webhooks/{id}/deliveries:
      get:
        tags:
          - Webhooks
        summary: List deliveries
        description: List webhook deliveries.
        parameters:
          - name: id
            in: path
            description: Webhook id
            required: true
            schema:
              type: integer
              format: int32
          - name: action
            in: query
            description: ''
            schema:
              type: string
          - name: q
            in: query
            description: A query used to find matching items.
            schema:
              type: string
          - name: tag
            in: query
            description: List items with the specified tag.
            schema:
              type: string
          - name: trashed
            in: query
            description: >-
              Indicates whether trashed items should be listed (default is
              `false`). Specify `null` to return both trashed and non-trashed
              items.
            schema:
              type: boolean
          - name: order_by
            in: query
            description: >-
              Specifies the sort order and direction for the listing, e.g.
              "`name`" or "`name+desc`"
            schema:
              type: string
          - name: top
            in: query
            description: >-
              Maximum number of items to return in the listing. Should be a value
              between `1` and `100`. Default is `25`.
            schema:
              type: integer
              format: int32
          - name: skip
            in: query
            description: >-
              The number of items to skip. Used together with `top` to return a
              specific range of items (for pagination).
            schema:
              type: integer
              format: int32
          - name: count_only
            in: query
            description: >-
              `true` to only return the *number* of matching items; when this is
              specified the response will only contain the `count` property.
            schema:
              type: boolean
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DeliveryOutPagedListOut'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
          default:
            description: Error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        x-controller: Webhooks
        x-action: ListDeliveries
        x-method: GET
        x-path: /api/webhooks/{id}/deliveries
        x-curl: "curl https://{WEAVY-SERVER}/api/webhooks/1/deliveries?top=20\r\n-H \"Authorization: Bearer {API-KEY}\""
        x-order: 514
  components:
    schemas:
      Access:
        enum:
          - none
          - read
          - write
          - admin
        type: string
        description: Access levels for users/members.
      AppAccess:
        enum:
          - none
          - read
          - write
        type: string
        description: "Access level for non-members. Defaults to `none`. \r\n* `none` = non-members cannot access the app\r\n* `read` = non-members can see the app and it's content but can cannot contribute\r\n* `write` = non-members have access to the app and are allowed to create content"
      AppIn:
        required:
          - type
          - uid
        type: object
        properties:
          uid:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              A string that uniquely identifies the app, for instance a product id
              or URL (*cannot contain whitespace and must contain at least one
              non-digit*).
          type:
            minLength: 1
            type: string
            description: Type of app (`chat`, `comments`, `files` or `posts` etc.).
          access:
            $ref: '#/components/schemas/AppAccess'
          directory:
            type: string
            description: >-
              Id or name of a user directory. Used in combination with `access` to
              control who can access the app.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Display name for the app.
            nullable: true
          description:
            maxLength: 512
            minLength: 0
            type: string
            description: App description.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional properties to associate with the app, e.g. `{ "color":
              "blue", "size": "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the app.
            nullable: true
        additionalProperties: false
        description: ''
      AppInitMemberIn:
        required:
          - uid
        type: object
        properties:
          uid:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              Unique user identifier (*cannot contain whitespace and must contain
              at least one non-digit*).
        additionalProperties: false
        description: ''
      AppInitWithUser:
        required:
          - app
        type: object
        properties:
          app:
            $ref: '#/components/schemas/AppIn'
          user:
            $ref: '#/components/schemas/AppInitMemberIn'
        additionalProperties: false
        description: Model for initializing apps.
      AppOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the app id.
            format: int32
            nullable: true
          type:
            type: string
            description: Gets the app type.
            format: uuid
            nullable: true
          uid:
            type: string
            description: Gets the unique identifier for the app in the host system.
            nullable: true
          access:
            $ref: '#/components/schemas/Access'
          directory_id:
            type: integer
            description: Gets the unique identifier for the app in the host system.
            format: int32
            nullable: true
          display_name:
            type: string
            description: Gets the display name.
            nullable: true
          name:
            type: string
            description: Gets the name.
            nullable: true
          description:
            type: string
            description: Gets the description text.
            nullable: true
          archive_url:
            type: string
            description: Url to zip-archive with files in the app.
            nullable: true
          avatar_url:
            type: string
            description: Gets a thumbnail image.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: ''
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: Date and time (UTC) when the app was created.
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: Id of the user that created the app.
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: Date and time (UTC) when the app was last updated.
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: Id of the user that last modified the app.
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          members:
            $ref: '#/components/schemas/MemberOutPagedListOut'
          permissions:
            type: array
            items:
              $ref: '#/components/schemas/Permission'
            description: Gets app permissions for the authenticated user.
            nullable: true
          is_starred:
            type: boolean
            description: ''
            nullable: true
          is_subscribed:
            type: boolean
            description: ''
            nullable: true
          is_trashed:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      AppOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/AppOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      AppUp:
        type: object
        properties:
          uid:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              A string that uniquely identifies the app, for instance a product id
              or URL (*cannot contain whitespace and must contain at least one
              non-digit*).
            nullable: true
          access:
            $ref: '#/components/schemas/AppAccess'
          directory:
            type: string
            description: >-
              Id or name of a user directory. Used in combination with `access` to
              control who can access the app.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Display name for the app.
            nullable: true
          description:
            maxLength: 512
            minLength: 0
            type: string
            description: App description.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional properties to associate with the app, e.g. `{ "color":
              "blue", "size": "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the app.
            nullable: true
        additionalProperties: false
        description: Model for updating apps.
      AppUpsert:
        required:
          - type
        type: object
        properties:
          type:
            minLength: 1
            type: string
            description: Type of app (`chat`, `comments`, `files` or `posts` etc.).
          uid:
            type: string
            nullable: true
          access:
            $ref: '#/components/schemas/AppAccess'
          directory:
            type: string
            description: >-
              Id or name of a user directory. Used in combination with `access` to
              control who can access the app.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Display name for the app.
            nullable: true
          description:
            maxLength: 512
            minLength: 0
            type: string
            description: App description.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional properties to associate with the app, e.g. `{ "color":
              "blue", "size": "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the app.
            nullable: true
        additionalProperties: false
        description: ''
      AutocompleteUserOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          uid:
            type: string
            description: ''
            nullable: true
          display_name:
            type: string
            description: ''
            nullable: true
          avatar_url:
            type: string
            description: ''
            nullable: true
          presence:
            $ref: '#/components/schemas/PresenceStatus'
          access:
            $ref: '#/components/schemas/Access'
          is_member:
            type: boolean
            description: ''
            nullable: true
          is_bot:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      AutocompleteUserOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/AutocompleteUserOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      Blob:
        required:
          - media_type
          - name
        type: object
        properties:
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: Gets or sets additional metadata.
            nullable: true
            readOnly: true
          provider:
            maxLength: 256
            minLength: 0
            type: string
            description: Gets the provider name (for external blobs).
            nullable: true
            readOnly: true
          link:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets an url for viewing the blob (for external blobs).
            nullable: true
            readOnly: true
          download:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets an url for downloading the blob (for external blobs).
            nullable: true
            readOnly: true
          embed:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets an url used for embedding the blob (for external blobs).
            nullable: true
            readOnly: true
          raw:
            type: string
            description: Gets the raw metadata from the provider (for external blobs).
            nullable: true
            readOnly: true
          id:
            type: integer
            description: Gets the blob id.
            format: int32
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Gets or sets the file name of the blob.
          media_type:
            maxLength: 128
            minLength: 0
            type: string
            description: >-
              Gets or sets the Media Type
              (https://www.iana.org/assignments/media-types/media-types.xhtml) of
              the file, e.g. "image/png".
          width:
            type: integer
            description: Gets the width, in pixels, of the blob (only for images).
            format: int32
            nullable: true
          height:
            type: integer
            description: Gets the height, in pixels, of the blob (only for images).
            format: int32
            nullable: true
          size:
            type: integer
            description: Gets the size, in bytes, of the file.
            format: int64
        additionalProperties: false
        description: A class containing metadata about a blob.
      BlobIn:
        required:
          - link
          - name
          - provider
          - size
        type: object
        properties:
          provider:
            maxLength: 256
            minLength: 0
            type: string
            description: Gets or sets the provider name.
          link:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets or sets an url for viewing the blob.
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Gets or sets the file name of the blob.
          width:
            type: integer
            description: Gets or sets the width, in pixels, of the blob (only for images).
            format: int32
            nullable: true
          height:
            type: integer
            description: Gets or sets the height, in pixels, of the blob (only for images).
            format: int32
            nullable: true
          size:
            type: integer
            description: Gets or sets the size, in bytes, of the file.
            format: int64
          media_type:
            maxLength: 128
            minLength: 0
            type: string
            description: >-
              Gets or sets the Media Type
              (https://www.iana.org/assignments/media-types/media-types.xhtml) of
              the file, e.g. "image/png".
            nullable: true
          download:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets or sets an url for downloading the blob.
            nullable: true
          embed:
            maxLength: 2048
            minLength: 0
            type: string
            description: Gets or sets an url used for embedding the blob.
            nullable: true
          raw:
            description: Gets or sets the raw metadata from the provider.
            nullable: true
        additionalProperties: false
        description: Model for creating (external) blobs.
      BlobOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          name:
            type: string
            description: ''
            nullable: true
          media_type:
            type: string
            description: ''
            nullable: true
          width:
            type: integer
            description: ''
            format: int32
            nullable: true
          height:
            type: integer
            description: ''
            format: int32
            nullable: true
          size:
            type: integer
            description: ''
            format: int64
            nullable: true
          thumbnail_url:
            type: string
            description: ''
            nullable: true
          raw:
            type: string
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      CommentIn:
        type: object
        properties:
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionIn'
            description: List of poll options to attach.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for inserting comments.
      CommentOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the id of the entity.
            format: int32
            nullable: true
          app_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          parent:
            $ref: '#/components/schemas/EntityOut'
          text:
            type: string
            description: Gets the message text.
            nullable: true
          html:
            type: string
            description: Gets the message text as html.
            nullable: true
          plain:
            type: string
            description: Gets the message text with all formatting stripped.
            nullable: true
          attachment_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/FileOut'
            description: Gets the files attached to this Weavy.Core.Models.Msg.
            nullable: true
          embed_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          embed:
            $ref: '#/components/schemas/Embed'
          meeting_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          meeting:
            $ref: '#/components/schemas/MeetingOut'
          option_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionOut'
            description: ''
            nullable: true
          reactions:
            type: array
            items:
              $ref: '#/components/schemas/ReactionOut'
            description: Gets reactions to the message.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: Gets or sets additional metadata.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: Gets or sets the date and time (UTC) the entity was created.
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          is_trashed:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      CommentOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/CommentOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      CommentUp:
        type: object
        properties:
          attachments:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of attached files.
            nullable: true
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of additional blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionUp'
            description: List of poll options for the item.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for updating comments.
      ConversationBadge:
        type: object
        properties:
          private:
            type: integer
            description: The number of unread private chats.
            format: int32
          rooms:
            type: integer
            description: The number of unread chat rooms.
            format: int32
          bots:
            type: integer
            description: The number of unread bot chats.
            format: int32
        additionalProperties: false
        description: ''
      ConversationIn:
        required:
          - members
        type: object
        properties:
          members:
            type: array
            items:
              type: string
            description: User identifiers (`id` or `uid`) of conversation members.
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: Room name.
            nullable: true
          type:
            type: string
            description: >-
              Type of conversation to create (`private_chat`, `chat_room` or
              `bot_chat`). Automatically inferred when not specified.
            nullable: true
        additionalProperties: false
        description: Input model for creating conversations.
      ConversationOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the app id.
            format: int32
            nullable: true
          type:
            type: string
            description: Gets the app type.
            format: uuid
            nullable: true
          uid:
            type: string
            description: Gets the unique identifier for the app in the host system.
            nullable: true
          access:
            $ref: '#/components/schemas/Access'
          directory_id:
            type: integer
            description: Gets the unique identifier for the app in the host system.
            format: int32
            nullable: true
          display_name:
            type: string
            description: Gets the display name.
            nullable: true
          name:
            type: string
            description: Gets the name.
            nullable: true
          description:
            type: string
            description: Gets the description text.
            nullable: true
          archive_url:
            type: string
            description: Url to zip-archive with files in the app.
            nullable: true
          avatar_url:
            type: string
            description: Gets a thumbnail image.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: ''
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: Date and time (UTC) when the app was created.
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: Id of the user that created the app.
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: Date and time (UTC) when the app was last updated.
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: Id of the user that last modified the app.
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          members:
            $ref: '#/components/schemas/MemberOutPagedListOut'
          permissions:
            type: array
            items:
              $ref: '#/components/schemas/Permission'
            description: Gets app permissions for the authenticated user.
            nullable: true
          last_message_id:
            type: integer
            description: Id of the last message in the conversation.
            format: int32
            nullable: true
          last_message:
            $ref: '#/components/schemas/MessageOut'
          is_starred:
            type: boolean
            description: ''
            nullable: true
          is_subscribed:
            type: boolean
            description: ''
            nullable: true
          is_trashed:
            type: boolean
            description: ''
            nullable: true
          is_pinned:
            type: boolean
            description: If the authenticated user has pinned this converation.
            nullable: true
          is_unread:
            type: boolean
            description: >-
              If the authenticated user has any unread messages in the
              converation.
            nullable: true
        additionalProperties: false
        description: ''
      ConversationOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ConversationOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      DeliveryOut:
        type: object
        properties:
          id:
            type: integer
            description: Unique identifier of the webhook delivery.
            format: int32
            readOnly: true
          guid:
            type: string
            description: Gets the unique delivery id.
            format: uuid
            readOnly: true
          event_id:
            type: integer
            description: >-
              Unique identifier for the event (shared with all deliveries for all
              webhooks that subscribe to this event).
            format: int32
            nullable: true
            readOnly: true
          action:
            type: string
            description: The event that triggered the delivery.
            nullable: true
            readOnly: true
          delivered_at:
            type: string
            description: Time when the webhook delivery occurred.
            format: date-time
            readOnly: true
          duration:
            type: number
            description: Time spent delivering (in seconds).
            format: double
            nullable: true
            readOnly: true
          status_code:
            type: integer
            description: Status code received when delivery was made, e.g. 200.
            format: int32
            nullable: true
            readOnly: true
          status:
            type: string
            description: The response returned after attempting the delivery, e.g. "OK".
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Delivery made by a webhook, without request and response information.
      DeliveryOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/DeliveryOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      DirectoryIn:
        required:
          - name
        type: object
        properties:
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              A unique directory name (*cannot contain whitespace and must contain
              at least one non-digit*).
        additionalProperties: false
        description: Model for creating user directory.
      DirectoryOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          name:
            type: string
            description: ''
            nullable: true
          members:
            $ref: '#/components/schemas/UserOutPagedListOut'
        additionalProperties: false
        description: ''
      DirectoryOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/DirectoryOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      DirectoryUp:
        required:
          - name
        type: object
        properties:
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              A unique directory name (*cannot contain whitespace and must contain
              at least one non-digit*).
        additionalProperties: false
        description: Model for updating user directory.
      Embed:
        required:
          - original_url
          - version
        type: object
        properties:
          id:
            type: integer
            description: Gets the embed id.
            format: int32
          description:
            type: string
            description: Gets or sets a description for the embed.
            nullable: true
          created_at:
            type: string
            description: Gets the time (UTC) the embed url was fetched.
            format: date-time
          created_by_id:
            type: integer
            description: Gets the id of the user that created the embed.
            format: int32
          host:
            type: string
            description: Gets the name of the host/domain where the embed originates.
            nullable: true
            readOnly: true
          original_url:
            minLength: 1
            type: string
            description: Gets the original url the user provided.
            readOnly: true
          is_link:
            type: boolean
            description: >-
              Gets or sets a UI hint telling the UI to render this embed as a
              link.
          image:
            $ref: '#/components/schemas/Blob'
          type:
            $ref: '#/components/schemas/EmbedType'
          version:
            minLength: 1
            type: string
            description: Gets the oembed version.
          title:
            type: string
            description: Gets the title.
            nullable: true
          author_name:
            type: string
            description: Gets the author name.
            nullable: true
          author_url:
            type: string
            description: Gets the author url.
            nullable: true
          provider_name:
            type: string
            description: Gets the provider name.
            nullable: true
          provider_url:
            type: string
            description: Gets the provider url.
            nullable: true
          cache_age:
            type: integer
            description: Gets the cache age in seconds.
            format: int32
            nullable: true
          thumbnail_url:
            type: string
            description: Gets the thumbnail url.
            nullable: true
          thumbnail_width:
            type: integer
            description: Gets the width of the thumbnail.
            format: int32
            nullable: true
          thumbnail_height:
            type: integer
            description: Gets the height of the thumbnail.
            format: int32
            nullable: true
          url:
            type: string
            description: >-
              Gets the source url of the image (when EmbedType is "photo").
              Consumers should be able to insert this URL into an <img> element.
            nullable: true
          width:
            type: integer
            description: >-
              Gets the width in pixels of the embed (when EmbedType is "photo",
              "rich" or "video").
            format: int32
            nullable: true
          height:
            type: integer
            description: >-
              Gets the height in pixels of the embed (when EmbedType is "photo",
              "rich" or "video").
            format: int32
            nullable: true
          html:
            type: string
            description: >-
              Gets the html required to display the resource (when EmbedType is
              "rich" or "video").
            nullable: true
        additionalProperties: false
        description: Represents an embedded object.
      EmbedIn:
        required:
          - url
        type: object
        properties:
          url:
            minLength: 1
            type: string
            description: The URL to retrieve embedding information for.
        additionalProperties: false
        description: ''
      EmbedOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          type:
            $ref: '#/components/schemas/EmbedType'
          title:
            type: string
            description: Gets the title describing the resource.
            nullable: true
          description:
            type: string
            description: Gets or sets a description for the resource.
            nullable: true
          author_name:
            type: string
            description: Gets the name of the author/owner of the resource.
            nullable: true
          author_url:
            type: string
            description: Gets an url for the author/owner of the resource.
            nullable: true
          provider_name:
            type: string
            description: Gets the name of the resource provider.
            nullable: true
          provider_url:
            type: string
            description: Gets the url of the resource provider.
            nullable: true
          cache_age:
            type: integer
            description: Gets the suggested cache age in seconds.
            format: int32
            nullable: true
          thumbnail_url:
            type: string
            description: Gets an url to a thumbnail image representing the resource.
            nullable: true
          thumbnail_width:
            type: integer
            description: Gets the width of the thumbnail image.
            format: int32
            nullable: true
          thumbnail_height:
            type: integer
            description: Gets the height of the thumbnail image.
            format: int32
            nullable: true
          url:
            type: string
            description: >-
              Gets the source url of the image (when type is "photo"). Consumers
              should be able to insert this URL into an <img> element.
            nullable: true
          width:
            type: integer
            description: >-
              Gets the width in pixels of the embed (when type is "photo", "rich"
              or "video").
            format: int32
            nullable: true
          height:
            type: integer
            description: >-
              Gets the height in pixels of the embed (when type is "photo", "rich"
              or "video").
            format: int32
            nullable: true
          html:
            type: string
            description: >-
              Gets the html required to display the resource (when type is "rich"
              or "video").
            nullable: true
          original_url:
            type: string
            description: Gets the original url used to treate the embed.
            nullable: true
        additionalProperties: false
        description: ''
      EmbedType:
        enum:
          - none
          - photo
          - video
          - link
          - rich
          - audio
        type: string
        description: Indicates the type of embed.
      EntityOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
          type:
            $ref: '#/components/schemas/EntityType'
        additionalProperties: false
        description: ''
      EntityOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/EntityOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      EntityType:
        enum:
          - app
          - file
          - message
          - user
          - comment
          - post
        type: string
        description: Enum for entity types.
      FileIn:
        required:
          - blob_id
        type: object
        properties:
          blob_id:
            type: integer
            description: Id of blob containing content and metadata for the file.
            format: int32
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              File name. When not specified the file will get the name of the
              underlying blob.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the file.
            nullable: true
          replace:
            type: boolean
            description: >-
              `true` to force an existing file with the same name to be
              overwritten (otherwise a `409 Conflict` response will be produced).
        additionalProperties: false
        description: Model for creating files.
      FileOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          app_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          parent:
            $ref: '#/components/schemas/EntityOut'
          version:
            type: integer
            description: ''
            format: int64
            nullable: true
          name:
            type: string
            description: ''
            nullable: true
          kind:
            type: string
            description: ''
            nullable: true
          media_type:
            type: string
            description: ''
            nullable: true
          width:
            type: integer
            description: ''
            format: int32
            nullable: true
          height:
            type: integer
            description: ''
            format: int32
            nullable: true
          size:
            type: integer
            description: ''
            format: int64
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: ''
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          provider:
            type: string
            description: ''
            nullable: true
          raw:
            type: string
            description: ''
            nullable: true
          download_url:
            type: string
            description: ''
            nullable: true
          application_url:
            type: string
            description: ''
            nullable: true
          embed_url:
            type: string
            description: ''
            nullable: true
          external_url:
            type: string
            description: ''
            nullable: true
          preview_format:
            $ref: '#/components/schemas/PreviewFormat'
          preview_url:
            type: string
            description: ''
            nullable: true
          thumbnail_url:
            type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          comment_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          comments:
            type: array
            items:
              $ref: '#/components/schemas/CommentOut'
            description: ''
            nullable: true
          is_subscribed:
            type: boolean
            description: ''
            nullable: true
          is_trashed:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      FileOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/FileOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      FileUp:
        type: object
        properties:
          blob_id:
            type: integer
            description: Id of blob containing content and metadata for the file.
            format: int32
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: The file name.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the file.
            nullable: true
          backup:
            type: boolean
            description: >-
              `true` to add previous version to version history, otherwise `false`
              (default).
        additionalProperties: false
        description: Model for updating files.
      MeetingIn:
        required:
          - provider
        type: object
        properties:
          provider:
            minLength: 1
            type: string
            description: ''
        additionalProperties: false
        description: ''
      MeetingOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          provider:
            type: string
            description: ''
            nullable: true
          provider_id:
            type: string
            description: ''
            nullable: true
          uuid:
            type: string
            description: ''
            nullable: true
          join_url:
            type: string
            description: ''
            nullable: true
          ended_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          recording_url:
            type: string
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      MemberAccess:
        enum:
          - none
          - read
          - write
        type: string
        description: "Optional access level for member. Defaults to `write` when not specified.\r\n* `none` = cannot access the app\r\n* `read` = can see the app and it's content but can cannot contribute\r\n* `write` = access to the app and is allowed to create content"
      MemberIn:
        type: object
        properties:
          id:
            type: integer
            description: User id of member.
            format: int32
            nullable: true
          uid:
            type: string
            description: User identifier of member.
            nullable: true
          access:
            $ref: '#/components/schemas/MemberAccess'
        additionalProperties: false
        description: ''
      MemberOptions:
        type: object
        properties:
          access:
            $ref: '#/components/schemas/MemberAccess'
        additionalProperties: false
        description: ''
      MemberOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          uid:
            type: string
            description: ''
            nullable: true
          access:
            $ref: '#/components/schemas/Access'
          display_name:
            type: string
            description: ''
            nullable: true
          avatar_url:
            type: string
            description: ''
            nullable: true
          delivered_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          marked_at:
            type: string
            description: Date and time (UTC) when conversation was marked as read.
            format: date-time
            nullable: true
          marked_id:
            type: integer
            description: Id of the last read message.
            format: int32
            nullable: true
          presence:
            $ref: '#/components/schemas/PresenceStatus'
          is_bot:
            type: boolean
            description: Gets or sets a value indicating whether the user is a bot.
            nullable: true
        additionalProperties: false
        description: ''
      MemberOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/MemberOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      MessageIn:
        type: object
        properties:
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionIn'
            description: List of poll options to attach.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for inserting messages.
      MessageOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the id of the entity.
            format: int32
            nullable: true
          app_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          parent:
            $ref: '#/components/schemas/EntityOut'
          text:
            type: string
            description: Gets the message text.
            nullable: true
          html:
            type: string
            description: Gets the message text as html.
            nullable: true
          plain:
            type: string
            description: Gets the message text with all formatting stripped.
            nullable: true
          attachment_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/FileOut'
            description: Gets the files attached to this Weavy.Core.Models.Msg.
            nullable: true
          embed_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          embed:
            $ref: '#/components/schemas/Embed'
          meeting_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          meeting:
            $ref: '#/components/schemas/MeetingOut'
          option_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionOut'
            description: ''
            nullable: true
          reactions:
            type: array
            items:
              $ref: '#/components/schemas/ReactionOut'
            description: Gets reactions to the message.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: Gets or sets additional metadata.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: Gets or sets the date and time (UTC) the entity was created.
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          is_trashed:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      MessageOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/MessageOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      MessageUp:
        type: object
        properties:
          attachments:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of attached files.
            nullable: true
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of additional blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionUp'
            description: List of poll options for the item.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for updating messages.
      NotificationOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the id of the notification.
            format: int32
            readOnly: true
          action:
            type: string
            description: The type of action that triggered the notification.
            nullable: true
          actor_id:
            type: integer
            description: >-
              Id of the user that performed the action that triggered the
              notification.
            format: int32
            nullable: true
          actor:
            $ref: '#/components/schemas/UserOut'
          template:
            type: string
            description: Gets or sets the notification template string.
            nullable: true
          args:
            type: array
            items:
              type: string
            description: >-
              Gets or sets the arguments used to format
              Weavy.Core.DTO.NotificationOut.Template into a (localized) string.
            nullable: true
          text:
            type: string
            description: Gets the formatted (and localized) notification text.
            nullable: true
          html:
            type: string
            description: Gets the notification text as html.
            nullable: true
          plain:
            type: string
            description: Gets the notification text as plain text.
            nullable: true
          link:
            $ref: '#/components/schemas/EntityOut'
          url:
            type: string
            description: Gets or sets an url to open when clicking on the notification.
            nullable: true
          user_id:
            type: integer
            description: Id of the notification receiver.
            format: int32
            nullable: true
          user:
            $ref: '#/components/schemas/UserOut'
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: ''
            nullable: true
          created_at:
            type: string
            description: Gets or sets the time (UTC) the notification was created.
            format: date-time
          is_unread:
            type: boolean
            description: If the notification is unread or not.
            nullable: true
        additionalProperties: false
        description: An object representing a notification.
      NotificationOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/NotificationOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      Permission:
        enum:
          - none
          - create
          - read
          - update
          - delete
          - list
          - admin
          - manage
        type: string
        description: Indicates the permissions a user can have on an entity.
      PollOptionIn:
        required:
          - text
        type: object
        properties:
          text:
            minLength: 1
            type: string
            description: The option text.
        additionalProperties: false
        description: Model for adding poll options.
      PollOptionOut:
        type: object
        properties:
          id:
            type: integer
            description: Gets the option id.
            format: int32
            readOnly: true
          text:
            type: string
            description: Gets or sets the option text.
            nullable: true
            readOnly: true
          vote_count:
            type: integer
            description: Gets the number of users that voted for this option.
            format: int32
            nullable: true
            readOnly: true
          has_voted:
            type: boolean
            description: If the authenticated user has voted on this option.
            nullable: true
            readOnly: true
          voters:
            type: array
            items:
              $ref: '#/components/schemas/UserOut'
            description: Gets the voters, i.e. the people that voted for this option.
            nullable: true
            readOnly: true
        additionalProperties: false
        description: An individual option in a poll.
      PollOptionUp:
        required:
          - text
        type: object
        properties:
          id:
            type: integer
            description: The option id.
            format: int32
            nullable: true
          text:
            minLength: 1
            type: string
            description: The option text.
        additionalProperties: false
        description: Model for updating poll options.
      PostIn:
        type: object
        properties:
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionIn'
            description: List of poll options to attach.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for inserting posts.
      PostOut:
        type: object
        properties:
          comment_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          comments:
            type: array
            items:
              $ref: '#/components/schemas/CommentOut'
            description: Gets the comments for the message.
            nullable: true
          is_subscribed:
            type: boolean
            description: ''
            nullable: true
          id:
            type: integer
            description: Gets the id of the entity.
            format: int32
            nullable: true
          app_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          parent:
            $ref: '#/components/schemas/EntityOut'
          text:
            type: string
            description: Gets the message text.
            nullable: true
          html:
            type: string
            description: Gets the message text as html.
            nullable: true
          plain:
            type: string
            description: Gets the message text with all formatting stripped.
            nullable: true
          attachment_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/FileOut'
            description: Gets the files attached to this Weavy.Core.Models.Msg.
            nullable: true
          embed_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          embed:
            $ref: '#/components/schemas/Embed'
          meeting_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          meeting:
            $ref: '#/components/schemas/MeetingOut'
          option_count:
            type: integer
            description: ''
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionOut'
            description: ''
            nullable: true
          reactions:
            type: array
            items:
              $ref: '#/components/schemas/ReactionOut'
            description: Gets reactions to the message.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: Gets or sets additional metadata.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          created_at:
            type: string
            description: Gets or sets the date and time (UTC) the entity was created.
            format: date-time
            nullable: true
          created_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          modified_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          modified_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          modified_by:
            $ref: '#/components/schemas/UserOut'
          is_trashed:
            type: boolean
            description: ''
            nullable: true
        additionalProperties: false
        description: ''
      PostOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/PostOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      PostUp:
        type: object
        properties:
          attachments:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of attached files.
            nullable: true
          blobs:
            type: array
            items:
              type: integer
              format: int32
            description: Ids of additional blobs to attach.
            nullable: true
          embed_id:
            type: integer
            description: Id of embed to attach.
            format: int32
            nullable: true
          meeting_id:
            type: integer
            description: Id of meeting to attach.
            format: int32
            nullable: true
          options:
            type: array
            items:
              $ref: '#/components/schemas/PollOptionUp'
            description: List of poll options for the item.
            nullable: true
          text:
            type: string
            description: The message text.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the item.
            nullable: true
        additionalProperties: false
        description: Model for updating posts.
      PresenceStatus:
        enum:
          - away
          - active
        type: string
        description: "Enum type for user presence. \r\nA user can have one of two possible presence values, active or away. \r\nA user is active if they have at least one active client connected, and they are not manually marked as \"away\"."
      PreviewFormat:
        enum:
          - none
          - audio
          - code
          - embed
          - html
          - image
          - pdf
          - text
          - video
        type: string
        description: ''
      ProblemDetails:
        type: object
        properties:
          type:
            type: string
            nullable: true
          title:
            type: string
            nullable: true
          status:
            type: integer
            format: int32
            nullable: true
          detail:
            type: string
            nullable: true
          instance:
            type: string
            nullable: true
          extensions:
            type: object
            additionalProperties: {}
            nullable: true
        additionalProperties: false
      ReactionIn:
        required:
          - content
        type: object
        properties:
          content:
            minLength: 1
            type: string
            description: >-
              A single emoji character describing the reaction, e.g. '`👍`' or
              '`❤️`'.
        additionalProperties: false
        description: ''
      ReactionOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
            readOnly: true
          parent:
            $ref: '#/components/schemas/EntityOut'
          content:
            type: string
            description: ''
            nullable: true
            readOnly: true
          created_at:
            type: string
            description: ''
            format: date-time
            nullable: true
            readOnly: true
          created_by_id:
            type: integer
            description: ''
            format: int32
            nullable: true
            readOnly: true
          created_by:
            $ref: '#/components/schemas/UserOut'
          count:
            type: integer
            description: ''
            format: int32
            nullable: true
            readOnly: true
        additionalProperties: false
        description: ''
      ReactionOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/ReactionOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      TokenIn:
        type: object
        properties:
          expires_in:
            type: integer
            description: >-
              The lifetime of the access token in seconds, defaults to 3600
              seconds (1 hour) when not specified.
            format: int32
            nullable: true
        additionalProperties: false
        description: ''
      TokenOut:
        type: object
        properties:
          access_token:
            type: string
            description: ''
            nullable: true
          expires_in:
            type: integer
            description: ''
            format: int32
            nullable: true
        additionalProperties: false
        description: ''
      UserIn:
        required:
          - uid
        type: object
        properties:
          uid:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              A unique user identifier (*cannot contain whitespace and must
              contain at least one non-digit*).
          email:
            maxLength: 256
            minLength: 0
            type: string
            description: Email address.
            format: email
            nullable: true
          given_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Given/First name(s) of user. In some cultures, people can have
              multiple given names; all can be present, with the names being
              separated by space characters.
            nullable: true
          middle_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Middle name(s) of the user. In some cultures, people can have
              multiple middle names; all can be present, with the names being
              separated by space characters.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              The full name in displayable form including all name parts, possibly
              including titles and suffixes.
            nullable: true
          family_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Family/Last name(s) of user. In some cultures, people can have
              multiple family names or no family name; all can be present, with
              the names being separated by space characters.
            nullable: true
          nickname:
            maxLength: 32
            minLength: 0
            type: string
            description: >-
              The nickname, a casual name that may or may not be the same as the
              Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
              name "Michael" might have the nickname "Mike".
            nullable: true
          phone_number:
            maxLength: 32
            minLength: 0
            type: string
            description: The user's preferred phone number.
            nullable: true
          comment:
            type: string
            description: Comment or other application-specific information about the user.
            nullable: true
          picture:
            type: string
            description: >-
              The user's profile picture. Can be a public URL, a base64 encoded
              data URI or a blob id.
            nullable: true
          directory:
            type: string
            description: Id or name of user directory.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the user.
            nullable: true
          is_suspended:
            type: boolean
            description: '`true` to mark the user account as suspended, otherwise `false`.'
          is_bot:
            type: boolean
            description: '`true` to indicate that the user is a bot, otherwise `false`.'
        additionalProperties: false
        description: User insert model.
      UserOut:
        type: object
        properties:
          id:
            type: integer
            description: ''
            format: int32
            nullable: true
          uid:
            type: string
            description: ''
            nullable: true
          display_name:
            type: string
            description: ''
            nullable: true
          email:
            type: string
            description: ''
            nullable: true
          given_name:
            type: string
            description: ''
            nullable: true
          middle_name:
            type: string
            description: ''
            nullable: true
          name:
            type: string
            description: ''
            nullable: true
          family_name:
            type: string
            description: ''
            nullable: true
          nickname:
            type: string
            description: ''
            nullable: true
          phone_number:
            type: string
            description: ''
            nullable: true
          comment:
            type: string
            description: ''
            nullable: true
          directory:
            $ref: '#/components/schemas/DirectoryOut'
          directory_id:
            type: integer
            description: ''
            format: int32
            nullable: true
          picture:
            $ref: '#/components/schemas/BlobOut'
          picture_id:
            type: integer
            description: Gets the (blob) id of the profile picture.
            format: int32
            nullable: true
          avatar_url:
            type: string
            description: Gets or sets the avatar url of the user
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: ''
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: ''
            nullable: true
          presence:
            $ref: '#/components/schemas/PresenceStatus'
          created_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          modified_at:
            type: string
            description: ''
            format: date-time
            nullable: true
          is_bot:
            type: boolean
            description: Gets or sets a value indicating whether the user is a bot.
            nullable: true
          is_suspended:
            type: boolean
            description: >-
              Gets or sets a value indicating whether the user account is
              suspended.
            nullable: true
          is_trashed:
            type: boolean
            description: Gets or sets a value indicating whether the user account is trashed.
            nullable: true
        additionalProperties: false
        description: ''
      UserOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/UserOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      UserUp:
        type: object
        properties:
          uid:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              Unique user identifier (*cannot contain whitespace and must contain
              at least one non-digit*).
            nullable: true
          email:
            maxLength: 256
            minLength: 0
            type: string
            description: Email address.
            format: email
            nullable: true
          given_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Given/First name(s) of user. In some cultures, people can have
              multiple given names; all can be present, with the names being
              separated by space characters.
            nullable: true
          middle_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Middle name(s) of the user. In some cultures, people can have
              multiple middle names; all can be present, with the names being
              separated by space characters.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              The full name in displayable form including all name parts, possibly
              including titles and suffixes.
            nullable: true
          family_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Family/Last name(s) of user. In some cultures, people can have
              multiple family names or no family name; all can be present, with
              the names being separated by space characters.
            nullable: true
          nickname:
            maxLength: 32
            minLength: 0
            type: string
            description: >-
              The nickname, a casual name that may or may not be the same as the
              Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
              name "Michael" might have the nickname "Mike".
            nullable: true
          phone_number:
            maxLength: 32
            minLength: 0
            type: string
            description: The user's preferred phone number.
            nullable: true
          comment:
            type: string
            description: Comment or other application-specific information about the user.
            nullable: true
          picture:
            type: string
            description: >-
              The user's profile picture. Can be a public URL, a base64 encoded
              data URI or a blob id.
            nullable: true
          directory:
            type: string
            description: Id or name of user directory.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the user.
            nullable: true
          is_suspended:
            type: boolean
            description: '`true` to mark the user account as suspended, otherwise `false`.'
          is_bot:
            type: boolean
            description: '`true` to indicate that the user is a bot, otherwise `false`.'
        additionalProperties: false
        description: Base model used when inserting/updating users.
      UserUpsert:
        type: object
        properties:
          uid:
            type: string
            description: >-
              Unique user identifier (*cannot contain whitespace and must contain
              at least one non-digit*).
            nullable: true
          email:
            maxLength: 256
            minLength: 0
            type: string
            description: Email address.
            format: email
            nullable: true
          given_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Given/First name(s) of user. In some cultures, people can have
              multiple given names; all can be present, with the names being
              separated by space characters.
            nullable: true
          middle_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Middle name(s) of the user. In some cultures, people can have
              multiple middle names; all can be present, with the names being
              separated by space characters.
            nullable: true
          name:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              The full name in displayable form including all name parts, possibly
              including titles and suffixes.
            nullable: true
          family_name:
            maxLength: 64
            minLength: 0
            type: string
            description: >-
              Family/Last name(s) of user. In some cultures, people can have
              multiple family names or no family name; all can be present, with
              the names being separated by space characters.
            nullable: true
          nickname:
            maxLength: 32
            minLength: 0
            type: string
            description: >-
              The nickname, a casual name that may or may not be the same as the
              Weavy.Core.DTO.UserUp.GivenName. For instance, a person with given
              name "Michael" might have the nickname "Mike".
            nullable: true
          phone_number:
            maxLength: 32
            minLength: 0
            type: string
            description: The user's preferred phone number.
            nullable: true
          comment:
            type: string
            description: Comment or other application-specific information about the user.
            nullable: true
          picture:
            type: string
            description: >-
              The user's profile picture. Can be a public URL, a base64 encoded
              data URI or a blob id.
            nullable: true
          directory:
            type: string
            description: Id or name of user directory.
            nullable: true
          metadata:
            type: object
            additionalProperties:
              type: string
              nullable: true
            description: >-
              Additional metadata properties, e.g. `{ "color": "blue", "size":
              "XL" }`.
            nullable: true
          tags:
            type: array
            items:
              type: string
            description: A list of tags to associate with the user.
            nullable: true
          is_suspended:
            type: boolean
            description: '`true` to mark the user account as suspended, otherwise `false`.'
          is_bot:
            type: boolean
            description: '`true` to indicate that the user is a bot, otherwise `false`.'
        additionalProperties: false
        description: ''
      WebhookIn:
        required:
          - payload_url
          - triggers
        type: object
        properties:
          payload_url:
            maxLength: 2048
            minLength: 0
            type: string
            description: The URL to which the payloads will be delivered.
            format: uri
          secret:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              If provided, the secret will be used as the key to generate the HMAC
              hex digest value for delivery signature headers.
            nullable: true
          triggers:
            uniqueItems: true
            type: array
            items:
              type: string
            description: A list of event groups that will trigger this webhook.
          enabled:
            type: boolean
            description: >-
              Gets or sets a value indicating wheter the webhook is enabled (if
              notifications are sent when the webhook is triggered).
        additionalProperties: false
        description: ''
      WebhookOut:
        type: object
        properties:
          id:
            type: integer
            description: The unique identifier of the hook.
            format: int32
            readOnly: true
          payload_url:
            type: string
            description: The URL to which the payloads will be delivered.
            nullable: true
            readOnly: true
          triggers:
            type: array
            items:
              type: string
            description: The list of events that will trigger this Weavy.Core.Models.Webhook.
            nullable: true
            readOnly: true
          is_enabled:
            type: boolean
            description: >-
              Gets or sets a value indicating wheter the webhook is enabled (if
              notifications are sent when the webhook is triggered).
            readOnly: true
        additionalProperties: false
        description: ''
      WebhookOutPagedListOut:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/WebhookOut'
            description: Gets the items on the current page.
            nullable: true
          start:
            type: integer
            description: >-
              Gets the number of the first item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          end:
            type: integer
            description: >-
              Gets the number of the last item on this page (if the data is
              paged).
            format: int32
            nullable: true
            readOnly: true
          count:
            type: integer
            description: Gets the total number of items in the result.
            format: int64
            nullable: true
            readOnly: true
        additionalProperties: false
        description: Represents a collection of objects that can be paged.
      WebhookUp:
        required:
          - payload_url
          - triggers
        type: object
        properties:
          payload_url:
            maxLength: 2048
            minLength: 0
            type: string
            description: The URL to which the payloads will be delivered.
            format: uri
          secret:
            maxLength: 256
            minLength: 0
            type: string
            description: >-
              If provided, the secret will be used as the key to generate the HMAC
              hex digest value for delivery signature headers.
            nullable: true
          triggers:
            type: array
            items:
              type: string
            description: A list of event groups that will trigger this webhook.
          is_enabled:
            type: boolean
            description: >-
              Indicates if the webhook is enabled (if notifications are sent when
              the webhook is triggered).
        additionalProperties: false
        description: ''
  tags:
    - name: Apps
      description: The Apps API has methods for creating, and managing apps.
    - name: Blobs
      description: >-
        The Blobs API enables the uploading of blobs. Blobs are used as references
        when creating files and attachments.
    - name: Comments
      description: The Comments API supports managing comments.
    - name: Conversations
      description: "The Conversations API has methods for creating, and managing conversations.\r\nA conversation is a non-contextual chat app, and is mainly used by the Messenger building block."
    - name: Directories
      description: The Directories API has endpoints for managing user directories.
    - name: Embeds
      description: >-
        The Embeds API converts URLs into embedded videos, images and rich article
        previews.
    - name: Files
      description: The Files API has methods for managing files.
    - name: Meetings
      description: >-
        The Meetings API enabled you to create meetings (which can later be
        attached to messages).
    - name: Messages
      description: The Messages API supports managing chat messages.
    - name: Notifications
      description: The Notifications API has methods for managing notifications.
    - name: Options
      description: The Options API supports managing poll options.
    - name: Posts
      description: The Posts API supports managing posts.
    - name: Reactions
      description: The Reactions API enables you to create, list and delete reactions.
    - name: Stars
      description: The Stars API enables bookmarking things for reference and/or follow-up.
    - name: Users
      description: The Users API has methods for managing users.
    - name: Webhooks
      description: "The Webhooks API enable you to register and manage webhooks.\r\nYou can also use the API to list webhook deliveries for a webhook."
  servers:
    - url: https://{WEAVY-SERVER}
konfigCliVersion: 1.38.61
