publishJson:
  company: Cornerstone OnDemand
  serviceName: TalentLink
  sdkName: cornerstone-on-demand-{language}-sdk
  clientName: CornerstoneOnDemand
  metaDescription: >-
    Cornerstone OnDemand provides comprehensive talent management solutions to
    help organizations recruit, develop, and retain top talent. Their
    cloud-based platform offers tools for learning, performance, and HR
    management, empowering businesses to drive employee engagement and success.
  apiStatusUrls: false
  homepage: www.cornerstoneondemand.com
  developerDocumentation: >-
    developer.lumesse-talenthub.com/rest-api-developers-guide/1.21.33/index.html?page=rest-api&subpage=developer-reference
  categories:
    - hr
    - talent_management
rawSpecString: |
  openapi: 3.0.0
  info:
    description: >-
      This is a live documentation of Talentlink RESTful services.


      You will find detailed descriptions on how to use the TalentLink Exchange
      API to build your integrations in Developers Guide.


      To use this documentation and call first go to green <span
      class="bold-span">"Authorize"</span> button and provide your credentials.
      Once you do this you will be able to call the API directly from this page.
      However, if you only wish to check the syntax or list the filters then
      credentials are not mandatory.


      To write a query, go to any method, expand it and press <span
      class="bold-span">"Try it out"</span> button. It will display the method
      details window where in case of GET methods you will be able to write the
      query and check the filters.


      You will also notice some of the methods have more specific details in their
      descriptions.


      <span class="bold-span">QuickTip:</span> when writing the GraphQL query you
      can use CTRL + SPACE to see suggestions of the available schemas/tags.
    version: 23.5-SNAPSHOT
    title: Talentlink REST API Documentation
  tags:
    - name: Advertisements API
      description: >-
        - allows fetching Adverts which are not yet published for a given job and
        to generate Preview Tokens.
    - name: Application API
      description: '- allows fetching applications of candidates.'
    - name: Assessment Provider API
      description: >-
        - Provides methods for Assessment Providers & Background checking. Queues
        API are also required.
    - name: Campaign API
      description: '- provides methods for developers to manage campaigns'
    - name: Candidate API
      description: '- set of methods for advanced candidate management'
    - name: Candidate Pools
      description: '- allows managing, creating, editing and assignment of Candidate Pools'
    - name: Contract API
      description: >-
        - allows complete management of the contracts for temporary and permanent
        employees. This includes setting the rates, timesheets, mid period
        changes, cost centres and Timesheet approvers
    - name: Department API
      description: >-
        - allows managing the organization chart from another external system.
        Administrators can create unlimited levels of organization, edit their
        properties, move, deactivate and delete them if required.
    - name: Internal Message API
      description: '- allows managing TalentLink internal messages and notifications.'
    - name: Interview Location API
      description: '- provides methods for developers to manage interview locations.'
    - name: LOV API
      description: '- Allows to fetch details of all types of LOVs'
    - name: LOV API - Configurable LOV
      description: '- Provides methods to manage Configurable Field (LOV) values'
    - name: LOV API - Free Form Field LOV
      description: '- Provides methods to manage Free Form Field LOV values'
    - name: LOV API - Standard Fields
      description: '- Provides methods to manage values of Standard LOVs'
    - name: LOV API - User data
      description: '- Provides methods to manage values of User Data LOVs'
    - name: Location API
      description: '- provides methods for developers to manage job locations.'
    - name: Password Rule API
      description: '- provides method to read password rules.'
    - name: Personal job template API
      description: '- provides methods to manage personal job templates.'
    - name: Position API
      description: '- methods to manage Positions'
    - name: Published Advert API
      description: >-
        - provides methods to build career websites based on adverts posted from
        Talentlink.
    - name: Queues API
      description: >-
        - Global operations on queues: deleting elements from queue, list of all
        queues, import & export of queues etc. 
    - name: Queues API - Application
      description: '- Allows to fetch Application details from queue'
    - name: Queues API - Archived Candidate
      description: '- Methods to fetch data of archived candidates from queue'
    - name: Queues API - Candidates
      description: '- Allows to fetch Candidate  details from queue'
    - name: Queues API - Contract
      description: '- Allows to fetch Contract details from queue'
    - name: Queues API - External System Request
      description: >-
        - Allows to fetch External Assessment Providers Requests details from
        queue
    - name: Queues API - Position (Requisitions)
      description: '- Allows to fetch Position / Requisition details from queue'
    - name: Queues API - Posting (Adverts)
      description: '- Allows to fetch Advert details from queue'
    - name: Queues API - Selection Step
      description: '- Allows to fetch details of Selection Steps from the queue'
    - name: Queues API - Timesheets
      description: '- Allows to fetch details of candidates Timesheets from the queue'
    - name: Queues API - Users
      description: '- allows to fetch details of Users from the queue'
    - name: Role API
      description: '- allows to get Talentlink roles. '
    - name: Search Agent API
      description: '- provides methods for developers to manage search agent.'
    - name: Selection Process API
      description: >-
        - Provides method that allow to perform basic operations on selection
        steps for a given candidate
    - name: Timesheet API
      description: >-
        - Provides methods to manage Timesheets for a given candidate (submit,
        approve, reject, retrieve details)
    - name: User API
      description: '- provides methods to manage Talentlink users.'
  paths:
    /advertisement/generate-token:
      post:
        tags:
          - Advertisements API
        summary: >-
          Allows to generate token to preview the advert which is not yet
          published
        description: >-
          <p>This method allows to generate a token which then can be used to
          preview the advert (https://developer.lumesse-talenthub.com) which is
          not yet published.</p>
        operationId: generateToken
        responses:
          '200':
            description: Token generated
            content:
              application/json:
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /advertisement/postings/{jobNumber}:
      get:
        tags:
          - Advertisements API
        summary: Allows to fetch details of adverts created for a given requisition
        description: <p>Returns the list of created adverts for a requisition</p>
        operationId: getPostings
        parameters:
          - name: jobNumber
            in: path
            description: jobNumber
            required: true
            schema:
              type: string
        responses:
          '200':
            description: List of postings
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /agency:
      get:
        tags:
          - Contract API
        summary: List of agencies
        description: Returns a list of agencies. DTO structure depends on a GraphQL query.
        operationId: retrieveAgencies
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { agencies(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {agencyId_gt: 0}) { agencyId } }
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DepartmentGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /application:
      get:
        tags:
          - Application API
        summary: List of applications
        description: >-
          Returns a list of applications. DTO structure depends on a GraphQL
          query.
        operationId: getApplications
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { applications(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApplicationGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /application/available-statuses:
      get:
        tags:
          - Application API
        summary: retrieves application statuses
        description: >-
          This method allows to retrieve all application statuses for a given
          language. Method returns a list from operation.
        operationId: getApplicationsStatus
        parameters:
          - name: langCode
            in: query
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: Application statuses retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AvailableApplicationStatusesDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to retrieve application statuses
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /application/status:
      put:
        tags:
          - Application API
        summary: Updates application status
        description: >-
          This method allows to update application status for a given application
          ID. It works in the same way as manual change of appliciation status in
          Talentlink BO. Method returns a report from operation.
        operationId: updateApplicationsStatus
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsStatusDto'
          description: statuses
          required: true
        responses:
          '200':
            description: Application status update processed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApplicationsStatusReportDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to change application status
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /application/{applicationId}/update-application-context:
      get:
        tags:
          - Application API
        summary: >-
          Generates JWT token to be used in Apply API for updating an existing
          general application in TLK
        description: >-
          This method allows to update an existing general application record
          (referenced by Application ID) instead of creating a new record or
          relying on a merge rules configured in TalentLink. JWT token returned by
          this endpoint should be used while calling Apply API. Please refer to
          Apply API documentation (Submissions endpoint) for further details.
        operationId: generateUpdateApplicationContextToken
        parameters:
          - name: applicationId
            in: path
            description: Application ID
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Application update possible for given Application ID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApplicationsStatusReportDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /assessment-provider/results-template/{systemName}:
      get:
        tags:
          - Assessment Provider API
        summary: Method returns the structure of a form to be used for uploading results
        description: >-
          <p>In the configuration of the External System Provider there is a
          dedicated form assigned.That form is used to upload the results and in
          some cases scoring. This method returns the structure of the configured
          form.System Name is to be provided (which is the name which is setup in
          the External System configuration).This structure can then be used in
          <b>submitResults</b> method.</p>
        operationId: getResultsTemplate
        parameters:
          - name: systemName
            in: path
            description: systemName
            required: true
            schema:
              type: string
          - name: showLocalizedValue
            in: query
            description: showLocalizedValue
            required: false
            schema:
              type: boolean
          - name: localizedValueLangCode
            in: query
            description: localizedValueLangCode
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: Results template structure successfully fetched
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StructuredDocumentDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /assessment-provider/submit-report:
      post:
        tags:
          - Assessment Provider API
        summary: >-
          Allows an assessment provider to submit a physical file containing a
          report of the candidate's assessment.
        description: >-
          <p>Method allows an assessment provider to submit a physical file
          containing a report of the candidate's assessment. Such file usually
          contains more descriptive information about the results. Uploaded file
          is visible in TalentLink and is linked to Selection Step which was used
          to trigger the assessment. <b>RequestID</b> contains the unique
          correlation ID which is generated by TalentLink (it is visible in the
          Queue and also on the Selection Step</p>
        operationId: submitReport
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitReportRequest'
          description: submitReportRequest
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OperationResultDto'
          '201':
            description: Report submitted
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /assessment-provider/submit-resource:
      post:
        tags:
          - Assessment Provider API
        summary: Allows to pass the assessment URL to TalentLink
        description: >-
          <p>The Assessment Provider API needs to be used with Queues
          API.</p></br><p><b>Work Flow</b></p><p>A typical work flow would
          be:</p><ul><li><p>A recruiter starts the candidate's selection step
          which is linked to an assessment.</p></li><li><p>The request is added to
          a Queue which usually is monitored by the assessment provider.
          Optionally queues are also able to send out notifications to the
          specified endpoint.</p></li><li><p>The assessment provider calls the
          Queue web service to retrieve details of the request (especially the
          <b>RequestID</b> which identifies the selection step which was
          used).</p></li><li><p>Provider registers candidate.</p></li><li><p>The
          assessment provider calls the Queue web service to remove the request
          from the queue.</p></li><li><p>Provider calls <b>submitResource</b>
          method to pass the URL for the candidate to take the
          assessment.</p></li><li><p>Once the URL is provided an email containing
          the URL is sent to the candidate by TalentLink.</p></li><li><p>Candidate
          takes assessment.</p></li><li><p>Provider sends results back either as a
          report (<b>submitReport</b>)or as a TalentLink defined form
          (<b>submitResults</b>).</p></li><li><p>Provider use <b>submitStatus</b>
          method  to send 'Completed' value as status.  This action closes the
          selection step and automatically proceeds or reject Candidate to next
          selection step based on auto-scoring rules set-up within the dedicated
          form in TalentLink.</p></li></ul>
        operationId: submitResource
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitResourceRequest'
          description: submitResourceRequest
          required: true
        responses:
          '200':
            description: Resource submitted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OperationResultDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /assessment-provider/submit-results:
      post:
        tags:
          - Assessment Provider API
        summary: >-
          Allows an assessment provider to submit a structured document (form)
          containing results.
        description: >-
          <p>After using <b>getResultsTemplate</b> method and fetching the
          structure of the form configured in the External System settings the
          obtained structure should be used to upload the results and scoring.</p>
        operationId: submitResults
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitResultsRequest'
          description: submitResultsRequest
          required: true
        responses:
          '200':
            description: Result submitted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OperationResultDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /assessment-provider/submit-status:
      post:
        tags:
          - Assessment Provider API
        summary: >-
          Allows an assessment provider to update the status of a candidate's
          assessment & selection step.
        description: >-
          This method allows to send the status of the assessment and close the
          selection step, which allows for the next steps to be started (or
          candidate to be rejected) based on the scoring.
        operationId: submitStatus
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitStatusRequest'
          description: submitStatusRequest
          required: true
        responses:
          '200':
            description: Status submitted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OperationResultDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /campaign/type:
      put:
        tags:
          - Campaign API
        summary: Assign campaign types to candidates
        description: ''
        operationId: assignCampaignTypesToCandidates
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignTypeAssignmentDto'
          description: campaign type assignment data
          required: true
        responses:
          '200':
            description: Campaign types successfully assigned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate:
      get:
        tags:
          - Candidate API
        summary: List of candidates
        description: Returns a list of candidates. DTO structure depends on a GraphQL query.
        operationId: getCandidates
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { candidates(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CandidateGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Candidate API
        summary: Creates Candidate
        description: >-
          <p>This method allows to create candidates in Talentlink. Please note it
          creates a basic candidate record based on a set of standard
          fields.</p><p>Before creating the candidate: If you wish to know the
          structure of the fields in Candidate Summary for a given department (and
          also indication of required fields) please call below method:</br> GET
          candidate/summary/{templateType} - where a template type needs to be
          provided on entry and the response contains the fields structure for a
          given template and candidate type (i.e. internal, external, temporary,
          contractor).</p><p>Please note that candidate in Talentlink must have a
          context (Position or Candidate Pool).Therefore when creating the
          candidate one of the below parameters must be used:</br>"openingId" - ID
          of the position (job/requisition).

          </br>"poolId" - ID of the candidate Pool.

          </p><p>NOTE: One of them must be used  (both parameters can also be
          used).</p><p>If you wish to add LOVS, FFF or any custom fields after you
          create the basic record then you need to run below method:</br>PUT:
          /candidate/{candidateId}/summary - Update Candidate
          Summary</p></br><p>List of possible consent statuses:</p><ul> 
          <li><b>GRANTED</b></li>   <li><b>REVOKED_BY_USER</b></li>   
          <li><b>NOT_REQUESTED</b></li>  </ul>
        operationId: createCandidate
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicCandidateDto'
          description: new candidate data
          required: true
        responses:
          '201':
            description: Candidate successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/application/score:
      put:
        tags:
          - Candidate API
        summary: Update Candidate Application Score
        description: ''
        operationId: updateScore
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApplicationScoreDto'
          description: new candidate sumary data
          required: true
        responses:
          '204':
            description: Candidate application score successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/archive/mark:
      patch:
        tags:
          - Candidate API
        summary: Mark candidates for archiving
        description: ''
        operationId: markCandidatesForArchiving
        requestBody:
          $ref: '#/components/requestBodies/CandidateListDto'
        responses:
          '200':
            description: >-
              Eligible candidates were marked for archiving. There is returned
              structure with list of all input candidates and their archiving
              statuses. If a candidate cannot be marked for archiving then this
              information is returned in a response structure.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ArchivingSummariesDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/archive/unmark:
      patch:
        tags:
          - Candidate API
        summary: Unmark candidates from archiving
        description: ''
        operationId: unmarkCandidatesFromArchiving
        requestBody:
          $ref: '#/components/requestBodies/CandidateListDto'
        responses:
          '200':
            description: >-
              Eligible candidates were unmarked from archiving. There is returned
              structure with list of all input candidates and their archiving
              statuses. If a candidate cannot be unmarked from archiving then this
              information is returned in a response structure.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ArchivingSummariesDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/attachment/{documentId}:
      get:
        tags:
          - Candidate API
        summary: Download candidate attachment file
        description: >-
          <p>This method allows to fetch all documents that were uploaded
          manually, as attachments linked to specific candidate.</br>Such
          documents can include Resumes, Cover Letters, Emails etc. Usually they
          are uploaded after the candidate is created via API or manually in
          Talentlink by the user.</p><p>List of all types of attachment
          types:<ul><li>RESUME,</li><li>COVER_LETTER,</li><li>MAIL,</li><li>OFFER_LETTER,</li><li>OTHER.</li></ul></p><p>NOTE:
          This method returns ONLY attachments.</br> For the list of structured
          documents that are part of Application or Selection processes please
          call GET/candidate/documents/{documentId} endpoint.</p>
        operationId: getCandidateAttachment
        parameters:
          - name: documentId
            in: path
            description: Id of attachment document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this document
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/consent:
      get:
        tags:
          - Candidate API
        summary: List of consents
        description: Returns a list of consents. DTO structure depends on a GraphQL query.
        operationId: getConsents
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { consents (first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
        responses:
          '200':
            description: Candidate consent successfully returned
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConsentGraphQlWrapperDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to candidate consent
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/document/{documentId}:
      get:
        tags:
          - Candidate API
        summary: Download candidate document
        description: >-
          <p>This method allows to fetch all structured documents of the
          candidate. </br>Structured documents are pre defined in Talentlink as
          templates and are usually used & created as part of theapplication
          process (typically Questionnaires, PIF etc.) or as part of Selection
          process (Feedback Forms etc.).</br>List of all types of the documents
          that can appear in the response can be found
          POSSIBLE_DOCUMENT_TYPE_VALUES_PLACEHOLDER.</p><p>NOTE: This method
          returns ONLY structured documents.</br>For the list of documents
          uploaded by the user during creation of the candidate manually (CREATE
          method)please call GET/candidate/attachment/{documentId} endpoint.</p>
        operationId: getDocument
        parameters:
          - name: documentId
            in: path
            description: Id of attachment document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this document
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/email-document/attachment/{attachmentId}:
      get:
        tags:
          - Candidate API
        summary: Fetch complete email documents (base64)
        description: >-
          Each email is saved as a document in Talentlink. The global method GET
          allows to fetch it as attachment. However it is not returning all of the
          information strictly related to email (like subject, sender etc.) as it
          only returns the email body.

          This particular method allows to fetch complete email documents with all
          the additional, email related information.
        operationId: getEmailDocumentAttachmentData
        parameters:
          - name: attachmentId
            in: path
            description: Id of attachment
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Attachment found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this attachment
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/email-document/{documentId}:
      get:
        tags:
          - Candidate API
        summary: Get details about candidate email document for provided ID
        description: ''
        operationId: getEmailDocument
        parameters:
          - name: documentId
            in: path
            description: Id of email document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this document
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/form-document/{documentId}:
      get:
        tags:
          - Candidate API
        summary: Get answers from candidate documents
        description: ''
        operationId: getFormAnsweredByDocumentId
        parameters:
          - name: documentId
            in: path
            description: Id of document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this document
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/structured-document/{documentId}:
      get:
        tags:
          - Candidate API
        summary: Get document with answer for specified id
        description: ''
        operationId: getStructuredDocumentById
        parameters:
          - name: documentId
            in: path
            description: Id of document
            required: true
            schema:
              type: integer
              format: int64
          - name: showLocalizedValues
            in: query
            required: false
            schema:
              type: boolean
          - name: langCode
            in: query
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have access to this document
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/summary/{templateType}:
      get:
        tags:
          - Candidate API
        summary: >-
          Fetch Candidate summary structure for a given template type or candidate
          type
        description: >-
          This method allows to fetch Candidate summary structure for a given
          template type or candidate type before creation of a candidate. In
          Talentlink there can be deifferent Candidate Summary structures
          depending on the candidate type (internal/external) and employee type
          (permanent / contractor). Therefore it is sometimes necessary to fetch
          the correct structure of the fields.
        operationId: getCurrentCStemplate
        parameters:
          - name: templateType
            in: path
            description: ' it can accept following values: candidate, employee, externalContractor, internalContractor.'
            required: true
            schema:
              type: string
          - name: localizedValueLangCode
            in: query
            description: ' language parameter'
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
          - name: showLocalizedValue
            in: query
            description: ' this parameters controls whether the field values display localized or unlocalized values. Possible values: true, false.'
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: Candidate summary definition successfully returned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to Candidate Summary
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Template not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}:
      delete:
        tags:
          - Candidate API
        summary: Delete candidate
        description: ''
        operationId: deleteCandidate
        parameters:
          - name: candidateId
            in: path
            description: Id of the candidate
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: >-
              Candidate was deleted completely (response field
              'candidateDeletedCompletely' set to true) or partially (response
              field 'candidateDeletedCompletely' set to false). Candidate deletion
              depends on API user rights.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CandidateDeletionStatusDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}/consent:
      put:
        tags:
          - Candidate API
        summary: Update the candidate consent
        description: ''
        operationId: updateConsents
        parameters:
          - name: candidateId
            in: path
            description: Id of the candidate
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConsentDto'
          description: new candidate consent data
          required: true
        responses:
          '200':
            description: Consent updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update consent
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}/linktojob:
      put:
        tags:
          - Candidate API
        summary: Link candidate to one or more jobs
        description: ''
        operationId: linkToJob
        parameters:
          - name: candidateId
            in: path
            description: Id of candidate which will be linked to job/s
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkToJobsDto'
          description: linkToJobsDto
          required: true
        responses:
          '200':
            description: Candidate linked
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to link candidate
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}/referral/{referralId}:
      put:
        tags:
          - Candidate API
        summary: Update Referral Info
        description: >-
          <p>After creating the candidate you may wish to change Referral
          information.</p><p>Before calling this method you may want to use
          GET/candidate method to fetch the structure of the Referral</p>
        operationId: updateReferral
        parameters:
          - name: candidateId
            in: path
            description: Id of candidate whom Referrer data will be updated
            required: true
            schema:
              type: integer
              format: int64
          - name: referralId
            in: path
            description: Id of Referral to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferrerDto'
          description: new Referrer data
          required: true
        responses:
          '204':
            description: Referral data successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update candidate summary
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}/summary:
      get:
        tags:
          - Candidate API
        summary: Fetch candidate summary for a given Candidate.
        description: ''
        operationId: getSummary
        parameters:
          - name: candidateId
            in: path
            description: Id of candidate whom candidate summary is requested
            required: true
            schema:
              type: integer
              format: int64
          - name: langCode
            in: query
            description: Language of localized values
            required: false
            schema:
              type: string
        responses:
          '200':
            description: Candidate summary successfully returned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to candidate summary of candidate
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      put:
        tags:
          - Candidate API
        summary: Update Candidate Summary
        description: >-
          <p>After creating the candidate you may wish to add extra fields defined
          in the summary.</p><p>Before calling this method you may want to use
          GET/candidate/{candidateId}/summary/definition method to fetch the
          structure of the form</p>
        operationId: updateSummary
        parameters:
          - name: candidateId
            in: path
            description: Id of candidate whom candidate summary will be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnsweredDto'
          description: new candidate sumary data
          required: true
        responses:
          '204':
            description: Candidate summary successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update candidate summary
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{candidateId}/summary/definition:
      get:
        tags:
          - Candidate API
        summary: >-
          Fetch empty Candidate Summary structure for existing candidate. Useful
          for updating candidate
        description: >-
          <p>This method returns the empty structure of the candidate summary
          along with all the possible values for a given candidateID.</p><p>Main
          template for the summary can be edited, while existing candidate may
          have older version of the form.</p><p>With this method user can view the
          exact structure of the existing candidate summary along with the
          possible values</p>
        operationId: getSummaryForm
        parameters:
          - name: candidateId
            in: path
            description: Id of candidate whom candidate summary is requested
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Candidate summary definition successfully returned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to Candidate Summary Definition
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{id}/tag:
      post:
        tags:
          - Candidate API
        summary: Add tag to candidate
        description: ''
        operationId: addTag
        parameters:
          - name: id
            in: path
            description: candidate id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateTagAssignmentDto'
          description: tag
          required: true
        responses:
          '204':
            description: Tag added to candidate.
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{id}/tag/{tagId}:
      delete:
        tags:
          - Candidate API
        summary: Remove tag from candidate
        description: ''
        operationId: deleteTag
        parameters:
          - name: id
            in: path
            description: candidate id
            required: true
            schema:
              type: integer
              format: int64
          - name: tagId
            in: path
            description: document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: Tag removed from candidate.
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidate/{id}/upload/document:
      post:
        tags:
          - Candidate API
        summary: Upload candidate document
        description: ''
        operationId: uploadDocument
        parameters:
          - name: id
            in: path
            description: candidate id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateDocumentDto'
          description: document
          required: true
        responses:
          '200':
            description: File uploaded.
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /candidatepool:
      get:
        tags:
          - Candidate Pools
        summary: Returns the list of shared candidate pools available to the user
        description: >-
          <p>Candidate Pools allow to group candidates in specific sets.
          <br/>These sets can be then used for filtering purposes and to build a
          potential Talent base for future job opprtunities.<br/>Pools can be used
          to group candidates by skills, particular positions etc.<br/>there are
          two types of Pools in Talentlink:<br/>- users's private Pool (each user
          has one by default) - contents of this Pooll cannot be shared with other
          users.<br/>- shared Pool which is assigned to a specific Department.
          Users with access to candidates from this department are be able to see
          & add/remove candidates to/from this pool.</p><br/><p>This method
          returns all the details of existing Candidate Pool(s) that are available
          to view by the user.<br/>It is possible to filter the response based on
          the GrapQL logic and to get one or more pool details.</p>
        operationId: retrieve
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { candidatePools(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CandidatePoolGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Candidate Pools
        summary: Method to create a new, shared Candidate Pool
        description: >-
          This method allows the user to create a new Shared pool. 

          Please note, that the Pool needs to be assigned to a specific Department
          of the company so that users of this department could view the contents
          of it. 
        operationId: createPool
        requestBody:
          $ref: '#/components/requestBodies/CandidatePoolCreationDto'
        responses:
          '201':
            description: Candidate Pool was successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: >-
              User has no right Can Manage Candidate Pools via Rest API (1019) for
              the given department
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
    /candidatepool/{poolId}:
      put:
        tags:
          - Candidate Pools
        summary: allows to update or delete existing pool
        description: |-
          This method allows the user to update or delete existing pool. 
          User needs to provide the ID  of the Pool he wish to modify. 
        operationId: updatePool
        parameters:
          - name: poolId
            in: path
            description: candidatepool id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/CandidatePoolCreationDto'
        responses:
          '204':
            description: Candidate Pool was successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: >-
              User has no right Can Manage Candidate Pools via Rest API (1019) for
              the given department
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Candidate Pool not found
        security:
          - username: []
          - password: []
          - apiKey: []
    /contract:
      get:
        tags:
          - Contract API
        summary: List of contracts
        description: Returns a list of contracts. DTO structure depends on a GraphQL query.
        operationId: getContract
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { contracts(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ContractGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Contract API
        summary: Creates a new contract
        description: >-
          <p>This method allows to create a contract for the candidate. Contract
          contents are separately configured in Talentlink.Therefore before you
          create a contract you may want to use below methods to fetch the
          configuration first: </br>Method:
          GET/department/{departmentId}/contractorcontract/config - Fetch
          configuration of the Temporary contract </br>Method:
          GET/department/{departmentId}/permanentcontract/config - Fetch
          configuration of the Permanent contract</p><p>Please also note that each
          position has a defined Selection Process assigned. So for the contract
          to be created via API all of the restrictions of Selection Process need
          to be fulfilled first (all the necessary steps need to be closed).
          Otherwise it will be impossible to create the contract</p><p>Optionally
          there can be a dedicated Selection Process created where there are no
          restrictions before hiring. In both cases however please be aware that
          the PreScreening step is always mandatory in Talentlink.</p><p>It is
          possible to close the PreScreening step using the dedicated method in
          Selection Process
          API:<br>PUT/selection-process/application/{applicationId}/completePrescreening</p>
        operationId: create
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '409':
            description: Contract for given application already exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be created
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /contract/rateset:
      get:
        tags:
          - Contract API
        summary: List of rate formula set
        description: >-
          Returns a list of rate formula set. DTO structure depends on a GraphQL
          query.
        operationId: getRateSets
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { ratesFormulas(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RateFormulaSetGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /contract/{contractId}:
      delete:
        tags:
          - Contract API
        summary: Delete a Contract Extension
        description: >-
          <p>This method allows to delete an accepted Extension of the existing
          contract. To delete it you need to provide the ID of the accepted
          contract extension which is to be deleted.</p>
        operationId: deleteExtension
        parameters:
          - name: contractId
            in: path
            description: Id of the contract's extension to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: Contract extension successfully deleted
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /contract/{contractId}/extension:
      post:
        tags:
          - Contract API
        summary: Create a new Contract Extension
        description: >-
          <p>This method allows to create an Extension of the existing temporary
          contract. To create it you need to provide the ID of the contract which
          is to be extended.</p><p>NOTE: Extension start / end dates should not
          overlap with already existing contacts or extensions.</p>
        operationId: extend
        parameters:
          - name: contractId
            in: path
            description: Id of the contract's current version
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be extended
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - Contract API
        summary: >-
          Create a new Contract Extension based on contract values, using PATCH
          logic (provide only elements that are changing)
        description: >-
          <p>This method allows to create an Extension of the existing temporary
          contract. To create it you need to provide the ID of the contract which
          is to be extended.</p><p>NOTE: Extension start / end dates should not
          overlap with already existing contacts or extensions.</br>If you wish to
          delete a value you need to use POST method.</p>
        operationId: extendPatch
        parameters:
          - name: contractId
            in: path
            description: Id of the contract's current version
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be extended
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /contract/{contractId}/update:
      post:
        tags:
          - Contract API
        summary: >-
          Update existing contract (creates new contract version) - entire
          structure is required
        description: >-
          <p>This method allows to update the existing extension using POST
          logic.</p><p>It means that you need to provide all contract details even
          for the fields you do not wish to change. Therefore it is advised to
          call GET/contract first and cache the information and only then use the
          POST method.</p><p>This type of update is faster in terms of response as
          the system does not need to cache any data.</p><p>Please note:  if you
          use an empty tag in this method it means you wish to set it to  "null"
          value.</p>
        operationId: update
        parameters:
          - name: contractId
            in: path
            description: Id of the contract's current version
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '409':
            description: Contract for given id is not the current version
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be updated
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - Contract API
        summary: >-
          Update contract using PATCH logic (provide only elements that are
          changing)
        description: >-
          <p>This method allows to update the existing contract using PATCH logic.
          It means that you do not need to provide all contract details (like when
          using POST). Instead you can only use the elements which you wish to
          update. All other unused tags will be copied from the previous contract
          and remain unchanged.</p><p>Please note:  if you wish to delete a value
          you need to use POST method</p>
        operationId: patch
        parameters:
          - name: contractId
            in: path
            description: Id of the contract's current version
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '409':
            description: Contract for given id is not the current version
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be updated
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /contract/{extensionId}/extension/update:
      post:
        tags:
          - Contract API
        summary: >-
          Update existing extension (creates new extension version) - entire
          structure is required
        description: >-
          <p>This method allows to update the existing extension using POST
          logic.</p><p>It means that you need to provide all contract details even
          for the fields you do not wish to change. Therefore it is advised to
          call GET/contract first and cache the information and only then use the
          POST method.</p><p>This type of update is faster in terms of response as
          the system does not need to cache any data.</p><p>Please note:  if you
          use an empty tag in this method it means you wish to set it to  "null"
          value.</p>
        operationId: updateExtension
        parameters:
          - name: extensionId
            in: path
            description: Id of the contract's extension
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be extended
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - Contract API
        summary: >-
          Update extension using PATCH logic (provide only elements that are
          changing)
        description: >-
          <p>Details: This method allows to update the existing extension using
          PATCH logic. It means that you do not need to provide all contract
          details (like when using POST). Instead you can only use the elements
          which you wish to update. All other unused tags will be copied from the
          previous contract and remain unchanged.</p><p>Please note:  if you wish
          to delete a value you need to use POST method</p>
        operationId: patchExtension
        parameters:
          - name: extensionId
            in: path
            description: Id of the contract's extension
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicContractDto'
        responses:
          '201':
            description: Contract successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Contract with given id does not exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '412':
            description: Contract for given application cannot be extended
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department:
      get:
        tags:
          - Department API
        summary: List of departments
        description: Returns a list of departments. DTO structure depends on a GraphQL query.
        operationId: retrieveDepartments
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { departments(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DepartmentGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Department API
        summary: Creates a new department
        description: ''
        operationId: createDepartment
        requestBody:
          $ref: '#/components/requestBodies/BasicDepartmentDto'
        responses:
          '201':
            description: Department successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}:
      put:
        tags:
          - Department API
        summary: Updates an existing department
        description: ''
        operationId: updateDepartment
        parameters:
          - name: departmentId
            in: path
            description: department id to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/BasicDepartmentDto'
        responses:
          '201':
            description: Department successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Department with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - Department API
        summary: Deletes a department with the given id
        description: ''
        operationId: delete
        parameters:
          - name: departmentId
            in: path
            description: department id to be deleted
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: No content
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Entity not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/activate:
      put:
        tags:
          - Department API
        summary: Activates a department with the given id
        description: ''
        operationId: activateDepartment
        parameters:
          - name: departmentId
            in: path
            description: department to be activated with a given id
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: No content
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Entity not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/contractorcontract/config:
      get:
        tags:
          - Contract API
        summary: Fetch configuration of the Temporary contract
        description: >-
          <p>Contract content is separately configured in Talentlink. This method
          allows to fetch the list of fields for Temporary contracts.</p>
        operationId: getOfferTermsForContractorRecruitment
        parameters:
          - name: departmentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: userType
            in: query
            description: userType
            required: true
            schema:
              type: string
              enum:
                - ADVANCED
                - MSS
                - CANDIDATE
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OfferTermsDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/deactivate:
      put:
        tags:
          - Department API
        summary: Deactivates a department with the given id
        description: ''
        operationId: deactivateDepartment
        parameters:
          - name: departmentId
            in: path
            description: department to be deactivated with a given id
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: No content
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Entity not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/job-template/config:
      get:
        tags:
          - Personal job template API
        summary: Fetch Job template configuration for a given Department.
        description: ''
        operationId: getPersonalJobTemplateConfig
        parameters:
          - name: departmentId
            in: path
            description: Department id
            required: true
            schema:
              type: integer
              format: int64
          - name: recruitmentContext
            in: query
            description: Recruitment context
            required: false
            schema:
              type: string
              enum:
                - CONTRACTOR
                - PERMANENT
          - name: userType
            in: query
            description: 'User type: ADVANCED, MSS'
            required: false
            schema:
              type: string
              enum:
                - ADVANCED
                - MSS
          - name: language
            in: query
            description: Language
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: Personal job template configuration successfully returned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Job template not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/move:
      put:
        tags:
          - Department API
        summary: >-
          Moves a department with the given id to another parent with a
          destination id
        description: ''
        operationId: moveDepartment
        parameters:
          - name: departmentId
            in: path
            description: department to be moved with a given id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewDepartmentParentIdDto'
          description: 'department id of the new parent: destination id: '
          required: true
        responses:
          '204':
            description: No content
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Entity not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{departmentId}/permanentcontract/config:
      get:
        tags:
          - Contract API
        summary: Fetch configuration of the Permanent contract
        description: >-
          <p>Contract content is separately configured in Talentlink. This method
          allows to fetch the list of fields for Permanent contracts.</p>
        operationId: getOfferTermsForPermanentRecruitment
        parameters:
          - name: departmentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: userType
            in: query
            description: userType
            required: true
            schema:
              type: string
              enum:
                - ADVANCED
                - MSS
                - CANDIDATE
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/OfferTermsDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /department/{userId}/job-template:
      put:
        tags:
          - Personal job template API
        summary: Assign or Update a job template for a given User.
        description: ''
        operationId: createPersonalJobTemplate
        parameters:
          - name: userId
            in: path
            description: User id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalJobTemplateBasicDto'
          description: Job Template
          required: true
        responses:
          '200':
            description: Personal job template successfully updated
          '201':
            description: Personal job template successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Job template not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /internal-message:
      get:
        tags:
          - Internal Message API
        summary: List of internal messages
        description: >-
          Returns a list of internal messages. DTO structure depends on a GraphQL
          query
        operationId: getInternalMessages
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { internalMessages(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {receiverUser_eq: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InternalMessageGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
      post:
        tags:
          - Internal Message API
        summary: Send new message
        description: Sends new internal message based on provided parameters
        operationId: sendInternalMessage
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendInternalMessageRequest'
          description: sendInternalMessageRequest
          required: true
        responses:
          '201':
            description: Internal message successfully sent
          '400':
            description: Internal message parameters are invalid
        security:
          - username: []
          - password: []
          - apiKey: []
    /internal-message/archive:
      post:
        tags:
          - Internal Message API
        summary: Archive internal message
        description: This method allows to archive internal message based on id
        operationId: archiveInternalMessage
        parameters:
          - name: internalMessageIds
            in: query
            description: archiveInternalMessage
            required: true
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
        responses:
          '201':
            description: Internal message successfully archived
          '400':
            description: Internal message parameters are invalid
        security:
          - username: []
          - password: []
          - apiKey: []
    /interview/location:
      get:
        tags:
          - Interview Location API
        summary: List of interview locations
        description: >-
          Returns a list of interview locations. DTO structure depends on a
          GraphQL query.
        operationId: retrieveInterviewLocations
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { locations(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/InterviewLocationGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Interview Location API
        summary: Creates Location
        description: >-
          <p>This method allows to CREATE new Interview location. Some of the
          fields are mandatory (e.g. Timezone).</br>Please note that Countries are
          connected to Timezones in Talentlink. </br>Full list of Countries and
          assigned Timezones can be found
          POSSIBLE_COUNTRY_TIME_ZONE_VALUES_PLACEHOLDER.</p>
        operationId: createInterviewLocation
        requestBody:
          $ref: '#/components/requestBodies/InterviewLocationBasicDto'
        responses:
          '201':
            description: Location successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Credentials not provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create a interview location
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /interview/location/timezones:
      get:
        tags:
          - Interview Location API
        summary: List of available timezones
        description: >-
          Returns a list of available timezones. DTO structure depends on a
          GraphQL query. 'First' and 'after' operations are not supported.
        operationId: getTimeZones
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { timezones (where: { name_like: "Europe", name_notLike:
                "Europe/Warsaw" }) { name } }
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeZoneGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /interview/location/{id}:
      put:
        tags:
          - Interview Location API
        summary: Update Location
        description: ''
        operationId: updateInterviewLocation
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/InterviewLocationBasicDto'
        responses:
          '204':
            description: Location successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Credentials not provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update a interview location
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - Interview Location API
        summary: Delete location
        description: ''
        operationId: deleteInterviewLocation
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: location successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /location:
      get:
        tags:
          - Location API
        summary: List of Locations
        description: Returns a list of Locations. DTO structure depends on a GraphQL query.
        operationId: readInterviewLocationsList
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { locations(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LocationGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Location API
        summary: Creates Location
        description: ''
        operationId: createLocation
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationBasicDto'
          description: location
          required: true
        responses:
          '201':
            description: Location successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Credentials not provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create a job location
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '409':
            description: Location with provided name already exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /location/{id}:
      put:
        tags:
          - Location API
        summary: Updates Location
        description: ''
        operationId: updateLocation
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDto'
          description: location
          required: true
        responses:
          '204':
            description: Location successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Credentials not provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update a job location
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '409':
            description: Another location with provided name already exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - Location API
        summary: Delete location
        description: ''
        operationId: deleteLocation
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: location successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov:
      get:
        tags:
          - LOV API
        summary: List of standard fields
        description: >-
          This method retrieves the list of Standard Fields along with all their
          properties and translations.
        operationId: getLovs
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { lovs(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LovGraphQLWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable:
      post:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to create a new Configurable Fields with entries
        description: >-
          Configurable Fields are the most commonly used type of fields in
          TalentLink. Usually they are part of Requisitions and Adverts. This
          method allows to create a new Configurable Field along with entries.
        operationId: createConfigurableLov
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLovWithDataTypeDto'
          description: New Configurable LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable/{lovId}:
      patch:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to update a Configurable Field.
        description: >-
          This method allows to update a Configurable Field (main name). To modify
          particular entries use separate dedicated method.
        operationId: updateConfigurableLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicLovDto'
          description: Update Configurable LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable/{lovId}/deactivate:
      put:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to deactivate entire Configurable Field (with entries).
        description: This method allows to deactivate Configurable Field.
        operationId: deactivateConfLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: Config LOV successfully deactivated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update LOV properties
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable/{lovId}/entry:
      delete:
        tags:
          - LOV API - Configurable LOV
        summary: >-
          Allows to delete one or more entries from an existing Configurable
          Field.
        description: >-
          This method allows to delete an entry from Configurable LOV. You need to
          provide the ID of the parent LOV and then the list of entry IDs to be
          deleted.
        operationId: deleteConfigurableLovEntries
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: entriesIds
            in: query
            required: false
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
        responses:
          '200':
            description: successful operation
            content:
              '*/*':
                schema:
                  type: string
          '204':
            description: LOV entries successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to delete entry from LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable/{lovId}/properties:
      patch:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to update properties of the Configurable Field
        description: >-
          Each Configurable Field has a set of properties which determine where
          the field should appear, whether it should be sent along with Posting
          Extract etc. The same properties can be set in TalentLink UI.
        operationId: updateLovProperties
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/UpdateLovPropertiesDto'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV properties successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update LOV properties
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/configurable/{parentId}/entry:
      post:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to create a new Configurable Field entries
        description: >-
          This method allows to create one or more new entries in an existing
          Configurable Field. You need to provide the ID of the parent LOV and
          then the array of new entries.
        operationId: createConfigurableLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLovEntriesWithDataValueDto'
          description: New Configurable LOV entries
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entry successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - LOV API - Configurable LOV
        summary: Allows to update one or more entries in an Configurable LOV
        description: >-
          This method allows to update one or more entries in an existing
          Configurable Field. You need to provide the ID of the parent LOV and
          then the array of new values for existing entries.
        operationId: updateConfigurableLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLovEntriesWithDataValueDto'
          description: Update Configurable LOV entries
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entries successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field:
      post:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to create a new Free Form Field with entries
        description: >-
          Free Form Fields LOVs are the second most commonly used type of fields
          in TalentLink. They work in the same way as Configurable Fields. Usually
          they are part of Requisitions and Adverts. This method allows to create
          new LOV along with entries.
        operationId: createFreeFormFieldLov
        requestBody:
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CreateLovWithEntriesWithDataFormatAndRequiredDto
          description: New Free Form Field LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field/{lovId}:
      patch:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to update a Free Form Field LOV
        description: >-
          This method allows to update a Free Form Field (main name). To modify
          particular entries use separate dedicated method.
        operationId: updateFreeFormFieldLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicLovDto'
          description: Update Free Form Field LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field/{lovId}/deactivate:
      put:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to deactivate Free Form Field
        description: Allows to deactivate entire Free Form Field (with entries).
        operationId: deactivateFFFLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: Free Form Field LOV successfully deactivated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update LOV properties
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field/{lovId}/entry:
      delete:
        tags:
          - LOV API - Free Form Field LOV
        summary: >-
          Allows to delete one or more entries from an existing Free Form Field
          LOV
        description: >-
          This method allows to delete one or more entries from Configurable LOV.
          You need to provide the ID of the parent LOV and then the list of entry
          IDs to be deleted.
        operationId: deleteFreeFormFieldLovEntries
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: entriesIds
            in: query
            required: false
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
        responses:
          '200':
            description: successful operation
            content:
              '*/*':
                schema:
                  type: string
          '204':
            description: FreeFormField LOV entries successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to delete entry from FreeFormField LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field/{lovId}/properties:
      patch:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to update properties of the Free Form Field
        description: >-
          Each Free Form Field has a set of properties which determine where the
          field should appear, whether it should be sent along with Posting
          Extract etc. The same properties can be set in TalentLink UI.
        operationId: updateLovProperties
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          $ref: '#/components/requestBodies/UpdateLovPropertiesDto'
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV properties successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to update LOV properties
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/free-form-field/{parentId}/entry:
      post:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to create a new Free Form Field entries.
        description: >-
          This method allows to create one or more new entries in an existing Free
          Form Field. You need to provide the ID of the parent LOV and then the
          array of new entries.
        operationId: createFreeFormFieldLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CreateLovEntriesWithDataFormatAndRequiredDto
          description: New Free Form Field LOV entries
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entry successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - LOV API - Free Form Field LOV
        summary: Allows to update one or more entries in an Free Form Field
        description: >-
          This method allows to update one or more entries in an existing Free
          Form Field. You need to provide the ID of the parent LOV and then the
          array of new values for existing entries.
        operationId: updateFreeFormFieldLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UpdateLovEntriesWithDataFormatAndRequiredDto
          description: Update Free Form Field entries
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entries successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/standard-fields:
      post:
        tags:
          - LOV API - Standard Fields
        summary: Allows to create a new entry within an existing Standard Field
        description: >-
          <p>Standard Fields are pre-defined fields in TalentLink which cannot be
          edited. However you are able to create/modify entries within those
          fields.</p></br><p>This method allows to create a new entry within an
          existing Standard Field. To create a new entry (a child field) you need
          to provide the parent ID (main Standard Field ID) along with the value
          and the language so that value is assigned for the proper
          translation.</p>
        operationId: createStandardLovEntry
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLovEntryDto'
          description: New LOV Entry
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: Lov entry successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - LOV API - Standard Fields
        summary: Allows to update an entry within a Standard Field using PATCH logic.
        description: >-
          <p>This method allows you to update an entry within a Standard
          Field.</p></br><p>You can update one or more translations for a given
          field with this method.</p></br><p><b>Please note</b> PATCH logic is
          used here therefore you need to provide  only the values for
          translations that you wish to update. Values of the translations which
          are not used in the request will be copied from the existing values
          (unchanged).</p>
        operationId: updateLovEntryLabels
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLovLabelsDto'
          description: Update LOV labels
        responses:
          '204':
            description: Lov labels successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to deactivate LOV entry
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/standard-fields/deactivate:
      put:
        tags:
          - LOV API - Standard Fields
        summary: Method to deactivate an existing entry in the Standard Field.
        description: >-
          This method allows you to deactivate one or more entries (child fields)
          within a Standard Field. Method accepts the list of IDs separated by
          commas.
        operationId: deactivateLovEntry
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateLovDto'
          description: List of entries' IDs to be deactivated
        responses:
          '204':
            description: Lov entry successfully deactivated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to deactivate LOV entry
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/user-data:
      post:
        tags:
          - LOV API - User data
        summary: Allows to create a new User Data LOV with entries
        description: >-
          User Data LOVs are the type of fields which are then used on the User
          details page. Very often they contain TLK User address information,
          telephone numbers etc. In general such fields expand the information
          abiout the TLK User and later can be used in reporting or user
          signatures.  This method allows to create a new User Data LOV field.
        operationId: createUserDataLov
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLovDto'
          description: New User Data LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/user-data/{lovId}:
      delete:
        tags:
          - LOV API - User data
        summary: Allows to delete entire User Data LOV field and its entries
        description: This method allows to delete entire User Data LOV and all its entries.
        operationId: deleteUserDataLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              '*/*':
                schema:
                  type: string
          '204':
            description: LOV and its entries successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - LOV API - User data
        summary: Allows to update an User Data LOV
        description: >-
          This method allows to update a User Data LOV (main name). To modify a
          particular entries use separate dedicated method.
        operationId: updateUserDataLov
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicLovDto'
          description: Update User Data LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/user-data/{lovId}/entry:
      delete:
        tags:
          - LOV API - User data
        summary: Allows to delete one or more entries from an existing User Data LOV.
        description: >-
          This method allows to delete a particular entry from User Data LOV. You
          need to provide the ID of the parent LOV and then the list of  entry IDs
          to be deleted.
        operationId: deleteUserDataLovEntries
        parameters:
          - name: lovId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: entriesIds
            in: query
            required: false
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
        responses:
          '200':
            description: successful operation
            content:
              '*/*':
                schema:
                  type: string
          '204':
            description: LOV entries successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to delete entry from LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /lov/user-data/{parentId}/entry:
      post:
        tags:
          - LOV API - User data
        summary: Allows to create a new User Data LOV entries
        description: >-
          This method allows to create one or more new entries in an existing User
          Data LOV. You need to provide the ID of the parent LOV and then the
          array of new entries.
        operationId: createUserDataLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLovEntriesDto'
          description: New User Data LOV
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entry successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - LOV API - User data
        summary: Allows to update one or more entries in an User Data LOV.
        description: >-
          This method allows to update one or more entries in an existing User
          Data LOV. You need to provide the ID of the parent LOV and then the
          array of new values for existing entries.
        operationId: updateUserDataLovEntries
        parameters:
          - name: parentId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLovEntriesDto'
          description: Update User Data LOV entries
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: string
          '204':
            description: LOV entries successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create entry in LOV
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /passwordRule:
      get:
        tags:
          - Password Rule API
        summary: List of password rules
        description: >-
          Returns a list of password rules. DTO structure depends on a GraphQL
          query.
        operationId: getPasswordRules
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { passwordRule(first: 7, after: 1) {
                backOffice{userHasToChangePassword} } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PasswordRuleGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /position:
      get:
        tags:
          - Position API
        summary: List of positions
        description: Returns a list of positions. DTO structure depends on a GraphQL query.
        operationId: getPositions
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { positions(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PositionGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Position API
        summary: Creates Position
        description: >-
          <p>This method allows to create a position.</p><p>Please note that each
          department can have a different configuration of the contents of a
          Position. Therefore you may wish to fetch the structure of a Position
          for a given Department by
          using:</br>GET/position/structure/{departmentId}</p>
        operationId: createPosition
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningBasicDto'
          description: opening
          required: true
        responses:
          '201':
            description: Position successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to user preferences
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /position/structure/{departmentId}:
      get:
        tags:
          - Position API
        summary: Position structure for a given department
        description: ''
        operationId: getPositionStructure
        parameters:
          - name: departmentId
            in: path
            description: Department id
            required: true
            schema:
              type: integer
              format: int64
          - name: recruitmentContext
            in: query
            description: Recruitment context
            required: false
            schema:
              type: string
              enum:
                - CONTRACTOR
                - PERMANENT
          - name: userType
            in: query
            description: 'User type: ADVANCED, MSS'
            required: false
            schema:
              type: string
              enum:
                - ADVANCED
                - MSS
          - name: language
            in: query
            description: Language
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: Position structure successfully returned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Position structure not found
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /position/{openingId}:
      patch:
        tags:
          - Position API
        summary: Update opening data
        description: ''
        operationId: updatePosition
        parameters:
          - name: openingId
            in: path
            description: ID of the Position you wish to update
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpeningBasicDto'
          description: List of field to be updated on the Position
        responses:
          '204':
            description: Update existing Position data
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to opening
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Opening with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /position/{positionId}/attachDocument:
      post:
        tags:
          - Position API
        summary: ' Attach a file to the existing Position'
        description: ''
        operationId: attachDocuments
        parameters:
          - name: positionId
            in: path
            description: id of the opening
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachedFileDto'
          description: attached file
          required: true
        responses:
          '200':
            description: File successfully attached
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Unauthorized
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to attach files
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /position/{positionId}/copy:
      post:
        tags:
          - Position API
        summary: Copy Position
        description: ''
        operationId: copyPosition
        parameters:
          - name: positionId
            in: path
            description: ID of the position you wish to copy
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewOpeningNameDto'
          description: Name of the new Position
        responses:
          '201':
            description: Position successfully copied
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: Unauthorized
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to copy Position
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert:
      get:
        tags:
          - Published Advert API
        summary: List of posting targets
        description: >-
          <p>This method returns the contents of the adverts posted from talent
          link</p><p>Talentlink offers possibility to create adverts for jobs.
          Those adverts contain job description, requirements for the job etc.They
          can also contain branding and images.</p><p>Once advert is created user
          can publish it on the preferred channels (sites). Those channels are
          usually External Career Site, Internal Career Site, Jobboards or
          Agencies.</p></br><p><b>Use Case:</b></p><p>Clients can build a custom
          career site based on adverts exported from TalentLink as an alternative
          to integrating front end components.</p><p>Clients may then build their
          career site using chosen technology, including lay-out and style with no
          constraints.</p></br><p><b>Additional
          Information:</b><p><b>Channel:</b>  represents a source to which a
          position can be published. For example it may be a job board or a web
          site. Each channel is made up of an ID, name, description and unique
          technical ID.</p><p><b>Posting Target:</b> represents a single advert
          publication to a single channel. For example a position may have a
          posting in French.The French posting may be posted to a French job board
          and to a French career site. In that case there would be two posting
          targets. Each posting target has its own start and end date along with
          the URL to apply for the position and the URL to see the position
          description.</p><p><b>Posting:</b> posting is in fact a group of
          adverts. A posting is created in a single language and is made up of a
          title, language, location and description.Each position can have
          multiple postings, perhaps in different languages or different wording
          in the same language.</p><p><b>Job description</b> fields can be found
          in this section: <br> - customFields - It contains up to 8 fields, each
          having the label, value and order
          parameters.</p><p><b>Locations:</b></p><p>There are two types of
          locations in Talentlink - Standard Location and Geolocation. Each one
          has a separate dedicated fields.</br>- Location - this is standard
          location. It can be set on the advert and will be returned in the API
          response.</br>- JobLocations - this section contains data about
          Geolocation. If the JobLocations are selected on the Advert then this
          section will display values from the Advert. However if this is not
          selected on the advert it will display Geolocation from the
          Position.</br>Please note there is a separate Feature Switch for
          Geolocation.That means that if the feature is disabled those fields will
          be empty.</p></br></br><p><b>IMPORTANT: This Webservice offers two ways
          of authentication.</b></p><p>One for public adverts (External Sites)
          only, which is a public access and second authentication (with user &
          pasword) to access all sites available for the user.</p></br><p><b>1.
          Authentication for External Site adverts:</b></p><p>External Site's
          adverts by default are public. So there is no need to use Talentlink
          User credentials and authentication. However, to get the adverts from
          External site you  need to know the Technical ID of the site plus the
          API Key is neded in the endpoint.</p><p>So the login credentials should
          be as follows:<br> - Username: Technical_ID:guest:FO (i. e.
          QC15K02923VGQB8G6GF79M:guest:FO)<br> - Password: guest</p></br><p><b>2.
          Authentication for ALL posting channels</b></p><p>To get adverts posted
          for all channels (External Sites, Internal Sites, Jobboards, Agencies)
          user need to be authenticated.</p><p>Of course such user need to be
          configured in Talentlink properly and have sufficient access to data
          (assignment of roles).</p><p>In this case login credentials should be as
          follows:<br> - Username: CompanyName:username:BO (i.
          e.MyCompany:JohnDoe:BO)<br> - Password - same as the user password for
          Talentlink</p><p><b> NOTE:</b> When calling this method with TalentLink
          user credentials - at least one or more technical site IDs (or posting
          channel IDs) must be provided in the request. For example:
           </p>{
          <br>&emsp;  publishedAdverts(first: 10, after: 0, sortBy: id, orderBy:
          ASC, where: {technicalId_eq: QC15K02923VGQB8G6GF79M }) {

          <br>&emsp;&emsp;id

          <br>&emsp;  }

          <br>}

          <br><p>You can fetch postings from multiple sites by using the filter:
          'technicalId_in' where you can put a list of IDs, separated by
          commas.<p>
        operationId: getPublishedAdverts
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { publishedAdverts(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PublishedAdvertGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/activechannel:
      get:
        tags:
          - Published Advert API
        summary: List of active posting channels
        description: >-
          Returns a list of posting channels. DTO structure depends on a GraphQL
          query.
        operationId: getActiveSourcingChannels
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { sourcingChannels(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SourcingChannelGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/attachment/{documentId}:
      get:
        tags:
          - Published Advert API
        summary: Download advert attachment file
        description: Returns file attached to advert
        operationId: getAdvertAttachment
        parameters:
          - name: documentId
            in: path
            description: Id of attachment document
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Document found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Document with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/criteria:
      get:
        tags:
          - Published Advert API
        summary: Search criteria
        description: Returns the standard criteria and custom LOVs with a hierarchy.
        operationId: getCriteria
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: '{ publishedAdvertsCriteria{ categories{ label value } } }'
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SourcingChannelGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/multiPoster/updateStatus:
      put:
        tags:
          - Published Advert API
        summary: >-
          Allow Multi-posters to submit Client User selected end job boards and
          its up-to-date status update for a specific posting id
        description: ''
        operationId: updatePublishedAdvertStatus
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostingStatusUpdateDTO'
          description: job advert body to be updated
          required: true
        responses:
          '204':
            description: PublishedAdvert status successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: PostingTarget with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/preview:
      get:
        tags:
          - Published Advert API
        summary: Fetch advert by token
        description: >-
          This method allows to preview adverts which have not been posted yet.

          It helps with building more advanced integrations by allowing users to
          see how their advert will look like after it is posted.

          When an advert is created in TalentLink for a requisition a token can be
          generated (either using Preview option in the TalentLink UI or in the
          method advertisement/generate-token which is part of the Advertisement
          API)
        operationId: getAdvertisementPreviewWithToken
        parameters:
          - name: token
            in: query
            description: Token of advertisement draft
            required: true
            schema:
              type: string
          - name: langCode
            in: query
            description: "\tLanguage code - used for translation of labels and error messages If not provided then site master language is used"
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdvertisementDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/sorting-columns:
      get:
        tags:
          - Published Advert API
        summary: list of String column names.
        description: Returns column names which can be used for sorting advertisements.
        operationId: getSortingColumns
        responses:
          '200':
            description: Sorting columns found
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/unpost:
      put:
        tags:
          - Published Advert API
        summary: Unpost one or more adverts
        description: >-
          This methoid allows to unpost published adverts. To unpost more than one
          advert please provide the list of IDs on input (separated by commas).
        operationId: unpostPublishedAdverts
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnpostAdvertDto'
          description: List of posting target Id
          required: true
        responses:
          '204':
            description: PublishedAdvert unposted successfully
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: PostingTarget with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /publishedadvert/{publishedAdvertId}/updateJobDescriptionUrl:
      put:
        tags:
          - Published Advert API
        summary: Sets external job description url on published advert
        description: ''
        operationId: updateJobDescriptionUrl
        parameters:
          - name: publishedAdvertId
            in: path
            description: published advert id to update job description url
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDescriptionUrlDto'
          description: job description url to set
          required: true
        responses:
          '204':
            description: PublishedAdvert successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: PostingTarget with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues:
      get:
        tags:
          - Queues API
        summary: 'Retrieve list of all queues available for the user '
        description: >-
          This method allows to retireve all queues that are available for the
          user calling the method. Each record is displayed with the number of
          elements that are currently residing in the particular queue.
        operationId: listAllQueuesDetailed
        responses:
          '200':
            description: List of queues with details fetched
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuesDto'
          '204':
            description: NO queues are present
          '400':
            description: Queue not found
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/application/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Application
        summary: Retrieves the oldest element from the Application queue
        description: Provide the queue name to retrieve details of the Application.
        operationId: getApplicationFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: showCandidateData
            in: query
            description: showCandidateData
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: Application successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedApplicationDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Application found but is not accessible by queue owner
          '404':
            description: Application found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/application/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Application
        summary: Retrieves any element from the Application queue based on the elementID
        description: >-
          Provide the queue name & elementID to retrieve Application details. It
          allows to fetch any element from the queue.
        operationId: getApplicationFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
          - name: showCandidateData
            in: query
            description: showCandidateData
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: Application successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedApplicationDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Application found but is not accessible by queue owner
          '404':
            description: Application found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/archived-candidate/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Archived Candidate
        summary: Retrieves the oldest element from the Archived Candidates queue
        description: Provide the queue name to retrieve details of the archived candidate.
        operationId: getArchivedOrRemovedCandidateIdFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Archived candidate successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedArchivedApplicationDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Archived candidate found but is not accessible by queue owner
          '404':
            description: Archived candidate found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/archived-candidate/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Archived Candidate
        summary: >-
          Retrieves any element from the Archived Candidates queue based on the
          elementID
        description: >-
          Provide the queue name & elementID to retrieve Archived Candidate
          details. It allows to fetch any element from the queue.
        operationId: getArchivedOrRemovedCandidateIdFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Archived candidate successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedArchivedApplicationDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Archived candidate found but is not accessible by queue owner
          '404':
            description: Archived candidate found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/candidate/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Candidates
        summary: Retrieve oldest element of the  Candidate queue.
        description: Provide the queue name to retrieve Candidate details
        operationId: getCandidateFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Candidate successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedUserDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Candidate found but is not accessible by queue owner
          '404':
            description: Candidate found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/candidate/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Candidates
        summary: Retrieves any element from the Candidate queue based on the elementID
        description: >-
          Provide the queue name & elementID to retrieve Candidate details. It
          allows to fetch any element from the queue.
        operationId: getCandidateFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Candidate successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedContractDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Candidate found but is not accessible by queue owner
          '404':
            description: Candidate found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/contract/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Contract
        summary: Retrieves the oldest element from the Contract queue
        description: >-
          Provide the queue name to retrieve details of the contract from the
          queue.
        operationId: getContractFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Contract successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedContractDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Contract found but is not accessible by queue owner
          '404':
            description: Contract found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/contract/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Contract
        summary: Retrieves any Contract element from the queue based on the elementID.
        description: >-
          Provide the queue name & elementID to retrieve Contract details. It
          allows to fetch any element from the queue.
        operationId: getContractFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Contract successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedContractDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Contract found but is not accessible by queue owner
          '404':
            description: Contract found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/element/oldest-element:
      delete:
        tags:
          - Queues API
        summary: Global method allowing to remove oldest element from any queue type.
        description: >-
          This method allows to remove oldest elements from any type of queue. To
          remove the oldest element from the queue you need to provide the queue
          name.
        operationId: removeElementFromQueue
        parameters:
          - name: queueName
            in: query
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '204':
            description: Element successfully removed from queue
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '404':
            description: There are no elements in queue
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/element/{idInQueue}:
      delete:
        tags:
          - Queues API
        summary: >-
          Global method allowing to remove any element from any queue type, out of
          sequence.
        description: >-
          This method allows to remove any element from any type of queue out of
          sequence. To remove an element from the queue you need to provide the
          queue name and the elementID. 
        operationId: removeElementFromQueueById
        parameters:
          - name: queueName
            in: query
            description: queueName
            required: true
            schema:
              type: string
          - name: idInQueue
            in: path
            description: idInQueue
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: Element successfully removed from queue
          '400':
            description: Element's in queue id is invalid (blank or missing)
          '404':
            description: There is no such element in queue
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/export:
      get:
        tags:
          - Queues API
        summary: Method to export the Queue settings into a file
        description: >-
          This method allows to export Queue settings into a file. Such file can
          be used in the import method. If you wish to save a particular queue
          settings for the future or you are using individual queues for
          particular users you can use this option to speed up the queue creation
          process. This option is also available in TalentLink UI. 
        operationId: exportQueue
        parameters:
          - name: queueName
            in: query
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Queue successfully exported
          '400':
            description: Queue could not be exported
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/externalsystemrequest/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - External System Request
        summary: Retrieves the oldest element from the External Systems Request queue
        description: >-
          <p>This method allows to fetch the oldest element of the External
          Assessment Providers requests.</p><p>When a specific Selection step
          (which is of type - External System) is assigned in TalentLink then
          candidate details & correlation ID are sent to the queue.Those
          parameters are then used by Assessment Provider API to provide
          Assessment URL (and then results and reports).</p><p>To retrieve details
          of the External System Request from the queue, provide the Queue
          name.</p>
        operationId: getLastExternalSystemRequestFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: langCode
            in: query
            description: langCode
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
          - name: showBaseValue
            in: query
            description: showBaseValue
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: External System Request successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedExternalSystemRequestDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: External System Request found but is not accessible by queue owner
          '404':
            description: External System Request found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/externalsystemrequest/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - External System Request
        summary: >-
          Retrieves any External System Request element from the queue based on
          the elementID
        description: >-
          <p>This method allows to fetch any element of External Assessment
          Providers requests. When a specific Selection step (which is of type -
          External System) is assigned in TalentLink then candidate details &
          correlation ID are sent to the queue.  Those parameters are then used by
          Assessment Provider API to provide Assessment URL (and then results and
          reports).</p><p>Provide the Queue name &  elementID to retrieve contract
          details. It allows to fetch any element from the queue.</p>
        operationId: getExternalSystemRequestFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
          - name: langCode
            in: query
            description: langCode
            required: false
            schema:
              type: string
              enum:
                - AR
                - AT
                - BG
                - BR
                - CA
                - CH
                - CN
                - CS
                - CY
                - DE
                - DN
                - EL
                - US
                - EN
                - ET
                - FL
                - FN
                - FR
                - GL
                - HR
                - HU
                - ID
                - IS
                - IT
                - JA
                - KO
                - LT
                - LV
                - MX
                - MY
                - NL
                - NW
                - PL
                - PT
                - RO
                - RU
                - SK
                - SL
                - SP
                - SR
                - SW
                - TH
                - TR
                - TW
                - UA
                - UK
                - VI
                - WA
                - XX
          - name: showBaseValue
            in: query
            description: showBaseValue
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: External System Request successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedExternalSystemRequestDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: External System Request found but is not accessible by queue owner
          '404':
            description: External System Request found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/import:
      post:
        tags:
          - Queues API
        summary: Allows to import Queue settings from the file
        description: >-
          This method allows to import Queue settings from previously exported
          file. Export can be done from API or from TalentLink UI.
        operationId: importQueue
        responses:
          '200':
            description: Queue successfully imported
          '400':
            description: Queue could not be imported
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/position/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Position (Requisitions)
        summary: Retrieves the oldest element from the Position queue
        description: >-
          Provide the queue name to retrieve details of the requisition from the
          queue.
        operationId: getPositionFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Position successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedPositionDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Position found but is not accessible by queue owner
          '404':
            description: Position found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/position/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Position (Requisitions)
        summary: >-
          Retrieves any element from the Position / Requisition queue based on the
          elementID
        description: >-
          Provide the queue name & elementID to retrieve Position / Requisition
          details. It allows to fetch any element from the queue.
        operationId: getPositionFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Position successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedPositionDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Position found but is not accessible by queue owner
          '404':
            description: Position found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/posting-target/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Posting (Adverts)
        summary: Retrieves the oldest element from the Advert queue
        description: >-
          Provide the queue name to retrieve details of the Adverts from the
          queue.
        operationId: getPostingTargetFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Posting target successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedPostingTargetDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Posting target found but is not accessible by queue owner
          '404':
            description: Posting target found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/posting-target/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Posting (Adverts)
        summary: Retrieves any element from the Advert based on the elementID
        description: >-
          Provide the queue name & elementID to retrieve Advert details. It allows
          to fetch any element from the queue.
        operationId: getPostingTargetFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Posting target successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedPostingTargetDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Posting target found but is not accessible by queue owner
          '404':
            description: Posting target found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/selectionstep/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Selection Step
        summary: Retrieves the oldest element from the Selection Step queue
        description: >-
          Provide the queue name to retrieve details of the selection step from
          the queue.
        operationId: getSelectionStepFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Selection step successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedSelectionStepDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Selection step found but is not accessible by queue owner
          '404':
            description: Selection step found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/selectionstep/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Selection Step
        summary: >-
          Retrieves any element from the Selection Step queue based on the
          elementID
        description: >-
          Provide the queue name & elementID to retrieve Selection Step details.
          It allows to fetch any element from the queue.
        operationId: getSelectionStepFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Selection step successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedSelectionStepDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Selection step found but is not accessible by queue owner
          '404':
            description: Selection step found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/timesheet/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Timesheets
        summary: Retrieves the oldest element from the Timesheets queue
        description: >-
          Provide the queue name to retrieve details of candidates' Timesheet from
          the queue.
        operationId: getTimesheetFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Timesheet successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedTimesheetDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Timesheet found but is not accessible by queue owner
          '404':
            description: Timesheet step found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/timesheet/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Timesheets
        summary: Retrieves any element from the Timesheet queue based on the elementID
        description: >-
          Provide the queue name & elementID to retrieve Timesheet details. It
          allows to fetch any element from the queue.
        operationId: getTimesheetFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Timesheet successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedTimesheetDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: Timesheet found but is not accessible by queue owner
          '404':
            description: Timesheet found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/user/{queueName}/oldest-element:
      get:
        tags:
          - Queues API - Users
        summary: Retrieves the oldest element from the Users queue
        description: Provide the queue name to retrieve details of the User from the queue
        operationId: getUserFromQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '200':
            description: User successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedUserDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: User found but is not accessible by queue owner
          '404':
            description: User found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/user/{queueName}/{elementId}:
      get:
        tags:
          - Queues API - Users
        summary: retrieves any element from the Users queue based on the elementID
        description: >-
          Provide the queue name & elementID to retrieve User details. It allows
          to fetch any element from the queue.
        operationId: getUserFromQueueById
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
          - name: elementId
            in: path
            description: elementId
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: User successfully fetched from queue
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/QueuedUserDto'
          '204':
            description: Queue is empty
          '400':
            description: Queue not found or queue name is invalid (blank or missing)
          '403':
            description: User found but is not accessible by queue owner
          '404':
            description: User found in queue but not in database set
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /queues/{queueName}:
      delete:
        tags:
          - Queues API
        summary: Allows to delete any queue which is available for the user
        description: >-
          This method allows to delete queues. If the user calling the method have
          acess to a queue and has enough rights to manage queues, all that is
          needed to delete is to provide a Queue name.
        operationId: removeQueue
        parameters:
          - name: queueName
            in: path
            description: queueName
            required: true
            schema:
              type: string
        responses:
          '204':
            description: Queue successfully removed
          '400':
            description: Queue could not been removed
          '404':
            description: Queue not found
          '409':
            description: >-
              Queue could not been removed because is used in the Selection
              Process configuration
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /role:
      get:
        tags:
          - Role API
        summary: List of roles
        description: Returns a list of roles. DTO structure depends on a GraphQL query.
        operationId: getRoles
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { roles(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RoleGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /role/{roleId}/tags:
      put:
        tags:
          - Role API
        summary: Add tags to a role
        description: ''
        operationId: addTagsToRole
        parameters:
          - name: roleId
            in: path
            description: Role id to be updated.
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleTagsDto'
          description: List of tags to be added to a given role.
          required: true
        responses:
          '204':
            description: tags successfully added
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Role with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - Role API
        summary: Remove tags from a role
        description: ''
        operationId: removeTagsFromRole
        parameters:
          - name: roleId
            in: path
            description: Role id to be updated.
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleTagsDto'
          description: List of tags to be removed from a given role.
          required: true
        responses:
          '204':
            description: tags successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Role with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /searchagent:
      get:
        tags:
          - Search Agent API
        summary: List of Search Agent
        description: >-
          Returns a list of Search Agent. DTO structure depends on a GraphQL
          query.
        operationId: getSearchAgents
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { searchAgents(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SearchAgentGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - Search Agent API
        summary: Creates Search Agent
        description: ''
        operationId: createSearchAgent
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAgentDto'
          description: search agent to be created
          required: true
        responses:
          '201':
            description: Search agent successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to create a search agent
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /searchagent/{token}:
      put:
        tags:
          - Search Agent API
        summary: Updates an existing search agent
        description: ''
        operationId: updateSearchAgent
        parameters:
          - name: token
            in: path
            description: search agent id to be updated
            required: true
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAgentDto'
          description: search agent to be updated
          required: true
        responses:
          '201':
            description: Search agent successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Search agent with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - Search Agent API
        summary: Delete search agent
        description: ''
        operationId: deleteSearchAgent
        parameters:
          - name: token
            in: path
            description: Search agent id to be deleted.
            required: true
            schema:
              type: string
        responses:
          '204':
            description: search agent successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Search agent with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /selection-process/application/{applicationId}/completePrescreening:
      put:
        tags:
          - Selection Process API
        summary: Completes prescreening step
        description: >-
          Prescreening step is mandatory in every selection process. Regardless of
          the configuration of other steps, to create the contract in Contract API
          the prescreening step must be closed first.
        operationId: completePrescreening
        parameters:
          - name: applicationId
            in: path
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: Prescreening step successfully processed
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: Application doesn't exist
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /selection-process/proceed:
      put:
        tags:
          - Selection Process API
        summary: Proceed candidate
        description: ''
        operationId: proceed
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProceedCandidateRequestDto'
          required: true
        responses:
          '200':
            description: Successful request
          '400':
            description: Invalid parameters provided
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /selection-process/reject:
      post:
        tags:
          - Selection Process API
        summary: Reject candidate
        description: ''
        operationId: rejectCandidate
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RejectCandidateRequestDto'
          required: true
        responses:
          default:
            description: successful operation
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /selection-process/rejection-reasons:
      get:
        tags:
          - Selection Process API
        summary: Allows to fetch the list of 'Reason of rejection' values
        description: >-
          When rejecting a candidate it is required to provide the value in the
          field 'Reason of rejection', which is a configurable field (LOV). This
          method allows to fetch all values of this field.
        operationId: getListOfRejectionReason
        responses:
          '200':
            description: Successful request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusCommentResponseDto'
          '400':
            description: Invalid parameters provided
        security:
          - username: []
          - password: []
          - apiKey: []
    /selection-process/selection-tasks:
      get:
        tags:
          - Selection Process API
        summary: >-
          Retrieve list & details of selection steps for a given candidate or
          application
        description: >-
          Use application_id_eq filter (provide the application ID) to fetch the
          list of selection steps for the specific application.
        operationId: getSteps
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { selectionTasks(first: 10, after: 0, sortBy: id, orderBy: ASC,
                where: {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SelectionTaskGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /selection-process/step/{stepId}/document:
      post:
        tags:
          - Selection Process API
        summary: Upload attachment to a step in the selection process
        description: ''
        operationId: uploadSelectionProcessDocument
        parameters:
          - name: stepId
            in: path
            description: step id
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Successful request
          '400':
            description: Invalid parameters provided
    /selection-process/step/{stepId}/documents:
      get:
        tags:
          - Selection Process API
        summary: Retrieve all documents attached to step in selection process
        description: ''
        operationId: getSelectionProcessStepDocuments
        parameters:
          - name: stepId
            in: path
            description: step id
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Successful request
          '400':
            description: Invalid parameters provided
    /selection-process/step/{stepId}/status:
      put:
        tags:
          - Selection Process API
        summary: Update the status of a step in selection process
        description: >-
          Available Selection Step statuses:


          **InterviewToSchedule** - is used when there is a need to schedule the
          meeting

          **Closed** - is used to close a step

          **OnHold** - is used when step is waiting for further processing

          **Cancel** - is used to cancel an interview
        operationId: updateSelectionProcessStatus
        parameters:
          - name: stepId
            in: path
            description: step id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionStepStatusUpdateDto'
          description: status update data
          required: true
        responses:
          '200':
            description: Successful request
          '400':
            description: Invalid parameters provided
    /timesheet:
      get:
        tags:
          - Timesheet API
        summary: List of timesheet
        description: >-
          Use filters to retrieve the specific Timesheet or list of timesheets for
          a given application ID, date range etc.
        operationId: getListOfTimeSheets
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { timeSheets(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimeSheetGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /timesheet/adjustment-reasons:
      get:
        tags:
          - Timesheet API
        summary: >-
          Retrieve the list of "Reasons for adjustment" (required when rejecting
          the Timesheet)
        description: Returns a list of available adjustment reasons
        operationId: getListOfReasonsForAdjustments
        responses:
          '200':
            description: List returned successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdjustmentReasonsResponseDto'
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /timesheet/{timesheetId}/approve:
      post:
        tags:
          - Timesheet API
        summary: Allows to approve a specific Timesheet
        description: ''
        operationId: approve
        parameters:
          - name: timesheetId
            in: path
            description: Id of timesheet
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetApproveRequestDto'
          description: Timesheet entities
        responses:
          '200':
            description: Timesheet approved
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /timesheet/{timesheetId}/reject:
      post:
        tags:
          - Timesheet API
        summary: Allows to reject a specific Timesheet
        description: >-
          To reject the Timesheet you need to provide ID but also Reason for
          Adjustment  which is mandatory. Use GET/timesheet/adjustment-reasons
          method to retrieve the list of available values.
        operationId: rejectTimesheet
        parameters:
          - name: timesheetId
            in: path
            description: Id of timesheet
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetRejectRequestDto'
          description: Timesheet entities
        responses:
          '200':
            description: Timesheet rejected
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /timesheet/{timesheetId}/submit:
      post:
        tags:
          - Timesheet API
        summary: Allows to submit a Timesheet for the candidate
        description: ''
        operationId: submit
        parameters:
          - name: timesheetId
            in: path
            description: Id of timesheet
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimesheetSubmitRequestDto'
          description: Timesheet entities
          required: true
        responses:
          '200':
            description: Timesheet submitted
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user:
      get:
        tags:
          - User API
        summary: List of users
        description: Returns a list of users. DTO structure depends on a GraphQL query.
        operationId: getUsers
        parameters:
          - name: query
            in: query
            description: >-
              This is a GraphQL query parameter. You can find more about GraphlQL
              [here](https://graphql.org/learn/ "Go to the GraphQL official
              documentation").
            required: true
            schema:
              type: string
              default: >-
                { users(first: 10, after: 0, sortBy: id, orderBy: ASC, where:
                {id_gt: 0}) { id } }
          - name: stream
            in: query
            description: Enables streaming mode
            required: false
            schema:
              type: boolean
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserGraphQlWrapperDto'
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      post:
        tags:
          - User API
        summary: Creates User
        description: ''
        operationId: createUser
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserDto'
          description: user data to be created
          required: true
        responses:
          '201':
            description: User successfully created
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to user preferences
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}:
      delete:
        tags:
          - User API
        summary: Delete user
        description: ''
        operationId: deleteUser
        parameters:
          - name: userId
            in: path
            description: user with a given id to be deleted
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: User successfully deleted
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      patch:
        tags:
          - User API
        summary: Update basic user data
        description: ''
        operationId: updateUser
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUserDto'
          description: user data to be updated
          required: true
        responses:
          '204':
            description: User data successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right to perform this operation
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right to user preferences
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/activate:
      put:
        tags:
          - User API
        summary: Activates user
        description: ''
        operationId: activateUser
        parameters:
          - name: userId
            in: path
            description: user with a given id to be activated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateUserDto'
          description: user new password and activation type
        responses:
          '204':
            description: User successfully activated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/assignDashboard:
      post:
        tags:
          - User API
        summary: Assign dashboards to user
        description: >-
          This method allows to assign dashboards to user in Talentlink. Example
          of correct request: 

          "recruiterDashboards":{"recruiter_dashboard_id_1":true,"recruiter_dashboard_id_2":false},
          "hiringManagerDashboard":false,"genericDashboard":true} 

          ,where recruiter_dashboard_id_1 and recruiter_dashboard_id_2 are valid
          recruiter dashboards id. 

          Remember, if you remove all dashboard assignments, then system
          automatically assign to user Generic Dashboard
        operationId: assignDashboardToUser
        parameters:
          - name: userId
            in: path
            description: Id of a user
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAssignmentRequestDto'
          description: Map of dashboards to be assigned to users
          required: true
        responses:
          '200':
            description: Dashboard assigned successfully
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/assignNamedAccessRoles:
      put:
        tags:
          - User API
        summary: Named Access Roles configuration
        description: ''
        operationId: assignNamedAccessRoles
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamedAccessRolesDto'
          description: Named roles to be assigned to user
          required: true
        responses:
          '204':
            description: Access roles successfully assigned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/availableDashboards:
      get:
        tags:
          - User API
        summary: List of available dashboards for given userId
        description: >
          This method return all available Recruiters Dashboards for given user.
          This list do not contain Generic Dashboard and Hiring Manager Dashboard.

          Provide valid user id to get list of dashboards. If you try obtain list
          of dashboards for unknown user you will receive 400 HTTP status.
        operationId: getAvailableDashboardsForUser
        parameters:
          - name: userId
            in: path
            description: Id of a user
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: List of available dashboards successfully returned
          '400':
            description: User not exist for given user Id
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/availableThemes:
      get:
        tags:
          - User API
        summary: List of available themes for given userId
        description: >
          This method return all available themes for given user. There are
          returned themes that the given user has access to.

          Provide valid user ID to get list of themes. If you try obtain list of
          themes for unknown user you will receive 400 HTTP status.

          Optionally there can be added department ID/IDs as a filter.
        operationId: getAvailableThemesForUser
        parameters:
          - name: userId
            in: path
            description: Id of a user
            required: true
            schema:
              type: integer
              format: int64
          - name: departmentId
            in: query
            description: Optional filter - department ID/IDs
            required: false
            explode: true
            schema:
              type: array
              items:
                type: integer
                format: int64
        responses:
          '200':
            description: List of available themes for given userId
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserThemesDto'
          '400':
            description: Given userId is not correct
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/changePassword:
      put:
        tags:
          - User API
        summary: Change user password
        description: ''
        operationId: changePassword
        parameters:
          - name: userId
            in: path
            description: Change user password with a given id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPasswordDto'
          description: New password
          required: true
        responses:
          '204':
            description: User password successfully changed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/copyRolesFromAnotherProfile:
      put:
        tags:
          - User API
        summary: Copy user roles to target user
        description: ''
        operationId: copyUserProfile
        parameters:
          - name: userId
            in: path
            description: Id of target user. This user will have roles copied from source user
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceUserIdDto'
          description: Id of source user. Roles of this user to be copied to target user
          required: true
        responses:
          '204':
            description: User profile successfully copied to target user
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/deactivate:
      put:
        tags:
          - User API
        summary: Deactivates user
        description: ''
        operationId: deactivateUser
        parameters:
          - name: userId
            in: path
            description: user with a given id to be deactivated
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '204':
            description: User successfully deactivated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/documentSecurity:
      put:
        tags:
          - User API
        summary: Document Security configuration
        description: ''
        operationId: updateDocumentSecurity
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSecurityConfigDto'
          description: Document Security to be added
          required: true
        responses:
          '204':
            description: Document security successfully added
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - User API
        summary: Document Security removal
        description: ''
        operationId: removeDocumentSecurity
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSecurityGroupIdDto'
          description: ID of Document Security Group to be removed
          required: true
        responses:
          '204':
            description: Document security successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '403':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/eventNotification:
      put:
        tags:
          - User API
        summary: Event notification configuration
        description: ''
        operationId: updateEventNotificationConfig
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicEventNotificationConfigurationDto'
          description: Event notification configuration to be updated
          required: true
        responses:
          '204':
            description: Event notification configuration successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/mailGateway:
      put:
        tags:
          - User API
        summary: Mail Gateway configuration
        description: ''
        operationId: updateMailGateway
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicMailGatewayConfigurationDto'
          description: Mail Gateway Configuration to be updated
          required: true
        responses:
          '204':
            description: Mail Gateway successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/roles:
      put:
        tags:
          - User API
        summary: Roles
        description: >-
          Provide roleId or roleTag. Providing roleId, system will add role
          assignment to user (tag is omitted). Providing tag type and tag name,
          system will add all roles marked with that tag to a given user.
        operationId: assignRoles
        parameters:
          - name: userId
            in: path
            description: Assign role to user with a given id
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignmentsDto'
          description: List of roles and departments to be assigned
          required: true
        responses:
          '204':
            description: User role successfully assigned
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
      delete:
        tags:
          - User API
        summary: Remove roles
        description: >-
          Provide roleId or roleTag. Providing roleId, system will remove role
          assignment from user (tag is omitted). Providing tag type and tag name,
          system will remove all roles marked with that tag from a given user.
        operationId: removeRoles
        parameters:
          - name: userId
            in: path
            description: Id of User to be modified
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignmentsDto'
          description: >-
            List of roles and departments to be removed. Departments may be null
            when role is of type Account or role should be removed from each
            assigned departments
          required: true
        responses:
          '204':
            description: User roles successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/roles/bulk:
      delete:
        tags:
          - User API
        summary: This method allows to remove all or groups of roles from the user
        description: >-
          <p>This method allows to delete multiple roles based on the input
          parameters. Please note that in Talentlink there are two types of
          roles:</p><ul><li>account roles (they work globally in all
          departments)</li><li>department roles (they work in the context of a
          specific department only)</li></ul><p>Additionally roles can be grouped
          with tags. So you can assign certain tags to roles which in turn allows
          to assign such groups of roles to the user or delete them likewise.</p>
        operationId: removeRolesInBulk
        parameters:
          - name: userId
            in: path
            description: Id of User to be modified
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDeletionDto'
          description: List of roles to be removed
          required: true
        responses:
          '204':
            description: User roles successfully removed
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
    /user/{userId}/userData:
      put:
        tags:
          - User API
        summary: User Data configuration
        description: ''
        operationId: updateUserData
        parameters:
          - name: userId
            in: path
            description: Id of a user to be updated
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUserDataDto'
          description: User Data to be updated
          required: true
        responses:
          '204':
            description: User Data successfully updated
          '400':
            description: Invalid parameters provided
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '401':
            description: User does not have the right
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
          '404':
            description: User with a given id does not exists
            headers:
              X-Request-Error:
                description: The detailed error message description
                schema:
                  type: string
        security:
          - username: []
          - password: []
          - apiKey: []
          - access-token: []
  servers:
    - url: https://apiproxy.shared.lumessetalentlink.com/tlk/rest
  components:
    requestBodies:
      CandidatePoolCreationDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidatePoolCreationDto'
        description: candidate pool
        required: true
      CandidateListDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateListDto'
        description: Candidate list
        required: true
      BasicContractDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicContractDto'
        description: contract
        required: true
      BasicDepartmentDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicDepartmentDto'
        description: departments
        required: true
      InterviewLocationBasicDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewLocationBasicDto'
        description: locationDto
        required: true
      UpdateLovPropertiesDto:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLovPropertiesDto'
        description: Update LOV properties
    securitySchemes:
      access-token:
        type: apiKey
        name: access-token
        in: header
      apiKey:
        type: apiKey
        name: api_key
        in: query
      password:
        type: apiKey
        name: password
        in: header
      username:
        type: apiKey
        name: username
        in: header
    schemas:
      AccountDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      AccountRoleDto:
        type: object
        required:
          - includeAll
        properties:
          includeAll:
            type: boolean
            default: false
          roleIds:
            type: array
            items:
              type: integer
              format: int64
          roleTags:
            type: array
            items:
              $ref: '#/components/schemas/RoleTagDto'
      ActionDto:
        type: object
        properties:
          href:
            type: string
          method:
            type: string
            enum:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
      ActivateUserDto:
        type: object
        properties:
          password:
            type: string
          activationType:
            type: string
            enum:
              - SENDACTIVATIONREQUESTTOEMAIL
              - ACTIVATEUSERLATER
              - ACTIVATEUSERNOWANDSENDEMAILNOTIFICATION
              - ACTIVATEUSERNOWWITHOUTSENDINGEMAILNOTIFICATION
              - ACTIVATEUSERNOWANDSENDONBOARDINGEMAILNOTIFICATION
      Activators:
        type: object
        properties:
          unlockers:
            type: array
            xml:
              name: criterion
            uniqueItems: true
            items:
              $ref: '#/components/schemas/LovHierarchedCriterion'
      AddressDto:
        type: object
        properties:
          address1:
            type: string
          address2:
            type: string
          city:
            type: string
          zip:
            type: string
          regionName:
            type: string
          homePhone:
            type: string
          workPhone:
            type: string
          mobilePhone:
            type: string
          fax:
            type: string
          alternateEmail:
            type: string
          personalWebSite:
            type: string
          preferredComChannel:
            type: string
          countryName:
            type: string
      AdjustmentReasonDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          value:
            type: string
      AdjustmentReasonsResponseDto:
        type: object
        properties:
          reasons:
            type: array
            items:
              $ref: '#/components/schemas/AdjustmentReasonDto'
      AdvertActionsDto:
        type: object
        properties:
          updateJobDescriptionUrl:
            $ref: '#/components/schemas/ActionDto'
      AdvertCustomFieldDto:
        type: object
        properties:
          label:
            type: string
          value:
            type: string
          unlocalizedLabel:
            type: string
          order:
            type: integer
            format: int32
      AdvertisementDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          siteLanguage:
            type: string
          postingTargetStatus:
            type: string
          jobNumber:
            type: string
          jobTitle:
            type: string
          comment:
            type: string
          recruitingCompany:
            type: string
          status:
            type: string
          duration:
            type: string
          postingStartDate:
            type: integer
            format: int64
          postingEndDate:
            type: integer
            format: int64
          postingUpdateDate:
            type: integer
            format: int64
          dueDate:
            type: integer
            format: int64
          location:
            type: string
          showCompensation:
            type: boolean
            default: false
          showRecruiter:
            type: boolean
            default: false
          compensationMinValue:
            type: number
            format: double
          compensationMaxValue:
            type: number
            format: double
          keyword:
            type: string
          language:
            type: string
          expectedStartDate:
            type: integer
            format: int64
          expectedEndDate:
            type: integer
            format: int64
          categoryLists:
            type: array
            xml:
              name: categoryList
              wrapped: true
            items:
              $ref: '#/components/schemas/CategoryListCriterion'
          organizations:
            type: array
            xml:
              name: organization
              wrapped: true
            items:
              $ref: '#/components/schemas/OrganizationCriterion'
          recruiters:
            type: array
            xml:
              name: recruiter
              wrapped: true
            items:
              $ref: '#/components/schemas/SimpleUserDto'
          operationals:
            type: array
            xml:
              name: operational
              wrapped: true
            items:
              $ref: '#/components/schemas/SimpleUserDto'
          customFields:
            type: array
            xml:
              name: customField
              wrapped: true
            items:
              $ref: '#/components/schemas/CustomField'
          customLovs:
            type: array
            xml:
              name: customLov
              wrapped: true
            items:
              $ref: '#/components/schemas/LovCriterion'
          configurableFields:
            type: array
            xml:
              name: configurableField
              wrapped: true
            items:
              $ref: '#/components/schemas/LovCriterion'
          standardLovs:
            type: array
            xml:
              name: standardLov
              wrapped: true
            items:
              $ref: '#/components/schemas/LovCriterion'
          applicationUrl:
            type: string
          strapline:
            type: string
          assignedImages:
            type: array
            xml:
              name: assignedImage
              wrapped: true
            items:
              $ref: '#/components/schemas/AssignedImageDto'
          requisitionInternalJobNumber:
            type: string
          jobLocations:
            type: array
            xml:
              name: jobLocation
              wrapped: true
            items:
              $ref: '#/components/schemas/JobLocationDto'
          sponsoredJobContext:
            $ref: '#/components/schemas/SponsoredJobContextDto'
          jobUpdateDate:
            type: integer
            format: int64
          postingUserEmail:
            type: string
          descriptionUrl:
            type: string
          indeedConfiguration:
            $ref: '#/components/schemas/IndeedConfigurationDto'
          contractCompensationPeriod:
            type: string
          contractDuration:
            type: integer
            format: int32
          standardRate:
            $ref: '#/components/schemas/StandardRateDto'
          structuredData:
            type: string
          generalApplication:
            type: boolean
            default: false
          externalJobNumber:
            type: string
        xml:
          name: advertisements
      AnswerDto:
        type: object
        properties:
          values:
            type: array
            xml:
              name: value
              wrapped: true
            items:
              type: string
          availableAnswers:
            type: array
            items:
              type: string
          children:
            type: array
            items:
              $ref: '#/components/schemas/AnswerDto'
          multipleAnswer:
            type: array
            items:
              $ref: '#/components/schemas/AnswerDto'
          dataType:
            type: string
          id:
            type: integer
            format: int64
          answerTypeFormat:
            type: string
          fatherid:
            type: integer
            format: int64
        xml:
          name: answer
      AnswerValidationDto:
        type: object
        properties:
          answerType:
            type: string
          required:
            type: boolean
            default: false
          otherAvailable:
            type: boolean
            default: false
          atLeast:
            type: integer
            format: int32
          atMost:
            type: integer
            format: int32
          maximumLength:
            type: integer
            format: int32
          minimumLength:
            type: integer
            format: int32
          maximumValue:
            type: number
            format: double
          minimumValue:
            type: number
            format: double
          earlierThanDate:
            type: string
          laterThanDate:
            type: string
          dateFormat:
            type: string
      AnswerValidationExtendedDto:
        type: object
        properties:
          answerType:
            type: string
          required:
            type: boolean
            default: false
          otherAvailable:
            type: boolean
            default: false
          atLeast:
            type: integer
            format: int32
          atMost:
            type: integer
            format: int32
          maximumLength:
            type: integer
            format: int32
          minimumLength:
            type: integer
            format: int32
          maximumValue:
            type: number
            format: double
          minimumValue:
            type: number
            format: double
          earlierThanDate:
            type: string
          laterThanDate:
            type: string
          dateFormat:
            type: string
          dateGapsRestricted:
            type: boolean
            default: false
          maximumDateGaps:
            type: integer
            format: int32
          maximumDateGapsUnit:
            type: string
          minWorkHistoryRequired:
            type: boolean
            default: false
          minWorkHistory:
            type: integer
            format: int32
          minWorkHistoryUnit:
            type: string
          defaultCountryCode:
            type: string
          laterThanUnit:
            type: string
          laterThanValue:
            type: integer
            format: int32
          earlierThanUnit:
            type: string
          earlierThanValue:
            type: integer
            format: int32
      AnsweredDto:
        type: object
        properties:
          questionsAnswered:
            type: array
            items:
              $ref: '#/components/schemas/QuestionAnsweredDto'
      AppSelectionTaskBasicDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      ApplicationDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          sourceChannelName:
            type: string
          sourceChannelType:
            type: string
          sourcingMedium:
            type: string
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          applicationDate:
            type: integer
            format: int64
          opening:
            $ref: '#/components/schemas/OpeningDto'
          status:
            type: string
          score:
            type: array
            items:
              $ref: '#/components/schemas/FullApplicationScoreDto'
          candidate:
            $ref: '#/components/schemas/CandidateDto'
      ApplicationFollowupDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          applicationStatus:
            type: string
          updateDate:
            type: integer
            format: int64
      ApplicationGlobalActionsDto:
        type: object
        properties:
          updateApplicationStatus:
            $ref: '#/components/schemas/ActionDto'
      ApplicationGraphQlContent:
        type: object
        properties:
          applications:
            type: array
            items:
              $ref: '#/components/schemas/FullApplicationDto'
          actions:
            $ref: '#/components/schemas/ApplicationGlobalActionsDto'
      ApplicationGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/ApplicationGraphQlContent'
      ApplicationStatusDto:
        type: object
        required:
          - applicationId
          - targetStatus
        properties:
          applicationId:
            type: integer
            format: int64
          targetStatus:
            type: string
          reasonOfChange:
            type: string
          reasonOfCompletion:
            type: string
          memo:
            type: string
          sendCancellationToCandidate:
            type: boolean
            default: false
          offerAccepted:
            type: boolean
            default: false
      ApplicationStatusReportDto:
        type: object
        properties:
          applicationId:
            type: integer
            format: int64
          status:
            type: string
            enum:
              - SUCCESS
              - ERROR
          message:
            type: string
      ApplicationsStatusDto:
        type: object
        required:
          - newStatuses
        properties:
          newStatuses:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationStatusDto'
      ApplicationsStatusReportDto:
        type: object
        properties:
          result:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationStatusReportDto'
      ApprovalConfigBasicDto:
        type: object
        properties:
          costCenterApprovalConfig:
            $ref: '#/components/schemas/CostCenterApprovalConfigBasicDto'
          timesheetWithoutCostCenterApprovalConfig:
            $ref: >-
              #/components/schemas/TimesheetWithoutCostCenterApprovalConfigBasicDto
      ApprovalConfigDto:
        type: object
        properties:
          costCenterApprovalConfig:
            $ref: '#/components/schemas/CostCenterApprovalConfigDto'
          timesheetWithoutCostCenterApprovalConfig:
            $ref: '#/components/schemas/TimesheetWithoutCostCenterApprovalConfigDto'
      ApprovalDto:
        type: object
        properties:
          approver:
            $ref: '#/components/schemas/IdDto'
          approval:
            type: string
            enum:
              - APPROVED
              - REJECTED
              - WAITING
              - ERROR
              - ARCHIVED
          start:
            type: integer
            format: int64
          actionDate:
            type: integer
            format: int64
          rejectionComment:
            type: string
          approvalComment:
            type: string
      ApprovalProcessFullDto:
        type: object
        properties:
          dueDate:
            type: integer
            format: int64
          approvalMethod:
            type: string
            enum:
              - collaborative
              - sequential
              - manually
          minApprovers:
            type: integer
            format: int32
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/ApproverDto'
          history:
            $ref: '#/components/schemas/ApprovalProcessHistoryDto'
          communicationToApprover:
            $ref: '#/components/schemas/CommunicationToApproverFullDto'
      ApprovalProcessHistoryDto:
        type: object
        properties:
          minNumOfApprovals:
            type: integer
            format: int32
          approvals:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalDto'
      ApprovalSignatureDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          lastUpdate:
            type: integer
            format: int64
          overdue:
            type: boolean
            default: false
          status:
            type: string
          sigOrder:
            type: integer
            format: int32
          step:
            $ref: '#/components/schemas/ApprovalStepDto'
          user:
            $ref: '#/components/schemas/UserDto'
      ApprovalStepDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          stepOrder:
            type: integer
            format: int32
          opening:
            $ref: '#/components/schemas/OpeningDto'
          signatures:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/ApprovalSignatureDto'
      ApproverBasicDto:
        type: object
        required:
          - order
          - user
        properties:
          order:
            type: integer
            format: int32
          lovValue:
            type: string
          user:
            $ref: '#/components/schemas/IdDto'
          stepOrder:
            type: integer
            format: int32
          userId:
            type: integer
            format: int64
      ApproverDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          fullName:
            type: string
          email:
            type: string
      ApproverFullDto:
        type: object
        required:
          - order
        properties:
          order:
            type: integer
            format: int32
          lovValue:
            type: string
          user:
            $ref: '#/components/schemas/UserDto'
          stepOrder:
            type: integer
            format: int32
      ArchivingSummariesDto:
        type: object
        properties:
          archivingSummaries:
            type: array
            items:
              $ref: '#/components/schemas/ArchivingSummaryDto'
      ArchivingSummaryDto:
        type: object
        properties:
          candidateId:
            type: integer
            format: int64
          type:
            type: string
          status:
            type: string
          dataPrivacy:
            type: string
          activeApplication:
            type: boolean
            default: false
          timesheet:
            type: boolean
            default: false
          ofccpActive:
            type: boolean
            default: false
          eligible:
            type: boolean
            default: false
      AssessmentTestDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          description:
            type: string
          externalTestId:
            type: string
          parametersData:
            type: string
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/TestParameterDto'
          screeningParameters:
            type: array
            items:
              $ref: '#/components/schemas/TestParameterDto'
          externalSystem:
            $ref: '#/components/schemas/ExternalSystemDto'
          testGroup:
            $ref: '#/components/schemas/AssessmentTestGroupDto'
          parametersForm:
            $ref: '#/components/schemas/FormDto'
          selectionTaskModels:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/SelectionTaskFullDto'
          backgroundChecks:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/BackgroundCheckDto'
      AssessmentTestGroupDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          description:
            type: string
          externalSystem:
            $ref: '#/components/schemas/ExternalSystemDto'
          father:
            $ref: '#/components/schemas/AssessmentTestGroupDto'
          assessmentTests:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/AssessmentTestDto'
      AssignedImageDto:
        type: object
        properties:
          id:
            type: string
          url:
            type: string
          altText:
            type: string
          position:
            type: string
            enum:
              - Header1
              - Header2
              - TopOfJobDescription
              - Bottom
              - Logo
        xml:
          name: assignedImage
      AssignedOptionDto:
        type: object
        properties:
          assignedOptionId:
            type: integer
            format: int64
          dependingQuestionIds:
            type: array
            items:
              type: integer
              format: int64
          optionId:
            type: integer
            format: int64
          order:
            type: integer
            format: int64
          optionScore:
            type: integer
            format: int64
          hasScore:
            type: boolean
            default: false
          isDefault:
            type: boolean
            default: false
          unlocalValue:
            type: string
          localizedLabel:
            type: string
      AssignedQuestionDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          label:
            type: string
          order:
            type: integer
            format: int64
          type:
            type: string
          localizedLabel:
            type: string
          questionId:
            type: integer
            format: int64
          index:
            type: integer
            format: int32
          required:
            type: boolean
            default: false
          localizedLabels:
            type: array
            items:
              $ref: '#/components/schemas/LocalizedValueDto'
          answer:
            $ref: '#/components/schemas/AnswerDto'
          children:
            type: array
            items:
              $ref: '#/components/schemas/AssignedQuestionDto'
          matrixCells:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/AssignedQuestionDto'
          simple:
            type: boolean
            default: false
      AttachedFileDto:
        type: object
        required:
          - data
          - docLanguage
          - fileName
        properties:
          fileName:
            type: string
            description: file name
          description:
            type: string
          docLanguage:
            type: string
            description: language of the file
          publishable:
            type: boolean
            default: false
          data:
            type: string
            description: file content encoded in base64
      AttachmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          externalId:
            type: integer
            format: int64
      AttachmentFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          externalId:
            type: integer
            format: int64
          name:
            type: string
          fileLabel:
            type: string
          language:
            type: string
          base64EncodedContent:
            type: string
      AttachmentsDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          mimeType:
            type: string
          fileName:
            type: string
          description:
            type: string
          fileUrl:
            $ref: '#/components/schemas/ActionDto'
          author:
            type: string
          creationDate:
            type: integer
            format: int64
          documentGroup:
            type: string
          type:
            type: string
      AuditDataEmbeddableDto:
        type: object
        properties:
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
      AuthorizedRecruitmentDto:
        type: object
        properties:
          externalCandidate:
            type: boolean
            default: false
          employee:
            type: boolean
            default: false
      AvailableApplicationStatusDto:
        type: object
        properties:
          translation:
            type: string
          lovValue:
            type: string
      AvailableApplicationStatusesDto:
        type: object
        properties:
          listOfStatuses:
            type: array
            items:
              $ref: '#/components/schemas/AvailableApplicationStatusDto'
      BackgroundCheckDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          appSelectionTask:
            $ref: '#/components/schemas/SelectionTaskFullDto'
          userCreated:
            $ref: '#/components/schemas/UserDto'
          userUpdated:
            $ref: '#/components/schemas/UserDto'
          createDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          assessTest:
            $ref: '#/components/schemas/AssessmentTestDto'
          orderStatus:
            type: string
          resultStatus:
            type: string
          externalId:
            type: string
          recruiterUrl:
            type: string
          recruiterRedirectUrl:
            type: string
          screenings:
            type: array
            items:
              $ref: '#/components/schemas/ScreeningDto'
          backgroundCheckStatusHistory:
            type: array
            items:
              $ref: '#/components/schemas/BackgroundCheckStatusHistoryDto'
      BackgroundCheckStatusHistoryDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          bgCheck:
            $ref: '#/components/schemas/BackgroundCheckDto'
          statusMessage:
            type: string
          statusCreateDate:
            type: integer
            format: int64
          userCreate:
            $ref: '#/components/schemas/UserDto'
          orderStatus:
            type: string
          resultStatus:
            type: string
      BasicApprovalProcessDto:
        type: object
        properties:
          dueDate:
            type: integer
            format: int64
          approvalMethod:
            type: string
            enum:
              - collaborative
              - sequential
              - manually
          minApprovers:
            type: integer
            format: int32
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/BasicApproverDto'
          communicationToApprover:
            $ref: '#/components/schemas/CommunicationToApproverDto'
          useAlwaysRecommendation:
            type: boolean
            default: false
      BasicApproverDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      BasicCampaignTypeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      BasicCandidateConsentDto:
        type: object
        required:
          - consentId
          - status
        properties:
          consentId:
            $ref: '#/components/schemas/IdDto'
          consentType:
            type: string
          status:
            type: string
          comment:
            type: string
      BasicCandidateDto:
        type: object
        required:
          - firstname
          - lastname
        properties:
          type:
            type: string
          contractor:
            type: boolean
            default: false
          initialType:
            type: string
          firstname:
            type: string
          lastname:
            type: string
          middlename:
            type: string
          email:
            type: string
          academicTitle:
            type: string
          srcChannelName:
            type: string
          origin:
            type: string
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          socialSecurityNumber:
            type: string
          anonymous:
            type: boolean
            default: false
          formOfAddress:
            type: string
          address:
            $ref: '#/components/schemas/AddressDto'
          reference:
            $ref: '#/components/schemas/ReferenceDto'
          personalData:
            $ref: '#/components/schemas/PersonalDataDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          sourceChannelType:
            type: string
          status:
            type: string
          sourcingMedium:
            type: string
          uiLanguage:
            type: string
          dataPrivacyStatement:
            type: string
          expectedArchiving:
            type: integer
            format: int64
          memo:
            type: string
          linkedInId:
            type: string
          partiallyDeleted:
            type: boolean
            default: false
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          internalCandidateId:
            type: string
          position:
            $ref: '#/components/schemas/PositionDto'
          candidateConsents:
            type: array
            items:
              $ref: '#/components/schemas/BasicCandidateConsentDto'
          tags:
            type: array
            items:
              $ref: '#/components/schemas/BasicCandidateTagDto'
          openingId:
            type: integer
            format: int64
          poolId:
            type: integer
            format: int64
          campaignTypes:
            type: array
            items:
              $ref: '#/components/schemas/BasicCampaignTypeDto'
          referrer:
            $ref: '#/components/schemas/ReferrerDto'
      BasicCandidateTagDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          icon:
            type: string
          category:
            $ref: '#/components/schemas/BasicTagCategoryDto'
      BasicContractDto:
        type: object
        required:
          - contractType
          - plannedStartDate
        properties:
          approved:
            type: boolean
            default: false
          accepted:
            type: boolean
            default: false
          acceptApproved:
            type: boolean
            default: false
          administrativeComments:
            type: string
          plannedStartDate:
            type: integer
            format: int64
          plannedEndDate:
            type: integer
            format: int64
          scheduleType:
            type: string
          workAmount:
            type: number
            format: float
          workPeriod:
            type: string
          workUnit:
            type: string
          bonusCondition:
            type: string
          contractType:
            type: string
          length:
            type: number
            format: float
          lengthUnit:
            type: string
          permanentDetails:
            $ref: '#/components/schemas/PermanentDetailsDto'
          contractorDetails:
            $ref: '#/components/schemas/ContractorDetailsDto'
          allowConcurrentContracts:
            type: boolean
            default: false
          allowHeadCountSkip:
            type: boolean
            default: false
          application:
            $ref: '#/components/schemas/IdDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/BasicFreeFormFieldDto'
          approvalProcess:
            $ref: '#/components/schemas/BasicApprovalProcessDto'
          timesheetConfig:
            $ref: '#/components/schemas/TimesheetConfigBasicDto'
          midPeriodsConfigs:
            type: array
            items:
              $ref: '#/components/schemas/MidPeriodConfigBasicDto'
      BasicDepartmentConfigDto:
        type: object
        properties:
          interviewScheduleInJobContext:
            type: boolean
            default: false
          hideManageMyDataRemoveButton:
            type: boolean
            default: false
      BasicDepartmentDto:
        type: object
        required:
          - code
          - name
        properties:
          name:
            type: string
          code:
            type: string
          description:
            type: string
          documentSecurityRule:
            type: integer
            format: int32
          dataPrivacyStatement:
            type: string
          dataPrivacyStatementForHires:
            type: string
          invitationValidity:
            type: integer
            format: int64
          currencyCost:
            type: string
          hideDateOfBirth:
            type: boolean
            default: false
          searchByAgeEnabled:
            type: boolean
            default: false
          parentId:
            type: integer
            format: int64
          translations:
            $ref: '#/components/schemas/TranslationsDto'
          keyNameId:
            type: integer
            format: int64
          ofccpMaxCandidates:
            type: integer
            format: int64
          enforceInviteToExpressInterest:
            type: boolean
            default: false
          activateSearchRecording:
            type: boolean
            default: false
          ofccpLinkToJobShowJobs:
            type: boolean
            default: false
          enforceSalaryRangeCheck:
            type: boolean
            default: false
          mobileAccess:
            type: boolean
            default: false
          themes:
            type: array
            items:
              $ref: '#/components/schemas/ThemeDto'
          emailSignatureID:
            type: integer
            format: int64
          letterSignatureID:
            type: integer
            format: int64
          awdOwner:
            type: string
          awdReminderID:
            type: integer
            format: int64
          awdReminderPeriod:
            type: integer
            format: int64
          awdQualifyExpiresReminderID:
            type: integer
            format: int64
          calendarEventWsIntegrationURL:
            type: string
          useAccountCalendarEventWsIntegrationURL:
            type: boolean
            default: false
          enforceSalaryRangeCheckApproval:
            type: boolean
            default: false
          ratingScaleId:
            type: integer
            format: int64
          impJobDescAvailable:
            type: boolean
            default: false
          encryptApplicants:
            type: boolean
            default: false
          rejectionReasonRequired:
            type: boolean
            default: false
          country:
            type: string
          location:
            type: string
          mobileMDMAccess:
            type: boolean
            default: false
          departmentConfig:
            $ref: '#/components/schemas/BasicDepartmentConfigDto'
      BasicEventNotificationConfigurationDto:
        type: object
        required:
          - activated
          - alertCandidate
          - alertMessage
          - alertNewTimesheets
          - frequency
          - plainTextAlerts
          - taskNotifications
        properties:
          frequency:
            type: string
            enum:
              - ONCE_A_DAY
              - EVERY_HOUR
          activated:
            type: boolean
            default: false
          alertCandidate:
            type: boolean
            default: false
          alertMessage:
            type: boolean
            default: false
          alertNewTimesheets:
            type: boolean
            default: false
          plainTextAlerts:
            type: boolean
            default: false
          taskNotificationActive:
            type: boolean
            default: false
          taskNotifications:
            type: array
            items:
              $ref: '#/components/schemas/TaskNotificationDto'
      BasicFreeFormFieldDto:
        type: object
        required:
          - lovId
        properties:
          lovId:
            type: integer
            format: int64
          value:
            type: string
      BasicLovDto:
        type: object
        required:
          - nameLovId
          - valueLovId
        properties:
          nameLovId:
            type: integer
            format: int64
          valueLovId:
            type: integer
            format: int64
      BasicMailGatewayConfigurationDto:
        type: object
        required:
          - authorizedEmail1
          - srcChannelName
          - srcChannelType
        properties:
          activated:
            type: boolean
            default: false
          authorizedEmail1:
            type: string
          authorizedEmail2:
            type: string
          authorizedEmail3:
            type: string
          useSequentialCreation1:
            type: boolean
            default: false
          useSequentialCreation2:
            type: boolean
            default: false
          useSequentialCreation3:
            type: boolean
            default: false
          srcChannelName:
            type: string
          srcChannelType:
            type: string
          privacy:
            type: string
          folder:
            $ref: '#/components/schemas/CandidatePoolDto'
      BasicTagCategoryDto:
        type: object
        properties:
          name:
            type: string
      CampaignTypeAssignmentDto:
        type: object
        required:
          - campaignTypeIds
          - candidateIds
        properties:
          candidateIds:
            type: array
            items:
              type: integer
              format: int64
          campaignTypeIds:
            type: array
            items:
              type: integer
              format: int64
      CampaignTypeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          channel:
            type: string
            enum:
              - EMAIL
      CandidateConsentDto:
        type: object
        properties:
          consentDto:
            $ref: '#/components/schemas/ConsentDto'
          status:
            type: string
            enum:
              - NOT_REQUESTED
              - REQUESTED
              - GRANTED
              - REVOKED_BY_USER
              - WITHDRAWN_BY_CANDIDATE
              - EXPIRED
              - UNKNOWN
          lastGrantedDate:
            type: integer
            format: int64
          lastRevokedDate:
            type: integer
            format: int64
          lastRequestedDate:
            type: integer
            format: int64
          lastRequestedUser:
            $ref: '#/components/schemas/UserDto'
          lastGrantedUser:
            $ref: '#/components/schemas/UserDto'
          lastRevokedUser:
            $ref: '#/components/schemas/UserDto'
          comment:
            type: string
          consentType:
            type: string
      CandidateDeletionStatusDto:
        type: object
        properties:
          candidateDeletedCompletely:
            type: boolean
            default: false
      CandidateDocumentDto:
        type: object
        required:
          - base64File
          - docType
          - fileName
        properties:
          fileName:
            type: string
          description:
            type: string
          docType:
            type: string
            enum:
              - RESUME
              - COVER_LETTER
              - MAIL
              - OFFER_LETTER
              - OTHER
          language:
            type: string
          base64File:
            type: string
          applicationId:
            type: integer
            format: int64
      CandidateDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          type:
            type: string
          contractor:
            type: boolean
            default: false
          initialType:
            type: string
          firstname:
            type: string
          lastname:
            type: string
          middlename:
            type: string
      CandidateFullDto:
        type: object
        required:
          - firstname
          - lastname
        properties:
          type:
            type: string
          contractor:
            type: boolean
            default: false
          initialType:
            type: string
          firstname:
            type: string
          lastname:
            type: string
          middlename:
            type: string
          email:
            type: string
          academicTitle:
            type: string
          srcChannelName:
            type: string
          origin:
            type: string
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          socialSecurityNumber:
            type: string
          anonymous:
            type: boolean
            default: false
          formOfAddress:
            type: string
          address:
            $ref: '#/components/schemas/AddressDto'
          reference:
            $ref: '#/components/schemas/ReferenceDto'
          personalData:
            $ref: '#/components/schemas/PersonalDataDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          sourceChannelType:
            type: string
          status:
            type: string
          sourcingMedium:
            type: string
          uiLanguage:
            type: string
          dataPrivacyStatement:
            type: string
          expectedArchiving:
            type: integer
            format: int64
          memo:
            type: string
          linkedInId:
            type: string
          partiallyDeleted:
            type: boolean
            default: false
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          internalCandidateId:
            type: string
          position:
            $ref: '#/components/schemas/PositionDto'
          id:
            type: integer
            format: int64
          archivedManually:
            type: boolean
            default: false
          archived:
            type: boolean
            default: false
          sendDeletionNotification:
            type: boolean
            default: false
          inactiveDate:
            type: integer
            format: int64
          archiveDateSinceProfileCreated:
            type: integer
            format: int64
          archiveDateSinceConsentGiven:
            type: integer
            format: int64
          applications:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationDto'
          pools:
            type: array
            items:
              $ref: '#/components/schemas/CandidatePoolDto'
          talentDatabaseConsent:
            type: string
          candidateConsents:
            type: array
            items:
              $ref: '#/components/schemas/CandidateConsentDto'
          tags:
            type: array
            items:
              $ref: '#/components/schemas/CandidateTagFullDto'
          campaignTypes:
            type: array
            items:
              $ref: '#/components/schemas/CampaignTypeDto'
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentsDto'
          documents:
            type: array
            items:
              $ref: '#/components/schemas/DocumentBaseDto'
          referrals:
            type: array
            items:
              $ref: '#/components/schemas/ReferralDto'
      CandidateGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
          markForArchiving:
            $ref: '#/components/schemas/ActionDto'
          unmarkFromArchiving:
            $ref: '#/components/schemas/ActionDto'
          fetchCandidateSummary:
            $ref: '#/components/schemas/ActionDto'
      CandidateGraphQlContent:
        type: object
        properties:
          candidates:
            type: array
            items:
              $ref: '#/components/schemas/CandidateFullDto'
          actions:
            $ref: '#/components/schemas/CandidateGlobalActionsDto'
      CandidateGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/CandidateGraphQlContent'
      CandidateListDto:
        type: object
        required:
          - candidatesIds
        properties:
          candidatesIds:
            type: array
            items:
              type: integer
              format: int64
      CandidatePoolActionsDto:
        type: object
        properties:
          update:
            $ref: '#/components/schemas/ActionDto'
      CandidatePoolCreationDto:
        type: object
        required:
          - departmentId
          - name
        properties:
          name:
            type: string
            description: name of the Pool
          description:
            type: string
          outOfMatching:
            type: boolean
            description: >-
              If set to Yes, then candidates assigned to such a pool will be
              excluded from Job Matching feature.
            default: false
          country:
            type: string
            description: Name of the country which is assigned to the Pool
          departmentId:
            type: integer
            format: int64
            description: ID of the department to which the Pool is assigned
      CandidatePoolDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      CandidatePoolFullDto:
        type: object
        required:
          - departmentId
          - name
        properties:
          name:
            type: string
            description: name of the Pool
          description:
            type: string
          outOfMatching:
            type: boolean
            description: >-
              If set to Yes, then candidates assigned to such a pool will be
              excluded from Job Matching feature.
            default: false
          country:
            type: string
            description: Name of the country which is assigned to the Pool
          id:
            type: integer
            format: int64
            description: unique ID of a Pool
          creationDate:
            type: integer
            format: int64
            description: date when the Pool was created
          updateDate:
            type: integer
            format: int64
            description: date when the Pool has been updated
          defaultFolder:
            type: boolean
            description: >-
              distinguishes between user's private pool (value=Yes) and Department
              Shared Pool (value=No)
            default: false
          folderType:
            type: string
          departmentId:
            type: integer
            format: int64
            description: ID of the department to which the Pool is assigned
          creationUserId:
            type: integer
            format: int64
            description: ID of the user who created the Pool
          updateUserId:
            type: integer
            format: int64
            description: ID of the most recent user who updated the Pool
          actions:
            $ref: '#/components/schemas/CandidatePoolActionsDto'
      CandidatePoolGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      CandidatePoolGraphQlContent:
        type: object
        properties:
          candidatePools:
            type: array
            items:
              $ref: '#/components/schemas/CandidatePoolFullDto'
          actions:
            $ref: '#/components/schemas/CandidatePoolGlobalActionsDto'
      CandidatePoolGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/CandidatePoolGraphQlContent'
      CandidateTagAssignmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          icon:
            type: string
          category:
            $ref: '#/components/schemas/BasicTagCategoryDto'
          department:
            $ref: '#/components/schemas/IdDto'
      CandidateTagFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          icon:
            type: string
          addedDate:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
          user:
            $ref: '#/components/schemas/UserDto'
          category:
            $ref: '#/components/schemas/TagCategoryDto'
      CategoryDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          categoryList:
            $ref: '#/components/schemas/CategoryListDto'
          order:
            type: integer
            format: int32
          site:
            $ref: '#/components/schemas/SiteDto'
      CategoryListCriterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
          categoryNo:
            type: integer
            format: int64
            xml:
              name: order
          criteria:
            type: array
            xml:
              name: criterion
              wrapped: true
            items:
              $ref: '#/components/schemas/Criterion'
        xml:
          name: criterion
      CategoryListDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          site:
            $ref: '#/components/schemas/SiteDto'
          name:
            type: string
          type:
            type: boolean
            default: false
          order:
            type: integer
            format: int32
          account:
            $ref: '#/components/schemas/AccountDto'
      CategoryNameDto:
        type: object
        properties:
          order:
            type: integer
            format: int32
          categoryIds:
            type: array
            items:
              type: integer
              format: int64
      Channel:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          status:
            type: string
          liveURL:
            type: string
          postingStartDate:
            type: string
          postingEndDate:
            type: string
          statusDescription:
            type: string
            xml:
              name: statusReason
        xml:
          name: channel
      ChildrenFreeFormFieldDto:
        type: object
        properties:
          lovId:
            type: integer
            format: int64
          name:
            type: string
          translatedName:
            type: string
          order:
            type: integer
            format: int32
          required:
            type: boolean
            default: false
          dateFormat:
            type: string
      CommunicationToApproverAttachmentsDto:
        type: object
        properties:
          candidateDocuments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentDto'
          sharedDocuments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentDto'
          temporaryDocuments:
            type: array
            items:
              $ref: '#/components/schemas/TemporaryAttachmentDto'
      CommunicationToApproverAttachmentsFullDto:
        type: object
        properties:
          candidateDocuments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentFullDto'
          sharedDocuments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentFullDto'
          temporaryDocuments:
            type: array
            items:
              $ref: '#/components/schemas/TemporaryAttachmentDto'
      CommunicationToApproverDto:
        type: object
        properties:
          subject:
            type: string
          content:
            type: string
          priority:
            type: string
            enum:
              - LOW
              - NORMAL
              - HIGH
          sensitivityName:
            type: string
            enum:
              - NORMAL
              - PERSONAL
              - PRIVATE
              - CONFIDENTIAL
          templateId:
            type: integer
            format: int64
          securedAttachments:
            type: boolean
            default: false
          attachments:
            $ref: '#/components/schemas/CommunicationToApproverAttachmentsDto'
      CommunicationToApproverFullDto:
        type: object
        properties:
          subject:
            type: string
          content:
            type: string
          priority:
            type: string
            enum:
              - LOW
              - NORMAL
              - HIGH
          sensitivityName:
            type: string
            enum:
              - NORMAL
              - PERSONAL
              - PRIVATE
              - CONFIDENTIAL
          templateId:
            type: integer
            format: int64
          securedAttachments:
            type: boolean
            default: false
          templateName:
            type: string
          templateLanguage:
            type: string
          attachments:
            $ref: '#/components/schemas/CommunicationToApproverAttachmentsFullDto'
      CompensationDto:
        type: object
        properties:
          minimum:
            type: number
          maximum:
            type: number
          period:
            type: string
          currency:
            type: string
      ConfigurableFieldsBasicDto:
        type: object
        properties:
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/BasicFreeFormFieldDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
      ConfigurableFieldsFullDto:
        type: object
        properties:
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldDto'
      ConfigurableLovDto:
        type: object
        properties:
          lovId:
            type: integer
            format: int64
          name:
            type: string
          translatedName:
            type: string
          active:
            type: boolean
            default: false
          defaultValue:
            type: integer
            format: int64
          possibleValues:
            type: object
            additionalProperties:
              type: string
          order:
            type: integer
            format: int32
          required:
            type: boolean
            default: false
          tsTrigger:
            type: boolean
            default: false
      ConfigurationDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/UserDto'
          type:
            type: string
            enum:
              - GUI_DESKTOP
              - GUI_PANEL
              - GUI_TABLE
              - GUI_FILTER
              - GUI_CUSTOM
              - WORKSPACE_MANAGEMENT
              - SYSTEM_STATUS
              - GUI_COREINFO_WIDGET
              - FILTER_KEY
              - GUI_POSITION_WIDGETS
              - GUI_JOB_WIDGETS
              - GUI_JOBFAMILY_WIDGETS
              - NEW_UI_CURRENT_STATE
              - DEFAULT_EMAIL_DOMAIN
              - ENFORCE_SMTP_COMMUNICATION
              - ESIGNATURE_LAST_SELECTED_OPTIONS
              - ESIGNATURE_CONFIGURATION_STATE
              - DEFAULT_CAMPAIGN_EMAIL_DOMAIN
              - RECRUITER_DASHBOARD
              - SIMPLE_DASHBOARD
              - RECRUITER_DASHBOARD_FILTER
              - DASHBOARD_MANAGEMENT_FILTER
              - JOB_LIST
              - DASHBOARD_MANAGEMENT
              - OFFERED_APPLICATIONS
              - POSTING_LIST
              - OPENING_KPI
              - CANDIDATES_LIST
          name:
            type: string
          description:
            type: string
          shared:
            type: boolean
            default: false
          configurationData:
            type: string
          genuineChildren:
            type: array
            items:
              $ref: '#/components/schemas/ConfigurationDto'
          parent:
            $ref: '#/components/schemas/ConfigurationDto'
          referenceTo:
            $ref: '#/components/schemas/ConfigurationDto'
          order:
            type: integer
            format: int32
          helperData:
            type: string
          lastUpdate:
            type: integer
            format: int64
          children:
            type: array
            items:
              $ref: '#/components/schemas/ConfigurationDto'
          deleted:
            type: boolean
            default: false
      ConsentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          type:
            type: string
            enum:
              - TALENT_POOL
              - APPLICATION
              - LINKEDIN_RSC
              - ALL_CONTEXT_CONSENT
              - UNKNOWN
          language:
            type: string
            enum:
              - AR
              - AT
              - BG
              - BR
              - CA
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - ID
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MX
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - WA
              - XX
          introductionText:
            type: string
          fullText:
            type: string
          department:
            $ref: '#/components/schemas/DepartmentDto'
          defaultConsent:
            type: boolean
            default: false
          current:
            type: boolean
            default: false
          version:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/UserDto'
          createdDate:
            type: integer
            format: int64
          uniqueIdentifier:
            type: string
      ConsentGraphQlContent:
        type: object
        properties:
          consents:
            type: array
            items:
              $ref: '#/components/schemas/ConsentDto'
          actions:
            $ref: '#/components/schemas/DepartmentGlobalActionsDto'
      ConsentGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/ConsentGraphQlContent'
      ContractGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      ContractGraphQlContent:
        type: object
        properties:
          contracts:
            type: array
            items:
              $ref: '#/components/schemas/FullContractDto'
          actions:
            $ref: '#/components/schemas/ContractGlobalActionsDto'
      ContractGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/ContractGraphQlContent'
      ContractIdDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      ContractorDetailsDto:
        type: object
        required:
          - contractor
          - totalCost
          - totalCurrency
        properties:
          contractorType:
            type: string
          flexibilityMinDate:
            type: integer
            format: int64
          flexibilityMaxDate:
            type: integer
            format: int64
          totalCost:
            type: number
          benchmarkRate:
            type: number
          gainShareRate:
            type: number
          totalClientChargeRate:
            type: number
          standardCurrency:
            type: string
          totalCurrency:
            type: string
          additionalInfo:
            type: string
          tsActive:
            type: boolean
            default: false
          contractor:
            $ref: '#/components/schemas/ContractorDto'
          rates:
            type: array
            items:
              $ref: '#/components/schemas/RateDto'
          expenseReimbursed:
            type: boolean
            default: false
          splitCostPerCostCenter:
            type: boolean
            default: false
          awdQualified:
            type: boolean
            default: false
      ContractorDto:
        type: object
        properties:
          name:
            type: string
          groupName:
            type: string
          address1:
            type: string
          address2:
            type: string
          address3:
            type: string
          address4:
            type: string
          city:
            type: string
          zipCode:
            type: string
          phone:
            type: string
          contactName:
            type: string
          legalId:
            type: string
          taxId:
            type: string
          paymentTerms:
            type: string
          bankName:
            type: string
          bankAccountName:
            type: string
          bankAccountNumber:
            type: string
          bankSortCode:
            type: string
          bankContactName:
            type: string
          bankContactPhone:
            type: string
          bankCity:
            type: string
          iban:
            type: string
          swift:
            type: string
          country:
            type: string
          agencyId:
            type: integer
            format: int64
      CostCenterApprovalConfigBasicDto:
        type: object
        properties:
          skipNewTimesheetGenerate:
            type: boolean
            default: false
          costCenterConfig:
            type: array
            items:
              $ref: '#/components/schemas/CostCenterConfigBasicDto'
      CostCenterApprovalConfigDto:
        type: object
        properties:
          costCenterType:
            $ref: '#/components/schemas/LovDto'
          costCenterConfig:
            type: array
            items:
              $ref: '#/components/schemas/CostCenterConfigDto'
      CostCenterConfigBasicDto:
        type: object
        properties:
          costCenter:
            $ref: '#/components/schemas/BasicLovDto'
          steps:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApprovalStepBasicDto'
          cost:
            type: number
      CostCenterConfigDto:
        type: object
        properties:
          costCenter:
            $ref: '#/components/schemas/LovDto'
          steps:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApprovalStepDto'
          cost:
            type: number
      CreateLovDto:
        type: object
        required:
          - entries
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          entries:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
      CreateLovEntriesDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
      CreateLovEntriesWithDataFormatAndRequiredDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/CreateLovEntryWithDataFormatAndRequiredDto'
      CreateLovEntriesWithDataValueDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/CreateLovEntryWithDataValueDto'
      CreateLovEntryDto:
        type: object
        required:
          - lovId
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          lovId:
            type: integer
            format: int64
      CreateLovEntryWithDataFormatAndRequiredDto:
        type: object
        required:
          - dataFormat
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          dataFormat:
            type: string
          required:
            type: boolean
            default: false
      CreateLovEntryWithDataValueDto:
        type: object
        required:
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          dataValue:
            type: number
      CreateLovWithDataTypeDto:
        type: object
        required:
          - entries
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          dataType:
            type: string
          entries:
            type: array
            items:
              $ref: '#/components/schemas/CreateLovEntryWithDataValueDto'
      CreateLovWithEntriesWithDataFormatAndRequiredDto:
        type: object
        required:
          - entries
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          entries:
            type: array
            items:
              $ref: '#/components/schemas/CreateLovEntryWithDataFormatAndRequiredDto'
      CreateUserDto:
        type: object
        required:
          - email
          - firstName
          - language
          - lastName
          - login
          - password
          - userActivation
        properties:
          login:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          language:
            type: string
          mss:
            type: boolean
            default: false
          disabledLoginPage:
            type: boolean
            default: false
          password:
            type: string
          dateFormat:
            type: string
          timeFormat:
            type: string
            enum:
              - H12
              - H24
          userActivation:
            type: string
            enum:
              - SENDACTIVATIONREQUESTTOEMAIL
              - ACTIVATEUSERLATER
              - ACTIVATEUSERNOWANDSENDEMAILNOTIFICATION
              - ACTIVATEUSERNOWWITHOUTSENDINGEMAILNOTIFICATION
              - ACTIVATEUSERNOWANDSENDONBOARDINGEMAILNOTIFICATION
          userPreferences:
            $ref: '#/components/schemas/UserPreferencesDto'
      Criterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
        xml:
          name: criterion
      CustomField:
        type: object
        properties:
          label:
            type: string
          value:
            type: string
          unlocalizedLabel:
            type: string
          order:
            type: integer
            format: int32
        xml:
          name: customField
      CustomFieldDto:
        type: object
        properties:
          label:
            type: string
          value:
            type: string
          unlocalizedLabel:
            type: string
          order:
            type: integer
            format: int32
      CustomFieldSkillDto:
        type: object
        properties:
          sectionOrder:
            type: integer
            format: int64
          skills:
            type: array
            items:
              $ref: '#/components/schemas/SkillDto'
      CustomLovGroup:
        type: object
        properties:
          customLovs:
            type: array
            items:
              type: integer
              format: int64
      CustomRateDto:
        type: object
        properties:
          name:
            type: string
          value:
            type: number
      DashboardAssignmentRequestDto:
        type: object
        properties:
          genericDashboard:
            type: boolean
            default: false
          hiringManagerDashboard:
            type: boolean
            default: false
          recruiterDashboards:
            type: object
            additionalProperties:
              type: boolean
      DeactivateLovDto:
        type: object
        required:
          - lovsIds
        properties:
          lovsIds:
            type: array
            items:
              type: integer
              format: int64
      DepartmentActionsDto:
        type: object
        properties:
          update:
            $ref: '#/components/schemas/ActionDto'
          move:
            $ref: '#/components/schemas/ActionDto'
          delete:
            $ref: '#/components/schemas/ActionDto'
          permanentContractConfig:
            $ref: '#/components/schemas/ActionDto'
          contractorContractConfig:
            $ref: '#/components/schemas/ActionDto'
          positionStructure:
            $ref: '#/components/schemas/ActionDto'
      DepartmentConfigDto:
        type: object
        properties:
          interviewScheduleInJobContext:
            type: boolean
            default: false
          hideManageMyDataRemoveButton:
            type: boolean
            default: false
          contractServerMerge:
            type: boolean
            default: false
          txtSystemNotification:
            type: string
          systemNotificationAuthorUsername:
            type: string
          dataPrivacyDisplayOption:
            type: string
      DepartmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          parentId:
            type: integer
            format: int64
          level:
            type: integer
            format: int32
      DepartmentFullDto:
        type: object
        required:
          - code
          - name
        properties:
          name:
            type: string
          code:
            type: string
          description:
            type: string
          documentSecurityRule:
            type: integer
            format: int32
          dataPrivacyStatement:
            type: string
          dataPrivacyStatementForHires:
            type: string
          invitationValidity:
            type: integer
            format: int64
          currencyCost:
            type: string
          hideDateOfBirth:
            type: boolean
            default: false
          searchByAgeEnabled:
            type: boolean
            default: false
          parentId:
            type: integer
            format: int64
          translations:
            $ref: '#/components/schemas/TranslationsDto'
          keyNameId:
            type: integer
            format: int64
          ofccpMaxCandidates:
            type: integer
            format: int64
          enforceInviteToExpressInterest:
            type: boolean
            default: false
          activateSearchRecording:
            type: boolean
            default: false
          ofccpLinkToJobShowJobs:
            type: boolean
            default: false
          enforceSalaryRangeCheck:
            type: boolean
            default: false
          mobileAccess:
            type: boolean
            default: false
          themes:
            type: array
            items:
              $ref: '#/components/schemas/ThemeDto'
          emailSignatureID:
            type: integer
            format: int64
          letterSignatureID:
            type: integer
            format: int64
          awdOwner:
            type: string
          awdReminderID:
            type: integer
            format: int64
          awdReminderPeriod:
            type: integer
            format: int64
          awdQualifyExpiresReminderID:
            type: integer
            format: int64
          calendarEventWsIntegrationURL:
            type: string
          useAccountCalendarEventWsIntegrationURL:
            type: boolean
            default: false
          enforceSalaryRangeCheckApproval:
            type: boolean
            default: false
          ratingScaleId:
            type: integer
            format: int64
          impJobDescAvailable:
            type: boolean
            default: false
          encryptApplicants:
            type: boolean
            default: false
          rejectionReasonRequired:
            type: boolean
            default: false
          country:
            type: string
          location:
            type: string
          mobileMDMAccess:
            type: boolean
            default: false
          departmentConfig:
            $ref: '#/components/schemas/DepartmentConfigDto'
          id:
            type: integer
            format: int64
          level:
            type: integer
            format: int32
          active:
            type: boolean
            default: false
          actions:
            $ref: '#/components/schemas/DepartmentActionsDto'
      DepartmentGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      DepartmentGraphQlContent:
        type: object
        properties:
          departments:
            type: array
            items:
              $ref: '#/components/schemas/DepartmentFullDto'
          actions:
            $ref: '#/components/schemas/DepartmentGlobalActionsDto'
      DepartmentGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/DepartmentGraphQlContent'
      DepartmentIdDto:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
      DepartmentIdNameDto:
        type: object
        required:
          - id
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      DepartmentRoleDeletionDto:
        type: object
        required:
          - includeAll
        properties:
          includeAll:
            type: boolean
            default: false
          roleIds:
            type: array
            items:
              type: integer
              format: int64
          roleTags:
            type: array
            items:
              $ref: '#/components/schemas/RoleTagDto'
      DepartmentRoleDto:
        type: object
        properties:
          departments:
            $ref: '#/components/schemas/RoleDepartmentDeletionDto'
          roles:
            $ref: '#/components/schemas/DepartmentRoleDeletionDto'
      DimensionConfigDto:
        type: object
        properties:
          dimensionLovId:
            type: integer
            format: int64
          matrixLovIds:
            type: array
            items:
              type: integer
              format: int64
      DocumentBaseDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          applicationId:
            type: integer
            format: int64
          name:
            type: string
          description:
            type: string
          documentType:
            type: string
          docType:
            type: string
            enum:
              - BO_CP
              - BO_CPE
              - BO_CPI
              - BO_CPEC
              - BO_CPIC
              - FO_CP
              - FO_PIF
              - FO_RPM
              - FO_CNT
              - BEST_PIF
              - PROFILE
              - R
              - RESUME
              - CL
              - COVER_LETTER
              - COVERLETTER
              - DQ
              - I
              - IATTACHMENT
              - Q
              - MAIL
              - SEARCH
              - AGENCY_CONTRACT
              - DOCUMENT_PACK
              - EXPENSE
              - EXTSYSATTACHMENT
              - PHOTO
              - PORTRAIT
              - THUMBNAIL
              - OFFER_LETTER
              - OTHER
              - DOCUSIGN_PACKAGE
              - BGCK_REP
              - LINKEDIN_INMAIL
              - SMS
              - RESPONSE_EMAILS
              - TRACKED_MAIL
              - SB_ATTACHMENT
              - HIRINGFORM
              - MAILTRACK
          objectType:
            type: string
          author:
            type: string
          creationDate:
            type: integer
            format: int64
          lastUpdateDate:
            type: integer
            format: int64
        xml:
          name: document
      DocumentSecurityConfigDto:
        type: object
        required:
          - documentSecurityGroups
        properties:
          documentSecurityGroups:
            type: array
            items:
              $ref: '#/components/schemas/DocumentSecurityGroupDto'
      DocumentSecurityDto:
        type: object
        properties:
          groupId:
            type: integer
            format: int64
          matrix:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
      DocumentSecurityGroupDto:
        type: object
        properties:
          dimensionsConfig:
            type: array
            items:
              $ref: '#/components/schemas/DimensionConfigDto'
      DocumentSecurityGroupIdDto:
        type: object
        properties:
          groupId:
            type: integer
            format: int64
      DurationDto:
        type: object
        properties:
          count:
            type: integer
            format: int32
          period:
            type: string
      EditUserDataDto:
        type: object
        properties:
          userId:
            type: integer
            format: int64
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
          fffs:
            type: array
            items:
              $ref: '#/components/schemas/BasicFreeFormFieldDto'
      EditUserDto:
        type: object
        properties:
          login:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          language:
            type: string
          mss:
            type: boolean
            default: false
          disabledLoginPage:
            type: boolean
            default: false
          id:
            type: integer
            format: int64
          mustChangePassword:
            type: boolean
            default: false
          userPreferences:
            $ref: '#/components/schemas/UserPreferencesDto'
      EmployeeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      EventNotificationConfigurationDto:
        type: object
        required:
          - activated
          - alertCandidate
          - alertMessage
          - alertNewTimesheets
          - frequency
          - plainTextAlerts
          - taskNotifications
        properties:
          frequency:
            type: string
            enum:
              - ONCE_A_DAY
              - EVERY_HOUR
          activated:
            type: boolean
            default: false
          alertCandidate:
            type: boolean
            default: false
          alertMessage:
            type: boolean
            default: false
          alertNewTimesheets:
            type: boolean
            default: false
          plainTextAlerts:
            type: boolean
            default: false
          taskNotificationActive:
            type: boolean
            default: false
          taskNotifications:
            type: array
            items:
              $ref: '#/components/schemas/TaskNotificationDto'
          id:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          email:
            type: string
      EventServiceConfDto:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/EventServiceConfKeyDto'
          filter:
            $ref: '#/components/schemas/ConfigurationDto'
          creator:
            $ref: '#/components/schemas/UserDto'
          creationDate:
            type: integer
            format: int64
      EventServiceConfKeyDto:
        type: object
        properties:
          queue:
            $ref: '#/components/schemas/TlkQueueDto'
          eventType:
            type: string
            enum:
              - CANDIDATE_CREATED_EVENT
              - CANDIDATE_CHANGED_EVENT
              - CANDIDATE_DPS_ABOUT_TO_EXPIRE
              - APPLICATION_CREATED_EVENT
              - APPLICATION_STATUS_CHANGED_EVENT
              - APPLICATION_STEP_DECISION_EVENT
              - JOB_APPROVED_EVENT
              - JOB_STATUS_CHANGED_EVENT
              - JOB_CREATED_EVENT
              - NEW_VERSION_OF_CONTRACT_OR_EXTENSION_CREATED_EVENT
              - VERSION_OF_CONTRACT_OR_EXTENSION_APPROVED
              - VERSION_OF_CONTRACT_OR_EXTENSION_ACCEPTED
              - TIMESHEET_APPROVED_EVENT
              - NEW_EXTERNAL_SYSTEM_REQUEST_CREATED
              - UPDATE_EXTERNAL_SYSTEM_REQUEST
              - CANCEL_EXTERNAL_SYSTEM_REQUEST
              - NEW_EXTERNAL_SYSTEM_CREATED
              - POSTING_CREATED
              - CANDIDATE_ARCHIVED_OR_DELETED_EVENT
              - USER_CREATED_EVENT
              - USER_DATA_UPDATED_EVENT
              - USER_REMOVED_EVENT
      ExpectedContractDatesDto:
        type: object
        properties:
          start:
            type: integer
            format: int64
          end:
            type: integer
            format: int64
      ExtSysStatusMappingDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          externalSystem:
            $ref: '#/components/schemas/ExternalSystemDto'
          lovId_External:
            type: integer
            format: int64
          lovId_Internal:
            type: integer
            format: int64
      ExternalSystemDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          global:
            type: boolean
            default: false
          parameters:
            type: string
          description:
            type: string
          active:
            type: boolean
            default: false
          clientId:
            type: string
          password:
            type: string
          redirectionUrl:
            type: string
          defaultEndPoint:
            type: string
          type:
            $ref: '#/components/schemas/ExternalSystemTypeDto'
          form:
            $ref: '#/components/schemas/FormDto'
          immediateAssessment:
            type: boolean
            default: false
          useTlkApi:
            type: boolean
            default: false
          redirectCandidate:
            type: boolean
            default: false
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          jsonParams:
            $ref: '#/components/schemas/JSONObject'
          vendor_UserId:
            type: integer
            format: int64
          interfaceId:
            type: integer
            format: int64
          statusMappings:
            type: array
            items:
              $ref: '#/components/schemas/ExtSysStatusMappingDto'
          departments:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/DepartmentDto'
          assessmentTestGroups:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/AssessmentTestGroupDto'
          updateDate:
            type: integer
            format: int64
          updateUserId:
            type: integer
            format: int64
      ExternalSystemTypeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      FormAssignedQuestionDto:
        type: object
        properties:
          assignedQuestionId:
            type: integer
            format: int64
          questionId:
            type: integer
            format: int64
          questionLabel:
            type: string
          questionType:
            type: string
          localizedValues:
            type: array
            items:
              $ref: '#/components/schemas/LocalizedValueDto'
          assignedOptions:
            type: array
            items:
              $ref: '#/components/schemas/AssignedOptionDto'
          answerValidation:
            $ref: '#/components/schemas/AnswerValidationDto'
          answerValidationExtended:
            $ref: '#/components/schemas/AnswerValidationExtendedDto'
          competencyCategoryName:
            type: string
          questionLayout:
            $ref: '#/components/schemas/QuestionLayoutDto'
          childQuestions:
            type: array
            items:
              $ref: '#/components/schemas/FormAssignedQuestionDto'
      FormDto:
        type: object
        properties:
          formId:
            type: integer
            format: int64
          name:
            type: string
          description:
            type: string
          masterLanguage:
            type: string
          assignedQuestions:
            type: array
            items:
              $ref: '#/components/schemas/FormAssignedQuestionDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/ListOfValuesDto'
          competencyCategories:
            type: array
            items:
              $ref: '#/components/schemas/QuestionCompetencyCategoryDto'
          comment:
            type: string
          departmentId:
            type: integer
            format: int64
          translatedLanguage:
            type: string
          dataPrivacy:
            type: string
          formDivider:
            type: integer
            format: int64
          answerableManyTimes:
            type: boolean
            default: false
          displayType:
            type: string
          archive:
            type: boolean
            default: false
      FormulaDto:
        type: object
        properties:
          name:
            type: string
          translations:
            $ref: '#/components/schemas/TranslationsDto'
          rateType:
            type: string
            enum:
              - ChargeRate
              - SupplierRate
              - PayRate
              - CustomRate
              - Pay2Supplier
              - Supplier2Charge
              - Overall
          unit:
            type: string
            enum:
              - PERCENT
              - CURRENCY
          input:
            type: boolean
            default: false
      FreeFormFieldDto:
        type: object
        required:
          - lovId
        properties:
          lovId:
            type: integer
            format: int64
          value:
            type: string
          fatherLovName:
            type: string
          fatherLovId:
            type: integer
            format: int64
          fatherLovNameTranslations:
            $ref: '#/components/schemas/TranslationsDto'
          name:
            type: string
          lovTranslations:
            $ref: '#/components/schemas/TranslationsDto'
      FreeFormFieldTriggerDto:
        type: object
        properties:
          lovId:
            type: integer
            format: int64
          name:
            type: string
          translatedName:
            type: string
          order:
            type: integer
            format: int32
          children:
            type: array
            items:
              $ref: '#/components/schemas/ChildrenFreeFormFieldDto'
          active:
            type: boolean
            default: false
          required:
            type: boolean
            default: false
          tsTrigger:
            type: boolean
            default: false
      FullApplicationDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          sourceChannelName:
            type: string
          sourceChannelType:
            type: string
          sourcingMedium:
            type: string
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          applicationDate:
            type: integer
            format: int64
          opening:
            $ref: '#/components/schemas/OpeningDto'
          status:
            type: string
          score:
            type: array
            items:
              $ref: '#/components/schemas/FullApplicationScoreDto'
          candidate:
            $ref: '#/components/schemas/CandidateDto'
          memo:
            type: string
          shortListed:
            type: boolean
            default: false
          archived:
            type: boolean
            default: false
          activeApplication:
            type: boolean
            default: false
          hasContracts:
            type: boolean
            default: false
          completionReason:
            type: string
          statusComment:
            type: string
          documents:
            type: array
            items:
              $ref: '#/components/schemas/DocumentBaseDto'
          applicationFollowups:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationFollowupDto'
          candidateConsents:
            type: array
            items:
              $ref: '#/components/schemas/CandidateConsentDto'
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentsDto'
      FullApplicationScoreDto:
        type: object
        required:
          - score
          - system
        properties:
          score:
            type: number
            format: double
          system:
            type: string
          info:
            type: string
          updateDate:
            type: integer
            format: int64
      FullContractDto:
        type: object
        required:
          - contractType
          - plannedStartDate
        properties:
          approved:
            type: boolean
            default: false
          accepted:
            type: boolean
            default: false
          acceptApproved:
            type: boolean
            default: false
          administrativeComments:
            type: string
          plannedStartDate:
            type: integer
            format: int64
          plannedEndDate:
            type: integer
            format: int64
          scheduleType:
            type: string
          workAmount:
            type: number
            format: float
          workPeriod:
            type: string
          workUnit:
            type: string
          bonusCondition:
            type: string
          contractType:
            type: string
          length:
            type: number
            format: float
          lengthUnit:
            type: string
          permanentDetails:
            $ref: '#/components/schemas/PermanentDetailsDto'
          contractorDetails:
            $ref: '#/components/schemas/ContractorDetailsDto'
          id:
            type: integer
            format: int64
          version:
            type: integer
            format: int32
          extension:
            type: integer
            format: int32
          current:
            type: boolean
            default: false
          revision:
            type: boolean
            default: false
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          approval:
            type: integer
            format: int64
          contractStatus:
            type: string
          negotiationStatus:
            type: string
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldDto'
          application:
            $ref: '#/components/schemas/ApplicationDto'
          timesheetConfig:
            $ref: '#/components/schemas/TimesheetConfigDto'
          approvalProcess:
            $ref: '#/components/schemas/ApprovalProcessFullDto'
          midPeriodsConfigs:
            type: array
            items:
              $ref: '#/components/schemas/MidPeriodConfigDto'
          deleted:
            type: boolean
            default: false
      IdDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      ImageAssignmentDto:
        type: object
        properties:
          id:
            type: string
          url:
            type: string
          position:
            type: string
            enum:
              - Header1
              - Header2
              - TopOfJobDescription
              - Bottom
              - Logo
      IndeedApplyEndpointsDto:
        type: object
        properties:
          submissionsUrl:
            type: string
          questionsUrl:
            type: string
        xml:
          name: indeedApplyEndpoints
      IndeedConfigurationDto:
        type: object
        properties:
          organic:
            type: boolean
            default: false
          sponsored:
            type: boolean
            default: false
          indeedApply:
            type: boolean
            default: false
          indeedApplyEndpoints:
            $ref: '#/components/schemas/IndeedApplyEndpointsDto'
        xml:
          name: indeedConfiguration
      InternalMessageFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          senderUser:
            $ref: '#/components/schemas/UserDto'
          receiverUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          msgStatus:
            type: string
          title:
            type: string
          sentDate:
            type: integer
            format: int64
          dueDate:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updationDate:
            type: integer
            format: int64
          newMessageStatus:
            type: integer
            format: int32
          msgType:
            type: string
            enum:
              - ToDo
              - Notification
              - PersonalToDo
          actionType:
            type: string
            enum:
              - Hiring
              - Selection
              - Timesheet
              - AHNotification
              - Session
              - Schedule
              - Availability
              - JobApproval
              - Feedback
              - Referral
              - RequestExtension
              - NoAction
              - OfferNegotiation
              - AwdComplient
              - VisaRenewal
              - Onboarding
              - PerformanceManagement
              - DevelopmentActivities
              - WorkflowStep
              - Learning
              - BackgroundCheck
              - Course
              - LearningBundle
              - InvitationDeclined
              - InvalidConnectionDetails
              - SelfDefinedTask
              - SelectAdditionalSlots
              - AvailabilityModification
          overdue:
            type: boolean
            default: false
          archived:
            type: boolean
            default: false
          comment:
            type: string
          selectionTask:
            $ref: '#/components/schemas/AppSelectionTaskBasicDto'
          processInstance:
            $ref: '#/components/schemas/ProcessInstanceDto'
          state:
            $ref: '#/components/schemas/StateDto'
          workflowStepInstance:
            $ref: '#/components/schemas/WorkflowStepInstanceDto'
          jobApprovalTask:
            $ref: '#/components/schemas/ApprovalStepDto'
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentDto'
          contract:
            $ref: '#/components/schemas/ContractIdDto'
          timeSheet:
            $ref: '#/components/schemas/TimeSheetBasicDto'
          account:
            $ref: '#/components/schemas/AccountDto'
          visaDetails:
            $ref: '#/components/schemas/VisaDetailsDto'
          sendEvent:
            type: array
            items:
              $ref: '#/components/schemas/SendEventDto'
          externalCorrelation:
            type: string
          mail:
            $ref: '#/components/schemas/MailDto'
      InternalMessageGraphQlContent:
        type: object
        properties:
          internalMessages:
            type: array
            items:
              $ref: '#/components/schemas/InternalMessageFullDto'
      InternalMessageGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/InternalMessageGraphQlContent'
      InterviewDatesDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          interview:
            $ref: '#/components/schemas/InterviewDto'
          startDate:
            type: integer
            format: int64
          numericStartDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          maxSeat:
            type: integer
            format: int64
          account:
            $ref: '#/components/schemas/AccountDto'
          location:
            $ref: '#/components/schemas/LocationDto'
          user:
            $ref: '#/components/schemas/UserDto'
          availability:
            type: boolean
            default: false
          reminder:
            type: boolean
            default: false
          meetingPlace:
            type: string
          participants:
            type: array
            items:
              $ref: '#/components/schemas/ParticipantDto'
          leadInterviewer:
            $ref: '#/components/schemas/UserDto'
          closingUnits:
            type: integer
            format: int64
          version:
            type: integer
            format: int32
          unitsType:
            type: string
          interviewScheduleSlot:
            $ref: '#/components/schemas/InterviewScheduleSlotDto'
          selfBookingSlot:
            $ref: '#/components/schemas/SelfBookingSlotDto'
      InterviewDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          opening:
            $ref: '#/components/schemas/OpeningDto'
          subject:
            type: string
          message:
            type: string
          name:
            type: string
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          schedulingStatus:
            type: string
          zoneRegion:
            type: string
          interviewToken:
            type: string
          account:
            $ref: '#/components/schemas/AccountDto'
          interviewType:
            type: string
            enum:
              - Interview
              - Session
          cancelComment:
            type: string
          mailInvitation:
            $ref: '#/components/schemas/MailDto'
          mailConfirmCand:
            $ref: '#/components/schemas/MailDto'
          mailConfirmInter:
            $ref: '#/components/schemas/MailDto'
          connectedUser:
            $ref: '#/components/schemas/UserDto'
          sessionCategory:
            $ref: '#/components/schemas/SessionCategoryDto'
          organizerUser:
            $ref: '#/components/schemas/UserDto'
          sessionStatus:
            type: string
          teamFeedback:
            type: boolean
            default: false
          bookedSeats:
            type: integer
            format: int64
          invitationsSent:
            type: integer
            format: int64
          interviewDates:
            type: array
            items:
              $ref: '#/components/schemas/InterviewDatesDto'
          participants:
            type: array
            items:
              $ref: '#/components/schemas/ParticipantDto'
          leadInterviewer:
            $ref: '#/components/schemas/UserDto'
          interviewerTeam:
            type: array
            items:
              $ref: '#/components/schemas/UserDto'
          selectionSteps:
            type: array
            items:
              $ref: '#/components/schemas/SelectionTaskFullDto'
          checkValidation:
            type: boolean
            default: false
          sendConfirmationToCandidate:
            type: boolean
            default: false
          sendConfirmationToInterviewer:
            type: boolean
            default: false
          externalCorrelationId:
            type: string
          sendingSchema:
            type: string
            enum:
              - INVITE_ALL
              - INVITE_INTERVIEWERS
              - INVITE_CANDIDATE
              - DO_NOT_SEND_INVITATION
              - MANUAL_SENDING_SCHEMA
          onlineMeetingId:
            type: string
          onlineMeetingUrl:
            type: string
          selfBookingSlots:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/SelfBookingSlotDto'
          selfBookingSlotCutOffTime:
            type: integer
            format: int64
          selfBookingId:
            type: string
          sendPotentialMeetingsForSlots:
            type: boolean
            default: false
          fromInterviewSchedule:
            type: boolean
            default: false
          fromSmartCalendar:
            type: boolean
            default: false
          notificationSent:
            type: boolean
            default: false
      InterviewLocationBasicDto:
        type: object
        required:
          - address1
          - city
          - country
          - standard
          - timezone
          - title
        properties:
          title:
            type: string
          address1:
            type: string
          address2:
            type: string
          city:
            type: string
          zipcode:
            type: string
          region:
            type: string
          country:
            type: string
          room:
            type: string
          timezone:
            type: string
          local:
            type: boolean
            default: false
          standard:
            type: boolean
            default: false
          email:
            type: string
          departments:
            type: array
            items:
              $ref: '#/components/schemas/IdDto'
      InterviewLocationFullDto:
        type: object
        required:
          - address1
          - city
          - country
          - standard
          - timezone
          - title
        properties:
          title:
            type: string
          address1:
            type: string
          address2:
            type: string
          city:
            type: string
          zipcode:
            type: string
          region:
            type: string
          country:
            type: string
          room:
            type: string
          timezone:
            type: string
          local:
            type: boolean
            default: false
          standard:
            type: boolean
            default: false
          email:
            type: string
          id:
            type: integer
            format: int64
          departments:
            type: array
            items:
              $ref: '#/components/schemas/DepartmentDto'
          owner:
            $ref: '#/components/schemas/UserDto'
      InterviewLocationGraphQlContent:
        type: object
        properties:
          locations:
            type: array
            items:
              $ref: '#/components/schemas/InterviewLocationFullDto'
      InterviewLocationGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/InterviewLocationGraphQlContent'
      InterviewScheduleSlotDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          opening:
            $ref: '#/components/schemas/OpeningDto'
          selectionTaskModel:
            $ref: '#/components/schemas/SelectionTaskFullDto'
          interviewDates:
            $ref: '#/components/schemas/InterviewDatesDto'
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          location:
            $ref: '#/components/schemas/LocationDto'
          leadInterviewer:
            $ref: '#/components/schemas/UserDto'
          externalUserEmail:
            type: string
          additionalInterviewers:
            $ref: '#/components/schemas/UserGroupDto'
      JSONObject:
        type: object
      JobAdTemplateDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
      JobDTO:
        type: object
        properties:
          advertId:
            type: integer
            format: int64
          jobboards:
            type: array
            xml:
              name: jobboard
              wrapped: true
            items:
              $ref: '#/components/schemas/JobboardDTO'
        xml:
          name: job
      JobDescriptionUrlDto:
        type: object
        properties:
          jobDescriptionUrl:
            type: string
      JobLocationDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          departmentId:
            type: integer
            format: int64
          creationUserId:
            type: integer
            format: int64
          updateUserId:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          country:
            type: string
          region:
            type: string
          regionName:
            type: string
          city:
            type: string
          street:
            type: string
          streetNumber:
            type: string
          zipCode:
            type: string
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          regionLovName:
            type: string
        xml:
          name: jobLocation
      JobboardConfigurationDto:
        type: object
        properties:
          indeed:
            $ref: '#/components/schemas/IndeedConfigurationDto'
      JobboardDTO:
        type: object
        properties:
          postingAction:
            type: string
          postingStatus:
            type: string
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          errorCode:
            type: string
          channels:
            type: array
            xml:
              name: channel
              wrapped: true
            items:
              $ref: '#/components/schemas/Channel'
          postingActionAsEnum:
            type: string
            enum:
              - INSERT
              - UPDATE
              - CHANNEL_DELETE
              - DELETE
              - NAVIGATE
              - RESEND_WITHOUT_CHANGES
          postingStatusAsEnum:
            type: string
            enum:
              - INITIAL
              - PENDING
              - MULTIPOST_PENDING
              - ACTIVE
              - DEFERRED
              - QUEUED_FOR_FUTURE_POSTING
              - INACTIVE
              - DELETED
              - EXPIRED
              - FAILED
              - ERROR
              - SUCCESS
              - CANCELLED
          statusDescription:
            type: string
            xml:
              name: message
        xml:
          name: jobboard
      KeyNameDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          account:
            $ref: '#/components/schemas/AccountDto'
          labels:
            type: object
            additionalProperties:
              type: string
          labelsProxy:
            type: object
            additionalProperties:
              type: string
          jsonlabels:
            type: string
      LinkToJobsDto:
        type: object
        properties:
          requisitionIds:
            type: array
            items:
              type: integer
              format: int64
          copyAllDocuments:
            type: boolean
            default: false
          documentsIds:
            type: array
            items:
              type: integer
              format: int64
      ListOfValuesDto:
        type: object
        properties:
          values:
            type: array
            items:
              $ref: '#/components/schemas/LovValueDto'
          lovName:
            type: string
      LocalizedValueDto:
        type: object
        properties:
          lang:
            type: string
          value:
            type: string
      LocationActionsDto:
        type: object
        properties:
          update:
            $ref: '#/components/schemas/ActionDto'
          delete:
            $ref: '#/components/schemas/ActionDto'
      LocationBasicDto:
        type: object
        required:
          - departmentId
          - name
        properties:
          name:
            type: string
          country:
            type: string
          countryCodeAlpha2:
            type: string
          countryCodeAlpha3:
            type: string
          region:
            type: string
          regionName:
            type: string
          city:
            type: string
          street:
            type: string
          zipCode:
            type: string
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          departmentId:
            type: integer
            format: int64
          remote:
            type: boolean
            default: false
      LocationDto:
        type: object
        required:
          - departmentId
          - name
        properties:
          name:
            type: string
          country:
            type: string
          countryCodeAlpha2:
            type: string
          countryCodeAlpha3:
            type: string
          region:
            type: string
          regionName:
            type: string
          city:
            type: string
          street:
            type: string
          zipCode:
            type: string
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          departmentId:
            type: integer
            format: int64
          remote:
            type: boolean
            default: false
          id:
            type: integer
            format: int64
          countryTranslations:
            $ref: '#/components/schemas/TranslationsDto'
          regionTranslations:
            $ref: '#/components/schemas/TranslationsDto'
      LocationFullDto:
        type: object
        required:
          - name
        properties:
          name:
            type: string
          country:
            type: string
          countryCodeAlpha2:
            type: string
          countryCodeAlpha3:
            type: string
          region:
            type: string
          regionName:
            type: string
          city:
            type: string
          street:
            type: string
          zipCode:
            type: string
          latitude:
            type: number
            format: double
          longitude:
            type: number
            format: double
          remote:
            type: boolean
            default: false
          id:
            type: integer
            format: int64
          countryTranslations:
            $ref: '#/components/schemas/TranslationsDto'
          regionTranslations:
            $ref: '#/components/schemas/TranslationsDto'
          creationDate:
            type: integer
            format: int64
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateDate:
            type: integer
            format: int64
          updateUser:
            $ref: '#/components/schemas/UserDto'
          department:
            $ref: '#/components/schemas/DepartmentDto'
          actions:
            $ref: '#/components/schemas/LocationActionsDto'
      LocationGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      LocationGraphQlContent:
        type: object
        properties:
          locations:
            type: array
            items:
              $ref: '#/components/schemas/LocationFullDto'
          actions:
            $ref: '#/components/schemas/LocationGlobalActionsDto'
      LocationGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/LocationGraphQlContent'
      LovCriterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
          criteria:
            type: array
            xml:
              name: criterion
              wrapped: true
            items:
              $ref: '#/components/schemas/LovWithActivatorsCriterion'
          parents:
            type: array
            xml:
              name: parent
              wrapped: true
            items:
              $ref: '#/components/schemas/Criterion'
          order:
            type: integer
            format: int64
        xml:
          name: lovcriterion
      LovDto:
        type: object
        required:
          - nameLovId
          - valueLovId
        properties:
          nameLovId:
            type: integer
            format: int64
          valueLovId:
            type: integer
            format: int64
          name:
            type: string
          value:
            type: string
          nameTranslations:
            $ref: '#/components/schemas/TranslationsDto'
          valueTranslations:
            $ref: '#/components/schemas/TranslationsDto'
      LovFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          value:
            type: string
          name:
            type: string
          order:
            type: integer
            format: int32
          type:
            type: string
          dataFormat:
            type: string
          get_Required:
            type: boolean
            default: false
          get_Hidden:
            type: boolean
            default: false
          systemValue:
            type: boolean
            default: false
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          account:
            $ref: '#/components/schemas/AccountDto'
          keyName:
            $ref: '#/components/schemas/KeyNameDto'
          parent:
            $ref: '#/components/schemas/LovFullDto'
          preferredLanguage:
            type: string
          dataValue:
            type: number
          dataType:
            type: string
            enum:
              - INTEGER
              - TEXT
              - POSITIVE_INTEGER
              - NUMERICAL
              - BOOLEAN
          updateUser:
            $ref: '#/components/schemas/UserDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          keyNameId:
            type: integer
            format: int64
      LovGraphQLWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/LovGraphQlContent'
      LovGraphQlContent:
        type: object
        properties:
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovFullDto'
      LovHierarchedCriterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
          parent:
            type: string
        xml:
          name: lovhiercriterion
      LovLabelDto:
        type: object
        properties:
          language:
            type: string
            enum:
              - XX
              - AR
              - BG
              - BR
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - ID
              - MX
              - AT
              - WA
              - CA
          value:
            type: string
      LovValueDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          value:
            type: string
          localizedLabel:
            type: string
          order:
            type: integer
            format: int32
      LovWithActivatorsCriterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
          activators:
            type: array
            items:
              $ref: '#/components/schemas/Activators'
        xml:
          name: lovactivatorscriterion
      MailDto:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      MailGatewayConfigurationDto:
        type: object
        required:
          - authorizedEmail1
          - srcChannelName
          - srcChannelType
        properties:
          activated:
            type: boolean
            default: false
          authorizedEmail1:
            type: string
          authorizedEmail2:
            type: string
          authorizedEmail3:
            type: string
          useSequentialCreation1:
            type: boolean
            default: false
          useSequentialCreation2:
            type: boolean
            default: false
          useSequentialCreation3:
            type: boolean
            default: false
          srcChannelName:
            type: string
          srcChannelType:
            type: string
          privacy:
            type: string
          folder:
            $ref: '#/components/schemas/CandidatePoolDto'
          linkToPersonalFolder:
            type: boolean
            default: false
          redirectionEmail:
            type: string
      MeetingLocationDto:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
      MidPeriodConfigBasicDto:
        type: object
        properties:
          from:
            type: integer
            format: int64
          to:
            type: integer
            format: int64
          timesheetConfig:
            $ref: '#/components/schemas/TimesheetConfigBasicDto'
          rates:
            type: array
            items:
              $ref: '#/components/schemas/RateDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/BasicLovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/BasicFreeFormFieldDto'
          withTsTriggers:
            type: boolean
            default: false
          withRates:
            type: boolean
            default: false
          withApprovals:
            type: boolean
            default: false
      MidPeriodConfigDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          from:
            type: integer
            format: int64
          to:
            type: integer
            format: int64
          timesheetConfig:
            $ref: '#/components/schemas/TimesheetConfigDto'
          rates:
            type: array
            items:
              $ref: '#/components/schemas/MidPeriodRateDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldDto'
      MidPeriodRateDto:
        type: object
        required:
          - order
          - rateUnit
        properties:
          id:
            type: integer
            format: int64
          order:
            type: integer
            format: int32
          payRate:
            type: number
          supplierRate:
            type: number
          chargeRate:
            type: number
          paySupplier:
            type: number
          supplierCharge:
            type: number
          overAll:
            type: number
          rateType:
            type: string
          rateUnit:
            type: string
          customRates:
            type: array
            items:
              $ref: '#/components/schemas/CustomRateDto'
          formulaSetId:
            type: integer
            format: int64
          comment:
            type: string
      NamedAccessRolesDto:
        type: object
        required:
          - roleInRequisitionId
          - roleToReceiveCandidateId
        properties:
          roleInRequisitionId:
            type: integer
            format: int64
          roleToReceiveCandidateId:
            type: integer
            format: int64
      NavigationDto:
        type: object
        properties:
          applicationProcessUrl:
            type: string
          descriptionUrl:
            type: string
      NewDepartmentParentIdDto:
        type: object
        required:
          - newParentId
        properties:
          newParentId:
            type: integer
            format: int64
      NewOpeningNameDto:
        type: object
        properties:
          newOpeningName:
            type: string
      OfferTermsDto:
        type: object
        properties:
          standardFields:
            type: array
            items:
              $ref: '#/components/schemas/StandardFieldDto'
          configurableLovs:
            type: array
            items:
              $ref: '#/components/schemas/ConfigurableLovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldTriggerDto'
      OpeningActionsDto:
        type: object
        properties:
          copy:
            $ref: '#/components/schemas/ActionDto'
          update:
            $ref: '#/components/schemas/ActionDto'
          attachDocument:
            $ref: '#/components/schemas/ActionDto'
      OpeningBasicDto:
        type: object
        required:
          - contractType
          - organization
        properties:
          jobTitle:
            type: string
          headCount:
            type: integer
            format: int64
          dueDate:
            type: integer
            format: int64
          company:
            type: string
          location:
            $ref: '#/components/schemas/SimpleLocationDto'
          language:
            type: string
          status:
            type: string
          compensation:
            $ref: '#/components/schemas/CompensationDto'
          contractType:
            type: string
          workTime:
            $ref: '#/components/schemas/WorkTimeDto'
          requisitionNumber:
            type: string
          duration:
            $ref: '#/components/schemas/DurationDto'
          expectedContractDates:
            $ref: '#/components/schemas/ExpectedContractDatesDto'
          renewal:
            type: boolean
            default: false
          scheduleType:
            type: string
          contractComments:
            type: string
          authorizedRecruitment:
            $ref: '#/components/schemas/AuthorizedRecruitmentDto'
          customFields:
            type: array
            items:
              $ref: '#/components/schemas/CustomFieldDto'
          standardRate:
            $ref: '#/components/schemas/StandardRateDto'
          totalCost:
            $ref: '#/components/schemas/TotalCostDto'
          generalApplication:
            type: boolean
            default: false
          teamComments:
            type: string
          budgeted:
            type: boolean
            default: false
          encryptApplicants:
            type: boolean
            default: false
          areaOfResponsibility:
            type: string
          positionType:
            type: string
          costCenter:
            type: string
          plainText:
            type: boolean
            default: false
          configurableFields:
            $ref: '#/components/schemas/ConfigurableFieldsBasicDto'
          organization:
            $ref: '#/components/schemas/DepartmentIdDto'
          team:
            $ref: '#/components/schemas/PositionTeamBasicDto'
          descriptionTemplateId:
            $ref: '#/components/schemas/IdDto'
          defaultJobLocationId:
            type: integer
            format: int64
          jobLocationIds:
            type: array
            items:
              type: integer
              format: int64
          customFieldSkills:
            type: array
            items:
              $ref: '#/components/schemas/CustomFieldSkillDto'
          removedSkills:
            type: array
            items:
              type: string
          manuallyAddedSkills:
            type: array
            items:
              $ref: '#/components/schemas/SkillDto'
      OpeningDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          jobNumber:
            type: string
          jobTitle:
            type: string
          firstLevelDeptId:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
      OpeningFullDto:
        type: object
        required:
          - contractType
        properties:
          jobTitle:
            type: string
          headCount:
            type: integer
            format: int64
          dueDate:
            type: integer
            format: int64
          company:
            type: string
          location:
            $ref: '#/components/schemas/SimpleLocationDto'
          language:
            type: string
          status:
            type: string
          compensation:
            $ref: '#/components/schemas/CompensationDto'
          contractType:
            type: string
          workTime:
            $ref: '#/components/schemas/WorkTimeDto'
          requisitionNumber:
            type: string
          duration:
            $ref: '#/components/schemas/DurationDto'
          expectedContractDates:
            $ref: '#/components/schemas/ExpectedContractDatesDto'
          renewal:
            type: boolean
            default: false
          scheduleType:
            type: string
          contractComments:
            type: string
          authorizedRecruitment:
            $ref: '#/components/schemas/AuthorizedRecruitmentDto'
          customFields:
            type: array
            items:
              $ref: '#/components/schemas/CustomFieldDto'
          standardRate:
            $ref: '#/components/schemas/StandardRateDto'
          totalCost:
            $ref: '#/components/schemas/TotalCostDto'
          generalApplication:
            type: boolean
            default: false
          teamComments:
            type: string
          budgeted:
            type: boolean
            default: false
          encryptApplicants:
            type: boolean
            default: false
          areaOfResponsibility:
            type: string
          positionType:
            type: string
          costCenter:
            type: string
          plainText:
            type: boolean
            default: false
          id:
            type: integer
            format: int64
          jobNumber:
            type: string
          jobLocations:
            type: array
            items:
              $ref: '#/components/schemas/LocationDto'
          defaultJobLocation:
            $ref: '#/components/schemas/LocationDto'
          configurableFields:
            $ref: '#/components/schemas/ConfigurableFieldsFullDto'
          organization:
            $ref: '#/components/schemas/DepartmentDto'
          descriptionTemplate:
            $ref: '#/components/schemas/JobAdTemplateDto'
          team:
            $ref: '#/components/schemas/PositionTeamFullDto'
          actions:
            $ref: '#/components/schemas/OpeningActionsDto'
          scheduleTypeDetails:
            $ref: '#/components/schemas/ScheduleTypeDetailsDto'
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          skills:
            type: array
            items:
              $ref: '#/components/schemas/OpeningSkillDto'
          department:
            $ref: '#/components/schemas/DepartmentDto'
      OpeningGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      OpeningSkillDto:
        type: object
        properties:
          skillId:
            type: string
          manuallyAdded:
            type: boolean
            default: false
          translations:
            $ref: '#/components/schemas/TranslationsDto'
      OperationResultDto:
        type: object
        properties:
          success:
            type: boolean
            default: false
          details:
            type: string
      OrganizationCriterion:
        type: object
        properties:
          value:
            type: string
          label:
            type: string
          level:
            type: integer
            format: int64
          subOrganizations:
            type: array
            xml:
              name: organization
              wrapped: true
            items:
              $ref: '#/components/schemas/OrganizationCriterion'
        xml:
          name: organizationcriterion
      PanelConfigDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          minMembers:
            type: integer
            format: int32
          maxMembers:
            type: integer
            format: int32
          minReqFeedback:
            type: integer
            format: int32
          members:
            $ref: '#/components/schemas/UserGroupDto'
          panelFeedback:
            $ref: '#/components/schemas/FormDto'
          communicationTemplate:
            $ref: '#/components/schemas/MailDto'
          allowMembersSeeRatings:
            type: boolean
            default: false
          referenceCheck:
            type: boolean
            default: false
          sendNotificationToStepOwner:
            type: boolean
            default: false
      ParticipantDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          participantStatus:
            type: string
            enum:
              - Cancel
              - Confirm
              - Decline
              - Deleted
              - Invited
              - Pending
          creationDate:
            type: integer
            format: int64
          confirmationDate:
            type: integer
            format: int64
          account:
            $ref: '#/components/schemas/AccountDto'
          updateDate:
            type: integer
            format: int64
          appSelectionTask:
            $ref: '#/components/schemas/SelectionTaskFullDto'
          templates:
            type: array
            items:
              $ref: '#/components/schemas/ParticipantTemplateDto'
          interviewdates:
            $ref: '#/components/schemas/InterviewDatesDto'
          interview:
            $ref: '#/components/schemas/InterviewDto'
          getiCalUUID:
            type: string
          required:
            type: boolean
            default: false
          responseStatus:
            type: string
            enum:
              - NOT_RESPONDED
              - TENTATIVELY_ACCEPTED
              - ACCEPTED
              - DECLINED
              - FAILURE
              - NOT_APPLICABLE
          sendInvitation:
            type: boolean
            default: false
          responseMessage:
            type: string
          proposedMeetingStart:
            type: integer
            format: int64
          proposedMeetingEnd:
            type: integer
            format: int64
          leadInterviewer:
            type: boolean
            default: false
      ParticipantTemplateDto:
        type: object
        properties:
          id:
            $ref: '#/components/schemas/ParticipantTemplateKeyDto'
      ParticipantTemplateKeyDto:
        type: object
        properties:
          participantId:
            type: integer
            format: int64
          mail:
            $ref: '#/components/schemas/MailDto'
          type:
            type: string
            enum:
              - CandCancel
              - CandConfirm
              - CandInvite
              - UserCancel
              - UserConfirm
      PasswordBoRuleDto:
        type: object
        properties:
          userHasToChangePassword:
            type: boolean
            default: false
          blockLoginAfterAttempts:
            type: integer
            format: int64
          blockLoginDays:
            type: integer
            format: int64
          passwordExpire:
            type: integer
            format: int64
          passwordMinimumLength:
            type: integer
            format: int64
          passwordMixedCase:
            type: boolean
            default: false
          passwordNumbers:
            type: boolean
            default: false
          passwordSpecialCharacters:
            type: boolean
            default: false
          passwordDifferentLast:
            type: integer
            format: int64
          passwordDifferentThanPersonalAttributes:
            type: boolean
            default: false
          passwordReminder:
            type: integer
            format: int64
          disablePossToChangePasswordAU:
            type: boolean
            default: false
          disablePossToChangeSecurityQuestionAndAnswerAU:
            type: boolean
            default: false
          disablePossToChangePasswordMSS:
            type: boolean
            default: false
          disablePossToChangeSecurityQuestionAndAnswerMSS:
            type: boolean
            default: false
          doNotAllowStoreCompanyName:
            type: boolean
            default: false
          doNotAllowStoreLogin:
            type: boolean
            default: false
      PasswordFoRuleDto:
        type: object
        properties:
          secured:
            type: boolean
            default: false
          blockLoginAfterAttempts:
            type: integer
            format: int64
          blockLoginDays:
            type: integer
            format: int64
          passwordExpire:
            type: integer
            format: int64
          passwordMinimumLength:
            type: integer
            format: int64
          passwordMixedCase:
            type: boolean
            default: false
          passwordNumbers:
            type: boolean
            default: false
          passwordSpecialCharacters:
            type: boolean
            default: false
          passwordDifferentLast:
            type: integer
            format: int64
          passwordDifferentThanPersonalAttributes:
            type: boolean
            default: false
          displayRules:
            type: boolean
            default: false
      PasswordRuleDto:
        type: object
        properties:
          backOffice:
            $ref: '#/components/schemas/PasswordBoRuleDto'
          frontOffice:
            $ref: '#/components/schemas/PasswordFoRuleDto'
      PasswordRuleGraphQlContent:
        type: object
        properties:
          passwordRule:
            type: array
            items:
              $ref: '#/components/schemas/PasswordRuleDto'
      PasswordRuleGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/PasswordRuleGraphQlContent'
      PermanentDetailsDto:
        type: object
        required:
          - fixedCurrency
          - fixedSalary
          - fixedSalaryPeriod
        properties:
          fixedSalary:
            type: number
          variableSalary:
            type: number
          relocation:
            type: number
          probationaryPeriod:
            type: string
          carAllowance:
            type: boolean
            default: false
          memo:
            type: string
          fixedCurrency:
            type: string
          fixedSalaryPeriod:
            type: string
          relocationCurrency:
            type: string
          variableSalaryCurrency:
            type: string
          variableSalaryPeriod:
            type: string
      PersonalDataDto:
        type: object
        properties:
          dateOfBirth:
            type: integer
            format: int64
          numberOfChildren:
            type: integer
            format: int32
          citizenship:
            type: string
          language:
            type: string
          maritalStatus:
            type: string
          sex:
            type: string
      PersonalJobTemplateBasicDto:
        type: object
        required:
          - organization
          - recruitmentContext
        properties:
          creationDate:
            type: integer
            format: int64
          lastUpdate:
            type: integer
            format: int64
          requisitionNumber:
            type: string
          dueDate:
            type: integer
            format: int64
          company:
            type: string
          headCount:
            type: integer
            format: int64
          renewal:
            type: boolean
            default: false
          contractComments:
            type: string
          scheduleType:
            type: string
          contractType:
            type: string
          recruitmentContext:
            type: string
            enum:
              - Permanent
              - Contractor
          workTime:
            $ref: '#/components/schemas/WorkTimeDto'
          location:
            $ref: '#/components/schemas/SimpleLocationDto'
          compensation:
            $ref: '#/components/schemas/CompensationDto'
          authorizedRecruitment:
            $ref: '#/components/schemas/AuthorizedRecruitmentDto'
          duration:
            $ref: '#/components/schemas/DurationDto'
          configurableFields:
            $ref: '#/components/schemas/ConfigurableFieldsBasicDto'
          organization:
            $ref: '#/components/schemas/DepartmentIdDto'
          team:
            $ref: '#/components/schemas/PositionTeamBasicDto'
      PersonalJobTemplateFullDto:
        type: object
        required:
          - recruitmentContext
        properties:
          creationDate:
            type: integer
            format: int64
          lastUpdate:
            type: integer
            format: int64
          requisitionNumber:
            type: string
          dueDate:
            type: integer
            format: int64
          company:
            type: string
          headCount:
            type: integer
            format: int64
          renewal:
            type: boolean
            default: false
          contractComments:
            type: string
          scheduleType:
            type: string
          contractType:
            type: string
          recruitmentContext:
            type: string
            enum:
              - Permanent
              - Contractor
          workTime:
            $ref: '#/components/schemas/WorkTimeDto'
          location:
            $ref: '#/components/schemas/SimpleLocationDto'
          compensation:
            $ref: '#/components/schemas/CompensationDto'
          authorizedRecruitment:
            $ref: '#/components/schemas/AuthorizedRecruitmentDto'
          duration:
            $ref: '#/components/schemas/DurationDto'
          id:
            type: integer
            format: int64
          organization:
            $ref: '#/components/schemas/DepartmentDto'
          team:
            $ref: '#/components/schemas/PositionTeamFullDto'
          configurableFields:
            $ref: '#/components/schemas/ConfigurableFieldsFullDto'
          department:
            $ref: '#/components/schemas/DepartmentDto'
      PositionDto:
        type: object
        properties:
          company:
            type: string
          companyStartDate:
            type: integer
            format: int64
          position:
            type: string
          positionStartDate:
            type: integer
            format: int64
          positionEndDate:
            type: integer
            format: int64
          managerName:
            type: string
          employeeCode:
            type: string
          compensation:
            type: string
          location:
            type: string
      PositionGraphQlContent:
        type: object
        properties:
          positions:
            type: array
            items:
              $ref: '#/components/schemas/OpeningFullDto'
          actions:
            $ref: '#/components/schemas/OpeningGlobalActionsDto'
      PositionGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/PositionGraphQlContent'
      PositionTeamBasicDto:
        type: object
        properties:
          recruiters:
            type: array
            items:
              $ref: '#/components/schemas/TeamMemberBasicDto'
          operationals:
            type: array
            items:
              $ref: '#/components/schemas/TeamMemberBasicDto'
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/ApproverBasicDto'
      PositionTeamFullDto:
        type: object
        properties:
          recruiters:
            type: array
            items:
              $ref: '#/components/schemas/TeamMemberFullDto'
          operationals:
            type: array
            items:
              $ref: '#/components/schemas/TeamMemberFullDto'
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/ApproverFullDto'
      PostingStatusUpdateDTO:
        type: object
        required:
          - adverts
        properties:
          adverts:
            type: array
            xml:
              name: job
              wrapped: true
            items:
              $ref: '#/components/schemas/JobDTO'
        xml:
          name: postingStatusUpdate
      PostingUserDto:
        type: object
        properties:
          email:
            type: string
      ProceedCandidateRequestDto:
        type: object
        properties:
          stepId:
            type: integer
            format: int64
      ProcessDefinitionDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          creationDate:
            type: integer
            format: int64
          processCategory:
            type: string
            enum:
              - CompetencyManagement
              - DevelopmentActivities
              - SuccessionPlanning
              - PerformanceManagement
              - CareerPlanning
              - AbsenceManagement
              - Onboarding
              - LearningBundle
              - Course
              - RecruitmentActivity
              - TimeSheetApproval
      ProcessInstanceDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          processDefinition:
            $ref: '#/components/schemas/ProcessDefinitionDto'
          status:
            type: string
            enum:
              - STARTED
              - COMPLETE
              - CANCELLED
          creationDate:
            type: integer
            format: int64
          state:
            $ref: '#/components/schemas/StateDto'
          suspended:
            type: boolean
            default: false
      PublishedAdvertDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          status:
            type: string
          endDate:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          postingStartDate:
            type: integer
            format: int64
          postingEndDate:
            type: integer
            format: int64
          postingUser:
            $ref: '#/components/schemas/PostingUserDto'
          navigation:
            $ref: '#/components/schemas/NavigationDto'
          jobboardConfiguration:
            $ref: '#/components/schemas/JobboardConfigurationDto'
          advertId:
            type: integer
            format: int64
          jobAdTitle:
            type: string
          comment:
            type: string
          recruitingCompany:
            type: string
          location:
            type: string
          showCompensation:
            type: boolean
            default: false
          showRecruiter:
            type: boolean
            default: false
          keyword:
            type: string
          language:
            type: string
          advertCreationDate:
            type: integer
            format: int64
          expirationDate:
            type: integer
            format: int64
          advertUpdateDate:
            type: integer
            format: int64
          imageAssignment:
            type: array
            items:
              $ref: '#/components/schemas/ImageAssignmentDto'
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/AttachmentsDto'
          strapline:
            type: string
          opening:
            $ref: '#/components/schemas/OpeningFullDto'
          customFields:
            type: array
            items:
              $ref: '#/components/schemas/AdvertCustomFieldDto'
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
          freeFormFields:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldDto'
          actions:
            $ref: '#/components/schemas/AdvertActionsDto'
          jobLocations:
            type: array
            items:
              $ref: '#/components/schemas/LocationDto'
          defaultJobLocation:
            $ref: '#/components/schemas/LocationDto'
          technicalId:
            type: string
          structuredData:
            $ref: '#/components/schemas/StructuredDataDto'
          applicationProcess:
            type: object
          categories:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/CategoryDto'
      PublishedAdvertGraphQlContent:
        type: object
        properties:
          publishedAdverts:
            type: array
            items:
              $ref: '#/components/schemas/PublishedAdvertDto'
          actions:
            type: array
            items:
              $ref: '#/components/schemas/ActionDto'
      PublishedAdvertGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/PublishedAdvertGraphQlContent'
      QuestionAnsweredDto:
        type: object
        properties:
          assignedQuestionId:
            type: integer
            format: int64
          questionId:
            type: integer
            format: int64
          answerValue:
            type: string
          options:
            type: array
            items:
              $ref: '#/components/schemas/IdDto'
          index:
            type: integer
            format: int32
          childQuestions:
            type: array
            items:
              $ref: '#/components/schemas/QuestionAnsweredDto'
      QuestionCompetencyCategoryDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          description:
            type: string
          nameLabel:
            type: string
          descriptionLabel:
            type: string
          children:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/QuestionCompetencyCategoryDto'
      QuestionLayoutDto:
        type: object
        properties:
          answerInline:
            type: string
          answerSize:
            type: integer
            format: int32
          indentation:
            type: string
          fontFamily:
            type: string
          fontSize:
            type: string
          fontWeight:
            type: string
          presentation:
            type: string
          questionInline:
            type: string
          textDecoration:
            type: string
          pleaseSelect:
            type: boolean
            default: false
          fontStyle:
            type: string
          fontColor:
            type: string
          description:
            type: string
          imageWidth:
            type: integer
            format: int32
          imageHeight:
            type: integer
            format: int32
          hasTitle:
            type: boolean
            default: false
          documentSecurity:
            type: string
      QueueActionSettingsDto:
        type: object
        properties:
          settings:
            $ref: '#/components/schemas/JSONObject'
      QueueAssignmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          objectId:
            type: integer
            format: int64
          queue:
            $ref: '#/components/schemas/TlkQueueDto'
          objectType:
            type: string
            enum:
              - CANDIDATE_ELEMENT
              - APPLICATION_ELEMENT
              - APPLICATION_SELECTION_TASK
              - OPENING_ELEMENT
              - CONTRACT_ELEMENT
              - TIMESHEET_ELEMENT
              - EXTERNAL_SYSTEM_REQUEST_ELEMENT
              - POSTING
              - ARCHIVED_OR_REMOVED_CANDIDATE
              - USER
          createdOn:
            type: integer
            format: int64
          createdBy:
            $ref: '#/components/schemas/UserDto'
      QueueAssignmentHistoryDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          objectId:
            type: integer
            format: int64
          queue:
            $ref: '#/components/schemas/TlkQueueDto'
          objectType:
            type: string
            enum:
              - CANDIDATE_ELEMENT
              - APPLICATION_ELEMENT
              - APPLICATION_SELECTION_TASK
              - OPENING_ELEMENT
              - CONTRACT_ELEMENT
              - TIMESHEET_ELEMENT
              - EXTERNAL_SYSTEM_REQUEST_ELEMENT
              - POSTING
              - ARCHIVED_OR_REMOVED_CANDIDATE
              - USER
          historyType:
            type: string
            enum:
              - Creation
              - Deletion
          createdOn:
            type: integer
            format: int64
          createdBy:
            $ref: '#/components/schemas/UserDto'
      QueueDto:
        type: object
        properties:
          name:
            type: string
          elementsCount:
            type: integer
            format: int64
      QueuedApplicationDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          id:
            type: integer
            format: int64
          memo:
            type: string
          srcChannelName:
            type: string
          creation:
            type: integer
            format: int64
          update:
            type: integer
            format: int64
          applicationDate:
            type: integer
            format: int64
          shortListed:
            type: boolean
            default: false
          archived:
            type: boolean
            default: false
          activeApplication:
            type: boolean
            default: false
          hasContracts:
            type: boolean
            default: false
          positionId:
            type: integer
            format: int64
          candidateId:
            type: integer
            format: int64
          completionReason:
            type: string
          srcChannelType:
            type: string
          srcMedium:
            type: string
          status:
            type: string
          statusComment:
            type: string
          documents:
            type: array
            items:
              $ref: '#/components/schemas/DocumentBaseDto'
          applicationFollowup:
            type: array
            items:
              $ref: '#/components/schemas/ApplicationFollowupDto'
          candidateConsents:
            type: array
            items:
              $ref: '#/components/schemas/CandidateConsentDto'
          email:
            type: string
          fullName:
            type: string
      QueuedArchivedApplicationDto:
        type: object
        properties:
          candidateId:
            type: integer
            format: int64
      QueuedContractDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          contractId:
            type: integer
            format: int64
          candidateId:
            type: integer
            format: int64
          applicationId:
            type: integer
            format: int64
      QueuedExternalSystemRequestDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          candidateId:
            type: integer
            format: int64
          candidateType:
            type: string
          candidateStatus:
            $ref: '#/components/schemas/SimpleLovDto'
          tlkRequestId:
            type: string
          externalServiceId:
            type: string
          externalClientId:
            type: string
          additionalParameters:
            type: object
            additionalProperties:
              type: string
          untranslatedAdditionalParameters:
            type: object
            additionalProperties:
              type: string
          submitUserId:
            type: integer
            format: int64
          queueElementId:
            type: integer
            format: int64
          applicationId:
            type: integer
            format: int64
      QueuedPositionDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          openingID:
            type: integer
            format: int64
          departmentID:
            type: integer
            format: int64
          jobStatus:
            type: string
      QueuedPostingTargetDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          id:
            type: integer
            format: int64
          advertName:
            type: string
      QueuedSelectionStepDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          selectionStepId:
            type: integer
            format: int64
          selectionStepName:
            type: string
          applicationId:
            type: integer
            format: int64
      QueuedTimesheetDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          timesheetId:
            type: integer
            format: int64
          applicationId:
            type: integer
            format: int64
          candidateId:
            type: integer
            format: int64
          candidateName:
            type: string
      QueuedUserDto:
        type: object
        properties:
          idInQueue:
            type: integer
            format: int64
          queueName:
            type: string
          id:
            type: integer
            format: int64
          login:
            type: string
          fullName:
            type: string
          language:
            type: string
          currency:
            type: string
          timeZone:
            type: string
          archived:
            type: boolean
            default: false
          invalidEmail:
            type: boolean
            default: false
          mss:
            type: boolean
            default: false
          updateDate:
            type: string
            format: date-time
          creationDate:
            type: string
            format: date-time
          preferredCommunicationChannel:
            type: string
          displayTimeAlerts:
            type: integer
            format: int64
          quickSearch:
            type: string
          taskDelivery:
            type: string
          updateUserId:
            type: integer
            format: int64
          creationUserId:
            type: integer
            format: int64
          preferredChannel:
            type: string
          mailBounced:
            type: boolean
            default: false
      QueuesDto:
        type: object
        properties:
          queues:
            type: array
            items:
              $ref: '#/components/schemas/QueueDto'
      RateDto:
        type: object
        required:
          - order
          - rateUnit
        properties:
          id:
            type: integer
            format: int64
          order:
            type: integer
            format: int32
          payRate:
            type: number
          supplierRate:
            type: number
          chargeRate:
            type: number
          paySupplier:
            type: number
          supplierCharge:
            type: number
          overAll:
            type: number
          rateType:
            type: string
          rateUnit:
            type: string
          customRates:
            type: array
            items:
              $ref: '#/components/schemas/CustomRateDto'
          formulaSetId:
            type: integer
            format: int64
          comment:
            type: string
      RateFormulaSetDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          translations:
            $ref: '#/components/schemas/TranslationsDto'
          formulas:
            type: array
            items:
              $ref: '#/components/schemas/FormulaDto'
          assignment:
            type: string
            enum:
              - Department
              - Corporate
          departments:
            type: array
            items:
              $ref: '#/components/schemas/DepartmentDto'
          active:
            type: boolean
            default: false
          contractType:
            type: string
            enum:
              - Direct
              - ThirdParty
      RateFormulaSetGraphQlContent:
        type: object
        properties:
          ratesFormulas:
            type: array
            items:
              $ref: '#/components/schemas/RateFormulaSetDto'
      RateFormulaSetGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/RateFormulaSetGraphQlContent'
      RateUnitRequestDto:
        type: object
        properties:
          value:
            type: string
          order:
            type: string
          comment:
            type: string
      ReferenceDto:
        type: object
        properties:
          employeeCode:
            type: string
          company:
            type: string
          email:
            type: string
          referredFrom:
            type: string
      ReferralApplicationDto:
        type: object
        properties:
          pk:
            $ref: '#/components/schemas/ReferralApplicationPK'
          referralProgram:
            $ref: '#/components/schemas/ReferralProgramDto'
          referralFee:
            $ref: '#/components/schemas/ReferralFeeDto'
          creatorType:
            type: string
          trialPeriodStart:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
      ReferralApplicationPK:
        type: object
        properties:
          referral:
            $ref: '#/components/schemas/ReferralDto'
          application:
            $ref: '#/components/schemas/ApplicationDto'
      ReferralDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          referralType:
            type: string
          referralConfirmation:
            type: string
          referrer:
            $ref: '#/components/schemas/ReferrerDto'
          referralApplications:
            type: array
            items:
              $ref: '#/components/schemas/ReferralApplicationDto'
          valid:
            type: boolean
            default: false
          validityDate:
            type: integer
            format: int64
          introductionText:
            type: string
          creatorType:
            type: string
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
      ReferralFeeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          feeValue:
            type: number
            format: double
          reward:
            type: string
          rewardValue:
            type: number
            format: double
          creationDate:
            type: integer
            format: int64
          accountId:
            type: integer
            format: int32
      ReferralProgramDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
          programName:
            type: string
          trialPeriod:
            type: integer
            format: int32
          validityPeriod:
            type: integer
            format: int32
          active:
            type: boolean
            default: false
          allowSelfReferrals:
            type: boolean
            default: false
          forInternalReferrals:
            type: boolean
            default: false
          forExternalReferrals:
            type: boolean
            default: false
          defaultProgram:
            type: boolean
            default: false
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
      ReferrerDto:
        type: object
        properties:
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          employeeCode:
            type: string
          employeeCompany:
            type: string
      RejectCandidateRequestDto:
        type: object
        properties:
          stepId:
            type: integer
            format: int64
          sendCommunication:
            type: boolean
            default: false
          reasonOfRejection:
            type: string
          comment:
            type: string
          delayForTheEmail:
            type: integer
            format: int32
      ReportDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          fileName:
            type: string
          description:
            type: string
          docType:
            type: string
            enum:
              - BO_CP
              - BO_CPE
              - BO_CPI
              - BO_CPEC
              - BO_CPIC
              - FO_CP
              - FO_PIF
              - FO_RPM
              - FO_CNT
              - BEST_PIF
              - PROFILE
              - R
              - RESUME
              - CL
              - COVER_LETTER
              - COVERLETTER
              - DQ
              - I
              - IATTACHMENT
              - Q
              - MAIL
              - SEARCH
              - AGENCY_CONTRACT
              - DOCUMENT_PACK
              - EXPENSE
              - EXTSYSATTACHMENT
              - PHOTO
              - PORTRAIT
              - THUMBNAIL
              - OFFER_LETTER
              - OTHER
              - DOCUSIGN_PACKAGE
              - BGCK_REP
              - LINKEDIN_INMAIL
              - SMS
              - RESPONSE_EMAILS
              - TRACKED_MAIL
              - SB_ATTACHMENT
              - HIRINGFORM
              - MAILTRACK
          docLanguage:
            type: string
          base64Data:
            type: string
          size:
            type: integer
            format: int64
          author:
            type: string
          creationDate:
            type: integer
            format: int64
          docId:
            type: integer
            format: int64
          publishable:
            type: boolean
            default: false
      RightDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          type:
            type: string
            enum:
              - DEPARTMENT
              - ACCOUNT
          label:
            type: string
          domain:
            type: string
          origin:
            type: string
            enum:
              - TALENT_ACQUISITION
              - TALENT_MANAGEMENT
              - UNSPECIFIED
          employeeRelated:
            type: boolean
            default: false
      RoleAssignmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          department:
            $ref: '#/components/schemas/DepartmentDto'
          role:
            $ref: '#/components/schemas/RoleDto'
          beginDate:
            type: integer
            format: int64
          expirationDate:
            type: integer
            format: int64
      RoleAssignmentsDto:
        type: object
        required:
          - roleAssignments
        properties:
          roleAssignments:
            type: array
            items:
              $ref: '#/components/schemas/RoleAssignmentDto'
      RoleDeletionDto:
        type: object
        properties:
          accountRoles:
            $ref: '#/components/schemas/AccountRoleDto'
          departmentRoles:
            $ref: '#/components/schemas/DepartmentRoleDto'
      RoleDepartmentDeletionDto:
        type: object
        required:
          - includeAll
        properties:
          includeAll:
            type: boolean
            default: false
          departmentIds:
            type: array
            items:
              type: integer
              format: int64
      RoleDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          roleClass:
            type: integer
            format: int64
          name:
            type: string
          type:
            type: string
            enum:
              - DEPARTMENT
              - ACCOUNT
          updateDate:
            type: integer
            format: int64
          rights:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/RightDto'
          tags:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/TagDto'
          organisationVisibility:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/DepartmentDto'
      RoleGraphQlContent:
        type: object
        properties:
          roles:
            type: array
            items:
              $ref: '#/components/schemas/RoleDto'
      RoleGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/RoleGraphQlContent'
      RoleTagDto:
        type: object
        required:
          - tagName
          - tagTypeName
        properties:
          tagName:
            type: string
          tagTypeName:
            type: string
      RoleTagsDto:
        type: object
        required:
          - roleTags
        properties:
          roleTags:
            type: array
            items:
              $ref: '#/components/schemas/RoleTagDto'
      ScheduleTypeDetailsDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          value:
            type: string
          translations:
            $ref: '#/components/schemas/TranslationsDto'
      ScreeningDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          bgCheck:
            $ref: '#/components/schemas/BackgroundCheckDto'
          userCreated:
            $ref: '#/components/schemas/UserDto'
          createDate:
            type: integer
            format: int64
          validFromDate:
            type: integer
            format: int64
          validToDate:
            type: integer
            format: int64
          externalSystemId:
            type: integer
            format: int64
          name:
            type: string
          externalCode:
            type: string
          screeningType:
            type: string
          responseHrxmlData:
            type: string
          updateDate:
            type: integer
            format: int64
          userUpdated:
            $ref: '#/components/schemas/UserDto'
          orderStatus:
            type: string
          resultStatus:
            type: string
      SearchAgentDto:
        type: object
        required:
          - deliveryFrequency
          - email
          - expirationDate
          - langCode
          - searchCriteria
          - sendEmail
        properties:
          email:
            type: string
          searchCriteria:
            $ref: '#/components/schemas/SearchCriteriaDto'
          deliveryFrequency:
            type: string
            enum:
              - ONCE_A_DAY
              - ONCE_A_WEEK
          expirationDate:
            type: integer
            format: int64
          sendEmail:
            type: boolean
            default: false
          langCode:
            type: string
            enum:
              - XX
              - AR
              - BG
              - BR
              - CH
              - CN
              - CS
              - CY
              - DE
              - DN
              - EL
              - US
              - EN
              - ET
              - FL
              - FN
              - FR
              - GL
              - HR
              - HU
              - IS
              - IT
              - JA
              - KO
              - LT
              - LV
              - MY
              - NL
              - NW
              - PL
              - PT
              - RO
              - RU
              - SK
              - SL
              - SP
              - SR
              - SW
              - TH
              - TR
              - TW
              - UA
              - UK
              - VI
              - ID
              - MX
              - AT
              - WA
              - CA
      SearchAgentGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      SearchAgentGraphQlContent:
        type: object
        properties:
          searchAgents:
            type: array
            items:
              $ref: '#/components/schemas/SearchAgentDto'
          actions:
            $ref: '#/components/schemas/SearchAgentGlobalActionsDto'
      SearchAgentGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/SearchAgentGraphQlContent'
      SearchCriteriaDto:
        type: object
        properties:
          generalApplication:
            type: boolean
            default: false
          postedSince:
            type: integer
            format: int32
          jobNumber:
            type: string
          adLanguages:
            type: array
            items:
              type: string
          countries:
            type: array
            items:
              type: integer
              format: int64
          regions:
            type: array
            items:
              type: integer
              format: int64
          contractTypes:
            type: array
            items:
              type: integer
              format: int64
          scheduleTypes:
            type: array
            items:
              type: integer
              format: int64
          customLovs:
            type: array
            items:
              $ref: '#/components/schemas/CustomLovGroup'
          keywords:
            type: string
          categoryLists:
            type: array
            items:
              $ref: '#/components/schemas/CategoryNameDto'
          organizationIds:
            type: array
            items:
              type: integer
              format: int64
          countriesToBeFilltered:
            type: array
            items:
              type: string
          showImages:
            type: boolean
            default: false
      SelectionProcessModelDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          mandatory:
            type: boolean
            default: false
          get_strictEnforcement:
            type: boolean
            default: false
          get_current:
            type: boolean
            default: false
          get_markedPrivate:
            type: boolean
            default: false
          get_archived:
            type: boolean
            default: false
          get_validated:
            type: boolean
            default: false
          version:
            type: integer
            format: int32
          queue:
            $ref: '#/components/schemas/TlkQueueDto'
          department:
            $ref: '#/components/schemas/DepartmentDto'
          account:
            $ref: '#/components/schemas/AccountDto'
          shortListCandidate:
            type: boolean
            default: false
          description:
            type: string
          comment:
            type: string
          parent:
            $ref: '#/components/schemas/SelectionProcessModelDto'
          tasks:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/SelectionTaskFullDto'
      SelectionStepStatusUpdateDto:
        type: object
        required:
          - stepStatus
        properties:
          stepStatus:
            type: string
            description: New status
            enum:
              - Cancel
              - Closed
              - InterviewToSchedule
              - OnHold
      SelectionTaskFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          type:
            type: string
          stepType:
            type: string
          action:
            type: string
          category:
            type: string
          duration:
            type: integer
            format: int32
          schedulingDuration:
            type: integer
            format: int32
          order:
            type: integer
            format: int32
          updateable:
            type: boolean
            default: false
          requestHiring:
            type: boolean
            default: false
          shareable:
            type: boolean
            default: false
          shareStartedStep:
            type: boolean
            default: false
          sharedValidityPeriod:
            type: integer
            format: int32
          adHoc:
            type: boolean
            default: false
          enabled:
            type: boolean
            default: false
          decryptCandidate:
            type: boolean
            default: false
          showApplicationCommentInReviewApps:
            type: boolean
            default: false
          form:
            $ref: '#/components/schemas/FormDto'
          mail:
            $ref: '#/components/schemas/MailDto'
          mail2:
            $ref: '#/components/schemas/MailDto'
          keyName:
            $ref: '#/components/schemas/KeyNameDto'
          assessmentTest:
            $ref: '#/components/schemas/AssessmentTestDto'
          expectedTaskOutput:
            type: string
          coordinatorType:
            type: string
          coordinator:
            $ref: '#/components/schemas/UserDto'
          owner:
            $ref: '#/components/schemas/UserDto'
          ownerType:
            type: string
          emailStepOwner:
            type: string
          feedbackFailScore:
            type: integer
            format: int32
          feedbackPassScore:
            type: integer
            format: int32
          dayDelay:
            type: integer
            format: int32
          statusComment:
            type: string
          applicationMemo:
            type: string
          sessionCategory:
            $ref: '#/components/schemas/SessionCategoryDto'
          automaticAppReject:
            type: boolean
            default: false
          contactRejectedCand:
            type: boolean
            default: false
          automaticStartNextStep:
            type: boolean
            default: false
          activInterview:
            type: boolean
            default: false
          shortlistCand:
            type: boolean
            default: false
          rejectionMail:
            $ref: '#/components/schemas/MailDto'
          rejectionLetter:
            $ref: '#/components/schemas/MailDto'
          candidateInvitationMail:
            $ref: '#/components/schemas/MailDto'
          candidateCancellationMail:
            $ref: '#/components/schemas/MailDto'
          candidateConfirmationMail:
            $ref: '#/components/schemas/MailDto'
          interviewerCancellationMail:
            $ref: '#/components/schemas/MailDto'
          interviewerConfirmationMail:
            $ref: '#/components/schemas/MailDto'
          rejectOfferNegotiation:
            $ref: '#/components/schemas/MailDto'
          candidateDecisionTemplate:
            $ref: '#/components/schemas/MailDto'
          candidateRequestNegotiationTemplate:
            $ref: '#/components/schemas/MailDto'
          selectionProcess:
            $ref: '#/components/schemas/SelectionProcessModelDto'
          panelConfig:
            $ref: '#/components/schemas/PanelConfigDto'
          account:
            $ref: '#/components/schemas/AccountDto'
          autoSchedTrigger:
            type: string
            enum:
              - BefContractEnd
              - AftOfferAccepted
              - AftAppWithdrawn
              - AftContractStart
              - AftOfferRejected
              - AftContractEnd
          autoScheduleDur:
            type: integer
            format: int64
          taskIgnition:
            type: string
          notifyCandidate:
            type: boolean
            default: false
          taskAttachments:
            type: string
          candidateFeedbackType:
            type: string
          meetingPlace:
            type: string
            enum:
              - Location
              - Phone
              - Online
          attachVCALConfirmation:
            type: boolean
            default: false
          allowOverrideExtSys:
            type: boolean
            default: false
          candidateReviewDocumentTypes:
            type: string
          iseSignatureEnabled:
            type: boolean
            default: false
          closeWhenESignatureEnded:
            type: boolean
            default: false
          saveAllowed:
            type: boolean
            default: false
          ratingAllowed:
            type: string
            enum:
              - Disabled
              - RatingAndComment
              - Rating
          keyNameId:
            type: integer
            format: int64
      SelectionTaskGraphQlContent:
        type: object
        properties:
          selectionTasks:
            type: array
            items:
              $ref: '#/components/schemas/SelectionTaskFullDto'
      SelectionTaskGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/SelectionTaskGraphQlContent'
      SelfBookingSlotDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          status:
            type: string
            enum:
              - FREE
              - BUSY
              - CANCELLED
              - DECLINED
          creationUser:
            $ref: '#/components/schemas/UserDto'
          meetingCorrelationId:
            type: string
          location:
            $ref: '#/components/schemas/LocationDto'
          externalMeetingId:
            type: string
          slotResponses:
            type: array
            items:
              $ref: '#/components/schemas/SlotResponseDto'
      SendEventDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/UserDto'
      SendInternalMessageAttachmentDto:
        type: object
        properties:
          type:
            type: string
            enum:
              - ADHOCREPORTRESULT
              - CANDIDATEPROFILE
              - FORM
              - MAIL
              - OPENING
              - REFERRALCONFLICTCANDIDATEPROFILE1
              - REFERRALCONFLICTCANDIDATEPROFILE2
              - SESSIONMANAGEMENT
              - TEMPLATE
              - CANDIDATE_PACK
              - DELETED_CANDIDATE_PACK
              - APPLICANTS_LIST
              - DOCUMENT
              - STRUCTERED_DOCUMENT
          objectId:
            type: integer
            format: int64
      SendInternalMessageRequest:
        type: object
        properties:
          receiverUserId:
            type: integer
            format: int64
          senderUserId:
            type: integer
            format: int64
          sendAsSystem:
            type: boolean
            default: false
          title:
            type: string
          content:
            type: string
          attachments:
            type: array
            items:
              $ref: '#/components/schemas/SendInternalMessageAttachmentDto'
      SessionCategoryDepartmentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
      SessionCategoryDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
          description:
            type: string
          defaultDuration:
            type: integer
            format: int64
          defaultOrganizer:
            $ref: '#/components/schemas/UserDto'
          defaultSeats:
            type: integer
            format: int32
          defaultLocation:
            $ref: '#/components/schemas/LocationDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          creationDate:
            type: integer
            format: int64
          updateUser:
            $ref: '#/components/schemas/UserDto'
          updateDate:
            type: integer
            format: int64
          mailCancelInter:
            $ref: '#/components/schemas/MailDto'
          mailConfirmInter:
            $ref: '#/components/schemas/MailDto'
          mailCancelStCoord:
            $ref: '#/components/schemas/MailDto'
          account:
            $ref: '#/components/schemas/AccountDto'
          sessionCategoryDepartments:
            type: array
            items:
              $ref: '#/components/schemas/SessionCategoryDepartmentDto'
          checkAvailability:
            type: boolean
            default: false
          sessions:
            type: array
            items:
              $ref: '#/components/schemas/InterviewDto'
          closingUnits:
            type: integer
            format: int32
          unitsType:
            type: string
          selectionTasks:
            type: array
            items:
              $ref: '#/components/schemas/SelectionTaskFullDto'
      SimpleLocationDto:
        type: object
        properties:
          city:
            type: string
          region:
            type: string
          country:
            type: string
      SimpleLovDto:
        type: object
        properties:
          value:
            type: string
            xml:
              attribute: true
      SimpleUserDto:
        type: object
        properties:
          value:
            type: string
          order:
            type: integer
            format: int64
          email:
            type: string
        xml:
          name: simpleuserdto
      SiteDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      SkillDto:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          global:
            type: boolean
            default: false
          system:
            type: string
      SlotResponseDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          slot:
            $ref: '#/components/schemas/SelfBookingSlotDto'
          participant:
            $ref: '#/components/schemas/ParticipantDto'
          responseDate:
            type: integer
            format: int64
          message:
            type: string
          responseType:
            type: string
            enum:
              - DECLINED
      SourceUserIdDto:
        type: object
        required:
          - id
        properties:
          id:
            type: integer
            format: int64
      SourcingChannelDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          type:
            type: string
          description:
            type: string
          technicalId:
            type: string
        xml:
          name: sourcingChannel
      SourcingChannelGraphQlContent:
        type: object
        properties:
          sourcingChannels:
            type: array
            items:
              $ref: '#/components/schemas/SourcingChannelDto'
      SourcingChannelGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/SourcingChannelGraphQlContent'
      SponsoredJobContextDto:
        type: object
        properties:
          maxBudget:
            type: string
          phoneNumber:
            type: string
          maxBudgetValue:
            type: number
            format: double
          sponsoredUserEmail:
            type: string
        xml:
          name: sponsoredJobContext
      StandardFieldDto:
        type: object
        properties:
          lovId:
            type: integer
            format: int64
          name:
            type: string
          translatedName:
            type: string
          defaultValue:
            type: integer
            format: int64
          possibleValues:
            type: object
            additionalProperties:
              type: string
          fatherRef:
            type: string
          active:
            type: boolean
            default: false
          tsTrigger:
            type: boolean
            default: false
      StandardRateDto:
        type: object
        properties:
          minAmount:
            type: number
          maxAmount:
            type: number
          currency:
            type: string
          period:
            type: string
        xml:
          name: standardRate
      StateDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          technicalState:
            type: string
            enum:
              - DRAFT
              - CANCELLED
              - COMPLETED
              - FOR_APPROVAL
              - APPROVED
              - REVIEW
              - EVALUATION
              - ARCHIVED
              - DENIED
              - PRE_CHECKING
              - IN_PROCESS
              - REJECTED
              - NOT_STARTED
              - REQUESTED
          processDefinition:
            $ref: '#/components/schemas/ProcessDefinitionDto'
          technicalId:
            type: integer
            format: int32
      StatusCommentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          value:
            type: string
      StatusCommentResponseDto:
        type: object
        properties:
          statusComments:
            type: array
            items:
              $ref: '#/components/schemas/StatusCommentDto'
      StepDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          nextStep:
            $ref: '#/components/schemas/StepDto'
          status:
            type: string
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          stepMembers:
            type: array
            items:
              $ref: '#/components/schemas/StepMemberDto'
      StepMemberDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/UserDto'
          status:
            type: string
          order:
            type: integer
            format: int64
      StructuredDataDto:
        type: object
        properties:
          data:
            type: string
      StructuredDocumentDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          score:
            type: integer
            format: int64
          questions:
            type: array
            items:
              $ref: '#/components/schemas/AssignedQuestionDto'
      SubmitReportRequest:
        type: object
        properties:
          requestId:
            type: string
          report:
            $ref: '#/components/schemas/ReportDto'
      SubmitResourceRequest:
        type: object
        properties:
          requestId:
            type: string
          name:
            type: string
          location:
            type: string
            format: url
          value:
            type: string
          sendCandidateEmailWithoutUrl:
            type: boolean
            default: false
      SubmitResultsRequest:
        type: object
        properties:
          requestId:
            type: string
          results:
            $ref: '#/components/schemas/StructuredDocumentDto'
      SubmitStatusRequest:
        type: object
        properties:
          requestId:
            type: string
          status:
            type: string
      TagCategoryDto:
        type: object
        properties:
          name:
            type: string
          id:
            type: integer
            format: int64
      TagDto:
        type: object
        properties:
          name:
            type: string
          labelKey:
            type: string
          id:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          tagType:
            $ref: '#/components/schemas/TagTypeDto'
      TagTypeDto:
        type: object
        properties:
          name:
            type: string
          labelKey:
            type: string
          id:
            type: integer
            format: int64
          department:
            $ref: '#/components/schemas/DepartmentDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
      TaskNotificationDto:
        type: object
        required:
          - enabled
          - taskTypeName
        properties:
          enabled:
            type: boolean
            default: false
          taskTypeName:
            type: string
            enum:
              - RESUME_REVIEW
              - PANEL_REVIEW
      TeamMemberBasicDto:
        type: object
        required:
          - order
          - user
        properties:
          order:
            type: integer
            format: int32
          lovValue:
            type: string
          user:
            $ref: '#/components/schemas/IdDto'
          userId:
            type: integer
            format: int64
      TeamMemberFullDto:
        type: object
        required:
          - order
        properties:
          order:
            type: integer
            format: int32
          lovValue:
            type: string
          user:
            $ref: '#/components/schemas/UserDto'
      TemporaryAttachmentDto:
        type: object
        properties:
          fileName:
            type: string
          base64EncodedContent:
            type: string
          externalId:
            type: integer
            format: int64
      TestParameterDto:
        type: object
        properties:
          name:
            type: string
          value:
            type: string
          required:
            type: boolean
            default: false
          mergedValue:
            type: string
      ThemeDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          type:
            type: string
      TimeSheetBasicDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
      TimeSheetExpenseDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          description:
            type: string
          amount:
            type: number
          category:
            type: string
          currency:
            type: string
          creationUser:
            $ref: '#/components/schemas/UserDto'
          creationDate:
            type: integer
            format: int64
          updateUser:
            $ref: '#/components/schemas/UserDto'
          updateDate:
            type: integer
            format: int64
          attachedFileName:
            type: string
      TimeSheetFullDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          jobTitle:
            type: string
          contract:
            $ref: '#/components/schemas/FullContractDto'
          totalUnit:
            type: number
            format: double
          totalCostUnit:
            type: number
            format: double
          remainingBudget:
            type: number
            format: double
          costCenterTotalBudget:
            type: number
          application:
            $ref: '#/components/schemas/ApplicationDto'
          status:
            type: string
            enum:
              - New
              - Approved
              - Reversal
              - Submitted
              - InProcess
              - Rejected
              - ApprovalInProgress
          reasonOfAdjustment:
            type: string
          purchaseOrder:
            type: string
          comments:
            type: string
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          submitDate:
            type: integer
            format: int64
          approvedDate:
            type: integer
            format: int64
          active:
            type: boolean
            default: false
          type:
            type: string
            enum:
              - Normal
              - DateAdjCorrection
              - RateAdjCorrection
              - DataAdjCorrection
              - TimeAdjCorrection
              - DateAdjReversal
              - RateAdjReversal
              - DataAdjReversal
              - TimeAdjReversal
              - OnlyExpenseContainer
              - CostCenterChanged
              - CostCenterReversal
              - ContractUnacceptedReversal
          parent:
            $ref: '#/components/schemas/TimeSheetFullDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
          updateUser:
            $ref: '#/components/schemas/UserDto'
          approver:
            $ref: '#/components/schemas/UserDto'
          submitter:
            $ref: '#/components/schemas/UserDto'
          assignedApprover:
            $ref: '#/components/schemas/UserDto'
          units:
            type: array
            items:
              $ref: '#/components/schemas/TimeSheetUnitDto'
          expenses:
            type: array
            items:
              $ref: '#/components/schemas/TimeSheetExpenseDto'
          costCenter:
            type: string
          availableApprovers:
            type: array
            items:
              $ref: '#/components/schemas/UserDto'
          firstStep:
            $ref: '#/components/schemas/StepDto'
          contractStartDate:
            type: integer
            format: int64
          contractEndDate:
            type: integer
            format: int64
          organisationNameLevel2:
            type: string
          agencyName:
            type: string
          expenseAmount:
            type: number
          sourcingChannelType:
            type: string
          sourcingChannelName:
            type: string
      TimeSheetGraphQlContent:
        type: object
        properties:
          timeSheets:
            type: array
            items:
              $ref: '#/components/schemas/TimeSheetFullDto'
      TimeSheetGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/TimeSheetGraphQlContent'
      TimeSheetUnitDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          order:
            type: integer
            format: int64
          comment:
            type: string
          unit:
            type: number
            format: double
          rate:
            $ref: '#/components/schemas/RateDto'
          creationDate:
            type: integer
            format: int64
          startDate:
            type: integer
            format: int64
          endDate:
            type: integer
            format: int64
      TimeZoneDto:
        type: object
        properties:
          name:
            type: string
      TimeZoneGraphQlContent:
        type: object
        properties:
          timezones:
            type: array
            items:
              $ref: '#/components/schemas/TimeZoneDto'
      TimeZoneGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/TimeZoneGraphQlContent'
      TimesheetApprovalStepBasicDto:
        type: object
        properties:
          stepNumber:
            type: integer
            format: int64
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApproverBasicDto'
      TimesheetApprovalStepDto:
        type: object
        properties:
          stepNumber:
            type: integer
            format: int64
          approvers:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApproverDto'
      TimesheetApproveRequestDto:
        type: object
        properties:
          comment:
            type: string
      TimesheetApproverBasicDto:
        type: object
        properties:
          order:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/IdDto'
      TimesheetApproverDto:
        type: object
        properties:
          order:
            type: integer
            format: int64
          user:
            $ref: '#/components/schemas/UserDto'
          creationUser:
            $ref: '#/components/schemas/UserDto'
      TimesheetConfigBasicDto:
        type: object
        required:
          - consolidationBreakdown
          - consolidationPeriod
        properties:
          consolidationPeriod:
            type: string
          consolidationBreakdown:
            type: string
          communicationLanguage:
            type: string
          useAllApproversInApprovalProcess:
            type: boolean
            default: false
          approvalConfig:
            $ref: '#/components/schemas/ApprovalConfigBasicDto'
          candidateEmail:
            type: string
      TimesheetConfigDto:
        type: object
        properties:
          consolidationPeriod:
            type: string
          consolidationBreakdown:
            type: string
          communicationLanguage:
            type: string
          useAllApproversInApprovalProcess:
            type: boolean
            default: false
          approvalConfig:
            $ref: '#/components/schemas/ApprovalConfigDto'
      TimesheetRejectRequestDto:
        type: object
        properties:
          comment:
            type: string
      TimesheetSubmitRequestDto:
        type: object
        properties:
          rate:
            type: array
            items:
              $ref: '#/components/schemas/RateUnitRequestDto'
          approversList:
            type: array
            items:
              type: integer
              format: int32
          comments:
            type: string
      TimesheetWithoutCostCenterApprovalConfigBasicDto:
        type: object
        properties:
          overdueTasksThresholdDays:
            type: integer
            format: int64
          steps:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApprovalStepBasicDto'
      TimesheetWithoutCostCenterApprovalConfigDto:
        type: object
        properties:
          overdueTasksThresholdDays:
            type: integer
            format: int64
          steps:
            type: array
            items:
              $ref: '#/components/schemas/TimesheetApprovalStepDto'
      TlkQueueDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          creator:
            $ref: '#/components/schemas/UserDto'
          creationDate:
            type: integer
            format: int64
          lastActionDate:
            type: integer
            format: int64
          owner:
            $ref: '#/components/schemas/UserDto'
          uniqueElements:
            type: boolean
            default: false
          elementsType:
            type: string
            enum:
              - CANDIDATE_ELEMENT
              - APPLICATION_ELEMENT
              - APPLICATION_SELECTION_TASK
              - OPENING_ELEMENT
              - CONTRACT_ELEMENT
              - TIMESHEET_ELEMENT
              - EXTERNAL_SYSTEM_REQUEST_ELEMENT
              - POSTING
              - ARCHIVED_OR_REMOVED_CANDIDATE
              - USER
          content:
            type: array
            items:
              $ref: '#/components/schemas/QueueAssignmentDto'
          history:
            type: array
            items:
              $ref: '#/components/schemas/QueueAssignmentHistoryDto'
          listeners:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/EventServiceConfDto'
          settings:
            type: string
          actionSettings:
            type: array
            items:
              $ref: '#/components/schemas/QueueActionSettingsDto'
          queueUsers:
            type: array
            uniqueItems: true
            items:
              $ref: '#/components/schemas/UserDto'
      TotalCostDto:
        type: object
        properties:
          minimum:
            type: number
          maximum:
            type: number
          currency:
            type: string
      TranslationsDto:
        type: object
        properties:
          id:
            type: string
          all:
            type: object
            additionalProperties:
              type: string
          ar:
            type: string
          bg:
            type: string
          pl:
            type: string
          pt:
            type: string
          dn:
            type: string
          nl:
            type: string
          ro:
            type: string
          sk:
            type: string
          sl:
            type: string
          ja:
            type: string
          sp:
            type: string
          is:
            type: string
          br:
            type: string
          cn:
            type: string
          cy:
            type: string
          et:
            type: string
          de:
            type: string
          fl:
            type: string
          gl:
            type: string
          hr:
            type: string
          el:
            type: string
          it:
            type: string
          ch:
            type: string
          cs:
            type: string
          fr:
            type: string
          ko:
            type: string
          lt:
            type: string
          my:
            type: string
          nw:
            type: string
          hu:
            type: string
          ru:
            type: string
          en:
            type: string
          fn:
            type: string
          lv:
            type: string
          ua:
            type: string
          tw:
            type: string
          vi:
            type: string
          sw:
            type: string
          uk:
            type: string
          wa:
            type: string
          ca:
            type: string
          tr:
            type: string
          at:
            type: string
          th:
            type: string
          sr:
            type: string
          mx:
            type: string
      UnpostAdvertDto:
        type: object
        required:
          - postingTargets
        properties:
          postingTargets:
            type: array
            items:
              type: integer
              format: int64
      UpdateApplicationScoreDto:
        type: object
        required:
          - applicationId
          - score
          - system
        properties:
          score:
            type: number
            format: double
          system:
            type: string
          info:
            type: string
          applicationId:
            type: integer
            format: int64
          populateScoreToChildApplications:
            type: boolean
            default: false
      UpdateConsentDto:
        type: object
        required:
          - consentId
          - status
        properties:
          consentId:
            type: integer
            format: int64
          status:
            type: string
            description: New status
            enum:
              - NOT_REQUESTED
              - REQUESTED
              - GRANTED
              - REVOKED_BY_USER
              - WITHDRAWN_BY_CANDIDATE
              - EXPIRED
          comment:
            type: string
      UpdateLovEntriesDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/UpdateLovEntryDto'
      UpdateLovEntriesWithDataFormatAndRequiredDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/UpdateLovEntryWithDataFormatAndRequiredDto'
      UpdateLovEntriesWithDataValueDto:
        type: object
        required:
          - entries
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/UpdateLovEntryWithDataValueDto'
      UpdateLovEntryDto:
        type: object
        required:
          - id
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          id:
            type: integer
            format: int64
      UpdateLovEntryWithDataFormatAndRequiredDto:
        type: object
        required:
          - dataFormat
          - id
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          id:
            type: integer
            format: int64
          dataFormat:
            type: string
          required:
            type: boolean
            default: false
      UpdateLovEntryWithDataValueDto:
        type: object
        required:
          - id
          - value
        properties:
          value:
            type: string
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
          id:
            type: integer
            format: int64
          dataValue:
            type: number
      UpdateLovLabelsDto:
        type: object
        required:
          - id
          - labels
        properties:
          id:
            type: integer
            format: int64
          labels:
            type: array
            items:
              $ref: '#/components/schemas/LovLabelDto'
      UpdateLovPropertiesDto:
        type: object
        properties:
          requisitionSections:
            type: string
            enum:
              - ADMINISTRATION
              - DESCRIPTION
              - ADVERTISEMENT
              - OFFER_CONTRACT
          required:
            type: boolean
            default: false
          updatable:
            type: boolean
            default: false
          useInPostingExtract:
            type: boolean
            default: false
          useInApplicationExtract:
            type: boolean
            default: false
          fieldType:
            type: string
            enum:
              - CORPORATE_GSA
              - CORPORATE_LOCAL
              - SPECIFIC_DEPARTMENT
          useInOpeningPermanent:
            type: boolean
            default: false
          useInOpeningContractor:
            type: boolean
            default: false
          useInPermanentContract:
            type: boolean
            default: false
          useInTemporaryContract:
            type: boolean
            default: false
          imageLibrary:
            type: boolean
            default: false
          searchable:
            type: boolean
            default: false
          filterable:
            type: boolean
            default: false
          sortOrder:
            type: string
            enum:
              - ALPHABETICAL
              - NUMERICAL
          accessibleInReports:
            type: boolean
            default: false
          departmentId:
            type: integer
            format: int64
      UserActionsDto:
        type: object
        properties:
          update:
            $ref: '#/components/schemas/ActionDto'
          delete:
            $ref: '#/components/schemas/ActionDto'
          activate:
            $ref: '#/components/schemas/ActionDto'
          deactivate:
            $ref: '#/components/schemas/ActionDto'
          copyRolesFromAnotherProfile:
            $ref: '#/components/schemas/ActionDto'
          changePassword:
            $ref: '#/components/schemas/ActionDto'
          updateRole:
            $ref: '#/components/schemas/ActionDto'
          deleteRole:
            $ref: '#/components/schemas/ActionDto'
          updateEventNotification:
            $ref: '#/components/schemas/ActionDto'
          updateDocumentSecurity:
            $ref: '#/components/schemas/ActionDto'
          deleteDocumentSecurity:
            $ref: '#/components/schemas/ActionDto'
          updateUserData:
            $ref: '#/components/schemas/ActionDto'
          updateAssignNamedAccessRoles:
            $ref: '#/components/schemas/ActionDto'
          assignJobTemplate:
            $ref: '#/components/schemas/ActionDto'
          updateMailGateway:
            $ref: '#/components/schemas/ActionDto'
      UserDataDto:
        type: object
        properties:
          lovs:
            type: array
            items:
              $ref: '#/components/schemas/LovDto'
          fffs:
            type: array
            items:
              $ref: '#/components/schemas/FreeFormFieldDto'
      UserDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          login:
            type: string
          fullName:
            type: string
          language:
            type: string
      UserFullDto:
        type: object
        properties:
          login:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          email:
            type: string
          language:
            type: string
          mss:
            type: boolean
            default: false
          disabledLoginPage:
            type: boolean
            default: false
          id:
            type: integer
            format: int64
          updateDate:
            type: integer
            format: int64
          creationDate:
            type: integer
            format: int64
          status:
            type: string
          mustChangePassword:
            type: boolean
            default: false
          roleAssignments:
            type: array
            items:
              $ref: '#/components/schemas/RoleAssignmentDto'
          mailGatewayConfiguration:
            $ref: '#/components/schemas/MailGatewayConfigurationDto'
          eventNotificationConfiguration:
            $ref: '#/components/schemas/EventNotificationConfigurationDto'
          userPreferences:
            $ref: '#/components/schemas/UserPreferencesDto'
          userData:
            $ref: '#/components/schemas/UserDataDto'
          roleInRequisition:
            $ref: '#/components/schemas/RoleDto'
          roleToReceiveCandidate:
            $ref: '#/components/schemas/RoleDto'
          documentSecurity:
            type: array
            items:
              $ref: '#/components/schemas/DocumentSecurityDto'
          emailContact:
            type: boolean
            default: false
          actions:
            $ref: '#/components/schemas/UserActionsDto'
          personalJobTemplates:
            type: array
            items:
              $ref: '#/components/schemas/PersonalJobTemplateFullDto'
          publicKeyConfigured:
            type: boolean
            default: false
      UserGlobalActionsDto:
        type: object
        properties:
          create:
            $ref: '#/components/schemas/ActionDto'
      UserGraphQlContent:
        type: object
        properties:
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserFullDto'
          actions:
            $ref: '#/components/schemas/UserGlobalActionsDto'
      UserGraphQlWrapperDto:
        type: object
        properties:
          data:
            $ref: '#/components/schemas/UserGraphQlContent'
      UserGroupDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          lovName:
            type: string
          members:
            type: array
            items:
              $ref: '#/components/schemas/UserGroupMemberDto'
          activeDepartments:
            type: array
            items:
              $ref: '#/components/schemas/DepartmentDto'
          type:
            type: string
            enum:
              - GENERIC
              - PANEL_ACTUAL
              - PANEL_DEFAULT
              - RECRUITING_TEAM
              - OPERATIONAL_TEAM
              - ADDITIONAL_INTERVIEWERS
          auditData:
            $ref: '#/components/schemas/AuditDataEmbeddableDto'
      UserGroupMemberDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          group:
            $ref: '#/components/schemas/UserGroupDto'
          lovValue:
            type: string
          order:
            type: integer
            format: int32
      UserPasswordDto:
        type: object
        required:
          - password
        properties:
          password:
            type: string
      UserPreferencesDto:
        type: object
        required:
          - meetingConfirmationFormat
          - preferredCommunicationChannel
        properties:
          dateFormat:
            type: string
          timeFormat:
            type: string
            enum:
              - H12
              - H24
          timeZone:
            type: string
          currency:
            type: string
          firstDayOfWeek:
            type: string
            enum:
              - SUNDAY
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
          emailSignature:
            $ref: '#/components/schemas/MailDto'
          letterSignature:
            $ref: '#/components/schemas/MailDto'
          displayTimeAlerts:
            type: boolean
            default: false
          meetingLocation:
            $ref: '#/components/schemas/MeetingLocationDto'
          interviewAvailability:
            type: string
          meetingDuration:
            type: string
            enum:
              - HALF_HOUR
              - HOUR
              - HOUR_AND_HALF
              - TWO_HOURS
              - TWO_HOURS_AND_HALF
              - THREE_HOURS
          meetingPauseDuration:
            type: string
            enum:
              - QUARTER
              - HALF_HOUR
              - THREE_QUARTERS
              - HOUR
          meetingReminderBefore:
            type: string
            enum:
              - QUARTER
              - HALF_HOUR
              - THREE_QUARTERS
              - HOUR
          meetingReminder:
            type: boolean
            default: false
          meetingConfirmationFormat:
            type: string
            enum:
              - EMAIL
              - VCAL
          useDefaultTheme:
            type: boolean
            default: false
          theme:
            $ref: '#/components/schemas/ThemeDto'
          recruitmentRole:
            type: string
          otherRecruitmentRole:
            type: string
          cellphone:
            type: string
          unitOfLength:
            type: string
            enum:
              - KILOMETERS
              - MILES
          preferredCommunicationChannel:
            type: string
            enum:
              - EMAIL
              - COMMUNICATION_CENTER
          language:
            type: string
          publicKey:
            type: string
      UserThemeDto:
        type: object
        required:
          - departments
          - themeDto
        properties:
          themeDto:
            $ref: '#/components/schemas/ThemeDto'
          departments:
            type: array
            items:
              $ref: '#/components/schemas/DepartmentIdNameDto'
      UserThemesDto:
        type: object
        required:
          - userThemes
        properties:
          userThemes:
            type: array
            items:
              $ref: '#/components/schemas/UserThemeDto'
      VisaDetailsDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          issueDate:
            type: integer
            format: int64
          validFrom:
            type: integer
            format: int64
          expirationDate:
            type: integer
            format: int64
          visaType:
            type: string
          passNum:
            type: string
          placeOfIssue:
            type: string
          numOfEntries:
            type: string
          refNum:
            type: string
          notes:
            type: string
          country:
            type: string
          employee:
            $ref: '#/components/schemas/EmployeeDto'
          employeeFullName:
            type: string
          internalMessage:
            $ref: '#/components/schemas/InternalMessageFullDto'
      WorkTimeDto:
        type: object
        properties:
          workPeriod:
            type: string
            enum:
              - Day
              - Week
              - Month
              - Quarter
              - Year
          workUnit:
            type: string
            enum:
              - Hours
              - Days
              - Weeks
              - Months
              - Quarters
          timeCount:
            type: number
            format: float
      WorkflowStepDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      WorkflowStepInstanceDto:
        type: object
        properties:
          id:
            type: integer
            format: int64
          step:
            $ref: '#/components/schemas/WorkflowStepDto'
          creationDate:
            type: integer
            format: int64
          modificationDate:
            type: integer
            format: int64
          status:
            type: string
            enum:
              - STARTED
              - COMPLETE
              - CANCELLED
          processInstance:
            $ref: '#/components/schemas/ProcessInstanceDto'
          suspendedInAllContexts:
            type: boolean
            default: false
konfigCliVersion: 1.38.37
