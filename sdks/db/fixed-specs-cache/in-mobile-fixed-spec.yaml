publishJson:
  company: inMobile
  serviceName: false
  sdkName: in-mobile-{language}-sdk
  clientName: InMobile
  metaDescription: >-
    inMobile er en SMS-Gateway testet af over 8.000 brugere. Vi håndterer over
    150 mio. SMS-beskeder årligt og tilstræber en oppetid på 100%, men sandheden
    er 99,99%.


    Uanset, om det drejer sig om at informere dine kunder, medarbejdere eller
    andre personer, som er vigtige for din virksomhed, gør inMobile det nemt for
    de rette personer at få besked på det rette tidspunkt.


    Du får adgang til en brugervenlig SMS-Gateway og et gennemtestet API, som du
    nemt kan integrere med dit eget system eller hjemmeside.


    Ønsker du at høre mere om vores løsning, er du velkommen til at kontakte os
    på +45 88 33 66 99 eller på mail salg@inmobile.dk

    Vi har åbent alle hverdage mellem kl. 8-17
  apiStatusUrls: inherit
  homepage: inmobile.com
  developerDocumentation: www.inmobile.com/docs/rest-api
  categories:
    - messaging
    - sms
rawSpecString: >
  x-generator: NSwag v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json
  v13.0.0.0))

  openapi: 3.0.0

  info:
    title: inMobile REST API
    description: "\r\n# Introduction\r\n\r\nThis document is a technical description of our REST API used for external systems to send sms messages and to retrieve a status for each sms message sent and to maintain lists and blacklists.\r\n\r\nIn order to call our API, you need an api key. Log in to your account at https://mm.inmobile.dk, go to the \"API\" menu section and your api key will be available here.\r\n\r\nNOTE: It is required for clients to support tls 1.2 or higher.\r\n\r\n\r\n# Firewall openings\r\n\r\nThis is relevant for status callbacks and incoming SMS messages.\r\n\r\nYou can expect callbacks from one of the following IP ranges:\r\n\r\n* 46.36.205.80/28\r\n* 185.221.37.96/28\r\n\r\nThese are also the ip addresses which will be used for api.inmobile.com and mm.inmobile.dk - ensure access to these 2 ranges are opened in your firewall."
    version: version 4
  servers:
    - url: https://api.inmobile.com
  paths:
    /v4/blacklist:
      get:
        tags:
          - Blacklist
        summary: Returns all blacklists (Paged result. Follow _links.next to fetch all)
        operationId: Blacklist_GetAll
        parameters:
          - name: pageLimit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of all blacklists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiPageModelOfBlacklistOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      post:
        tags:
          - Blacklist
        summary: Create an entry in blacklist
        operationId: Blacklist_Create
        requestBody:
          x-name: blacklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlacklistCreateApiModel'
          required: true
          x-position: 1
        responses:
          '200':
            description: The created blacklist
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlacklistOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '409':
            description: Conflict
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/blacklist/{blackListId}:
      get:
        tags:
          - Blacklist
        summary: Get entry by id
        operationId: Blacklist_Get
        parameters:
          - name: blackListId
            in: path
            required: true
            description: Id of the blacklist
            schema:
              type: string
              format: guid
            x-position: 1
        responses:
          '200':
            description: A blacklist
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlacklistOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      delete:
        tags:
          - Blacklist
        summary: Delete entry by id
        operationId: Blacklist_Delete
        parameters:
          - name: blackListId
            in: path
            required: true
            description: Id of the blacklist
            schema:
              type: string
              format: guid
            x-position: 1
        responses:
          '204':
            description: ''
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/blacklist/ByNumber:
      get:
        tags:
          - Blacklist
        summary: Get entry by number
        operationId: Blacklist_GetByNumber
        parameters:
          - name: countryCode
            in: query
            schema:
              type: string
            x-position: 1
          - name: phoneNumber
            in: query
            schema:
              type: string
            x-position: 2
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BlacklistOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      delete:
        tags:
          - Blacklist
        summary: Delete entry by number
        operationId: Blacklist_DeleteByNumber
        parameters:
          - name: countryCode
            in: query
            schema:
              type: string
            x-position: 1
          - name: phoneNumber
            in: query
            schema:
              type: string
            x-position: 2
        responses:
          '204':
            description: ''
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/email/outgoing/sendusingtemplate:
      post:
        tags:
          - Email
        summary: Send an email using a template
        operationId: EmailOutgoing_SendUsingTemplate
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutgoingTemplatePostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailOutgoingTemplatePostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/email/outgoing:
      post:
        tags:
          - Email
        summary: Send an email
        operationId: EmailOutgoing_Send
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailOutgoingPostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailOutgoingBasePostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/email/outgoing/events:
      get:
        tags:
          - Email
        summary: Get email events
        description: >-
          Each event will only be returned once. Once called, the event has been
          removed from our side and cannot be retrieved again using this method.
        operationId: EmailOutgoing_GetEvents
        parameters:
          - name: limit
            in: query
            description: How many events to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of email events
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailEventListModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/email/templates:
      get:
        tags:
          - Email Templates
        summary: Get all email templates
        description: >-
          This response is a paged result and will contain the property
          '_links.next'.

          If there are more pages, the next page in the paged result will be
          provided here.
        operationId: EmailTemplates_GetAllEmailTemplates
        parameters:
          - name: pageLimit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of email templates
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiPageModelOfEmailTemplateOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/email/templates/{id}:
      get:
        tags:
          - Email Templates
        summary: Get email template by id
        operationId: EmailTemplates_GetEmailTemplate
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
            x-position: 1
        responses:
          '200':
            description: An email template
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmailTemplateOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/gdpr/deletionrequests:
      post:
        tags:
          - Gdpr
        summary: Create information Deletion Request
        operationId: Gdpr_DeletionRequests
        requestBody:
          x-name: deletionRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionRequestCreateInfo'
          required: true
          x-position: 1
        responses:
          '200':
            description: The created information Deletion Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RequestDeletionOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists:
      get:
        tags:
          - Lists
        summary: Get all lists
        description: >-
          This response is a paged result and will contain the property
          '_links.next'.

          If there are more pages, the next page in the paged result will be
          provided here.
        operationId: Lists_GetAllLists
        parameters:
          - name: pageLimit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of lists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiPageModelOfGroupOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      post:
        tags:
          - Lists
        summary: Create list
        operationId: Lists_CreateList
        requestBody:
          x-name: list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInputApiModel'
          required: true
          x-position: 1
        responses:
          '200':
            description: The created list
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists/{listId}:
      get:
        tags:
          - Lists
        summary: Get list
        operationId: Lists_GetList
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
        responses:
          '200':
            description: A list
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      delete:
        tags:
          - Lists
        summary: Delete list
        operationId: Lists_DeleteList
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
        responses:
          '204':
            description: ''
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      put:
        tags:
          - Lists
        summary: Update list
        operationId: Lists_UpdateList
        parameters:
          - name: listId
            in: path
            required: true
            description: The id of the list
            schema:
              type: string
              format: guid
            x-position: 1
        requestBody:
          x-name: list
          description: The list object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInputApiModel'
          required: true
          x-position: 2
        responses:
          '200':
            description: The updated list
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GroupOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists/{listId}/recipients:
      get:
        tags:
          - Lists
        summary: Get all recipients in a list
        description: >-
          This response is a paged result and will contain the property
          '_links.next'.

          If there are more pages, the next page in the paged result will be
          provided here.
        operationId: Lists_GetAllRecipient
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: pageLimit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 2
        responses:
          '200':
            description: A list of recipients
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiPageModelOfRecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      post:
        tags:
          - Lists
        summary: Create recipient
        operationId: Lists_CreateRecipient
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
        requestBody:
          x-name: recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientCreateApiModel'
          required: true
          x-position: 2
        responses:
          '200':
            description: The created recipient
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '409':
            description: Conflict
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists/{listId}/recipients/all:
      delete:
        tags:
          - Lists
        summary: Deletes all recipients from a list
        operationId: Lists_DeleteAllRecipients
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
        responses:
          '204':
            description: The affected count
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists/{listId}/recipients/{recipientId}:
      get:
        tags:
          - Lists
        summary: Get recipient by id
        operationId: Lists_GetRecipient
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: recipientId
            in: path
            required: true
            description: Id of the recipient
            schema:
              type: string
              format: guid
            x-position: 2
        responses:
          '200':
            description: A recipient
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      delete:
        tags:
          - Lists
        summary: Delete recipient by id
        operationId: Lists_DeleteRecipient
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: recipientId
            in: path
            required: true
            description: Id of the recipient
            schema:
              type: string
              format: guid
            x-position: 2
        responses:
          '204':
            description: ''
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      put:
        tags:
          - Lists
        summary: Update recipient
        description: >-
          Only mentioned fields are updated, e.g. leave out fields["email"] if you
          do not want to update this field. On the other hand, set fields["email"]
          = null in case you want to erase the existing value.
        operationId: Lists_UpdateRecipient
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: recipientId
            in: path
            required: true
            schema:
              type: string
              format: guid
            x-position: 2
        requestBody:
          x-name: recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientUpdateApiModel'
          required: true
          x-position: 3
        responses:
          '200':
            description: The updated recipient
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '409':
            description: Conflict
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/lists/{listId}/recipients/ByNumber:
      get:
        tags:
          - Lists
        summary: Get recipient by number
        operationId: Lists_GetRecipientByNumber
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: countryCode
            in: query
            description: Target countryCode
            schema:
              type: string
            x-position: 2
          - name: phoneNumber
            in: query
            description: Target phoneNumber
            schema:
              type: string
            x-position: 3
        responses:
          '200':
            description: A recipient
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      delete:
        tags:
          - Lists
        summary: Delete recipient by number
        operationId: Lists_DeleteRecipientByNumber
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: countryCode
            in: query
            description: Target countryCode
            schema:
              type: string
            x-position: 2
          - name: phoneNumber
            in: query
            description: Target phoneNumber
            schema:
              type: string
            x-position: 3
        responses:
          '204':
            description: ''
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
      post:
        tags:
          - Lists
        summary: Create or update recipient by number
        operationId: Lists_CreateOrUpdateRecipientByNumber
        parameters:
          - name: listId
            in: path
            required: true
            description: Id of the list
            schema:
              type: string
              format: guid
            x-position: 1
          - name: countryCode
            in: query
            description: Target countryCode
            schema:
              type: string
            x-position: 2
          - name: phoneNumber
            in: query
            description: Target phoneNumber
            schema:
              type: string
            x-position: 3
        requestBody:
          x-name: recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientCreateOrUpdateApiModel'
          required: true
          x-position: 4
        responses:
          '200':
            description: The created or updated recipient
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RecipientOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/incoming/messages:
      get:
        tags:
          - Sms - Incoming
        summary: Get incoming sms messages.
        description: >-
          Each message will only be returned once. Once called, the message has
          been marked as read from our side and cannot be retrieved again using
          this method.

          Using api callbacks in combination with this call does not conflict.
        operationId: SmsIncoming_GetMessages
        parameters:
          - name: limit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of messages
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IncomingMessageListModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/outgoing:
      post:
        tags:
          - Sms - Outgoing
        summary: Send sms messages.
        operationId: SmsOutgoing_Create
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsOutgoingPostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SmsOutgoingPostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
        callbacks:
          status:
            https://[your_domain]/your/desired/path:
              post:
                summary: Status callback url (Webhook)
                description: >-
                  The status callback url to receive status information on when
                  sms messages are delivered (or if they fail).

                  This is a call done by us to you and the url to be called, is
                  the one specified when sending the messages.
                              
                  Only messages with 100% identical message callbacks will be
                  grouped together into the same call. Messages with different
                  callback urls will never be grouped together in a single
                  callback.
                requestBody:
                  x-name: payload
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/StatusReportListModel'
                  required: true
                  x-position: 1
                responses:
                  '200':
                    description: ''
    /v4/sms/outgoing/sendusingquery:
      get:
        tags:
          - Sms - Outgoing
        summary: Send sms messages using query parameters.
        description: >-
          It is strongly recommended to use the POST version instead of this
          version to send text messages. This endpoint is only a emergency
          fallback option for systems that are not capable of doing an HTTP post.
        operationId: SmsOutgoing_SendUsingQueryGET
        parameters:
          - name: Text
            in: query
            description: >-
              The text message.

              If the max length is exceeded, the message text is truncated and
              sent.
            schema:
              type: string
              maxLength: 10000
              minLength: 1
              example: This is a message text to be sent
            x-position: 1
          - name: From
            in: query
            description: >-
              The sender. This can either be a 3-11 chars text sender or an up to
              14 digit long sender number.

              If the max length is exceeded, the string is truncated.
            schema:
              type: string
              example: PetShop
            x-position: 2
          - name: Flash
            in: query
            description: >-
              If true, the message will be shown as a flash message (also known as
              a class0 message) on the target phone. If false, it will be received
              as a standard text message.

              Default: false
            schema:
              type: boolean
              nullable: true
              example: false
            x-position: 3
          - name: Encoding
            in: query
            description: >-
              The encoding of the message. Can be either "gsm7", "ucs2" or "auto".

              "gsm7" is the default alfabet for text messages and when using gsm7,
              a single sms message can contain 160 characters. If the length
              exceeeds 160 characters, the message is actually split up into parts
              of 153 characters and charged according to this. Please note, that a
              few, specific characters fill up 2 bytes and count for 2 letters.
              Ref: https://en.wikipedia.org/wiki/GSM_03.38

              "ucs2"" allows for more non-roman characters to be used along with
              smileys. When using this encoding, a single message can consist of
              70 characters. If the message exceeds 70 characters, the final
              message is actually split into parts of 67 characters.

              "auto" can be used in case the sender wishes to support non-roman
              characters but wants to save the expenses on all the trafic that
              only contains gsm characters anyway.

              Default: "gsm7"
            schema:
              type: string
              example: gsm7
            x-position: 4
          - name: To
            in: query
            description: >-
              The msisdn (country code and number) to send to. (Remember to
              include countrycode in all numbers, e.g. 4512345678).

              If max length is exceeded, the entire api call will fail.
            schema:
              type: string
              maxLength: 20
              minLength: 0
              example: '4512345678'
            x-position: 5
          - name: CountryHint
            in: query
            description: >-
              For optimal phone number validation, we encourage you to provide us
              with a country code. This can be the numeric country code (like 44)
              or the two-letter suffix (like GB). If this field is empty it is
              important that you add the country code (e.g 44) in front of the
              phone number in “to”.
            schema:
              type: string
              maxLength: 50
              minLength: 0
              example: '45'
            x-position: 6
          - name: MessageId
            in: query
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)

              If max length is exceeded, the entire api call will fail.
            schema:
              type: string
              maxLength: 50
              minLength: 1
              example: PetShop
            x-position: 7
          - name: RespectBlacklist
            in: query
            description: >-
              If true, this message will be blocked from sending if the target
              number is on the account's blacklist. If false, the message will be
              sent no matter blacklist settings.

              Default: true
            schema:
              type: boolean
              nullable: true
              example: true
            x-position: 8
          - name: ValidityPeriodInSeconds
            in: query
            description: >-
              The validity period in seconds. Minimum is 60 seconds and maximum is
              172800 (48 hours).

              If not specified, the messages is attempted to be delivered in 48
              hours. A typical use of validityPeriod is for messages that makes no
              sense to delivery efter er certain time frame, in the case the phone
              is turned of, e.g. two factor codes.

              Please note, that messages are still charged even though the
              operator is cancelling the delivery attempt due to an exceeded
              validity period.
            schema:
              type: integer
              format: int32
              maximum: 172800
              minimum: 60
              nullable: true
              example: 90
            x-position: 9
          - name: StatusCallbackUrl
            in: query
            description: >-
              In case you would like a callback from us when the message is
              delivered, you can specify it here and we will call it when we have
              new message statuses.

              The callback payload will be an array of status objects.

              Api calls sending messages with the same apikey will be subject to
              being bulked together.
            schema:
              type: string
              maxLength: 500
              minLength: 0
              example: https://[your_domain]/your/desired/path
            x-position: 10
          - name: SendTime.UtcTime
            in: query
            schema:
              type: string
              format: date-time
            x-position: 11
          - name: SendTime.LocalServerTime
            in: query
            schema:
              type: string
              format: date-time
            x-position: 12
          - name: MsisdnCooldownInMinutes
            in: query
            description: >-
              If set, the message will be cancelled if the same mobile number
              already have received a SMS within this specified time period.

              Fx. used to prevent spamming a mobile number.

              Minimum 60 minutes (1 hour) and maximum is 43200 minutes (30 days).
            schema:
              type: integer
              format: int32
              maximum: 43200
              minimum: 60
              nullable: true
              example: 1440
            x-position: 13
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SmsOutgoingPostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
        callbacks:
          status:
            https://[your_domain]/your/desired/path:
              post:
                summary: Status callback url (Webhook)
                description: >-
                  The status callback url to receive status information on when
                  sms messages are delivered (or if they fail).

                  This is a call done by us to you and the url to be called, is
                  the one specified when sending the messages.
                              
                  Only messages with 100% identical message callbacks will be
                  grouped together into the same call. Messages with different
                  callback urls will never be grouped together in a single
                  callback.
                requestBody:
                  x-name: payload
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/StatusReportListModel'
                  required: true
                  x-position: 1
                responses:
                  '200':
                    description: ''
      post:
        tags:
          - Sms - Outgoing
        summary: Send sms messages using query parameters.
        description: >-
          It is strongly recommended to use the POST version instead of this
          version to send text messages. This endpoint is only a emergency
          fallback option for systems that are not capable of doing an HTTP post.
        operationId: SmsOutgoing_SendUsingQueryPOST
        parameters:
          - name: Text
            in: query
            description: >-
              The text message.

              If the max length is exceeded, the message text is truncated and
              sent.
            schema:
              type: string
              maxLength: 10000
              minLength: 1
              example: This is a message text to be sent
            x-position: 1
          - name: From
            in: query
            description: >-
              The sender. This can either be a 3-11 chars text sender or an up to
              14 digit long sender number.

              If the max length is exceeded, the string is truncated.
            schema:
              type: string
              example: PetShop
            x-position: 2
          - name: Flash
            in: query
            description: >-
              If true, the message will be shown as a flash message (also known as
              a class0 message) on the target phone. If false, it will be received
              as a standard text message.

              Default: false
            schema:
              type: boolean
              nullable: true
              example: false
            x-position: 3
          - name: Encoding
            in: query
            description: >-
              The encoding of the message. Can be either "gsm7", "ucs2" or "auto".

              "gsm7" is the default alfabet for text messages and when using gsm7,
              a single sms message can contain 160 characters. If the length
              exceeeds 160 characters, the message is actually split up into parts
              of 153 characters and charged according to this. Please note, that a
              few, specific characters fill up 2 bytes and count for 2 letters.
              Ref: https://en.wikipedia.org/wiki/GSM_03.38

              "ucs2"" allows for more non-roman characters to be used along with
              smileys. When using this encoding, a single message can consist of
              70 characters. If the message exceeds 70 characters, the final
              message is actually split into parts of 67 characters.

              "auto" can be used in case the sender wishes to support non-roman
              characters but wants to save the expenses on all the trafic that
              only contains gsm characters anyway.

              Default: "gsm7"
            schema:
              type: string
              example: gsm7
            x-position: 4
          - name: To
            in: query
            description: >-
              The msisdn (country code and number) to send to. (Remember to
              include countrycode in all numbers, e.g. 4512345678).

              If max length is exceeded, the entire api call will fail.
            schema:
              type: string
              maxLength: 20
              minLength: 0
              example: '4512345678'
            x-position: 5
          - name: CountryHint
            in: query
            description: >-
              For optimal phone number validation, we encourage you to provide us
              with a country code. This can be the numeric country code (like 44)
              or the two-letter suffix (like GB). If this field is empty it is
              important that you add the country code (e.g 44) in front of the
              phone number in “to”.
            schema:
              type: string
              maxLength: 50
              minLength: 0
              example: '45'
            x-position: 6
          - name: MessageId
            in: query
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)

              If max length is exceeded, the entire api call will fail.
            schema:
              type: string
              maxLength: 50
              minLength: 1
              example: PetShop
            x-position: 7
          - name: RespectBlacklist
            in: query
            description: >-
              If true, this message will be blocked from sending if the target
              number is on the account's blacklist. If false, the message will be
              sent no matter blacklist settings.

              Default: true
            schema:
              type: boolean
              nullable: true
              example: true
            x-position: 8
          - name: ValidityPeriodInSeconds
            in: query
            description: >-
              The validity period in seconds. Minimum is 60 seconds and maximum is
              172800 (48 hours).

              If not specified, the messages is attempted to be delivered in 48
              hours. A typical use of validityPeriod is for messages that makes no
              sense to delivery efter er certain time frame, in the case the phone
              is turned of, e.g. two factor codes.

              Please note, that messages are still charged even though the
              operator is cancelling the delivery attempt due to an exceeded
              validity period.
            schema:
              type: integer
              format: int32
              maximum: 172800
              minimum: 60
              nullable: true
              example: 90
            x-position: 9
          - name: StatusCallbackUrl
            in: query
            description: >-
              In case you would like a callback from us when the message is
              delivered, you can specify it here and we will call it when we have
              new message statuses.

              The callback payload will be an array of status objects.

              Api calls sending messages with the same apikey will be subject to
              being bulked together.
            schema:
              type: string
              maxLength: 500
              minLength: 0
              example: https://[your_domain]/your/desired/path
            x-position: 10
          - name: SendTime.UtcTime
            in: query
            schema:
              type: string
              format: date-time
            x-position: 11
          - name: SendTime.LocalServerTime
            in: query
            schema:
              type: string
              format: date-time
            x-position: 12
          - name: MsisdnCooldownInMinutes
            in: query
            description: >-
              If set, the message will be cancelled if the same mobile number
              already have received a SMS within this specified time period.

              Fx. used to prevent spamming a mobile number.

              Minimum 60 minutes (1 hour) and maximum is 43200 minutes (30 days).
            schema:
              type: integer
              format: int32
              maximum: 43200
              minimum: 60
              nullable: true
              example: 1440
            x-position: 13
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SmsOutgoingPostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
        callbacks:
          status:
            https://[your_domain]/your/desired/path:
              post:
                summary: Status callback url (Webhook)
                description: >-
                  The status callback url to receive status information on when
                  sms messages are delivered (or if they fail).

                  This is a call done by us to you and the url to be called, is
                  the one specified when sending the messages.
                              
                  Only messages with 100% identical message callbacks will be
                  grouped together into the same call. Messages with different
                  callback urls will never be grouped together in a single
                  callback.
                requestBody:
                  x-name: payload
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/StatusReportListModel'
                  required: true
                  x-position: 1
                responses:
                  '200':
                    description: ''
    /v4/sms/outgoing/sendusingtemplate:
      post:
        tags:
          - Sms - Outgoing
        summary: Send sms messages using a template.
        operationId: SmsOutgoing_SendUsingTemplate
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsOutgoingTemplatePostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SmsOutgoingTemplatePostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
        callbacks:
          status:
            https://[your_domain]/your/desired/path:
              post:
                summary: Status callback url (Webhook)
                description: >-
                  The status callback url to receive status information on when
                  sms messages are delivered (or if they fail).

                  This is a call done by us to you and the url to be called, is
                  the one specified when sending the messages.
                              
                  Only messages with 100% identical message callbacks will be
                  grouped together into the same call. Messages with different
                  callback urls will never be grouped together in a single
                  callback.
                requestBody:
                  x-name: payload
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/StatusReportListModel'
                  required: true
                  x-position: 1
                responses:
                  '200':
                    description: ''
    /v4/sms/outgoing/cancel:
      post:
        tags:
          - Sms - Outgoing
        summary: Cancel sms messages
        operationId: SmsOutgoing_Cancel
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsOutgoingCancelPostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SmsOutgoingCancelPostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/outgoing/reports:
      get:
        tags:
          - Sms - Outgoing
        summary: Get sms status reports.
        description: >-
          Each report will only be returned once. Once called, the status has been
          removed from our side and cannot be retrieved again using this method.

          Using api callbacks in combination with this call does not conflict.
        operationId: SmsOutgoing_GetReports
        parameters:
          - name: limit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of status reports
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatusReportListModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/templates:
      get:
        tags:
          - Templates
        summary: Get all templates
        description: >-
          This response is a paged result and will contain the property
          '_links.next'.

          If there are more pages, the next page in the paged result will be
          provided here.
        operationId: Templates_GetAllTemplates
        parameters:
          - name: pageLimit
            in: query
            description: How many records to return (must be between 1 and 250)
            schema:
              type: integer
              format: int32
            x-position: 1
        responses:
          '200':
            description: A list of templates
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiPageModelOfStandardTextOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/sms/templates/{id}:
      get:
        tags:
          - Templates
        summary: Get template by id
        operationId: Templates_GetTemplate
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
            x-position: 1
        responses:
          '200':
            description: A template
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StandardTextOutputApiModel'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
    /v4/tools/parsephonenumbers:
      post:
        tags:
          - Tools
        summary: Parse phone numbers
        operationId: Tools_ParsePhoneNumbers
        requestBody:
          x-name: request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParsePhoneNumberPostRequest'
          required: true
          x-position: 1
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ParsePhoneNumberPostReply'
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ApiErrorMessage'
  components:
    schemas:
      ApiPageModelOfBlacklistOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/OutputListApiModelOfBlacklistOutputApiModel'
          - type: object
            additionalProperties: false
            properties:
              _links:
                $ref: '#/components/schemas/ApiPageLinks'
      ApiPageLinks:
        type: object
        additionalProperties: false
        properties:
          next:
            type: string
            description: The link to the next page, e.g. /Feature/Something/cAw2WeS3rdf
            example: /Feature/Something/cAw2WeS3rdf
          isLastPage:
            type: boolean
            description: >-
              true if this is the last page, false if there are more pages.
              NextPageUrl is always defined when this is false and never defined
              when it is true.
      OutputListApiModelOfBlacklistOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/BlacklistOutputApiModel'
      BlacklistOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/BlacklistApiModelbase'
          - type: object
            additionalProperties: false
            properties:
              id:
                type: string
                description: The id of the blacklist entry
                format: guid
                example: 683862c7-c814-40cc-a74d-048d9f2f8cb7
              created:
                type: string
                description: >-
                  When the blacklist entry was created e.g. 2001-02-30T14:50:23Z
                  (UTC time)
                example: '2001-02-30T14:50:23Z'
              reasonCode:
                description: Why the blacklist was created
                example: 5
                oneOf:
                  - $ref: '#/components/schemas/BlacklistReason'
              reasonCodeDescription:
                type: string
                description: Text version of the ReasonCode
                example: AddFromApi
      BlacklistReason:
        type: integer
        description: |-
          1 = CustomerSpecificUnsubscription
          2 = SharedUnsubscription
          3 = CountryBanLaw
          4 = AddWithUserInterface
          5 = AddFromApi
          6 = Custom
          7 = AddFromCrm
          8 = RecipientSyncRemoval
          9 = Autoblacklist
          10 = SpamLimit
          11 = UnsubscribeForm
          12 = CustomDomain
        x-enumNames:
          - CustomerSpecificUnsubscription
          - SharedUnsubscription
          - CountryBanLaw
          - AddWithUserInterface
          - AddFromApi
          - Custom
          - AddFromCrm
          - RecipientSyncRemoval
          - Autoblacklist
          - SpamLimit
          - UnsubscribeForm
          - CustomDomain
        enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
      BlacklistApiModelbase:
        type: object
        x-abstract: true
        additionalProperties: false
        required:
          - numberInfo
        properties:
          numberInfo:
            $ref: '#/components/schemas/NumberInfo'
          comment:
            type: string
            description: A comment describing the specific blacklisting (optional).
            maxLength: 200
            minLength: 0
            example: Some text provided when created
      NumberInfo:
        type: object
        additionalProperties: false
        required:
          - countryCode
          - phoneNumber
        properties:
          countryCode:
            type: string
            description: The country code part of the number
            minLength: 1
            example: '45'
          phoneNumber:
            type: string
            description: The local phonenumber part of the number
            minLength: 1
            example: '12345678'
      ApiErrorMessage:
        type: object
        additionalProperties: false
        properties:
          errorMessage:
            type: string
            description: An overall description of the error.
          details:
            type: array
            description: If available, more details will be provided here.
            items:
              type: string
      BlacklistCreateApiModel:
        allOf:
          - $ref: '#/components/schemas/BlacklistApiModelbase'
          - type: object
            additionalProperties: false
            properties:
              removeFromAllLists:
                type: boolean
                description: >-
                  If true, the number will also be removed from all lists.
                  Default: false
                nullable: true
                example: false
      EmailOutgoingTemplatePostReply:
        allOf:
          - $ref: '#/components/schemas/EmailOutgoingBasePostReply'
          - type: object
            additionalProperties: false
            properties:
              usedPlaceholderKeys:
                type: array
                description: A list of used placeholder keys
                example:
                  - '{name}'
                  - '{lastname}'
                items:
                  type: string
              notUsedPlaceholderKeys:
                type: array
                description: A list of not used placeholder keys
                example:
                  - '{name}'
                  - '{lastname}'
                items:
                  type: string
      EmailOutgoingBasePostReply:
        type: object
        additionalProperties: false
        properties:
          messageId:
            type: string
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)

              If max length is exceeded, the entire api call will fail.
            example: 8fe266b2-56e9-4b5f-938f-cc5e22530721
          to:
            type: array
            description: The list of created Receivers
            items:
              $ref: '#/components/schemas/EmailRecipient'
      EmailRecipient:
        type: object
        additionalProperties: false
        required:
          - emailAddress
          - displayName
        properties:
          emailAddress:
            type: string
            description: The email address of the recipient
            minLength: 1
            example: roy@tomlinson.com
          displayName:
            type: string
            description: The display name to use for the recipient
            minLength: 1
            example: Roy Tomlinson
      EmailOutgoingTemplatePostRequest:
        allOf:
          - $ref: '#/components/schemas/EmailOutgoingApiBaseCreateModel'
          - type: object
            additionalProperties: false
            required:
              - templateId
            properties:
              templateId:
                type: string
                description: The id of the template to use.
                minLength: 1
                example: ecdcb257-c1e9-4b44-8a4e-f05822372d82
              placeholders:
                description: >-
                  A key-value list of placeholders to replace in the template
                  html, text and subject. Keys must be encapsulated with {}. E.g.
                  {NAME}.
                example:
                  '{name}': Ray
                  '{lastname}': Tomlinson
                oneOf:
                  - $ref: '#/components/schemas/ApiPlaceholderValueCollection'
      ApiPlaceholderValueCollection:
        type: object
        additionalProperties:
          type: string
      EmailOutgoingApiBaseCreateModel:
        type: object
        additionalProperties: false
        required:
          - from
          - to
        properties:
          from:
            description: The from info of the message.
            oneOf:
              - $ref: '#/components/schemas/EmailRecipient'
          to:
            type: array
            description: >-
              A list of receiver objects. Allowed to contain between 1 and 100
              elements.
            maxItems: 100
            minItems: 1
            items:
              $ref: '#/components/schemas/EmailRecipient'
          replyTo:
            type: array
            description: A list of optional Reply To objects.
            maxItems: 100
            minItems: 1
            items:
              $ref: '#/components/schemas/EmailRecipient'
          messageId:
            type: string
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)

              If max length is exceeded, the entire api call will fail.
            maxLength: 50
            minLength: 1
            example: 8fe266b2-56e9-4b5f-938f-cc5e22530721
          sendTime:
            type: string
            description: >-
              If set, this defines to time in the future for the message to be
              sent. e.g. 2001-02-30T14:50:23Z (UTC time).
            example: '2001-02-30T14:50:23Z'
          tracking:
            type: boolean
            description: >-
              If true, this will add Open and Click tracking to your email.
              Default: true.
            example: false
      EmailOutgoingPostRequest:
        allOf:
          - $ref: '#/components/schemas/EmailOutgoingApiBaseCreateModel'
          - type: object
            additionalProperties: false
            required:
              - subject
              - html
            properties:
              subject:
                type: string
                description: |-
                  The subject of the email.
                  If max length is exceeded, the entire api call will fail.
                maxLength: 255
                minLength: 0
                example: This is the subject of the email
              html:
                type: string
                description: |-
                  The HTML body of the email. Max size of 2 MB.
                  If max size is exceeded, the entire api call will fail.
                minLength: 1
                example: >-
                  <!DOCTYPE html><html><head></head><body><p>This is an email to
                  be sent</p></body></html>
              text:
                type: string
                description: >-
                  The text body of the email. If none is provided this will be
                  generated from the HTML. Max size of 2 MB.

                  If max size is exceeded, the entire api call will fail.
                example: This is the text version of the email
      EmailEventListModel:
        type: object
        additionalProperties: false
        properties:
          events:
            type: array
            items:
              $ref: '#/components/schemas/EmailEvent'
      EmailEvent:
        type: object
        additionalProperties: false
        properties:
          messageId:
            type: string
            description: The id of the message.
            example: id1
          eventType:
            description: Contains a code for what event type the event is.
            example: 3
            oneOf:
              - $ref: '#/components/schemas/EmailEventType'
          eventTypeDescription:
            type: string
            description: A text description of the event type
            example: Delivered
          eventTimestamp:
            type: string
            description: When the event happened e.g. 2001-02-30T14:50:23Z (UTC time)
            example: '2001-02-30T14:50:23Z'
      EmailEventType:
        type: integer
        description: |-
          0 = Undefined
          1 = Clicked
          2 = Complained
          3 = Delivered
          4 = Opened
          5 = PermanentFail
          6 = TemporaryFail
          7 = Unsubscribed
          8 = Queued
          9 = Attempt
        x-enumNames:
          - Undefined
          - Clicked
          - Complained
          - Delivered
          - Opened
          - PermanentFail
          - TemporaryFail
          - Unsubscribed
          - Queued
          - Attempt
        enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
      ApiPageModelOfEmailTemplateOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/OutputListApiModelOfEmailTemplateOutputApiModel'
          - type: object
            additionalProperties: false
            properties:
              _links:
                $ref: '#/components/schemas/ApiPageLinks'
      OutputListApiModelOfEmailTemplateOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/EmailTemplateOutputApiModel'
      EmailTemplateOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
            description: The id of the email template
            example: c9b6c7a8-aa22-4a59-b6d5-fdbbeced27bc
          name:
            type: string
            description: The name of the email template
            example: My email template
          html:
            type: string
            description: The Html of the email template
            example: >-
              <!DOCTYPE html><html><head></head><body><p>Hello {name} {lastname}.
              This is an email to be sent</p></body></html>
          text:
            type: string
            description: The text version of the Html
            example: Hello {name} This is the text version of the email
          subject:
            type: string
            description: The subject of the email template
            example: Hello {lastname} This is the subject of the email
          preheader:
            type: string
            description: The preheader of the email
            example: This is the preheader of the email
          placeholders:
            type: array
            description: >-
              A list of the placeholders found in the template html, text and
              subject.
            example:
              - '{name}'
              - '{lastname}'
            items:
              type: string
          created:
            type: string
            description: >-
              When the email template was created e.g. 2001-02-30T14:50:23Z (UTC
              time)
            example: '2001-02-30T14:50:23Z'
          lastUpdated:
            type: string
            description: >-
              When the email template was last updated e.g. 2001-02-30T14:50:23Z
              (UTC time)
            example: '2001-02-30T14:50:23Z'
      RequestDeletionOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
            description: The Id of the Deletion request
            example: cf97f715-63d4-41df-92a1-34eb87b866b5
      DeletionRequestCreateInfo:
        type: object
        additionalProperties: false
        properties:
          numberInfo:
            $ref: '#/components/schemas/NumberInfo'
      ApiPageModelOfGroupOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/OutputListApiModelOfGroupOutputApiModel'
          - type: object
            additionalProperties: false
            properties:
              _links:
                $ref: '#/components/schemas/ApiPageLinks'
      OutputListApiModelOfGroupOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/GroupOutputApiModel'
      GroupOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
            description: The id of the list
            format: guid
            example: a80e5daa-1bf9-48ca-b67e-ff79eeab1c39
          name:
            type: string
            description: The name of the list
            example: My list
          created:
            type: string
            description: When the list was created e.g. 2001-02-30T14:50:23Z (UTC time)
            example: '2001-02-30T14:50:23Z'
      GroupInputApiModel:
        type: object
        additionalProperties: false
        properties:
          name:
            type: string
      ApiPageModelOfRecipientOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/OutputListApiModelOfRecipientOutputApiModel'
          - type: object
            additionalProperties: false
            properties:
              _links:
                $ref: '#/components/schemas/ApiPageLinks'
      OutputListApiModelOfRecipientOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/RecipientOutputApiModel'
      RecipientOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/RecipientBaseApiModel'
          - type: object
            additionalProperties: false
            properties:
              id:
                type: string
                description: The id of the recipient
                format: guid
                example: 99e0543f-b059-4127-9b50-c42112f19cc9
              listId:
                type: string
                description: The id of the list that the recipient belongs to
                format: guid
                example: 4a5f91d5-3aa4-4419-890e-f7b103406dbf
              created:
                type: string
                description: >-
                  When the recipient was created e.g. 2001-02-30T14:50:23Z (UTC
                  time)
                example: '2001-02-30T14:50:23Z'
      RecipientBaseApiModel:
        type: object
        x-abstract: true
        additionalProperties: false
        properties:
          externalCreated:
            type: string
            description: >-
              When the recipient was created in an external system e.g.
              2001-02-30T14:50:23Z (UTC time)
            example: '2001-02-30T14:50:23Z'
          numberInfo:
            $ref: '#/components/schemas/NumberInfo'
          fields:
            description: The fields to update in the given recipient.
            example:
              firstname: Friedhelm
              lastname: Hillebrand
              birthday: '1945-04-30'
              custom1: Custom1
              custom2: Custom2
              custom3: Custom3
              custom4: Custom4
              custom5: Custom5
              custom6: Custom6
              email: test@test.dk
              zipCode: '8000'
              address: testroad 12
              companyName: test company
            oneOf:
              - $ref: '#/components/schemas/RecipientFieldsCollection'
      RecipientFieldsCollection:
        type: object
        additionalProperties:
          type: string
      RecipientCreateOrUpdateApiModel:
        allOf:
          - $ref: '#/components/schemas/RecipientBaseApiModel'
          - type: object
            additionalProperties: false
      RecipientUpdateApiModel:
        allOf:
          - $ref: '#/components/schemas/RecipientBaseApiModel'
          - type: object
            additionalProperties: false
      RecipientCreateApiModel:
        allOf:
          - $ref: '#/components/schemas/RecipientBaseApiModel'
          - type: object
            additionalProperties: false
      IncomingMessageListModel:
        type: object
        additionalProperties: false
        properties:
          messages:
            type: array
            items:
              $ref: '#/components/schemas/IncomingMessage'
      IncomingMessage:
        type: object
        additionalProperties: false
        properties:
          from:
            $ref: '#/components/schemas/IncomingMessageSender'
          to:
            $ref: '#/components/schemas/IncomingMessageTarget'
          text:
            type: string
          receivedAt:
            type: string
            example: '2001-02-30T14:50:23Z'
      IncomingMessageSender:
        type: object
        additionalProperties: false
        properties:
          countryCode:
            type: string
          phoneNumber:
            type: string
          rawSource:
            type: string
          isValidMsisdn:
            type: boolean
      IncomingMessageTarget:
        type: object
        additionalProperties: false
        properties:
          countryCode:
            type: string
          phoneNumber:
            type: string
          msisdn:
            type: string
      SmsOutgoingPostReply:
        type: object
        additionalProperties: false
        properties:
          results:
            type: array
            items:
              $ref: '#/components/schemas/SmsOutgoingApiCreateResultModel'
      SmsOutgoingApiCreateResultModel:
        type: object
        additionalProperties: false
        properties:
          numberDetails:
            description: >-
              The parsed details about the msisdn provided in the to-field of the
              request (msisdn is a number with a countrycode e.g. 4512345678)
            oneOf:
              - $ref: '#/components/schemas/NumberDetails'
          text:
            type: string
            description: The text message
            example: This is a message text to be sent
          from:
            type: string
            description: The sender.
            example: PetShop
          smsCount:
            type: integer
            description: >-
              The number of sms messages this message will be split into when sent
              to the operator. Charging will also be done according to this
              number.
            format: int32
            example: 1
          messageId:
            type: string
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)
            example: PetShop
          encoding:
            type: string
            description: >-
              The encoding of the message. Can be either "gsm7" or "ucs2". In case
              the message was submitted with encoding "auto", this report will
              reveal the final encoding based on the characters in the message
              text.

              "gsm7" is the default alfabet for text messages and when using gsm7,
              a single sms message can contain 160 characters. If the length
              exceeeds 160 characters, the message is actually split up into parts
              of 153 characters and charged according to this. Please note, that a
              few, specific characters fill up 2 bytes and count for 2 letters.
              Ref: https://en.wikipedia.org/wiki/GSM_03.38

              "ucs2"" allows for more non-roman characters to be used along with
              smileys. When using this encoding, a single message can consist of
              70 characters. If the message exceeds 70 characters, the final
              message is actually split into parts of 67 characters.
            example: gsm7
      NumberDetails:
        type: object
        additionalProperties: false
        properties:
          countryCode:
            type: string
            description: The country code part of the msisdn, e.g. 45.
            example: '45'
          phoneNumber:
            type: string
            description: The phone number part of the msisdn, e.g. 12345678.
            example: '12345678'
          rawMsisdn:
            type: string
            description: >-
              The input msisdn in its unaltered format. This is the value provided
              when sending the text message.
            example: 45 12 34 56 78
          msisdn:
            type: string
            description: The final cleaned msisdn
            example: '4512345678'
          isValidMsisdn:
            type: boolean
            description: True if the input msisdn was valid.
            example: true
          countryHint:
            type: string
            description: The country code hint if provided in the request
      SmsOutgoingPostRequest:
        type: object
        additionalProperties: false
        required:
          - messages
        properties:
          messages:
            type: array
            description: >-
              A list of the sms messages to be sent. Allowed to contain between 1
              and 250 elements.
            maxItems: 250
            minItems: 1
            items:
              $ref: '#/components/schemas/SmsOutgoingApiCreateModel'
      SmsOutgoingApiCreateModel:
        allOf:
          - $ref: '#/components/schemas/SmsOutgoingBaseApiModel'
          - type: object
            additionalProperties: false
            required:
              - text
              - from
            properties:
              text:
                type: string
                description: >-
                  The text message.

                  If the max length is exceeded, the message text is truncated and
                  sent.
                maxLength: 10000
                minLength: 1
                example: This is a message text to be sent
              from:
                type: string
                description: >-
                  The sender. This can either be a 3-11 chars text sender or an up
                  to 14 digit long sender number.

                  If the max length is exceeded, the string is truncated.
                minLength: 1
                example: PetShop
              flash:
                type: boolean
                description: >-
                  If true, the message will be shown as a flash message (also
                  known as a class0 message) on the target phone. If false, it
                  will be received as a standard text message.

                  Default: false
                nullable: true
                example: false
              encoding:
                type: string
                description: >-
                  The encoding of the message. Can be either "gsm7", "ucs2" or
                  "auto".

                  "gsm7" is the default alfabet for text messages and when using
                  gsm7, a single sms message can contain 160 characters. If the
                  length exceeeds 160 characters, the message is actually split up
                  into parts of 153 characters and charged according to this.
                  Please note, that a few, specific characters fill up 2 bytes and
                  count for 2 letters. Ref:
                  https://en.wikipedia.org/wiki/GSM_03.38

                  "ucs2"" allows for more non-roman characters to be used along
                  with smileys. When using this encoding, a single message can
                  consist of 70 characters. If the message exceeds 70 characters,
                  the final message is actually split into parts of 67 characters.

                  "auto" can be used in case the sender wishes to support
                  non-roman characters but wants to save the expenses on all the
                  trafic that only contains gsm characters anyway.

                  Default: "gsm7"
                example: gsm7
      SmsOutgoingBaseApiModel:
        type: object
        additionalProperties: false
        required:
          - to
        properties:
          to:
            type: string
            description: >-
              The msisdn (country code and number) to send to. (Remember to
              include countrycode in all numbers, e.g. 4512345678).

              If max length is exceeded, the entire api call will fail.
            maxLength: 20
            minLength: 0
            example: '4512345678'
          countryHint:
            type: string
            description: >-
              For optimal phone number validation, we encourage you to provide us
              with a country code. This can be the numeric country code (like 44)
              or the two-letter suffix (like GB). If this field is empty it is
              important that you add the country code (e.g 44) in front of the
              phone number in “to”.
            maxLength: 50
            minLength: 0
            example: '45'
          messageId:
            type: string
            description: >-
              An optional message id used to identify the message.

              If no message id is provided, a new message id is generated and
              assigned to the message. This id must be unique across all messages
              created on the same account.

              (In case a previous message has been deleted according to GDPR
              deletion rules setup on the specific account, the messageId is
              allowed to be reused)

              If max length is exceeded, the entire api call will fail.
            maxLength: 50
            minLength: 1
            example: PetShop
          respectBlacklist:
            type: boolean
            description: >-
              If true, this message will be blocked from sending if the target
              number is on the account's blacklist. If false, the message will be
              sent no matter blacklist settings.

              Default: true
            nullable: true
            example: true
          validityPeriodInSeconds:
            type: integer
            description: >-
              The validity period in seconds. Minimum is 60 seconds and maximum is
              172800 (48 hours).

              If not specified, the messages is attempted to be delivered in 48
              hours. A typical use of validityPeriod is for messages that makes no
              sense to delivery efter er certain time frame, in the case the phone
              is turned of, e.g. two factor codes.

              Please note, that messages are still charged even though the
              operator is cancelling the delivery attempt due to an exceeded
              validity period.
            format: int32
            maximum: 172800
            minimum: 60
            nullable: true
            example: 90
          statusCallbackUrl:
            type: string
            description: >-
              In case you would like a callback from us when the message is
              delivered, you can specify it here and we will call it when we have
              new message statuses.

              The callback payload will be an array of status objects.

              Api calls sending messages with the same apikey will be subject to
              being bulked together.
            maxLength: 500
            minLength: 0
            example: https://[your_domain]/your/desired/path
          sendTime:
            type: string
            description: >-
              If set, this defines to time in the future for the message to be
              sent. e.g. 2001-02-30T14:50:23Z (UTC time).
            example: '2001-02-30T14:50:23Z'
          msisdnCooldownInMinutes:
            type: integer
            description: >-
              If set, the message will be cancelled if the same mobile number
              already have received a SMS within this specified time period.

              Fx. used to prevent spamming a mobile number.

              Minimum 60 minutes (1 hour) and maximum is 43200 minutes (30 days).
            format: int32
            maximum: 43200
            minimum: 60
            nullable: true
            example: 1440
      StatusReportListModel:
        type: object
        additionalProperties: false
        properties:
          reports:
            type: array
            items:
              $ref: '#/components/schemas/StatusReport'
      StatusReport:
        type: object
        additionalProperties: false
        properties:
          messageId:
            type: string
            description: The id of the message.
            example: id1
          numberDetails:
            $ref: '#/components/schemas/StatusReportNumberDetails'
          deliveryInfo:
            $ref: '#/components/schemas/DeliveryInfo'
          chargeInfo:
            $ref: '#/components/schemas/ChargeInfo'
      StatusReportNumberDetails:
        allOf:
          - $ref: '#/components/schemas/NumberDetails'
          - type: object
            additionalProperties: false
            properties:
              isAnonymized:
                type: boolean
                description: Specifies whether the message has been anonymized or not.
                example: false
      DeliveryInfo:
        type: object
        additionalProperties: false
        properties:
          stateCode:
            description: >-
              Contains a code indicating whether a message is delivered, failed or
              cancelled.
            example: -1
            oneOf:
              - $ref: '#/components/schemas/MessageStateCode'
          stateDescription:
            type: string
            description: A text description of the state code
            example: Failed
          sendTime:
            type: string
            description: When the message was sent e.g. 2001-02-30T14:50:23Z (UTC time)
            example: '2001-02-30T14:50:23Z'
          doneTime:
            type: string
            description: >-
              When the delivery of the message fails, is cancelled, or is
              delivered. If the operator does not support reporting the actual
              delivery time, this will be the time when the delivery report is
              received from the operator.

              In some cases where the message is not sent, this value can be null.
            example: '2001-02-30T14:50:23Z'
          errorCode:
            $ref: '#/components/schemas/ErrorCode'
          errorDescription:
            type: string
            description: A text description of the error code
            example: Undeliverable message
      MessageStateCode:
        type: integer
        description: |-
          0 = Unknown
          1 = Delivered
          -2 = Cancelled
          -1 = Failed
        x-enumNames:
          - Unknown
          - Delivered
          - Cancelled
          - Failed
        enum:
          - 0
          - 1
          - -2
          - -1
      ErrorCode:
        type: integer
        description: "A code describing the error if the state is not Delivered. This property will be absent in case the state is Delivered.\n\r-1 = Undeliverable message\n\r-2 = Msisdn blacklisted by operator\n\r-3 = Invalid mobile number\n\r-4 = Country not available\n\r-5 = Delivery timeout\n\r-6 = Not delivered removed from gateway\n\r-8 = Insufficient funds\n\r-9 = Authorize failed\n\r-10 = Capture failed\n\r-11 = Overcharge donation limit exceeded\n\r-12 = Overcharge type not activated\n\r-13 = Overcharge settings not valid\n\r-14 = Sender name blocked\n\r-15 = Route not available\n\r-16 = Refund not available\n\r-17 = Refund not possible for message\n\r-18 = Refund failed\n\r-19 = Refund not possible for pending message\n\r-20 = Refund not possible for failed message\n\r-21 = Refund failed already refunded\n\r-22 = Delivery timeout before sent\n\r-23 = Message queue full at operator\n\r-80 = Imported from other system\n\r-99 = Submit failed\n\r-100 = Communication error\n\r-101 = Unknown id\n\r-102 = Cancelled\n\r-103 = Unknown error processing message\n\r-104 = Unknown id at operator\n\r-105 = Msisdn blacklisted on account\n\r-106 = Mobile number cooldown\n\r-201 = Suspicious sms content\n\r-202 = Account deactivated\n\r-300 = Pdu sequence incomplete\n\r-301 = Pdu sequence invalid\n\r"
        format: integer
        example: -1
      ChargeInfo:
        type: object
        additionalProperties: false
        properties:
          isCharged:
            type: boolean
            description: True if the message will be charged.
            example: true
          smsCount:
            type: integer
            description: >-
              The total sms count in the message. If IsCharged is true, this is
              the number of sms'es that will be charged.
            format: int32
            example: 2
          encoding:
            type: string
            description: >-
              The encoding of the message. Can be either "gsm7" or "ucs2". In case
              the message was submitted with encoding "auto", this report will
              reveal the final encoding based on the characters in the message
              text.

              "gsm7" is the default alfabet for text messages and when using gsm7,
              a single sms message can contain 160 characters. If the length
              exceeeds 160 characters, the message is actually split up into parts
              of 153 characters and charged according to this. Please note, that a
              few, specific characters fill up 2 bytes and count for 2 letters.
              Ref: https://en.wikipedia.org/wiki/GSM_03.38

              "ucs2"" allows for more non-roman characters to be used along with
              smileys. When using this encoding, a single message can consist of
              70 characters. If the message exceeds 70 characters, the final
              message is actually split into parts of 67 characters.
            example: gsm7
      SmsOutgoingTemplatePostReply:
        type: object
        additionalProperties: false
        properties:
          usedPlaceholderKeys:
            type: array
            description: A list of used used placeholder keys
            example:
              - '{name}'
              - '{lastname}'
            items:
              type: string
          notUsedPlaceholderKeys:
            type: array
            description: A list of not used placeholder keys
            example:
              - '{name}'
              - '{lastname}'
            items:
              type: string
          results:
            type: array
            items:
              $ref: '#/components/schemas/SmsOutgoingApiCreateResultModel'
      SmsOutgoingTemplatePostRequest:
        type: object
        additionalProperties: false
        required:
          - templateId
          - messages
        properties:
          templateId:
            type: string
            description: The id of the template to use
            minLength: 1
            example: ecdcb257-c1e9-4b44-8a4e-f05822372d82
          messages:
            type: array
            description: >-
              A list of the sms messages to be sent. Allowed to contain between 1
              and 250 elements.
            maxItems: 250
            minItems: 1
            items:
              $ref: '#/components/schemas/SmsOutgoingTemplateApiCreateModel'
      SmsOutgoingTemplateApiCreateModel:
        allOf:
          - $ref: '#/components/schemas/SmsOutgoingBaseApiModel'
          - type: object
            additionalProperties: false
            properties:
              placeholders:
                description: >-
                  A key-value list of placeholders to replace in the template
                  text. Keys must be encapsulated with {}. E.g. {NAME}.
                example:
                  '{name}': Friedhelm
                  '{lastname}': Hillebrand
                oneOf:
                  - $ref: '#/components/schemas/ApiPlaceholderValueCollection'
      SmsOutgoingCancelPostReply:
        type: object
        additionalProperties: false
        properties:
          results:
            type: array
            description: A list of results
            items:
              $ref: '#/components/schemas/SmsOutgoingCancelPostReplyResultModel'
      SmsOutgoingCancelPostReplyResultModel:
        type: object
        additionalProperties: false
        properties:
          messageId:
            type: string
            description: The MessageId of the message that was attempted cancelled.
            example: 8fe266b2-56e9-4b5f-938f-cc5e22530721
          resultCode:
            description: A value indicating if the message was cancelled.
            example: 1
            oneOf:
              - $ref: '#/components/schemas/CancelResultCode'
          resultDescription:
            type: string
            description: A description of the result.
            example: Success
      CancelResultCode:
        type: integer
        description: |-
          0 = Unknown
          1 = Success
          -2 = MessageNotFound
          -1 = NotCancelled
        x-enumNames:
          - Unknown
          - Success
          - MessageNotFound
          - NotCancelled
        enum:
          - 0
          - 1
          - -2
          - -1
      SmsOutgoingCancelPostRequest:
        type: object
        additionalProperties: false
        required:
          - messageIds
        properties:
          messageIds:
            type: array
            description: >-
              A list of the sms message ids to be cancelled. Allowed to contain
              between 1 and 250 elements.
            maxItems: 250
            minItems: 1
            example:
              - id1
              - id2
            items:
              type: string
      ApiPageModelOfStandardTextOutputApiModel:
        allOf:
          - $ref: '#/components/schemas/OutputListApiModelOfStandardTextOutputApiModel'
          - type: object
            additionalProperties: false
            properties:
              _links:
                $ref: '#/components/schemas/ApiPageLinks'
      OutputListApiModelOfStandardTextOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          entries:
            type: array
            items:
              $ref: '#/components/schemas/StandardTextOutputApiModel'
      StandardTextOutputApiModel:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
            description: The id of the template
            example: c7114ec3-8f89-4e26-8048-686585c1da2a
          name:
            type: string
            description: The name of the template
            example: My template
          text:
            type: string
            description: The template text
            example: My template text {name} {lastname}
          senderName:
            type: string
            description: The sendername to use with this template
            example: My sendername
          encoding:
            type: string
            description: >-
              The encoding of the message. Can be either "gsm7" or "ucs2"

              "gsm7" is the default alfabet for text messages and when using gsm7,
              a single sms message can contain 160 characters. If the length
              exceeeds 160 characters, the message is actually split up into parts
              of 153 characters and charged according to this. Please note, that a
              few, specific characters fill up 2 bytes and count for 2 letters.
              Ref: https://en.wikipedia.org/wiki/GSM_03.38

              "ucs2"" allows for more non-roman characters to be used along with
              smileys. When using this encoding, a single message can consist of
              70 characters. If the message exceeds 70 characters, the final
              message is actually split into parts of 67 characters.
            example: gsm7
          placeholders:
            type: array
            description: >-
              A list of the placeholders found in the template html, text and
              subject.
            example:
              - '{name}'
              - '{lastname}'
            items:
              type: string
          created:
            type: string
            description: When the template was created e.g. 2001-02-30T14:50:23Z (UTC time)
            example: '2001-02-30T14:50:23Z'
          lastUpdated:
            type: string
            description: >-
              When the template was last updated e.g. 2001-02-30T14:50:23Z (UTC
              time)
            example: '2001-02-30T14:50:23Z'
      ParsePhoneNumberPostReply:
        type: object
        additionalProperties: false
        properties:
          results:
            type: array
            items:
              $ref: '#/components/schemas/NumberDetails'
      ParsePhoneNumberPostRequest:
        type: object
        additionalProperties: false
        required:
          - numbersToParse
        properties:
          numbersToParse:
            type: array
            description: A list of the numbersToParse and country hints to be parsed
            minItems: 1
            items:
              $ref: '#/components/schemas/RawMsisdnAndCountryHint'
      RawMsisdnAndCountryHint:
        type: object
        additionalProperties: false
        properties:
          countryHint:
            type: string
            description: The country part of the msisdn, e.g. 45 or DK.
            example: '45'
          rawMsisdn:
            type: string
            description: >-
              The input msisdn in its unaltered format. This is the value provided
              when sending the text message.
            example: +45 12 34 56 78
    securitySchemes:
      BasicAuth:
        type: http
        description: >-
          Provide Basic Authentiation with an arbitrary username and your api key
          as password, e.g. some_value_to_be_ignored:your_api_key_here
        scheme: basic
      QueryParameter:
        type: apiKey
        description: >-
          Specify your apikey in the url as
          https://api.inmobile.com/some/path?apikey=your_api_key_here. This method
          is only recommended if basic authorization is not possible.
        name: apikey
        in: query
  security:
    - BasicAuth: []
    - QueryParameter: []
  tags:
    - name: Sms - Outgoing
    - name: Sms - Incoming
    - name: Blacklist
    - name: Lists
    - name: Gdpr
    - name: Email
    - name: Email Templates
    - name: Templates
    - name: Tools
konfigCliVersion: 1.38.61
