publishJson:
  company: Volt.io
  serviceName: false
  sdkName: volt-io-{language}-sdk
  clientName: VoltIo
  metaDescription: >-
    Volt is building the next generation payment network that is global, instant
    and interoperable - connecting real-time payments everywhere.


    We're driving the shift to an era where real-time is the only time. This new
    era starts now.
  apiStatusUrls: inherit
  homepage: www.volt.io/
  developerDocumentation: docs.volt.io/api-documentation/
  categories:
    - global_payments
    - online_payments
    - financial_technology
    - fintech
    - payment_network
    - real_time_payments
    - payments
rawSpecString: |
  openapi: 3.1.0
  x-stoplight:
    id: 7vvn25my47m4d
  servers:
    - url: https://api.sandbox.volt.io
      description: >
        Sandbox server - start here and make test payments through our model
        banks.
    - url: https://api.volt.io
      description: >
        Production server - when you're ready to make live payments, connect to
        Volt's banking network.
  info:
    title: Real-time payments, everywhere.
    version: 2024.04.11
    description: >
      Join the real-time revolution! Give your customers a faster, easier and
      safer way to pay. Volt has developed a REST API for merchants, allowing you
      to offer the option to use Open Banking payments on your online checkout.



      ## NEW : API idempotency 


      We have introduced support for idempotency on the POST endpoints in the Volt
      Connect endpoints of the API.  The idea of idempotency is to avoid unwanted
      duplication should a request to our API fail and need to be retried. 


      Using a unique idempotency key for each POST request, it is possible to
      safely retry the same call multiple times with the guarantee that it will
      only be actioned once.


      ### Endpoints supporting idempotency

      If an endpoint supports idempotent processing, we'll indicate this in the
      header documentation for that endpoint.


      ### Using an idempotency key


      Using the idempotency key is optional.  If you would like to use it to help
      prevent duplicates in your POST requests, simply include the header
      ```idempotency-key: <key>``` - where  ```<key>``` is a unique identifier for
      the message.  We recommend using a **UUID** for the key, however you may use
      any other unique identifier you choose. 


      ### Retries

      If the request times out or you don't receive a response for any other
      reason, you may safely retry it using the same payload and headers.  Use the
      same key for the retried attempt. 


      ### Preventing duplicates 

      If we have already processed the request and you send a request using the
      same idempotency key, it will fail with an error, returning an HTTP code of
      ```409``` Conflict. 


      ### Exponential backoff for retries

      You should adopt an exponential backoff strategy when retrying requests
      using the same idempotency key. For example, retry 1 second later then, if
      it fails again, 2 seconds later, 4 seconds later etc.
  security:
    - oauth: []
  tags:
    - name: Authenticating with the API
    - name: Banks and financial institutions
    - name: Payments
    - name: Payouts (Connect)
    - name: Refunds (Connect)
    - name: Reporting
  paths:
    /oauth:
      post:
        operationId: oAuthAuthentication
        tags:
          - Authenticating with the API
        summary: oAuth2 password authentication
        description: >
          We use the industry-standard oAuth2 authentication to secure our API.   


          ### Information you'll need

          - Your **Client ID** and **Client Secret** (from the application you
          created in Fuzebox)

          - Your **API username** and **password** (from the merchant credentials
          section in Fuzebox)


          Step-by-step instructions on how to authenticate are available in our
          [product guides](https://docs.volt.io/gateway/authentication/]) area.
        requestBody:
          content:
            application/x-www-form-urlencoded:
              schema:
                required:
                  - client_id
                  - client_secret
                  - grant_type
                  - password
                  - username
                properties:
                  grant_type:
                    type: string
                    description: This field **must** have a value of **password**
                    example: password
                  client_id:
                    type: string
                    format: uuid
                    description: >-
                      The ID for the application you're using to access the Volt
                      API
                    example: 847485d4-9208-44b4-b351-5b175da5a4fe
                  client_secret:
                    type: string
                    format: uuid
                    description: >-
                      The secret for the application you're using to access the
                      Volt API
                    example: 58f0ea67-3fa0-4575-9a73-1ea6fb61c4df
                  username:
                    type: string
                    format: email
                    description: Username in email address format
                    example: test2892548542@volt.io
                  password:
                    type: string
                    description: Password from your credentials
                    example: 1@D834uvtSzM*kW!EGX$#7&%188423
          required: true
        responses:
          '200':
            description: |
              **OK** - Successful login attempt, returning an access token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token_type:
                      type: string
                      example: Bearer
                    expires_in:
                      type: number
                      example: 3600
                    access_token:
                      type: string
                      example: >-
                        eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijc2MGEwNDRkMDkwZmUxNmE0YzRkMWRjMWE5NDU1MTgxMzgxZDRkNDIyZGUyNDY5NjQ0NDI4NWNkZjk1NWJkMzBjMjcxYzYxNjE0MzkyMmI0In0.eyJhdWQiOiI2NjIzODRhMC05NzE0LTQ2NTYtYTNiZC0zZjFlNzc0ZTJhM2MiLCJqdGkiOiI3NjBhMDQ0ZDA5MGZlMTZhNGM0ZDFkYzFhOTQ1NTE4MTM4MWQ0ZDQyMmRlMjQ2OTY0NDQyODVjZGY5NTViZDMwYzI3MWM2MTYxNDM5MjJiNCIsImlhdCI6MTU2MjA0MzA1OSwibmJmIjoxNTYyMDQzMDU5LCJleHAiOjE1NjIwNDY2NTksInN1YiI6IjQyMzc5YjQ5LWJjYTItNDhkNy05ZmQ4LTRlNTMwYzliM2VkNyIsInNjb3BlcyI6WyJiYW5rcyIsInBheW1lbnRzIiwiYWRtaW4iXX0.Twey0UPvEfx2ITbPEW2ATlsYYwRB_Ts_Hl2kBiHv0mP42jNB7B5xdftjvr4JzMVUzbXmv7161L7gvcrTMHEZvqcqppcLYsFzbVLViZsxT8oktrQdX6wjx5f2OYkG1Cbrxgc8fR4BBh84kSYwfHMoPEWVdTJTb27nmyWSIqxmpUX6U-8ZKzu2eHZ2YnyDD-aS4PGv6bDKBZXsC369hBmQY6mpvLKhv67mT52E1MFhTv8kI7ALiQx5BUW6IOuuqUQ_6f5mIBu_9Dzul_2cqhVFVOGw-hmoXlEr0cehfPI7UoDk70icozKjpfEiNuqAMwddsPHUdC_F_n1hAeBoplzOfQ
                    refresh_token:
                      type: string
                      example: >-
                        def50200fd32e987655dbdbfa15b0acb5b9e9b6f56c245fc4d92db02a0f60a8fbd664249959aff1f311109a26305fb4f26417db1f318203505172830f9a1db170e9affd0890dcc77f1db713993b9de26680d86127b4320b160fc477827d34103997847ac65d505a34b4d9183fd54c619171de4f4b32cba1bbff9f4eac8131a26b9b8aa666ca0adb79ce23a5e23f4f89a9e537d9379796655803160c04977ea1cbb8f2bd534a500f64a5f66b6763c30268eb8064a9957f4fadd39e478cd64b24b252516b23b55615a581b989dbc5eee36f378a40405de7285a199cb8dfc1446a1851ea73c7b6ed3cdeca7055a09a600f9a7b72a6c4240e0ce3a31de85c0f791a6babc765bf6c94661892a18e338412115b1a397bd814738f08e9ae0f7dbadcab0f419f68b9275d643a99c7ffe3e6c2f3eb66ed16114d3d6dd0fb7f219dc3cb77011ef2f0080beff8f89e7f2ebf9e83356181cb7ff4bf6fcdd0592a9f773866be50aae6713319f8dca4eb454d84affbaf24eb2af0009e67f68ceb4c1188aae0809f010fb5b271ca33723c67f8e3dd8ab99ac1508985e43ba03e30cecff766b9354b38d98e911b5883319e031389703d19e62d826a79456d17801b48c197aef9c11a29ed2
          '401':
            $ref: '#/components/responses/401'
        x-stoplight:
          id: crymw4j35sz4f
    /banks/{id}:
      get:
        operationId: getBankById
        tags:
          - Banks and financial institutions
        summary: Bank details
        description: View details about a single bank or financial institution
        parameters:
          - name: id
            in: path
            required: true
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
            schema:
              type: string
              description: UUID of the Bank
        responses:
          '200':
            description: Details of bank or financial institution
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/bank_full'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
          '404':
            $ref: '#/components/responses/404'
        x-stoplight:
          id: gggi6h8jroy0q
    /v2/payments:
      post:
        operationId: createPayment
        tags:
          - Payments
        summary: New payment request
        description: >
          The first step is to submit the details of the payment you'd like to
          initiate.  We'll validate that all the required data is supplied and
          that it's a payment that Volt can support.


          Step-by-step instructions for payment initiation are available in our
          [product guides](https://docs.volt.io/gateway/hosted/) area.
        requestBody:
          description: Details of the payment you'd like to initiate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
          required: false
        responses:
          '201':
            description: >
              **Created** - The payment request was validated and accepted and a
              payment ID returned
            content:
              application/json:
                schema:
                  properties:
                    id:
                      type: string
                      description: UUID of created payment
                      example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
                    checkoutUrl:
                      type: string
                      description: Redirect URL for Volt hosted checkout
                      example: >-
                        https://checkout.volt.io/93b85f3c-76eb-4316-b1ae-f3370ddc59bc?auth=jwtToken
          '400':
            $ref: '#/components/responses/400'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: 6rh252bydol2e
        x-internal: false
    /dropin:
      post:
        operationId: createDropinPayment
        tags:
          - Payments
        summary: New Embedded checkout
        description: >
          The first step is to submit the details of the payment you'd like to
          initiate. We'll validate that all the required data is supplied and that
          it's a payment that Volt can support.v2.


          Step-by-step instructions for creating Embedded Checkout are available
          in our [product
          guides](https://docs.volt.io/gateway/embedded-checkout-v1/embedded-checkout-v2/)
          area.
        requestBody:
          description: Details of the payment you'd like to initiate
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/payment_embedded_flow'
                    x-stoplight:
                      id: bwgn3w8lmvdk9
                  - $ref: '#/components/schemas/payment_au_embedded_flow'
                    x-stoplight:
                      id: ycofbyk0r9dkf
          required: false
        responses:
          '201':
            description: >
              **Created** - The payment request was validated and accepted and a
              payment ID returned
            content:
              application/json:
                schema:
                  properties:
                    id:
                      type: string
                      description: UUID of Dropin Payment Request
                      example: fc89fd80-ba96-406f-b4ff-f9e0dd4a5907
                    token:
                      type: string
                      description: JWT Token that corresponds this Payment Request
                      example: >-
                        eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODA3MTAyMDUsImV4cCI6MTY4MDcxMzgwNSwicm9sZXMiOltdLCJ1c2VybmFtZSI6IkNIRUNLT1VUX0pXVF9JTVBMRU1FTlRBVElPTiJ9.hgmagv30Mi6X9mffhKsdnB6XhgvSzPswG0mcJa4M3Xeea-GguCh6VcYpK6_ptsZTRjs2yzjBCY_MKVB4BTynNEqfttpqXEvvcVsccLPpLhHjsaLvnDh9-KpUrjo2dQdAhAwtKvIReInWCmXTVoJwQ7IAdYTNmUXSKmEP73cZ5pm4JIUBma4vEljbAtjP7m3QyoFnDLx9ieyptmbyP91ykixqe-skNZ2C8GfK9gfnuQSOxRLSVS8YERvxek6zqjDKzt4OQFSd-2IdK1sXft5ICFUt7PVKK0KOD4VmcLCeqwJUWef0DUGiUddA85tP5yndxfk6Aq0s-4rdYwYZu5bRNys1MKlbiCM2nCn7whTHPyfa7FPTpkvjWZSSmTe0XF-BkDvlUWyWTcZ3UtmnKWqR6lxH14N5Lf-U847DqBIFtCXctNgg2Lv41iiwdvXhF9MYLRdRPikGj_Nq_r7zEwIZ0J3OH3UGsJ5XpF5BBkVdc538Aaa9bkL7zPk1Synz5F9thH-QhkVua_mXAoHdQRPVXynE20aT3oyO3VpDBT2AHPlyYOlzTh4LidSYDHaGwsJGXVEmTtPP0-G3b6r6fKVWa5vWHi_1ZwEHnjWhim-COo45AreBqldtOULfFnGKtJdmLvB2cDXGK0NFgcTt15_hemNhcRoFixzPQWPVZIAAJVI
          '400':
            $ref: '#/components/responses/400'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: 7a5nksmppj3ar
    /payments:
      get:
        operationId: getPaymentList
        tags:
          - Payments
        summary: List payments
        description: >-
          Reporting API available to fetch list of payments based on specific
          selection criteria
        parameters:
          - in: query
            name: id
            required: false
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
            description: UUID of the Payment
            schema:
              type: string
              format: uuid
          - in: query
            name: bank
            required: false
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
            description: UUID of the Bank
            schema:
              type: string
              format: uuid
          - in: query
            name: currency
            example: EUR
            required: false
            description: >-
              3-letter currency code - See [ISO 4217 - Currency
              codes](https://www.iso.org/iso-4217-currency-codes.html)
            schema:
              type: string
          - name: amount
            in: query
            example: 12345
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            schema:
              type: integer
          - name: type
            in: query
            description: The transaction type (these are predefined)
            example: OTHER
            schema:
              type: string
              enum:
                - BILL
                - GOODS
                - PERSON_TO_PERSON
                - OTHER
                - SERVICES
          - name: uniqueReference
            in: query
            description: Unique reference for the payment
            example: sale123456
            schema:
              type: string
          - name: status
            in: query
            description: The current status of the payment
            example: REQUESTED
            schema:
              type: string
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/limit'
        responses:
          '200':
            description: |
              **OK** - All payments corresponding to specified filters
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/payment_list'
                example:
                  - id: ed2f2418-3009-48e0-9a43-051e5c3ee5b6
                    active: true
                    createdAt: '2023-02-16T09:42:20+00:00'
                    currency:
                      id: GBP
                      name: POUND STERLING
                      decimal: 2
                      active: true
                    amount: 1
                    type: BILL
                    account:
                      id: 66683afe-7dc0-4939-8dab-4a3d657b2b91
                      active: true
                      createdAt: '2021-04-29T08:15:42+00:00'
                      currency:
                        id: GBP
                        name: POUND STERLING
                        decimal: 2
                        active: true
                      country:
                        id: GB
                        name: United Kingdom
                    bank:
                      id: e822a93c-72d4-4de1-8bcc-2381370c5437
                      name: Ulster Bank (UK)
                      country:
                        id: GB
                        name: United Kingdom
                      officialName: Ulster Bank (UK)
                      localName: null
                      branchName: Ulster Bank (UK)
                      shortBranchName: null
                      createdAt: '2022-06-01T13:45:14+00:00'
                      active: true
                      logo: https://cdn.sandbox.volt.io/banks/logos/default.png
                      icon: https://cdn.sandbox.volt.io/banks/icons/default.png
                    uniqueReference: AJmEznH3kLVT2mpoqK
                    status: RECEIVED
                    statusUpdates:
                      - createdAt: '2023-02-16T09:42:37+00:00'
                        newStatus: APPROVED_BY_RISK
                      - createdAt: '2023-02-16T09:42:37+00:00'
                        newStatus: BANK_REDIRECT
                      - createdAt: '2023-02-16T09:43:10+00:00'
                        newStatus: AUTHORISED_BY_USER
                      - createdAt: '2023-02-16T09:43:11+00:00'
                        newStatus: COMPLETED
                      - createdAt: '2023-02-16T09:45:01+00:00'
                        newStatus: RECEIVED
                    beneficiary:
                      id: cc9a9f87-7be9-4aae-928d-a27b9c3b689c
                      customerId: e6707f41-5f2a-4a39-8338-084fb3a8e19b
                      accountIdentifications:
                        - type: sortCode
                          value: '123456'
                        - type: accountName
                          value: Test CM account
                        - type: accountNumber
                          value: '12345678'
                      country:
                        id: GB
                        name: United Kingdom
                    transferType: Faster Payments Scheme
                    pblValidityPeriod: null
                    sender:
                      name: null
                      email: null
                      ip: null
                      deviceFingerprint: c1fc9f277826d16825940603196ab037
                      voltConnect:
                        accountName: Jane Doe
                        accountNumber: null
                        sortCode: null
                  - id: 729771f6-37a3-4635-836f-566b60b217a8
                    active: true
                    createdAt: '2023-02-16T09:32:24+00:00'
                    currency:
                      id: GBP
                      name: POUND STERLING
                      decimal: 2
                      active: true
                    amount: 1
                    type: BILL
                    account:
                      id: 66683afe-7dc0-4939-8dab-4a3d657b2b91
                      active: true
                      createdAt: '2021-04-29T08:15:42+00:00'
                      currency:
                        id: GBP
                        name: POUND STERLING
                        decimal: 2
                        active: true
                      country:
                        id: GB
                        name: United Kingdom
                    bank:
                      id: c2a44111-03df-475a-9800-e7ce6bbaa0b7
                      name: Natwest Bank Sandbox
                      country:
                        id: GB
                        name: United Kingdom
                      officialName: Natwest Bank Sandbox
                      localName: null
                      branchName: Natwest Bank Sandbox
                      shortBranchName: null
                      createdAt: '2021-08-10T14:34:02+00:00'
                      active: true
                      logo: https://cdn.sandbox.volt.io/banks/logos/default.png
                      icon: https://cdn.sandbox.volt.io/banks/icons/default.png
                    uniqueReference: 6eSCeNp4Pd0CRruSPt
                    status: RECEIVED
                    statusUpdates:
                      - createdAt: '2023-02-16T09:32:34+00:00'
                        newStatus: APPROVED_BY_RISK
                      - createdAt: '2023-02-16T09:32:34+00:00'
                        newStatus: BANK_REDIRECT
                      - createdAt: '2023-02-16T09:33:23+00:00'
                        newStatus: AUTHORISED_BY_USER
                      - createdAt: '2023-02-16T09:33:24+00:00'
                        newStatus: COMPLETED
                      - createdAt: '2023-02-16T09:35:02+00:00'
                        newStatus: RECEIVED
                    beneficiary:
                      id: cc9a9f87-7be9-4aae-928d-a27b9c3b689c
                      customerId: e6707f41-5f2a-4a39-8338-084fb3a8e19b
                      accountIdentifications:
                        - type: sortCode
                          value: '123456'
                        - type: accountName
                          value: Test CM account
                        - type: accountNumber
                          value: '12345678'
                      country:
                        id: GB
                        name: United Kingdom
                    transferType: Faster Payments Scheme
                    pblValidityPeriod: null
                    sender:
                      name: null
                      email: null
                      ip: null
                      deviceFingerprint: c1fc9f277826d16825940603196ab037
                      voltConnect:
                        accountName: Jane Doe
                        accountNumber: null
                        sortCode: null
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: w36v7atgt3lul
    /payments/{id}:
      get:
        operationId: getPaymentById
        tags:
          - Payments
        summary: Payment details
        description: >
          Returns the full details of an existing payment that you've created
          througn the POST /payments endpoint.  Simply supply the ```id``` of the
          payment we returned when the payment was created.


          You can retrieve a filterable list of payments through the ```GET
          /payments``` endpoint.
        parameters:
          - name: id
            example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
            description: ID of the payment
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: |
              **OK** - Payment details for the ID specified
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/payment_full'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
          '404':
            $ref: '#/components/responses/404'
        x-stoplight:
          id: xyws709wfnvzh
    /payouts/beneficiaries:
      get:
        operationId: getPayoutBeneficiariesList
        tags:
          - Payouts (Connect)
        summary: Eligible beneficiaries list
        description: >
          **Payouts are only available when using Volt Connect**


          For regulatory purposes, it's a closed-loop payout system, meaning you
          may only payout funds to a person or organisation you've previously
          received money from using Volt Connect.


          This endpoint will return a list of beneficiaries you are allowed send
          payouts to.  


          ### Usage

          The list is paginated by default.


          ### More information

          Full details on payouts can be found in our comprehensive integration
          guides.
        externalDocs:
          url: https://docs.volt.io/connect/payouts/
          description: |
            Integration guide: Payouts   
        parameters:
          - name: name
            in: query
            description: Name of the beneficiary you'd like to send a payout to
            schema:
              type: string
          - name: accountNumber
            in: query
            description: >-
              Domestic account number for the beneficiary you'd like to send a
              payout to
            schema:
              type: string
          - name: iban
            in: query
            description: iban for the beneficiary you'd like to send a payout to
            schema:
              type: string
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/limit'
        responses:
          '200':
            description: |
              **OK** - A paginated list of eligible beneficiaries.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/payout_beneficiary'
                      - oneOf:
                          - $ref: '#/components/schemas/payout_gbp_uk'
                          - $ref: '#/components/schemas/payout_eur_sepa'
                          - $ref: '#/components/schemas/payout_swift_iban'
                          - $ref: '#/components/schemas/payout_swift_other'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: wazr6t5n0gyap
    /payouts:
      post:
        operationId: createPayout
        tags:
          - Payouts (Connect)
        summary: New payout request
        description: >
          **Payouts are only available when using Volt Connect**


          This will create a payout request to send funds from your Connect
          account to a beneficiary.  For regulatory purposes, it's a closed-loop
          payout system, meaning you may only payout funds to a person or
          organisation you've previously received money from using Volt Connect.


          ### Usage

          Pass the details of the payout you'd like to make in the body of the
          request.


          ### Approval

          Payouts don't require approval if you create them using the API.  If you
          need to review payouts before sending, this workflow should take place
          on your own system before you call this endpoint. 


          ### More information

          Full details on payouts can be found in our comprehensive integration
          guides.
        externalDocs:
          url: https://docs.volt.io/connect/payouts/
          description: |
            Integration guide: Payouts   
        parameters:
          - in: header
            name: idempotency-key
            description: Recommended to avoid duplicate payout requests
            schema:
              type: string
              format: uuid
          - schema:
              type: string
            in: header
            name: X-JWS-Header
            description: Optional - applicable if Volt is your Connect partner
        requestBody:
          description: Details of the payout you'd like to create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payout_request'
          required: false
        responses:
          '201':
            description: >
              **Created** - The payout request was validated and accepted and a
              payout ID returned.
            content:
              application/json:
                schema:
                  properties:
                    id:
                      type: string
                      description: UUID of created payout
                      example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
          '400':
            description: >
              **Bad request** - The request could not be processed due to one or
              more errors.  If the exception message does not provide enough
              information, please contact merchant support for further details.  
            content:
              application/json:
                schema:
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 400
                          description: The HTTP error code
                        message:
                          description: Details on why the error has been returned
                          example: Validation exception
                        errorList:
                          type: array
                          items:
                            type: object
                            properties:
                              property:
                                description: The property name causing the validation failure
                                example: currency
                              message:
                                description: Further details on why the validation failed
                                example: This value is not a valid currency
          '401':
            $ref: '#/components/responses/401'
          '403':
            description: >
              **Forbidden** - Although your credentials are correct, your access
              to payout functionality on the API has been disabled or restricted. 
              If the exception message does not provide enough information, please
              contact merchant support for further details.  
            content:
              application/json:
                schema:
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 403
                          description: The HTTP error code
                        message:
                          description: Details on why the error has been returned
                          example: Payouts are not enabled for your account
          '409':
            $ref: '#/components/responses/409'
          '422':
            description: >
              **Unprocessable Entity** - The payout request could not be completed
              due to a problem with the beneficiary you're trying to send to.  If
              the exception message does not provide enough information, please
              contact merchant support for further details.
            content:
              application/json:
                schema:
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 422
                          description: The HTTP error code
                        message:
                          description: Details on why the error has been returned
                          example: You cannot send payouts to this beneficiary
        x-stoplight:
          id: kqsjgtn9xnn2p
      get:
        operationId: getPayoutList
        tags:
          - Payouts (Connect)
        summary: Payout list
        description: >
          **Payouts are only available when using Volt Connect**


          This will return a list of all existing payouts.  


          ### Usage

          The list is paginated by default and can be filtered using the
          parameters shown in the request section below.


          ### More information

          Full details on payouts can be found in our comprehensive integration
          guides.
        externalDocs:
          url: https://docs.volt.io/connect/payouts/
          description: |
            Integration guide: Payouts
        parameters:
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/limit'
        responses:
          '200':
            description: |
              **OK** - A paginated list of payouts.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/payout_list'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: 8xnw41z5ucb59
    /payouts/{id}:
      get:
        operationId: getPayoutById
        tags:
          - Payouts (Connect)
        summary: Payout details
        description: >
          **Payouts are only available when using Volt Connect**


          This will return details of the selected payout, with approval update
          history.


          ### Usage

          Pass the **id** of the payout as part of the URL. 


          ### More information

          Full details on payouts can be found in our comprehensive integration
          guides.
        externalDocs:
          url: https://docs.volt.io/connect/payouts/
          description: |
            Integration guide: Payouts        
        parameters:
          - name: id
            description: ID of the payout
            example: efffed42-40f7-4bd2-840d-908aae9a33ad
            in: path
            required: true
            schema:
              type: string
        responses:
          '200':
            description: |
              **OK** - Details of the selected payout
            content:
              application/json:
                schema:
                  oneOf:
                    - allOf:
                        - $ref: '#/components/schemas/payout_details'
                        - type: object
                          title: API payout
                          description: API payouts don't require approval
                          properties:
                            approvals:
                              type: array
                              description: Will contain an empty array
                    - $ref: '#/components/schemas/payout_approved'
                      title: Fuzebox payout
                      description: API payouts don't require approval
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: 86b830u6vxgp6
    /payments/{id}/refund-details:
      get:
        operationId: getRefundDetails
        tags:
          - Refunds (Connect)
        summary: Check refund eligibility
        description: >
          **Refunds are only available when using Volt Connect**  


          ### Usage

          Pass the **id** of the existing payment in the URL to check whether this
          payment is eligible for a refund.
                  
          ### More information

          Full details on how to request refunds, with full details of
          notifications you can expect, can be found in our comprehensive
          integration guides.
        externalDocs:
          url: https://docs.volt.io/connect/refunds-via-api/
          description: |
            Integration guide: Refunds         
        parameters:
          - name: id
            description: ID of the refund
            example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: All payments details for specified filters
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/refund_available'
                    - $ref: '#/components/schemas/refund_unavailable'
          '400':
            $ref: '#/components/responses/400'
          '401':
            $ref: '#/components/responses/401'
          '403':
            $ref: '#/components/responses/403'
        x-stoplight:
          id: no8qiwijobr83
    /payments/{id}/request-refund:
      post:
        operationId: requestRefundByPaymentId
        tags:
          - Refunds (Connect)
        summary: New refund request
        description: >
          **Refunds are only available when using Volt Connect**  


          ### Usage

          Pass the **id** of the existing payment in the URL and the amount and
          reference for the refund in the body of the request.


          ### Checking eligibility before requesting a refund

          You can get the eligibility for a refund using GET
          /payments/{id}/refund-details


          ### More information

          Full details on how to use refunds, with details of notifications you
          can expect, can be found in our comprehensive integration guides.
        externalDocs:
          url: https://docs.volt.io/connect/refunds-via-api/
          description: |
            Integration guide: Refunds via the API        
        parameters:
          - in: header
            name: idempotency-key
            description: Optional - but recommended - to avoid duplicate refund requests
            schema:
              type: string
              format: uuid
          - name: id
            description: ID of the payment
            example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
            in: path
            required: true
            schema:
              type: string
          - schema:
              type: string
            in: header
            name: X-JWS-Header
            description: Optional - applicable if Volt is your Connect partner
        requestBody:
          description: Details of the refund you'd like to request for this payment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refund_request'
        responses:
          '201':
            description: |
              **Created** - The refund request was validated and accepted.
            content:
              application/json:
                schema:
                  properties:
                    id:
                      type: string
                      description: UUID of created refund
                      example: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc
          '400':
            $ref: '#/components/responses/400'
          '401':
            $ref: '#/components/responses/401'
          '403':
            description: >
              **Not authorised** - Although your credentials are correct, your
              access to this section of the API has been disabled or limited.
              Subsequent requests to this endpoint (even with valid data) will not
              be processed.
            content:
              application/json:
                schema:
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 403
                          description: The HTTP error code
                        message:
                          description: Details on why the error has been returned
                          example: Payouts are not enabled for your account
          '409':
            $ref: '#/components/responses/409'
          '422':
            description: >
              **Unprocessable Entity** - The payout request could not be completed
              due to a problem with the beneficiary you're trying to send to.  If
              the exception message does not provide enough information, please
              contact merchant support for further details.
            content:
              application/json:
                schema:
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: integer
                          example: 422
                          description: The HTTP error code
                        message:
                          description: Details on why the error has been returned
                          example: You cannot send payouts to this beneficiary
        x-stoplight:
          id: imxi4gqo57xyy
    /reports/payments:
      post:
        summary: Create payment report
        tags:
          - Reporting
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/report_requested'
          '400':
            description: |
              **Bad Request** - For example, when invalid JSON was provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      required:
                        - code
                        - message
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
                          example: Bad Request
                  required:
                    - exception
                examples:
                  Bad request:
                    value:
                      exception:
                        code: 400
                        message: Bad Request
                  Validation error:
                    value:
                      exception:
                        code: 400
                        message: Validation exception
                        errorList:
                          - property: fieldName
                            message: Detailed error for that field
          '422':
            $ref: '#/components/responses/422'
          '429':
            description: >
              **Too Many Requests** - This may occur when you have requested more
              than 5 reports to be generated at the same time.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 429
                        message:
                          type: string
                          example: Too Many Requests
        operationId: post-reports-payment
        description: >
          This endpoint allows you to request a payment report for a specific
          period.  Once requested, your report will be generated asynchronously
          and available at the ```/reports/id/download endpoint``` as a CSV file
          once it's been generated.  Check on the availability status of your
          report using the ```/reports/{id}``` endpoint.


          The ```startDate``` and ```endDate``` may be a maximum of **92 days**
          apart, so you can generate reports containing 3 months data.


          If you supply a ```customerId``` for any merchant within your customer
          hierarchy, only that merchant's data will be returned.  


          If a ```customer ID``` is **not** provided, the report will contain data
          for all merchants within your customer hierarchy.
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  startDate:
                    type: string
                    format: date-time
                    description: >-
                      From which date payments data should be gathered (in error
                      response exists as filters.createdAt.gte)
                  endDate:
                    type: string
                    format: date-time
                    description: >-
                      To which date payments data should be gathered (in error
                      response exists as filters.createdAt.lte)
                  customerId:
                    type: string
                    format: uuid
                required:
                  - startDate
                  - endDate
              examples:
                Example with customerId provided:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
                    customerId: 87d8e330-2878-4742-a86f-dbbb3bf522ac
                Example without customerId:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
          description: ''
      parameters: []
    /reports/connect/{bankAccountId}:
      post:
        summary: Create Connect report
        tags:
          - Reporting
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/report_requested'
          '400':
            description: |
              **Bad Request** - For example, when invalid JSON was provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      required:
                        - code
                        - message
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
                          example: Bad Request
                  required:
                    - exception
                examples:
                  Bad request:
                    value:
                      exception:
                        code: 400
                        message: Bad Request
                  Validation error:
                    value:
                      exception:
                        code: 400
                        message: Validation exception
                        errorList:
                          - property: fieldName
                            message: Detailed error for that field
          '422':
            $ref: '#/components/responses/422'
          '429':
            description: >
              **Too Many Requests** - This may occur when you have requested more
              than 5 reports to be generated at the same time.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 429
                        message:
                          type: string
                          example: Too Many Requests
        operationId: post-reports-connect
        description: >
          This endpoint allows you to request a Connect report for a selected
          ```bankAccountId``` and specific period.  Once requested, your report
          will be generated asynchronously and available at the
          ```/reports/id/download endpoint``` as a CSV file once it's been
          generated.  Check on the availability status of your report using the
          ```/reports/{id}``` endpoint.


          The ```startDate``` and ```endDate``` may be a maximum of **92 days**
          apart, so you can generate reports containing 3 months data.
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  startDate:
                    type: string
                    format: date-time
                    description: >-
                      From which date account operations data should be gathered
                      (in error response exists as filters.createdAt.gte)
                  endDate:
                    type: string
                    format: date-time
                    description: >-
                      To which date account operations data should be gathered (in
                      error response exists as filters.createdAt.lte)
                  transactionTypes:
                    type: array
                    items:
                      type: string
                      enum:
                        - PAYMENT
                        - SETTLEMENT
                        - REFUND
                        - PAYOUT
                    description: >-
                      Types of transactions to include in the Connect report. If
                      not provided, all transaction types are included.
                required:
                  - startDate
                  - endDate
              examples:
                Example payload:
                  value:
                    startDate: '2023-08-21T18:32:00+00:00'
                    endDate: '2023-08-28T18:32:00+00:00'
                    transactionTypes:
                      - PAYMENT
                      - REFUND
          description: ''
      parameters:
        - schema:
            type: string
          name: bankAccountId
          in: path
          required: true
          description: Connect bank account ID that you're requesting report for
    /reports/refund:
      post:
        summary: Create Refund report
        tags:
          - Reporting
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/report_requested'
          '400':
            description: |
              **Bad Request** - For example, when invalid JSON was provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      required:
                        - code
                        - message
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
                          example: Bad Request
                  required:
                    - exception
                examples:
                  Bad request:
                    value:
                      exception:
                        code: 400
                        message: Bad Request
                  Validation error:
                    value:
                      exception:
                        code: 400
                        message: Validation exception
                        errorList:
                          - property: fieldName
                            message: Detailed error for that field
          '422':
            $ref: '#/components/responses/422'
          '429':
            description: >
              **Too Many Requests** - This may occur when you have requested more
              than 5 reports to be generated at the same time.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 429
                        message:
                          type: string
                          example: Too Many Requests
        operationId: post-reports-refund
        description: >
          This endpoint allows you to request a refund report for a specific
          period. Once requested, your report will be generated asynchronously and
          available at the ```/reports/id/download endpoint``` as a CSV file once
          it's been generated. Check on the availability status of your report
          using the ```/reports/{id}``` endpoint.


          The ```startDate``` and ```endDate``` may be a maximum of **92 days**
          apart, so you can generate reports containing 3 months data.


          If you supply a ```customerId``` for any merchant within your customer
          hierarchy, only that merchant's data will be returned.


          If a ```customer ID``` is **not** provided, the report will contain data
          for all merchants within your customer hierarchy.


          If you supply an ```accountId``` for Connect account, only data related
          to this account will be returned.


          If an ```account ID``` is **not** provided, the report will contain data
          related to all Connect accounts.
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  startDate:
                    type: string
                    format: date-time
                    description: >-
                      From which date refund data should be gathered (in error
                      response exists as filters.createdAt.gte)
                  endDate:
                    type: string
                    format: date-time
                    description: >-
                      To which date refund data should be gathered (in error
                      response exists as filters.createdAt.lte)
                  customerId:
                    type: string
                    format: uuid
                  accountId:
                    type: string
                    format: uuid
                    description: Filter refunds from particular connect account.
                  includeEventFees:
                    type: boolean
                required:
                  - startDate
                  - endDate
              examples:
                Example with customerId and includeEventFees provided:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
                    customerId: 87d8e330-2878-4742-a86f-dbbb3bf522ac
                    accountId: 12d8e330-2878-4742-a86f-dbbb3bf52234
                    includeEventFees: true
                Example without customerId and includeEventFees:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
          description: ''
      parameters: []
    /reports/auditlog:
      post:
        summary: Create Audit Log report
        tags:
          - Reporting
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/report_requested'
          '400':
            description: |
              **Bad Request** - For example, when invalid JSON was provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      required:
                        - code
                        - message
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
                          example: Bad Request
                  required:
                    - exception
                examples:
                  Bad request:
                    value:
                      exception:
                        code: 400
                        message: Bad Request
                  Validation error:
                    value:
                      exception:
                        code: 400
                        message: Validation exception
                        errorList:
                          - property: fieldName
                            message: Detailed error for that field
          '422':
            $ref: '#/components/responses/422'
          '429':
            description: >
              **Too Many Requests** - This may occur when you have requested more
              than 5 reports to be generated at the same time.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 429
                        message:
                          type: string
                          example: Too Many Requests
        operationId: post-reports-audit-log
        description: >
          This endpoint initiates the generation of an audit log report for a
          specified time frame. Reports are generated asynchronously and, once
          ready, can be downloaded as CSV files from `/reports/{id}/download`. Use
          `/reports/{id}` to monitor the report's status.


          The period between `startDate` and `endDate` must not exceed 92 days,
          allowing for quarterly reports. Specifying a `customerId` filters the
          report to include data exclusively for that merchant. Without a
          `customerId`, the report covers all merchants in your customer
          hierarchy.
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  startDate:
                    type: string
                    format: date-time
                    description: >-
                      Start date for collecting audit log data, referenced in
                      errors as 'filters.createdAt.gte'.
                  endDate:
                    type: string
                    format: date-time
                    description: >-
                      End date for collecting audit log data, referenced in errors
                      as 'filters.createdAt.lte'.
                  customerId:
                    type: string
                    format: uuid
                required:
                  - startDate
                  - endDate
              examples:
                Example with customerId provided:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
                    customerId: 87d8e330-2878-4742-a86f-dbbb3bf522ac
                Example without customerId:
                  value:
                    startDate: '2019-08-24T14:15:22+00:00'
                    endDate: '2019-08-24T14:15:22+00:00'
          description: ''
      parameters: []
    /reports:
      get:
        summary: Get available reports
        tags:
          - Reporting
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/report'
          '400':
            description: |
              Bad Request (e.g. an invalid customerId was provided)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                        message:
                          type: string
                examples:
                  Customer not found:
                    value:
                      title: Violation exception
                      violations:
                        - type: customer-not-found
                          propertyPath: customerId
                          title: Provided customer does not exist.
          '422':
            $ref: '#/components/responses/422'
        operationId: get-reports
        description: >
          This endpoint will allow you to fetch a list containing all the reports
          you've generated.  Use the ```id``` of the report to download it using
          the ```/reports/{id}/download``` endpoint.


          By default, it will return a complete list of reports for your entire
          customer hierarchy. 


          Providing a ```customerId``` in the query will allow you to limit the
          list to reports available for one particular merchant.
        parameters:
          - schema:
              type: string
              format: uuid
            in: query
            name: customerId
            description: The ID of a specific merchant within your customer hierarchy
    /reports/{id}:
      parameters:
        - schema:
            type: string
            format: uuid
          name: id
          in: path
          required: true
          description: ID of the report you wish to retrieve
      get:
        summary: Get report by ID
        tags:
          - Reporting
        operationId: get-reports-id
        description: >
          This endpoint allows fetching the details of a specific report.  


          Note that this will return the details of the report only.  To download
          the report as a CSV file, use the ```/reports/{id}/download``` endpoint.


          Provide the ```id``` returned when you requested the report.
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/report'
          '400':
            description: Bad Request (f.e. invalid ID provided)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
          '404':
            description: Report not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 404
                        message:
                          type: string
                          example: Not Found
    /reports/{id}/download:
      parameters:
        - schema:
            type: string
            format: uuid
          name: id
          in: path
          required: true
          description: ID of report
      get:
        summary: Download a report
        tags:
          - Reporting
        responses:
          '200':
            description: OK
            content:
              text/csv:
                schema:
                  type: string
                  format: binary
            headers:
              Content-Type:
                schema:
                  type: string
                description: text/csv
          '400':
            description: Bad Request (e.g. in case of invalid ID provided)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 400
                        message:
                          type: string
          '404':
            description: Report not found or not generated yet
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    exception:
                      type: object
                      properties:
                        code:
                          type: number
                          example: 404
                        message:
                          type: string
        operationId: get-reports-id-download
        description: >
          This endpoint allows downloading a previously generated report in CSV
          format.  


          Use the ```id``` returned when you requested the report.
    /payments/{paymentId}/name-match-score:
      parameters:
        - schema:
            type: string
          name: paymentId
          in: path
          required: true
      get:
        summary: Payment Match Score
        tags:
          - Payments
          - Matchmeter
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    invocationId:
                      type: string
                      x-stoplight:
                        id: e0bb7qj7jvewp
                      example: 97428d91-f71f-49d8-9442-ae0b891b973f
                      format: uuid
                    nameMatchScore:
                      type: number
                      x-stoplight:
                        id: 5fwniea48bm6q
                      format: float
                      example: 0.5
          '403':
            description: >-
              **Not authorised** - Although your credentials are correct, your
              access to this section of the API has been disabled or limited.
              Subsequent requests to this endpoint (even with valid data) will not
              be processed.
            content:
              application/json:
                schema:
                  type: object
                  properties: {}
          '404':
            description: >-
              **Not found** - The resource that you are requesting cannot be
              found. The response may contain further information.
          '409':
            description: >-
              **Conflict** - Name match score is only available for payments in
              the received status.
        operationId: get-payments-paymentId-name-match-score
        x-stoplight:
          id: gxg8o99lzn2l2
        parameters:
          - schema:
              type: boolean
            in: query
            name: allow_initials
            description: >-
              default: true - if set to false, receiving an account holder name
              that contains an initial instead of a first name will significantly
              impact the match score.
        description: >-
          This endpoint will allow accurately matches naming nuances between
          merchant inputs and end-user bank records
  components:
    responses:
      '400':
        description: >
          **Bad request** - We cannot accept the payload from the request you sent
          because the data is invalid or malformed. The response will contain a
          description of the actual problem.
      '401':
        description: >
          **Access denied** - Your credentials were invalid. It may be that the
          token you've used has expired. Try re-authenticating with valid or
          updated credentials and retry this request.
      '403':
        description: >
          **Not authorised** - Although your credentials are correct, your access
          to this section of the API has been disabled or limited. Subsequent
          requests to this endpoint (even with valid data) will not be processed.
      '404':
        description: >
          **Not found** - The resource that you are requesting cannot be found.
          The response may contain further information.
      '409':
        description: >
          **Conflict** - A resource has already been created with this idempotency
          key.
        content:
          application/json:
            schema:
              properties:
                exception:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 403
                      description: The HTTP error code
                    message:
                      description: Details on why the conflict happened
                      example: >-
                        A resource has already been created with this idempotency
                        key.
      '422':
        description: Validation error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/validation_error_v1'
    parameters:
      page:
        in: query
        name: page
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
        description: >
          You can request additional pages of information by appending the page
          parameter to your GET request. Pages start numbering at 1 and are in
          blocks of 50 records, so to call records 51-100, append **page**=2 to
          your request. If you omit the page parameter, we will return you the
          information on page 1.
      limit:
        in: query
        name: limit
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
        description: >
          If you want to return more than the default number of records per page,
          append the parameter items to your GET request. To get the first 100
          records, append **limit**=100 to your request. To get the next 100
          records, append **page**=2&**limit**=100. If you omit the items
          parameter, we will return 50 records per page.
    schemas:
      bank_full:
        type: object
        description: Bank or financial institution
        properties:
          id:
            type: string
            description: UUID identifying the bank
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          shortCode:
            type: string
            description: Bank short code
            example: barclays
          supportedCurrencies:
            type: array
            description: Currencies supported by bank.
            items:
              type: string
            example:
              - GBP
              - EUR
          name:
            maxLength: 100
            type: string
            description: The bank's display name
            example: Barclays Bank
          country:
            $ref: '#/components/schemas/country'
          officialName:
            maxLength: 100
            type: string
            description: The full bank or financial institution's name
            example: Barclays Bank Plc
          active:
            type: boolean
            description: Whether this bank is active
          logo:
            type: string
            description: URL of the bank logo PNG asset. Image presents official bank logo
            example: https://cdn.volt.io/banks/logos/xx_barclays_bank.png
          icon:
            type: string
            description: >-
              URL of the bank icon PNG asset. Image presents bank logomark, icons
              should be displayed together with bank names.
            example: https://cdn.volt.io/banks/icons/xx_barclays_bank.png
        x-stoplight:
          id: 85utnoyly6dn2
      bank_payment_list:
        type: object
        properties:
          id:
            type: string
            description: UUID identifying the bank
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          name:
            maxLength: 100
            type: string
            description: The bank's display name
            example: Barclays Bank
          country:
            $ref: '#/components/schemas/country_payment_list'
          officialName:
            maxLength: 100
            type: string
            description: The full bank or financial institution's name
            example: Barclays Bank Plc
          branchName:
            maxLength: 255
            type: string
            description: The full bank or financial branch institution's name
            example: Barclays Bank Branch Plc
          shortBranchName:
            maxLength: 255
            type: string
            nullable: true
            description: The short bank or financial branch institution's name
            example: Barclays Bank Branch
          active:
            type: boolean
            description: Whether this bank is active
          logo:
            type: string
            description: URL of the bank logo PNG asset. Image presents official bank logo
            example: https://cdn.volt.io/banks/logos/xx_barclays_bank.png
          icon:
            type: string
            description: >-
              URL of the bank icon PNG asset. Image presents bank logomark, icons
              should be displayed together with bank names.
            example: https://cdn.volt.io/banks/icons/xx_barclays_bank.png
        description: Banks and financial institutions.
        x-stoplight:
          id: 3sqkw7z5986l9
      country:
        description: Country
        type: object
        properties:
          id:
            maxLength: 2
            minLength: 2
            type: string
            description: ISO (2-letter) code for the country
            example: GB
          name:
            type: string
            description: Country name
            example: United Kingdom
        x-stoplight:
          id: mlyly5qku3g51
      country_payment_list:
        description: Country
        type: object
        properties:
          id:
            maxLength: 2
            minLength: 2
            type: string
            description: ISO (2-letter) code for the country
            example: GB
          name:
            type: string
            description: Country name
            example: United Kingdom
        x-stoplight:
          id: kd59wbqzgba1z
      currency:
        type: object
        properties:
          id:
            description: >-
              3-letter currency code - See [ISO 4217 - Currency
              codes](https://www.iso.org/iso-4217-currency-codes.html)
            type: string
            example: EUR
          name:
            description: Name of the Currency
            type: string
            example: Euro
          decimal:
            description: Decimal places of the Currency
            type: integer
            example: 2
          active:
            description: If this Currency is active
            type: boolean
            example: true
        x-stoplight:
          id: ziaa5rwveskr5
      beneficiary:
        type: object
        properties:
          id:
            description: uuid
            type: string
            format: uuid
            example: 9ddcd918-d569-445b-bbd9-df759f6159e6
          customerId:
            description: uuid
            type: string
            format: uuid
            example: eeeeeeee-0002-eeee-eeee-eeeeeeeeeeee
          accountIdentifications:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                  example: bic
                value:
                  type: string
                  example: LOYDGB2LXXX
          country:
            type: object
            properties:
              id:
                description: country
                type: string
                example: GB
              name:
                description: country name
                type: string
                example: United Kingdom
        x-stoplight:
          id: gsznojwp6qc5e
      statusUpdates:
        type: array
        items:
          type: object
          properties:
            createdAt:
              type: string
              format: datetime
              example: '2023-02-16T09:42:37+00:00'
            newStatus:
              type: string
              example: NEW_PAYMENT
        x-stoplight:
          id: qeinqsnybv5cc
      sender:
        type: object
        properties:
          name:
            type: string
            example: Jane Doe
            description: name
          email:
            type: string
            example: jane@example.com
            description: email
          ip:
            type: string
            example: 151.152.153.154
            description: ip address
          deviceFingerprint:
            type: string
            example: c1fc9f277826d16825940603196ab037
          voltConnect:
            type: object
            properties:
              accountName:
                type: string
                example: Jane Doe
                description: account name
              accountNumber:
                type: string
                example: '12345678'
                description: account number
              sortCode:
                type: string
                example: '12345'
                description: sort code
        x-stoplight:
          id: gnxbakbu0zvn0
      payment:
        description: Payments - money flowing from a consumer to a merchant.
        x-stoplight:
          id: cqn0jma8u837s
        type: object
        properties:
          currencyCode:
            maxLength: 3
            minLength: 3
            type: string
            description: >-
              Currency in which the payment should be made, in ISO 4217 format (3
              uppercase letters)
            example: GBP
          amount:
            type: integer
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            example: 12345
          type:
            type: string
            description: The transaction type (these are predefined)
            example: OTHER
            enum:
              - BILL
              - GOODS
              - PERSON_TO_PERSON
              - OTHER
              - SERVICES
          uniqueReference:
            type: string
            maxLength: 18
            description: >-
              Unique reference for the payment from the merchant, must contain
              only alphanumeric characters
            example: sale123456
          merchantInternalReference:
            type: string
            example: 1d73dd8a-4aef-4c83-80aa-f06c4f615a75
            maxLength: 100
            x-stoplight:
              id: cnl13cszwgrs8
            description: >-
              A field which identifies the transaction in the merchant's system,
              which can be used as a longer alternative to the uniqueReference
              field.  This field can contain up to 100 characters, including
              special ones.


              - If the **uniqueReference** value is provided, then this field is
              optional


              - If this field contains a value but **uniqueReference** is not
              provided, a **uniqueReference** will be automatically generated by
              Volt
          shopper:
            $ref: '#/components/schemas/shopper'
          bank:
            type: string
            description: UUID of the bank selected to originate the payment
            format: iri-reference
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          callback:
            type: string
            description: Query string which will be returned to the merchant
            example: order_id=662384a0&sample=parameter
          notificationUrl:
            type: string
            description: >-
              External URL where the notification is going to be sent when the
              payment status changes
            example: https://client.app.example/notify
          paymentSuccessUrl:
            type: string
            description: >-
              URL where the user is redirected after a successful payment. This
              will overwrite the application configuration set in Fuzebox. Only
              provide a value here if you need to overwrite it.
            example: https://example.com/redirect/success
          paymentFailureUrl:
            type: string
            description: >-
              URL where the user is redirected after a failed payment. This will
              overwrite the application configuration set in Fuzebox. Only provide
              a value here if you need to overwrite it.
            example: https://example.com/redirect/failure
          paymentPendingUrl:
            type: string
            description: >-
              URL where the user is redirected if payment is pending. This will
              overwrite the application configuration set in Fuzebox. Only provide
              a value here if you need to overwrite it.
            example: https://example.com/redirect/pending
          paymentCancelUrl:
            type: string
            description: >-
              URL where the user is redirected after cancelling a payment. This
              will overwrite the application configuration set in Fuzebox. Only
              provide a value here if you need to overwrite it.
            example: https://example.com/redirect/cancel
          checkoutCountries:
            type: array
            x-stoplight:
              id: g4zed612q61mq
            description: >
              This field should be used only if you require to limit the countries
              that are visible to the Shopper for this specific payment. Without
              providing values in this field all the countries that are setup in
              your Fuzebox account will be available for Shopper to select from
            example:
              - PL
              - DE
            items:
              x-stoplight:
                id: 0uhazpi6lb7jx
              type: string
              pattern: ^[a-zA-Z]{2}$
              example: GB
        required:
          - currencyCode
          - amount
          - type
          - shopper
      payment_list:
        type: object
        properties:
          id:
            type: string
            format: uuid
            description: UUID identifying the payment
            readOnly: true
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          currency:
            $ref: '#/components/schemas/currency'
          bank:
            $ref: '#/components/schemas/bank_payment_list'
          amount:
            type: integer
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            example: 12345
          type:
            type: string
            description: The transaction type (these are predefined)
            example: OTHER
            enum:
              - BILL
              - GOODS
              - PERSON_TO_PERSON
              - OTHER
              - SERVICES
          uniqueReference:
            type: string
            description: Unique reference for the payment from the merchant
            example: sale123456
          status:
            type: string
            description: The current status of the payment (in words)
            example: REQUESTED
          active:
            type: boolean
            description: Whether the payment is active
          createdAt:
            type: string
            format: date-time
            description: When was Payment created
            example: '2020-06-02T07:48:53+02:00'
          beneficiary:
            $ref: '#/components/schemas/beneficiary'
          statusUpdates:
            $ref: '#/components/schemas/statusUpdates'
        description: Payments - money flowing from a consumer to a merchant.
        x-stoplight:
          id: ipbfcef0yvl8i
      payment_embedded_flow:
        description: Payments - money flowing from a consumer to a merchant.
        x-stoplight:
          id: n1jgj1fv44cox
        type: object
        title: Payment - Embedded Flow
        properties:
          currencyCode:
            maxLength: 3
            minLength: 3
            type: string
            description: >-
              Currency in which the payment should be made, in ISO 4217 format (3
              uppercase letters)
            example: GBP
          amount:
            type: integer
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            example: 12345
          type:
            description: The transaction type (these are predefined)
            example: OTHER
            enum:
              - BILL
              - GOODS
              - PERSON_TO_PERSON
              - SERVICES
              - OTHER
          shopper:
            $ref: '#/components/schemas/shopper'
          uniqueReference:
            description: >-
              Unique reference for the payment from the merchant, must contain
              only alphanumeric characters
            example: sale123456
            type: string
            maxLength: 18
          merchantInternalReference:
            type: string
            example: 1d73dd8a-4aef-4c83-80aa-f06c4f615a75
            maxLength: 100
            description: >-
              A field which identifies the transaction in the merchant's system,
              which can be used as a longer alternative to the uniqueReference
              field.  This field can contain up to 100 characters, including
              special ones.


              - If the **uniqueReference** value is provided, then this field is
              optional


              - If this field contains a value but **uniqueReference** is not
              provided, a **uniqueReference** will be automatically generated by
              Volt
          bank:
            type: string
            description: UUID of the bank selected to originate the payment
            format: iri-reference
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          callback:
            type: string
            description: Query string which will be returned to the merchant
            example: order_id=662384a0&sample=parameter
          notificationUrl:
            type: string
            description: >-
              External URL where the notification is going to be sent when the
              payment status changes
            example: https://client.app.example/notify
          paymentSuccessUrl:
            type: string
            description: >-
              URL where the user is redirected after a successful payment. This
              will overwrite the application configuration set in Fuzebox. Only
              provide a value here if you need to overwrite it.
            example: https://example.com/redirect/success
          paymentFailureUrl:
            type: string
            description: >-
              URL where the user is redirected after a failed payment. This will
              overwrite the application configuration set in Fuzebox. Only provide
              a value here if you need to overwrite it.
            example: https://example.com/redirect/failure
          paymentPendingUrl:
            type: string
            description: >-
              URL where the user is redirected if payment is pending. This will
              overwrite the application configuration set in Fuzebox. Only provide
              a value here if you need to overwrite it.
            example: https://example.com/redirect/pending
          paymentCancelUrl:
            type: string
            description: >-
              URL where the user is redirected after cancelling a payment. This
              will overwrite the application configuration set in Fuzebox. Only
              provide a value here if you need to overwrite it.
            example: https://example.com/redirect/cancel
          checkoutCountries:
            type: array
            x-stoplight:
              id: pwmbkcn6k643u
            description: >-
              This field should be used only if you require to limit the countries
              that are visible to the Shopper for this specific payment. Without
              providing values in this field all the countries that are setup in
              your Fuzebox account will be available for Shopper to select from
            example:
              - PL
              - DE
            items:
              x-stoplight:
                id: df173qyxut2h5
              type: string
              pattern: ^[a-zA-Z]{2}$
              example: GB
        required:
          - currencyCode
          - amount
          - type
          - shopper
      payment_au_embedded_flow:
        description: Payments - money flowing from a consumer to a merchant.
        x-stoplight:
          id: zpeu8tdw7e206
        type: object
        title: Payment - Embedded Flow Australia
        properties:
          currencyCode:
            maxLength: 3
            minLength: 3
            type: string
            description: >-
              Currency in which the payment should be made, in ISO 4217 format (3
              uppercase letters)
            example: AUD
          amount:
            type: integer
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            example: 12345
          type:
            description: The transaction type (these are predefined)
            enum:
              - MORTGAGE
              - UTILITY
              - LOAN
              - DEPENDANT_SUPPORT
              - GAMBLING
              - RETAIL
              - SALARY
              - PERSONAL
              - GOVERNMENT
              - PENSION
              - TAX
              - OTHER
          additionalDescription:
            type: string
            maxLength: 140
            example: Additional description
            description: >-
              Value that represents agreement's and payment's description that
              will be shown to shopper at his bank.
          shopper:
            $ref: '#/components/schemas/shopper'
          uniqueReference:
            description: >-
              Unique reference for the payment from the merchant, must contain
              only alphanumeric characters
            example: sale123456
            type: string
            maxLength: 35
          merchantInternalReference:
            type: string
            example: 1d73dd8a-4aef-4c83-80aa-f06c4f615a75
            maxLength: 100
            description: >-
              A field which identifies the transaction in the merchant's system,
              which can be used as a longer alternative to the uniqueReference
              field.  This field can contain up to 100 characters, including
              special ones.


              - If the **uniqueReference** value is provided, then this field is
              optional


              - If this field contains a value but **uniqueReference** is not
              provided, a **uniqueReference** will be automatically generated by
              Volt
          bank:
            type: string
            description: UUID of the bank selected to originate the payment
            format: iri-reference
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          notificationUrl:
            type: string
            description: >-
              External URL where the notification is going to be sent when the
              payment status changes
            example: https://client.app.example/notify
        required:
          - currencyCode
          - amount
          - type
          - additionalDescription
          - shopper
      payment_full:
        type: object
        properties:
          id:
            type: string
            description: UUID identifying the payment
            readOnly: true
            example: 662384a0-9734-4556-a8bd-3f1e774e2a3c
          active:
            type: boolean
            example: true
          createdAt:
            type: string
            format: date-time
            readOnly: true
            description: Timestamp for when the payment was requested
          currency:
            $ref: '#/components/schemas/currency'
          amount:
            type: integer
            description: The amount of the transaction in 1/100 units (pence, cents etc)
            example: 12345
          type:
            type: string
            description: The transaction type (these are predefined)
            example: OTHER
            enum:
              - BILL
              - GOODS
              - PERSON_TO_PERSON
              - OTHER
              - SERVICES
          account:
            type: object
            properties:
              id:
                type: string
                format: uuid
              active:
                type: boolean
                example: true
              createdAt:
                type: string
                format: date-time
                readOnly: true
                description: Timestamp for when the account was created
              nickname:
                type: string
                example: Virtual EUR CY Account
              accountNumber:
                type: string
                nullable: true
                example: null
              iban:
                type: string
                example: DE3339010517382289891
              swiftBic:
                type: string
                example: BARCGB2L
              currency:
                $ref: '#/components/schemas/currency'
              country:
                $ref: '#/components/schemas/country'
              bankname:
                type: string
                nullable: true
                example: null
          uniqueReference:
            type: string
            description: Unique reference for the payment from the merchant
            example: sale123456
          bank:
            $ref: '#/components/schemas/bank_payment_list'
          status:
            type: string
            description: The current status of the payment (in words)
            example: NEW_PAYMENT
          statusUpdates:
            $ref: '#/components/schemas/statusUpdates'
          beneficiary:
            type: object
            properties:
              id:
                type: string
                format: uuid
              customerId:
                type: string
                format: uuid
              accountIdentifications:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    value:
                      type: string
              country:
                $ref: '#/components/schemas/country'
          transferType:
            type: string
            nullable: true
            example: null
          sender:
            $ref: '#/components/schemas/sender'
          refundAvailable:
            type: boolean
            example: false
          refundNotAvailableReason:
            type: string
            example: This payment cannot be refunded because it was not received
          refundNotAvailableCode:
            type: string
            example: ApiPaymentNotReceived
        description: Payments - money flowing from a consumer to a merchant.
        x-stoplight:
          id: 44fqcwd23h4ra
      shopper:
        type: object
        description: Information about the shopper
        x-stoplight:
          id: 5fy4pfd9j5enp
        x-examples:
          First and last name:
            reference: user-13489
            documentId: 90971226008
            email: john.smith@example.com
            firstName: John
            lastName: Smith
            ip: 122.118.64.13
          Organisation name:
            reference: user-13489
            documentId: 90971226008
            email: john.smith@example.com
            organisationName: Company
            ip: 122.118.64.13
        properties:
          reference:
            type: string
            minLength: 3
            maxLength: 256
            description: >-
              Your unique reference for the shopper, e.g. customer ID or email
              address. It can feature a combination of letters and numbers, along
              with an optional single "@" symbol and a curated selection of
              special characters like !$#%^&*.-_. Please note that special
              characters are not permitted at the end of the reference value, and
              the "@" symbol is only allowed in the middle of the reference value.
            example: user-13489
            pattern: >-
              ^[a-zA-Z0-9.!#$%&\'\*+\/\=?^_`{|}~-]+@?[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$
          documentId:
            type: string
            description: >-
              Only required for PIX payments in Brazil.  The shopper's document ID
              - must be 14 digits long for CNPJ and 11 digits for CPF.
            example: '90971226008'
          email:
            type: string
            maxLength: 255
            description: Shopper's email address
            example: john.smith@example.com
          firstName:
            type: string
            maxLength: 255
            description: Shopper's first name (required when lastName provided).
            example: John
          lastName:
            type: string
            maxLength: 255
            description: Shopper's last name (required when firstName provided).
            example: Smith
          organisationName:
            type: string
            maxLength: 255
            description: >-
              Shopper's organisation name (required when firstName and lastName
              not provided).
            example: Company
          ip:
            type: string
            format: ipv4 or ipv6
            description: >-
              Shopper's IP address - we use this for fraud prevention.  You can
              supply either ipv4 or v6 addresses as appropriate for your
              organisation.
            example: 122.118.64.13
        required:
          - reference
          - firstName
          - lastName
          - organisationName
      refund_available:
        title: Refund available
        type: object
        properties:
          refundAvailable:
            type: boolean
            example: true
            description: Whether a refund is currently available for this payment
          remainingDays:
            type: integer
            example: 365
            description: >-
              A refund can only be processed within the timeframe specified (in
              calendar days)
          availableAmount:
            type: integer
            example: 12345
            description: |
              The currently refundable amount, in 1/100 units (pence, cents etc)
          refundedAmount:
            type: integer
            example: 0
            description: |
              The amount already refunded, in 1/100 units (pence, cents etc)
          numberOfRefunds:
            type: integer
            example: 0
            description: |
              The number of refunds already processed for this payment
          message:
            type: string
            nullable: true
            example: null
            description: If a refund is available, this will be *null*
          code:
            type: string
            nullable: true
            example: null
            description: If a refund is available, this will be *null*
        x-stoplight:
          id: f0e39no82iw0j
      refund_unavailable:
        type: object
        title: Refund unavailable
        properties:
          refundAvailable:
            type: boolean
            description: Whether a refund is currently available for this payment
            example: false
          remainingDays:
            type: integer
            example: 365
            description: >-
              A refund can only be processed within the timeframe specified (in
              calendar days)
          availableAmount:
            type: integer
            example: 0
            description: |
              The currently refundable amount, in 1/100 units (pence, cents etc)
          refundedAmount:
            type: integer
            example: 12345
            description: |
              The amount already refunded, in 1/100 units (pence, cents etc)
          numberOfRefunds:
            type: integer
            example: 1
            description: |
              The number of refunds already processed for this payment
          message:
            type: string
            example: >-
              Payment with id: 93b85f3c-76eb-4316-b1ae-f3370ddc59bc has been fully
              refunded.
            description: Further details on why the refund is unavailable
          code:
            type: string
            example: PaymentRefundBalanceIsNotAvailable
            description: >-
              A unique code for the issue, useful for debugging.  Please quote if
              you're raising a support request.
        x-stoplight:
          id: q1sxvr6wu5yh6
      refund_request:
        type: object
        properties:
          amount:
            type: integer
            description: >
              For **full refunds**, you do not need to pass a value here.  If
              there's no value, a refund or the remaining refundable amount will
              automatically be actioned.


              For **partial refunds**, pass the amount to be refunded in 1/100
              units (pence, cents etc).
            example: 12345
            nullable: true
          externalReference:
            type: string
            format: AlphaNumeric
            description: The reference you want to use for this refund
            example: MyRefundReference
        x-stoplight:
          id: w0euo4qiu75y8
      payout_request:
        type: object
        properties:
          amount:
            type: integer
            description: The amount to be paid out, in 1/100 units (pence, cents etc).
            example: 12345
            nullable: true
          currency:
            maxLength: 3
            minLength: 3
            type: string
            description: >-
              Currency in which the payment should be made, in ISO 4217 format (3
              uppercase letters)
            example: EUR
          paymentTitle:
            type: string
            description: >-
              Payment reference to be used for the payout.  This will appear on
              the beneficiary's statement.
            example: Test Payout
          beneficiary:
            type: object
            properties:
              name:
                type: string
                description: Beneficiary name
                example: John Johnson
              accountNumber:
                type: string
                description: Domestic bank account number
                example: '12345678'
              sortCode:
                type: string
                description: UK sort code
                example: '123456'
              iban:
                type: string
                description: International Bank Account Number
                example: DK8389009999910135
              swiftBic:
                type: string
                description: Swift Code (BIC)
                example: SXPYDKKKXXX
                nullable: true
            oneOf:
              - required:
                  - sortCode
                  - accountNumber
                title: GBP to UK
                description: >
                  **GBP** - UK domestic payouts, account number and sort code
                  required
              - required:
                  - iban
                title: EUR SEPA
                description: |
                  **EUR** = SEPA payouts, only IBAN is required
              - required:
                  - iban
                  - swiftBic
                title: Other (IBAN)
                description: >
                  **Other currencies** - SWIFT payouts, if you have an IBAN and
                  Swift Code (BIC)
              - required:
                  - accountNumber
                  - swiftBic
                title: Other (Account number)
                description: >
                  **Other currencies** - SWIFT payouts, if you have an account
                  number and Swift Code (BIC)              
        x-stoplight:
          id: 1h55ugwry8dlq
      payout_list:
        type: array
        items:
          $ref: '#/components/schemas/payout_item'
        x-stoplight:
          id: k0pla0z95kzay
      payout_details:
        allOf:
          - $ref: '#/components/schemas/payout_item'
          - type: object
            properties:
              createdBy:
                type: object
                properties:
                  name:
                    type: string
                    example: Jack Jackson
        x-stoplight:
          id: vdll9bc6j9zj1
      payout_item:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: efffed42-40f7-4bd2-840d-908aae9a33ad
          status:
            type: string
            enum:
              - CREATED
            example: CREATED
          createdAt:
            type: string
            format: date-time
          amount:
            type: integer
            description: The amount to be paid out, in 1/100 units (pence, cents etc).
            example: 500
          currency:
            type: string
            description: >-
              Currency in which the payment should be made, in ISO 4217 format (3
              uppercase letters)
            example: EUR
          paymentTitle:
            type: string
            description: >-
              Payment reference to be used for the payout.  This will appear on
              the beneficiary's statement.
            example: Payout123456
          beneficiary:
            type: object
            description: Beneficiary bank account details
            properties:
              name:
                type: string
                description: Beneficiary name
                example: John Johnson
              accountNumber:
                type: string
                description: Domestic bank account number
                example: '12345678'
              sortCode:
                type: string
                description: UK sort code
                example: '404452'
              iban:
                type: string
                example: DK8389009999910135
              swiftBic:
                type: string
                example: SXPYDKKKXXX
          sender:
            type: object
            description: Your Connect account details
            properties:
              sortCode:
                type: string
                description: UK sort code
                example: '404777'
                nullable: true
              accountNumber:
                type: string
                description: Domestic bank account number
                example: '8765432'
                nullable: true
              iban:
                type: string
                description: International Bank Account Number
                example: DK8389009999910135
                nullable: true
              swiftBic:
                type: string
                description: Swift Code (BIC)
                example: SXPYDKKKXXX
                nullable: true
        x-stoplight:
          id: myjtevwpbktr0
      payout_beneficiary:
        type: object
        properties:
          name:
            type: string
            description: Beneficiary name
            example: John Johnson
            nullable: true
        x-stoplight:
          id: c491o8ideg6da
      payout_gbp_uk:
        title: GBP to UK
        description: |
          **GBP** - UK domestic payouts to an account number and sort code
        type: object
        properties:
          accountNumber:
            type: string
            description: Domestic bank account number
            example: '12345678'
          sortCode:
            type: string
            description: UK sort code
            example: '404452'
          iban:
            type: string
            nullable: true
            example: null
          swiftBic:
            type: string
            nullable: true
            example: null
        x-stoplight:
          id: lw9zjjrabjd5b
      payout_eur_sepa:
        title: EUR SEPA
        description: |
          **EUR** - SEPA payouts to an IBAN
        type: object
        properties:
          accountNumber:
            type: string
            nullable: true
            example: null
          sortCode:
            type: string
            nullable: true
            example: null
          iban:
            type: string
            example: DE8389009999910135
            description: International Bank Account Number
          swiftBic:
            type: string
            example: SXPYDKKKXXX
            description: Swift Code (BIC)
            nullable: true
        x-stoplight:
          id: s81tpd8mdvkzo
      payout_swift_iban:
        title: Other (IBAN)
        description: |
          **Other currencies** - SWIFT payouts to an IBAN and Swift Code (BIC)
        type: object
        properties:
          accountNumber:
            type: string
            nullable: true
            example: null
          sortCode:
            type: string
            nullable: true
            example: null
          iban:
            type: string
            example: DK8389009999910135
            description: International Bank Account Number
          swiftBic:
            type: string
            example: SXPYDKKKXXX
            description: Swift Code (BIC)
        x-stoplight:
          id: hh40veszh0lck
      payout_swift_other:
        title: Other (Account number)
        description: >
          **Other currencies** - SWIFT payouts to an account number and Swift Code
          (BIC)
        type: object
        properties:
          accountNumber:
            type: string
            description: Domestic bank account number
            example: '12345678'
          sortCode:
            type: string
            nullable: true
            example: null
          iban:
            type: string
            nullable: true
            example: null
          swiftBic:
            type: string
            example: SXPYDKKKXXX
            description: Swift Code (BIC)
        x-stoplight:
          id: 3u5kokv0svafy
      payout_approved:
        title: Fuzebox payout
        description: API payouts don't require approval
        allOf:
          - $ref: '#/components/schemas/payout_item'
          - type: object
            properties:
              approvals:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Robert Robertson
                    type:
                      type: string
                      enum:
                        - APPROVAL
                      example: APPROVAL
                    createdAt:
                      type: string
                      format: date-time
        x-stoplight:
          id: aplw2ht31u1v8
      report_requested:
        type: object
        properties:
          id:
            type: string
            format: uuid
          status:
            type: string
            enum:
              - REPORT_REQUESTED
              - REPORT_GENERATING
              - REPORT_AVAILABLE
              - REPORT_FAILED
              - REPORT_REMOVAL_REQUESTED
          createdAt:
            type: string
            format: date-time
        required:
          - id
          - status
          - createdAt
        examples:
          Example response:
            value:
              id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              status: REPORT_REQUESTED
              createdAt: '2023-10-01T18:32:00+00:00'
      report:
        title: report
        x-stoplight:
          id: 3xqsvork7dlvf
        type: object
        properties:
          id:
            type: string
            format: uuid
          type:
            type: string
          status:
            type: string
          createdAt:
            type: string
            format: date-time
          generatedAt:
            format: date-time
            type: string
            readOnly: true
        required:
          - id
          - type
          - status
          - createdAt
      validation_error_v1:
        title: validation_error_v1
        x-stoplight:
          id: jkwfcy9yjqepb
        type: object
        properties:
          exception:
            type: object
            properties:
              code:
                type: number
              message:
                type: string
              errorList:
                type: array
                items:
                  type: object
                  properties:
                    property:
                      type: string
                    message:
                      type: string
        description: Standard Volt validation error
        examples:
          - exception:
              code: 400
              message: Validation exception
              errorList:
                - property: propertyName
                  message: Error message
          - exception:
              code: 422
              message: Validation exception
              errorList:
                - property: propertyName
                  message: Error message
    securitySchemes:
      oauth:
        type: oauth2
        description: >-
          OAuth2 password grant - see the documentation in the oAuth2
          Authentication section
        flows:
          password:
            tokenUrl: /oauth
            scopes: {}
konfigCliVersion: 1.38.61
