publishJson:
  company: Currency Alliance
  serviceName: false
  sdkName: currency-alliance-{language}-sdk
  clientName: CurrencyAlliance
  metaDescription: >-
    Loyalty programs once worked miracles for customer engagement.


    But with a dizzying range of disjointed loyalty schemes from countless
    brands, the majority of customers now rarely earn enough points with any one
    brand to put them to good use.


    So, at the start of 2015, our team set out to create a new global loyalty
    ecosystem.


    We're helping customers and brands alike discover the elusive customer
    loyalty that had become lost among less frequent customers.


    We are accelerating the customer's journey to rewards by making it easier
    for them to earn and spend points with a wider range of brands.


    Brands, meanwhile, benefit from the insights of a larger network, and the
    tools needed to enable better experiences for their most loyal customers.


    And, more importantly, our partners can discover those less frequent
    customers who - with the right incentives - can become loyal advocates.
  apiStatusUrls: inherit
  homepage: www.currencyalliance.com/
  developerDocumentation: api.currencyalliance.com/api-docs/v3
  categories:
    - loyalty_programs
    - loyalty_partners
    - loyalty_partner_management
    - loyalty_platform
rawSpecString: |
  openapi: 3.0.0
  info:
    description: >
      # Introduction


      The Currency Alliance API facilitates various use cases for Loyalty
      Commerce. Our API allows our Partners to:
       - Manage Loyalty Currencies in the Cloud
       - Access Popular Loyalty Currencies from other Brands
       - Sell and Distribute your Loyalty Currency to Partners
       - Issue, Transfer, Redeem, or Exchange any loyalty currency via API
       - Pull Transaction History Details into 3rd Party Platforms
       - Enable the Exchange of Loyalty Currencies into Gift Cards and other Redemption Products in many fiat currencies
      To benefit from the Currency Alliance platform, you do not need to use all
      of these features. While there are many Endpoints for specific use cases,
      most Partners end up using only a few Endpoints.


      # Architecture

      The Currency Alliance API is organized around REST. Our API has predictable
      resource-oriented URLs, accepts JSON-encoded request bodies, returns
      JSON-encoded responses, and uses standard HTTP response codes,
      authentication, and verbs.


      Calls to the API have to be properly authenticated using your public and
      secret API keys. The keys are available in the 'CREDENTIALS' section of the
      "Loyalty API" module in the Management Dashboard. These keys MUST never be
      exposed to the public or any unauthorized person.


      The API is designed for a server to server communication. If you want to
      communicate with the API from a client it must be through a server
      environment, to protect the integrity of the requests and the API keys, and
      not expose them on front-end platforms.


      # Authentication

      The API authenticates every request based on two elements - Credential and
      Signature. Every request must include an `Authorization` header with the
      following two elements.

      `Credential=<public-key>, Signature=<calculated-signature>`


      ## Credential

      In this parameter, the API requires you to provide the `<public-key>` that
      is unique to your account. Your keys are available in the 'CREDENTIALS'
      section of the "Loyalty API" module in the Management Dashboard.


      ## Signature

      ### How is the Signature calculated?
        The signature is a [HMAC-SHA256](https://en.wikipedia.org/wiki/HMAC) hash in hexadecimal of the request content, using the `private_key` as the key.
        Keep in mind that the string you use to generate the signature and the string you send to the API has to be exactly the same. This includes newlines and spaces. If you compress the JSON body of your request, after generating the signature, the request will be rejected.

      ### POST/PUT/PATCH HTTP methods
        These types of requests use the string representation of the body to calculate the signature.

        For example, for the request with body: `{"foo": "bar"}` the signature calculated using `sec_12345` as the private key would be `4d84ba663b9c6179dd98023087da5baa8a4e3eb59ba45284935261350ba70742`

      ### GET HTTP method
        This type of request uses the query string to calculate the signature. Take into account that the "?" character must not be included while calculating the signature.

        For example, for the request with query string: `?foo=bar` the signature calculated using `sec_12345` as the private key would be `88d64dfcb542c35dc22bae059bd5f5a5d038572a7b391dfc4cd5f3a5530c1760` which is the hash for the string "foo=bar"

        To generate the signature of a GET request without any parameters, simply encode an empty string.

      # Security

      The API uses asymmetric cryptography to authenticate requests using the API
      keys we provide. This provides the following assurances:
        - **Requester identification:** Every request requires your public key to be sent, in conjunction with a signature generated with your secret key.
        - **Protection against man-in-the-middle (MITM) attacks:** The request signature is calculated using the body of the request, which means that any request that has been tampered with during the transport will be rejected by the Currency Alliance platform, since the signature received will not match the request contents.

      The API only supports requests over HTTPS.


      # Idempotency

      The API supports [idempotent](https://en.wikipedia.org/wiki/Idempotence)
      requests to safely retry requests without having to worry about doing the
      same operation more than once.

      For example, if there's a connection error generating a gift card, you can
      retry the request with the same idempotency key without having to worry
      about creating multiple gift cards.


      To send an idempotent request, include an additional `Idempotency-Key:
      <key>` header in the request. An Idempotency Key `<key>` is a unique
      identifier generated by the client with a length between 1 and 255
      characters. While this can be any type of unique key, we recommend a UUID to
      avoid collisions. An Idempotency key expires 8 hours after the initial
      request.


      In a repeated request the response will always have the response body of the
      original request, along with the same status and `400` errors, if any. The
      response will also include the header `Idempotency-Repeated: true`. In the
      rare instances where a request is repeated while the first one has not been
      completed yet, the API will respond with a `409 - Conflict` status.


      The API supports idempotency on POST and PATCH requests. Since GET, PUT and
      DELETE are idempotent by default, the `Idempotency-Key` header will be
      ignored.



      # Key fields

      Currency Alliance acts as a connectivity bridge between various partners
      using its standardized APIs and interface, hence, shielding each partner
      from the complexity, nuances, and customizations of hundreds of loyalty
      systems and merchant partners. However, the interacting partners need to
      have a common reference for a transaction in their own system for easy
      reconciliation as well as for customer support purposes.

      In this section, you will find information on some key fields and attributes
      that are used through our API and on different objects. This information
      will help you understand how to use these key fields.


      ## External Reference

      The field `external_reference` is used for each transaction request to
      provide a unique identifier from your system that can be used as a reference
      during the reconciliation process. This could be a GUID, internal
      transaction identifier, invoice number, booking number, itinerary number, or
      any other unique number in your system that can be used to uniquely identify
      the action. Even though this is not a required field, it is strongly
      recommended that you provide value in this field.


      ## Loyalty System Id

      The field `loyalty_system_id` is returned by our system on each transaction
      and it provides the unique identifier in the partner loyalty system. This ID
      is not generated by Currency Alliance but is provided by the partner loyalty
      program and hence could be used as a common field for reconciliation between
      your system and the partner's system.


      ## Loyalty System Data

      Sometimes, a loyalty program requires you to send some additional data to
      connect. For example, user_id, application_id, partner_code, etc. You will
      be able to provide the data in this field for all the transactions with the
      partner loyalty program. To check if and what additional data is required by
      the partner loyalty program, refer to the Partners Endpoint.



      # Common Use cases

      Our API can be used for numerous Loyalty Commerce use cases. Some of the
      most common use cases are mentioned below along with the information on
      which Endpoints to use for each use case. There are auxiliary Endpoints that
      could be used to enhance your integration and customer experience. For
      example, you could pull all transaction history out via the API into your
      Business Intelligence or data staging environments or you could validate the
      member details before issuing Loyalty Currency Units.


      ## Accrual/Issue/Top-up

      The underlying objective of this use case is to “give Loyalty Currency Units
      to a member” for one reason or another. The reason could be a purchase of a
      product, their birthday, completion of a survey, referral, customer service
      issue, etc. Furthermore, you may want to give the member units of your own
      Loyalty Currency or one of your Partners’ Loyalty Currency.


      You should use Accruals Endpoints for this use case. There are three
      Endpoints that can be used for issuing your or a Partner’s currency. You can
      use any one of the Endpoints or a combination of them to issue Loyalty
      Currency Units to the member.


      ### Direct Accruals

      This Endpoint is to be used when you know the exact number of Loyalty
      Currency Units to give to a member. In this scenario, you are calculating
      the number of Loyalty Currency Units in your environment and providing the
      exact number of units in the endpoint.


      ### Purchase Rules

      This Endpoint is to be used when you would like to give the number of
      Loyalty Currency Units based on Purchase Rule(s) defined in the Currency
      Alliance system. For example, giving points worth 1% of the fiat transaction
      amount. In this case, your application does not need to know how to
      calculate the number of Loyalty Currency Units or even the cost of the
      Loyalty Currency Units in any of your Partners' programs.


      ### Activity Rules

      This Endpoint is to be used when you would like to issue the number of
      Loyalty Currency Units based on pre-defined Activity Rule(s) in the system.
      For example, you might offer 200 points for posting a product review or
      referring a friend.


      ## Currency Exchange

      Our API provides tools for quick collaboration among brands to enable their
      respective members to exchange loyalty units between programs. The exchange
      could be one-way only, or both directions – in and out – of the programs.
      Use the Loyalty Currency Exchange Endpoints to implement this use case.
      There are 2 Endpoints that can be used to enable exchange between partners.


      ### Simulate an exchange

      This Endpoint allows you to simulate how many Loyalty Currency units the
      member would receive of a Partner’s Loyalty Currency in exchange. This can
      be used to show the member how many points in one or more programs they
      could get if completing the exchange.


      ### Execute an exchange

      This Endpoint allows you to comlete the exchange Loyalty Currency units to
      the Partner’s Loyalty Currency.


      **Tip:** You could use the Partners Endpoints to get the list of Exchange
      Partners and automatically display the fields required for each program to
      complete the exchange. This will be necessary for loyalty programs that
      require more member validation fields than just the membership number.


      ## Redemption/Pay with Points

      Our Redemption Endpoints have standardized the redemption process across
      various types of loyalty programs and underlying loyalty systems. This
      shields you from needing to understand the underlying complexity to
      integrate into a new loyalty system or modifying the existing integration
      for a different set of parameters for a new partner.


      You should use Standard Redemption Endpoints for this use case. There are
      four Endpoints that can be used for allowing a Partner’s Loyalty Currency as
      a form of payment. You can use any one of the Endpoints or a combination of
      them depending on your customer journey. Although not necessary, we highly
      recommend you use the  “Lookup a Member” Endpoint to validate if the member
      exists and if they have enough balance to complete the payment before
      submitting the payment transaction.


      Strictly speaking, Loyalty Exchange and Exchange for Gift Cards are also
      redemptions, but we provide explicit Endpoints for those actions due to the
      very high occurrence of those use cases in the industry. Standard
      Redemptions refers to any other redemptions where the Partners have allowed
      the member to redeem (exchange) their Loyalty Currency Units for your
      Products and Services. The products and services may range from flower
      delivery to booking a trip, buying an insurance plan, topping up their
      mobile plan, paying at a restaurant, buying concert tickets, or even
      applying points toward the purchase of a car.


      ### Simulate a Redemption

      To simulate the redemption action and provide information to the member such
      as the number of points required to complete the action, cancellation
      allowed, etc. without actually deducting the points from their balance or
      completing the transaction.


      ### Execute a Redemption

      Deduct points from the member’s account in exchange for the product or
      service offered.


      ### Adjust a Redemption

      If allowed by the Partner, you may use this Endpoint to notify of any
      modification in an already completed Redemption. The system will
      automatically identify if more points are to be redeemed or points are to be
      refunded to the member.


      ### Cancel a Redemption

      If allowed by the Partner, you may use this Endpoint to cancel an already
      completed Redemption to refund the points.
    version: '3.0'
    title: Currency Alliance API Documentation
  servers:
    - url: https://api.currencyalliance.com/public/v3.0
      description: Real environment
    - url: https://sandbox.api.currencyalliance.com/public/v3.0
      description: Sandbox environment
  tags:
    - name: Members
      description: >
        Member Endpoints can be used to create a new member, look up information
        on a member, retrieve a member's details to your system, or update any
        member's details. Only the Currency Owner i.e. the loyalty program to
        which the member belongs has access to create a member or update a member.


        The Partners could look up a member to confirm if the member exists, check
        the member account balance, or other details of the member record based on
        permissions granted by the Currency Owner.


        Currency Alliance has standardized these Endpoints and orchestrates the
        calls to various Loyalty programs to validate a member, get member
        details, etc. if the Currency Alliance platform is not the primary data
        store for the relevant loyalty program.


        ## The Member object

        The Member Object represents a member record. For the loyalty programs
        where Currency Alliance is not the primary data store for their members,
        the system will connect with the loyalty program system to fetch the
        member information and present it in the following format.

        <SchemaDefinition schemaRef="#/components/schemas/Member"
        showReadOnly={true} showWriteOnly={true} />
    - name: Transactions
      description: >
        All actions in the system that result in the movement of any Loyalty
        Currency are represented by a unique Transaction object. E.g. some of the
        actions are:

        - Creation of Loyalty Currency units

        - Purchase of partner's Loyalty Currency units

        - Issuance or transfer of Loyalty Currency to a member, partner, or other
        accounts

        - Exchange of Loyalty Currency units to another Loyalty Currency

        - Redemption of Loyalty Currency units to gift cards or other products


        Transaction Endpoints can be used to create a transaction, retrieve
        information of a transaction, all transactions of a member, or all
        transactions related to your account. These Endpoints can also be used to
        cancel or update a transaction.


        NOTE: Create a Transaction CANNOT be used to do accruals and redemptions,
        including Gift Cards and Currency Exchange. Use Accruals and Redemptions
        Endpoints for such actions; the system will automatically create the
        underlying required transaction.


        ## The Transaction object

        <SchemaDefinition schemaRef="#/components/schemas/Transaction"
        showReadOnly={true} showWriteOnly={true} />
    - name: Direct accruals
      description: >
        Direct Accruals Endpoint is to be used in the scenarios where you know in
        advance the exact number of loyalty currency units that are to be issued
        to a member and from which account if multiple accounts are available.
    - name: Purchase rules
      description: >
        The Purchase Endpoints allows you to simulate or execute a purchase rule
        to issue loyalty currency units to your members. The purchase loyalty
        rules can be defined in the following section in the Management Dashboard:


        Loyalty Rules > Purchase Rules
    - name: Activity rules
      description: >
        The Activities Endpoints allows you to simulate or execute an activity
        rule to issue loyalty currency units to your members. The activity loyalty
        rules can be defined in the following section in the Management Dashboard:


        Loyalty Rules > Activity Rules
    - name: Standard redemptions
      x-displayName: Standard
      description: >
        Redemptions are referred to as any action that allows the members to
        redeem the value of their Loyalty Currency Units in exchange for any
        product, services, or any other redemption options. Standard Redemption
        Endpoints provides a standardized way for you to allow members to redeem
        their Loyalty Currency Units for any type of product or service that is
        not a Gift Card or an Exchange into another loyalty program’s Loyalty
        Currency.


        Standard Redemptions are any redemptions where the Partners have allowed
        the member to redeem (exchange) their Loyalty Currency Units for your
        Products and Services. The products and services may range from flower
        delivery to booking a trip, buying an insurance plan, topping up their
        mobile plan, paying at a restaurant, buying concert tickets, or even
        applying points toward the purchase of a car.


        The Partners define in the Partnership Settings that the members can
        redeem their points in various product and service categories. Thus, it is
        very important that you provide information about the product and services
        in the request message. If you don’t have defined product categories and
        details, simply send “General” in the 'category' field.


        Some Partners may allow an option to cancel or modify the redemption. This
        information is provided in the response messages of the Endpoints for you
        to inform the member before completing the redemption.
    - name: Exchanges
      description: >
        The Exchange Endpoints enables you to allow your members to exchange their
        Loyalty Currency Units with your partners' Loyalty Currency Units. You can
        have a different Exchange Partnership with each Exchange Partner, where
        you could allow exchange IN or OUT of your currency. The exchange price
        and other settings are established during the Exchange Partnership set up
        in the Management Dashboard.


        Note that the currencies to be exchanged could be present in different
        regions and fiat currencies. Currency Alliance will do the currency
        conversion for the fiat currencies based on the mid-day exchange rate
        between the fiat currencies.
    - name: Gift cards
      description: >
        These Endpoints are used for redemption via Gift cards. These Endpoints
        could be used to retrieve a particular Gift Card, to retrieve a list of
        enabled Gift cards, to simulate an exchange of currency units for  a Gift
        card, to exchange currency units for a Gift card, or to redeem a custom
        Gift card. The gift card exchange feature for the loyalty currency must be
        enabled in the following section of the Management Dashboard:
          *Redemptions > Gift Card Management*

        There are two objects in the system that represent a Gift card - GiftCard
        Object and GiftCardCode Object. GiftCard Object represents the general
        characteristics of the Gift card whereas GiftCardCode Object represents
        the characteristics that are specific to the Gift card issued to a member.


        For example, if a currency owner enables Starbucks gift card through the
        Management Dashboard there will be a GiftCard Object in our system that
        would represent general details of Starbucks cards including the possible
        denominations of let's say $5, $10, $15, $25. When a member exchanges
        their points for a Starbucks gift card, the system will create a
        GiftCardCode object specific for that member with specific information
        such as the value of the Gift card ($5).


        ## The Gift Card object

        GiftCard Object represents a Gift card that could be used for redemption
        of Loyalty Currency units via Gift cards. It contains the details of the
        general characteristics of the Gift card. Note that it doesn't represent
        an issues/redeemed Gift card but only the general characteristics. Once a
        Gift card is issued GiftCardCode Object provides the details specific to
        the Gift card for the member. It has the following attributes:

        <SchemaDefinition schemaRef="#/components/schemas/GiftCard"
        showReadOnly={true} showWriteOnly={true} />


        ## The Gift Card Code object

        GiftCardCode Object represents the code details for the issued Gift card.
        It contains information specific to the Gift card issued to the member.
        For example, in general, Starbucks Gift cards could be of any one of
        denominations of $5, $10, $25, $50. This Object will provide the exact
        amount of the Gift card that was issued to the user. It has the following
        attributes:

        <SchemaDefinition schemaRef="#/components/schemas/GiftCardCode"
        showReadOnly={true} showWriteOnly={true} />
    - name: Partners
      description: >
        Partners Endpoints are used to retrieve information about Partners and
        specific Partnerships with those Partners. These Endpoints provide
        information such as Company Name, Logos, Loyalty Currency Information, the
        terms of the partnership(s), actions available, and the required fields
        for the actions available. This information can be used to drive different
        UX paths and to automate API calls.
    - name: Reports
    - name: Exchange Reports
      x-displayName: Exchanges
    - name: Cohorts
  x-tagGroups:
    - name: Core Resources
      tags:
        - Members
        - Transactions
    - name: Accruals
      tags:
        - Direct accruals
        - Purchase rules
        - Activity rules
    - name: Redemptions
      tags:
        - Standard redemptions
        - Exchanges
        - Gift cards
    - name: Partners
      tags:
        - Partners
    - name: Loyalty currencies
      tags:
        - Conversions
    - name: Reports
      tags:
        - Custom gift cards
        - Exchange Reports
    - name: Cohorts
      tags:
        - Cohorts
        - Cohort Accounts
        - Cohort Activities
        - Cohort Purchases
  paths:
    /accruals/standard:
      post:
        tags:
          - Direct accruals
        summary: Execute an accrual
        description: >
          This Endpoint allows you to create a standard direct accrual in the
          member’s account. This Endpoint will automatically create a transaction
          with type “Accrual” in the system.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccrualStandardCreateRequest'
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /accruals/purchase-rules/simulate:
      post:
        tags:
          - Purchase rules
        summary: Simulate a purchase
        description: >
          Simulates the rules to identify the number of Loyalty Currency Units to
          be given to the members based on the purchase of a product. This
          Endpoint is used in scenarios where one might want to show the user how
          many units of the Loyalty Currency will be given for a corresponding
          action. For example, if user buys a particular item then how many
          Currency units will be issued. This does not result in issuance of
          Currency units or execution of a transaction in the system, it is only a
          simulation.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRuleSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /accruals/purchase-rules/trigger:
      post:
        tags:
          - Purchase rules
        summary: Trigger a purchase
        description: >
          Trigger the loyalty rules matching the purchase from the specified
          member.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleTriggerResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /accruals/purchase-rules/executions/{id}:
      get:
        tags:
          - Purchase rules
        summary: Retrieve a purchase rule execution
        description: >
          This Endpoint allows you to retrieve information about a specific
          purchase rule execution.
        parameters:
          - $ref: '#/components/parameters/purchase_rule_execution_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleExecution'
          '404':
            description: ''
    /accruals/purchase-rules/executions/{id}/retrigger:
      post:
        tags:
          - Purchase rules
        summary: Retrigger a purchase rule execution
        description: >
          This Endpoint allows you to retrigger purchase rule(s) if the purchase
          order in your system has been updated. This is only available if the
          original transaction is in `pending` status.

          An example where this Endpoint is used is when points are issued to a
          member for a hotel booking but it is pending for a future date. Before
          the future date is reached, if the member changes the underlying hotel
          booking, this endpoint would retrigger the purchase rules based on the
          new booking information.
        parameters:
          - $ref: '#/components/parameters/purchase_rule_execution_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRuleExecutionRetriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleExecution'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          '404':
            description: ''
    /accruals/purchase-rules/executions/{id}/cancel:
      post:
        tags:
          - Purchase rules
        summary: Cancel a purchase rule execution
        description: >
          This Endpoint allows you to cancel the transaction(s) made previously
          during the execution of purchase rule(s). This is only available if the
          original transaction is in `pending` status.

          An example where this Endpoint is used is when points are issued to a
          member for a hotel booking but it is pending for a future date. Before
          the future date is reached, if the member cancels the underlying hotel
          booking, this endpoint would cancel the pending transaction(s).
        parameters:
          - $ref: '#/components/parameters/purchase_rule_execution_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleExecution'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
          '404':
            description: ''
    /accruals/activity-rules/simulate:
      post:
        tags:
          - Activity rules
        summary: Simulate an activity rule
        description: >
          Simulates an execution of an activity rule for the specified Loyalty
          Currency. This Endpoint is used in scenarios where one might want to
          show the user how many units of the Loyalty Currency will be given based
          on certain activity. For example, if user buys a particular item and
          shares it on social media then how many Currency units will be provided
          for that activity. This does not result in issuance of Currency units or
          execution of a transaction in the system, it is only a simulation.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRuleSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ActivityRuleSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /accruals/activity-rules/trigger:
      post:
        tags:
          - Activity rules
        summary: Trigger an activity rule
        description: |
          Trigger activity rules for the specified Loyalty Currency.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ActivityRuleTriggerResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /exchanges/simulate:
      post:
        tags:
          - Exchanges
        summary: Simulate currency exchange
        description: >
          This Endpoint is typically used in scenarios where you'd want to show to
          your member that how many units of other currency they would get in
          exchange for your Loyalty Currency Units or vice versa. For example, if
          you allow a user to select the number of units of your Loyalty Currency
          to exchange with your partner's Loyalty Currency, you can use this
          Endpoint to dynamically show how many units of your partner's Loyalty
          Currency will be provided to the user for the selected number.


          You can send a specific Loyalty Currency as a destination to identify
          the number of units of that specific Loyalty Currency. Or you could send
          the destination Loyalty Currency as null and the system will return the
          array with the exchange result for all the Exchange Partners’ Loyalty
          Currencies.


          Note that the member information is not mandatory but is highly
          recommended to be input as the exchange price/cost might be dependent on
          the member attributes.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /exchanges/execute:
      post:
        tags:
          - Exchanges
        summary: Execute currency exchange
        description: >
          This Endpoint is used to exchange Loyalty Currency Units with your
          partner’s Loyalty Currency Units. The prerequisite is that an Exchange
          Partnership is already established in the Management Dashboard and the
          price is set up accordingly. This Endpoint will automatically create two
          transactions with type "Member Exchange" in the system.


          - Origin Member to the Partner account using the origin Loyalty Currency

          - Partner account using the destination Loyalty Currency to the
          destination member


          DO NOT USE the "Create a transaction" Endpoint to try to execute this
          scenario.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /exchanges/linked-account-simulate:
      post:
        tags:
          - Exchanges
        summary: Simulate linked account currency exchange
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeLinkedAccountSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeLinkedAccountSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /exchanges/linked-account-execute:
      post:
        tags:
          - Exchanges
        summary: Execute linked account currency exchange
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeLinkedAccountRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeLinkedAccountResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /members:
      post:
        tags:
          - Members
        summary: Create a member
        description: >
          This Endpoint is only accessible by Currency Owners to create a member
          record if Currency Alliance is the main points bank i.e. the single
          source of truth for the loyalty program.


          Each member object is associated with one loyalty currency. Thus, the
          same person associated with two different loyalty programs would have
          two member objects, each with a different corresponding
          loyalty_program_identifiers and loyalty_currency.


          An important attribute is returned in all successful responses -
          `loyalty_program_identifiers`, which is a unique internal identifier for
          a member object across the entire Currency Alliance platform.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberCreateRequest'
        responses:
          '200':
            description: >-
              A member matching the received loyalty program identifiers was
              found, existing information is returned.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Member'
          '201':
            description: The member has been created
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/Member'
                    - $ref: '#/components/schemas/MemberTypeCompany'
      patch:
        tags:
          - Members
        summary: Update a member
        description: >
          This Endpoint allows you to update the information of an existing
          member. This Endpoint is only accessible by Currency Owners to update a
          member record in Currency Alliance.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/Member'
                    - $ref: '#/components/schemas/MemberTypeCompany'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /members/lookup:
      post:
        tags:
          - Members
        summary: Lookup a member
        description: >
          This Endpoint allows you to validate a member and get member details
          including balance and tier if provided access by the Currency Owner.
          Where Currency Alliance is not the Main Points Bank, the system will
          call the Loyalty Program to validate if the member exists, conditional
          upon if this option is available from the Currency Owner.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberLookupRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/Member'
                    - $ref: '#/components/schemas/MemberTypeCompany'
          '404':
            description: ''
    /loyalty-currencies/fiat-convert:
      post:
        tags:
          - Conversions
        summary: Convert fiat to loyalty currency
        description: >
          This Endpoint is used to convert any fiat currency into a loyalty
          currency. If the underlying fiat currency of the loyalty currency is
          different than the requested fiat currency, Currency Alliance will do
          the currency conversion for the fiat currencies based on the mid-day
          exchange rate.


          An example scenario where this Endpoint is used is when an Issuing
          Partner may want to offer Currency units worth a specific amount of
          economic value to a member, but they don´t know how many units of a
          destination currency can be obtained for that amount of fiat currency. 
          For example, if a partner wants to give 2.43€ worth of value, they can
          submit that amount via this Endpoint with the desired destination
          currency and obtain the maximum number of units in that destination
          currency that can be obtained with 2.43€
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCurrencyConversionRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoyaltyCurrencyConversionResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/standard/simulate:
      post:
        tags:
          - Standard redemptions
        summary: Simulate a redemption
        description: >
          This Endpoint is used in scenarios where one might want to simulate the
          redemption of Loyalty Currency Units for a product or a service without
          actually completing the transaction. This can be used to show a member
          how much it would cost in points for the products or services. For
          example, if a member would like to redeem points for a hotel booking,
          cab ride, shoe purchase, spa treatment, or any other product/service,
          this Endpoint would be used to calculate how many Loyalty Currency Units
          would be required as a form of payment for the product/service.


          You can send a list of products and services along with the amount or
          the price to identify the Loyalty Currency Units required to be redeemed
          for each type of product or service. The amount, or the price, can be
          provided either in units in the field "loyalty_amount" or in fiat
          currency in the field "fiat_amount". It is highly advisable to send the
          information as well as the member information as the redemption value
          per Loyalty Currency Unit may depend on any of these factors. For
          example, a Gold member may require a fewer number of Loyalty Currency
          Units than a Bronze member to redeem in exchange for a hotel booking
          whereas booking a cab ride may not depend on the member tier.


          The response will contain the total amount in fiat currency and total
          number of Loyalty Currency Units required for this redemption. If the
          member information is sent then the response will also provide
          additional information such as their available balance in Loyalty
          Currency Units and fiat value of those Loyalty Currency Units for
          General product if the member does not have sufficient balance to
          complete this redemption. Additional information in the response would
          be whether the Currency Owner allows adjustments and cancellations of
          Redemptions or not.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardRedemptionSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StandardRedemptionSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/standard:
      post:
        tags:
          - Standard redemptions
        summary: Execute a redemption
        description: >
          This Endpoint is used to complete the exchange of Loyalty Currency Units
          for a product or a service. This Endpoint will automatically create a
          transaction with type "Redemption" in the system.


          It is mandatory to provide the information regarding the product or the
          service as the redemption value per Loyalty Currency Unit may depend on
          any of these factors. For example, a Gold member may require fewer
          number of Loyalty Currency Units than a Bronze member to redeem in
          exchange for a product. If you are not sure of the product category,
          then send "General" as the default option.The amount can be provided
          either in units in the field "loyalty_amount" or in fiat currency in the
          field "fiat_amount".


          The response will contain the total amount in fiat currency and total
          number of Loyalty Currency Units required for this redemption. The
          response will also provide additional information such as whether the
          Currency Owner allows adjustments and cancellations of Redemptions or
          not.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardRedemptionRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StandardRedemptionResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/standard/adjust:
      post:
        tags:
          - Standard redemptions
        summary: Adjust a redemption
        description: >
          Some Currency Owners may allow for adjustments or even a full refund on
          an existing Redemption. This Endpoint is used to adjust or modify an
          already made redemption. For example, if there is a change in redemption
          product or invoice where the customer has added or removed some products
          or the quantity, thus, resulting in a different fiat_amount, this
          Endpoint will be used to reflect the new state of the redemption and
          refund/redeem points accordingly.


          The input request structure remains the same as "Execute a Redemption".
          You should send all the information regarding the products or the
          services as per the new updated redemption including the products and
          services that have not been changed. The system will automatically
          identify the changes and make adjustments accordingly.


          This Endpoint will update the status of the original Redemption
          transaction as "Adjusted" and will create a new transaction of type
          "Redemption" and sub-type "Adjustment".
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustRedemptionRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AdjustRedemptionResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/standard/cancel:
      post:
        tags:
          - Standard redemptions
        summary: Cancel a redemption
        description: >
          This Endpoint allows you to cancel a specific Redemption. A Redemption
          can only be canceled if the Currency Owner allows such an action.
          Simulate a Redemption provides the information whether the cancellation
          is allowed or not.


          This Endpoint will update the status of the original Redemption
          transaction as "Cancelled" and will create a new transaction of type
          "Redemption" and sub-type "Cancellation".
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelRedemptionRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CancelRedemptionResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards:
      get:
        tags:
          - Gift cards
        summary: Retrieve the list of enabled gift cards
        description: >
          This Endpoint can be used to retrieve the list of gift cards that have
          been enabled in the following Management Dashboard section:


          *Redemptions > Gift Card Management*
        parameters:
          - name: country
            in: query
            schema:
              type: string
              format: >-
                [ISO 3166-1
                alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) of the
                countries
            required: false
            example: USA
          - name: fiat_currency
            in: query
            schema:
              type: string
              format: >-
                [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the
                fiat currency
            required: false
            example: EUR
          - name: gift_card_type
            in: query
            schema:
              type: string
              enum:
                - discount
                - fixed_value
                - other
            required: false
            example: fixed_value
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardList'
    /redemptions/gift-cards/{id}:
      get:
        tags:
          - Gift cards
        summary: Retrieve a gift card
        description: >
          Returns the general characteristics and details of the specified gift
          card.

          The Gift card exchange feature for the loyalty currency must be enabled
          in the below mentioned section of the Management Dashboard to be able to
          retrieve information about the Gift card.


          *Redemptions > Gift Card Management*
        parameters:
          - $ref: '#/components/parameters/gift_card_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCard'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/{id}/simulate:
      post:
        tags:
          - Gift cards
        summary: Simulate a gift card exchange
        description: >
          This Endpoint is used in scenarios where one might want to simulate an
          exchange of Loyalty currency units for a Gift card without actually
          issuing the Gift card. For example, if a member wants to know how many
          Loyalty Currency units would be required to exchange for a $5 Starbucks
          card. This does not result in issuance of a Gift card. The amount can be
          provided either in units in the field "amount" or in fiat currency in
          the field "fiat_amount".


          The Gift card exchange feature for the loyalty currency must be enabled
          in the following section of the Management Dashboard:


          *My Currencies > My Own Currency > Settings > Exchange to Gift Cards*
        parameters:
          - $ref: '#/components/parameters/gift_card_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardSimulationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/{id}/issue:
      post:
        tags:
          - Gift cards
        summary: Exchange loyalty currency units for gift cards
        description: >
          This Endpoint is used to exchange Loyalty currency units for a Gift
          card. This Endpoint results in issuance of a Gift card. The amount can
          be provided either in units in the field "loyalty_amount" or in fiat
          currency in the field "gift_card_amount".


          The Gift card issue feature for the loyalty currency must be enabled in
          the following section of the Management Dashboard:


          *My Currencies > My Own Currency > Settings > Exchange to Gift Cards*
        parameters:
          - $ref: '#/components/parameters/gift_card_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardIssuanceRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardIssuanceResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/{id}/direct-issue:
      post:
        tags:
          - Gift cards
        summary: Direct issue a gift card code
        description: ''
        parameters:
          - $ref: '#/components/parameters/gift_card_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardDirectIssuanceRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardDirectIssuanceResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/codes:
      post:
        tags:
          - Gift cards
        summary: Retrieve an issued gift card code
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardCodeViewRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardCode'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/custom/validate:
      post:
        tags:
          - Gift cards
        summary: Validate a custom gift card code
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardCodeValidationRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardCodeValidationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/custom/redeem:
      post:
        tags:
          - Gift cards
        summary: Redeem a custom gift card code
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardCodeRedemptionRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardCodeRedemptionResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /redemptions/gift-cards/custom/cancel:
      post:
        tags:
          - Gift cards
        summary: Cancel a custom gift card code
        description: ''
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardCodeCancelRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GiftCardCodeCancelResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /members/transactions:
      post:
        tags:
          - Transactions
        summary: List a member's transactions
        description: >-
          This Endpoint allows you to retrieve the details of all the transactions
          of the specified member. To retrieve information about a specific
          transaction, use 'Retrieve a transaction' Endpoint.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/created_at__range'
          - $ref: '#/components/parameters/transaction_status'
          - $ref: '#/components/parameters/transaction_type'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionMemberListRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TransactionList'
    /transactions:
      get:
        tags:
          - Transactions
        summary: List transactions
        description: >-
          This Endpoint allows you to retrieve the details of all the
          transactions. To retrieve information about a specific transaction, use
          'Retrieve a transaction' Endpoint.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/created_at__range'
          - $ref: '#/components/parameters/transaction_status'
          - $ref: '#/components/parameters/transaction_type'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TransactionList'
      post:
        tags:
          - Transactions
        summary: Create a transaction
        description: >
          This Endpoint allows you to create a transaction in the system. This
          Endpoint should ONLY be used for transaction types of "transfer" such as
          from a member to another member, from one partner account to another
          partner account, or transfer between your own accounts. This Endpoint
          should NOT be used for issuing Currency to members, exchanging loyalty
          currencies, redeeming Gift Cards, or other redemptions. Relevant
          Endpoints (Accruals and Redemptions) should be used for the
          corresponding use cases.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCreateRequest'
        responses:
          '201':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /transactions/{id}:
      get:
        tags:
          - Transactions
        summary: Retrieve a transaction.
        description: >-
          This Endpoint allows you to retrieve the details of a specific
          transaction.
        parameters:
          - $ref: '#/components/parameters/transaction_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
      patch:
        tags:
          - Transactions
        summary: Update a transaction
        description: >
          This Endpoint allows you to update the details of a specific
          transaction. A transaction can only be updated if its status is pending
          and the update is requested either by the owner of the origin account of
          the transaction or the creator of the transaction.


          NOTE: Use the "Adjust a Redemption" Endpoint to refund or modify a
          Redemption transaction, if permitted by the Currency Owner.
        parameters:
          - $ref: '#/components/parameters/transaction_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /transactions/{id}/cancel:
      post:
        tags:
          - Transactions
        summary: Cancel a transaction
        description: >
          This Endpoint allows you to cancel a specific transaction. A transaction
          can only be canceled if its status is pending and the cancellation is
          requested either by the owner of the origin account of the transaction
          or the creator of the transaction.


          NOTE: Use the "Adjust a Redemption" Endpoint to refund or modify a
          Redemption transaction, if permitted by the Currency Owner.
        parameters:
          - $ref: '#/components/parameters/transaction_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Transaction'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /partners:
      get:
        tags:
          - Partners
        summary: List all partners
        description: >-
          This Endpoint will be used to either get the list of all the Partners or
          details about a specific Partner. This Endpoint provides a Partner
          overview without providing the details of each type of Partnership that
          you may have with each Partner. The response provides information such
          as Partner ID, Company Name, Logo, Loyalty Currency Information, and
          what type of Partnerships are active. The Endpoint has two input
          parameters, both optional. Provide a value in either one of the fields
          if you want to retrieve information about a specific Partner. If no
          value is provided in either parameter, the system will return a list of
          all the active partners.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnersListResponse'
    /partners/exchange-in:
      get:
        tags:
          - Partners
        summary: List exchange in partners
        description: >
          This Endpoint is used to either get the list of the Exchange In Partners
          or details about a specific Exchange In Partner. This Endpoint provides
          the details of the partners who can Exchange IN to my currency. The
          response provides information such as Partner ID, Company Name, Logo,
          Loyalty Currency Information, and Partnership details including minimum
          and maximum transaction size, actions available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeInPartnersListResponse'
    /partners/exchange-out:
      get:
        tags:
          - Partners
        summary: List exchange out partners
        description: >
          This Endpoint is used to either get the list of the Exchange Out
          Partners or details about a specific Exchange Out Partner. This Endpoint
          provides the details of the partners where I can Exchange OUT from my
          currency to their currency. The response provides information such as
          Partner ID, Company Name, Logo, Loyalty Currency Information, and
          Partnership details including minimum and maximum transaction size,
          actions available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
          - $ref: '#/components/parameters/partners_language_display'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExchangeOutPartnersListResponse'
    /partners/issuing:
      get:
        tags:
          - Partners
        summary: List issuing partners
        description: >
          This Endpoint is used to either get the list of all the Issuing Partners
          or details about a specific Issuing Partner that is issuing your Loyalty
          Currency. This Endpoint provides the details of the Issuing Partnership
          with each Partner. The response provides information such as Partner ID,
          Company Name, Logo, and Partnership details including minimum and
          maximum transaction size, actions available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners. Generally, Issuing
          Partners will not have their own Loyalty Currency, hence, send the value
          in the Partner ID input parameter in that case.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IssuingPartnersListResponse'
    /partners/redemption:
      get:
        tags:
          - Partners
        summary: List redemption partners
        description: >
          This Endpoint is used to either get the list of all the Redemption
          Partners or details about a specific Redemption Partner that is
          accepting your Loyalty Currency as a mode of payment or redemption for
          its products or services. This Endpoint provides the details of the
          Redemption Partnership with each Partner. The response provides
          information such as Partner ID, Company Name, Logo, and Partnership
          details including minimum and maximum transaction size, actions
          available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners. Generally,
          Redemption Partners will not have their own Loyalty Currency, hence,
          send the value in the Partner ID input parameter in that case.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RedemptionPartnersListResponse'
    /partners/currency-owners-for-redemption:
      get:
        tags:
          - Partners
        summary: List currency owners for redemption partners
        description: >
          This Endpoint is used to either get the list of all the Currency Owner
          Partners or details about a specific Redemption Currency Owner Partner
          for redemption i.e. the Currency Owner(s) whose Loyalty Currency you are
          accepting as payment in exchange for your products or services. This
          Endpoint provides the details of the Redemption Currency Partnership
          with each Partner. The response provides information such as Partner ID,
          Company Name, Logo, Loyalty Currency Information, and Partnership
          details including minimum and maximum transaction size, actions
          available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
          - $ref: '#/components/parameters/partners_language_display'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RedemptionCurrencyPartnersListResponse'
    /partners/currency-owners-for-issuance:
      get:
        tags:
          - Partners
        summary: List currency owners for issuing partners
        description: >
          This Endpoint will be used to either get the list of all the Currency
          Owner Partners or details about a specific Currency Owner Partner for
          issuance i.e. the Currency Owner whose Loyalty Currency you are issuing
          to its members. This Endpoint provides the details of the Issuance
          Currency Partnership with each Partner. The response provides
          information such as Partner ID, Company Name, Logo, Loyalty Currency
          Information, and Partnership details including minimum and maximum
          transaction size, actions available, fields required, etc.


          The Endpoint has two input parameters, both optional. Provide a value in
          either one of the fields if you want to retrieve information about a
          specific Partner. If no value is provided in either parameter, the
          system will return a list of all the active partners.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/partners_partner_id'
          - $ref: '#/components/parameters/loyalty_currency'
          - $ref: '#/components/parameters/partners_language_display'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/IssuanceCurrencyPartnersListResponse'
    /partners/<api_identifier>/data/<field_name>:
      get:
        tags:
          - Partners
        summary: List Partner Custom Data
        description: ''
        parameters:
          - in: path
            name: api_identifier
            schema:
              type: string
            required: true
            description: Partner's api identifier
          - in: path
            name: field_name
            schema:
              type: string
            required: true
            description: Data field name
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PartnerDataListResponse'
    /reports/exchanges:
      get:
        tags:
          - Exchange Reports
        summary: Retrieve Currency Exchange Report
        description: >-
          Retrieve the csv report of the exchange out transactions done by members
          during a specified time duration. Use the List Transactions endpoint for
          the report in the standard JSON format.
        parameters:
          - $ref: '#/components/parameters/created_at__range'
        responses:
          '200':
            description: ''
            content:
              text/csv:
                schema:
                  $ref: '#/components/schemas/ReportExchangeListResponse'
                example: >
                  created_at,destination_amount,destination_loyalty_currency,destination_id,destination_member,external_reference,origin_amount,origin_loyalty_currency,origin_id,origin_member

                  2019-03-04T11:50:03+0000,10,EXAMPLE_POINTS,tx_abcd1234,M12334532,foo,20,EXAMPLE_POINTS,tx_abcd1234,M12334532
    /reports/gift-cards/custom:
      get:
        tags:
          - Custom gift cards
        summary: List issued custom gift card codes
        description: >-
          This Endpoint is used to retrieve information about gift card codes that
          have been issued to partner loyalty programs. This only returns the
          information of the custom gift cards for which you have provided the
          gift card codes in advance to the Currency Alliance system.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
          - $ref: '#/components/parameters/created_at__range'
          - $ref: '#/components/parameters/reports_gift_card_id'
          - $ref: '#/components/parameters/fiat_currency'
          - $ref: '#/components/parameters/loyalty_currency'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportCustomGiftCardListResponse'
    /reports/gift-cards/custom/inventory:
      get:
        tags:
          - Custom gift cards
        summary: List custom gift card inventory
        description: >-
          This Endpoint is used to retrieve the inventory status of gift card
          codes of all the custom gift cards for which you have provided the gift
          card codes in advance to the Currency Alliance system.
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportCustomGiftCardInventoryListResponse'
    /reports/gift-cards/custom/{id}/inventory:
      get:
        tags:
          - Custom gift cards
        summary: Retrieve a custom gift card inventory
        description: >-
          This Endpoint is used to retrieve the inventory status of gift card
          codes of a specific custom gift card for which you have provided the
          gift card codes in advance to the Currency Alliance system.
        parameters:
          - $ref: '#/components/parameters/gift_card_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ReportCustomGiftCardInventory'
    /cohorts:
      get:
        tags:
          - Cohorts
        summary: List cohorts
        description: Retrieve cohorts.
        parameters:
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CohortList'
      post:
        tags:
          - Cohorts
        summary: Create a cohort
        description: >-
          Create a cohort. This feature is only available for Loyalty Currency
          owners.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortCreateUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Cohort'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}:
      get:
        tags:
          - Cohorts
        summary: Retrieve a cohort.
        description: Retrieve the specified Cohort.
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Cohort'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
      patch:
        tags:
          - Cohorts
        summary: Update a cohort
        description: |
          Updates the information of an existing cohort.
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortCreateUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Cohort'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}/loyalty-rules/purchases:
      get:
        tags:
          - Cohort Purchases
        summary: List a cohort's purchase loyalty rules
        description: List a cohort's purchase loyalty rules
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CohortPurchaseRuleList'
    /cohorts/{cohort_id}/loyalty-rules/purchases/{rule_id}:
      patch:
        tags:
          - Cohort Purchases
        summary: Update a cohort's purchase loyalty rule
        description: ''
        parameters:
          - $ref: '#/components/parameters/cohort_id'
          - $ref: '#/components/parameters/rule_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortPurchaseRuleUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CohortPurchaseRule'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /loyalty-rules/{cohort_id}/purchases/simulate:
      post:
        tags:
          - Cohort Purchases
        summary: Simulate a purchase
        description: >
          Simulates the execution of the enabled cohort loyalty rules matching the
          purchase from the specified member.


          The purchase loyalty rules can be defined at the following section:
            *Loyalty Rules > Purchase Rules*
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleSimulationResponse'
          '400':
            $ref: '#/components/schemas/GenericError'
    /loyalty-rules/{cohort_id}/purchases/execute:
      post:
        tags:
          - Cohort Purchases
        summary: Execute a purchase
        description: >
          Executes the enabled cohort loyalty rules matching the purchase from the
          specified member.


          The purchase loyalty rules can be defined at the following section:
            *Loyalty Rules > Purchase Rules*
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PurchaseRuleExecution'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}/loyalty-rules/activities:
      get:
        tags:
          - Cohort Activities
        summary: List a cohort's activity loyalty rules
        description: List a cohort's activity loyalty rules
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CohortActivityRuleList'
    /cohorts/{cohort_id}/loyalty-rules/activities/{rule_id}:
      patch:
        tags:
          - Cohort Activities
        summary: Update a cohort's activity loyalty rule
        description: ''
        parameters:
          - $ref: '#/components/parameters/cohort_id'
          - $ref: '#/components/parameters/rule_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortActivityRuleUpdateRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CohortActivityRule'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}/loyalty-rules/activities/simulate:
      post:
        tags:
          - Cohort Activities
        summary: Simulate an activity rule execution
        description: >
          Simulates the execution of the enabled cohort activity loyalty rules
          matching the received activity identifier.


          The purchase loyalty rules can be defined at the following section:
            *Loyalty Rules > Activity Rules*
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ActivityRuleSimulationResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}/loyalty-rules/activities/execute:
      post:
        tags:
          - Cohort Activities
        summary: Execute an activity rule
        description: >
          Executes the enabled cohort activity loyalty rules matching the received
          activity identifier.


          The purchase loyalty rules can be defined at the following section:
            *Loyalty Rules > Activity Rules*
        parameters:
          - $ref: '#/components/parameters/cohort_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRuleTriggerRequest'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ActivityRuleTriggerResponse'
          '400':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GenericError'
    /cohorts/{cohort_id}/accounts:
      get:
        tags:
          - Cohort Accounts
        summary: List a cohort's accounts
        description: Retrieve the accounts of the specified cohort
        parameters:
          - $ref: '#/components/parameters/cohort_id'
          - $ref: '#/components/parameters/page_number'
          - $ref: '#/components/parameters/page_size'
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DeprecatedAccountList'
  components:
    schemas:
      Account:
        type: object
        description: Represents an account in the system.
        properties:
          id:
            type: string
            description: Unique internal identifier generated by the system for each account.
            example: acc_abc123
          owner:
            type: object
            properties:
              id:
                type: string
                example: mp_abc123
              type:
                type: string
                enum:
                  - partner
                  - member
                example: partner
      AccrualStandardCreateRequest:
        type: object
        required:
          - amount
          - loyalty_currency
          - member
          - origin
        properties:
          amount:
            type: integer
            description: The transaction amount in units of the Loyalty Currency
            example: 1000
          bonus:
            type: boolean
            description: Indicates whether the transaction is in bonus points.
            default: false
            example: false
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          loyalty_currency:
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            type: string
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          origin:
            description: >
              The origin for the accrual i.e. who is issuing or providing the
              loyalty currency units. You can either send the Account ID or you
              can send the Partner ID in this field. In the latter case, the
              system will automatically select the default account associated with
              the Partner ID.
            oneOf:
              - type: string
                title: Account id
                description: >-
                  Account ID can be found in the Management Dashboard screen
                  'Account Settings' > 'About My Company' > 'Accounts'.
                example: acc_abcd1234
              - type: string
                title: Partner id
                description: >-
                  This can be found in the Management Dashboard screen ‘Loyalty
                  API’ > ‘Credentials’ for your own currency, or in the response
                  of the Endpoints to obtain Partners' information for Partner
                  loyalty currency.
                example: part_abcd1234
          reason:
            type: string
            description: >-
              Textual description for why the transaction was created. This text
              is presented to the origin and destination account holders in their
              transaction history. While any string length is accepted, 26
              characters or less is typically optimal to explain to the member in
              their transaction history why this transaction was created.
            example: Christmas bonus
          reason_code:
            $ref: '#/components/schemas/TransactionFieldReasonCode'
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight. The transaction will be created with
              the status as "pending" and it can be updated or cancelled until the
              release date. Values with seconds are accepted but will be truncated
              to the minute.
            format: ISO 8601
            example: 2020-10-10T12:12
      ExchangeRequest:
        type: object
        required:
          - amount
          - destination_loyalty_currency
          - destination_member
          - origin_member
          - origin_loyalty_currency
        properties:
          amount:
            type: integer
            description: Number of origin currency units to be exchanged.
            example: 500
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          destination_loyalty_currency:
            type: string
            description: >-
              The Currency Identifier of the Destination Loyalty Currency. This is
              a unique shortcode Currency Identifier assigned to each currency; it
              can be found in the 'My Currency' section under 'About My Currency'
              screen in the Management Dashboard. For the Currency Identifier for
              your partners' currencies refer to the 'My Partners' section in the
              Management Dashboard.
            example: TCC
          destination_member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          origin_loyalty_currency:
            type: string
            description: The Currency Identifier of the Origin Loyalty Currency.
            example: TSS
          origin_member:
            $ref: '#/components/schemas/MemberIdentifiersField'
      ExchangeResponse:
        type: object
        properties:
          origin_transaction:
            $ref: '#/components/schemas/Transaction'
          destination_transaction:
            $ref: '#/components/schemas/Transaction'
      ExchangeLinkedAccountRequest:
        oneOf:
          - type: object
            title: Exchange out
            required:
              - amount
              - destination_loyalty_currency
              - origin_member
            properties:
              amount:
                type: integer
                description: Number of origin currency units to be exchanged.
                example: 500
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              destination_loyalty_currency:
                type: string
                description: >
                  To be provided while Exchanging OUT from the partner loyalty
                  program.


                  The Currency Alliance system will automatically identify the
                  member details in the partner program based on the account
                  linked to your member’s account.


                  Loyalty Currency Identifier of the linked Partner Loyalty
                  program. This is a unique shortcode Currency Identifier assigned
                  to each currency; it can be found in the 'My Currency' section
                  under 'About My Currency' screen in the Management Dashboard.
                  For the Currency Identifier for your partners' currencies refer
                  to the 'My Partnerships' section in the Management Dashboard.
                example: TCC
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              origin_member:
                type: object
                description: >
                  To be provided while Exchanging OUT from the partner loyalty
                  program.


                  This is the member identifier in your loyalty program from which
                  the points/miles are to be redeemed. The Currency Alliance
                  system will fetch the partner loyalty program account linked to
                  this member account.
                example:
                  id: M12334532
          - type: object
            title: Exchange in
            required:
              - amount
              - destination_member
              - origin_loyalty_currency
            properties:
              amount:
                type: integer
                description: Number of origin currency units to be exchanged.
                example: 500
              destination_member:
                type: object
                description: >
                  To be provided while Exchanging IN from the partner loyalty
                  program.


                  This is the member identifier in your loyalty program to which
                  the exchanged points/miles are to be awarded. The Currency
                  Alliance system will fetch the partner loyalty program account
                  linked to this member account.
                example:
                  id: M12334532
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              origin_loyalty_currency:
                type: string
                description: >
                  To be provided while Exchanging IN from the partner loyalty
                  program. The Currency Alliance system will automatically
                  identify the member details in the partner program based on the
                  account linked to your member’s account.


                  Loyalty Currency Identifier of the linked Partner Loyalty
                  program. This is a unique shortcode Currency Identifier assigned
                  to each currency; it can be found in the 'My Currency' section
                  under 'About My Currency' screen in the Management Dashboard.
                  For the Currency Identifier for your partners' currencies refer
                  to the 'My Partnerships' section in the Management Dashboard.
                example: TCC
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
      ExchangeLinkedAccountResponse:
        type: object
        properties:
          origin_transaction:
            $ref: '#/components/schemas/Transaction'
          destination_transaction:
            $ref: '#/components/schemas/Transaction'
      ExchangeSimulationRequest:
        type: object
        required:
          - amount
          - origin_loyalty_currency
        properties:
          amount:
            type: integer
            description: Number of origin currency units to be exchanged.
            example: 500
          destination_loyalty_currency:
            type: string
            description: >-
              The Currency Identifier of the Destination Loyalty Currency. This is
              a unique shortcode Currency Identifier assigned to each currency; it
              can be found in the 'My Currency' section under 'About My Currency'
              screen in the Management Dashboard. For the Currency Identifier for
              your partners' currencies refer to the 'My Partners' section in the
              Management Dashboard.
            example: SST
          destination_member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          origin_loyalty_currency:
            type: string
            description: The Currency Identifier of the Origin Loyalty Currency.
            example: TSS
          origin_member:
            $ref: '#/components/schemas/MemberIdentifiersField'
      ExchangeSimulationResponse:
        type: object
        additionalProperties:
          type: integer
        example:
          SST: 100
          STS: 200
      ExchangeLinkedAccountSimulationRequest:
        oneOf:
          - type: object
            title: Exchange out
            required:
              - amount
              - origin_member
            properties:
              amount:
                type: integer
                description: Number of origin currency units to be exchanged.
                example: 500
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              origin_member:
                type: object
                description: >
                  To be provided while Exchanging OUT from the partner loyalty
                  program.


                  This is the member identifier in your loyalty program from which
                  the points/miles are to be redeemed. The Currency Alliance
                  system will fetch the partner loyalty program account linked to
                  this member account.
                example:
                  id: M12334532
          - type: object
            title: Exchange in
            required:
              - amount
              - destination_member
            properties:
              amount:
                type: integer
                description: Number of origin currency units to be exchanged.
                example: 500
              destination_member:
                type: object
                description: >
                  To be provided while Exchanging IN from the partner loyalty
                  program.


                  This is the member identifier in your loyalty program to which
                  the exchanged points/miles are to be awarded. The Currency
                  Alliance system will fetch the partner loyalty program account
                  linked to this member account.
                example:
                  id: M12334532
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
      ExchangeLinkedAccountSimulationResponse:
        type: object
        additionalProperties:
          type: integer
        example:
          SST: 100
          STS: 200
      GiftCard:
        type: object
        properties:
          barcode_format:
            type: string
            description: >-
              This field identifies the format of the barcode, if present, of the
              Gift card. Sometimes Gift cards do not have bar codes and thus this
              field is null; if there exists a value for this field, then the Gift
              card could be redeemed using the barcode.
            enum:
              - code-128
              - code-39
              - ean-13
              - pdf417
              - QR
              - null
            example: QR
          countries:
            type: array
            description: >-
              [ISO 3166-1
              alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) of the
              countries
            items:
              $ref: '#/components/schemas/GenericFieldCountry'
          currency:
            type: string
            description: Fiat currency in which the Gift card is valued.
            example: USD
          custom_settings_data:
            type: object
          denomination_type:
            type: string
            enum:
              - open
              - open_integer
              - fixed
            description: >
              `open` signifies that the Gift card does not have pre-defined
              denominations and can hold any value as required.

              `open_integer` signifies that the Gift card does not have
              pre-defined denominations and can hold any integer value as
              required.

              `fixed` signifies that there is a pre-defined list of denominations
              for the Gift card.
            example: fixed
          denominations:
            type: array
            items:
              type: string
              format: decimal
            description: >-
              List of available denominations for the Gift card; if the
              denomination_type field is `open`, then this field will be `null`.
            example:
              - '5.11'
              - '10.00'
              - '10.01'
              - '12.34'
          description:
            type: string
            description: Text description of the Gift card.
            example: <p>Lorem Ipsum Dolor Amet.</p>
          discount_value:
            type: number
            format: float
          expiration_policy:
            type: string
            description: Text description of expiry policy.
            example: 8 months
          id:
            type: string
            description: >
              Unique identifier for each Gift card. It can be found in the "More
              Detail" modal of the gift card in the following section in the
              Management Dashboard


              Redemptions > Gift Card Management
            example: gcb_TEST
          image:
            type: string
            format: uri
            description: URL to the image of the card
            example: null
          maximum_value:
            type: string
            format: decimal
            description: Maximum amount of the gift card.
            example: '100'
          minimum_value:
            type: string
            format: decimal
            description: Minimum amount of the gift card.
            example: '10'
          name:
            type: string
            description: Name of the Gift card
            example: TEST
          provider:
            type: string
            enum:
              - currency_alliance
              - merit
              - wegift
            example: wegift
          redeem_instructions_html:
            type: string
            description: HTML formatted product redeem instructions.
            example: Lorem ipsum dolor sit amet.
          terms_and_conditions_html:
            type: string
            description: HTML formatted terms and conditions.
            example: <p>Lorem ipsum dolor sit amet.</p>
          terms_and_conditions_url:
            type: string
            description: URL, if present, to the terms and conditions of the Gift
            example: example.com/conditions.pdf
          type:
            type: string
            enum:
              - discount
              - fixed_value
              - other
      GiftCardCode:
        type: object
        properties:
          barcode_format:
            type: string
            nullable: true
            description: >-
              This field identifies the format of the barcode in the issued Gift
              card.
            enum:
              - code-128
              - code-39
              - ean-13
              - pdf417
              - QR
              - null
            example: null
          barcode_string:
            type: string
            description: String representation of the barcode of the Gift card.
            example: null
          discount_amount:
            type: number
            format: float
          delivery_url:
            type: string
            description: URL where the member can retrieve their card.
            example: null
          expiration_date:
            type: string
            format: date
            description: Date when the Gift card expires.
            example: '2038-01-19'
          fiat_amount:
            type: string
            format: decimal
            description: The amount of the Gift card.
            example: '20.02'
          fiat_balance:
            type: string
            format: decimal
            example: '20.02'
          fiat_currency:
            type: string
            description: The fiat currency for the amount of the Gift card.
            example: USD
          gift_card_code:
            type: string
            description: Code of the Gift card; the code will be visible to the user.
            example: 1234-ABCDEF-5678
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each issued
              Gift card. This identifier should be used to reference a specific
              Gift card issued/redeemed by a member.
            example: gcc_abc123
          issuance_details:
            type: object
            properties:
              custom_settings_data:
                type: object
              external_reference:
                type: string
              loyalty_information:
                type: object
                properties:
                  loyalty_amount:
                    type: integer
                  loyalty_currency:
                    type: string
                  member_id:
                    type: string
                  partner_name:
                    type: string
              metadata:
                type: object
              original_external_reference:
                type: string
              original_code:
                type: string
              partner_code:
                type: string
          pin:
            type: string
            description: >-
              Represents the pin code of the Gift card. Some Gift cards have a pin
              code associated with them as part of security for a member to be
              able to use that Gift card.
            example: null
          redemption_details:
            type: list
            items:
              type: object
              properties:
                custom_settings_data:
                  type: object
                external_reference:
                  type: string
                fiat_amount:
                  type: string
                  format: decimal
                metadata:
                  type: object
                redemption_date:
                  type: string
                  format: date
          redemption_status:
            type: string
            nullable: true
            description: Redemption status of the giftcard
            enum:
              - partially_redeemed
              - redeemed
              - unredeemed
            example: null
      GiftCardList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            description: Refer to GiftCard Object for details on each child attribute
            items:
              $ref: '#/components/schemas/GiftCard'
      GiftCardDirectIssuanceRequest:
        oneOf:
          - type: object
            title: Fiat amount
            required:
              - external_reference
              - fiat_amount
            properties:
              custom_settings_data:
                type: object
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              fiat_amount:
                type: string
                format: decimal
                description: Amount of the selected gift card in fiat currency.
                example: null
              loyalty_currency:
                type: string
              loyalty_amount_exchanged:
                type: integer
              member_id:
                type: string
              metadata:
                $ref: '#/components/schemas/MetadataField'
              partner_code:
                type: string
          - type: object
            title: Discount
            required:
              - external_reference
            properties:
              custom_settings_data:
                type: object
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              loyalty_currency:
                type: string
              loyalty_amount_exchanged:
                type: integer
              member_id:
                type: string
              metadata:
                $ref: '#/components/schemas/MetadataField'
              partner_code:
                type: string
      GiftCardDirectIssuanceResponse:
        type: object
        properties:
          code:
            $ref: '#/components/schemas/GiftCardCode'
          gift_card:
            $ref: '#/components/schemas/GiftCard'
      GiftCardIssuanceRequest:
        oneOf:
          - type: object
            title: Fiat amount
            required:
              - fiat_amount
              - member
            properties:
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              fiat_amount:
                type: string
                format: decimal
                description: Amount of the selected gift card in fiat currency.
                example: null
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
              metadata:
                $ref: '#/components/schemas/MetadataField'
          - type: object
            title: Loyalty amount
            required:
              - loyalty_amount
              - member
            properties:
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              loyalty_amount:
                type: integer
                description: Amount of Loyalty Currency units to exchange.
                example: 100
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
              metadata:
                $ref: '#/components/schemas/MetadataField'
      GiftCardIssuanceResponse:
        type: object
        properties:
          code:
            $ref: '#/components/schemas/GiftCardCode'
          gift_card:
            $ref: '#/components/schemas/GiftCard'
          transaction:
            $ref: '#/components/schemas/Transaction'
      GiftCardSimulationRequest:
        oneOf:
          - type: object
            title: Fiat amount
            required:
              - fiat_amount
            properties:
              fiat_amount:
                type: string
                format: decimal
                description: Amount of the selected gift card in fiat currency.
                example: '10.00'
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
          - type: object
            title: Loyalty amount
            required:
              - loyalty_amount
            properties:
              loyalty_amount:
                type: integer
                description: Amount of Loyalty Currency units to exchange.
                example: 100
              loyalty_system_data:
                $ref: '#/components/schemas/LoyaltySystemDataField'
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
      GiftCardSimulationResponse:
        type: object
        properties:
          code:
            type: object
            properties:
              fiat_amount:
                type: string
                format: decimal
                example: '20.02'
              fiat_currency:
                type: string
                example: EUR
          gift_card:
            $ref: '#/components/schemas/GiftCard'
      GiftCardCodeRedemptionRequest:
        oneOf:
          - type: object
            title: Fiat amount
            required:
              - channel
              - external_reference
              - gift_card_code
            properties:
              brand_id:
                type: string
                description: Brand identifier
              channel:
                type: string
                description: Channel of the redemption
                enum:
                  - store
                  - online
              custom_settings_data:
                type: object
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              fiat_amount:
                type: string
                format: decimal
                description: Amount to redeem from the gift card
                example: '20.02'
              gift_card_code:
                type: string
                description: Code of the gift card to redeem
                example: ABCD-0000-ABCD-0000
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
              metadata:
                $ref: '#/components/schemas/MetadataField'
          - type: object
            title: Discount
            required:
              - channel
              - external_reference
              - gift_card_code
            properties:
              brand_id:
                type: string
                description: Brand identifier
              channel:
                type: string
                description: Channel of the redemption
                enum:
                  - store
                  - online
              custom_settings_data:
                type: object
              external_reference:
                $ref: '#/components/schemas/ExternalReferenceField'
              gift_card_code:
                type: string
                description: Code of the gift card to redeem
                example: ABCD-0000-ABCD-0000
              member:
                $ref: '#/components/schemas/MemberIdentifiersField'
              metadata:
                $ref: '#/components/schemas/MetadataField'
      GiftCardCodeRedemptionResponse:
        type: object
        properties:
          gift_card:
            $ref: '#/components/schemas/GiftCard'
          code:
            $ref: '#/components/schemas/GiftCardCode'
      GiftCardCodeValidationRequest:
        oneOf:
          - type: object
            title: Fiat amount
            required:
              - channel
              - gift_card_code
            properties:
              brand_id:
                type: string
                description: Brand identifier
              channel:
                type: string
                description: Channel of the redemption
                enum:
                  - store
                  - online
              custom_settings_data:
                type: object
              fiat_amount:
                type: string
                format: decimal
                description: Amount to redeem from the gift card
                example: '20.02'
              gift_card_code:
                type: string
                description: Code of the gift card to redeem
                example: ABCD-0000-ABCD-0000
          - type: object
            title: Discount
            required:
              - channel
              - gift_card_code
            properties:
              brand_id:
                type: string
                description: Brand identifier
              channel:
                type: string
                description: Channel of the redemption
                enum:
                  - store
                  - online
              custom_settings_data:
                type: object
              gift_card_code:
                type: string
                description: Code of the gift card to redeem
                example: ABCD-0000-ABCD-0000
      GiftCardCodeValidationResponse:
        type: object
        properties:
          gift_card:
            $ref: '#/components/schemas/GiftCard'
          code:
            $ref: '#/components/schemas/GiftCardCode'
      GiftCardCodeCancelRequest:
        type: object
        properties:
          gift_card_code:
            type: string
            description: Code of the gift card to redeem
            example: ABCD-0000-ABCD-0000
      GiftCardCodeCancelResponse:
        type: object
        properties:
          gift_card:
            $ref: '#/components/schemas/GiftCard'
          code:
            $ref: '#/components/schemas/GiftCardCode'
      GiftCardCodeViewRequest:
        type: object
        required:
          - gift_card_code
        properties:
          gift_card_code:
            type: string
          pin:
            type: string
      GiftCardCodeViewResponse:
        type: object
        properties:
          gift_card:
            $ref: '#/components/schemas/GiftCard'
          code:
            $ref: '#/components/schemas/GiftCardCode'
      LoyaltyCurrencyConversionRequest:
        type: object
        required:
          - amount
          - fiat_currency
          - loyalty_currency
        properties:
          amount:
            type: string
            format: decimal
            example: '10.00'
          fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          loyalty_currency:
            type: string
            description: >-
              This is the loyalty currency identifier. It is a unique shortcode
              Currency Identifier assigned to each currency; it can be found in
              the 'My Currency' section under 'About My Currency' screen in the
              Management Dashboard. For the Currency Identifier for your partners'
              currencies refer to the 'My Partners' section in the Management
              Dashboard.
            example: FOO
          price_type:
            type: string
            enum:
              - base_economic_value
              - custom_value
              - customers_perceived_value
              - issuing_partners_cost
            default: customers_perceived_value
          rounding:
            type: string
            enum:
              - bankers_rounding
              - round_up
              - round_down
            default: bankers_rounding
          custom_value:
            type: string
            format: decimal
            example: '10.12345678'
          custom_value_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
      LoyaltyCurrencyConversionResponse:
        type: object
        properties:
          loyalty_amount:
            type: integer
            example: 10
          exact_fiat_cost:
            type: string
            format: decimal
            example: '99.0000'
            description: >-
              Exact fiat cost of the loyalty amount returned. Can be under or over
              the fiat amount received if depending of the rounding.
      Member:
        type: object
        properties:
          additional_information:
            type: object
            example: null
          address_line1:
            type: string
            description: Address line 1 (e.g. building, apartment, suite, unit, street)
            example: 3532 Hidden Valley Road
          address_line2:
            type: string
            description: Address line 2 (e.g. community, neighborhood)
            example: Williamsburg,
          address_line3:
            type: string
            description: Address line 3 (other information)
            example: Brooklyn
          balance:
            type: integer
            description: >-
              Member’s balance in number of Loyalty Currency Units. The field will
              be null if the Currency Owner has not granted access to member’s
              balance.
            example: 38250
          bank_accounts:
            $ref: '#/components/schemas/MemberBankAccountsField'
          birth_date:
            type: string
            format: YYYY-MM-DD
            description: Member’s date of birth
            example: '2000-01-01'
          city:
            type: string
            description: City, district, suburb, town, or village.
            example: New York City
          country:
            $ref: '#/components/schemas/GenericFieldCountry'
          email:
            type: string
            description: Member’s email address
            example: foo@bar.com
          first_name:
            type: string
            description: Member’s First Name
            example: Barbara
          gender:
            type: string
            enum:
              - male
              - female
              - other
            example: female
          id:
            type: string
            description: >-
              Unique internal Currency Alliance identifier generated by the system
              for each member.
            example: mp_abc123
          last_name:
            type: string
            description: Member's Last Name
            example: Drennen
          loyalty_currency:
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            type: string
            example: EXAMPLE_POINTS
          loyalty_program_identifiers:
            $ref: '#/components/schemas/MemberIdentifiersField'
          phone_number:
            type: string
            description: Member's contact number.
            example: '+443031237300'
          postal_code:
            type: string
            description: ZIP or postal code.
            example: 11219
          state:
            type: string
            description: State, county, province, or region.
            example: New York
          tier:
            type: object
            properties:
              id:
                type: string
                example: gold
              level:
                type: integer
                example: 1
              name:
                type: string
                example: gold
          type:
            type: string
            description: The member type.
            example: individual
      MemberTypeCompany:
        type: object
        properties:
          additional_information:
            type: object
            example: null
          address_line1:
            type: string
            description: Address line 1 (e.g. building, apartment, suite, unit, street)
            example: 3532 Hidden Valley Road
          address_line2:
            type: string
            description: Address line 2 (e.g. community, neighborhood)
            example: Williamsburg,
          address_line3:
            type: string
            description: Address line 3 (other information)
            example: Brooklyn
          balance:
            type: integer
            description: >-
              Member’s balance in number of Loyalty Currency Units. The field will
              be null if the Currency Owner has not granted access to member’s
              balance.
            example: 38250
          bank_accounts:
            $ref: '#/components/schemas/MemberBankAccountsField'
          city:
            type: string
            description: City, district, suburb, town, or village.
            example: New York City
          company_name:
            type: string
            description: Company name
            example: Hidden Valley Inc
          company_registration_number:
            type: string
            description: Company registration number.
            example: A12345678
          country:
            $ref: '#/components/schemas/GenericFieldCountry'
          email:
            type: string
            description: Member’s email address
            example: foo@bar.com
          id:
            type: string
            description: >-
              Unique internal Currency Alliance identifier generated by the system
              for each member.
            example: mp_abc123
          loyalty_currency:
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            type: string
            example: EXAMPLE_POINTS
          loyalty_program_identifiers:
            $ref: '#/components/schemas/MemberIdentifiersField'
          phone_number:
            type: string
            description: Member's contact number.
            example: '+443031237300'
          postal_code:
            type: string
            description: ZIP or postal code.
            example: 11219
          state:
            type: string
            description: State, county, province, or region.
            example: New York
          tier:
            type: object
            properties:
              id:
                type: string
                example: gold
              level:
                type: integer
                example: 1
              name:
                type: string
                example: gold
          type:
            type: string
            description: The member type.
            example: company
      MemberCreateRequest:
        oneOf:
          - title: Individual
            type: object
            required:
              - loyalty_program_identifiers
            properties:
              address_line1:
                type: string
                description: Address line 1 (e.g. building, apartment, suite, unit, street)
                example: 3532 Hidden Valley Road
              address_line2:
                type: string
                description: Address line 2 (e.g. community, neighborhood)
                example: Williamsburg,
              address_line3:
                type: string
                description: Address line 3 (other information)
                example: Brooklyn
              bank_accounts:
                $ref: '#/components/schemas/MemberBankAccountsField'
              birth_date:
                type: string
                format: YYYY-MM-DD
                description: Member’s date of birth
                example: '2000-01-01'
              city:
                type: string
                description: City, district, suburb, town, or village.
                example: New York City
              country:
                $ref: '#/components/schemas/GenericFieldCountry'
              email:
                type: string
                description: Member’s email address
                example: foo@bar.com
              first_name:
                type: string
                description: Member’s First Name
                example: Barbara
              gender:
                type: string
                enum:
                  - male
                  - female
                  - other
                example: female
              last_name:
                type: string
                description: Member’s Last Name
                example: Drennen
              loyalty_program_identifiers:
                $ref: '#/components/schemas/MemberIdentifiersField'
              phone_number:
                type: string
                description: >-
                  Phone number of the member in
                  [E.164](https://en.wikipedia.org/wiki/E.164) format
                example: '+443031237300'
              postal_code:
                type: string
                description: ZIP or Postal Code
                example: 1609
              state:
                type: string
                description: State, county, province, or region.
                example: New York
              tier:
                type: string
                example: gold
              type:
                type: string
                description: The member type.
                example: individual
          - title: Company
            type: object
            required:
              - loyalty_program_identifiers
            properties:
              address_line1:
                type: string
                description: Address line 1 (e.g. building, apartment, suite, unit, street)
                example: 3532 Hidden Valley Road
              address_line2:
                type: string
                description: Address line 2 (e.g. community, neighborhood)
                example: Williamsburg,
              address_line3:
                type: string
                description: Address line 3 (other information)
                example: Brooklyn
              bank_accounts:
                $ref: '#/components/schemas/MemberBankAccountsField'
              city:
                type: string
                description: City, district, suburb, town, or village.
                example: New York City
              company_name:
                type: string
                description: Company name
                example: Hidden Valley Inc
              company_registration_number:
                type: string
                description: Company registration number.
                example: A12345678
              country:
                $ref: '#/components/schemas/GenericFieldCountry'
              email:
                type: string
                description: Company’s email address
                example: foo@bar.com
              loyalty_program_identifiers:
                $ref: '#/components/schemas/MemberIdentifiersField'
              phone_number:
                type: string
                description: >-
                  Phone number of the company in
                  [E.164](https://en.wikipedia.org/wiki/E.164) format
                example: '+443031237300'
              postal_code:
                type: string
                description: ZIP or Postal Code
                example: 1609
              state:
                type: string
                description: State, county, province, or region.
                example: New York
              tier:
                type: string
                example: gold
              type:
                type: string
                description: The member type.
                example: company
      MemberLookupRequest:
        type: object
        required:
          - loyalty_program_identifiers
          - loyalty_currency
        properties:
          linked_loyalty_currency:
            type: string
            description: Loyalty currency identifier of the linked loyalty program.
            example: EXAMPLE_POINTS
          loyalty_program_identifiers:
            $ref: '#/components/schemas/MemberIdentifiersField'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          metadata:
            deprecated: true
            type: object
            description: Replaced by loyalty_system_data
      MemberUpdateRequest:
        oneOf:
          - title: Individual
            type: object
            required:
              - loyalty_program_identifiers
            properties:
              address_line1:
                type: string
                description: Address line 1 (e.g. building, apartment, suite, unit, street)
                example: 3532 Hidden Valley Road
              address_line2:
                type: string
                description: Address line 2 (e.g. community, neighborhood)
                example: Williamsburg,
              address_line3:
                type: string
                description: Address line 3 (other information)
                example: Brooklyn
              bank_accounts:
                $ref: '#/components/schemas/MemberBankAccountsField'
              birth_date:
                type: string
                format: YYYY-MM-DD
                description: Member’s date of birth
                example: '2000-01-01'
              city:
                type: string
                description: City, district, suburb, town, or village.
                example: New York City
              country:
                $ref: '#/components/schemas/GenericFieldCountry'
              email:
                type: string
                description: Member’s email address
                example: foo@bar.com
              first_name:
                type: string
                description: Member’s First Name
                example: Barbara
              gender:
                type: string
                enum:
                  - male
                  - female
                  - other
                example: female
              last_name:
                type: string
                description: Member’s Last Name
                example: Drennen
              loyalty_program_identifiers:
                $ref: '#/components/schemas/MemberIdentifiersField'
              phone_number:
                type: string
                description: >-
                  Phone number of the member in
                  [E.164](https://en.wikipedia.org/wiki/E.164) format
                example: '+443031237300'
              postal_code:
                type: string
                description: ZIP or Postal Code
                example: 1609
              state:
                type: string
                description: State, county, province, or region.
                example: New York
              tier:
                type: string
                example: gold
              type:
                type: string
                description: The member type.
                example: individual
          - title: Company
            type: object
            required:
              - loyalty_program_identifiers
            properties:
              address_line1:
                type: string
                description: Address line 1 (e.g. building, apartment, suite, unit, street)
                example: 3532 Hidden Valley Road
              address_line2:
                type: string
                description: Address line 2 (e.g. community, neighborhood)
                example: Williamsburg,
              address_line3:
                type: string
                description: Address line 3 (other information)
                example: Brooklyn
              bank_accounts:
                $ref: '#/components/schemas/MemberBankAccountsField'
              city:
                type: string
                description: City, district, suburb, town, or village.
                example: New York City
              company_name:
                type: string
                description: Company name
                example: Hidden Valley Inc
              company_registration_number:
                type: string
                description: Company registration number.
                example: A12345678
              country:
                $ref: '#/components/schemas/GenericFieldCountry'
              email:
                type: string
                description: Company’s email address
                example: foo@bar.com
              loyalty_program_identifiers:
                $ref: '#/components/schemas/MemberIdentifiersField'
              phone_number:
                type: string
                description: >-
                  Phone number of the company in
                  [E.164](https://en.wikipedia.org/wiki/E.164) format
                example: '+443031237300'
              postal_code:
                type: string
                description: ZIP or Postal Code
                example: 1609
              state:
                type: string
                description: State, county, province, or region.
                example: New York
              tier:
                type: string
                example: gold
              type:
                type: string
                description: The member type.
                example: company
      PurchaseRule:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each Purchase
              rule.
            example: rl_abcd1234
          name:
            type: string
            description: Name of the purchase rule.
            example: 'Purchase Rule #1'
      PurchaseRuleExecution:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for the purchase
              rule execution independent of the preferred_execution_mode. This
              value could be used to extract information about the purchase rule
              execution in the future.
            example: pre_abcd1234
          total:
            type: integer
          transactions:
            type: array
            items:
              $ref: '#/components/schemas/Transaction'
      PurchaseRuleSimulationRequest:
        type: object
        required:
          - fiat_amount
          - fiat_currency
          - loyalty_currency
        properties:
          fiat_amount:
            type: string
            format: decimal
            description: Amount of the purchase in decimal format.
            example: '20.00'
          fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the 'My Partners' section in the
              Management Dashboard or Partners Endpoints.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          tags:
            type: array
            description: >-
              List of tags. Only the rules that either have no tags or at least
              one of these tags will be executed.
            items:
              type: string
              example: promo20
      PurchaseRuleTriggerRequest:
        type: object
        required:
          - fiat_amount
          - fiat_currency
          - loyalty_currency
          - member
        properties:
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          fiat_amount:
            type: string
            format: decimal
            description: Amount of the purchase in decimal format.
            example: '20.00'
          fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          preferred_execution_mode:
            type: string
            enum:
              - single_transaction
              - multiple_transactions
            description: >-
              This field identifies if there are multiple loyalty rules to be
              executed based on the purchase details, the system should combine
              all the rules and create only one transaction or execute each rule
              separately to create a corresponding transaction. The default mode,
              and recommended, is `multiple_transactions. However, note that some
              partner loyalty systems may not allow multiple transactions. For
              such loyalty partners, the Currency Alliance platform will
              automatically override this field to create "single_transaction".
          reason:
            type: string
            description: >-
              This field can be used when the preferred_execution_mode is
              single_transaction. You can provide a combined reason for all the
              purchase rules that are executed as a single transaction. If no
              value is provided, the Currency Alliance system will concatenate the
              reason for each purchase rule.
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight. The transaction will be created with
              the status as "pending" and it can be updated or cancelled until the
              release date. Values with seconds are accepted, but will be
              truncated to the minute.
            format: ISO 8601
            example: 2020-10-10T12:12
          tags:
            type: array
            description: >-
              List of tags. Only the rules that either have no tags or at least
              one of these tags will be executed.
            items:
              type: string
              example: promo20
      PurchaseRuleTriggerResponse:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for the purchase
              rule execution independent of the preferred_execution_mode. This
              value could be used to extract information about the purchase rule
              execution in the future.
            example: pre_abcd1234
          rules:
            deprecated: true
            type: array
            items:
              type: object
              properties:
                amount_issued:
                  type: integer
                rule:
                  $ref: '#/components/schemas/PurchaseRule'
                transaction:
                  $ref: '#/components/schemas/Transaction'
          total:
            type: integer
          transactions:
            type: array
            items:
              $ref: '#/components/schemas/Transaction'
      PurchaseRuleExecutionRetriggerRequest:
        type: object
        required:
          - fiat_amount
          - fiat_currency
        properties:
          fiat_amount:
            type: string
            format: decimal
            description: Amount of the purchase in decimal format.
            example: '20.00'
          fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight. The transaction will be created with
              the status as "pending" and it can be updated or cancelled until the
              release date. Values with seconds are accepted, but will be
              truncated to the minute.
            format: ISO 8601
            example: 2020-10-10T12:12
          reason:
            type: string
            description: >-
              This field can be used when the preferred_execution_mode is
              single_transaction. You can provide a combined reason for all the
              purchase rules that are executed as a single transaction. If no
              value is provided, the Currency Alliance system will concatenate the
              reason for each purchase rule.
          tags:
            type: array
            description: >-
              List of tags. Only the rules that either have no tags or at least
              one of these tags will be executed.
            items:
              type: string
              example: promo20
      PurchaseRuleSimulationResponse:
        type: object
        properties:
          total:
            type: integer
          rules:
            type: array
            items:
              type: object
              properties:
                amount_issued:
                  type: integer
                rule:
                  $ref: '#/components/schemas/PurchaseRule'
      ActivityRule:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each Activity
              rule.
            example: rl_abcd1234
          name:
            type: string
            description: Name of the activity rule.
            example: 'Activity Rule #1'
      ActivityRuleSimulationRequest:
        type: object
        required:
          - activity_ids
          - loyalty_currency
          - member
        properties:
          activity_ids:
            type: array
            description: >-
              Unique identifiers defined for each activity for the Loyalty
              Currency. Refer to the Activity rule in the Management Dashboard
              Section Loyalty Rules > Activity Rules for this field.
            items:
              type: string
              example: birthday
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
      ActivityRuleTriggerRequest:
        type: object
        required:
          - activity_ids
          - loyalty_currency
          - member
        properties:
          activity_ids:
            type: array
            description: >-
              Unique identifiers defined for each activity for the Loyalty
              Currency. Refer to the Activity rule in the Management Dashboard
              Section Loyalty Rules > Activity Rules for this field.
            items:
              type: string
              example: birthday
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight. The transaction will be created with
              the status as "pending" and it can be updated or cancelled until the
              release date. Values with seconds are accepted, but will truncated
              to the minute.
            format: ISO 8601
            example: 2020-10-10T12:12
      ActivityRuleSimulationResponse:
        properties:
          total:
            type: integer
          rules:
            type: array
            items:
              type: object
              properties:
                amount_issued:
                  type: integer
                rule:
                  $ref: '#/components/schemas/ActivityRule'
      ActivityRuleTriggerResponse:
        properties:
          rules:
            deprecated: true
            type: array
            items:
              type: object
              properties:
                amount_issued:
                  type: integer
                rule:
                  $ref: '#/components/schemas/ActivityRule'
                transaction:
                  $ref: '#/components/schemas/Transaction'
          total:
            type: integer
          transactions:
            type: array
            items:
              $ref: '#/components/schemas/Transaction'
      StandardRedemptionSimulationRequest:
        type: object
        required:
          - loyalty_currency
          - redemption_items
        properties:
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or use the Endpoints
              for partners to obtain this value.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            deprecated: true
            type: object
            description: Replaced by loyalty_system_data
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionRequestItemList'
      StandardRedemptionSimulationResponse:
        properties:
          adjustment_allowed:
            type: boolean
            description: >-
              This field signifies whether the Currency Owner allows any
              modifications or a cancellation of the redemption.
            example: true
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the 'My Partners' section in the
              Management Dashboard or Partners Endpoints.
            example: EXAMPLE_POINTS
          maximum_fiat_balance:
            type: string
            format: decimal
            description: >-
              Maximum amount in fiat currency that the member can pay for General
              Product and Services. This field is used in conjuntion with the
              sufficient_balance field to display information to the member if
              they can't pay for the complete invoice using their Loyalty Currency
              Units then what part of the invoice could be paid using Loyalty
              Currency.
            example: '700.00'
          member:
            $ref: '#/components/schemas/Member'
          metadata:
            deprecated: true
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionResponseItemList'
          sufficient_balance:
            type: boolean
            description: >-
              provides information if the member has enough balance to complete
              this payment.
            example: true
          total_fiat_amount:
            type: string
            format: decimal
            description: >-
              Total Redemption amount in the fiat currency for all the included
              products and services in the items list.
            example: '340.35'
          total_loyalty_amount:
            type: integer
            description: >-
              Total number of Loyalty Currency Units required to be exchanged for
              the provided list of redemption products and services.
            example: 45564
      StandardRedemptionRequest:
        type: object
        required:
          - external_reference
          - loyalty_currency
          - member
          - redemption_items
          - reason
        properties:
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or use the Endpoints
              for partners to obtain this value
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          reason:
            type: string
            description: >-
              The textual description for why the redemption was done. This text
              may be presented to the member in their transaction history. While
              any string length is accepted, 26 characters or less is typically
              optimal to explain to the member in their transaction history why
              this redemption was done. Please note that some partners may provide
              a specific format for this field.
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionRequestItemList'
      StandardRedemptionResponse:
        properties:
          adjustment_allowed:
            type: boolean
            description: >-
              This field signifies whether the Currency Owner allows any
              modifications or a cancellation of the redemption.
            example: true
          external_reference:
            type: string
            description: >-
              Unique identifier to be used as reference during reconciliation
              process. This could be the invoice number, booking number, itinerary
              number, or any other unique number in your system that can be used
              to uniquely identify the redemption.
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the 'My Partners' section in the
              Management Dashboard or Partners Endpoints.
            example: EXAMPLE_POINTS
          member:
            $ref: '#/components/schemas/Member'
          metadata:
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          reason:
            type: string
            description: >-
              The textual description for why the redemption was done. This text
              may be presented to the member in their transaction history.
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionResponseItemList'
          total_fiat_amount:
            type: integer
            description: >-
              Total Redemption amount in the fiat currency for all the included
              products and services in the items list.
            example: 340.35
          total_loyalty_amount:
            type: integer
            description: >-
              Total number of Loyalty Currency Units required to be exchanged for
              the provided list of redemption products and services.
            example: 45564
          transaction:
            $ref: '#/components/schemas/Transaction'
      AdjustRedemptionRequest:
        type: object
        required:
          - member
          - new_external_reference
          - redemption_items
          - previous_external_reference
          - previous_transaction_id
          - reason
        properties:
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          metadata:
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          new_external_reference:
            type: string
            description: >-
              Unique identifier to be used as reference during reconciliation
              process. This could be the invoice number, booking number, itinerary
              number, or any other unique number in your system that can be used
              to uniquely identify the redemption. Depending on your internal
              system, you may have a new identifier or it may be the same
              identifier as the old redemption. In latter case, send the same
              value in this field as for the previous_external_reference.
            example: abcd1234
          previous_external_reference:
            type: string
            description: >-
              Unique identifier to be used as reference during reconciliation
              process. *IMPORTANT:* Send the external reference id of the latest
              adjustment if there were any adjustments made prior to this request.
            example: abcd1234
          previous_transaction_id:
            type: string
            description: >-
              Unique identifier generated in the Currency Alliance system for each
              transaction. Send the transaction id that was created for the
              previous redemption transaction. *IMPORTANT:* Send the transaction
              id of the latest adjustment if there were any adjustments made prior
              to this request.
            example: tx_abc12312345
          reason:
            type: string
            description: >-
              The textual description for why the redemption was done. This text
              may be presented to the member in their transaction history. While
              any string length is accepted, 26 characters or less is typically
              optimal to explain to the member in their transaction history why
              this redemption was done. Please note that some partners may provide
              a specific format for this field.
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionRequestItemList'
      AdjustRedemptionResponse:
        properties:
          external_reference:
            type: string
            description: >-
              Unique identifier to be used as reference during reconciliation
              process. This could be the invoice number, booking number, itinerary
              number, or any other unique number in your system that can be used
              to uniquely identify the redemption. This would be the same as the
              new_external_reference sent in the request.
            example: abcd1234
          fiat_amount_difference:
            type: string
            format: decimal
            example: '12.34'
          loyalty_amount_difference:
            type: integer
            example: 123
          member:
            $ref: '#/components/schemas/Member'
          metadata:
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          previous_external_reference:
            type: string
            description: Unique external identifier that was adjusted.
            example: abcd1234
          previous_transaction_id:
            type: string
            description: Previous transaction id for the redemption or adjustment.
            example: tx_abc12312345
          reason:
            type: string
            description: >-
              The textual description for why the redemption was done. This text
              may be presented to the member in their transaction history.
          total_fiat_amount:
            type: string
            format: decimal
            description: >-
              Total Redemption amount in the fiat currency for all the included
              products and services in the items list.
            example: '340.35'
          total_loyalty_amount:
            type: integer
            description: >-
              Total number of Loyalty Currency Units required to be exchanged for
              the provided list of redemption products and services.
            example: 45564
          transaction:
            $ref: '#/components/schemas/Transaction'
          redemption_items:
            $ref: '#/components/schemas/StandardRedemptionResponseItemList'
      CancelRedemptionRequest:
        type: object
        required:
          - previous_external_reference
          - previous_transaction_id
          - reason
        properties:
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          metadata:
            type: object
            description: >-
              JSON object. Allows up to 5 levels of nesting depth. This data
              content can include information about the purchase such as
              information about the store, information about the member, entity
              redeeming the currency, partner codes, connectivity information, or
              anything else that could be helpful for connections, analytics, or
              reporting.
            example:
              foo: bar
          previous_external_reference:
            type: string
            description: >-
              Unique identifier to be used as reference during reconciliation
              process. *IMPORTANT:* Send the external reference id of the latest
              adjustment if there were any adjustments made prior to this request.
            example: abcd1234
          previous_transaction_id:
            type: string
            description: >-
              Unique identifier generated in the Currency Alliance system for each
              transaction. Send the transaction id that was created for the
              previous redemption transaction. *IMPORTANT:* Send the transaction
              id of the latest adjustment if there were any adjustments made prior
              to this request.
            example: tx_abc12312345
          reason:
            type: string
            description: >-
              The textual description for why the redemption was done. This text
              may be presented to the member in their transaction history. While
              any string length is accepted, 26 characters or less is typically
              optimal to explain to the member in their transaction history why
              this redemption was done. Please note that some partners may provide
              a specific format for this field.
      CancelRedemptionResponse:
        type: object
        properties:
          member:
            $ref: '#/components/schemas/Member'
          metadata:
            type: object
            description: >-
              JSON object; up to 5 levels of nesting depth. This data content can
              include information about the purchase such as items included,
              information about the store, information about the member, or
              anything else that could be helpful for analytics and reporting.
            example:
              foo: bar
          transaction:
            $ref: '#/components/schemas/Transaction'
      Transaction:
        type: object
        properties:
          amount:
            type: integer
            description: The transaction amount in the Loyalty Currency Units
            example: 250
          completed_at:
            type: string
            description: >-
              The date and time when this transaction was completed based on the
              status and release date.
            format: date
            example: 2019-03-04T11:50:03+0000
          created_at:
            type: string
            description: >-
              The date and time when this transaction was created. Note that it
              could be different from when the transaction is completed based on
              the status and release date.
            format: date
            example: 2019-03-04T11:50:03+0000
          destination_account:
            $ref: '#/components/schemas/Account'
          external_reference:
            type: string
            description: >-
              A unique identifier that can be used as a reference to uniquely
              identify the action in your system.
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each
              Transaction.
            example: tx_abc12312345
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          loyalty_system_id:
            type: string
            description: Unique transaction identifier provided by the loyalty system.
          loyalty_currency:
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners information..
            type: string
            example: LLL
          metadata:
            $ref: '#/components/schemas/MetadataField'
          origin_account:
            $ref: '#/components/schemas/Account'
          reason:
            type: string
            description: >-
              The textual description for why the transaction was created. This
              text is presented to the origin and destination account holders in
              their transaction history. While any string length is accepted, 26
              characters or less is typically optimal to explain to the member in
              their transaction history why this transaction was created.
            example: present
          reason_code:
            type: string
            description: >-
              Reason code for why the transaction was created. This field is used
              for reporting purposes if the ‘reason’ field is dynamic and can vary
              within one category of transactions.
          related_data:
            description: >-
              This provides data about the related action that created the
              transaction. Actions could be the execution of transaction rule(s),
              activity rule(s), or a redemption. It is different from Metadata
              field because Metadata is additional optional information whereas
              this field is mandatory for certain actions such as Purchase rule,
              Activity rule, and Redemptions.
            oneOf:
              - $ref: '#/components/schemas/TransactionRelatedDataActivityRule'
              - $ref: '#/components/schemas/TransactionRelatedDataGiftCardCode'
              - $ref: '#/components/schemas/TransactionRelatedDataPurchaseRule'
              - $ref: '#/components/schemas/TransactionRelatedDataStandardRedemption'
              - $ref: >-
                  #/components/schemas/TransactionRelatedDataStandardRedemptionAdjustment
              - $ref: >-
                  #/components/schemas/TransactionRelatedDataStandardRedemptionCancellation
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight.
            format: ISO 8601
            example: '2447-12-01T21:56:57Z'
          status:
            type: string
            description: >-
              Provides the current status of the transaction. Transactions
              executed completely have the status set to `completed`. Refer to the
              fields status_message_code and status_message for further
              information if the transaction status is anything other than
              `completed`.
            enum:
              - adjusted
              - cancelled
              - completed
              - pending
              - pending_external_approval
              - rejected
              - reversed
            example: pending
          status_message:
            type: string
            description: >-
              The detailed reason why the transaction is not in the `completed`
              status. This field will be null if the transaction status is
              `completed`.
            example: The release date has not been reached.
          status_message_code:
            type: string
            description: >-
              The code representing the details about the transaction status when
              the transaction status is not `completed`. This field will be null
              if the transaction status is `completed`.
            enum:
              - release_date_not_reached
              - pending_external_approval
              - member_does_not_exist
            example: release_date_not_reached
          sub-type:
            type: string
            description: >-
              This field provides further granular information about certain types
              of transactions.
            enum:
              - activity_rule
              - adjustment_decrease
              - adjustment_increase
              - buy
              - cancellation
              - in
              - member
              - member_to_member
              - other
              - out
              - partner
              - partner_to_partner
              - purchase_rule
              - self_transfer
              - standard
            example: activity_rule
          type:
            type: string
            description: A transaction will always have a type associated with it.
            enum:
              - accrual
              - gift_card_exchange
              - loyalty_currency_expiration
              - loyalty_currency_generation
              - loyalty_currency_purchase
              - loyalty_currency_withdrawal
              - member_exchange
              - redemption
              - transfer
              - reversal
              - wholesale_exchange
            example: transfer
      TransactionList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          previous:
            type: string
            description: GET parameter for the previous page.
          results:
            type: array
            description: Refer to Transaction Object for details on each child attribute
            items:
              $ref: '#/components/schemas/Transaction'
      TransactionCreateRequest:
        type: object
        required:
          - amount
          - destination
          - loyalty_currency
          - origin
        properties:
          amount:
            type: integer
            description: The transaction amount in units of the Loyalty Currency
            example: 100
          destination:
            $ref: '#/components/schemas/TransactionFieldDestinationRequest'
          external_reference:
            $ref: '#/components/schemas/ExternalReferenceField'
          loyalty_currency:
            type: string
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            example: EXAMPLE_POINTS
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          reason:
            type: string
            description: >-
              Textual description for why the transaction was created. This text
              is presented to the origin and destination account holders in their
              transaction history. While any string length is accepted, 26
              characters or less is typically optimal to explain to the member in
              their transaction history why this transaction was created.
            example: Christmas bonus
          origin:
            $ref: '#/components/schemas/TransactionFieldOriginRequest'
          reason_code:
            $ref: '#/components/schemas/TransactionFieldReasonCode'
      TransactionMemberListRequest:
        type: object
        required:
          - member
          - loyalty_currency
        properties:
          member:
            $ref: '#/components/schemas/MemberIdentifiersField'
          loyalty_currency:
            description: >-
              This unique identifier represents the loyalty program currency to
              which the member belongs. It is a unique shortcode Identifier
              assigned by the system to each loyalty currency. It can be found in
              the 'My Currency' section under the 'About My Currency' screen in
              the Management Dashboard. For the Currency Identifier of your
              partners' currencies refer to the Currency Symbol field in the 'My
              Partners' section in the Management Dashboard or Endpoints to obtain
              Partners' information.
            type: string
            example: EXAMPLE_POINTS
      TransactionUpdateRequest:
        type: object
        properties:
          amount:
            type: integer
            description: Amount of loyalty currency units to give.
            example: 100
          loyalty_system_data:
            $ref: '#/components/schemas/LoyaltySystemDataField'
          metadata:
            $ref: '#/components/schemas/MetadataField'
          reason_code:
            type: string
            description: >-
              Reason code for why the transaction was created. This field is used
              for reporting purposes if the ‘reason’ field is dynamic and can vary
              within one category of transactions.
          reason:
            type: string
            description: >-
              Textual description for why the transaction was created. This text
              is presented to the origin and destination account holders in their
              transaction history. While any string length is accepted, 26
              characters or less is typically optimal to explain to the member in
              their transaction history why this transaction was created.
            example: Christmas bonus
          release_date:
            type: string
            description: >-
              Future date on which the Loyalty Currency Units should be made
              available to the member. The Loyalty Currency Units would be
              reserved for the member but not made available till the release date
              is reached. This is used in scenarios such as hotel bookings or
              flight purchases that are done before the trip so that the member
              doesn’t redeem the points until they’ve actually stayed at the hotel
              or flown in the booked flight. The transaction will be created with
              the status as "pending" and it can be updated or cancelled until the
              release date. Values with seconds are accepted but will be truncated
              to the minute. Refer Transaction Object for further details.
            format: ISO 8601
            example: 2020-10-10T12:12
      TransactionRelatedDataActivityRule:
        type: object
        title: Activity Rule
        properties:
          activity_id:
            type: string
            description: >-
              Unique identifier defined for each activity for the Loyalty
              Currency. Refer to the Activity rule in the Management Dashboard
              Section Loyalty Rules > Activity Rules for this field.
            example: birthday
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each loyalty
              rule.
            example: lr_abcr1234
          name:
            type: string
            description: Name of the activity rule.
            example: 'Activity Rule #1'
          type:
            type: string
            description: '`activity_rule`'
            example: activity_rule
      TransactionRelatedDataGiftCardCode:
        type: object
        title: Gift Card Code
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier generated by the system for each gift
              card code.
            example: gcc_abcr1234
      TransactionRelatedDataPurchaseRule:
        type: object
        title: Purchase Rule
        properties:
          purchase_fiat_amount:
            type: string
            format: decimal
            description: Amount of the purchase used to trigger the purchase rule.
          purchase_fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          purchase_rule_execution_id:
            type: string
            description: >-
              Unique internal identifier that was generated by the system for the
              purchase rule execution.
          purchase_rules:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: >-
                    Unique internal identifier generated by the system for each
                    purchase rule.
                  example: lr_abcr1234
                name:
                  type: string
                  description: Name of the purchase rule.
                  example: 'Purchase Rule #1'
                tags:
                  type: array
                  description: List of tags of the purchase rule
                  items:
                    type: string
                    example: promo20
          purchase_tags:
            type: array
            description: List of tags of the purchase used to trigger the purchase rules.
            items:
              type: string
              example: promo20
          type:
            type: string
            description: '`purchase_rule`'
            example: purchase_rule
      TransactionRelatedDataStandardRedemption:
        type: object
        title: Standard redemption
        properties:
          external_reference:
            type: string
          redemption_items:
            type: array
            items:
              type: object
              properties:
                category:
                  type: string
                  enum:
                    - car_rental
                    - digital_media
                    - educational_content
                    - experiences
                    - flight
                    - food_and_beverage
                    - general
                    - giftcards_and_evouchers
                    - health_and_wellness
                    - hotel
                    - insurance
                    - retail
                    - travel_other
                  example: general
                channel:
                  type: string
                country:
                  $ref: '#/components/schemas/GenericFieldCountry'
                fiat_amount:
                  type: string
                  format: decimal
                fiat_currency:
                  $ref: '#/components/schemas/GenericFieldCurrency'
                loyalty_amount:
                  type: integer
                metadata:
                  type: object
                product_code:
                  type: string
                product_description:
                  type: string
                promotion_code:
                  type: string
                sub_category:
                  type: string
          total_fiat_amount:
            type: string
          type:
            type: string
            description: '`standard_redemption`'
            example: standard_redemption
      TransactionRelatedDataStandardRedemptionAdjustment:
        type: object
        title: Standard redemption adjustment
        properties:
          external_reference:
            type: string
          original_redemption_transaction_id:
            type: string
          previous_transaction_id:
            type: string
          redemption_items:
            type: array
            items:
              type: object
              properties:
                category:
                  type: string
                  enum:
                    - car_rental
                    - digital_media
                    - educational_content
                    - experiences
                    - flight
                    - food_and_beverage
                    - general
                    - giftcards_and_evouchers
                    - health_and_wellness
                    - hotel
                    - insurance
                    - retail
                    - travel_other
                  example: general
                channel:
                  type: string
                country:
                  $ref: '#/components/schemas/GenericFieldCountry'
                fiat_amount:
                  type: string
                  format: decimal
                fiat_currency:
                  $ref: '#/components/schemas/GenericFieldCurrency'
                loyalty_amount:
                  type: integer
                metadata:
                  type: object
                product_code:
                  type: string
                product_description:
                  type: string
                promotion_code:
                  type: string
                sub_category:
                  type: string
          total_fiat_amount:
            type: string
          total_loyalty_amount:
            type: integer
          transaction_fiat_amount:
            type: string
          type:
            type: string
            description: '`standard_redemption_adjustment`'
            example: standard_redemption_adjustment
      TransactionRelatedDataStandardRedemptionCancellation:
        type: object
        title: Standard redemption cancellation
        properties:
          original_redemption_transaction_id:
            type: string
          previous_transaction_id:
            type: string
          total_fiat_amount:
            type: string
          type:
            type: string
            description: '`standard_redemption_cancellation`'
            example: standard_redemption_cancellation
      PartnerListRequest:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Either provide a value in this parameter or in loyalty_currency.
              Providing values in both the parameters in a call returns an error.
              This can be found in the 'My Partners' section in the Management
              Dashboard.
            example: part_abcd1234
          loyalty_currency:
            type: string
            description: >-
              Either provide value in this parameter or in partner_id. Providing
              values in both the parameters in a call returns an error. This
              unique identifier represents the loyalty program currency to which
              the member belongs. It is a unique shortcode Identifier assigned by
              the system to each loyalty currency. It can be found in the 'My
              Currency' section under the 'About My Currency' screen in the
              Management Dashboard. For the Currency Identifier of your partners'
              currencies refer to the Currency Symbol field in the 'My Partners'
              section in the Management Dashboard or Endpoints to obtain Partners'
              information.
      PartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/PartnerListItem'
      PartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: >-
              Information regarding the Loyalty Currency of the Partner if the
              Partner is a Currency Owner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          active_partnerships:
            type: object
            properties:
              exchange_in:
                type: boolean
                description: >-
                  Do you allow the Partner's members to exchange their Loyalty
                  Currency Units INTO your Loyalty Currency Units?
                example: true
              exchange_out:
                type: boolean
                description: >-
                  Do you allow your members to exchange their Loyalty Currency
                  Units OUT to your Partner's Loyalty Currency Units?
                example: true
              redemption:
                type: boolean
                description: >-
                  Do you allow your members to redeem their Loyalty Currency Units
                  in exchange for the Partner's products and services?
                example: true
              issuing:
                type: boolean
                description: >-
                  Do you allow the Partner to give/issue your Loyalty Currency
                  Units to your members?
                example: true
              currency_owner_for_issuance:
                type: boolean
                description: >-
                  Do you give/issue the Partner's Loyalty Currency Units to its
                  members?
                example: true
              currency_owner_for_redemption:
                type: boolean
                description: >-
                  Do you accept Partner's Loyalty Currency Units as a form of
                  payment for your products and services?
                example: true
      ExchangeOutPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/ExchangeOutPartnerListItem'
      ExchangeOutPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: >-
              Information regarding the Loyalty Currency of the Partner if the
              Partner is a Currency Owner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
            properties:
              batch_process:
                type: boolean
                description: Does the Partner have real-time connectivity or a batch process?
                example: false
              conversion_ratio_per_unit:
                type: string
                format: decimal
                example: '1.2'
              exchange_enabled:
                type: boolean
                example: true
              execute_action:
                type: object
                description: >-
                  This object provides information about what fields are required
                  to execute the exchange.
                properties:
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      execute the exchange. This list can be used to dynamically
                      display in your HTML form to ask the member to input the
                      fields and map them to the loyalty_program_identifiers input
                      parameter in the member parameter of the Exchange Endpoints.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
              maximum_member_transaction_amount:
                type: integer
                example: 100
              member_lookup_action:
                type: object
                description: >-
                  This object provides information if you could validate the
                  member before submitting the transaction and what parameters are
                  required to validate the member. If member validation action is
                  available, you can use 'Lookup a Member' Endpoint to validate
                  the member information. If member valiation action is not
                  available then the member will be validated when a transaction
                  is submitted
                properties:
                  member_lookup_available:
                    type: boolean
                    description: >-
                      This field provides information if a member can be validated
                      before submitting the transaction It is used to design the
                      UX flow around when to ask the member to input their loyalty
                      program identifiers.
                    example: true
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      lookup the member information. This list can be used to
                      dynamically display in your HTML form to ask the member to
                      input the fields and map them to the
                      loyalty_program_identifiers input parameter in the 'Lookup a
                      Member' Endpoint.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
              minimum_member_transaction_amount:
                type: integer
                example: 10
      ExchangeInPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/ExchangeInPartnerListItem'
      ExchangeInPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: >-
              Information regarding the Loyalty Currency of the Partner if the
              Partner is a Currency Owner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
            properties:
              exchange_enabled:
                type: boolean
                example: true
      IssuingPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/IssuingPartnerListItem'
      IssuingPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: >-
              Information regarding the Loyalty Currency of the Partner if the
              Partner is also a Currency Owner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
      RedemptionPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/RedemptionPartnerListItem'
      RedemptionPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: >-
              Information regarding the Loyalty Currency of the Partner if the
              Partner is also a Currency Owner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
            properties:
              adjustment_allowed:
                type: boolean
                description: >-
                  Does your Partner has access to modify or refund an already made
                  redemption?
                example: false
      RedemptionCurrencyPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/RedemptionCurrencyPartnerListItem'
      RedemptionCurrencyPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: Information regarding the Loyalty Currency of the Partner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
            properties:
              adjustment_allowed:
                type: boolean
                description: >-
                  Do you have access to modify or refund an already made
                  redemption?
                example: false
              member_lookup_action:
                type: object
                description: >-
                  This object provides information if you could validate the
                  member before submitting the transaction and what parameters are
                  required to validate the member. If member validation action is
                  available, you can use 'Lookup a Member' Endpoint to validate
                  the member information. If member valiation action is not
                  available then the member will be validated when a transaction
                  is submitted.
                properties:
                  member_lookup_available:
                    type: boolean
                    description: >-
                      This field provides information if a member can be validated
                      before submitting the transaction It is used to design the
                      UX flow around when to ask the member to input their loyalty
                      program identifiers.
                    example: true
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      lookup the member information. This list can be used to
                      dynamically display in your HTML form to ask the member to
                      input the fields and map them to the
                      loyalty_program_identifiers input parameter in the 'Lookup a
                      Member' Endpoint.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
              execute_action:
                type: object
                description: >-
                  This object provides information about what fields are required
                  to execute the exchange.
                properties:
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      execute the exchange. This list can be used to dynamically
                      display in your HTML form to ask the member to input the
                      fields and map them to the loyalty_program_identifiers input
                      parameter in the member parameter of the Redemption
                      Endpoints.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
      IssuanceCurrencyPartnersListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/IssuanceCurrencyPartnerListItem'
      IssuanceCurrencyPartnerListItem:
        type: object
        properties:
          partner_id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            description: Name of the Company
            example: XYZ International
          logo:
            type: string
            description: URI to the logo of the Partner
            example: https://example.com/image.png
          loyalty_currency:
            type: object
            description: Information regarding the Loyalty Currency of the Partner.
            properties:
              id:
                type: string
                description: Unique identifier representing the loyalty program currency.
                example: EXAMPLE_POINTS
              name:
                type: string
                description: >-
                  Commonly used user-friendly short name or description of the
                  loyalty program currency.
                example: XYZ Rewards Points
          partnership_details:
            type: object
            properties:
              batch_process:
                type: boolean
                description: Does the Partner have real-time connectivity or a batch process?
                default: false
              execute_action:
                type: object
                description: >-
                  This object provides information about what fields are required
                  to execute the accrual.
                properties:
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      execute the exchange. This list can be used to dynamically
                      display in your HTML form to ask the member to input the
                      fields and map them to the loyalty_program_identifiers input
                      parameter in the member parameter of the Accrual Endpoints.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
              loyalty_rules_execution_mode:
                type: string
                description: >-
                  This field identifies if there are multiple loyalty rules to be
                  executed based on the purchase details, the system should
                  combine all the rules and create only one transaction or execute
                  each rule separately to create a corresponding transaction. The
                  default mode, and recommended, is `multiple_transactions.
                  However, note that some partner loyalty systems may not allow
                  multiple transactions. For such loyalty partners, the Currency
                  Alliance platform will automatically override this field to
                  create `single_transaction`.
                enum:
                  - multiple_transactions
                  - single_transaction
              member_lookup_action:
                type: object
                description: >-
                  This object provides information if you could validate the
                  member before submitting the transaction and what parameters are
                  required to validate the member. If member validation action is
                  available, you can use 'Lookup a Member' Endpoint to validate
                  the member information. If member valiation action is not
                  available then the member will be validated when a transaction
                  is submitted.
                properties:
                  member_lookup_available:
                    type: boolean
                    description: >-
                      This field provides information if a member can be validated
                      before submitting the transaction It is used to design the
                      UX flow around when to ask the member to input their loyalty
                      program identifiers.
                    example: true
                  required_fields:
                    type: array
                    description: >-
                      The list of fields required to be sent in the request to
                      lookup the member information. This list can be used to
                      dynamically display in your HTML form to ask the member to
                      input the fields and map them to the
                      loyalty_program_identifiers input parameter in the 'Lookup a
                      Member' Endpoint.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: HTML field id
                          example: card_number
                        name:
                          type: string
                          description: HTML field name to be displayed to the user
                          example: Loyalty Card number
      PartnerDataListResponse:
        type: object
        properties:
          field:
            type: string
            example: codes
          values:
            type: array
            items:
              type: object
      ReportCustomGiftCardBrand:
        type: object
        properties:
          id:
            type: string
            description: >
              Unique identifier for each Gift card. It can be found in the "More
              Detail" modal of the gift card in the following section in the
              Management Dashboard


              Redemptions > Gift Card Management
            example: gcb_TEST
          name:
            type: string
            description: Name of the Gift card
            example: TEST
      ReportCustomGiftCardPartner:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique internal identifier for the Partner on the Currency Alliance
              platform.
            example: part_abcd1234
          company_name:
            type: string
            example: Currency Alliance
          loyalty_currency:
            $ref: '#/components/schemas/ReportCustomGiftCardPartnerLoyaltyCurrency'
      ReportCustomGiftCardPartnerLoyaltyCurrency:
        type: object
        properties:
          id:
            type: string
          short_name:
            type: string
      ReportCustomGiftCardInventory:
        type: object
        properties:
          id:
            type: string
            example: gcb_TEST
          denominations:
            type: object
            additionalProperties:
              x-additionalPropertiesName: denomination
              type: object
              properties:
                available:
                  type: integer
                issued:
                  type: integer
                total:
                  type: integer
                unavailable:
                  type: integer
            example:
              '5.0':
                available: 5
                issued: 5
                total: 15
                unavailable: 5
          fiat_currency:
            $ref: '#/components/schemas/GenericFieldCurrency'
          name:
            type: string
            example: Test gift card
          total_codes:
            type: integer
            example: 10
      ReportCustomGiftCardListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              type: object
              properties:
                expiration_date:
                  type: string
                  format: date
                  description: Date when the Gift card expires.
                  example: '2038-01-19'
                fiat_amount:
                  type: number
                  description: The amount of the Gift card.
                  example: '10'
                fiat_currency:
                  $ref: '#/components/schemas/GenericFieldCurrency'
                gift_card:
                  $ref: '#/components/schemas/ReportCustomGiftCardBrand'
                gift_card_code:
                  type: string
                  description: Code of the Gift card; the code will be visible to the user.
                  example: 1234-ABCDEF-5678
                id:
                  type: string
                  description: >-
                    Unique internal identifier generated by the system for each
                    issued Gift card. This identifier should be used to reference
                    a specific Gift card issued/redeemed by a member.
                  example: gcc_abc123
                partner:
                  $ref: '#/components/schemas/ReportCustomGiftCardPartner'
                pin:
                  type: string
                  description: >-
                    Represents the pin code of the Gift card. Some Gift cards have
                    a pin code associated with them as part of security for a
                    member to be able to use that Gift card.
                  example: null
                redemption_status:
                  type: string
                  nullable: true
                  description: Redemption status of the giftcard
                  enum:
                    - redeemed
                    - unredeemed
                    - null
                  example: null
      ReportCustomGiftCardInventoryListResponse:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/ReportCustomGiftCardInventory'
      ReportExchangeListResponse:
        type: array
        items:
          type: object
          properties:
            created_at:
              type: string
              description: The date and time when this transaction was completed.
              format: date
              example: 2019-03-04T11:50:03+0000
            destination_amount:
              type: integer
              description: >-
                The transaction amount rewarded in the destination Loyalty
                Currency Unit.
              example: 10
            destination_loyalty_currency:
              type: string
              description: >-
                This unique identifier represents the destination loyalty program
                currency to which the member belongs.
              example: EXAMPLE_POINTS
            destination_id:
              type: string
              description: >-
                Unique internal identifier generated by the Currency Alliance
                system for each Transaction.
              example: tx_abcd1234
            destination_member:
              type: string
              description: The member identifier(s) in the destination loyalty program.
              example: M12334532
            external_reference:
              type: string
              description: >-
                A unique identifier from your system provided during the original
                exchange request as a reference.
              example: foo
            origin_amount:
              type: integer
              description: >-
                The Loyalty Currency Units exchanged out from the origin loyalty
                program
              example: 20
            origin_loyalty_currency:
              type: string
              description: >-
                This unique identifier represents the origin loyalty program
                currency to which the member belongs.
              example: EXAMPLE_POINTS
            origin_id:
              type: string
              description: >-
                Unique internal identifier generated by the Currency Alliance
                system for each Transaction.
              example: tx_abcd1234
            origin_member:
              type: string
              description: The member identifier(s) in the origin loyalty program.
              example: M12334532
      Cohort:
        type: object
        properties:
          api_identifier:
            type: string
            example: part_deprecated
            deprecated: true
          id:
            type: string
            example: part_abc123
          company_name:
            type: string
            example: FooBar
          status:
            type: string
            enum:
              - enabled
              - disabled
            example: enabled
      CohortList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/Cohort'
      CohortCreateUpdateRequest:
        type: object
        required:
          - company_name
        properties:
          company_name:
            type: string
            example: FooBar
          status:
            type: string
            enum:
              - enabled
              - disabled
            example: enabled
      CohortPurchaseRule:
        type: object
        properties:
          id:
            type: string
            example: rl_abc123
          loyalty_currency:
            description: >-
              This is the loyalty currency identifier. It is a unique shortcode
              Currency Identifier assigned to each currency; it can be found in
              the 'My Currency' section under 'About My Currency' screen in the
              Management Dashboard. For the Currency Identifier of your partners'
              currencies refer to the 'My Partners' section in the Management
              Dashboard.
            type: string
            example: LLL
          name:
            type: string
            example: 'Purchase Rule #1'
          reason:
            type: string
            example: Lorem Ipsum
          tags:
            type: array
            items:
              type: string
              example: promo20
      CohortPurchaseRuleList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/CohortPurchaseRule'
      CohortPurchaseRuleUpdateRequest:
        type: object
        properties:
          enabled:
            type: boolean
            example: true
      CohortActivityRule:
        type: object
        properties:
          activity_identifier:
            type: string
            example: birthday
          id:
            type: string
            example: rl_abc123
          loyalty_currency:
            description: >-
              This is the loyalty currency identifier. It is a unique shortcode
              Currency Identifier assigned to each currency; it can be found in
              the 'My Currency' section under 'About My Currency' screen in the
              Management Dashboard. For the Currency Identifier of your partners'
              currencies refer to the 'My Partners' section in the Management
              Dashboard.
            type: string
            example: LLL
          name:
            type: string
            example: 'Activity Rule #1'
          reason:
            type: string
            example: Lorem Ipsum
      CohortActivityRuleList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/CohortActivityRule'
      CohortActivityRuleUpdateRequest:
        type: object
        properties:
          enabled:
            type: boolean
            example: true
      DeprecatedAccount:
        type: object
        properties:
          id:
            type: string
            description: Unique internal identifier generated by the system for each account.
            example: acc_abc123
          balance:
            type: integer
            example: 12345
          loyalty_currency:
            description: >-
              This is the loyalty currency identifier. It is a unique shortcode
              Currency Identifier assigned to each currency; it can be found in
              the 'My Currency' section under 'About My Currency' screen in the
              Management Dashboard. For the Currency Identifier of your partners'
              currencies refer to the 'My Partners' section in the Management
              Dashboard.
            type: string
            example: LLL
          owner:
            type: object
            properties:
              id:
                type: string
                example: mp_abc123
              type:
                type: string
                enum:
                  - partner
                  - member
                example: partner
      DeprecatedAccountList:
        type: object
        properties:
          count:
            $ref: '#/components/schemas/GenericListCountField'
          next:
            $ref: '#/components/schemas/GenericListNextField'
          previous:
            $ref: '#/components/schemas/GenericListPreviousField'
          results:
            type: array
            items:
              $ref: '#/components/schemas/DeprecatedAccount'
      ExternalReferenceField:
        type: string
        description: >-
          A unique identifier from your system that can be used as a reference
          during the reconciliation process. This could be a GUID, internal
          transaction identifier, invoice number, booking number, itinerary
          number, or any other unique number in your system that can be used to
          uniquely identify the action. Even though this is not a required field,
          it is strongly recommended that you provide value in this field.
      LoyaltySystemDataField:
        type: object
        description: >-
          This parameter requires you to send additional information to connect to
          the loyalty program. For example, user_id, application_id, partner_code,
          etc. The Partners Endpoint provides the details on which data fields are
          mandatory inside this parameter.
      MemberIdentifiersField:
        type: object
        description: >
          This parameter requires you to send the loyalty_program_identifiers of
          the member. Each Loyalty Program may have a different set of identifiers
          that together uniquely identifies a member. For example, one loyalty
          program may only require the membership id but another loyalty program
          may require a combination of membership id and last name.
        example:
          id: M12334532
      MemberBankAccountsField:
        type: array
        items:
          type: object
          properties:
            account_holder:
              type: string
            account_name:
              type: string
            account_number:
              type: string
            bank_code:
              type: string
            bank_name:
              type: string
            bic_swift:
              type: string
            branch_code:
              type: string
            country:
              $ref: '#/components/schemas/GenericFieldCountry'
            fiat_currency:
              $ref: '#/components/schemas/GenericFieldCurrency'
            id:
              type: string
            iban:
              type: string
            non_iban_code:
              type: string
        example:
          id: M12334532
      MetadataField:
        type: object
        description: >-
          Allows up to 5 levels of nesting depth. This data content can include
          information about the purchase such as items included, information about
          the store, information about the member, or anything else that could be
          helpful for analytics and reporting.
        example:
          foo: bar
      TransactionFieldOriginRequest:
        description: >
          The origin for the transaction i.e. who is issuing or providing the
          loyalty currency units. Depending on the type of transaction, it could
          either be a member or a partner account.


          In case of transferring units from a partner account, provide the
          Account ID as a string input. You could also send the Partner ID in this
          field. In the latter case, the system will automatically select the
          default account associated with the Partner ID.


          In case of transferring units from a member – you should send the
          loyalty_program_identifiers (such as membership id, last name, etc) as
          an object.
        oneOf:
          - $ref: '#/components/schemas/MemberIdentifiersField'
          - type: string
            title: Account id
            description: >-
              Account ID can be found in the Management Dashboard screen 'Account
              Settings' > 'About My Company' > 'Accounts'.
            example: acc_abcd1234
          - type: string
            title: Partner id
            description: >-
              This can be found in the Management Dashboard screen ‘Loyalty API’ >
              ‘Credentials’.
            example: part_abcd1234
      TransactionFieldDestinationRequest:
        description: >
          The destination for the transaction i.e. who is receiving the loyalty
          currency units. Depending on the type of transaction, it could either be
          a member or a partner account.


          In case of transferring units to a partner account, provide the Account
          ID as a string input. You could also send the Partner ID in this field.
          In the latter case, the system will automatically select the default
          account associated with the Partner ID.


          In case of transferring units from a member – you should send the
          loyalty_program_identifiers (such as membership id, last name, etc) as
          an object.
        oneOf:
          - $ref: '#/components/schemas/MemberIdentifiersField'
          - type: string
            title: Account id
            description: >-
              Account ID can be found in the Management Dashboard screen 'Account
              Settings' > 'About My Company' > 'Accounts'.
            example: acc_abcd1234
          - type: string
            title: Partner id
            description: >-
              This can be found in the response message of the Endpoints to obtain
              Partners information.
            example: part_abcd1234
      TransactionFieldReasonCode:
        type: string
        description: >-
          Reason code for why the transaction was created. This field is used for
          reporting purposes if the ‘reason’ field is dynamic and can vary within
          one category of transactions.
        enum:
          - bonus_reward
          - customer_service_issue
          - gift
          - lottery_reward
          - other
          - participation_check_in_reward
          - product_purchase
          - referral_reward
          - service_purchase
          - sharing_information_reward
          - social_action_reward
          - special_event_reward
        example: product_purchase
      StandardRedemptionRequestItemList:
        type: array
        description: >-
          An list of products and services representing itemized invoice based on
          product categories. Each item contains the amount or the price of the
          product or service to identify the Loyalty Currency Units required to be
          redeemed in exchange.
        items:
          oneOf:
            - title: Fiat Amount
              type: object
              required:
                - fiat_amount
                - fiat_currency
                - category
              properties:
                category:
                  type: string
                  enum:
                    - car_rental
                    - digital_media
                    - educational_content
                    - experiences
                    - flight
                    - food_and_beverage
                    - general
                    - giftcards_and_evouchers
                    - health_and_wellness
                    - hotel
                    - insurance
                    - retail
                    - travel_other
                  example: general
                channel:
                  type: string
                  example: Mobile App
                country:
                  $ref: '#/components/schemas/GenericFieldCountry'
                fiat_amount:
                  type: string
                  format: decimal
                  example: '340.35'
                  description: |
                    Amount for the selected product or service in fiat currency.
                fiat_currency:
                  $ref: '#/components/schemas/GenericFieldCurrency'
                metadata:
                  $ref: '#/components/schemas/MetadataField'
                product_code:
                  type: string
                product_description:
                  type: string
                promotion_code:
                  type: string
                  example: promo123
                sub_category:
                  type: string
                  example: concert_tickets
            - title: Loyalty amount
              type: object
              required:
                - loyalty_amount
                - category
              properties:
                category:
                  type: string
                  enum:
                    - car_rental
                    - digital_media
                    - educational_content
                    - experiences
                    - flight
                    - food_and_beverage
                    - general
                    - giftcards_and_evouchers
                    - health_and_wellness
                    - hotel
                    - insurance
                    - retail
                    - travel_other
                  example: general
                channel:
                  type: string
                  example: Mobile App
                country:
                  $ref: '#/components/schemas/GenericFieldCountry'
                loyalty_amount:
                  type: integer
                  example: 45564
                  description: >
                    Amount of Loyalty Currency units to redeem in exchange for the
                    selected product or service.


                    NOTE: Use this parameter only in the scenarios where you are
                    certain of the redemption value per Loyalty Currency unit so
                    that there are no issues in reconciliation and settlement with
                    partners. Because the value of Loyalty Currency Units can
                    change over time, it is strongly advised to use the
                    fiat_amount parameter to obtain the correct number of Loyalty
                    Currency Units
                metadata:
                  $ref: '#/components/schemas/MetadataField'
                product_code:
                  type: string
                product_description:
                  type: string
                promotion_code:
                  type: string
                  example: promo123
                sub_category:
                  type: string
                  example: concert_tickets
          maxItems: 50
      StandardRedemptionResponseItemList:
        type: array
        description: >-
          An list of products and services representing itemized invoice based on
          product categories. Each item contains the amount or the price of the
          product or service to identify the Loyalty Currency Units required to be
          redeemed in exchange.
        items:
          type: object
          properties:
            category:
              type: string
              enum:
                - car_rental
                - digital_media
                - educational_content
                - experiences
                - flight
                - food_and_beverage
                - general
                - giftcards_and_evouchers
                - health_and_wellness
                - hotel
                - insurance
                - retail
                - travel_other
              example: general
            channel:
              type: string
              example: Mobile App
            country:
              $ref: '#/components/schemas/GenericFieldCountry'
            fiat_amount:
              type: string
              format: decimal
              example: '340.35'
              description: |
                Amount for the selected product or service in fiat currency.
            fiat_currency:
              $ref: '#/components/schemas/GenericFieldCurrency'
            loyalty_amount:
              type: integer
              example: 45564
              description: >
                Amount of Loyalty Currency units to redeem in exchange for the
                selected product or service.


                NOTE: Use this parameter only in the scenarios where you are
                certain of the redemption value per Loyalty Currency unit so that
                there are no issues in reconciliation and settlement with
                partners. Because the value of Loyalty Currency Units can change
                over time, it is strongly advised to use the fiat_amount parameter
                to obtain the correct number of Loyalty Currency Units
            metadata:
              $ref: '#/components/schemas/MetadataField'
            sub_category:
              type: string
              example: concert_tickets
      GenericFieldCurrency:
        type: string
        description: >-
          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the fiat
          currency
        example: USD
      GenericFieldCountry:
        type: string
        description: >-
          [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)
          of the country
        example: USA
      GenericError:
        type: object
        properties:
          errors:
            type: array
            items:
              type: object
              properties:
                message:
                  type: string
                field:
                  type: string
                code:
                  type: string
        example:
          errors:
            - message: A valid integer is required.
              field: amount
              code: invalid
      GenericListCountField:
        type: integer
        description: Total number of items returned.
        example: 10
      GenericListNextField:
        type: string
        description: GET parameter for the next page.
        example: '?page=2'
      GenericListPreviousField:
        type: string
        description: GET parameter for the previous page.
        example: null
    parameters:
      created_at__range:
        in: query
        name: created_at__range
        schema:
          type: string
          format: YYYY-MM-DD[Thh:mm[:ss][Z]],YYYY-MM-DD[Thh:mm[:ss][Z]]
        required: false
        description: >-
          Provide the date range, in the format of two dates separated by a comma,
          to filter the items based on when when they were created. The first
          value is the starting date and the second value is the end date. The end
          date is optional if you want to retrieve all the items since the
          starting date.
        example: 2020-05-02,2020-06-04T09:35:25Z
      fiat_currency:
        in: query
        name: fiat_currency
        schema:
          type: string
        required: false
        description: >-
          [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the fiat
          currency
      gift_card_code_id:
        in: path
        name: id
        schema:
          type: string
        required: true
      gift_card_id:
        in: path
        name: id
        schema:
          type: string
        required: true
      loyalty_currency:
        in: query
        name: loyalty_currency
        schema:
          type: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to which
          the member belongs. It is a unique shortcode Identifier assigned by the
          system to each loyalty currency. It can be found in the 'My Currency'
          section under the 'About My Currency' screen in the Management
          Dashboard. For the Currency Identifier of your partners' currencies
          refer to the Currency Symbol field in the 'My Partners' section in the
          Management Dashboard or Endpoints to obtain Partners' information.
      page_number:
        in: query
        name: page
        schema:
          type: integer
        required: false
        description: >-
          Provide value to retrieve the exact page of results. If no value is
          provided, the system will return the first page.
      page_size:
        in: query
        name: page_size
        schema:
          type: integer
          minimum: 1
          maximum: 500
          default: 50
        required: false
        description: >-
          Provide a value between 1 to 500 to return the number of result items on
          each page.
      partners_partner_id:
        in: query
        name: partner_id
        schema:
          type: string
        required: false
        description: >-
          This unique identifier represents the loyalty program currency to which
          the member belongs. It is a unique shortcode Identifier assigned by the
          system to each loyalty currency. It can be found in the 'My Currency'
          section under the 'About My Currency' screen in the Management
          Dashboard. For the Currency Identifier of your partners' currencies
          refer to the Currency Symbol field in the 'My Partners' section in the
          Management Dashboard or Endpoints to obtain Partners' information.
      partners_language_display:
        in: query
        name: language_display
        schema:
          type: string
        required: false
        description: >-
          [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) of the language you
          want name of the `required_fields` to be shown. Defaults to english if
          there is no translation.
      purchase_rule_execution_id:
        in: path
        name: id
        schema:
          type: string
        required: true
        description: >-
          Unique internal identifier that was generated by the system for the
          purchase rule execution.
      reports_gift_card_id:
        in: query
        name: gift_card_id
        schema:
          type: string
        required: false
      transaction_id:
        in: path
        name: id
        schema:
          type: string
        required: true
        description: Unique internal identifier generated by the system for each transaction.
      transaction_status:
        in: query
        name: status
        schema:
          type: string
          enum:
            - adjusted
            - cancelled
            - completed
            - pending
            - pending_external_approval
            - rejected
            - reversed
        required: false
        description: >-
          Provide value to filter transactions by status. Multiple values are
          accepted, separated by commas.
      transaction_type:
        in: query
        name: type
        schema:
          type: string
          enum:
            - accrual
            - gift_card_exchange
            - loyalty_currency_expiration
            - loyalty_currency_generation
            - loyalty_currency_purchase
            - loyalty_currency_withdrawal
            - member_exchange
            - redemption
            - reversal
            - transfer
            - wholesale_exchange
        required: false
        description: >-
          Provide value to filter transactions by type. Multiple values are
          accepted, separated by commas.
      cohort_id:
        in: path
        name: cohort_id
        schema:
          type: string
        required: true
        description: Cohort id.
      rule_id:
        in: path
        name: rule_id
        schema:
          type: string
        required: true
        description: Loyalty rule id.
konfigCliVersion: 1.38.37
