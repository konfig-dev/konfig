publishJson:
  company: OneLogin
  serviceName: false
  sdkName: one-login-{language}-sdk
  clientName: OneLogin
  metaDescription: >-
    OneLogin provides a comprehensive cloud-based identity and access management
    platform that enables companies to secure their data and applications. With
    features like single sign-on, multi-factor authentication, and user
    provisioning, OneLogin simplifies and strengthens security protocols for
    businesses of all sizes. Trusted by organizations worldwide, OneLogin helps
    streamline access management processes and enhance cybersecurity measures.
  apiStatusUrls: false
  homepage: onelogin.com
  developerDocumentation: developers.onelogin.com/
  categories:
    - identity_and_access_management
    - password_management
    - security
    - authentication
    - access_management
    - single_signon
    - idaas
    - sso
    - identity_management
    - multifactor_authentication
    - credential_vaulting
    - iam
rawSpecString: |
  openapi: 3.0.0
  info:
    version: 1.0.0-oas3
    title: OneLogin API
    description: This is an administrative API for OneLogin customers
  security:
    - application: []
  servers:
    - url: https://api.{region}.onelogin.com/api/1
      variables:
        region:
          enum:
            - us
            - eu
          default: us
          description: The location of the OneLogin instance
  paths:
    /users:
      get:
        summary: Get Users
        description: Returns a list of users. Supports filtering and paging.
        tags:
          - users
        parameters:
          - in: query
            name: directory_id
            schema:
              type: integer
          - in: query
            name: email
            schema:
              type: string
          - in: query
            name: external_id
            schema:
              type: string
          - in: query
            name: firstname
            schema:
              type: string
          - in: query
            name: id
            schema:
              type: integer
          - in: query
            name: manager_ad_id
            schema:
              type: integer
          - in: query
            name: role_id
            schema:
              type: integer
          - in: query
            name: samaccountname
            schema:
              type: string
          - in: query
            name: since
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            schema:
              type: string
              format: date-time
          - in: query
            name: username
            schema:
              type: string
          - in: query
            name: userprincipalname
            schema:
              type: string
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UsersResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
      post:
        summary: Create a User
        description: Creates a new user account in OneLogin
        tags:
          - users
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: CreateUserResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      $ref: '#/components/schemas/User'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user to create
    /users/{id}:
      get:
        summary: Get a User
        description: Returns a single user
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UserResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      $ref: '#/components/schemas/User'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
      put:
        summary: Update a User
        description: Use to update a user by ID
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UpdateUserResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      $ref: '#/components/schemas/User'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user to update
      delete:
        summary: Delete a user account
        description: Use this call to delete a user by ID.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/apps:
      get:
        summary: Get User Apps
        description: Get a list of apps accessible by a user, not including personal apps.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UserAppsResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
                    data:
                      type: array
                      title: UserApps
                      items:
                        $ref: '#/components/schemas/UserApp'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/roles:
      get:
        summary: Get User Roles
        description: Get a list of role IDs that have been assigned to a user.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UserRolesResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        type: integer
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/add_roles:
      put:
        summary: Assign Role to User
        description: Assign one or more existing roles to a user.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
          description: The roles to assign
    /users/{id}/remove_roles:
      put:
        summary: Remove Roles from User
        description: Remove one or more existing roles to a user.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
          description: The roles to remove
    /users/{id}/set_state:
      put:
        summary: Set the State for a user.
        description: >-
          States describe a stage in a process (such as user account approval).
          User state determines the possible statuses a user account can be in.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - state
                properties:
                  state:
                    description: >-
                      Unapproved: 0 Approved (licensed): 1 Rejected: 2 Unlicensed:
                      3
                    type: integer
    /users/{id}/logout:
      put:
        summary: Log a user out of any and all sessions
        description: Log a user out of any and all sessions.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/lock_user:
      put:
        summary: Lock a user account
        description: >-
          Use this call to lock a user’s account based on the policy assigned to
          the user, for a specific time you define in the request, or until you
          unlock it.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - locked_until
                properties:
                  locked_until:
                    description: >-
                      Set to the number of minutes for which you want to lock the
                      user account.
                    type: integer
    /users/{id}/set_custom_attributes:
      put:
        summary: Set a custom attribute
        description: >-
          Set a custom attribute field (also known as a custom user field) value
          for a user.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - custom_attributes
                properties:
                  custom_attributes:
                    description: The attributes to set
                    type: object
                    additionalProperties:
                      type: string
    /users/{id}/mfa_token:
      post:
        summary: Generate Temp MFA Token
        description: >-
          Use to generate a temporary MFA token that can be used in place of other
          MFA tokens for a set time period. For example, use this token for
          account recovery.
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '201':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: GenerateMfaTokenResponse
                  properties:
                    reusable:
                      type: boolean
                    mfa_token:
                      type: string
                      example: '82974462'
                    expires_at:
                      type: string
                      format: date-time
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  expires_in:
                    description: Set the duration of the token in seconds.
                    type: integer
                  reusable:
                    description: >-
                      Defines if the token is reusable multiple times within the
                      expiry window.
                    type: boolean
    /users/custom_attributes:
      get:
        summary: Get Custom Attributes
        description: >-
          Returns a list of all custom attribute fields (also known as custom user
          fields) that have been defined for your account.
        tags:
          - users
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: CustomAttributesResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /users/set_password_clear_text/{id}:
      put:
        summary: Set a the password for a user
        description: Set a the password for a user
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - password
                  - password_confirmation
                properties:
                  password:
                    description: 'The new password '
                    type: string
                  password_confirmation:
                    description: The new password repeated
                    type: string
                  validate_policy:
                    description: >-
                      Defaults to false. This will validate the password against
                      the users OneLogin password policy.
                    type: string
    /users/set_password_using_salt/{id}:
      put:
        summary: Set a pre salted password for a user
        description: Set a pre salted password for a user
        tags:
          - users
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - password
                  - password_confirmation
                  - password_algorithm
                properties:
                  password:
                    description: 'The new password '
                    type: string
                  password_confirmation:
                    description: The new password repeated
                    type: string
                  password_algorithm:
                    description: Set to salt+sha256.
                    type: string
                  password_salt:
                    description: >-
                      If your password hash has been salted then you can provide
                      the salt used in this param.
                    type: string
    /login/auth:
      post:
        summary: Authenticate a user
        description: >-
          Use this API to generate a session login token in scenarios in which MFA
          may or may not be required. Both scenarios are supported. A session
          login token expires two minutes after creation.
        tags:
          - login
        parameters:
          - in: header
            name: Custom-Allowed-Origin-Header-1
            description: >-
              Required for CORS requests only. Set to the Origin URI from which
              you are allowed to send a request using CORS.
            schema:
              type: string
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UserLoginResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: object
                      title: Response
                      properties:
                        status:
                          type: string
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                            firstname:
                              type: string
                            lastname:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                        return_to_url:
                          type: string
                        expires_at:
                          type: string
                        session_token:
                          type: string
                        state_token:
                          type: string
                        callback_url:
                          type: string
                        devices:
                          type: array
                          items:
                            type: object
                            properties:
                              device_id:
                                type: integer
                              device_type:
                                type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - username_or_email
                  - password
                  - subdomain
                properties:
                  username_or_email:
                    description: >-
                      Set to the username or email of the user that you want to
                      log in.
                    type: string
                  password:
                    description: Set to the password of the user that you want to log in.
                    type: string
                  subdomain:
                    description: Set to the subdomain of the user that you want to log in.
                    type: string
                  return_to_url:
                    description: >-
                      Leave this value blank for now. Intended for future use with
                      multi-factor authentication functionality.
                    type: string
                  ip_address:
                    description: >-
                      Leave this value blank for now. Intended for future use with
                      multi-factor authentication functionality. It will be used
                      to set to the IP address of the user accessing your login
                      page.
                    type: string
                  browser_id:
                    description: >-
                      Leave this value blank for now. Intended for future use with
                      multi-factor authentication functionality. It will be used
                      to set to the ID of the browser being used by the user to
                      access your login page.
                    type: string
    /login/verify_factor:
      post:
        summary: Verify an MFA token
        description: >-
          Verify a one-time password (OTP) value, provided for a second factor,
          when multi-factor authentication (MFA) is required.
        tags:
          - login
        parameters:
          - in: header
            name: Custom-Allowed-Origin-Header-1
            description: >-
              Required for CORS requests only. Set to the Origin URI from which
              you are allowed to send a request using CORS.
            schema:
              type: string
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: LoginVerifyMfaResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: object
                      properties:
                        status:
                          type: string
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                            firstname:
                              type: string
                            lastname:
                              type: string
                            username:
                              type: string
                            email:
                              type: string
                        return_to_url:
                          type: string
                        expires_at:
                          type: string
                        session_token:
                          type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - device_id
                  - state_token
                properties:
                  device_id:
                    description: >-
                      Provide the MFA device_id you are submitting for
                      verification.
                    type: integer
                  state_token:
                    description: >-
                      Provide the state_token associated with the MFA device_id
                      you are submitting for verification.
                    type: string
                  otp_token:
                    description: >-
                      Provide the OTP value for the MFA factor you are submitting
                      for verification.
                    type: string
                  do_not_notify:
                    default: false
                    description: >-
                      When verifying MFA via Protect Push, set this to true to
                      stop additional push notifications being sent to the
                      OneLogin Protect device.
                    type: boolean
    /saml_assertion:
      post:
        summary: Generate SAML assertion
        description: Use this API to generate a SAML assertion.
        tags:
          - saml
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: SamlAssertionResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - username_or_email
                  - password
                  - subdomain
                  - app_id
                properties:
                  username_or_email:
                    description: >-
                      Set to the username or email of the user that you want to
                      log in.
                    type: string
                  password:
                    description: Set to the password of the user that you want to log in.
                    type: string
                  subdomain:
                    description: Set to the subdomain of the user that you want to log in.
                    type: string
                  app_id:
                    description: >-
                      App ID of the app for which you want to generate a SAML
                      token. This is the app ID in OneLogin.
                    type: integer
                  ip_address:
                    description: >-
                      If you are using this API in a scenario in which MFA is
                      required and you’ll need to be able to honor IP address
                      whitelisting defined in MFA policies, provide this parameter
                      and set its value to the whitelisted IP address that needs
                      to be bypassed.
                    type: string
    /saml_assertion/verify_factor:
      post:
        summary: Verify an MFA token
        description: >-
          Verify a one-time password (OTP) value, provided for a second factor,
          when multi-factor authentication (MFA) is required for SAML
          authentication.
        tags:
          - saml
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: SamlVerifyMfaResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - app_id
                  - device_id
                  - state_token
                properties:
                  app_id:
                    description: >-
                      Provide the MFA device_id you are submitting for
                      verification.
                    type: integer
                  device_id:
                    description: >-
                      Provide the MFA device_id you are submitting for
                      verification.
                    type: integer
                  state_token:
                    description: >-
                      Provide the state_token associated with the MFA device_id
                      you are submitting for verification.
                    type: string
                  otp_token:
                    description: >-
                      Provide the OTP value for the MFA factor you are submitting
                      for verification.
                    type: string
                  do_not_notify:
                    default: false
                    description: >-
                      When verifying MFA via Protect Push, set this to true to
                      stop additional push notifications being sent to the
                      OneLogin Protect device.
                    type: boolean
    /users/{id}/auth_factors:
      get:
        summary: Get a list of MFA factors available to user
        description: >-
          Use this API to return a list of authentication factors that are
          available for user enrollment via API
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: UserMfaFactorsResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: object
                      properties:
                        auth_factors:
                          type: array
                          items:
                            type: object
                            properties:
                              factor_id:
                                type: integer
                              name:
                                type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/otp_devices:
      post:
        summary: Enroll a user with a given authentication factor.
        description: >-
          If the authentication factor requires confirmation to complete, then the
          device will have an active state of false otherwise it will have an
          active state of true (corresponding to devices that are either pending
          confirmation or not)
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: EnrollMfaFactorResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/MfaDevice'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - factor_id
                  - display_name
                  - number
                properties:
                  factor_id:
                    description: The identifier of the factor to enroll the user with
                    type: integer
                  display_name:
                    description: A name for the users device
                    type: string
                  number:
                    description: The phone number of the user in E.164 format.
                    type: string
      get:
        summary: Get enrolled authentication factors
        description: >-
          Use this API to return a list of authentication factors registered to a
          particular user for multifactor authentication (MFA).
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: EnrolledMfaFactorsResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: object
                      properties:
                        otp_devices:
                          type: array
                          items:
                            $ref: '#/components/schemas/MfaDevice'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/otp_devices/{device_id}/trigger:
      post:
        summary: Activate an authentication factor
        description: >-
          Use this API to trigger an SMS or Push notification containing a
          One-Time Password (OTP) that can be used to authenticate a user with the
          Verify Factor call.
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
          - name: device_id
            in: path
            description: Device ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: ActivateMfaResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/MfaDevice'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
    /users/{id}/otp_devices/{device_id}/verify:
      post:
        summary: Verify an authentication factor
        description: >-
          Use this API to authenticate a one-time password (OTP) code provided by
          a multifactor authentication (MFA) device.
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
          - name: device_id
            in: path
            description: Device ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  otp_token:
                    description: OTP code provided by the device or SMS message sent to user.
                    type: integer
                  state_token:
                    description: >-
                      The state_token is returned after a successful request to
                      Enroll a Factor or Activate a Factor. The state_token MUST
                      be provided if the needs_trigger attribute from the
                      proceeding calls is set to true.
                    type: string
    /users/{id}/otp_devices/{device_id}:
      delete:
        summary: Remove an authentication factor
        description: Use this API to remove an enrolled factor from a user.
        tags:
          - mfa
        parameters:
          - name: id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
          - name: device_id
            in: path
            description: Device ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: RemoveMfaResponse
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /roles:
      get:
        summary: Get Roles
        description: Returns a list of roles. Supports filtering and paging.
        tags:
          - roles
        parameters:
          - in: query
            name: id
            schema:
              type: string
          - in: query
            name: name
            schema:
              type: string
          - in: query
            name: limit
            schema:
              type: integer
          - in: query
            name: sort
            schema:
              type: string
          - in: query
            name: fields
            schema:
              type: string
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: RolesResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Role'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /roles/{id}:
      get:
        summary: Get Role by ID
        description: Use this call to get a role by ID.
        tags:
          - roles
        parameters:
          - name: id
            in: path
            description: Role ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: RoleReponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Role'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /events:
      get:
        summary: Get Events
        description: Returns a list of events. Supports filtering and paging.
        tags:
          - events
        parameters:
          - in: query
            name: client_id
            schema:
              type: string
          - in: query
            name: created_at
            schema:
              type: string
              format: date-time
          - in: query
            name: directory_id
            schema:
              type: integer
          - in: query
            name: event_type_id
            schema:
              type: integer
          - in: query
            name: id
            schema:
              type: integer
          - in: query
            name: resolution
            schema:
              type: string
          - in: query
            name: since
            schema:
              type: string
              format: date-time
          - in: query
            name: until
            schema:
              type: string
              format: date-time
          - in: query
            name: user_id
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: EventsResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Event'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /events/{id}:
      get:
        summary: Get Event by ID
        description: Returns a single event
        tags:
          - events
        parameters:
          - name: id
            in: path
            description: Event ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: EventResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      $ref: '#/components/schemas/Event'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /events/types:
      get:
        summary: Get Event Types
        description: Returns a list of event types
        tags:
          - events
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: EventTypesResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/EventType'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /groups:
      get:
        summary: Get Groups
        description: >-
          Use to get a list of groups that are available in your account. The call
          returns up to 50 groups per page.
        tags:
          - groups
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: GroupsResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    pagination:
                      $ref: '#/components/schemas/Pagination'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
    /groups/{id}:
      get:
        summary: Get Group by ID
        description: Use this call to get a group by ID.
        tags:
          - groups
        parameters:
          - name: id
            in: path
            description: Group ID
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: GroupResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Group'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '403':
            $ref: '#/components/responses/Forbidden'
          '404':
            $ref: '#/components/responses/NotFound'
    /privileges:
      get:
        summary: Get Privileges
        description: Use this API to list the Privileges created in an account.
        tags:
          - privileges
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  title: PrivilegesResponse
                  items:
                    $ref: '#/components/schemas/Privilege'
          '401':
            $ref: '#/components/responses/Error'
      post:
        summary: Creates privilege
        description: 'Creates a privilege    '
        tags:
          - privileges
        responses:
          '201':
            description: UUID
            content:
              '*/*':
                schema:
                  type: object
                  title: CreatePrivilegeResponse
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
          '400':
            $ref: '#/components/responses/Error'
          '401':
            $ref: '#/components/responses/Error'
          '422':
            $ref: '#/components/responses/Error'
          '500':
            description: internal server error
        requestBody:
          $ref: '#/components/requestBodies/Privilege'
    /privileges/{id}:
      get:
        summary: Get privilege
        description: 'Get a privilege    '
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            $ref: '#/components/schemas/Privilege'
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
      put:
        summary: Update privilege
        description: 'Update a privilege    '
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: UUID
            content:
              '*/*':
                schema:
                  type: object
                  title: UpdatePrivilegeResponse
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
          '400':
            $ref: '#/components/responses/Error'
          '401':
            $ref: '#/components/responses/Error'
          '422':
            $ref: '#/components/responses/Error'
          '500':
            description: internal server error
        requestBody:
          $ref: '#/components/requestBodies/Privilege'
      delete:
        summary: Delete privilege
        description: 'Delete a privilege    '
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '204':
            description: The privilege was successfully deleted.
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
    /privileges/{id}/roles:
      get:
        summary: Get roles
        description: 'Get roles assigned to a privilege  '
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: OK
            content:
              '*/*':
                schema:
                  type: object
                  title: PrivilegeRolesResponse
                  properties:
                    total:
                      type: integer
                    roles:
                      type: array
                      items:
                        type: integer
                    beforeCursor:
                      type: string
                    previousLink:
                      type: string
                    afterCursor:
                      type: string
                    nextLink:
                      type: string
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
      post:
        summary: Assign roles
        description: Use this API to assign a privilege to one or more roles.
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: OK
            content:
              '*/*':
                schema:
                  type: object
                  title: AssignPrivilegeRolesResponse
                  properties:
                    success:
                      type: boolean
                      example: true
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: integer
          description: Roles
          required: true
    /privileges/{id}/roles/{role_id}:
      delete:
        summary: Remove a role
        description: Use this API to remove a single role from a privilege.
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
          - name: role_id
            in: path
            description: Role ID
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: The role was removed from the privilege.
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
    /privileges/{id}/users:
      get:
        summary: Get privilege users
        description: 'Get users assigned to a privilege  '
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: OK
            content:
              '*/*':
                schema:
                  type: object
                  title: PrivilegeUsersResponse
                  properties:
                    total:
                      type: integer
                    users:
                      type: array
                      items:
                        type: integer
                    beforeCursor:
                      type: string
                    previousLink:
                      type: string
                    afterCursor:
                      type: string
                    nextLink:
                      type: string
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
      post:
        summary: Assign users
        description: Use this API to assign a privilege to one or more users.
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: OK
            content:
              '*/*':
                schema:
                  type: object
                  title: AssignPrivilegeUsersResponse
                  properties:
                    success:
                      type: boolean
                      example: true
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: integer
          description: Users
          required: true
    /privileges/{id}/users/{user_id}:
      delete:
        summary: Remove a user
        description: Use this API to remove a single user from a privilege.
        tags:
          - privileges
        parameters:
          - name: id
            in: path
            description: Privilege ID
            required: true
            schema:
              type: string
              format: uuid
          - name: user_id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: The user was removed from the privilege.
          '401':
            $ref: '#/components/responses/Error'
          '404':
            $ref: '#/components/responses/Error'
    /invites/get_invite_link:
      post:
        summary: Generate Invite Link
        description: >-
          Generate an invite link for a user already created in your OneLogin
          account.
        tags:
          - invites
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  title: GenerateInviteLinkResponse
                  properties:
                    status:
                      $ref: '#/components/schemas/Status'
                    data:
                      type: array
                      items:
                        type: string
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    description: Set to the user email address to generate an invite link.
                    type: string
    /invites/send_invite_link:
      post:
        summary: Send Invite Link
        description: Send an invite link to an existing user in your OneLogin account.
        tags:
          - invites
        responses:
          '200':
            $ref: '#/components/responses/Ok'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
        requestBody:
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    description: Set to the user email address to generate an invite link.
                    type: string
                  personal_email:
                    description: >-
                      To send an invite email to a different address than the one
                      provided in email, provide it here. The invite link is sent
                      to this address instead.
                    type: string
  components:
    responses:
      Ok:
        description: Ok
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Status'
      BadRequest:
        description: Bad Request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Status'
      Unauthorized:
        description: Not Authorized
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Status'
      NotFound:
        description: Not Found
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Status'
      Forbidden:
        description: Forbidden
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Status'
      Error:
        description: Error
        content:
          '*/*':
            schema:
              type: object
              properties:
                statusCode:
                  type: integer
                  example: 401
                name:
                  type: string
                  example: UnauthorizedError
                message:
                  type: string
                  example: The request requires user authentication.
    requestBodies:
      Privilege:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Privilege'
    securitySchemes:
      application:
        type: oauth2
        flows:
          clientCredentials:
            tokenUrl: https://api.{region}.onelogin.com/auth/oauth2/v2/token
            scopes: {}
    schemas:
      Status:
        type: object
        title: Status
        description: Status object returned in the body of most responses
        properties:
          error:
            type: boolean
            example: true
          code:
            type: integer
            example: 401
          type:
            type: string
            example: Unauthorized
          message:
            type: string
            example: Authentication Failure
      Pagination:
        type: object
        title: Pagination
        description: Contains useful links for paging through result sets
        properties:
          before_cursor:
            type: string
          after_cursor:
            type: string
          previous_link:
            type: string
          next_link:
            type: string
      User:
        type: object
        title: User
        properties:
          id:
            description: User’s unique ID in OneLogin
            type: integer
          email:
            description: User’s email address, which he also uses to log in to OneLogin
            type: string
          username:
            description: >-
              If the user’s directory is set to authenticate using a user name
              value, this is the value used to sign in
            type: string
          firstname:
            description: User’s first name
            type: string
          lastname:
            description: User’s last name
            type: string
          group_id:
            description: Group to which the user belongs
            type: integer
          invalid_login_attempts:
            description: >-
              Number of sequential invalid login attempts the user has made that
              is less than or equal to the Maximum invalid login attempts value
              defined on the Session page in OneLogin.

              When this number reaches this value, the user account will be locked
              for the amount of time defined by the Lock effective period field on
              the Session page and this value will be reset to 0.
            type: integer
          activated_at:
            description: 'Date and time at which the user’s status was set to 1 (active)      '
            type: string
            format: date-time
          created_at:
            description: 'Date and time at which the user was created '
            type: string
            format: date-time
          updated_at:
            description: Date and time at which the user’s information was last updated
            type: string
            format: date-time
          invitation_sent_at:
            description: >-
              Date and time at which an invitation to OneLogin was sent to the
              user 
            type: string
            format: date-time
          password_changed_at:
            description: Date and time at which the user’s password was last changed
            type: string
            format: date-time
          last_login:
            description: 'Date and time of the user’s last login '
            type: string
            format: date-time
          locked_until:
            description: 'Date and time at which the user’s account will be unlocked '
            type: string
            format: date-time
          notes:
            type: string
          openid_name:
            description: >-
              OpenID URL that can be configured in other applications that accept
              OpenID for sign-in
            type: string
          locale_code:
            description: >-
              Represents a geographical, political, or cultural region. Some
              features may use the locale value to tailor the display of
              information, such as numbers, for the user based on locale-specific
              customs and conventions
            type: string
          phone:
            description: User’s phone number
            type: string
          status:
            description: |-
              Determines the user’s ability to log in to OneLogin

                Possible values
                
                0 - Unactivated
                1 - Active Only users assigned this status can log in to OneLogin.
                2 - Suspended
                3 - Locked
                4 - Password expired
                5 - Awaiting password reset
            type: integer
          state:
            description: >-
              Represents the user’s stage in a process (such as user account
              approval). User state determines the possible statuses a user
              account can be in.

              States include

              0 - Unapproved 1 - Approved 2 - Rejected 3 - Unlicensed
            type: integer
          distinguished_name:
            description: Synchronized from Active Directory
            type: string
          external_id:
            description: >-
              External ID that can be used to uniquely identify the user in
              another system
            type: string
          directory_id:
            description: >-
              ID of the directory (Active Directory, LDAP, for example) from which
              the user was created
            type: integer
          member_of:
            description: Synchronized from Active Directory
            type: string
          samaccountname:
            description: Synchronized from Active Directory
            type: string
          userprincipalname:
            description: Synchronized from Active Directory
            type: string
          manager_ad_id:
            description: ID of the user’s manager in Active Directory
            type: string
          role_id:
            description: Role IDs to which the user is assigned
            type: array
            items:
              type: integer
          custom_attributes:
            description: >-
              Provides a list of custom attribute fields (also known as custom
              user fields) that are available for your account.

              The values returned correspond to the values you provided in the
              Shortname field when you defined the custom user field
            type: object
            additionalProperties:
              type: string
        required:
          - firstname
          - lastname
          - email
          - username
      MfaDevice:
        type: object
        title: MfaDevice
        properties:
          active:
            type: boolean
          default:
            type: boolean
          state_token:
            type: string
          auth_factor_name:
            type: string
          phone_number:
            type: string
          type_display_name:
            type: string
          needs_trigger:
            type: boolean
          user_display_name:
            type: string
          id:
            type: integer
      Role:
        type: object
        title: Role
        properties:
          id:
            type: integer
            description: The roles unique ID in OneLogin.
          name:
            type: string
            description: The role name
      Group:
        type: object
        title: Group
        properties:
          id:
            type: integer
            description: The groups unique ID in OneLogin.
          name:
            type: string
            description: The group name
      EventType:
        type: object
        title: EventType
        properties:
          id:
            type: integer
          name:
            type: string
            description: Constant name for the Event Type
          description:
            type: string
            description: Template for the Event description
      Event:
        type: object
        title: Event
        properties:
          account_id:
            type: integer
          event_type_id:
            type: integer
          id:
            type: integer
            description: The Event ID
          created_at:
            type: string
            format: date-time
            description: The date/time the Event was created
          user_id:
            type: integer
          notes:
            type: string
          ipaddr:
            type: string
          actor_user_id:
            type: integer
          assuming_acting_user_id:
            type: integer
          role_id:
            type: integer
          app_id:
            type: integer
          group_id:
            type: integer
          otp_device_id:
            type: integer
          policy_id:
            type: integer
          actor_system:
            type: string
          custom_message:
            type: string
          role_name:
            type: string
          app_name:
            type: string
          group_name:
            type: string
          actor_user_name:
            type: string
          user_name:
            type: string
          policy_name:
            type: string
          otp_device_name:
            type: string
          operation_name:
            type: string
          directory_sync_run_id:
            type: integer
          directory_id:
            type: integer
          resolution:
            type: string
          client_id:
            type: string
          resourcse_type_id:
            type: integer
          error_description:
            type: string
        required:
          - event_type_id
          - account_id
      UserApp:
        type: object
        title: UserApp
        properties:
          id:
            type: integer
            description: ID of the app that can be accessed by the user.
          name:
            type: string
            description: Constant name for the Event Type
          icon:
            type: string
            description: 'Template for the Event description '
          provisioned:
            type: integer
            description: >-
              Indicates whether a username and password has been stored on the
              login for the app and user.

              Valid values are:

              - 0 (no) - 1 (yes)
          extension:
            type: boolean
            description: >-
              Indicates whether the app requires the OneLogin browser extension to
              login.

              Valid values are:

              - true: The app requires the OneLogin browser extension. - false:
              The app does not require the OneLogin browser extension.
          login_id:
            type: string
            description: 'Template for the Event description '
          personal:
            type: boolean
            description: >-
              Indicates whether the app is a user’s personal app.

              Valid values are:

              - true: The app is a user’s personal app. - false: The app is not a
              user’s personal app.        
      Privilege:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: cc87dc41-1974-4af4-8493-7d135c981f42
          name:
            type: string
            example: User Administrator
          privilege:
            type: object
            properties:
              Version:
                type: string
                example: 2018-10-30 18:56:22 -0600
                description: Version can be anything. Recommended to be Date/Time format
              Statement:
                type: array
                items:
                  $ref: '#/components/schemas/Statement'
            required:
              - Version
              - Statement
        required:
          - id
          - name
          - privilege
      Statement:
        type: object
        properties:
          Effect:
            type: string
            enum:
              - Allow
              - Deny
          Action:
            type: array
            items:
              $ref: '#/components/schemas/Action'
          Scope:
            type: array
            items:
              $ref: '#/components/schemas/Scope'
        required:
          - Effect
          - Action
          - Scope
      Scope:
        type: string
        example: '*'
        pattern: >-
          ^(\*|(privileges|roles|directories|trustedidp|policies|users|apps|reports|events)\/(\*|\d+))$
      Action:
        type: string
        enum:
          - '*'
          - privileges:List
          - privileges:Get
          - privileges:Create
          - privileges:Update
          - privileges:Delete
          - privileges:ListUsers
          - privileges:ListRoles
          - privileges:AddUser
          - privileges:RemoveUser
          - privileges:AddRole
          - privileges:RemoveRole
          - roles:List
          - roles:Get
          - roles:Create
          - roles:Update
          - roles:Delete
          - roles:AddUser
          - roles:AddApp
          - roles:RemoveApp
          - directories:List
          - directories:Get
          - directories:Create
          - directories:Update
          - directories:Delete
          - directories:SyncUsers
          - directories:RefreshSchema
          - trustedidp:List
          - trustedidp:Get
          - trustedidp:Create
          - trustedidp:Update
          - trustedidp:Delete
          - policies:List
          - policies:user:Get
          - policies:user:Create
          - policies:user:Update
          - policies:user:Delete
          - policies:app:Get
          - policies:app:Create
          - policies:app:Update
          - policies:app:Delete
          - users:List
          - users:Get
          - users:Create
          - users:Update
          - users:Delete
          - users:Unlock
          - users:ResetPassword
          - users:ForceLogout
          - users:Invite
          - users:ReapplyMappings
          - users:AddRole
          - users:RemoveRole
          - users:GenerateTempMfaToken
          - users:AddApp
          - users:RemoveApp
          - apps:List
          - apps:Get
          - apps:Create
          - apps:UpdateConfiguration
          - apps:UpdateSSO
          - apps:UpdateParameters
          - apps:Delete
          - apps:AddUser
          - apps:RemoveUser
          - reports:List
          - reports:Get
          - reports:Create
          - reports:Run
          - mappings:reapplyAll
          - events:List
          - events:Get
konfigCliVersion: 1.38.61
