publishJson:
  company: Buttondown
  serviceName: false
  sdkName: buttondown-{language}-sdk
  clientName: Buttondown
  metaDescription: >-
    Buttondown is a small, elegant tool for producing newsletters.


    The minimalist interface makes it easy for you to write great emails; the
    automation acts like the editorial assistant you wish you had, by checking
    for typos, broken links, or malformed images; the portable subscription
    widget makes it really easy to grow your audience from wherever you host
    your site.
  apiStatusUrls: inherit
  homepage: buttondown.email/
  developerDocumentation: docs.buttondown.email/
  categories:
    - newsletter
    - communication
    - email
    - marketing
rawSpecString: |
  openapi: 3.0.2
  info:
    title: NinjaAPI
    version: 1.0.0
    description: ''
  paths:
    /exports:
      post:
        operationId: api_views_exports_create_export
        summary: Create Export
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Export'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                title: Payload
                default:
                  collections:
                    - subscribers
                    - emails
                    - scheduled_emails
                    - drafts
                    - unsubscribers
                    - events
                    - referrals
                allOf:
                  - $ref: '#/components/schemas/ExportInput'
          required: false
        security:
          - GlobalAuth: []
      get:
        operationId: api_views_exports_list_exports
        summary: List Exports
        parameters: []
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Page_Export_'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /exports/{pk}:
      get:
        operationId: api_views_exports_retrieve_export
        summary: Retrieve Export
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Export'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /tags:
      post:
        operationId: api_views_subscriber_tags_create_tag
        summary: Create Tag
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tag'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagInput'
          required: true
        security:
          - GlobalAuth: []
      get:
        operationId: api_views_subscriber_tags_list_tags
        summary: List Tags
        parameters: []
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Page_Tag_'
        security:
          - GlobalAuth: []
    /tags/{tag_id}:
      get:
        operationId: api_views_subscriber_tags_retrieve_tag
        summary: Retrieve Tag
        parameters:
          - in: path
            name: tag_id
            schema:
              title: Tag Id
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tag'
        security:
          - GlobalAuth: []
      patch:
        operationId: api_views_subscriber_tags_update_tag
        summary: Update Tag
        parameters:
          - in: path
            name: tag_id
            schema:
              title: Tag Id
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Tag'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage_UpdateTagErrorCode_'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagUpdateInput'
          required: true
        security:
          - GlobalAuth: []
      delete:
        operationId: api_views_subscriber_tags_delete_tag
        summary: Delete Tag
        parameters:
          - in: path
            name: tag_id
            schema:
              title: Tag Id
              type: string
            required: true
        responses:
          '204':
            description: No Content
        security:
          - GlobalAuth: []
    /ping:
      get:
        operationId: api_views_ping_ping
        summary: Ping
        parameters: []
        responses:
          '200':
            description: OK
        security:
          - GlobalAuth: []
    /images:
      post:
        operationId: api_views_images_create_image
        summary: Create Image
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Image'
        requestBody:
          content:
            multipart/form-data:
              schema:
                title: FileParams
                type: object
                properties:
                  image:
                    title: Image
                    type: string
                    format: binary
                required:
                  - image
          required: true
        security:
          - GlobalAuth: []
    /images/{image_id}:
      delete:
        operationId: api_views_images_delete_image
        summary: Delete Image
        parameters:
          - in: path
            name: image_id
            schema:
              title: Image Id
              type: string
            required: true
        responses:
          '204':
            description: No Content
        security:
          - GlobalAuth: []
    /emails:
      post:
        operationId: api_views_emails_create_email
        summary: Create Email
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Email'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage_EmailCreationErrorCode_'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailInput'
          required: true
        security:
          - GlobalAuth: []
      get:
        operationId: api_views_emails_list_emails
        summary: List Emails
        parameters:
          - in: query
            name: status
            schema:
              default:
                - about_to_send
                - in_flight
                - sent
              type: array
              items:
                $ref: '#/components/schemas/EmailStatus'
            required: false
          - in: query
            name: included_tags
            schema:
              title: Included Tags
              default: []
              type: array
              items:
                type: string
            required: false
          - in: query
            name: excluded_tags
            schema:
              title: Excluded Tags
              default: []
              type: array
              items:
                type: string
            required: false
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Page_Email_'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /emails/{pk}:
      get:
        operationId: api_views_emails_retrieve_email
        summary: Retrieve Email
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Email'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /emails/{pk}/analytics:
      get:
        operationId: api_views_emails_retrieve_email_analytics
        summary: Retrieve Email Analytics
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Analytics'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /subscribers:
      post:
        operationId: api_views_subscribers_create_subscriber
        summary: Create Subscriber
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Subscriber'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberInput'
          required: true
        security:
          - GlobalAuth: []
      get:
        operationId: api_views_subscribers_list_subscribers
        summary: List Subscribers
        parameters:
          - in: query
            name: type
            schema:
              $ref: '#/components/schemas/SubscriberType'
            required: false
          - in: query
            name: email
            schema:
              title: Email
              default: ''
              type: string
            required: false
          - in: query
            name: tag
            schema:
              title: Tag
              default: ''
              type: string
            required: false
          - in: query
            name: '-tag'
            schema:
              title: '-Tag'
              type: string
            required: false
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Page_Subscriber_'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage_ListSubscribersErrorCode_'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /subscribers/{pk}:
      get:
        operationId: api_views_subscribers_retrieve_subscriber
        summary: Retrieve Subscriber
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Subscriber'
        security:
          - GlobalAuth: []
      delete:
        operationId: api_views_subscribers_delete_subscriber
        summary: Delete Subscriber
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '204':
            description: No Content
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
      patch:
        operationId: api_views_subscribers_update_subscriber
        summary: Update Subscriber
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Subscriber'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage_UpdateSubscriberErrorCode_'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberUpdateInput'
          required: true
        security:
          - GlobalAuth: []
    /subscribers/{pk}/send-reminder:
      post:
        operationId: api_views_subscribers_send_reminder
        summary: Send Reminder
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /subscribers/{pk}/emails/{email_pk}:
      post:
        operationId: api_views_subscribers_send_email_to
        summary: Send Email To
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
          - in: path
            name: email_pk
            schema:
              title: Email Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /newsletters:
      get:
        operationId: api_views_newsletters_list_newsletters
        summary: List Newsletters
        parameters: []
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Page_Newsletter_'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
      post:
        operationId: api_views_newsletters_create_newsletter
        summary: Create Newsletter
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Newsletter'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage_CreateNewsletterErrorCode_'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterInput'
          required: true
        security:
          - GlobalAuth: []
    /newsletters/{pk}:
      patch:
        operationId: api_views_newsletters_update_newsletter
        summary: Update Newsletter
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Newsletter'
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsletterUpdateInput'
          required: true
        security:
          - GlobalAuth: []
      delete:
        operationId: api_views_newsletters_delete_newsletter
        summary: Delete Newsletter
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '204':
            description: No Content
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
    /bulk_actions:
      post:
        operationId: api_views_bulk_actions_create_bulk_action
        summary: Create Bulk Action
        parameters: []
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BulkAction'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkActionInput'
          required: true
        security:
          - GlobalAuth: []
    /bulk_actions/{pk}:
      get:
        operationId: api_views_bulk_actions_retrieve_bulk_action
        summary: Retrieve Bulk Action
        parameters:
          - in: path
            name: pk
            schema:
              title: Pk
              type: string
            required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/BulkAction'
          '403':
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorMessage'
        security:
          - GlobalAuth: []
  components:
    schemas:
      ExportStatus:
        title: Status
        description: |2-

                  Represents the status of an export.

                  No action is required to move from one state or another; Buttondown
                  internally handles the transitions, and exposing the status is for
                  observability purposes only.
                  
        enum:
          - error
          - in_progress
          - not_started
          - ready
        type: string
      Export:
        title: Export
        description: >-
          Some software applications may want programmatic access to their
          newsletter exports.

          This assists with a few niche use cases, such as regular backups or data
          ingestion

          (into a data warehouse), or post-publishing processes that hinge on
          email events.


          In general, you probably won't _need_ to use this endpoint unless you
           _absolutely_ need to use this endpoint.
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          creation_date:
            title: Creation Date
            type: string
            format: date-time
          status:
            $ref: '#/components/schemas/ExportStatus'
          url:
            title: Url
            type: string
          completion_date:
            title: Completion Date
            type: string
            format: date-time
        required:
          - id
          - creation_date
          - status
      ErrorMessage:
        title: ErrorMessage
        type: object
        properties:
          code:
            title: Code
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - detail
      ExportCollection:
        title: Collection
        description: |2-

                  A group of data that can be exported in an export.
                  
        enum:
          - subscribers
          - emails
          - scheduled_emails
          - drafts
          - unsubscribers
          - events
          - referrals
        type: string
      ExportInput:
        title: ExportInput
        type: object
        properties:
          collections:
            type: array
            items:
              $ref: '#/components/schemas/ExportCollection'
        required:
          - collections
      Page_Export_:
        title: Page[Export]
        type: object
        properties:
          results:
            title: Results
            type: array
            items:
              $ref: '#/components/schemas/Export'
          next:
            title: Next
            type: string
          previous:
            title: Previous
            type: string
          count:
            title: Count
            type: integer
        required:
          - results
          - count
      Tag:
        title: Tag
        description: >-
          Tags are a way to organize your subscribers. You can create, update, and

          delete tags via the API. You can also list all tags for a given
          newsletter.


          Tags don't have any strict functionality on their own, but you can send
          emails

          to subscribers with a given tag (or to all subscribers _without_ a given
          tag.)
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          name:
            title: Name
            type: string
          color:
            title: Color
            type: string
          description:
            title: Description
            type: string
          secondary_id:
            title: Secondary Id
            type: integer
          creation_date:
            title: Creation Date
            type: string
            format: date-time
        required:
          - id
          - name
          - color
          - secondary_id
          - creation_date
      TagInput:
        title: TagInput
        type: object
        properties:
          name:
            title: Name
            type: string
          color:
            title: Color
            type: string
          description:
            title: Description
            type: string
        required:
          - name
          - color
      Page_Tag_:
        title: Page[Tag]
        type: object
        properties:
          results:
            title: Results
            type: array
            items:
              $ref: '#/components/schemas/Tag'
          next:
            title: Next
            type: string
          previous:
            title: Previous
            type: string
          count:
            title: Count
            type: integer
        required:
          - results
          - count
      UpdateTagErrorCode:
        title: UpdateTagErrorCode
        description: |2-

              A potential error code that can be returned when updating a tag.
              
        enum:
          - name_already_exists
        type: string
      ErrorMessage_UpdateTagErrorCode_:
        title: ErrorMessage[UpdateTagErrorCode]
        type: object
        properties:
          code:
            $ref: '#/components/schemas/UpdateTagErrorCode'
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - code
          - detail
      TagUpdateInput:
        title: TagUpdateInput
        type: object
        properties:
          name:
            title: Name
            type: string
          color:
            title: Color
            type: string
          description:
            title: Description
            type: string
      Image:
        title: Image
        description: >-
          Images are, well, images! Buttondown allows you to upload images to its
          secure

          S3 bucket and do with them what you will. This is sort of an odd duck of
          an

          API, to be sure, but if you want to be able to do things like draft

          and send emails completely on your iPad you need a surefire way of
          creating images.
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          creation_date:
            title: Creation Date
            type: string
            format: date-time
          image:
            title: Image
            type: string
        required:
          - id
          - creation_date
          - image
      EmailType:
        title: Type
        description: |2-

                  Represents the audience of an email, and to whom it is visible both in the initial
                  email and in online archives.
                  
        enum:
          - public
          - private
          - premium
          - free
          - archival
          - hidden
        type: string
      EmailStatus:
        title: Status
        description: |2-

                  Represents the state of an email.

                  No action is required to move from one state or another; Buttondown
                  internally handles the transitions, and exposing the status is for
                  observability purposes only.
                  
        enum:
          - draft
          - about_to_send
          - scheduled
          - in_flight
          - deleted
          - errored
          - sent
          - imported
        type: string
      Email:
        title: Email
        description: >-
          Emails are what you're for here on Buttondown at the end of the day,
          right?

          Creating an email via the API is just like creating one in the
          interface;

          it will instantly trigger sending actual emails,

          based on the tags and email type you provide.
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          included_tags:
            title: Included Tags
            type: array
            items:
              type: string
              format: uuid
          excluded_tags:
            title: Excluded Tags
            type: array
            items:
              type: string
              format: uuid
          publish_date:
            title: Publish Date
            type: string
            format: date-time
          subject:
            title: Subject
            type: string
          body:
            title: Body
            type: string
          secondary_id:
            title: Secondary Id
            type: integer
          email_type:
            $ref: '#/components/schemas/EmailType'
          slug:
            title: Slug
            type: string
          external_url:
            title: External Url
            type: string
          status:
            $ref: '#/components/schemas/EmailStatus'
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - id
          - subject
          - body
          - email_type
          - slug
          - external_url
          - status
      EmailCreationErrorCode:
        title: EmailCreationErrorCode
        description: |2-

              Represents the type of error that occurred when creating an email.

              Human-readable error messages are provided in the `detail` field of the response;
              these values are meant to be parseable by code or client logic.
              
        enum:
          - subject_invalid
          - email_duplicate
          - email_invalid
        type: string
      ErrorMessage_EmailCreationErrorCode_:
        title: ErrorMessage[EmailCreationErrorCode]
        type: object
        properties:
          code:
            $ref: '#/components/schemas/EmailCreationErrorCode'
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - code
          - detail
      EmailInput:
        title: EmailInput
        type: object
        properties:
          included_tags:
            title: Included Tags
            default: []
            type: array
            items:
              anyOf:
                - type: string
                  format: uuid
                - type: string
          excluded_tags:
            title: Excluded Tags
            default: []
            type: array
            items:
              anyOf:
                - type: string
                  format: uuid
                - type: string
          publish_date:
            title: Publish Date
            type: string
            format: date-time
          subject:
            title: Subject
            type: string
          body:
            title: Body
            default: ''
            type: string
          email_type:
            default: public
            allOf:
              - $ref: '#/components/schemas/EmailType'
          status:
            default: about_to_send
            allOf:
              - $ref: '#/components/schemas/EmailStatus'
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - subject
      Page_Email_:
        title: Page[Email]
        type: object
        properties:
          results:
            title: Results
            type: array
            items:
              $ref: '#/components/schemas/Email'
          next:
            title: Next
            type: string
          previous:
            title: Previous
            type: string
          count:
            title: Count
            type: integer
        required:
          - results
          - count
      Analytics:
        title: Analytics
        type: object
        properties:
          recipients:
            title: Recipients
            type: integer
          deliveries:
            title: Deliveries
            type: integer
          opens:
            title: Opens
            type: integer
          clicks:
            title: Clicks
            type: integer
          temporary_failures:
            title: Temporary Failures
            type: integer
          permanent_failures:
            title: Permanent Failures
            type: integer
          unsubscriptions:
            title: Unsubscriptions
            type: integer
          complaints:
            title: Complaints
            type: integer
        required:
          - recipients
          - deliveries
          - opens
          - clicks
          - temporary_failures
          - permanent_failures
          - unsubscriptions
          - complaints
      SubscriberType:
        title: Type
        description: |2-

                  Represents the state of a subscriber and what emails they
                  should or should not be receiving. This type is meant to be fully expressive
                  so as to consolidate the logic of determining what emails a subscriber should
                  receive into a single place.
                  
        enum:
          - regular
          - premium
          - churning
          - past_due
          - gifted
          - unpaid
          - unactivated
          - unsubscribed
          - spammy
          - removed
          - trialed
          - disabled
          - paused
        type: string
      SubscriberSource:
        title: Source
        description: |2-

                  Represents the original provenance of a subscriber. This value is not exposed
                  to subscribers; it's only used for internal tracking purposes and governs some
                  of the behavior of the subscriber (i.e. whether or not to require double
                  opt-in.)
                  
        enum:
          - api
          - import
          - organic
          - user
          - admin
        type: string
      Subscriber:
        title: Subscriber
        description: |-
          Subscribers are the main way you collect email addresses and
          recipients on Buttondown. They're what you see on your
          [subscribers page](https://buttondown.email/subscribers).
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          email:
            title: Email
            type: string
          notes:
            title: Notes
            default: ''
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
          tags:
            title: Tags
            default: []
            type: array
            items:
              type: string
          referrer_url:
            title: Referrer Url
            default: ''
            type: string
          creation_date:
            title: Creation Date
            type: string
            format: date-time
          secondary_id:
            title: Secondary Id
            type: integer
          subscriber_type:
            $ref: '#/components/schemas/SubscriberType'
          source:
            $ref: '#/components/schemas/SubscriberSource'
          utm_campaign:
            title: Utm Campaign
            type: string
          utm_medium:
            title: Utm Medium
            type: string
          utm_source:
            title: Utm Source
            type: string
        required:
          - id
          - email
          - creation_date
          - secondary_id
          - subscriber_type
          - source
          - utm_campaign
          - utm_medium
          - utm_source
      SubscriberInput:
        title: SubscriberInput
        type: object
        properties:
          email:
            title: Email
            type: string
          notes:
            title: Notes
            default: ''
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
          tags:
            title: Tags
            default: []
            type: array
            items:
              type: string
          referrer_url:
            title: Referrer Url
            default: ''
            type: string
        required:
          - email
      Page_Subscriber_:
        title: Page[Subscriber]
        type: object
        properties:
          results:
            title: Results
            type: array
            items:
              $ref: '#/components/schemas/Subscriber'
          next:
            title: Next
            type: string
          previous:
            title: Previous
            type: string
          count:
            title: Count
            type: integer
        required:
          - results
          - count
      ListSubscribersErrorCode:
        title: ListSubscribersErrorCode
        description: |2-

              Represents the type of error that occurred when listing subscribers.

              Human-readable error messages are provided in the `detail` field of the response;
              these values are meant to be parseable by code or client logic.
              
        enum:
          - invalid_tag
        type: string
      ErrorMessage_ListSubscribersErrorCode_:
        title: ErrorMessage[ListSubscribersErrorCode]
        type: object
        properties:
          code:
            $ref: '#/components/schemas/ListSubscribersErrorCode'
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - code
          - detail
      UpdateSubscriberErrorCode:
        title: UpdateSubscriberErrorCode
        description: |2-

              Represents the type of error that occurred when updating a subscriber.

              Human-readable error messages are provided in the `detail` field of the response;
              these values are meant to be parseable by code or client logic.
              
        enum:
          - email_already_exists
          - email_invalid
          - subscriber_type_invalid
        type: string
      ErrorMessage_UpdateSubscriberErrorCode_:
        title: ErrorMessage[UpdateSubscriberErrorCode]
        type: object
        properties:
          code:
            $ref: '#/components/schemas/UpdateSubscriberErrorCode'
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - code
          - detail
      SubscriberUpdateInput:
        title: SubscriberUpdateInput
        type: object
        properties:
          email:
            title: Email
            type: string
          notes:
            title: Notes
            type: string
          metadata:
            title: Metadata
            type: object
          tags:
            title: Tags
            type: array
            items:
              type: string
          referrer_url:
            title: Referrer Url
            default: ''
            type: string
          subscriber_type:
            $ref: '#/components/schemas/SubscriberType'
      Newsletter:
        title: Newsletter
        description: |-
          You will likely not need to interact with your newsletter settings
          programmatically, but if you do, this is the endpoint for you. You can
          create, update, and list newsletters via the API; this is ideal for
          integrating with Buttondown as a headless email or newsletter provider
          (e.g. for a SaaS product.)
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          username:
            title: Username
            type: string
          name:
            title: Name
            type: string
          description:
            title: Description
            type: string
          creation_date:
            title: Creation Date
            type: string
            format: date-time
          api_key:
            title: Api Key
            type: string
            format: uuid
        required:
          - id
          - username
          - name
          - description
          - creation_date
          - api_key
      Page_Newsletter_:
        title: Page[Newsletter]
        type: object
        properties:
          results:
            title: Results
            type: array
            items:
              $ref: '#/components/schemas/Newsletter'
          next:
            title: Next
            type: string
          previous:
            title: Previous
            type: string
          count:
            title: Count
            type: integer
        required:
          - results
          - count
      CreateNewsletterErrorCode:
        title: CreateNewsletterErrorCode
        description: |2-

              Represents the type of error that occurred when creating a newsletter.

              Human-readable error messages are provided in the `detail` field of the response;
              these values are meant to be parseable by code or client logic.
              
        enum:
          - username_already_exists
        type: string
      ErrorMessage_CreateNewsletterErrorCode_:
        title: ErrorMessage[CreateNewsletterErrorCode]
        type: object
        properties:
          code:
            $ref: '#/components/schemas/CreateNewsletterErrorCode'
          detail:
            title: Detail
            type: string
          metadata:
            title: Metadata
            default: {}
            type: object
            additionalProperties:
              type: string
        required:
          - code
          - detail
      NewsletterInput:
        title: NewsletterInput
        type: object
        properties:
          username:
            title: Username
            type: string
          name:
            title: Name
            type: string
          description:
            title: Description
            type: string
        required:
          - username
          - name
          - description
      NewsletterUpdateInput:
        title: NewsletterUpdateInput
        type: object
        properties:
          username:
            title: Username
            type: string
          name:
            title: Name
            type: string
          description:
            title: Description
            type: string
      BulkActionStatus:
        title: Status
        description: |2-

                  Represents the status of a bulk action.

                  No action is required to move from one state or another; Buttondown
                  internally handles the transitions, and exposing the status is for
                  observability purposes only.
                  
        enum:
          - not_started
          - in_progress
          - processed
          - failed
        type: string
      BulkActionType:
        title: Type
        description: |2-

                  Represents the action being performed on a bulk of objects.

                  (Not to be coy, but these names should be self-explanatory.)
                  
        enum:
          - apply_tags
          - apply_metadata
          - ban_subscribers
          - delete_emails
          - delete_subscribers
          - delete_tags
          - reactivate_subscribers
          - replay_events
          - resubscribe_subscribers
          - send_emails
          - send_reminders
          - update_email_types
          - unsubscribe_subscribers
        type: string
      BulkAction:
        title: BulkAction
        description: >-
          A bulk action represents, well, a bulk action. It is used to perform

          actions on a large number of objects at once. For example, you can

          use it to delete a large number of emails, or to unsubscribe a large

          number of subscribers. The actions within a bulk action are processed

          serially by Buttondown; this should be considered an ergonomic way to

          batch API calls across the network rather than a net-new piece of
          functionality

          in of itself.
        type: object
        properties:
          id:
            title: Id
            type: string
            format: uuid
          creation_date:
            title: Creation Date
            type: string
            format: date-time
          status:
            $ref: '#/components/schemas/BulkActionStatus'
          type:
            $ref: '#/components/schemas/BulkActionType'
          completion_date:
            title: Completion Date
            type: string
            format: date-time
          metadata:
            title: Metadata
            type: object
            additionalProperties:
              anyOf:
                - type: string
                - type: array
                  items:
                    type: string
                - type: object
        required:
          - id
          - creation_date
          - status
          - type
          - metadata
      BulkActionInput:
        title: BulkActionInput
        type: object
        properties:
          type:
            $ref: '#/components/schemas/BulkActionType'
          metadata:
            title: Metadata
            type: object
            additionalProperties:
              anyOf:
                - type: string
                - type: array
                  items:
                    type: string
                - type: object
        required:
          - type
          - metadata
    securitySchemes:
      GlobalAuth:
        type: http
        scheme: token
  servers:
    - url: https://api.buttondown.email/v1/
konfigCliVersion: 1.38.37
