publishJson:
  company: Kenjo
  serviceName: false
  sdkName: kenjo-{language}-sdk
  clientName: Kenjo
  metaDescription: >-
    Kenjo is the all in one HR software for managing the workforce of companies
    in the industrial, service and commercial sectors, among others.


    On a single platform, companies can optimise the most important operations
    and processes in people management: attendance, shift planning and
    recruitment, among others, while remaining compliant.


    All of this with the aim of making HR a key part of the success of companies
    and the development of their workforce.
  apiStatusUrls: inherit
  homepage: kenjo.io
  developerDocumentation: www.kenjo.io/legal/api
  categories:
    - hr
    - people_management_software
    - culture
    - people_management
    - workforce_management
    - deskless
    - operations
    - onboarding
    - offboarding
    - org_chart
    - payroll
    - time_off
    - attendance
rawSpecString: |
  openapi: 3.0.0
  info:
    title: Kenjo API
    description: >-
      Before starting to use the Kenjo API, you have to request the API activation
      for a sandbox or production environment to the Kenjo Customer Success team.
      After that, an admin user has to go to *Settings > Integrations > API keys*,
      to generate the **API Key**. Follow the steps described in the
      **Autentication section** of this document. <br>The API key is needed to
      request the bearer token. Each endpoint callout requires a valid bearer
      token in the Authorization header. Once the token is retrieved, it will be
      useful during the time limit indicated by the 'expiration date'.
    termsOfService: https://www.kenjo.io/legal/terms-and-conditions
    version: 1.0.0
  servers:
    - url: https://sandbox-api.kenjo.io/api/v1
      description: Sandbox environment
    - url: https://api.kenjo.io/api/v1
      description: Production environment
  tags:
    - name: Authentication
      description: Operations to login and logout.
    - name: User accounts
      description: Operations to list the existing employees in Kenjo.
    - name: Attendance
      description: Operations to manage attendance entries related to employees.
    - name: Companies
      description: Operations to list companies in Kenjo.
    - name: Offices
      description: Operations to manage offices in Kenjo.
    - name: Departments
      description: Operations to manage departments in Kenjo.
    - name: Teams
      description: Operations to manage teams in Kenjo.
    - name: Areas
      description: Operations to manage areas in Kenjo.
    - name: Calendars
      description: Operations to list calendars in Kenjo.
    - name: Employees
      description: Operations to manage employees in Kenjo.
    - name: Custom fields
      description: Operations to manage custom fields in Kenjo.
    - name: Time off
      description: Operations to manage time off types, policies and requests in Kenjo.
    - name: Compensation
      description: >-
        Operations to manage employments, salaries and additional payments in
        Kenjo.
  components:
    responses:
      ok:
        description: OK.
      badRequest:
        description: >-
          BAD REQUEST. This is a wrong request in the client side due to invalid
          body or params.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                message:
                  type: string
              example:
                code: 400
                message: The param 'id' is not valid.
      unauthorized:
        description: >-
          UNAUTHORIZED. The Authorization header is incorrect, not provided or the
          token expired.
      noContent:
        description: NO CONTENT
    parameters:
      origin:
        in: header
        name: Origin
        description: Origin of the request.
        schema:
          type: string
          example: https://sandbox-api.kenjo.io
        required: true
      authorization:
        in: header
        name: Authorization
        description: A valid bearer token.
        schema:
          type: string
          example: >-
            Bearer
            eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2FwaS5rZW5qby5pbyIsInN1YiI6IjYwZjBhOTE2MjE0OTg3MjU2YmU5YzhmZiIsImF1ZCI6Imh0dHBzOi8vYXBpLmtlbmpvLmlvIiwiaWF0IjoxNjI2Mzg1MTE1LCJuYmYiOjE2MjYzODUxMTUsImV4cCI6MTYyNjU1NzkxNSwiYWNjZXNzVHlwZSI6IkFwaUFjY2VzcyIsInNfb3JnSWQiOiI2MGYwNGVhN2RmN2JhMjFlY2U0YmYzYzIifQ.cxG_7dIS-VbmDXdJuLkekoyuyCIzQG2fMcgc0nkfbWE8cihhcb5FnALbQkjU9b5-qVcEoMHZlSuUA-jMEBMMVQ
        required: true
  paths:
    /auth/login:
      post:
        summary: Log in an API token.
        description: Create a bearer token to allow connecting the API.
        tags:
          - Authentication
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: The API key generated in Settings.
              example:
                apiKey: 5b8555a77b62b223d27593bcd15e172c2936590391fe4dea8e31f9b9
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      description: A Bearer token to authenticate
                      example: >-
                        Bearer
                        eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2FwaS5rZW5qby5pbyIsInN1YiI6IjYwZjBhOTE2MjE0OTg3MjU2YmU5YzhmZiIsImF1ZCI6Imh0dHBzOi8vYXBpLmtlbmpvLmlvIiwiaWF0IjoxNjI2Mzg1MTE1LCJuYmYiOjE2MjYzODUxMTUsImV4cCI6MTYyNjU1NzkxNSwiYWNjZXNzVHlwZSI6IkFwaUFjY2VzcyIsInNfb3JnSWQiOiI2MGYwNGVhN2RmN2JhMjFlY2U0YmYzYzIifQ.cxG_7dIS-VbmDXdJuLkekoyuyCIzQG2fMcgc0nkfbWE8cihhcb5FnALbQkjU9b5-qVcEoMHZlSuUA-jMEBMMVQ
                    X-Expires-After:
                      type: string
                      description: A expiration date
                      example: '2021-07-17T21:38:35.872Z'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /auth/logout:
      post:
        summary: Log out an API token.
        description: Invalidates a Bearer token.
        tags:
          - Authentication
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /attendances/{attendanceId}:
      get:
        summary: Return an attendance for a given attendance id.
        description: >-
          This endpoint returns one attendance entry specified by 
          **attendanceId**.
        tags:
          - Attendance
        parameters:
          - in: path
            name: attendanceId
            description: The _id of the attendance entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The _id of the requested attendance entry.
                      example: 60a2db290da29e126a18789a
                    userId:
                      type: string
                      description: >-
                        The id of the employee associated to the requested
                        attendance entry.
                      example: 60a2db290da29e126a18789a
                    email:
                      type: string
                      description: >-
                        The email of the employee associated to the requested
                        attendance entry.
                      example: john@acme.io
                    externalId:
                      type: string
                      description: >-
                        The external Id of the employee associated to the
                        requested attendance entry.
                      example: '000034'
                    startTime:
                      type: string
                      description: The start date time of the requested attendance entry.
                      example: '2021-07-01T10:00:00.000Z'
                    endTime:
                      type: string
                      description: The end date time of the requested attendance entry.
                      example: '2021-07-01T13:00:00.000Z'
                    breaks:
                      type: array
                      description: Array that contains the breaks in detail.
                      items:
                        type: object
                        properties:
                          start:
                            type: string
                            description: The start time of the break.
                            example: '11:00:00'
                          end:
                            type: string
                            description: The end time of the break.
                            example: '11:30:00'
                    breakTime:
                      type: number
                      description: >-
                        Number of minutes of break time. If there is no
                        'breaktime' this field will not be in the response. This
                        value is the sum of the total time of breaks.
                      example: 30
                    attendanceCategoryId:
                      type: string
                      description: The Kenjo _id of the attendance category.
                      example: 70a2db290da29e126a18789a
                    attendanceSubCategoryId:
                      type: string
                      description: The Kenjo _id of the attendance sub category.
                      example: 70a2db290da29e126a18789b
                    comment:
                      type: string
                      description: >-
                        Optional text to describe an attendance record (pair of
                        startTime and endTime). The maximum number of characters
                        is 150.
                      example: Morning working attendance tracking.
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      put:
        summary: Update an attendance for a given attendance id.
        description: >-
          This endpoint updates the attendance entry specified by
          **attendanceId**. Only the fields submitted in the body will be updated.
        tags:
          - Attendance
        parameters:
          - in: path
            name: attendanceId
            required: true
            description: The _id of the attendance entry to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  startTime:
                    type: string
                    description: >-
                      The new start time of the attendance entry to update. The
                      valid format is *hh:mm:ss*
                    example: '10:00:00'
                  endTime:
                    type: string
                    description: >-
                      The new end time of the attendance entry to update. The
                      valid format is *hh:mm:ss*
                    example: '10:00:00'
                  breaks:
                    type: array
                    description: >-
                      Array that contains the breaks in detail. Rules:<br> - A
                      maximum of 10 breaks can be loaded via API.<br> - Breaks
                      cannot be overlapped in the same day.<br> - 'start' field is
                      required.<br> - There is no way to update specifically a
                      break.<br> - To remove 'breaks', just send an empty array in
                      the update, something like "breaks":[]
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: >-
                            The start time of the break. This field is required if
                            'breaks' is added to the body. The valid format is
                            *hh:mm:ss*
                          example: '11:00:00'
                        end:
                          type: string
                          description: >-
                            The end time of the break. This field is required if
                            'breaks' is added to the body. The valid format is
                            *hh:mm:ss*
                          example: '11:30:00'
                  comment:
                    type: string
                    description: >-
                      Optional text to describe an attendance record (pair of
                      startTime and endTime). The maximum number of characters is
                      150.
                    example: Morning working attendance tracking.
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The _id of the requested attendance entry.
                    userId:
                      type: string
                      description: >-
                        The id of the employee associated to the requested
                        attendance entry.
                    email:
                      type: string
                      description: >-
                        The email of the employee associated to the requested
                        attendance entry.
                    externalId:
                      type: string
                      description: >-
                        The external Id of the employee associated to the
                        requested attendance entry.
                    startTime:
                      type: string
                      description: The start date time of the requested attendance entry.
                    endTime:
                      type: string
                      description: The end date time of the requested attendance entry.
                    breakTime:
                      type: number
                      description: >-
                        DEPRECATED field, use the 'breaks' field to specify the
                        breaktime. The time in minutes to indicate a break of
                        time. It cannot be greater than the total of minutes
                        reported for the attendance entry.
                    comment:
                      type: string
                      description: >-
                        Optional text to describe an attendance record (pair of
                        startTime and endTime). The maximum number of characters
                        is 150.
                example:
                  _id: 60a2db290da29e126a187891
                  userId: 50a2db290da29e126a18789a
                  email: john@acme.io
                  externalId: '00001'
                  date: '2021-07-01'
                  startTime: '10:00:00'
                  endTime: '13:00:00'
                  breaks:
                    - start: '10:00:00'
                      end: '10:30:00'
                  breakTime: 30
                  comment: Morning working attendance tracking.
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      delete:
        summary: Delete an attendance for a given attendance id.
        description: This endpoint delete the attendance entry specified by **attendanceId**.
        tags:
          - Attendance
        parameters:
          - in: path
            name: attendanceId
            required: true
            description: The Kenjo _id of the attendance entry to remove.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /attendances:
      get:
        summary: Return a list of attendances.
        description: >-
          This endpoint returns an array of objects with all the existing
          attendance entries within Kenjo for a maximum of 31 days, defined by the
          required params **from** and **to**. Every object contains an attendance
          entry.
        tags:
          - Attendance
        parameters:
          - in: query
            name: from
            required: true
            description: A date in format YYYY-MM-DD to indicate the starting point.
            schema:
              type: string
              example: '2021-02-01'
          - in: query
            name: to
            required: true
            description: A date in format YYYY-MM-DD to indicate the ending point.
            schema:
              type: string
              example: '2021-02-04'
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the returned attendance entry.
                      userId:
                        type: string
                        description: >-
                          The Kenjo _id of the employee assigned to the attendance
                          entry.
                      email:
                        type: string
                        description: >-
                          The Kenjo email of the employee assigned to the
                          attendance entry.
                      externalId:
                        type: string
                        description: >-
                          The external id of the employee assigned to the
                          attendance entry.
                      startTime:
                        type: string
                        description: The start date time of the attendance entry.
                      endTime:
                        type: string
                        description: The end date time of the attendance entry.
                      breaks:
                        type: array
                        description: Array that contains the breaks in detail.
                        items:
                          type: object
                          properties:
                            start:
                              type: string
                              description: The start time of the break.
                            end:
                              type: string
                              description: The end time of the break.
                      breakTime:
                        type: string
                        description: >-
                          The break time of the attendance entry. If there is no
                          'breaktime' this field will not be in the response. This
                          value is the sum of the total time of breaks.
                      attendanceCategoryId:
                        type: string
                        description: The Kenjo _id of the attendance category.
                      attendanceSubCategoryId:
                        type: string
                        description: The Kenjo _id of the attendance sub category.
                      comment:
                        type: string
                        description: >-
                          Optional text to describe an attendance record (pair of
                          startTime and endTime). The maximum number of characters
                          is 150.
                  example:
                    - _id: 80a2db290da29e126a18789a
                      email: john@acme.io
                      userId: 83a2db290da29e126a18789a
                      externalId: '00001'
                      startTime: '2021-07-01T10:00:00.000Z'
                      endTime: '2021-07-01T12:00:00.000Z'
                      breaks:
                        - start: '11:00:00'
                          end: '11:30:00'
                      breakTime: 30
                      attendanceCategoryId: 70a2db290da29e126a18789a
                      attendanceSubCategoryId: 70a2db290da29e126a18789b
                      comment: Morning working attendance tracking.
                    - _id: 80a2db290da29e126a18789b
                      email: anna@acme.io
                      userId: 85a2db290da29e126a18789a
                      externalId: '00003'
                      startTime: '2021-07-02T09:00:00.000Z'
                      endTime: '2021-07-02T18:00:00.000Z'
                      breaks:
                        - start: '11:00:00'
                          end: '11:30:00'
                        - start: '13:00:00'
                          end: '14:00:00'
                      breakTime: 90
                      attendanceCategoryId: 70a2db290da29e126a18789a
                      attendanceSubCategoryId: 70a2db290da29e126a18789b
                    - _id: 80a2db290da29e126a18789c
                      email: joaquin@acme.io
                      userId: 88a2db290da29e126a18789a
                      externalId: '00009'
                      startTime: '2021-08-01T10:00:00.000Z'
                      endTime: '2021-08-01T12:00:00.000Z'
                      attendanceCategoryId: 70a2db290da29e126a18789a
                    - _id: 80a2db290da29e126a18789d
                      email: pedro@acme.io
                      userId: 81a2db290da29e126a18789a
                      externalId: '00009'
                      startTime: '2021-08-02T14:00:00.000Z'
                      endTime: '2021-08-02T18:00:00.000Z'
                      comment: I've taken the morning off.
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      post:
        summary: Create a new attendance.
        description: >-
          This endpoint creates an attendance entry for a one employee, so an user
          *identifier* is required to build this relationship. The following
          *identifiers* are the valid ones: **userId**, **email** or
          **externalId**. Also one **startTime** and one **date** are
          required.<br>The new entry will have an unique identifier **_id**. This
          value is returned in the body response.<br><br> A day accepts many
          attendance entries per employee but they cannot be overlapped. It means
          that if, for example, *there is an entry the 2021-06-10 between 09:00
          and 10:00 for the user E-111, then the creation of an new entry for
          E-111 in the 2021-06-10 whose startDate or endDate is between 09:00 and
          10:00 will become a BAD REQUEST*.
        tags:
          - Attendance
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: The Kenjo employee *_id*.
                    example: 50a2db290da29e126a18789a
                  email:
                    type: string
                    description: The Kenjo *email* for an employee.
                    example: john@acme.io
                  externalId:
                    type: string
                    description: The *external id* for an employee for integrations.
                    example: '00001'
                  date:
                    type: string
                    description: >-
                      The date of the entry. The valid format is *YYYY-MM-DD*.
                      Required field.
                    example: '2021-07-01'
                  startTime:
                    type: string
                    description: >-
                      The start time of the entry. The valid format is *hh:mm:ss*.
                      Required field.
                    example: '10:00:00'
                  endTime:
                    type: string
                    description: >-
                      The end time of the entry. It is not a required field but
                      cannot be less or equal than the *startTime*. The valid
                      format is *hh:mm:ss*
                    example: '13:00:00'
                  breaks:
                    type: array
                    description: >-
                      Array that contains the breaks in detail. Rules:<br> - A
                      maximum of 10 breaks can be loaded via API.<br> - Breaks
                      cannot be overlapped in the same day.<br> - 'start' field is
                      required.
                    items:
                      type: object
                      properties:
                        start:
                          type: string
                          description: >-
                            The start time of the break. This field is required if
                            'breaks' is added to the body. The valid format is
                            *hh:mm:ss*
                          example: '11:00:00'
                        end:
                          type: string
                          description: >-
                            The end time of the break. This field is required if
                            'breaks' is added to the body. The valid format is
                            *hh:mm:ss*
                          example: '11:30:00'
                  comment:
                    type: string
                    description: >-
                      Optional text to describe an attendance record (pair of
                      startTime and endTime). The maximum number of characters is
                      150.
                    example: Morning working attendance tracking.
                required:
                  - startTime
                  - date
              example:
                userId: 50a2db290da29e126a18789a
                email: john@acme.io
                externalId: '00001'
                date: '2021-07-01'
                startTime: '10:00:00'
                endTime: '13:00:00'
                breaks:
                  - start: '10:00:00'
                    end: '10:30:00'
                comment: Morning working attendance tracking.
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the new attendance entry.
                      example: 60a2db290da29e126a18789a
                    userId:
                      type: string
                      description: >-
                        The id of the employee assigned to the requested
                        attendance entry.
                      example: 60a2db290da29e126a18789a
                    email:
                      type: string
                      description: >-
                        The email of the employee assigned to the requested
                        attendance entry.
                      example: john@acme.io
                    externalId:
                      type: string
                      description: >-
                        The external Id of the employee assigned to the requested
                        attendance entry.
                      example: '000034'
                    startTime:
                      type: string
                      description: The start date time of the created attendance entry
                      example: '2021-07-01T10:00:00'
                    endTime:
                      type: string
                      description: The end date time of the created attendance entry.
                      example: '2021-07-01T13:00:00'
                    breaks:
                      type: array
                      description: Array that contains the breaks in detail.
                      items:
                        type: object
                        properties:
                          start:
                            type: string
                            description: The start time of the break.
                            example: '11:00:00'
                          end:
                            type: string
                            description: The end time of the break.
                            example: '11:30:00'
                    breakTime:
                      type: number
                      description: >-
                        DEPRECATED field, use the 'breaks' field to specify the
                        breaktime. The time in minutes to indicate a break of
                        time. It cannot be greater than the total of minutes
                        reported for the attendance entry.
                      example: 30
                    comment:
                      type: string
                      description: >-
                        Optional text to describe an attendance record (pair of
                        startTime and endTime). The maximum number of characters
                        is 150.
                      example: Morning working attendance tracking.
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /attendances/track-time:
      post:
        summary: Track an attendance entry.
        description: >-
          This endpoint tracks time only providing the following information:
          **employee identifier** and a **date time**. The following identifiers
          are the valid ones: **userId**, **email** or **externalId**, only one of
          them is required. This action abstracts and simplifies the entries
          tracking, ensuring internally the order and transforming each track
          action to a Kenjo user attendance format.<br><br>Example: Three calls
          for the employee E-111 to the */track-time* endpoint contains the
          following data:<br>T1: 2021-01-01T08:00:00<br>T2:
          2021-01-01T09:00:00<br>T3: 2021-01-01T10:00:00<br>The three calls order
          is T1, T2, T3.<br><br>Then in Kenjo there will be 2 attendance
          pairs:<br>1: 08:00 / 09:00<br>2: 10:00 / --:--<br>The second pair is
          open, with no **endTime** info, until a new one comes. <br><br>If there
          is a new track: 2021-01-01T12:00:00, then the result will be:<br>1:
          08:00 / 09:00<br>2: 10:00 / 12:00<br>If the track is 2021-01-01T07:00:00
          instead, then the previous tracks are reordered to be consistent with
          concept of attendance pairs:<br>1: 07:00 / 08:00<br>2: 09:00 / 10:00
        tags:
          - Attendance
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: The Kenjo employee *_id*.
                    example: 50a2db290da29e126a18789a
                  email:
                    type: string
                    description: The Kenjo *email* for an employee.
                    example: john@acme.io
                  externalId:
                    type: string
                    description: The *external id* for an employee for integrations.
                    example: '00001'
                  dateTime:
                    type: string
                    description: >-
                      The date and the time of the Kenjo employee in format
                      YYYY-MM-DDThh:mm:ss.
                    example: '2021-07-01T09:00:00'
                required:
                  - dateTime
              example:
                userId: 50a2db290da29e126a18789a
                email: john@acme.io
                externalId: '00001'
                dateTime: '2021-07-01T09:00:00'
        responses:
          '201':
            description: CREATED. The returned body matches with the input body.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    userId:
                      type: string
                      description: The Kenjo employee *_id*.
                      example: 50a2db290da29e126a18789a
                    email:
                      type: string
                      description: The Kenjo *email* for an employee.
                      example: john@acme.io
                    externalId:
                      type: string
                      description: The *external id* for an employee for integrations.
                      example: '00001'
                    dateTime:
                      type: string
                      description: >-
                        The date and the time of the Kenjo employee in format
                        YYYY-MM-DDThh:mm:ss.
                      example: '2021-07-01T09:00:00'
                  required:
                    - dateTime
                example:
                  userId: 50a2db290da29e126a18789a
                  email: john@acme.io
                  externalId: '00001'
                  dateTime: '2021-07-01T09:00:00'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /attendances/categories:
      get:
        summary: Return a list of attendance categories.
        description: >-
          This endpoint returns an array of objects. Every object contains an
          attendance category.
        tags:
          - Attendance
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned attendance category.
                          name:
                            type: string
                            description: The name of the returned attendance category.
                          parentCategoryId:
                            type: string
                            description: The id of the parent attendance category.
                          isActive:
                            type: boolean
                            description: >-
                              If the attendance category is active then this field
                              is TRUE, otherwise is FALSE.
                      example:
                        - _id: 80a2db290da29e126a18789a
                          name: Project in Germany
                          isActive: true
                        - _id: 80a2db290da29e126a18789b
                          name: Absence
                          parentCategoryId: 80a2db290da29e126a18789a
                          isActive: true
                        - _id: 80a2db290da29e126a18789b
                          name: Project in Spain
                          isActive: true
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /attendances/expected-time:
      get:
        summary: Return a list of expected times.
        description: >-
          This endpoint returns a paginated list of expected time by user for a
          given date range.
        tags:
          - Attendance
        parameters:
          - in: query
            name: from
            required: true
            description: A date in format YYYY-MM-DD to indicate the starting point.
            schema:
              type: string
              example: '2020-01-01'
          - in: query
            name: to
            required: true
            description: A date in format YYYY-MM-DD to indicate the ending point.
            schema:
              type: string
              example: '2020-01-10'
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: companyId
            description: Optional filter. The company id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789a
          - in: query
            name: officeId
            description: Optional filter. The office id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789d
          - in: query
            name: departmentId
            description: Optional filter. The department id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789c
          - in: query
            name: userId
            description: >-
              Optional filter. The id of the Kenjo employee. It accepts 2
              formats:<br><br> 1. An unique string with the Kenjo employee id.
              <br>Example: *userId=80a2db290da29e126a18789c* <br><br> 2. A string
              with more than one Kenjo employee ids separated by commas (until 15
              ids as maximum). <br>Example:
              *userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*
            schema:
              type: string
              example: 80a2db290da29e126a18789c
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          userId:
                            type: string
                            description: The Kenjo _id of the returned user.
                          days:
                            type: array
                            description: >-
                              Array that contains the days with the expected time
                              information per user in the provided date range.
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  description: The date in format YYYY-MM-DD.
                                expectedHours:
                                  type: number
                                  description: The number of expected hours for a given day.
                                expectedMinutes:
                                  type: number
                                  description: >-
                                    The number of expected minutes for a given
                                    day.
                          totalExpectedHours:
                            type: number
                            description: >-
                              The total number of expected hours for an user in a
                              given date range.
                          totalExpectedMinutes:
                            type: number
                            description: >-
                              The total number of expected minutes for an user in
                              a given date range.
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - userId: 80a2db290da29e126a18789a
                        days:
                          - date: '2020-01-01T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-02T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-03T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-04T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-05T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-06T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-07T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-08T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-09T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-10T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                        totalExpectedHours: 64
                        totalExpectedMinutes: 3840
                      - userId: 80a2db290da29e126a18789b
                        days:
                          - date: '2020-01-01T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-02T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-03T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-04T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-05T00:00:00.000Z'
                            expectedHours: 8
                            expectedMinutes: 480
                          - date: '2020-01-06T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-07T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-08T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-09T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                          - date: '2020-01-10T00:00:00.000Z'
                            expectedHours: 0
                            expectedMinutes: 0
                        totalExpectedHours: 40
                        totalExpectedMinutes: 2400
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /companies:
      get:
        summary: Return a list of companies.
        description: Returns a list of the existing companies in Kenjo.
        tags:
          - Companies
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            description: The name of the company.
            schema:
              type: string
              example: ACME Ltd
          - in: query
            name: city
            description: The city of the company.
            schema:
              type: string
              example: Madrid
          - in: query
            name: country
            description: The country code of the company in ISO 3166-1 alpha-2.
            schema:
              type: string
              example: ES
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the company.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the company.
                        example: ACME Ltd
                      city:
                        type: string
                        description: The city of the company.
                        example: Madrid
                      country:
                        type: string
                        description: The country code of the company in ISO 3166-1 alpha-2.
                        example: ES
                  example:
                    - _id: 40a2db290da29e126a18789a
                      name: ACME Ltd
                    - _id: 40a2db290da29e126a18789b
                      name: ACME SA
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /offices:
      get:
        summary: Return a list of offices.
        description: Returns a list of the existing offices in Kenjo.
        tags:
          - Offices
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            description: The name of the office.
            schema:
              type: string
              example: Berlin office
          - in: query
            name: companyId
            description: The Kenjo id of the company.
            schema:
              type: string
              example: 40a2db290da29e126a187895
          - in: query
            name: calendarId
            description: The Kenjo id of the calendar.
            schema:
              type: string
              example: 40a2db290da29e126a187895
          - in: query
            name: street
            description: The street of the office.
            schema:
              type: string
              example: Urbanstrasse, 71
          - in: query
            name: postalCode
            description: The postal code of the office.
            schema:
              type: string
              example: '34213'
          - in: query
            name: city
            description: The city of the office.
            schema:
              type: string
              example: Berlin
          - in: query
            name: country
            description: The country of the office in ISO code.
            schema:
              type: string
              example: DE
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the office.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the office.
                        example: Berlin office
                      companyId:
                        type: string
                        description: The Kenjo id of the company.
                        example: 40a2db290da29e126a187892
                      calendarId:
                        type: string
                        description: The Kenjo id of the calendar.
                        example: 40a2db290da29e126a187895
                      street:
                        type: string
                        description: The street of the office.
                        example: Urbanstrasse, 71
                      postalCode:
                        type: string
                        description: The postal code of the office.
                        example: 34213
                      city:
                        type: string
                        description: The city of the office.
                        example: Berlin
                      country:
                        type: string
                        description: The country of the office in ISO code.
                        example: DE
                  example:
                    - _id: 50a2db290da29e126a18789a
                      name: ACME Berlin
                      companyId: 5b8555a97b62b223d27598c7
                      calendarId: 5b8555a97b62b223d275a176
                      street: Urbanstr. 71
                      postalCode: 10967
                      city: Berlin
                      country: DE
                    - _id: 50a2db290da29e126a18789b
                      name: ACME London
                      companyId: 5b8555a97b62b223d27598c4
                      calendarId: 5b8555a97b62b223d275a175
                      street: Park Street 20
                      postalCode: 12342
                      city: London
                      country: GB
                    - _id: 50a2db290da29e126a18789c
                      name: ACME Madrid
                      companyId: 5b8555a97b62b223d27598c6
                      calendarId: 5b8555a97b62b223d275a177
                      street: Manuel Ferrero, 19
                      postalCode: 28096
                      city: Madrid
                      country: ES
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      post:
        summary: Create a new office.
        description: >-
          Creates a new office.<br><br>The required fields are *name*,
          *companyId*, *calendarId*.<br>Optional fields are *street*,
          *postalCode*, *city* and *country*. <br> The *country* field has to be a
          valid ISO country code.
        tags:
          - Offices
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the office to create. Required field.
                    example: Spain office
                  companyId:
                    type: string
                    description: The company id of the office to create. Required field.
                    example: 60dadb6362702d057f8fb486
                  calendarId:
                    type: string
                    description: The calendar id of the office to create. Required field.
                    example: 60f808f727ad58fe791bae91
                  country:
                    type: string
                    description: The country of the office to create in ISO code.
                    example: ES
                  postalCode:
                    type: string
                    description: The postal code of the office to create.
                    example: '28030'
                  city:
                    type: string
                    description: The city of the office to create.
                    example: ES
                  street:
                    type: string
                    description: The street of the office to create.
                    example: Paseo Castellana, 13
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo id of the new office.
                      example: 60f808f727ad58fe791bae9e
                    name:
                      type: string
                      description: The new name of the office to create.
                      example: Spain office
                    companyId:
                      type: string
                      description: The company id of the office to create.
                      example: 60dadb6362702d057f8fb486
                    calendarId:
                      type: string
                      description: The calendar id of the office to create.
                      example: 60f808f727ad58fe791bae91
                    country:
                      type: string
                      description: The country of the office to create.
                      example: ES
                    postalCode:
                      type: string
                      description: The postalcode of the office to create.
                      example: '28030'
                    city:
                      type: string
                      description: The city of the office to create.
                      example: Madrid
                    street:
                      type: string
                      description: The street of the office to create.
                      example: Paseo Castellana
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /offices/{id}:
      get:
        summary: Return an office for a given office id.
        description: Returns the office referenced by *id*.
        tags:
          - Offices
        parameters:
          - in: path
            name: id
            description: The _id of the office entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the office.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the office.
                      example: Spain office
                    companyId:
                      type: string
                      description: The Kenjo id of the company.
                      example: 40a2db290da29e126a187892
                    calendarId:
                      type: string
                      description: The Kenjo id of the calendar.
                      example: 40a2db290da29e126a187895
                    street:
                      type: string
                      description: The street of the office.
                      example: Paseo Castellana, 13
                    postalCode:
                      type: string
                      description: The postal code of the office.
                      example: 28030
                    city:
                      type: string
                      description: The city of the office.
                      example: Madrid
                    country:
                      type: string
                      description: The country of the office in ISO code.
                      example: ES
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      put:
        summary: Update an office for a given office id.
        description: >-
          Updates an office referenced by *id*. Only the attributes submitted are
          modified.
        tags:
          - Offices
        parameters:
          - in: path
            name: id
            description: The _id of the office entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the office to update.
                    example: Madrid office
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the office.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The new name of the office to update.
                      example: Madrid office
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      delete:
        summary: Delete an office for a given office id.
        description: Removes the office referenced by *id*.
        tags:
          - Offices
        parameters:
          - in: path
            name: id
            description: The _id of the office entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /departments:
      get:
        summary: Return a list of departments.
        description: Returns a list of the existing departments in Kenjo.
        tags:
          - Departments
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            description: The department name.
            schema:
              type: string
              example: Happiness dept.
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the department.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the department.
                        example: Sales
                  example:
                    - _id: 60a2db290da29e126a18789a
                      name: Sales
                    - _id: 60a2db290da29e126a18789b
                      name: Marketing
                    - _id: 60a2db290da29e126a18789c
                      name: Tech
                    - _id: 60a2db290da29e126a18789d
                      name: Finance
                    - _id: 60a2db290da29e126a18789e
                      name: Customer Success
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      post:
        summary: Create a new department.
        description: Creates a new department.<br>The *name* is the only required field.<br>
        tags:
          - Departments
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the department to update. Required field.
                    example: Sales
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the department.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the department.
                      example: Sales
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /departments/{id}:
      get:
        summary: Return a department for a given department id.
        description: Returns the department referenced by *id*.
        tags:
          - Departments
        parameters:
          - in: path
            name: id
            description: The _id of the department entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the department.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the department.
                      example: Sales
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      put:
        summary: Update a department for a given department id.
        description: >-
          Updates a department referenced by *id*. Only the attributes submitted
          are modified.
        tags:
          - Departments
        parameters:
          - in: path
            name: id
            description: The _id of the department entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the department to update.
                    example: Sales
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The new name of the department to update.
                      example: Sales
                    _id:
                      type: string
                      description: The Kenjo _id of the department.
                      example: 40a2db290da29e126a18789a
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      delete:
        summary: Delete a department for a given department id.
        description: Removes the department referenced by *id*.
        tags:
          - Departments
        parameters:
          - in: path
            name: id
            description: The _id of the department entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /teams:
      get:
        summary: Return a list of teams.
        description: Returns a list of the existing teams in Kenjo.
        tags:
          - Teams
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            description: The team name.
            schema:
              type: string
              example: Developers
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the team.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the team.
                        example: Tech backend
                  example:
                    - _id: 60a2db290da29e126a18789a
                      name: Tech backend
                    - _id: 60a2db290da29e126a18789b
                      name: Tech devOps
                    - _id: 60a2db290da29e126a18789c
                      name: Tech frontend
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      post:
        summary: Create a new team.
        description: Creates a new team.<br>The *name* is the only required field.<br>
        tags:
          - Teams
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the team to update. Required field.
                    example: Tech devOps
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the team.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the department.
                      example: Tech devOps
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /teams/{id}:
      get:
        summary: Return a team for a given team id.
        description: Returns the team referenced by *id*.
        tags:
          - Teams
        parameters:
          - in: path
            name: id
            description: The _id of the team entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the team.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the team.
                      example: Tech devOps
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      put:
        summary: Update a team for a given team id.
        description: >-
          Updates a team referenced by *id*. Only the attributes submitted are
          modified.
        tags:
          - Teams
        parameters:
          - in: path
            name: id
            description: The _id of the team entry to request. Required field.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the team to update.
                    example: Sales
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the team.
                      example: 60a2db290da29e126a18789a
                    name:
                      type: string
                      description: The new name of the team to update.
                      example: Sales
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      delete:
        summary: Delete a team for a given team id.
        description: Removes the team referenced by *id*.
        tags:
          - Teams
        parameters:
          - in: path
            name: id
            description: The _id of the team entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /areas:
      get:
        summary: Return a list of areas.
        description: Returns a list of the existing areas in Kenjo.
        tags:
          - Areas
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the area.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the area.
                        example: Recruiting feature
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      post:
        summary: Create a new area.
        description: Creates a new area.<br>The *name* is the only required field.<br>
        tags:
          - Areas
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the area to update.
                    example: Recruiting feature
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the area.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the area.
                      example: Recruiting feature
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /areas/{id}:
      get:
        summary: Return a area for a given area id.
        description: Returns the area referenced by *id*.
        tags:
          - Areas
        parameters:
          - in: path
            name: id
            description: The _id of the area entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the area.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the area.
                      example: Recruiting feature
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      put:
        summary: Update an area for a given area id.
        description: >-
          Updates a area referenced by *id*. Only the attributes submitted are
          modified.
        tags:
          - Areas
        parameters:
          - in: path
            name: id
            description: The _id of the area entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The new name of the area to update.
                    example: Sales
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The new name of the area to update.
                      example: Sales
                    _id:
                      type: string
                      description: The Kenjo _id of the area.
                      example: 40a2db290da29e126a18789a
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      delete:
        summary: Delete an area for a given area id.
        description: Removes the area referenced by *id*.
        tags:
          - Areas
        parameters:
          - in: path
            name: id
            description: The _id of the area entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '204':
            $ref: '#/components/responses/noContent'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /calendars:
      get:
        summary: Return a list of calendars.
        description: Returns a list of the existing calendars in Kenjo.
        tags:
          - Calendars
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            description: The calendar name.
            schema:
              type: string
              example: Madrid Calendar
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo _id of the calendar.
                        example: 40a2db290da29e126a18789a
                      name:
                        type: string
                        description: The name of the calendar.
                        example: Standard calendar
                  example:
                    - _id: 60a2db290da29e126a18789a
                      name: Standard calendar
                    - _id: 60a2db290da29e126a18789b
                      name: Madrid calendar
                    - _id: 60a2db290da29e126a18789c
                      name: Tech calendar
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /calendars/{id}:
      get:
        summary: Return a calendar for a given calendar id.
        description: Returns the calendar referenced by *id*.
        tags:
          - Calendars
        parameters:
          - in: path
            name: id
            description: The _id of the calendar entry to request.
            required: true
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Kenjo _id of the calendar.
                      example: 40a2db290da29e126a18789a
                    name:
                      type: string
                      description: The name of the calendar.
                      example: Standard calendar
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /user-accounts:
      get:
        summary: Return a list of users.
        description: >-
          This endpoint returns an array of objects with the existing employees in
          Kenjo. Every object contains the basic employee information from
          **account**, **personal** and **work** sections per each existing
          employee.
        tags:
          - User accounts
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The Kenjo employee _id.
                      email:
                        type: string
                        description: The employee email in Kenjo.
                      isActive:
                        type: string
                        description: Indicates the active status of the Kenjo employee.
                      firstName:
                        type: string
                        description: The first name of the Kenjo employee.
                      lastName:
                        type: string
                        description: The last name of the Kenjo employee.
                      displayName:
                        type: string
                        description: The complete name of the Kenjo employee.
                      companyId:
                        type: string
                        description: The Kenjo Id of the company for this employee.
                      officeId:
                        type: string
                        description: The Kenjo Id of the office for this employee.
                      departmentId:
                        type: string
                        description: The Kenjo Id of the department for this employee.
                      jobTitle:
                        type: string
                        description: The job title for this employee.
                  example:
                    - _id: 80a2db290da29e126a18789a
                      email: john@acme.io
                      isActive: true
                      firstName: John
                      lastName: Doo
                      displayName: John Doo
                      companyId: 82a2db290da29e126a18789a
                      officeId: 83a2db290da29e126a18789a
                      departmentId: 84a2db290da29e126a18789a
                      jobTitle: 84a2db290da29e126a18789a
                    - _id: 80a2db290da29e126a18789b
                      email: anna@acme.io
                      isActive: true
                      firstName: Anna
                      lastName: Kaleshnikova
                      displayName: Anna Kaleshnikova
                      companyId: 82a2db290da29e126a18789a
                      officeId: 83a2db290da29e126a18789a
                      departmentId: 84a2db290da29e126a18789a
                      jobTitle: 84a2db290da29e126a18789a
                    - _id: 80a2db290da29e126a18789c
                      email: joaquin@acme.io
                      isActive: true
                      firstName: Joaquin
                      lastName: Padrazo
                      displayName: Joaquin Padrazo
                      companyId: 82a2db290da29e126a18789a
                      officeId: 83a2db290da29e126a18789a
                      departmentId: 84a2db290da29e126a18789a
                      jobTitle: 84a2db290da29e126a18789a
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees:
      post:
        summary: Create a new employee.
        description: >
          This endpoint creates a deactivated employee in Kenjo, the 'isActive'
          field set to false. To activate an employee use the put /activate
          method. This method will send an activation message to the employee
          email to complete the activation through the onboarding wizard.

          <br><br>The field *email* is required and must be unique. Also
          *firstName*, *lastName* and *companyId* are required fields. If the work
          schedule is not provided then all the days of the week except Saturdays
          and Sundays are set to true. If the *language* is not specified, the
          assigned company language will be set by default.

          <br><br>**Custom fields** information can be provided in this operation
          for the **personal**, **work**, **address**, **financial** and **home**
          sections. The *API name* of the custom field is required and the data
          format has to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'Activity type' belongs to the section 'work'*:
            ```
          ...

          {
            ...
              "work": {
                "c_Activitytype": "1",
                ...
              },
            ...
          }

          ```

          *'Activity type' is a field type 'List' (Strings list) with the possible
          values: "1", "2" and "3". It means that if a different value or type is
          provided then the request will return an error.*

          <br><br>If the operation get success then an inactive employee is
          created and the response will include the provided information and the
          Kenjo id for the new employee.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: object
                    properties:
                      email:
                        type: string
                        description: >-
                          The employee email in Kenjo. This field is required and
                          must be unique.
                        example: john@acme.io
                      language:
                        type: string
                        description: >-
                          The employee language. Only is valid one of the
                          following values 'en' (english), 'es' (spanish) or 'de'
                          (german).
                        example: es
                      externalId:
                        type: string
                        description: >-
                          The employee external id for integration proposals. This
                          value must be unique.
                        example: E-000001
                    required:
                      - email
                  personal:
                    type: object
                    properties:
                      firstName:
                        type: string
                        description: The name of the Kenjo employee. This field is required.
                        example: John
                      lastName:
                        type: string
                        description: >-
                          The surname of the Kenjo employee. This field is
                          required.
                        example: Doe
                      displayName:
                        type: string
                        description: The complete name of the Kenjo employee.
                        example: John Doe
                      gender:
                        type: string
                        description: >-
                          The employee gender. Only is valid one of the following
                          values 'Male' (male), 'Female' (female) or 'Other'
                          (other).
                        example: Male
                      birthdate:
                        type: string
                        description: >-
                          The employee birth date. Format
                          YYYY-MM-DDThh:mm:ss.000Z.
                        example: '1980-01-28T00:00:00.000Z'
                    required:
                      - firstName
                      - lastName
                  work:
                    type: object
                    properties:
                      companyId:
                        type: string
                        description: >-
                          The company id of the Kenjo employee. This field is
                          required and must to match with Kenjo _id of an existing
                          company.
                        example: 50a2db290da29e126a187894
                      officeId:
                        type: string
                        description: The office id of the Kenjo employee.
                        example: 50a2db290da29e126a187895
                      departmentId:
                        type: string
                        description: The department id of the Kenjo employee.
                        example: 50a2db290da29e126a187896
                      startDate:
                        type: string
                        description: >-
                          The starting date of the employee. Format
                          YYYY-MM-DDThh:mm:ss.000Z.
                        example: '2022-01-01T00:00:00.000Z'
                      jobTitle:
                        type: string
                        description: The job title of the employee.
                        example: Actor
                      workPhone:
                        type: string
                        description: The work phone of the employee.
                        example: +34 666 70 90 32
                      workMobile:
                        type: string
                        description: The work mobile of the employee.
                        example: +34 680 70 90 32
                      isAssistant:
                        type: boolean
                        description: >-
                          Allow to indicate if the employee has or not the
                          assistant role.
                        example: false
                      probationPeriodEnd:
                        type: string
                        description: >-
                          The probation period of the employee. Format
                          YYYY-MM-DDThh:mm:ss.000Z.
                        example: '2022-06-01T00:00:00.000Z'
                      reportsToId:
                        type: string
                        description: >-
                          The Kenjo employee id of the user to whom the employee
                          reports. The employee id to assign can be an active or
                          inactive user. Trying to assign the own employee id or
                          the id of someone who is already reporting will arise an
                          error.
                        example: 50a2db290da29e126a1878523
                      weeklyHours:
                        type: number
                        description: >-
                          The number of weekly hours that an employee works.
                          Combined with the work schedule allows to determine the
                          day hours. This field is required and must be equals or
                          greater than 1.
                        example: 40
                    required:
                      - companyId
                      - weeklyHours
                  workSchedule:
                    type: object
                    properties:
                      mondayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if mondays are working days for the
                          employee.
                        example: true
                      tuesdayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if tuesdays are working days for the
                          employee.
                        example: true
                      wednesdayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if wednesdays are working days for the
                          employee.
                        example: true
                      thursdayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if thursdays are working days for the
                          employee.
                        example: true
                      fridayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if fridays are working days for the
                          employee.
                        example: true
                      saturdayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if saturdays are working days for the
                          employee.
                        example: true
                      sundayWorkingDay:
                        type: boolean
                        description: >-
                          Allow to indicate if sundays are working days for the
                          employee.
                        example: true
                      trackAttendance:
                        type: boolean
                        description: >-
                          Allow to activate or deactivate the attendance tracking
                          for the employee.
                        example: true
                  address:
                    type: object
                    properties:
                      street:
                        type: string
                        description: The name of the street.
                        example: Calle Enrique San Francisco 13
                      postalCode:
                        type: string
                        description: The postal code.
                        example: '28080'
                      city:
                        type: string
                        description: The city.
                        example: Madrid
                      country:
                        type: string
                        description: The country code in ISO 3166-1 alpha-2.
                        example: ES
                  financial:
                    type: object
                    properties:
                      accountHolderName:
                        type: string
                        description: The accounts holder's name.
                        example: Michael Corleone
                      bankName:
                        type: string
                        description: The bank name.
                        example: Bank of Sicily
                      accountNumber:
                        type: string
                        description: The account number.
                        example: 0093 344 2132221 3304 00
                      iban:
                        type: string
                        description: The IBAN.
                        example: DE32120222391919191911
                      swiftCode:
                        type: string
                        description: The SWIFT code.
                        example: '12321234'
                      nationalId:
                        type: string
                        description: The national id document.
                        example: 04123547X
                      passport:
                        type: string
                        description: The passport number.
                        example: FA1234098
                      nationalInsuranceNumber:
                        type: string
                        description: The national insurance number
                        example: '23123312321'
                      taxCode:
                        type: string
                        description: The tax number.
                        example: 323451R
                      taxIdentificationNumber:
                        type: string
                        description: The tax identification number.
                        example: T4312345
                  home:
                    type: object
                    properties:
                      maritalStatus:
                        type: string
                        description: >-
                          The marital status. Only is valid one of the following
                          values "Divorced", "Domestic Partnership", "Married",
                          "Separated", "Single", "Widowed".
                        example: Widowed
                      spouseFirstName:
                        type: string
                        description: The first name of the employee's spouse.
                        example: Catherine
                      spouseLastName:
                        type: string
                        description: The last name of the employee's spouse.
                        example: Tramell
                      spouseBirthdate:
                        type: string
                        description: >-
                          The birth date of the employee's spouse. Format
                          YYYY-MM-DDThh:mm:ss.000Z.
                        example: '2060-01-26T00:00:00.000Z'
                      spouseGender:
                        type: string
                        description: >-
                          The employee's spouse gender. Only is valid one of the
                          following values 'Male' (male), 'Female' (female) or
                          'Other' (other).
                        example: Female
                      personalEmail:
                        type: string
                        description: The employee personal email.
                        example: john@acme.io
                      personalPhone:
                        type: string
                        description: The employee personal phone.
                        example: '4567092323'
                      personalMobile:
                        type: string
                        description: The employee personal phone
                        example: '3567092310'
              example:
                account:
                  email: john@acme.io
                  externalId: E-000001
                  language: es
                personal:
                  firstName: John
                  lastName: Doe
                  displayName: John Doe
                  gender: Male
                  birthdate: '1980-01-28T00:00:00.000Z'
                work:
                  companyId: 50a2db290da29e126a187894
                  officeId: 50a2db290da29e126a187895
                  departmentId: 50a2db290da29e126a187896
                  startDate: '2022-01-01T00:00:00.000Z'
                  jobTitle: Actor
                  workPhone: +34 666 70 90 32
                  workMobile: +34 680 70 90 32
                  isAssistant: false
                  probationPeriodEnd: '2022-06-01T00:00:00.000Z'
                  reportsToId: 50a2db290da29e126a1878523
                  weeklyHours: 40
                workSchedule:
                  mondayWorkingDay: true
                  tuesdayWorkingDay: true
                  wednesdayWorkingDay: true
                  thursdayWorkingDay: true
                  fridayWorkingDay: true
                  saturdayWorkingDay: true
                  sundayWorkingDay: true
                  trackAttendance: false
                address:
                  street: Calle Enrique San Francisco 13
                  postalCode: '28080'
                  city: Madrid
                  country: ES
                financial:
                  accountHolderName: Michael Corleone
                  bankName: Bank of Sicily
                  accountNumber: 0093 344 2132221 3304 00
                  iban: DE32120222391919191911
                  swiftCode: '12321234'
                  nationalId: 04123547X
                  passport: FA1234098
                  nationalInsuranceNumber: '23123312321'
                  taxCode: 323451R
                  taxIdentificationNumber: T4312345
                home:
                  maritalStatus: Widowed
                  spouseFirstName: Catherine
                  spouseLastName: Tramell
                  spouseBirthdate: '2060-01-26T00:00:00.000Z'
                  spouseGender: Female
                  personalEmail: john@acme.io
                  personalPhone: '4567092323'
                  personalMobile: '3567092310'
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    account:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The employee Kenjo *_id*.
                          example: 50a2db290da29e126a187843
                        email:
                          type: string
                          description: The employee email in Kenjo.
                          example: john@acme.io
                        externalId:
                          type: string
                          description: The employee external id for integration proposals.
                          example: E-000001
                        isActive:
                          type: string
                          description: The activation status, once created is false.
                          example: false
                        language:
                          type: string
                          description: >-
                            The employee language. Only is valid one of the
                            following values 'en' (english), 'es' (spanish) or
                            'de' (german).
                          example: es
                    personal:
                      type: object
                      properties:
                        firstName:
                          type: string
                          description: >-
                            The name of the Kenjo employee. This field is
                            required.
                          example: John
                        lastName:
                          type: string
                          description: >-
                            The surname of the Kenjo employee. This field is
                            required.
                          example: Doe
                        displayName:
                          type: string
                          description: The complete name of the Kenjo employee.
                          example: John Doe
                        gender:
                          type: string
                          description: >-
                            The employee gender. Only is valid one of the
                            following values 'Male' (male), 'Female' (female) or
                            'Other' (other).
                          example: Male
                        birthdate:
                          type: string
                          description: >-
                            The employee birth date. Format
                            YYYY-MM-DDThh:00:00.000Z.
                          example: '1980-01-28T00:00:00.000Z'
                    work:
                      type: object
                      properties:
                        companyId:
                          type: string
                          description: The company id of the Kenjo employee.
                          example: 50a2db290da29e126a187894
                        officeId:
                          type: string
                          description: The office id of the Kenjo employee.
                          example: 50a2db290da29e126a187895
                        departmentId:
                          type: string
                          description: The department id of the Kenjo employee.
                          example: 50a2db290da29e126a187896
                        startDate:
                          type: string
                          description: The starting date of the employee in ISO format.
                          example: '2022-01-01T00:00:00.000Z'
                        jobTitle:
                          type: string
                          description: The job title of the employee.
                          example: Actor
                        workPhone:
                          type: string
                          description: The work phone of the employee.
                          example: +34 666 70 90 32
                        workMobile:
                          type: string
                          description: The work mobile of the employee.
                          example: +34 680 70 90 32
                        isAssistant:
                          type: boolean
                          description: >-
                            Allow to indicate if the employee has or not the
                            assistant role.
                          example: false
                        probationPeriodEnd:
                          type: string
                          description: >-
                            The probation period of the employee. Format
                            YYYY-MM-DDThh:mm:ss.000Z.
                          example: '2022-06-01T00:00:00.000Z'
                        reportsToId:
                          type: string
                          description: >-
                            The Kenjo employee id of the user to whom the employee
                            reports. The employee id to assign can be an active or
                            inactive user. Trying to assign the own employee id or
                            the id of someone who is already reporting will arise
                            an error.
                          example: 50a2db290da29e126a1878523
                        weeklyHours:
                          type: number
                          description: >-
                            The number of weekly hours that an employee works.
                            Combined with the work schedule allows to determine
                            the day hours. This field is required and must be
                            equals or greater than 1.
                          example: 40
                    workSchedule:
                      type: object
                      properties:
                        mondayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if mondays are working days for the
                            employee.
                          example: true
                        tuesdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if tuesdays are working days for the
                            employee.
                          example: true
                        wednesdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if wednesdays are working days for
                            the employee.
                          example: true
                        thursdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if thursdays are working days for
                            the employee.
                          example: true
                        fridayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if fridays are working days for the
                            employee.
                          example: true
                        saturdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if saturdays are working days for
                            the employee.
                          example: true
                        sundayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if sundays are working days for the
                            employee.
                          example: true
                        trackAttendance:
                          type: boolean
                          description: >-
                            The activation status of attendance tracking for the
                            employee.
                          example: true
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                          description: The name of the street.
                          example: Calle Enrique San Francisco 13
                        postalCode:
                          type: string
                          description: The postal code.
                          example: '28080'
                        city:
                          type: string
                          description: The city.
                          example: Madrid
                        country:
                          type: string
                          description: The country code in ISO 3166-1 alpha-2.
                          example: ES
                    financial:
                      type: object
                      properties:
                        accountHolderName:
                          type: string
                          description: The accounts holder's name.
                          example: Michael Corleone
                        bankName:
                          type: string
                          description: The bank name.
                          example: Bank of Sicily
                        accountNumber:
                          type: string
                          description: The account number.
                          example: 0093 344 2132221 3304 00
                        iban:
                          type: string
                          description: The IBAN.
                          example: DE32120222391919191911
                        swiftCode:
                          type: string
                          description: The SWIFT code.
                          example: '12321234'
                        nationalId:
                          type: string
                          description: The national id document.
                          example: 04123547X
                        passport:
                          type: string
                          description: The passport number.
                          example: FA1234098
                        nationalInsuranceNumber:
                          type: string
                          description: The national insurance number
                          example: '23123312321'
                        taxCode:
                          type: string
                          description: The tax number.
                          example: 323451R
                        taxIdentificationNumber:
                          type: string
                          description: The tax identification number.
                          example: T4312345
                    home:
                      type: object
                      properties:
                        maritalStatus:
                          type: string
                          description: >-
                            The marital status. Only is valid one of the following
                            values "Divorced", "Domestic Partnership", "Married",
                            "Separated", "Single", "Widowed".
                          example: Widowed
                        spouseFirstName:
                          type: string
                          description: The first name of the employee's spouse.
                          example: Catherine
                        spouseLastName:
                          type: string
                          description: The last name of the employee's spouse.
                          example: Tramell
                        spouseBirthdate:
                          type: string
                          description: >-
                            The birth date of the employee's spouse. Format
                            YYYY-MM-DDThh:mm:ss.000Z.
                          example: '2060-01-26T00:00:00.000Z'
                        spouseGender:
                          type: string
                          description: >-
                            The employee's spouse gender. Only is valid one of the
                            following values 'Male' (male), 'Female' (female) or
                            'Other' (other).
                          example: Female
                        personalEmail:
                          type: string
                          description: The employee personal email.
                          example: john@acme.io
                        personalPhone:
                          type: string
                          description: The employee personal phone.
                          example: '4567092323'
                        personalMobile:
                          type: string
                          description: The employee personal phone
                          example: '3567092310'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
      get:
        summary: Return a list of user accounts.
        description: >-
          This endpoint returns the list of employee accounts existing in Kenjo.
          It is similar to the */employees/accounts* endpoint.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo employee _id.
                          email:
                            type: string
                            description: The employee email in Kenjo.
                          isActive:
                            type: string
                            description: Indicates the active status of the Kenjo employee.
                          externalId:
                            type: string
                            description: The external id for this employee.
                          language:
                            type: string
                            description: >-
                              The employee language. The available values are 'en'
                              (english), 'es' (spanish) or 'de' (german).
                  example:
                    data:
                      - _id: 80a2db290da29e126a18789a
                        email: john@acme.io
                        isActive: true
                        externalId: E-000001
                        language: de
                      - _id: 80a2db290da29e126a18789b
                        email: anna@acme.io
                        isActive: true
                        externalId: E-000002
                        language: es
                      - _id: 80a2db290da29e126a18789c
                        email: joaquin@acme.io
                        isActive: true
                        externalId: E-000003
                        language: de
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}:
      get:
        summary: Return all the sections information for a given employee Id.
        description: >-
          This endpoint returns information about the **account**, **personal**,
          **work**, **work schedule**, **address**, **financial** and **home**
          sections for a given employee id. The *employeeId* param represents a
          Kenjo employee id.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: path
            name: employeeId
            description: The _id of the employee to request.
            required: true
            schema:
              type: string
              example: 50a2db290da29e126a187843
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    account:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The employee Kenjo *_id*.
                          example: 50a2db290da29e126a187843
                        email:
                          type: string
                          description: >-
                            The employee email in Kenjo. This is an unique
                            identifier and required.
                          example: john@acme.io
                        externalId:
                          type: string
                          description: The employee external id for integration proposals.
                          example: E-000001
                        isActive:
                          type: boolean
                          description: The employee activation status.
                          example: true
                        language:
                          type: string
                          description: >-
                            The employee language. The available values are 'en'
                            (english), 'es' (spanish) or 'de' (german).
                          example: es
                    personal:
                      type: object
                      properties:
                        firstName:
                          type: string
                          description: >-
                            The name of the Kenjo employee. This field is
                            required.
                          example: John
                        lastName:
                          type: string
                          description: >-
                            The surname of the Kenjo employee. This field is
                            required.
                          example: Doe
                        displayName:
                          type: string
                          description: >-
                            The composition of firstName and lastName of the Kenjo
                            employee.
                          example: John Doe
                        gender:
                          type: string
                          description: The gender of the Kenjo employee.
                          example: Male
                        birthdate:
                          type: string
                          description: >-
                            The employee birth date. Format
                            YYYY-MM-DDThh:00:00.000Z.
                          example: '1980-01-28T00:00:00.000Z'
                    work:
                      type: object
                      properties:
                        companyId:
                          type: string
                          description: The company id of the Kenjo employee.
                          example: 50a2db290da29e126a187894
                        officeId:
                          type: string
                          description: The office id of the Kenjo employee.
                          example: 50a2db290da29e126a187895
                        departmentId:
                          type: string
                          description: The department id of the Kenjo employee.
                          example: 50a2db290da29e126a187896
                        startDate:
                          type: string
                          description: >-
                            The starting date of the Kenjo employee in format
                            YYYY-MM-DDThh:mm:ss.
                          example: '2021-07-01T00:00:00.000Z'
                        jobTitle:
                          type: string
                          description: The job title of the employee.
                          example: Actor
                        workPhone:
                          type: string
                          description: The work phone of the employee.
                          example: +34 666 70 90 32
                        workMobile:
                          type: string
                          description: The work mobile of the employee.
                          example: +34 680 70 90 32
                        isAssistant:
                          type: boolean
                          description: >-
                            Allow to indicate if the employee has or not the
                            assistant role.
                          example: false
                        probationPeriodEnd:
                          type: string
                          description: >-
                            The probation period of the employee. Format
                            YYYY-MM-DDThh:mm:ss.000Z.
                          example: '2022-06-01T00:00:00.000Z'
                        reportsToId:
                          type: string
                          description: >-
                            The Kenjo employee id of the user to whom the employee
                            reports. The employee id to assign can be an active or
                            inactive user. Trying to assign the own employee id or
                            the id of someone who is already reporting will arise
                            an error.
                          example: 50a2db290da29e126a1878523
                    workSchedule:
                      type: object
                      properties:
                        mondayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if mondays are working days for the
                            employee.
                          example: true
                        tuesdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if tuesdays are working days for the
                            employee.
                          example: true
                        wednesdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if wednesdays are working days for
                            the employee.
                          example: true
                        thursdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if thursdays are working days for
                            the employee.
                          example: true
                        fridayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if fridays are working days for the
                            employee.
                          example: true
                        saturdayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if saturdays are working days for
                            the employee.
                          example: true
                        sundayWorkingDay:
                          type: boolean
                          description: >-
                            Allow to indicate if sundays are working days for the
                            employee.
                          example: true
                    address:
                      type: object
                      properties:
                        street:
                          type: string
                          description: The name of the street.
                          example: Calle Enrique San Francisco 13
                        postalCode:
                          type: string
                          description: The postal code.
                          example: '28080'
                        city:
                          type: string
                          description: The city.
                          example: Madrid
                        country:
                          type: string
                          description: The country code in ISO 3166-1 alpha-2.
                          example: ES
                    financial:
                      type: object
                      properties:
                        accountHolderName:
                          type: string
                          description: The accounts holder's name.
                          example: Michael Corleone
                        bankName:
                          type: string
                          description: The bank name.
                          example: Bank of Sicily
                        accountNumber:
                          type: string
                          description: The account number.
                          example: 0093 344 2132221 3304 00
                        iban:
                          type: string
                          description: The IBAN.
                          example: DE32120222391919191911
                        swiftCode:
                          type: string
                          description: The SWIFT code.
                          example: '12321234'
                        nationalId:
                          type: string
                          description: The national id document.
                          example: 04123547X
                        passport:
                          type: string
                          description: The passport number.
                          example: FA1234098
                        nationalInsuranceNumber:
                          type: string
                          description: The national insurance number
                          example: '23123312321'
                        taxCode:
                          type: string
                          description: The tax number.
                          example: 323451R
                        taxIdentificationNumber:
                          type: string
                          description: The tax identification number.
                          example: T4312345
                    home:
                      type: object
                      properties:
                        maritalStatus:
                          type: string
                          description: >-
                            The marital status. Only is valid one of the following
                            values "Divorced", "Domestic Partnership", "Married",
                            "Separated", "Single", "Widowed".
                          example: Widowed
                        spouseFirstName:
                          type: string
                          description: The first name of the employee's spouse.
                          example: Catherine
                        spouseLastName:
                          type: string
                          description: The last name of the employee's spouse.
                          example: Tramell
                        spouseBirthdate:
                          type: string
                          description: >-
                            The birth date of the employee's spouse. Format
                            YYYY-MM-DDThh:mm:ss.000Z.
                          example: '2060-01-26T00:00:00.000Z'
                        spouseGender:
                          type: string
                          description: >-
                            The employee's spouse gender. Only is valid one of the
                            following values 'Male' (male), 'Female' (female) or
                            'Other' (other).
                          example: Female
                        personalEmail:
                          type: string
                          description: The employee personal email.
                          example: john@acme.io
                        personalPhone:
                          type: string
                          description: The employee personal phone.
                          example: '4567092323'
                        personalMobile:
                          type: string
                          description: The employee personal phone
                          example: '3567092310'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/accounts:
      get:
        summary: Return a list of employee accounts.
        description: >-
          This endpoint returns a list with the **account** sections of the
          existing employees. The account section contains information such as
          *email*, *external Id*, *language* and *activation status*.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: email
            description: The Kenjo email of the employee.
            schema:
              type: string
              example: john.doe@acme.com
          - in: query
            name: language
            description: The employee language.
            schema:
              type: string
              enum:
                - en
                - de
                - es
              example: es
          - in: query
            name: externalId
            description: The external id of the employee.
            schema:
              type: string
              example: USER-123456
          - in: query
            name: isActive
            description: The employee activation status.
            schema:
              type: boolean
              example: 'true'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned attendance entry.
                          email:
                            type: string
                            description: The Kenjo email of the employee.
                          externalId:
                            type: string
                            description: The external id of the employee.
                          language:
                            type: string
                            enum:
                              - en
                              - de
                              - es
                            description: The employee language.
                          isActive:
                            type: boolean
                            description: The employee activation status.
                  example:
                    data:
                      - _id: 80a2db290da29e126a18789a
                        email: john@acme.io
                        externalId: '00001'
                        language: en
                        isActive: true
                      - _id: 80a2db290da29e126a18789a
                        email: anna@acme.io
                        externalId: '00003'
                        language: en
                        isActive: false
                      - _id: 80a2db290da29e126a18789a
                        email: joaquin@acme.io
                        externalId: '00009'
                        language: en
                        isActive: true
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/personals:
      get:
        summary: Return a list of employee personals.
        description: >-
          This endpoint returns a list with the **personal** sections of the
          existing employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: firstName
            description: The name of the Kenjo employee. This field is required.
            schema:
              type: string
              example: John
          - in: query
            name: lastName
            description: The surname of the Kenjo employee. This field is required.
            schema:
              type: string
              example: Doe
          - in: query
            name: displayName
            description: The composition of firstName and lastName of the Kenjo employee.
            schema:
              type: string
              example: John Doe
          - in: query
            name: gender
            description: >-
              The employee gender. Only is valid one of the following values
              'Male' (male), 'Female' (female) or 'Other' (other).
            schema:
              type: string
              enum:
                - Male
                - Female
                - Other
              example: es
          - in: query
            name: birthdate
            description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
            schema:
              type: string
              example: '1980-01-28T00:00:00.000Z'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          firstName:
                            type: string
                            description: >-
                              The name of the Kenjo employee. This field is
                              required.
                          lastName:
                            type: string
                            description: >-
                              The surname of the Kenjo employee. This field is
                              required.
                          displayName:
                            type: string
                            description: >-
                              The composition of firstName and lastName of the
                              Kenjo employee.
                          gender:
                            type: string
                            description: >-
                              The employee gender. Only is valid one of the
                              following values 'Male' (male), 'Female' (female) or
                              'Other' (other).
                          birthdate:
                            type: string
                            description: >-
                              The employee birth date. Format
                              YYYY-MM-DDThh:00:00.000Z.
                            example: '1980-01-28T00:00:00.000Z'
                      example:
                        - _id: 80a2db290da29e126a18789a
                          firstName: John
                          lastName: Doe
                          displayName: John Doe
                          gender: Male
                          birthdate: '1989-03-09T00:00:00.000Z'
                        - _id: 80a2db290da29e126a18789a
                          firstName: Anna
                          lastName: Kalevnikova
                          displayName: Anna Kalevnikova
                          gender: Female
                          birthdate: '1980-05-19T00:00:00.000Z'
                        - _id: 80a2db290da29e126a18789a
                          firstName: Elvira
                          lastName: Dos Pasos
                          displayName: Elvira Dos Pasos
                          gender: Female
                          birthdate: '1980-10-20T00:00:00.000Z'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/works:
      get:
        summary: Return a list of employee works.
        description: >-
          This endpoint returns a list with the **work** sections of the existing
          employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: companyId
            description: The company id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789a
          - in: query
            name: officeId
            description: The office id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789d
          - in: query
            name: departmentId
            description: The department id of the Kenjo employee.
            schema:
              type: string
              example: 80a2db290da29e126a18789c
          - in: query
            name: startDate
            description: >-
              The starting date of the Kenjo employee in format
              YYYY-MM-DDThh:mm:ss.
            schema:
              type: string
              example: '2022-06-01T00:00:00.000Z'
          - in: query
            name: jobTitle
            description: The job title of the employee.
            schema:
              type: string
              example: Actor
          - in: query
            name: workPhone
            description: The work phone of the employee.
            schema:
              type: string
              example: 34 666 70 90 32
          - in: query
            name: workMobile
            description: The work mobile of the employee.
            schema:
              type: string
              example: 34 680 70 90 32
          - in: query
            name: isAssistant
            description: Allow to indicate if the employee has or not the assistant role.
            schema:
              type: boolean
              example: 'true'
          - in: query
            name: probationPeriodEnd
            description: >-
              The probation period of the employee. Format
              YYYY-MM-DDThh:mm:ss.000Z.
            schema:
              type: string
              example: '2022-06-01T00:00:00.000Z'
          - in: query
            name: reportsToId
            description: >-
              The Kenjo employee id of the user to whom the employee reports. The
              employee id to assign can be an active or inactive user. Trying to
              assign the own employee id or the id of someone who is already
              reporting will arise an error.
            schema:
              type: string
              example: 80a2db290da29e126a187891
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          companyId:
                            type: string
                            description: The company id of the Kenjo employee.
                          officeId:
                            type: string
                            description: The office id of the Kenjo employee.
                          departmentId:
                            type: string
                            description: The department id of the Kenjo employee.
                          startDate:
                            type: string
                            description: >-
                              The starting date of the Kenjo employee in format
                              YYYY-MM-DDThh:mm:ss.
                          jobTitle:
                            type: string
                            description: The job title of the employee.
                            example: Actor
                          workPhone:
                            type: string
                            description: The work phone of the employee.
                            example: +34 666 70 90 32
                          workMobile:
                            type: string
                            description: The work mobile of the employee.
                            example: +34 680 70 90 32
                          isAssistant:
                            type: boolean
                            description: >-
                              Allow to indicate if the employee has or not the
                              assistant role.
                            example: false
                          probationPeriodEnd:
                            type: string
                            description: >-
                              The probation period of the employee. Format
                              YYYY-MM-DDThh:mm:ss.000Z.
                            example: '2022-06-01T00:00:00.000Z'
                          reportsToId:
                            type: string
                            description: >-
                              The Kenjo employee id of the user to whom the
                              employee reports. The employee id to assign can be
                              an active or inactive user. Trying to assign the own
                              employee id or the id of someone who is already
                              reporting will arise an error.
                            example: 50a2db290da29e126a1878523
                      example:
                        - _id: 10a2db290da29e126a18789a
                          companyId: 80a2db290da29e126a18789a
                          officeId: 80a2db290da29e126a18789b
                          departmentId: 80a2db290da29e126a18789c
                          startDate: '2020-07-01T00:00:00.000Z'
                          jobTitle: Actor
                          workPhone: +34 657 89 76 52
                          workMobile: +34 656 89 76 52
                          isAssistant: false
                          probationPeriodEnd: '2022-06-01T00:00:00.000Z'
                          reportsToId: 50a2db290da29e126a1878523
                        - _id: 20a2db290da29e126a18789a
                          companyId: 80a2db290da29e126a18789a
                          officeId: 80a2db290da29e126a18789b
                          departmentId: 80a2db290da29e126a18789c
                          startDate: '2021-01-01T00:00:00.000Z'
                          jobTitle: Director
                          workPhone: +34 657 89 76 52
                          workMobile: +34 656 89 76 52
                          isAssistant: true
                          probationPeriodEnd: '2022-06-01T00:00:00.000Z'
                          reportsToId: 50a2db290da29e126a1878523
                        - _id: 30a2db290da29e126a18789a
                          companyId: 80a2db290da29e126a18789a
                          officeId: 80a2db290da29e126a18789b
                          departmentId: 80a2db290da29e126a18789c
                          startDate: '2021-07-01T00:00:00.000Z'
                          jobTitle: Musician
                          workPhone: +34 658 89 76 52
                          workMobile: +34 659 89 76 52
                          isAssistant: false
                          probationPeriodEnd: '2022-06-01T00:00:00.000Z'
                          reportsToId: 50a2db290da29e126a1878527
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/work-schedules:
      get:
        summary: Return a list of employee work schedules.
        description: >-
          This endpoint returns a list with the **work schedule** sections of the
          existing employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: trackAttendance
            description: The activation status of attendance tracking for the employee.
            schema:
              type: boolean
              example: 'false'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          mondayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if mondays are working days for the
                              employee.
                          tuesdayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if tuesdays are working days for the
                              employee.
                          wednesdayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if wednesdays are working days for the
                              employee.
                          thursdayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if thursdays are working days for the
                              employee.
                          fridayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if fridays are working days for the
                              employee.
                          saturdayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if saturdays are working days for the
                              employee.
                          sundayWorkingDay:
                            type: boolean
                            description: >-
                              Indicate if sundays are working days for the
                              employee.
                          trackAttendance:
                            type: boolean
                            description: >-
                              The activation status of attendance tracking for the
                              employee.
                      example:
                        - _id: 10a2db290da29e126a18789a
                          mondayWorkingDay: true
                          tuesdayWorkingDay: true
                          wednesdayWorkingDay: true
                          thursdayWorkingDay: true
                          fridayWorkingDay: false
                          saturdayWorkingDay: false
                          sundayWorkingDay: false
                          trackAttendance: true
                        - _id: 20a2db290da29e126a18789a
                          mondayWorkingDay: true
                          tuesdayWorkingDay: true
                          wednesdayWorkingDay: true
                          thursdayWorkingDay: true
                          fridayWorkingDay: true
                          saturdayWorkingDay: false
                          sundayWorkingDay: false
                          trackAttendance: false
                        - _id: 30a2db290da29e126a18789a
                          mondayWorkingDay: true
                          tuesdayWorkingDay: true
                          wednesdayWorkingDay: true
                          thursdayWorkingDay: true
                          fridayWorkingDay: true
                          saturdayWorkingDay: false
                          sundayWorkingDay: false
                          trackAttendance: true
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/addresses:
      get:
        summary: Return a list of employee addresses.
        description: >-
          This endpoint returns a list with the **address** sections of the
          existing employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: street
            description: The name of the street.
            schema:
              type: string
              example: ' Calle Enrique San Francisco 13'
          - in: query
            name: postalCode
            description: The postal code.
            schema:
              type: string
              example: '28080'
          - in: query
            name: city
            description: The city.
            schema:
              type: string
              example: Madrid
          - in: query
            name: country
            description: The country code in ISO 3166-1 alpha-2.
            schema:
              type: string
              example: ES
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          street:
                            type: string
                            description: The name of the street.
                          postalCode:
                            type: string
                            description: The postal code.
                          city:
                            type: string
                            description: The city.
                          country:
                            type: string
                            description: The country code in ISO 3166-1 alpha-2.
                      example:
                        - _id: 80a2db290da29e126a18789a
                          street: Calle Enrique San Francisco 13
                          postalCode: '28080'
                          city: Madrid
                          country: ES
                        - _id: 80a2db290da29e126a18789a
                          street: Marlon Brando St, 23-11
                          postalCode: '34212'
                          city: Paris
                          country: FR
                        - _id: 80a2db290da29e126a18789a
                          street: James Gandolfini St, 34
                          postalCode: '34213'
                          city: New Jersey
                          country: US
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/financials:
      get:
        summary: Return a list of employee financials.
        description: >-
          This endpoint returns a list with the **financial** sections of the
          existing employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: accountHolderName
            description: The accounts holder's name.
            schema:
              type: string
              example: Michael Corleone
          - in: query
            name: bankName
            description: The bank name.
            schema:
              type: string
              example: Bank of Sicily
          - in: query
            name: accountNumber
            description: The account number.
            schema:
              type: string
              example: 0093 344 2132221 3304 00
          - in: query
            name: iban
            description: The IBAN.
            schema:
              type: string
              example: DE32120222391919191911
          - in: query
            name: swiftCode
            description: The SWIFT code.
            schema:
              type: string
              example: '12321234'
          - in: query
            name: nationalId
            description: The national id document
            schema:
              type: string
              example: 04123547X
          - in: query
            name: passport
            description: The passport number.
            schema:
              type: string
              example: FA1234098
          - in: query
            name: nationalInsuranceNumber
            description: The national insurance number.
            schema:
              type: string
              example: '23123312321'
          - in: query
            name: taxCode
            description: The tax number.
            schema:
              type: string
              example: 323451R
          - in: query
            name: taxIdentificationNumber
            description: The tax identification number.
            schema:
              type: string
              example: T4312345
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          accountHolderName:
                            type: string
                            description: The accounts holder's name.
                            example: Michael Corleone
                          bankName:
                            type: string
                            description: The bank name.
                            example: Bank of Sicily
                          accountNumber:
                            type: string
                            description: The account number.
                            example: 0093 344 2132221 3304 00
                          iban:
                            type: string
                            description: The IBAN.
                            example: DE32120222391919191911
                          swiftCode:
                            type: string
                            description: The SWIFT code.
                            example: '12321234'
                          nationalId:
                            type: string
                            description: The national id document.
                            example: 04123547X
                          passport:
                            type: string
                            description: The passport number.
                            example: FA1234098
                          nationalInsuranceNumber:
                            type: string
                            description: The national insurance number.
                            example: '23123312321'
                          taxCode:
                            type: string
                            description: The tax number.
                            example: 323451R
                          taxIdentificationNumber:
                            type: string
                            description: The tax identification number.
                            example: T4312345
                      example:
                        - _id: 80a2db290da29e126a18789a
                          accountHolderName: Michael Corleone
                          bankName: Bank of Sicily
                          accountNumber: 0093 344 2132221 3304 00
                          iban: DE32120222391919191911
                          swiftCode: '12321234'
                          nationalId: 12123547R
                          passport: MK1234098
                          nationalInsuranceNumber: '23123312321'
                          taxCode: 323451R
                          taxIdentificationNumber: T4312345
                        - _id: 80a2db290da29e126a187894
                          accountHolderName: Tony Soprano
                          bankName: Bank of New Jersey
                          accountNumber: 0093 344 3212121 3304 00
                          iban: IT32120222391919191911
                          swiftCode: '3212235'
                          nationalId: 09123547J
                          passport: TQ1234098
                          nationalInsuranceNumber: '23123312321'
                          taxCode: 453251R
                          taxIdentificationNumber: J4312345
                        - _id: 80a2db290da29e126a187892
                          accountHolderName: Donnie Brasco
                          bankName: Bank of Chicago
                          accountNumber: 0093 344 12312312 3304 00
                          iban: ES32120222391919191911
                          swiftCode: '12312567'
                          nationalId: 04123547X
                          passport: FA1234098
                          nationalInsuranceNumber: '23123312321'
                          taxCode: 543251R
                          taxIdentificationNumber: F4312345
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/homes:
      get:
        summary: Return a list of employee homes.
        description: >-
          This endpoint returns a list with the **home** sections of the existing
          employees.
        tags:
          - Employees
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: maritalStatus
            description: >-
              The marital status. Only is valid one of the following values
              "Divorced", "Domestic Partnership", "Married", "Separated",
              "Single", "Widowed".
            schema:
              type: string
              enum:
                - Divorced
                - Domestic Partnership
                - Married
                - Separated
                - Single
                - Widowed
              example: Widowed
          - in: query
            name: spouseFirstName
            description: The first name of the employee's spouse.
            schema:
              type: string
              example: Catherine
          - in: query
            name: spouseLastName
            description: The last name of the employee's spouse.
            schema:
              type: string
              example: Tramell
          - in: query
            name: spouseBirthdate
            description: >-
              The birth date of the employee's spouse. Format
              YYYY-MM-DDThh:mm:ss.000Z.
            schema:
              type: string
              example: '2060-01-26T00:00:00.000Z'
          - in: query
            name: spouseGender
            description: >-
              The employee's spouse gender. Only is valid one of the following
              values 'Male' (male), 'Female' (female) or 'Other' (other).
            schema:
              type: string
              enum:
                - Male
                - Female
                - Other
              example: Female
          - in: query
            name: personalEmail
            description: The employee personal email.
            schema:
              type: string
              example: john.doe@acme.com
          - in: query
            name: personalPhone
            description: The employee personal phone.
            schema:
              type: string
              example: '4567092323'
          - in: query
            name: personalMobile
            description: The employee personal mobile.
            schema:
              type: string
              example: '3567092310'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The _id of the Kenjo employee.
                          maritalStatus:
                            type: string
                            description: >-
                              The marital status. Only is valid one of the
                              following values "Divorced", "Domestic Partnership",
                              "Married", "Separated", "Single", "Widowed".
                            example: Widowed
                          spouseFirstName:
                            type: string
                            description: The first name of the employee's spouse.
                            example: Catherine
                          spouseLastName:
                            type: string
                            description: The last name of the employee's spouse.
                            example: Tramell
                          spouseBirthdate:
                            type: string
                            description: >-
                              The birth date of the employee's spouse. Format
                              YYYY-MM-DDThh:mm:ss.000Z.
                            example: '2060-01-26T00:00:00.000Z'
                          spouseGender:
                            type: string
                            description: >-
                              The employee's spouse gender. Only is valid one of
                              the following values 'Male' (male), 'Female'
                              (female) or 'Other' (other).
                            example: Female
                          personalEmail:
                            type: string
                            description: The employee personal email.
                            example: john@acme.io
                          personalPhone:
                            type: string
                            description: The employee personal phone.
                            example: '4567092324'
                          personalMobile:
                            type: string
                            description: The employee personal mobile.
                            example: '3567092310'
                      example:
                        - _id: 80a2db290da29e126a187894
                          maritalStatus: Widowed
                          spouseFirstName: Catherine
                          spouseLastName: Tramell
                          spouseBirthdate: '2060-01-26T00:00:00.000Z'
                          spouseGender: Female
                          personalEmail: john@acme.io
                          personalPhone: '4567092323'
                          personalMobile: '3567092310'
                        - _id: 80a2db290da29e126a187896
                          maritalStatus: Divorced
                          spouseFirstName: Beatrix
                          spouseLastName: Kido
                          spouseBirthdate: '2067-04-20T00:00:00.000Z'
                          spouseGender: Female
                          personalEmail: phillip@acme.io
                          personalPhone: '8767092323'
                          personalMobile: '33267092310'
                        - _id: 80a2db290da29e126a187899
                          maritalStatus: Divorced
                          spouseFirstName: Ross
                          spouseLastName: Geller
                          spouseBirthdate: '2068-12-06T00:00:00.000Z'
                          spouseGender: Male
                          personalEmail: lina@acme.io
                          personalPhone: '4167092323'
                          personalMobile: '78567092310'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/accounts:
      put:
        summary: Update the account section for a given employee id.
        description: >-
          This endpoint updates the employee **account** section for a given
          employee id. The operation only updates the fields provided in the body.
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: >-
                      The employee email in Kenjo. This is an unique identifier
                      and required.
                    example: john@acme.io
                  externalId:
                    type: string
                    description: >-
                      The employee external id for integration proposals. This
                      value must be unique.
                    example: E-000001
                  language:
                    type: string
                    description: >-
                      The employee language. Only is valid one of the following
                      values 'en' (english), 'es' (spanish) or 'de' (german).
                    example: en
              example:
                email: john@acme.io,
                externalId: E-000001
                language: en
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 50a2db290da29e126a187843
                    email:
                      type: string
                      description: >-
                        The employee email in Kenjo. This is an unique identifier
                        and required.
                      example: john@acme.io
                    externalId:
                      type: string
                      description: The employee external id for integration proposals.
                      example: E-000001
                    language:
                      type: string
                      description: The employee language in integrations.
                      example: es
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/personals:
      put:
        summary: Update the personal section for a given employee id.
        description: >
          This endpoint updates the employee **personal** section for a given
          employee id. The operation only updates the fields provided in the body.

          <br><br>**Custom fields** information can be provided in this operation.
          The *API name* of the custom field is required and the data format has
          to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'category' belongs to the 'personal' section*:
            ```
            {
              ...,
              "lastName": "Nadie",
              "c_category": "Good",
              ...
            }
          ```

          *'category' is a field type 'List' (Strings list) with the possible
          values: "Good" and "Bad". It means that if a different value or type is
          provided then the request will return an error.*
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                    description: The name of the Kenjo employee. This field is required.
                    example: Juanito
                  lastName:
                    type: string
                    description: The surname of the Kenjo employee. This field is required.
                    example: Nadie
                  displayName:
                    type: string
                    description: >-
                      The composition of firstName and lastName of the Kenjo
                      employee.
                    example: Juanito Nadie
                  gender:
                    type: string
                    description: >-
                      The gender of the Kenjo employee. Only is valid one of the
                      following values 'Male' (male), 'Female' (female) or 'Other'
                      (other).
                    example: Male
                  birthdate:
                    type: string
                    description: The employee birth date. Format YYYY-MM-DDThh:mm:ss.000Z.
                    example: '1980-01-28T00:00:00.000Z'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    firstName:
                      type: string
                      description: The name of the Kenjo employee. This field is required.
                      example: Juanito
                    lastName:
                      type: string
                      description: The surname of the Kenjo employee. This field is required.
                      example: Nadie
                    displayName:
                      type: string
                      description: >-
                        The composition of firstName and lastName of the Kenjo
                        employee.
                      example: Juanito Nadie
                    gender:
                      type: string
                      description: The gender of the Kenjo employee.
                      example: male
                    birthdate:
                      type: string
                      description: The employee birth date. Format YYYY-MM-DDThh:00:00.000Z.
                      example: '1980-01-28T00:00:00.000Z'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/works:
      put:
        summary: Update the work section for a given employee id.
        description: >
          This endpoint updates the employee **work** section for a given employee
          id. The operation only updates the fields provided in the body.

          <br><br>**Custom fields** information can be provided in this operation.
          The *API name* of the custom field is required and the data format has
          to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'activity type' belongs to the 'personal' section*:
            ```
            {
              ...,
              "companyId": "61d874aef37c05cfba4f1b38",
              "c_activityType": "1",
              ...
            }
          ```

          *'activity Type' is a field type 'List' (Strings list) with the possible
          values: "1" and "2". It means that if a different value or type is
          provided then the request will return an error.*
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  companyId:
                    type: string
                    description: The company id of the Kenjo employee.
                    example: 50a2db290da29e126a187894
                  officeId:
                    type: string
                    description: The office id of the Kenjo employee.
                    example: 50a2db290da29e126a187895
                  departmentId:
                    type: string
                    description: The department id of the Kenjo employee.
                    example: 50a2db290da29e126a187896
                  startDate:
                    type: string
                    description: >-
                      The starting date of the Kenjo employee in format
                      YYYY-MM-DDThh:mm:ss.
                    example: '2021-07-01T00:00:00.000Z'
                  jobTitle:
                    type: string
                    description: The job title of the employee.
                    example: Actor
                  workPhone:
                    type: string
                    description: The work phone of the employee.
                    example: +34 666 70 90 32
                  workMobile:
                    type: string
                    description: The work mobile of the employee.
                    example: +34 680 70 90 32
                  isAssistant:
                    type: boolean
                    description: >-
                      Allow to indicate if the employee has or not the assistant
                      role.
                    example: false
                  probationPeriodEnd:
                    type: string
                    description: >-
                      The probation period of the employee. Format
                      YYYY-MM-DDThh:mm:ss.000Z.
                    example: '2022-06-01T00:00:00.000Z'
                  reportsToId:
                    type: string
                    description: >-
                      The Kenjo employee id of the user to whom the employee
                      reports. The employee id to assign can be an active or
                      inactive user. Trying to assign the own employee id or the
                      id of someone who is already reporting will arise an error.
                    example: 50a2db290da29e126a1878523
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    companyId:
                      type: string
                      description: The company id of the Kenjo employee.
                      example: 50a2db290da29e126a187894
                    officeId:
                      type: string
                      description: The office id of the Kenjo employee.
                      example: 50a2db290da29e126a187895
                    departmentId:
                      type: string
                      description: The department id of the Kenjo employee.
                      example: 50a2db290da29e126a187896
                    startDate:
                      type: string
                      description: >-
                        The starting date of the Kenjo employee in format
                        YYYY-MM-DDThh:mm:ss.
                      example: '2021-07-01T00:00:00.000Z'
                    jobTitle:
                      type: string
                      description: The job title of the employee.
                      example: Actor
                    workPhone:
                      type: string
                      description: The work phone of the employee.
                      example: +34 666 70 90 32
                    workMobile:
                      type: string
                      description: The work mobile of the employee.
                      example: +34 680 70 90 32
                    isAssistant:
                      type: boolean
                      description: >-
                        Allow to indicate if the employee has or not the assistant
                        role.
                      example: false
                    probationPeriodEnd:
                      type: string
                      description: >-
                        The probation period of the employee. Format
                        YYYY-MM-DDThh:mm:ss.000Z.
                      example: '2022-06-01T00:00:00.000Z'
                    reportsToId:
                      type: string
                      description: >-
                        The Kenjo employee id of the user to whom the employee
                        reports. The employee id to assign can be an active or
                        inactive user. Trying to assign the own employee id or the
                        id of someone who is already reporting will arise an
                        error.
                      example: 50a2db290da29e126a1878523
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/work-schedules:
      put:
        summary: Update the work schedule section for a given employee id.
        description: >-
          This endpoint updates the employee **work schedule** section for a given
          employee id. The operation only updates the fields provided in the body.
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  mondayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if mondays are working days for the
                      employee.
                    example: true
                  tuesdayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if tuesdays are working days for the
                      employee.
                    example: true
                  wednesdayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if wednesdays are working days for the
                      employee.
                    example: true
                  thursdayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if thursdays are working days for the
                      employee.
                    example: true
                  fridayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if fridays are working days for the
                      employee.
                    example: false
                  saturdayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if saturdays are working days for the
                      employee.
                    example: false
                  sundayWorkingDay:
                    type: boolean
                    description: >-
                      Allow to indicate if sundays are working days for the
                      employee.
                    example: false
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    mondayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if mondays are working days for the
                        employee.
                      example: true
                    tuesdayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if tuesdays are working days for the
                        employee.
                      example: true
                    wednesdayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if wednesdays are working days for the
                        employee.
                      example: true
                    thursdayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if thursdays are working days for the
                        employee.
                      example: true
                    fridayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if fridays are working days for the
                        employee.
                      example: false
                    saturdayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if saturdays are working days for the
                        employee.
                      example: false
                    sundayWorkingDay:
                      type: boolean
                      description: >-
                        Allow to indicate if sundays are working days for the
                        employee.
                      example: false
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/addresses:
      put:
        summary: Update the address section for a given employee id.
        description: >
          This endpoint updates the employee **address** section for a given
          employee id. The operation only updates the fields provided in the body.

          <br><br>**Custom fields** information can be provided in this operation.
          The *API name* of the custom field is required and the data format has
          to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'province' belongs to the 'address' section*:
            ```
            {
              ...,
              "country": "ES",
              "c_province": "MD",
              ...
            }
          ```

          *'province' is a field type 'String'. It means that if a different type
          of data (number or boolean) is provided then the request will return an
          error.*
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  street:
                    type: string
                    description: The name of the street.
                  postalCode:
                    type: string
                    description: The postal code.
                  city:
                    type: string
                    description: The city.
                  country:
                    type: string
                    description: The country code in ISO 3166-1 alpha-2.
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    street:
                      type: string
                      description: The name of the street.
                    postalCode:
                      type: string
                      description: The postal code.
                    city:
                      type: string
                      description: The city.
                    country:
                      type: string
                      description: The country code in ISO 3166-1 alpha-2.
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/financials:
      put:
        summary: Update the financial section for a given employee id.
        description: >
          This endpoint updates the employee **financial** section for a given
          employee id. The operation only updates the fields provided in the body.

          <br><br>**Custom fields** information can be provided in this operation.
          The *API name* of the custom field is required and the data format has
          to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'special tax' belongs to the 'financial' section*:
            ```
            {
              ...,
              "iban": "ES2345123456789077",
              "c_specialtax": 1500,
              ...
            }
          ```

          *'special tax' is a field type 'Number'. It means that if a different
          type of data (string or boolean) is provided then the request will
          return an error.*
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountHolderName:
                    type: string
                    description: The accounts holder's name.
                    example: Michael Corleone
                  bankName:
                    type: string
                    description: The bank name.
                    example: Bank of Sicily
                  accountNumber:
                    type: string
                    description: The account number.
                    example: 0093 344 2132221 3304 00
                  iban:
                    type: string
                    description: The IBAN.
                    example: DE32120222391919191911
                  swiftCode:
                    type: string
                    description: The SWIFT code.
                    example: '12321234'
                  nationalId:
                    type: string
                    description: The national id document.
                    example: 04123547X
                  passport:
                    type: string
                    description: The passport number.
                    example: FA1234098
                  nationalInsuranceNumber:
                    type: string
                    description: The national insurance number
                    example: '23123312321'
                  taxCode:
                    type: string
                    description: The tax number.
                    example: 323451R
                  taxIdentificationNumber:
                    type: string
                    description: The tax identification number.
                    example: T4312345
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    accountHolderName:
                      type: string
                      description: The accounts holder's name.
                      example: Michael Corleone
                    bankName:
                      type: string
                      description: The bank name.
                      example: Bank of Sicily
                    accountNumber:
                      type: string
                      description: The account number.
                      example: 0093 344 2132221 3304 00
                    iban:
                      type: string
                      description: The IBAN.
                      example: DE32120222391919191911
                    swiftCode:
                      type: string
                      description: The SWIFT code.
                      example: '12321234'
                    nationalId:
                      type: string
                      description: The national id document.
                      example: 04123547X
                    passport:
                      type: string
                      description: The passport number.
                      example: FA1234098
                    nationalInsuranceNumber:
                      type: string
                      description: The national insurance number
                      example: '23123312321'
                    taxCode:
                      type: string
                      description: The tax number.
                      example: 323451R
                    taxIdentificationNumber:
                      type: string
                      description: The tax identification number.
                      example: T4312345
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/homes:
      put:
        summary: Update the home section for a given employee id.
        description: >
          This endpoint updates the employee **home** section for a given employee
          id. The operation only updates the fields provided in the body.

          <br><br>**Custom fields** information can be provided in this operation.
          The *API name* of the custom field is required and the data format has
          to match with the type defined for the custom field in Kenjo.

          API names start with 'c_' and the rest is composed by the trimmed name
          (spaces are removed).

          <br><br>

          Example:

          <br>

          *The custom field 'pet name' belongs to the 'home' section*:
            ```
            {
              ...,
              "maritalStatus": "Divorced",
              "c_petname": "Boliche",
              ...
            }
          ```

          *'pet name' is a field type 'String'. It means that if a different type
          of data (number or boolean) is provided then the request will return an
          error.*
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  maritalStatus:
                    type: string
                    description: >-
                      The marital status. Only is valid one of the following
                      values "Divorced", "Domestic Partnership", "Married",
                      "Separated", "Single", "Widowed".
                    example: Widowed
                  spouseFirstName:
                    type: string
                    description: The first name of the employee's spouse.
                    example: Catherine
                  spouseLastName:
                    type: string
                    description: The last name of the employee's spouse.
                    example: Tramell
                  spouseBirthdate:
                    type: string
                    description: >-
                      The birth date of the employee's spouse. Format
                      YYYY-MM-DDThh:mm:ss.000Z.
                    example: '2060-01-26T00:00:00.000Z'
                  spouseGender:
                    type: string
                    description: >-
                      The employee's spouse gender. Only is valid one of the
                      following values 'Male' (male), 'Female' (female) or 'Other'
                      (other).
                    example: Female
                  personalEmail:
                    type: string
                    description: The employee personal email.
                    example: john@acme.io
                  personalPhone:
                    type: string
                    description: The employee personal phone.
                    example: '4567092323'
                  personalMobile:
                    type: string
                    description: The employee personal phone
                    example: '3567092310'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The employee Kenjo *_id*.
                      example: 60a2db290da29e126a18789a
                    maritalStatus:
                      type: string
                      description: >-
                        The marital status. Only is valid one of the following
                        values "Divorced", "Domestic Partnership", "Married",
                        "Separated", "Single", "Widowed".
                      example: Widowed
                    spouseFirstName:
                      type: string
                      description: The first name of the employee's spouse.
                      example: Catherine
                    spouseLastName:
                      type: string
                      description: The last name of the employee's spouse.
                      example: Tramell
                    spouseBirthdate:
                      type: string
                      description: >-
                        The birth date of the employee's spouse. Format
                        YYYY-MM-DDThh:mm:ss.000Z.
                      example: '2060-01-26T00:00:00.000Z'
                    spouseGender:
                      type: string
                      description: >-
                        The employee's spouse gender. Only is valid one of the
                        following values 'Male' (male), 'Female' (female) or
                        'Other' (other).
                      example: Female
                    personalEmail:
                      type: string
                      description: The employee personal email.
                      example: john@acme.io
                    personalPhone:
                      type: string
                      description: The employee personal phone.
                      example: '4567092323'
                    personalMobile:
                      type: string
                      description: The employee personal phone
                      example: '3567092310'
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/activate:
      put:
        summary: Activate an employee.
        description: >-
          This endpoint activates a Kenjo employee given by the employeeId. It
          sends an email to the recipient of the employee email to start the
          onboarding process. Once the password is filled, the employee changes to
          'active' ('isActive' = TRUE). While the employee is not active it is
          possible to send activation emails.
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to send the activation email.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: string
                  example: >-
                    An email was sent to the employee with the following email
                    lo+testing@jularun.org. The recipient must to provide
                    credentials to finish the activation process.
          '400':
            description: BAD REQUEST
            content:
              application/json:
                schema:
                  type: string
                  example: The employee cannot be activated because is currently active.
          '401':
            $ref: '#/components/responses/unauthorized'
    /employees/{employeeId}/deactivate:
      put:
        summary: Deactivate an employee.
        description: >-
          This endpoint deactivates a Kenjo employee given by the employeeId. It
          sets the isActive field to FALSE and invalidate the access Kenjo for the
          employee. While the employee is not active it is possible to send
          activation emails.
        tags:
          - Employees
        parameters:
          - in: path
            name: employeeId
            required: true
            description: The _id of the employee to update.
            schema:
              type: string
              example: 60a2db290da29e126a18789a
          - in: header
            $ref: '#/components/parameters/authorization'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: string
                  example: The employee has been deactivated.
          '400':
            description: BAD REQUEST
            content:
              application/json:
                schema:
                  type: string
                  example: >-
                    The employee cannot be deactivated because is currently
                    inactive.
          '401':
            $ref: '#/components/responses/unauthorized'
    /custom-fields:
      get:
        summary: Return a list of custome fields.
        description: Returns a list of the existing custom fields in Kenjo.
        tags:
          - Custom fields
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: section
            description: The name of custom field section.
            schema:
              type: string
              enum:
                - personal
                - work
                - address
                - financial
                - home
              example: personal
          - in: query
            name: label
            description: The name of the custom field label.
            schema:
              type: string
              example: Blood type
          - in: query
            name: apiName
            description: >-
              The api name is a required identifier to perform POST and PUT
              operations with employees.
            schema:
              type: string
              example: c_Bloodtype
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the custom field.
                            example: 40a2db290da29e126a18789a
                          section:
                            type: string
                            description: The name of custom field section.
                            example: work
                          label:
                            type: string
                            description: The name of custom field label.
                            example: Score
                          apiName:
                            type: string
                            description: >-
                              The api name is a required identifier to perform
                              POST and PUT operations with employees.
                            example: c_Score
                          type:
                            type: string
                            description: >-
                              The data type of the custom field. Possible values
                              "Text", "TextArea", "List", "Date", "Number",
                              "Email", "Boolean" and "Url"
                            example: Number
                          values:
                            type: array
                            description: >-
                              If the field is type 'List' then a list with the
                              possible values will be provided.
                            items:
                              type: string
                              example:
                                - A
                                - B
                      example:
                        - _id: 60a2db290da29e126a18789a
                          section: work
                          label: Score
                          apiName: c_Score
                          type: Number
                        - _id: 60a2db290da29e126a18789b
                          section: personal
                          label: Blood type
                          apiName: c_Bloodtype
                          type: List
                          values:
                            - A
                            - B
          '400':
            description: >-
              BAD REQUEST. This is a wrong request in the client side due to
              invalid body or params.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: number
                    message:
                      type: string
                  example:
                    code: 400
                    message: >-
                      Filters are not correct: data must NOT have additional
                      properties
          '401':
            $ref: '#/components/responses/unauthorized'
    /time-off/requests:
      get:
        summary: Return a list of time-off requests.
        description: >-
          This endpoint returns a paginated list of time off requests for a given
          date range.The maximum number of time off requests to retrieve once is
          92 days, so the URL params *from* and *to* are mandatory. The URL params
          help to return more accurate results.
        tags:
          - Time off
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: from
            required: true
            description: >-
              A date in format YYYY-MM-DD to indicate the starting point. It needs
              to be equals or less than the *to* param.
            schema:
              type: string
              example: '2020-01-01'
          - in: query
            name: to
            required: true
            description: >-
              A date in format YYYY-MM-DD to indicate the ending point. It needs
              to be equals or greater than the *from* param.
            schema:
              type: string
              example: '2020-01-10'
          - in: query
            name: _userId
            required: false
            description: >-
              This field allows to return only the time off requests for a given
              *_userId*.
            schema:
              type: string
              example: 60a2db290da29e126a18789b
          - in: query
            name: _timeOffTypeId
            required: false
            description: This field allows to filter by time-off type Id.
            schema:
              type: string
              example: 90a2db290da29e126a187891
          - in: query
            name: status
            required: false
            description: This field allows to filter by the time-off request status.
            schema:
              type: string
              enum:
                - Approved
                - Declined
                - Cancelled
                - Pending
                - Submitted
                - Processed
                - CancelledAfterProcessed
                - InApproval
              example: Approved
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned time-off request.
                            example: 80a2db290da29e126a18789f
                          _userId:
                            type: string
                            description: The employee id associated to the time-off request.
                            example: 60a2db290da29e126a18789a1
                          _timeOfTypeId:
                            type: string
                            description: >-
                              The time-off type id associated to the time-off
                              request.
                            example: 50a2db290da29e126a187896
                          _policyId:
                            type: string
                            description: The policy id associated to the time-off request.
                            example: 20a2db290da29e126a187894
                          policyName:
                            type: string
                            description: >-
                              The name of the policy id associated to the time-off
                              request.
                            example: Holidays for Tech team
                          _policyType:
                            type: string
                            description: >-
                              The type of the policy associated to the time-off
                              request. It can be type *Hour* or *Day*.
                            example: Day
                          status:
                            type: string
                            description: The status of the time-off request.
                            example: Submitted
                          from:
                            type: string
                            description: >-
                              The from date of the time-off request in format
                              YYYY-MM-DDThh:mm:ss.
                            example: '2022-01-30T00:00:00'
                          to:
                            type: string
                            description: >-
                              The to date of the time-off request in format
                              YYYY-MM-DDThh:mm:ss.
                            example: '2022-02-10T00:00:00'
                          duration:
                            type: number
                            description: >-
                              The duration of the time-off request. It doesn't
                              exclude bank holidays nor non-working days.
                            example: 11
                          workingTime:
                            type: number
                            description: >-
                              The duration of the time-off request. It excludes
                              bank holidays and non-working days.
                            example: 8
                          _createdAt:
                            type: string
                            description: >-
                              The date that the time-off request was created in
                              format YYYY-MM-DDThh:mm:ss.
                            example: '2022-02-10T00:00:00'
                          description:
                            type: string
                            description: The provided description on the time-off request.
                            example: I'll take 8 days-off.
                          hasAttachment:
                            type: boolean
                            description: >-
                              Determines if the time-off request has related
                              attachments.
                            example: false
                          _type:
                            type: string
                            description: >-
                              This field defines if the request is a 'Submission'
                              or a 'Request'. By default, the 'Submission' is
                              automatically approved.
                            example: Submission
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        _userId: 80a2db290da29e126a18789b
                        _timeOffTypeId: 80a2db290da29e126a187809
                        _policyId: 80a2db290da29e126a187878
                        policyName: Sick days
                        _policyType: Day
                        status: Submitted
                        from: '2022-03-10T00:00:00'
                        to: '2022-03-12T00:00:00'
                        duration: 2
                        workingTime: 2
                        _createdAt: '2022-03-10T08:00:00'
                        hasAttachment: true
                        _type: Submission
                      - _id: 60a2db290da29e126a18789b
                        _userId: 80a2db290da29e126a18789b
                        _timeOffTypeId: 80a2db290da29e126a18789f
                        _policyId: 80a2db290da29e126a187897
                        policyName: Holidays for tech team
                        _policyType: Day
                        status: Submitted
                        from: '2022-02-01T00:00:00'
                        to: '2022-02-12T00:00:00'
                        duration: 12
                        workingTime: 8
                        _createdAt: '2022-02-01T10:30:00'
                        description: I have requested days off
                        hasAttachment: false
                        _type: Submission
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /time-off/types:
      get:
        summary: Return a list of time-off types.
        description: >-
          This endpoint returns a list of all the existing time off types for an
          organization. The URL params help to return more accurate results.
        tags:
          - Time off
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: name
            required: false
            description: >-
              Optional filter. This field allows you to retrieve time-off types
              based on their *name*. It can accept two formats:<br><br> 1. A
              single *name* as a unique string. <br>Example: *name=Sick* <br><br>
              2. Multiple *name* values separated by commas (up to a maximum of 15
              values). <br>Example: *name=Maternity,Sick,Home*. These options
              provide flexibility in filtering contracts by their type, making it
              easier to retrieve the specific data you need.
            schema:
              type: string
              example: Sick
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the time-off type.
                            example: Maternity leave
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        name: Sick
                      - _id: 60a2db290da29e126a18789f
                        name: Maternity leave
                      - _id: 60a2db290da29e126a18789d
                        name: Holidays
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /time-off/requests/processed:
      post:
        summary: Create a new time-off request.
        description: >
          This endpoint creates a new time-off request for a specified *_userId*
          and existing *_timeOffTypeId* within a defined date range specified by
          the *from* (start) and *to* (end) fields. The request will be listed in
          the app in the **Time-off history** as 'submitted time off on behalf of'
          the person assigned to the request.


          Additionally, it is possible to indicate whether the 'from' and 'to'
          dates are taken as full days using the optional fields *partOfDayFrom*
          and *partOfDayTo*, respectively. If these optional parameters are not
          provided, the time-off request creation defaults to full days for both
          the *from* and *to* dates.

          All requests will be made on behalf of the *_userId*, and the status of
          the request will be 'Processed' if the dates (from and to) are in the
          past, while if the dates are in the future, the status will be
          'Submitted'.


          This endpoint does not allow creating time-off requests of hourly type.


          For the optimal performance of this endpoint, it supports up to 200
          requests per minute. Please note, rapidly consecutive requests to this
          endpoint may not be processed in the submitted order. We recommend
          spacing out your requests for consistent processing results.
        tags:
          - Time off
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  _userId:
                    type: string
                    description: The Kenjo employee *_id*.
                    example: 50a2db290da29e126a18789a
                  _timeOffTypeId:
                    type: string
                    description: The Kenjo *time-off type Id* of one existing time-off type.
                    example: 50a2db290da29e126a18789f
                  from:
                    type: string
                    description: >-
                      The starting date of the time-off request in format
                      YYYY-MM-DD.
                    example: '2020-01-26'
                  to:
                    type: string
                    description: >-
                      The ending date of the time-off request in format
                      YYYY-MM-DD.
                    example: '2020-01-30'
                  partOfDayFrom:
                    type: string
                    enum:
                      - StartOfDay
                      - HalfOfDay
                    description: >-
                      The duration of the *from* date. 'StartOfDay' means that the
                      *from* date is the entire day. 'HalfOfDay' means that the
                      request starts to apply in the middle of the *from* day. If
                      not specified, the default value will be 'StartOfDay'.
                    example: StartOfDay
                  partOfDayTo:
                    type: string
                    enum:
                      - HalfOfDay
                      - EndOfDay
                    description: >-
                      The duration of the *to* date. 'EndOfDay' means that the
                      *to* date is the entire day. 'HalfOfDay' means the request
                      starts to apply in the middle of the *to* day. If not
                      specified, the default value will be 'EndOfDay'.
                    example: HalfOfDay
                required:
                  - _userId
                  - _timeOffTypeId
                  - from
                  - to
              example:
                _userId: 50a2db290da29e126a18789a
                _timeOffTypeId: 50a2db290da29e126a18789f
                from: '2020-01-26'
                to: '2020-01-30'
                partOfDayFrom: StartOfDay
                partOfDayTo: HalfOfDay
        responses:
          '201':
            description: CREATED
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The time off request identifier.
                      example: 50a2db290da29e126a187834
                    _userId:
                      type: string
                      description: The Kenjo employee *_id*.
                      example: 50a2db290da29e126a18789a
                    _timeOffTypeId:
                      type: string
                      description: >-
                        The Kenjo *time-off type Id* for an existing time-off
                        type.
                      example: 50a2db290da29e126a18789f
                    from:
                      type: string
                      description: >-
                        The starting date of the time-off request in format
                        YYYY-MM-DD.
                      example: '2020-01-26'
                    to:
                      type: string
                      description: >-
                        The ending date of the time-off request in format
                        YYYY-MM-DD.
                      example: '2020-01-30'
                    partOfDayFrom:
                      type: string
                      enum:
                        - StartOfDay
                        - HalfOfDay
                      description: Indicates when starts to apply the *from* date.
                      example: StartOfDay
                    partOfDayTo:
                      type: string
                      enum:
                        - HalfOfDay
                        - EndOfDay
                      description: Indicates when starts to apply the *to* date.
                      example: HalfOfDay
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /compensation/contracts:
      get:
        summary: Return a list of contracts.
        description: >-
          This endpoint returns a paginated list of employment contracts. The URL
          params help to return more accurate results.
        tags:
          - Compensation
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: contractTypeId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *contractTypeId*. It can accept two formats:<br><br> 1. A
              single *contractTypeId* as a unique string. <br>Example:
              *contractTypeId=80a2db290da29e126a18789c* <br><br> 2. Multiple
              *contractTypeId* values separated by commas (up to a maximum of 15
              values). <br>Example:
              *contractTypeId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 60a2db290da29e126a18789e
          - in: query
            name: _userId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_userId*. It can accept two formats:<br><br> 1. A single
              *_userId* as a unique string. <br>Example:
              *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
              values separated by commas (up to a maximum of 15 values).
              <br>Example:
              *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 60a2db290da29e126a18789b
          - in: query
            name: _companyId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_companyId*. It can accept two formats:<br><br> 1. A
              single *_companyId* as a unique string. <br>Example:
              *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
              *_companyId* values separated by commas (up to a maximum of 15
              values). <br>Example:
              *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 90a2db290da29e126a187891
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned contracts.
                            example: 80a2db290da29e126a18789f
                          _userId:
                            type: string
                            description: The employee id associated to the contract.
                            example: 60a2db290da29e126a18789a1
                          _companyId:
                            type: string
                            description: The company id associated to the contract.
                            example: 50a2db290da29e126a187896
                          startDate:
                            type: string
                            description: >-
                              The start date of the contract in format
                              YYYY-MM-DDThh:mm:ss.
                            example: '2022-01-30T00:00:00'
                          contractTypeId:
                            type: string
                            description: The contract type id associated to the contract.
                            example: 50a2db290da29e126a187897
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        _userId: 80a2db290da29e126a18789b
                        _companyId: 80a2db290da29e126a187809
                        startDate: '2022-05-10T00:00:00'
                        contractTypeId: 80a2db290da29e126a187878
                      - _id: 60a2db290da29e126a18789b
                        _userId: 80a2db290da29e126a187891
                        _companyId: 80a2db290da29e126a187809
                        startDate: '2015-01-10T00:00:00'
                        contractTypeId: 80a2db290da29e126a187878
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /compensation/contract-types:
      get:
        summary: Return a list of contract types.
        description: >-
          This endpoint returns a paginated list of contract types. The URL params
          help to return more accurate results.
        tags:
          - Compensation
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: isActive
            required: false
            description: This field allows to return only the active contract types.
            schema:
              type: boolean
              example: true
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned contracts.
                            example: 80a2db290da29e126a18789f
                          name:
                            type: string
                            description: The name of the contract type.
                            example: Permanent
                          isActive:
                            type: boolean
                            description: Determines if the contract is currently active.
                            example: true
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        name: Permanent
                        isActive: true
                      - _id: 60a2db290da29e126a18789b
                        name: Junior
                        isActive: true
                      - _id: 60a2db290da29e126a18789c
                        name: Senior
                        isActive: true
                      - _id: 60a2db290da29e126a187891
                        name: External
                        isActive: false
                    metadata:
                      count: 4
                      offset: 1
                      limit: 50
                      total: 4
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /compensation/salaries:
      get:
        summary: Return a list of salaries.
        description: >-
          This endpoint returns a paginated list of employment salaries. The URL
          params help to return more accurate results.
        tags:
          - Compensation
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: _userId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_userId*. It can accept two formats:<br><br> 1. A single
              *_userId* as a unique string. <br>Example:
              *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
              values separated by commas (up to a maximum of 15 values).
              <br>Example:
              *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 60a2db290da29e126a18789b
          - in: query
            name: _companyId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_companyId*. It can accept two formats:<br><br> 1. A
              single *_companyId* as a unique string. <br>Example:
              *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
              *_companyId* values separated by commas (up to a maximum of 15
              values). <br>Example:
              *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 90a2db290da29e126a187891
          - in: query
            name: paymentPeriod
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *paymentPeriod*. Accepted values: 'Annual', 'Monthly' and
              'Hourly'. It can accept two formats:<br><br> 1. A single
              *paymentPeriod* as a unique string. <br>Example:
              *paymentPeriod=Annual* <br><br> 2. Multiple *paymentPeriod* values
              separated by commas (up to a maximum of 15 values). <br>Example:
              *paymentPeriod=Annual,Monthly*. These options provide flexibility in
              filtering contracts by their type, making it easier to retrieve the
              specific data you need.
            schema:
              type: string
              enum:
                - Annual
                - Monthly
                - Hourly
              example: Annual
          - in: query
            name: currency
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *currency* (ISO 4217). It can accept two formats:<br><br>
              1. A single *currency* as a unique string. <br>Example:
              *currency=EUR* <br><br> 2. Multiple *currency* values separated by
              commas (up to a maximum of 15 values). <br>Example:
              *currency=EUR,USD*. These options provide flexibility in filtering
              contracts by their type, making it easier to retrieve the specific
              data you need.
            schema:
              type: string
              example: EUR
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned salary.
                            example: 80a2db290da29e126a18789f
                          _userId:
                            type: string
                            description: The employee id associated to the salary.
                            example: 60a2db290da29e126a18789a1
                          _companyId:
                            type: string
                            description: The company id associated to the salary.
                            example: 50a2db290da29e126a187896
                          startDate:
                            type: string
                            description: >-
                              The start date (effective date) of the salary in
                              format YYYY-MM-DDThh:mm:ss.
                            example: '2022-01-30T00:00:00'
                          endDate:
                            type: string
                            description: >-
                              The end date of the salary in format
                              YYYY-MM-DDThh:mm:ss.
                            example: '2025-01-30T00:00:00'
                          amount:
                            type: number
                            description: The the amount of money associated to the salary.
                            example: 3000
                          paymentPeriod:
                            description: The salary payment period.
                            type: string
                            example: Annual
                          currency:
                            description: This currency in ISO 4217.
                            type: number
                            example: EUR
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        _userId: 80a2db290da29e126a18789b
                        _companyId: 80a2db290da29e126a187809
                        startDate: '2014-01-01T00:00:00'
                        endDate: '2024-05-10T00:00:00'
                        amount: 30000
                        paymentPeriod: Annual
                        current: EUR
                        contractTypeId: 80a2db290da29e126a187878
                      - _id: 60a2db290da29e126a18789b
                        _userId: 80a2db290da29e126a187891
                        _companyId: 80a2db290da29e126a187809
                        startDate: '2010-01-10T00:00:00'
                        amount: 4000
                        paymentPeriod: Monthly
                        current: USD
                        contractTypeId: 80a2db290da29e126a18787a
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /compensation/additional-payments:
      get:
        summary: Return a list of additional payments.
        description: >-
          This endpoint returns a paginated list of additional payments. The URL
          params help to return more accurate results.
        tags:
          - Compensation
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: _userId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_userId*. It can accept two formats:<br><br> 1. A single
              *_userId* as a unique string. <br>Example:
              *_userId=80a2db290da29e126a18789c* <br><br> 2. Multiple *_userId*
              values separated by commas (up to a maximum of 15 values).
              <br>Example:
              *_userId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 60a2db290da29e126a18789b
          - in: query
            name: _companyId
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *_companyId*. It can accept two formats:<br><br> 1. A
              single *_companyId* as a unique string. <br>Example:
              *_companyId=80a2db290da29e126a18789c* <br><br> 2. Multiple
              *_companyId* values separated by commas (up to a maximum of 15
              values). <br>Example:
              *_companyId=80a2db290da29e126a18789c,80a2db290da29e126a18789b,80a2db290da29e126a187891*.
              These options provide flexibility in filtering contracts by their
              type, making it easier to retrieve the specific data you need.
            schema:
              type: string
              example: 90a2db290da29e126a187891
          - in: query
            name: currency
            required: false
            description: >-
              Optional filter. This field allows you to retrieve contracts based
              on their *currency* (ISO 4217). It can accept two formats:<br><br>
              1. A single *currency* as a unique string. <br>Example:
              *currency=EUR* <br><br> 2. Multiple *currency* values separated by
              commas (up to a maximum of 15 values). <br>Example:
              *currency=EUR,USD*. These options provide flexibility in filtering
              contracts by their type, making it easier to retrieve the specific
              data you need.
            schema:
              type: string
              example: EUR
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The Kenjo _id of the returned additional payment.
                            example: 80a2db290da29e126a18789f
                          _userId:
                            type: string
                            description: >-
                              The employee id associated to the additional
                              payment.
                            example: 60a2db290da29e126a18789a1
                          _companyId:
                            type: string
                            description: The company id associated to the additional payment.
                            example: 50a2db290da29e126a187896
                          effectiveDate:
                            type: string
                            description: >-
                              The effective date of the additional payment in
                              format YYYY-MM-DDThh:mm:ss.
                            example: '2022-01-30T00:00:00'
                          additionalPaymentTypeId:
                            type: string
                            description: >-
                              The id of the addional payment type in format
                              YYYY-MM-DDThh:mm:ss.
                            example: 50a2db290da29e126a187898
                          amount:
                            type: number
                            description: >-
                              The the amount of money associated to the additional
                              payment.
                            example: 3000
                          currency:
                            description: This currency in ISO 4217.
                            type: number
                            example: EUR
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        _userId: 80a2db290da29e126a18789b
                        _companyId: 80a2db290da29e126a187809
                        effectiveDate: '2014-01-01T00:00:00'
                        additionalPaymentTypeId: 50a2db290da29e126a187898
                        amount: 500
                        current: EUR
                      - _id: 60a2db290da29e126a18789b
                        _userId: 80a2db290da29e126a187891
                        _companyId: 80a2db290da29e126a187809
                        effectiveDate: '2010-01-10T00:00:00'
                        additionalPaymentTypeId: 50a2db290da29e126a187899
                        amount: 1500
                        current: USD
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
    /compensation/additional-payment-types:
      get:
        summary: Return a list of additional payment types.
        description: >-
          This endpoint returns a paginated list of additional payment types. The
          URL params help to return more accurate results.
        tags:
          - Compensation
        parameters:
          - in: header
            $ref: '#/components/parameters/authorization'
          - in: query
            name: offset
            description: >-
              Optional filter for pagination proposals. Determines the number of
              pages to skip when pagination is being used. If this value is not
              provided, by default the offset will be 1.
            schema:
              type: number
              example: 1
          - in: query
            name: limit
            description: >-
              Optional filter for pagination proposals. The maximum number of rows
              to retrieve which determines the size of the page. If this value is
              not provided then the limit will be 50 users. The maximum value of
              the limit is 100 users per page. Only are valid the following limit
              values: 25, 50 and 100.
            schema:
              type: number
              example: 25
        responses:
          '200':
            description: OK.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: >-
                              The Kenjo _id of the returned additional payment
                              type.
                            example: 80a2db290da29e126a18789f
                          name:
                            type: string
                            description: The name of the additional payment type.
                            example: Bonus
                    metadata:
                      type: object
                      properties:
                        count:
                          type: number
                          description: >-
                            The number of rows retrieved according the pagination
                            filters (limit + offset).
                        offset:
                          type: number
                          description: >-
                            The number of pages to skip. Determines the page
                            number when pagination is being used.
                        limit:
                          type: number
                          description: >-
                            The maximum number of rows to retrieve. Determines the
                            size of the page when pagination is being used.
                        total:
                          type: number
                          description: >-
                            The total number of rows existing for the provided
                            filters.
                  example:
                    data:
                      - _id: 60a2db290da29e126a18789a
                        name: Bonus
                      - _id: 60a2db290da29e126a18789b
                        name: Extra payment
                    metadata:
                      count: 2
                      offset: 1
                      limit: 50
                      total: 2
          '400':
            $ref: '#/components/responses/badRequest'
          '401':
            $ref: '#/components/responses/unauthorized'
konfigCliVersion: 1.38.37
