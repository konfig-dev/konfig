openapi: 3.0.3
info:
  title: Height APP API
  description: >-
    Unofficial Open API 3.1 specification for [Height App
    API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).
    This is not affiliated with Height team.


    ---

    # Authentication


    The Height API uses API keys to authenticate requests. **You can view your
    API key in the Height settings under API**.


    Authentication to the API is performed via the `Authorization` header. All
    API requests should be made over HTTPs.


    i.e. Get your workspace.


    ```bash

    curl https://api.height.app/workspace \
      -H "Authorization: api-key secret_1234"
    ```


    Third-party applications must connect to the Height API using
    [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). 


    See [OAuth Apps on
    Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640)
    for more information.


    # Object formats


    All objects have a unique `id` ([UUID
    v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)))
    and a `model` attribute to distinguish the model type.


    e.g. a task object.


    ```json

    {
      "id": "123e4567-e89b-12d3-a456-426655440000",
      "model": "task",
      "name": "Fix bug",
      "index": 1,
      "status": "backLog",
      [...]
    }

    ```


    # Date formats


    Every date uses the ISO format e.g.


    ```js

    "2019-11-07T17:00:00.000Z"

    ```


    # Real-time


    Any change that you make to the API will be pushed to every user in
    real-time: i.e. creating tasks or messages.


    # Rate limits


    To keep incoming traffic under control and maintain a great experience for
    all our users, our API is behind a rate limiter. Users who send many
    requests in quick succession may see error responses that show up as status
    code 429.


    Height allows up to 120 requests/min, but we have stricter limits on these
    endpoints:


    - `POST /activities`: 60 requests/min

    - `POST /tasks`: 60 requests/min
  version: 1.0.0
  contact:
    email: gil@beomjun.kr
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.height.app
tags:
  - name: Tasks
  - description: >-
      Tasks belong to one list. To create tasks, it's necessary to know in which
      list you want to create them.
    name: Lists
  - name: Users
  - name: Field Templates
  - description: >-
      Activities can be messages, status updates of the task or integration
      updates (i.e. GitHub).
    name: Activities
  - name: Task Forms
  - name: Groups
  - name: Workspace
  - name: Security Log Events
  - name: Search
  - name: Webhooks
  - description: >-
      Height uses the authorization code grant flow (see the [OAuth2
      spec](https://datatracker.ietf.org/doc/html/rfc6749) ) in which an
      application should send the user to Height’s authorization endpoint to ask
      for permission to access their Height workspace. If granted, the app will
      receive a redirect with a code that can be exchanged for an access token.
      This token can be used in the `Authorization` header to make Height API
      calls on behalf of the user.
    name: OAuth
paths:
  /lists:
    post:
      tags:
        - Lists
      summary: Create a list
      operationId: Lists_createNewList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.lists.create({
              name: 'My List',
              type: 'list',
              // ...
            });
    get:
      tags:
        - Lists
      summary: List all lists
      operationId: Lists_getAll
      description: >-
        Use this endpoint to retrieve all the lists of the workspace. Only lists
        shared with the entire workspace will be returned.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsGetAllResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.lists.all();
  /lists/{id}:
    put:
      tags:
        - Lists
      summary: Update a list
      operationId: Lists_updateListById
      parameters:
        - description: The unique id of the list (UUIDv4)
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.lists.update({...});
  /tasks:
    post:
      tags:
        - Tasks
      summary: Create a task
      operationId: Tasks_createTask
      parameters:
        - description: (defaults to true) - use false when migrating tasks
          name: realtime
          in: query
          schema:
            type: boolean
        - description: (defaults to true) - use false when migrating tasks
          name: notifyUsers
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.tasks.create({...});
    patch:
      tags:
        - Tasks
      summary: Patch multiples tasks
      operationId: Tasks_updateMultiple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTasksRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksUpdateMultipleResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.tasks.patch({...});
    get:
      tags:
        - Tasks
      summary: Search tasks
      operationId: Tasks_search
      parameters:
        - description: JSON object with filters
          name: filters
          in: query
          example: >-
            {"status":{"values":["backLog","inProgress"]},"assigneeId":{"values":["123e4567-e89b-12d3-a456-426655440000"]},"completed":{"values":[false]},"lastActivityAt":{"values":[],"gt":{"date":"2019-11-07T17:00:00.000Z"}}}
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTasksResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            const request: SearchTasksRequest = {};
            height.tasks.search(request);
  /tasks/:id:
    get:
      tags:
        - Tasks
      summary: Get a task
      operationId: Tasks_getTaskById
      parameters:
        - description: task index (number) or task id (UUID)
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: What you wish to include with the task.
          name: include
          in: query
          schema:
            type: string
            enum:
              - Assignees
              - CreatedByUser
              - CompletedByUser
              - DeletedByUser
              - Subscribers
              - Fields.User
              - Lists
              - Status
              - Mentions
              - NotificationsSubscription
              - ParentTasks
              - SubtaskIds
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.tasks.get({...});
    patch:
      tags:
        - Tasks
      summary: Update a single task
      operationId: Tasks_updateTaskById
      parameters:
        - description: task index (number) or task id (UUID)
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.tasks.update({...});
  /tasks/move:
    put:
      tags:
        - Tasks
      summary: Move tasks
      operationId: Tasks_moveTask
      description: >-
        Not working.
        https://www.notion.so/Move-tasks-0e612add3e09400bacc6119c8129fa67
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTasksRequest'
        required: true
      responses:
        '200':
          description: Successful operation
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.tasks.move({...});
  /activities:
    post:
      tags:
        - Activities
      summary: Post a message
      operationId: Activities_createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.activities.post({...});
    get:
      tags:
        - Activities
      summary: List activities and messages
      operationId: Activities_listMessages
      parameters:
        - description: >-
            Either the task unique `id` (UUID), or the task unique `index` (the
            123 of T-123).
          name: taskId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActivitiesResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.activities.get({...});
  /fieldTemplates:
    get:
      tags:
        - Field Templates
      summary: List all field templates
      operationId: FieldTemplates_listAll
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllFieldTemplatesResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.fieldTemplates.all();
  /fieldTemplates/:id/options:
    post:
      tags:
        - Field Templates
      summary: Create an option for a field template
      operationId: FieldTemplates_createOption
      description: This endpoint adds an option to a `select` or `labels` field template.
      parameters:
        - description: field template id (UUID)
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFieldTemplateOptionRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTemplateObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.fieldTemplates.createOption({...});
  /fieldTemplates/:id/options/:optionId:
    put:
      tags:
        - Field Templates
      summary: Update or delete an option for a field template
      operationId: FieldTemplates_updateOption
      description: >-
        This endpoint updates or deletes an option to a `select` or `labels`
        field template.


        The field template must be unlocked to use this endpoint.  Locking and
        unlocking field templates is an enterprise feature.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: optionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldTemplateOptionRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTemplateObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.fieldTemplates.updateOption({...});
  /taskForms/:id/answers:
    post:
      tags:
        - Task Forms
      summary: Create a task from a public task form
      operationId: TaskForms_createTaskFromForm
      description: >-
        ❌ Task forms have a set number of questions, so it is impossible to set
        some attributes for a task using this endpoint
      parameters:
        - description: task form id
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Only allowed for public task forms, and required if not
            authenticated
          name: asBot
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskFromTaskFormRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.taskForms.createTask({...});
  /taskForms/:urlKey:
    get:
      tags:
        - Task Forms
      summary: Get a task form
      operationId: TaskForms_getById
      parameters:
        - name: urlKey
          in: path
          required: true
          schema:
            type: string
        - description: One of key or urlKey, defaulting to id
          name: keyType
          in: query
          schema:
            type: string
            enum:
              - key
              - urlKey
        - description: Array of task form includes
          name: include
          in: query
          schema:
            type: array
            items:
              description: >-
                Task form include type. Valid values are "RestrictedUsers",
                "RestrictedLists", "FieldTemplates", "SubtaskForms",
                "Questions", and "Fields".
              type: string
              enum:
                - RestrictedUsers
                - RestrictedLists
                - FieldTemplates
                - SubtaskForms
                - Questions
                - Fields
        - name: archived
          in: query
          schema:
            description: only look for archived or unarchived forms
            type: boolean
        - name: draft
          in: query
          schema:
            description: only look for archived or unarchived forms
            type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFormObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.taskForms.get({...});
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: Users_getAllUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllUsersResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.users.all();
  /users/:id:
    get:
      tags:
        - Users
      summary: Get a user
      operationId: Users_getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.users.get({...});
  /users/me:
    get:
      tags:
        - Users
      summary: Get the current user
      operationId: Users_getCurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.users.me();
  /groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      operationId: Groups_getAllGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllGroupsResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.groups.all();
  /securityLogEvents:
    get:
      tags:
        - Security Log Events
      summary: List all security log event objects
      operationId: SecurityLogEvents_listAll
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllSecurityLogEventsResponse'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.securityLogEvents.all();
  /workspace:
    get:
      tags:
        - Workspace
      summary: Retrieve the workspace
      operationId: Workspace_get
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceObject'
      x-codeSamples:
        - lang: JavaScript
          label: SDK
          source: |-
            const height = new Height({secretKey: 'secret_your-key'});

            height.workspace.get();
components:
  securitySchemes:
    apiKey:
      description: >-
        The Height API uses API keys to authenticate requests. **You can view
        your API key in the Height settings under API**.
         ex: `api-key secret_1234`
      type: apiKey
      name: Authorization
      in: header
  schemas:
    ListObject:
      description: >-
        Tasks belong to one list. To create tasks, it's necessary to know in
        which list you want to create them.
      type: object
      required:
        - id
        - model
        - type
        - key
        - description
        - url
        - appearance
      properties:
        description:
          description: The description of the list. It can be an empty string.
          type: string
        id:
          description: The unique id of the list (UUIDv4)
          type: string
          format: uuid
        model:
          description: The model is always `list`
          type: string
          example: list
          enum:
            - list
        type:
          description: >-
            - `list`: a list that contains tasks. You can only create tasks in
            this type of list directly.

            - `smartlist`: a smart list use filters to find tasks across
            different lists

            - `user`: a special smart list that displays tasks assigned to a
            user

            - `inbox`: a special smart list to display recent conversations

            - `search`: a special smart list to search tasks
          type: string
          enum:
            - list
            - smartlist
            - user
            - inbox
            - search
        key:
          description: >-
            The unique key of your list is used as their url.


            If the key is `general`, the url will be:
            `https://your-workspace.height.app/general`


            Keys need to respect these rules: 


            - valid characters are: lower-case letters, dashes and numbers

            - needs to start with a lower-case letter

            - key is unique across the workspace
          type: string
        url:
          description: The url of the list.
          type: string
        appearance:
          type: object
          required:
            - iconUrl
          properties:
            iconUrl:
              description: URL of the list icon
              type: string
            hue:
              description: 'hue of the list color '
              type:
                - 'null'
                - number
    FiltersObject:
      description: See FiltersObject.ts
      type: object
    CreateNormalListRequest:
      description: Create a list
      type: object
      required:
        - name
        - type
      properties:
        description:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - list
            - smartlist
        appearance:
          type: object
          required:
            - icon
          properties:
            icon:
              type: string
              enum:
                - list
                - listCircles
                - listTriangle
                - listSquare
                - listLines
                - listRectangles
                - listCircle
                - listRocket
                - listMushroom
                - listBolt
                - listBug
                - listFlower
                - listThumbsUp
                - listTarget
                - listSparkle
                - listMedal
                - listFlag
            hue:
              description: |-
                Hue is between 0 and 360 and used to determine the color.

                If `null`, the list has no color.
              type:
                - 'null'
                - number
              minimum: 0
              maximum: 360
        visualization:
          description: visualization string (optional, default = list) list or kanban
          default: list
          type: string
          enum:
            - list
            - kanban
    CreateSmartListRequest:
      description: Create a smartlist
      type: object
      required:
        - name
        - type
        - filters
      properties:
        description:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - list
            - smartlist
        filters:
          $ref: '#/components/schemas/FiltersObject'
        appearance:
          type: object
          required:
            - icon
          properties:
            icon:
              type: string
              enum:
                - list
                - listCircles
                - listTriangle
                - listSquare
                - listLines
                - listRectangles
                - listCircle
                - listRocket
                - listMushroom
                - listBolt
                - listBug
                - listFlower
                - listThumbsUp
                - listTarget
                - listSparkle
                - listMedal
                - listFlag
            hue:
              description: |-
                Hue is between 0 and 360 and used to determine the color.

                If `null`, the list has no color.
              type:
                - 'null'
                - number
              minimum: 0
              maximum: 360
        visualization:
          description: visualization string (optional, default = list) list or kanban
          default: list
          type: string
          enum:
            - list
            - kanban
    CreateListRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateNormalListRequest'
        - $ref: '#/components/schemas/CreateSmartListRequest'
    ListAllResponse:
      type: object
      required:
        - lists
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ListObject'
    UpdateListRequest:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        appearance:
          type: object
          properties:
            icon:
              description: the name of the icon e.g. listCircles, listBug.
              type: string
            hue:
              type: number
          required:
            - icon
        visualization:
          type: string
          enum:
            - list
            - kanban
            - calendar
            - gantt
            - conversation
            - figma
        archivedAt:
          description: >-
            string representing a date the list was archived at, in the form of
            an ISO 8601 date (e.g. 2011-04-11T10:20:30Z).
          type: string
          format: date-time
    UpdateListRequestWithId:
      allOf:
        - $ref: '#/components/schemas/UpdateListRequest'
        - type: object
          required:
            - id
          properties:
            id:
              description: The id of the list
              type: string
    TaskObject:
      type: object
      required:
        - id
        - model
        - index
        - listIds
        - name
        - description
        - status
        - assigneesIds
        - fields
        - deleted
        - deletedAt
        - deletedByUserId
        - completed
        - completedAt
        - createdAt
        - createdUserId
        - lastActivityAt
        - url
        - trashedAt
        - trashedByUserId
      properties:
        description:
          description: >-
            The description of the task. It's only retrieved if you use include.
            See ['Get a
            task'](https://www.notion.so/Get-a-task-8afda1c08e7f4f07a5c53720710cf24e).
          type: string
        id:
          description: The unique id of the task
          type: string
        model:
          description: The model is always `task`
          type: string
          enum:
            - task
        index:
          description: The task index. For example, if the task is T-123, its index is 123.
          type: number
        listIds:
          description: >-
            Tasks belong to one or more lists. To create tasks, it's necessary
            to know in which list you want to create them.
          type: array
          items:
            type: string
            format: uuid
        name:
          description: The name of the task.
          type: string
        status:
          description: >-
            The status of the task.

            - `backLog`

            - `inProgress`

            - `done`

            - and any *UUID* of available statuses. You can find the *UUIDs*
            through the field template API.
          type: string
        assigneesIds:
          description: >-
            The assignees of the task. You can find the UUIDs of users through
            the users API.
             ['List all users'](https://www.notion.so/List-all-users-ea66d04e48534b32927903c4deee58e8)
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        fields:
          type: array
          items:
            type: object
            required:
              - fieldTemplateId
            properties:
              fieldTemplateId:
                description: The id of the appropriate field template
                type: string
                format: uuid
              value:
                description: >-
                  For text fields: the text value of the field. For select
                  fields: the id of the selected option
                type: string
              date:
                description: 'For date fields: the date value of the field'
                type: string
                format: date-time
              labels:
                description: 'For labels fields: the labels of the field'
                type: array
                items:
                  type: string
              linkedTasks:
                description: >-
                  For linkedTasks fields: the tasks to be linked, in the format:
                  { "id": "UUID", "index": number }
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    index:
                      type: number
        deleted:
          description: If the task was deleted.
          type: boolean
        deletedAt:
          description: The date at which the task was deleted.
          type: string
          format: date-time
        deletedByUserId:
          description: The user that deleted the task.
          type: string
          format: uuid
        completed:
          description: >-
            If the status is considered as completed (i.e. `done`), the value
            will be `true`.
          type: boolean
        completedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        createdUserId:
          description: The user that created the task.
          type: string
          format: uuid
        lastActivityAt:
          type: string
          format: date-time
        url:
          description: The URL of the task.
          type: string
        trashedAt:
          description: >-
            A timestamp when the task was moved to the trash. Tasks are deleted
            after 30 days in the trash. This will be null unless the task is
            currently in the trash or deleted.
          type: string
          format: date-time
        trashedByUserId:
          description: The id of the user that moved the task to the trash
          type: string
          format: uuid
        parentTaskId:
          description: >-
            If the task is a subtask of another task, `parentTaskId` will be the
            id of the parent task.
          type: string
          format: uuid
    ZendeskTicketLinkObject:
      type: object
      required:
        - url
        - metadata
      properties:
        url:
          description: The URL of the Zendesk ticket.
          type: string
        metadata:
          type: object
          required:
            - type
            - ticketId
          properties:
            description:
              description: The description of the Zendesk ticket.
              type: string
            type:
              description: The type of the metadata.
              type: string
              enum:
                - zendeskTicket
            ticketId:
              description: The ID of the Zendesk ticket.
              type: integer
            subject:
              description: The subject of the Zendesk ticket.
              type: string
    NotionDocumentLinkObject:
      type: object
      required:
        - url
        - metadata
      properties:
        url:
          description: The URL of the Notion document.
          type: string
        metadata:
          type: object
          required:
            - type
            - pageId
          properties:
            type:
              description: The type of the metadata.
              type: string
              enum:
                - notionDocument
            pageId:
              description: The ID of the Notion page.
              type: string
    FigmaLinkObject:
      type: object
      required:
        - url
        - metadata
      properties:
        url:
          description: The URL of the Figma link.
          type: string
        metadata:
          type: object
          required:
            - type
            - fileKey
          properties:
            type:
              description: The type of the metadata.
              type: string
              enum:
                - figmaLink
            document:
              description: The Figma document.
              type: object
              required:
                - id
              properties:
                id:
                  description: The ID of the Figma document.
                  type: string
                name:
                  description: The name of the Figma document (optional).
                  type: string
            fileKey:
              description: The file key of the Figma document.
              type: string
            page:
              description: The Figma page.
              type: object
              required:
                - id
              properties:
                id:
                  description: The ID of the Figma page.
                  type: string
                name:
                  description: The name of the Figma page (optional).
                  type: string
              nullable: true
            frame:
              description: The Figma frame.
              type: object
              required:
                - id
              properties:
                id:
                  description: The ID of the Figma frame.
                  type: string
                name:
                  description: The name of the Figma frame (optional).
                  type: string
              nullable: true
    SentryIssueLinkObject:
      type: object
      required:
        - metadata
      properties:
        metadata:
          type: object
          required:
            - type
            - project
            - issueId
          properties:
            type:
              description: The type of the metadata.
              type: string
              enum:
                - sentryIssue
            project:
              description: The Sentry project.
              type: object
              required:
                - slug
                - id
              properties:
                slug:
                  description: The slug of the Sentry project.
                  type: string
                id:
                  description: The ID of the Sentry project.
                  type: string
            issueId:
              description: The ID of the Sentry issue.
              type: string
    SentryAlertLinkObject:
      type: object
      required:
        - metadata
      properties:
        metadata:
          type: object
          required:
            - type
            - organizationId
            - lastAlertEvent
            - alertRuleId
            - lastAlertStatus
          properties:
            type:
              description: The type of the metadata.
              type: string
              enum:
                - sentryAlert
            organizationId:
              description: The ID of the Sentry organization.
              type: string
            lastAlertEvent:
              description: The date and time of the last alert event for the Sentry alert.
              type: string
              format: date-time
            alertRuleId:
              description: The ID of the alert rule for the Sentry alert.
              type: string
            lastAlertStatus:
              description: The status of the last alert for the Sentry alert.
              type: string
              enum:
                - critical
                - warning
                - resolved
    LinkObjects:
      oneOf:
        - $ref: '#/components/schemas/ZendeskTicketLinkObject'
        - $ref: '#/components/schemas/NotionDocumentLinkObject'
        - $ref: '#/components/schemas/FigmaLinkObject'
        - $ref: '#/components/schemas/SentryIssueLinkObject'
        - $ref: '#/components/schemas/SentryAlertLinkObject'
    CreateTaskRequest:
      type: object
      required:
        - name
        - listIds
      properties:
        description:
          type: string
        name:
          type: string
        listIds:
          description: An array of UUIDs (one or more)
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
        status:
          type: string
        assigneesIds:
          description: An array of UUIDs of the users assigned to the task (optional).
          type: array
          items:
            type: string
            format: uuid
        parentTaskId:
          description: The UUID of the parent task (optional).
          type: string
          format: uuid
        fields:
          type: array
          items:
            type: object
            required:
              - fieldTemplateId
            properties:
              fieldTemplateId:
                description: The id of the appropriate field template
                type: string
                format: uuid
              value:
                description: >-
                  For text fields: the text value of the field. For select
                  fields: the id of the selected option
                type: string
              date:
                description: 'For date fields: the date value of the field'
                type: string
                format: date-time
              labels:
                description: 'For labels fields: the labels of the field'
                type: array
                items:
                  type: string
              linkedTasks:
                description: >-
                  For linkedTasks fields: the tasks to be linked, in the format:
                  { "id": "UUID", "index": number }
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    index:
                      type: number
        orderIntent:
          description: Inserts the task at the right place in the list.
          type: object
          properties:
            intent:
              type: string
              enum:
                - start
                - end
                - before
                - after
            taskId:
              description: (only used for before and after intent)
              type: string
              format: uuid
    CreateTaskRequestWithQueries:
      allOf:
        - $ref: '#/components/schemas/CreateTaskRequest'
        - description: This is for queries
          type: object
          properties:
            queryParams:
              type: object
              properties:
                realtime:
                  description: (defaults to true) - use false when migrating tasks
                  type: boolean
                notifyUsers:
                  description: (defaults to true) - use false when migrating tasks
                  type: boolean
    PatchTasksNameEffect:
      description: Update name
      type: object
      required:
        - type
        - name
      properties:
        type:
          type: string
          enum:
            - name
        name:
          type: string
    PatchTasksDescriptionEffect:
      description: Update description
      type: object
      required:
        - type
        - description
      properties:
        description:
          type: object
          required:
            - message
          properties:
            message:
              type: string
        type:
          type: string
          enum:
            - description
    PatchTasksStatusEffect:
      description: Update status
      type: object
      required:
        - type
        - status
      properties:
        type:
          type: string
          enum:
            - status
        status:
          description: >-
            The status of the task.

            - `backLog`

            - `inProgress`

            - `done`

            - and any *UUID* of available statuses. You can find the *UUIDs*
            through the field template API.
          type: string
        completedAt:
          description: ISO 8601 date-time
          type: string
          format: date-time
    PatchTasksDeletedEffect:
      description: Update deleted
      type: object
      required:
        - type
        - deleted
      properties:
        type:
          type: string
          enum:
            - deleted
        deleted:
          type: boolean
    PatchTasksParentTaskEffect:
      description: Update parent task
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - parentTask
        parentTaskId:
          description: The UUID of the parent task (optional).
          type:
            - 'null'
            - string
          format: uuid
    PatchTasksAssigneesEffect:
      description: Update assignees
      type: object
      required:
        - type
        - assigneesIds
      properties:
        type:
          type: string
          enum:
            - assignees
        assigneesIds:
          description: An array of UUIDs of the users assigned to the task (optional).
          type: array
          items:
            type: object
            properties:
              add:
                type: array
                items:
                  type: string
                  format: uuid
              remove:
                type: array
                items:
                  type: string
                  format: uuid
    PatchTasksListsEffect:
      description: Update lists
      type: object
      properties:
        type:
          type: string
          enum:
            - lists
        listIds:
          description: An array of UUIDs
          type: array
          items:
            type: object
            properties:
              add:
                type: array
                items:
                  type: string
                  format: uuid
              remove:
                type: array
                items:
                  type: string
                  format: uuid
    PatchTasksFieldsEffect:
      description: Update fields
      type: object
      required:
        - type
        - fieldTemplateId
        - fields
      properties:
        type:
          type: string
          enum:
            - fields
        fieldTemplateId:
          type: string
          format: uuid
        fields:
          type: object
          properties:
            text:
              description: The value of the field when the template type is text.
              type:
                - 'null'
                - string
            date:
              description: The value of the field when the template type is date.
              type:
                - 'null'
                - string
              format: date-time
            recursion:
              description: >-
                recursion

                Untyped. Should be documented in [original
                docs](https://www.notion.so/Update-tasks-53d72cb0059a4e0e81cc2fcbfcbf9d0a)
              type:
                - 'null'
                - object
            label:
              description: The label value of the field when the template type is select.
              type: object
              properties:
                optionId:
                  type: string
                  format: uuid
            labels:
              description: The label values of the field when the template type is labels.
              type: object
              properties:
                add:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: The ID for the label to add.
                        type: string
                        format: uuid
                    required:
                      - id
                remove:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: The ID for the label to remove.
                        type: string
                        format: uuid
                    required:
                      - id
            linkedTasks:
              description: >-
                The linked tasks value of the field when the template type is
                linkedTask or reverseLinkedTask.
              type: object
              properties:
                add:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: The ID for the task to add.
                        type: string
                        format: uuid
                      index:
                        description: The index for the task to add.
                        type: integer
                    required:
                      - id
                remove:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: The ID for the task to remove.
                        type: string
                        format: uuid
                      index:
                        description: The index for the task to remove.
                        type: integer
                    required:
                      - id
        userIds:
          description: The user IDs of the field when the template type is users.
          type: object
          properties:
            add:
              type: array
              items:
                description: The user ID to add.
                type: string
                format: uuid
              required:
                - id
            remove:
              type: array
              items:
                description: The user ID to remove.
                type: string
                format: uuid
              required:
                - id
    PatchTasksMoveToTrashEffect:
      description: Move trash to the task
      type: object
      required:
        - type
        - trashState
        - trashStateEffectAt
      properties:
        type:
          type: string
          enum:
            - trashState
        trashState:
          type: string
          enum:
            - trash
        trashStateEffectAt:
          description: ISO 8601 date-time
          type: string
          format: date-time
    PatchTasksOutOfTrashEffect:
      description: Move task out of the trash
      type: object
      required:
        - type
        - trashState
        - trashStateEffectAt
      properties:
        type:
          type: string
          enum:
            - trashState
        trashState:
          type: string
          enum:
            - active
        trashStateEffectAt:
          description: ISO 8601 date-time
          type: string
          format: date-time
    PatchTasksRequest:
      description: Patch multiples tasks
      type: object
      properties:
        patches:
          type: array
          items:
            type: object
            required:
              - taskIds
              - effects
            properties:
              taskIds:
                description: Array of task ids, either UUIDs or task numbers
                type: array
                items:
                  type: string
                  format: uuid
              effects:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/PatchTasksNameEffect'
                    - $ref: '#/components/schemas/PatchTasksDescriptionEffect'
                    - $ref: '#/components/schemas/PatchTasksStatusEffect'
                    - $ref: '#/components/schemas/PatchTasksDeletedEffect'
                    - $ref: '#/components/schemas/PatchTasksParentTaskEffect'
                    - $ref: '#/components/schemas/PatchTasksAssigneesEffect'
                    - $ref: '#/components/schemas/PatchTasksListsEffect'
                    - $ref: '#/components/schemas/PatchTasksFieldsEffect'
                    - $ref: '#/components/schemas/PatchTasksMoveToTrashEffect'
                    - $ref: '#/components/schemas/PatchTasksOutOfTrashEffect'
    PatchTasksResponse:
      type: object
      properties:
        list:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TaskObject'
    SearchTasksResponse:
      type: object
      properties:
        list:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TaskObject'
    UpdateTaskRequest:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        listIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          description: >-
            The status of the task.

            - `backLog`

            - `inProgress`

            - `done`

            - and any *UUID* of available statuses. You can find the *UUIDs*
            through the field template API.
          type: string
        assigneesIds:
          type: array
          items:
            type: string
            format: uuid
        parentTaskId:
          type: string
          format: uuid
        fields:
          type: array
          items:
            type: object
            required:
              - fieldTemplateId
            properties:
              fieldTemplateId:
                description: The id of the appropriate field template
                type: string
                format: uuid
              value:
                description: >-
                  For text fields: the text value of the field. For select
                  fields: the id of the selected option
                type: string
              date:
                description: 'For date fields: the date value of the field'
                type: string
                format: date-time
              labels:
                description: 'For labels fields: the labels of the field'
                type: array
                items:
                  type: string
              linkedTasks:
                description: >-
                  For linkedTasks fields: the tasks to be linked, in the format:
                  { "id": "UUID", "index": number }
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    index:
                      type: number
      required:
        - name
    UpdateTaskRequestWithId:
      allOf:
        - $ref: '#/components/schemas/UpdateTaskRequest'
        - type: object
          required:
            - id
          properties:
            id:
              description: task index (number) or task id (UUID)
              type: string
              format: uuid
    SearchTasksRequest:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/FiltersObject'
    GetTaskRequest:
      type: object
      required:
        - id
      properties:
        id:
          description: task index (number) or task id (UUID)
          type: string
          format: uuid
        include:
          type: array
          items:
            type: string
            enum:
              - Assignees
              - CreatedByUser
              - CompletedByUser
              - DeletedByUser
              - Subscribers
              - Fields.User
              - Lists
              - Status
              - Mentions
              - NotificationsSubscription
              - ParentTasks
              - SubtaskIds
    GetTaskRequestWithId:
      allOf:
        - $ref: '#/components/schemas/GetTaskRequest'
        - type: object
          required:
            - id
          properties:
            id:
              description: task index (number) or task id (UUID)
              type: string
              format: uuid
    MoveTasksRequest:
      type: object
      properties:
        taskIds:
          type: array
          items:
            type: string
            format: uuid
        sourceId:
          description: UUID of list or parent task of tasks
          type: string
          format: uuid
        orderIntent:
          type: object
          properties:
            intent:
              type: string
              enum:
                - start
                - end
                - before
                - after
            taskId:
              description: UUID (only used for before and after intent)
              type: string
              format: uuid
      required:
        - taskIds
        - sourceId
        - orderIntent
    ActivityObject:
      type: object
      required:
        - id
        - model
        - createdAt
        - taskId
        - createdUserId
        - type
        - reactjis
        - readUserIds
        - url
      properties:
        id:
          description: The unique id of the activity.
          type: string
          format: uuid
        model:
          description: The model is always `activity`.
          type: string
        createdAt:
          description: >-
            The date when the activity was created. See [Date
            formats](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).
          type: string
          format: date-time
        taskId:
          description: The task id of the task this activity is linked to.
          type: string
          format: uuid
        createdUserId:
          description: The user id that posted that activity.
          type: string
          format: uuid
        type:
          description: The type of the activity.
          type: string
          enum:
            - comment
            - description
            - createdAt
            - statusChange
            - statusRemoved
            - assigneeChange
            - listsChange
            - nameChange
            - customFieldChange
            - fieldOptionRemoved
        message:
          description: The message/body of this comment/description.
          type: string
        oldValue:
          description: For updates, this is the value before the change.
          type: string
        newValue:
          description: For status, this is the value after the change.
          type: string
        reactjis:
          description: An array of reactjis.
          type: array
          items:
            type: object
            properties:
              id:
                description: The id of the reactji.
                type: string
                format: uuid
              model:
                description: Always set to `reactji`.
                type: string
              emoji:
                description: The emoji used for the reactji.
                type: string
              userId:
                description: The user id that added the reactji.
                type: string
                format: uuid
              activityId:
                description: The id of the activity the reactji was added to.
                type: string
                format: uuid
        readUserIds:
          description: The user ids that read this activity.
          type: array
          items:
            type: string
            format: uuid
        url:
          description: The url of the activity.
          type: string
    PostMessageRequest:
      type: object
      required:
        - taskId
        - type
        - message
      properties:
        taskId:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - comment
            - description
        message:
          description: >-
            ## Mentions


            Height supports multiple types of mentions, with each their own
            format:


            User mention: `@user_<userId>`


            Group mention: `@group_<groupId>`


            Task mention: `T-<taskIndex>`


            List mention: `#<listKey>`
          type: string
    PostMessageRequestWithQueries:
      allOf:
        - $ref: '#/components/schemas/PostMessageRequest'
        - type: object
          properties:
            queryParams:
              type: object
              properties:
                realtime:
                  description: (defaults to true) - use false when migrating messages
                  type: boolean
                  default: true
                notifyUsers:
                  description: (defaults to true) - use false when migrating messages
                  type: boolean
                  default: true
    ListActivitiesRequest:
      type: object
      required:
        - taskId
      properties:
        taskId:
          description: >-
            Either the task unique `id` (UUID), or the task unique `index` (the
            123 of T-123).
          type: string
          format: uuid
    ListActivitiesResponse:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ActivityObject'
    FieldTemplateObject:
      type: object
      properties:
        id:
          description: The unique id of the field template.
          type: string
          format: uuid
        model:
          description: The model is always `fieldTemplate`.
          type: string
          enum:
            - fieldTemplate
        name:
          description: The name of the field template.
          type: string
        type:
          description: >-
            Possible types:


            - `text`: any text value attribute (i.e. Story Points)

            - `labels`: used for tags for example

            - `select`: used for priority, sprint,…

            - `date`: used for due date,…

            - `linkedTasks`: usually used for dependencies and so on

            - `status`: the status attribute (only one field template of that
            type)
          type: string
          enum:
            - text
            - labels
            - select
            - date
            - linkedTasks
            - status
        labelSets:
          description: >-
            An array of label sets, only available when the type of the field
            template is `status`.
          type: array
          items:
            type: object
            required:
              - id
              - model
              - value
            properties:
              id:
                description: The unique id of the field label set.
                type: string
                format: uuid
              model:
                description: The model is always `fieldLabelSet`.
                type: string
                enum:
                  - fieldLabelSet
              value:
                description: The name of the field label set.
                type: string
        labels:
          description: >-
            Only available when the type of the field template is `labels`,
            `select` or `status`.
          type: array
          items:
            type: object
            required:
              - id
              - model
              - value
              - hue
              - statusState
            properties:
              id:
                description: UUID or string (backLog, inProgress and done are hard-coded).
                type: string
              model:
                description: The model is always `fieldLabel`.
                type: string
                enum:
                  - fieldLabel
              value:
                description: The name of the label.
                type: string
              hue:
                description: The hue of the label's color (between 0 and 360).
                type: number
              labelSetId:
                description: >-
                  The id of the label set this label belongs to, if any. Only if
                  the type of field template is `status`.
                type: string
                format: uuid
              statusState:
                description: >-
                  The state of the status, only available when the type of the
                  field template is `status`.

                  Note that a task is considered as completed if its status has
                  a state of `canceled` or `completed`.
                type: string
                enum:
                  - default
                  - started
                  - blocked
                  - canceled
                  - completed
        archive:
          description: This attribute has been archived.
          type: boolean
      required:
        - id
        - model
        - name
        - type
        - archive
    ListAllFieldTemplatesResponse:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/FieldTemplateObject'
    CreateFieldTemplateOptionRequest:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        hue:
          description: number between 0 and 360 (optional)
          type: number
    CreateFieldTemplateOptionRequestWithId:
      allOf:
        - $ref: '#/components/schemas/CreateFieldTemplateOptionRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
    UpdateFieldTemplateOptionRequest:
      type: object
      required:
        - value
      properties:
        value:
          type: string
        hue:
          description: number between 0 and 360 (optional)
          type: number
        deleted:
          type: boolean
    UpdateFieldTemplateOptionRequestWithId:
      allOf:
        - $ref: '#/components/schemas/UpdateFieldTemplateOptionRequest'
        - type: object
          required:
            - id
            - optionId
          properties:
            id:
              type: string
              format: uuid
            optionId:
              type: string
              format: uuid
    CreateTaskFromTaskFormRequest:
      type: object
      properties:
        answers:
          description: Array of question responses
          type: array
          items:
            type: object
            properties:
              description:
                description: >-
                  The description of the string. Accepts markdown. Required when
                  the question is for the description
                type: string
              questionId:
                description: The id of the task form question
                type: string
                format: uuid
              name:
                description: >-
                  The name of the task - required when the question is for the
                  task name
                type: string
              status:
                description: >-
                  The id of the status of the task - required when the question
                  is for the task status
                type: string
              assigneesIds:
                description: >-
                  The ids of the assignees of the task - required when the
                  question is for the task assignees.
                type: array
                items:
                  type: string
                  format: uuid
              listIds:
                description: >-
                  The ids of the lists of the task - required when the question
                  is for the lists
                type: array
                items:
                  type: string
                  format: uuid
                example:
                  - d8dff420-ddbe-4afc-8837-f493e922be7b
                  - 2f2abf80-0a87-4d68-9241-fcc41f427c91
              field:
                description: >-
                  TaskField Attributes (optional) Required to belong to the
                  attribute associated with the question. See the Task Object
                  for specifications
                type: object
                required:
                  - fieldTemplateId
                properties:
                  fieldTemplateId:
                    description: The id of the appropriate field template
                    type: string
                    format: uuid
                  value:
                    description: >-
                      For text fields: the text value of the field. For select
                      fields: the id of the selected option
                    type: string
                  date:
                    description: 'For date fields: the date value of the field'
                    type: string
                    format: date-time
                  labels:
                    description: 'For labels fields: the labels of the field'
                    type: array
                    items:
                      type: string
                  linkedTasks:
                    description: >-
                      For linkedTasks fields: the tasks to be linked, in the
                      format: { "id": "UUID", "index": number }
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        index:
                          type: number
      required:
        - questionId
    CreateTaskFromTaskFormRequestWithIdQueries:
      allOf:
        - $ref: '#/components/schemas/CreateTaskFromTaskFormRequest'
        - type: object
          required:
            - id
          properties:
            id:
              description: The id of the task form
              type: string
              format: uuid
            queryParams:
              type: object
              properties:
                asBot:
                  description: >-
                    Only allowed for public task forms, and required if not
                    authenticated
                  type: boolean
    GetTaskFormRequest:
      type: object
      required:
        - urlKey
      properties:
        urlKey:
          type: string
        keyType:
          description: One of key or urlKey, defaulting to id
          type: string
          enum:
            - key
            - urlKey
          example: urlKey
        include:
          description: Array of task form includes
          type: array
          items:
            description: >-
              Task form include type. Valid values are "RestrictedUsers",
              "RestrictedLists", "FieldTemplates", "SubtaskForms", "Questions",
              and "Fields".
            type: string
            enum:
              - RestrictedUsers
              - RestrictedLists
              - FieldTemplates
              - SubtaskForms
              - Questions
              - Fields
        archived:
          description: only look for archived or unarchived forms
          type: boolean
        draft:
          description: only look for archived or unarchived forms
          type: boolean
    TaskFormObject:
      description: Uncertain typed. Height team did't provide schema for Task Form.
      type: object
      properties:
        version:
          description: The version of the task form.
          type: integer
          example: 2
        id:
          description: The ID of the task form.
          type: string
          format: uuid
          example: c91896fb-cb00-4122-9e13-5ea3f760f3a4
        model:
          description: always "taskForm"
          type: string
          enum:
            - taskForm
        key:
          description: The key of the task form.
          type: string
          example: JfsPVS9NxJ
        urlKey:
          description: The URL key of the task form.
          type: string
          example: ryNw67fFHJCd
        url:
          description: The URL of the task form.
          type: string
          example: https://height.app/u28gpe10d5/?taskForm=Task-submission-ryNw67fFHJCd
        name:
          description: The name of the task form.
          type: string
          example: Task submission
        taskFormDescription:
          description: The description of the task form.
          type: string
          example: ''
        disabledReason:
          description: The reason why the task form is disabled.
          type:
            - 'null'
            - string
          nullable: true
          example: null
        archived:
          description: Flag to indicate whether the task form is archived.
          type: boolean
          example: false
        draft:
          description: Flag to indicate whether the task form is a draft.
          type: boolean
          example: false
        publicAccess:
          description: The type of public access for the task form.
          type: string
          example: readonly
        listIds:
          description: The IDs of the lists associated with the task form.
          type: array
          items:
            type: string
            format: uuid
          example:
            - baa40cc6-240f-4df2-a01b-22476876d61e
        parentTaskId:
          description: The ID of the parent task.
          type:
            - 'null'
            - string
          nullable: true
          format: uuid
          example: null
        status:
          description: >-
            The status of the task.

            - `backLog`

            - `inProgress`

            - `done`

            - and any *UUID* of available statuses. You can find the *UUIDs*
            through the field template API.
          type: string
        questions:
          type: array
          items:
            description: The list of questions in the task form.
            type: object
            properties:
              id:
                description: The ID of the question.
                type: string
                format: uuid
                example: b842f01d-8dfa-40cf-884d-1b2b95d8b6fb
              fieldId:
                description: The ID of the field.
                type: string
                example: name
              value:
                description: The value of the question.
                type: string
                example: Task Name
              required:
                description: Flag to indicate whether the question is required.
                type: boolean
                example: true
              placeholder:
                description: The placeholder for the question.
                type: string
                nullable: true
                example: Name
              restrictedLabelIds:
                description: The IDs of the restricted labels for the question.
                type: array
                items:
                  type: string
                  format: uuid
                example: []
              multipleLabels:
                description: Flag to indicate whether the question accepts multiple labels.
                type: boolean
                example: true
          example:
            - id: b842f01d-8dfa-40cf-884
    InvitedUserObject:
      type: object
      properties:
        id:
          description: The unique ID of the user.
          type: string
          format: uuid
        model:
          description: The model is always `user`.
          type: string
          enum:
            - user
        state:
          description: The state of the user.
          type: string
          enum:
            - enabled
            - invited
          example: enabled
        email:
          description: The email of the user.
          type: string
        access:
          type: string
          enum:
            - member
            - guest
            - anonymous
          example: member
        createdAt:
          description: >-
            The date and time the user was created, see [Date
            formats](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).
          type: string
          format: date-time
          example: '2023-02-18T10:15:00Z'
        pictureUrl:
          description: The URL of the user's picture, if available.
          type: string
          example: https://example.com/user.jpg
      required:
        - id
        - model
        - state
        - email
        - access
        - createdAt
    EnabledUserObject:
      type: object
      properties:
        id:
          description: The unique ID of the user.
          type: string
          format: uuid
        model:
          description: The model is always `user`.
          type: string
          enum:
            - user
        state:
          description: The state of the user.
          type: string
          enum:
            - enabled
            - invited
          example: enabled
        email:
          description: The email of the user.
          type: string
        username:
          description: The username of the user, only available for `enabled` users.
          type: string
        firstname:
          description: The first name of the user, only available for `enabled` users.
          type: string
        lastname:
          description: The last name of the user, only available for `enabled` users.
          type: string
        access:
          description: The access level of the user.
          type: string
          enum:
            - member
            - guest
            - anonymous
          example: member
        createdAt:
          description: >-
            The date and time the user was created, see [Date
            formats](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).
          type: string
          format: date-time
          example: '2023-02-18T10:15:00Z'
        pictureUrl:
          description: The URL of the user's picture, if available.
          type: string
          nullable: true
          example: https://example.com/user.jpg
      required:
        - id
        - model
        - state
        - email
        - access
        - createdAt
        - username
        - firstname
        - lastname
    UserObject:
      allOf:
        - $ref: '#/components/schemas/EnabledUserObject'
        - $ref: '#/components/schemas/InvitedUserObject'
    ListAllUsersResponse:
      type: object
      properties:
        list:
          description: The list of users.
          type: array
          items:
            $ref: '#/components/schemas/UserObject'
    GetUserRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
    GroupObject:
      type: object
      properties:
        id:
          description: The unique ID of the group.
          type: string
          format: uuid
        model:
          description: The model is always `group`.
          type: string
          enum:
            - group
        name:
          description: The name of the group.
          type: string
        handle:
          description: The handle of the group.
          type: string
        hue:
          description: The color/hue (0-360) of the group.
          type: number
        userIds:
          description: The list of user IDs that are in the group.
          type: array
          items:
            type: string
            format: uuid
        archived:
          description: Flag to indicate whether the group is archived.
          type: boolean
      required:
        - id
        - model
        - name
        - handle
        - hue
        - userIds
        - archived
    ListAllGroupsResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/GroupObject'
    SecurityLogEventObject:
      type: object
      properties:
        id:
          description: The unique ID of the event.
          type: string
          format: uuid
        model:
          description: The model is always `securityLogEvent`.
          type: string
          enum:
            - securityLogEvent
        createdAt:
          description: >-
            The date and time the event occurred. See [Date
            formats](https://developers.notion.com/reference/rich-text#date-property-values).
          type: string
          format: date-time
          example: '2023-02-18T11:20:00Z'
        userId:
          description: The ID of the user that initiated the event.
          type: string
          format: uuid
        userEmail:
          description: The email of the user that initiated the event.
          type: string
        eventType:
          description: |-
            Possible values are:

            - `FieldTemplateInsert`: an attribute was created
            - `FieldTemplateUpdate`: an attribute was updated
            - `FieldTemplateArchive`: an attribute was archived
            - `FieldTemplateRestore`: an attribute was restored
            - `PermissionUpsert`: a list permission was created or updated
            - `PermissionDelete`: a list permission was deleted
            - `UserInvite`: an user was invited
            - `UserSignUp`: an user signed up
          type: string
          enum:
            - FieldTemplateInsert
            - FieldTemplateUpdate
            - FieldTemplateArchive
            - FieldTemplateRestore
            - PermissionUpsert
            - PermissionDelete
            - UserInvite
            - UserSignUp
          example: FieldTemplateInsert
        oldValue:
          description: >-
            The old value of the attribute, permission, etc. that was updated or
            deleted.
          type: object
          example:
            email: invited@example.com
            access: member
        newValue:
          description: >-
            The new value of the attribute, permission, etc. that was updated or
            created.
          type: object
          example:
            email: invited@example.com
            access: member
      required:
        - id
        - model
        - createdAt
        - userId
        - userEmail
        - eventType
    ListAllSecurityLogEventsResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/SecurityLogEventObject'
    WorkspaceObject:
      type: object
      properties:
        id:
          description: The unique ID of the workspace.
          type: string
          format: uuid
          example: 5a5e8d3f-c2ff-4a7a-aba4-4f22b19c5369
        model:
          description: The model is always `workspace`.
          type: string
          example: workspace
        name:
          description: The name of the workspace.
          type: string
          example: Acme
        url:
          description: The full URL of the workspace.
          type: string
          example: https://acme.height.app
      required:
        - id
        - model
        - name
        - url
    ListsGetAllResponse:
      type: array
      items:
        $ref: '#/components/schemas/ListAllResponse'
    TasksUpdateMultipleResponse:
      type: array
      items:
        $ref: '#/components/schemas/PatchTasksResponse'
security:
  - apiKey: []
externalDocs:
  description: Height official API Docs
  url: https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda
